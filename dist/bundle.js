!function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(s,n,function(e){return t[e]}.bind(null,n));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="/dist/",i(i.s=35)}([function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.mount_collision_polygon=e.hsv2rgb=e.rgb2hsv=e.change_brightness=e.capitalize=e.get_directions=e.get_surroundings=e.kill_all_sprites=e.get_text_width=e.get_transition_directions=e.get_opposite_direction=e.transitions=e.is_close=e.is_inside_sector=e.range_360=e.variation=e.join_directions=e.split_direction=e.map_directions=e.directions_angles=e.base_actions=e.reverse_directions=e.directions_count=e.directions=e.element_names=e.ordered_elements=e.elements=void 0;const s=i(1),n=i(3);var a;function _(t){return t=(t%=s.degree360)<0?t+s.degree360:t}function o(t,e,i,n,a,o,r){const h=e*i*(e*i),c=Math.pow(o-n,2)+Math.pow(r-a,2),l=_(Math.atan2(a-r,o-n)),d=[0,s.degree90,Math.PI,s.degree270,s.degree360];let u=!1;for(let e=0;e<t.length;++e){let i=t[e],s=d[i-1];if(u=d[i]>=l&&l>=s,u)break}return c<=h&&u}function r(t,e,i){let s=Math.max(t,e,i),n=s-Math.min(t,e,i),a=n&&(s===t?(e-i)/n:s===e?2+(i-t)/n:4+(t-e)/n);return[60*(a<0?a+6:a),s&&n/s,s]}function h(t,e,i){let s=(s,n=(s+t/60)%6)=>i-i*e*Math.max(Math.min(n,4-n,1),0);return[s(5),s(3),s(1)]}!function(t){t.VENUS="venus",t.MERCURY="mercury",t.MARS="mars",t.JUPITER="jupiter",t.NO_ELEMENT="no_element"}(a=e.elements||(e.elements={})),e.ordered_elements=[a.VENUS,a.MERCURY,a.MARS,a.JUPITER],e.element_names={[a.VENUS]:"Earth",[a.MERCURY]:"Water",[a.MARS]:"Fire",[a.JUPITER]:"Wind"},e.directions={right:0,down_right:1,down:2,down_left:3,left:4,up_left:5,up:6,up_right:7},e.directions_count=Object.keys(e.directions).length,e.reverse_directions={[e.directions.right]:"right",[e.directions.up_right]:"up_right",[e.directions.up]:"up",[e.directions.up_left]:"up_left",[e.directions.left]:"left",[e.directions.down_left]:"down_left",[e.directions.down]:"down",[e.directions.down_right]:"down_right"},function(t){t.IDLE="idle",t.WALK="walk",t.DASH="dash",t.PUSH="push",t.CLIMB="climb",t.CAST="cast",t.JUMP="jump",t.BATTLE="battle"}(e.base_actions||(e.base_actions={})),e.directions_angles=function(t){return t*Math.PI/4},e.map_directions=function(t){return void 0===t||"all"===t?t:(t=Array.isArray(t)?t:[t]).map(t=>e.directions[t])},e.split_direction=function(t){if(t%2==0)return[t];let i=new Array(2);return i[0]=t===e.directions.right?t.up_right:t-1,i[1]=t===e.directions.up_right?e.directions.right:t+1,i},e.join_directions=function(t,i){return i=t===e.directions.up&&i===e.directions.right?e.directions_count:i,Math.min(t,i)+1},e.variation=function(){return n.random(0,4)},e.range_360=_,e.is_inside_sector=o,e.is_close=function(t,i,n,a,_,r){switch(t){case e.directions.up:return o([1,2],s.HERO_BODY_RADIUS,r,i,n,a,_);case e.directions.up_right:return o([1],s.HERO_BODY_RADIUS,r,i,n,a,_);case e.directions.right:return o([1,4],s.HERO_BODY_RADIUS,r,i,n,a,_);case e.directions.down_right:return o([4],s.HERO_BODY_RADIUS,r,i,n,a,_);case e.directions.down:return o([3,4],s.HERO_BODY_RADIUS,r,i,n,a,_);case e.directions.down_left:return o([3],s.HERO_BODY_RADIUS,r,i,n,a,_);case e.directions.left:return o([2,3],s.HERO_BODY_RADIUS,r,i,n,a,_);case e.directions.up_left:return o([2],s.HERO_BODY_RADIUS,r,i,n,a,_)}},e.transitions={[e.directions.up]:{[e.directions.up]:e.directions.up,[e.directions.down]:e.directions.down_left,[e.directions.left]:e.directions.up_left,[e.directions.right]:e.directions.up_right,[e.directions.down_left]:e.directions.left,[e.directions.down_right]:e.directions.right,[e.directions.up_left]:e.directions.up,[e.directions.up_right]:e.directions.up},[e.directions.down]:{[e.directions.up]:e.directions.up_left,[e.directions.down]:e.directions.down,[e.directions.left]:e.directions.down_left,[e.directions.right]:e.directions.down_right,[e.directions.down_left]:e.directions.down,[e.directions.down_right]:e.directions.down,[e.directions.up_left]:e.directions.left,[e.directions.up_right]:e.directions.right},[e.directions.left]:{[e.directions.up]:e.directions.up_left,[e.directions.down]:e.directions.down_left,[e.directions.left]:e.directions.left,[e.directions.right]:e.directions.up_right,[e.directions.down_left]:e.directions.left,[e.directions.down_right]:e.directions.down,[e.directions.up_left]:e.directions.left,[e.directions.up_right]:e.directions.up},[e.directions.right]:{[e.directions.up]:e.directions.up_right,[e.directions.down]:e.directions.down_right,[e.directions.left]:e.directions.down_left,[e.directions.right]:e.directions.right,[e.directions.down_left]:e.directions.down,[e.directions.down_right]:e.directions.right,[e.directions.up_left]:e.directions.up,[e.directions.up_right]:e.directions.right},[e.directions.down_left]:{[e.directions.up]:e.directions.up_left,[e.directions.down]:e.directions.down_left,[e.directions.left]:e.directions.down_left,[e.directions.right]:e.directions.down_right,[e.directions.down_left]:e.directions.down_left,[e.directions.down_right]:e.directions.down,[e.directions.up_left]:e.directions.left,[e.directions.up_right]:e.directions.up},[e.directions.down_right]:{[e.directions.up]:e.directions.up_right,[e.directions.down]:e.directions.down_right,[e.directions.left]:e.directions.down_left,[e.directions.right]:e.directions.down_right,[e.directions.down_left]:e.directions.down,[e.directions.down_right]:e.directions.down_right,[e.directions.up_left]:e.directions.left,[e.directions.up_right]:e.directions.right},[e.directions.up_left]:{[e.directions.up]:e.directions.up_left,[e.directions.down]:e.directions.down_left,[e.directions.left]:e.directions.up_left,[e.directions.right]:e.directions.up_right,[e.directions.down_left]:e.directions.left,[e.directions.down_right]:e.directions.right,[e.directions.up_left]:e.directions.up_left,[e.directions.up_right]:e.directions.up},[e.directions.up_right]:{[e.directions.up]:e.directions.up_right,[e.directions.down]:e.directions.down_right,[e.directions.left]:e.directions.up_left,[e.directions.right]:e.directions.up_right,[e.directions.down_left]:e.directions.left,[e.directions.down_right]:e.directions.right,[e.directions.up_left]:e.directions.up,[e.directions.up_right]:e.directions.up_right}},e.get_opposite_direction=function(t){switch(t){case e.directions.up:return e.directions.down;case e.directions.down:return e.directions.up;case e.directions.left:return e.directions.right;case e.directions.right:return e.directions.left}},e.get_transition_directions=function(t,i){return e.transitions[i][t]},e.get_text_width=function(t,e,i=!1){const n=i?"gs-italic-bmp-font":"gs-bmp-font";let a=t.add.bitmapText(0,0,n,e,s.FONT_SIZE);const _=a.width;return a.destroy(),_},e.kill_all_sprites=function(t,e=!1){t.children.forEach(t=>{e?t.parent.remove(t,!0):t.kill()})},e.get_surroundings=function(t,i,s=!1,n=1){let a=[{x:t-n,y:i,diag:!1,direction:e.directions.left},{x:t+n,y:i,diag:!1,direction:e.directions.right},{x:t,y:i-n,diag:!1,direction:e.directions.up},{x:t,y:i+n,diag:!1,direction:e.directions.down}];return s&&(a=a.concat([{x:t-n,y:i-n,diag:!0,direction:e.directions.up_left},{x:t+n,y:i-n,diag:!0,direction:e.directions.up_right},{x:t-n,y:i+n,diag:!0,direction:e.directions.down_left},{x:t+n,y:i+n,diag:!0,direction:e.directions.down_right}])),a},e.get_directions=function(t=!1){let i=[e.directions.up,e.directions.down,e.directions.left,e.directions.right];return t&&i.push(e.directions.up_left,e.directions.up_right,e.directions.down_left,e.directions.down_right),i},e.capitalize=function(t,e=!1){return(e?t.toLowerCase():t).replace(/(?:^|\s|["'([{])+\S/g,t=>t.toUpperCase())},e.change_brightness=function(t,e){t=3==(t="string"==typeof t?t.replace(/^\s*#|\s*$/g,""):t.toString(16)).length?t.replace(/(.)/g,"$1$1"):("000000"+t).slice(-6);let i,s,n,a=parseInt(t.substr(0,2),16),_=parseInt(t.substr(2,2),16),o=parseInt(t.substr(4,2),16);return[i,s,n]=r(a,_,o),n=n*e|0,[a,_,o]=h(i,s,n),t=((1<<24)+(a<<16)+(_<<8)+o).toString(16).slice(1),parseInt(t,16)},e.rgb2hsv=r,e.hsv2rgb=h,e.mount_collision_polygon=function(t,e,i){return void 0===i&&(i=0),[[i+e,e],...0===i?[]:[[t-i+e,e]],[t+e,i+e],...0===i?[]:[[t+e,t-i+e]],[t-i+e,t+e],...0===i?[]:[[i+e,t+e]],[e,t-i+e],...0===i?[]:[[e,i+e]]]}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.WORLD_MAP_SPRITE_SCALE_X=e.WORLD_MAP_SPRITE_SCALE_Y=e.WORLD_MAP_SPEED_WALK_REDUCE=e.WORLD_MAP_SPEED_DASH_REDUCE=e.AVATAR_SIZE=e.ELEM_ATTR_MAX=e.ELEM_ATTR_MIN=e.CAMERA_LERP=e.degree540=e.degree360=e.degree270=e.degree180=e.degree90=e.degree60=e.degree30=e.degree15=e.ICON_HEIGHT=e.ICON_WIDTH=e.PUSH_TIME=e.MAX_DIAG_WIN_HEIGHT=e.MAX_LINES_PER_DIAG_WIN=e.MAX_DIAG_WIN_WIDTH=e.SPACE_BETWEEN_LINES=e.WINDOW_PADDING_BOTTOM=e.WINDOW_PADDING_TOP=e.WINDOW_PADDING_H=e.OUTSIDE_BORDER_WIDTH=e.INSIDE_BORDER_WIDTH=e.FONT_SIZE=e.PURPLE_FONT_COLOR=e.BLUE_FONT_COLOR=e.RED_FONT_COLOR=e.YELLOW_FONT_COLOR=e.INACTIVE_FONT_COLOR=e.DEFAULT_FONT_COLOR=e.DEFAULT_WINDOW_COLOR=e.MAP_DAMPING=e.DELTA_TIME_FACTOR=e.INV_SQRT2=e.HERO_BODY_RADIUS_M7=e.HERO_BODY_RADIUS=e.TARGET_FPS=e.GAME_HEIGHT=e.GAME_WIDTH=void 0,e.GAME_WIDTH=240,e.GAME_HEIGHT=160,e.TARGET_FPS=60,e.HERO_BODY_RADIUS=7,e.HERO_BODY_RADIUS_M7=6.5,e.INV_SQRT2=1/Math.sqrt(2),e.DELTA_TIME_FACTOR=50/3,e.MAP_DAMPING=1,e.DEFAULT_WINDOW_COLOR=24704,e.DEFAULT_FONT_COLOR=16316664,e.INACTIVE_FONT_COLOR=560573,e.YELLOW_FONT_COLOR=16316480,e.RED_FONT_COLOR=16252928,e.BLUE_FONT_COLOR=248,e.PURPLE_FONT_COLOR=14708912,e.FONT_SIZE=8,e.INSIDE_BORDER_WIDTH=3,e.OUTSIDE_BORDER_WIDTH=1,e.WINDOW_PADDING_H=4,e.WINDOW_PADDING_TOP=8,e.WINDOW_PADDING_BOTTOM=4,e.SPACE_BETWEEN_LINES=8,e.MAX_DIAG_WIN_WIDTH=180,e.MAX_LINES_PER_DIAG_WIN=3,e.MAX_DIAG_WIN_HEIGHT=e.FONT_SIZE*e.MAX_LINES_PER_DIAG_WIN+e.SPACE_BETWEEN_LINES*(e.MAX_LINES_PER_DIAG_WIN-1)+e.WINDOW_PADDING_TOP+e.WINDOW_PADDING_BOTTOM,e.PUSH_TIME=850,e.ICON_WIDTH=14,e.ICON_HEIGHT=14,e.degree15=15*Math.PI/180,e.degree30=30*Math.PI/180,e.degree60=60*Math.PI/180,e.degree90=Math.PI/2,e.degree180=Math.PI,e.degree270=3*Math.PI/2,e.degree360=2*Math.PI,e.degree540=3*Math.PI,e.CAMERA_LERP=.15,e.ELEM_ATTR_MIN=-200,e.ELEM_ATTR_MAX=200,e.AVATAR_SIZE=32,e.WORLD_MAP_SPEED_DASH_REDUCE=-45,e.WORLD_MAP_SPEED_WALK_REDUCE=-40,e.WORLD_MAP_SPRITE_SCALE_Y=.84,e.WORLD_MAP_SPRITE_SCALE_X=.84},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Window=void 0;const s=i(1),n=i(11),a=i(0);class _{constructor(t,e,i,a,_,o=!0,r=s.DEFAULT_WINDOW_COLOR,h=s.DEFAULT_FONT_COLOR){this.game=t,this.group=t.add.group(),this.x=e,this.y=i,this.width=a,this.height=_,this.color=r,this.font_color=h,this.extra_sprites=[],this.internal_groups={},this.graphics=this.game.add.graphics(0,0),this.separators_graphics=this.game.add.graphics(0,0),this.draw_background(),this.draw_borders(),this.group.add(this.graphics),this.group.add(this.separators_graphics),this.group.alpha=0,this.group.width=0,this.group.height=0,this.need_pos_update=o,this.open=!1,this.lines_sprites=[],this.page_indicator=new n.PageIndicator(this.game,this)}get real_x(){return this.group.x}get real_y(){return this.group.y}make_item_obj(t,e,i){const s={icon:null,background:null,equipped:null,broken:null,quantity:null},n=e?e.x:0,a=e?e.y:0;return i?(i.bg&&(s.background=this.create_at_group(n,a,"item_border",void 0,void 0,i.internal_group)),s.icon=this.create_at_group(n,a,"items_icons",void 0,t,i.internal_group),i.broken&&(s.broken=this.create_at_group(n,a,"broken",void 0,void 0,i.internal_group)),i.equipped&&(s.equipped=this.create_at_group(n+_.ITEM_OBJ.EQUIPPED_X,a+_.ITEM_OBJ.EQUIPPED_Y,"equipped",void 0,void 0,i.internal_group)),i.quantity&&(s.quantity=this.game.add.bitmapText(n+_.ITEM_OBJ.QUANTITY_END_X,a+_.ITEM_OBJ.QUANTITY_Y,"gs-item-bmp-font",i.quantity.toString()),s.quantity.x-=s.quantity.width,i.internal_group?this.add_to_internal_group(i.internal_group,s.quantity):this.group.add(s.quantity))):s.icon=this.create_at_group(n,a,"items_icons",void 0,t),s}move_item_obj(t,e){for(let i in t)t[i]&&(t[i].x=e.x,t[i].y=e.y,"equipped"===i?(t[i].x+=_.ITEM_OBJ.EQUIPPED_X,t[i].y+=_.ITEM_OBJ.EQUIPPED_Y):"quantity"===i&&(t[i].x+=_.ITEM_OBJ.QUANTITY_END_X-t[i].width,t[i].y+=_.ITEM_OBJ.QUANTITY_Y))}clear_separators(){this.separators_graphics.clear()}draw_separator(t,e,i,s,n=!0){const _=a.change_brightness(this.color,1.3),o=a.change_brightness(this.color,.8),r=[a.change_brightness(this.color,.9),o,_];for(let a=0;a<r.length;++a){const _=r[a],o=a-1;this.separators_graphics.lineStyle(1,_),this.separators_graphics.moveTo(t+o*+n,e+o*+!n),this.separators_graphics.lineTo(i+o*+n,s+o*+!n)}}draw_background(){this.graphics.beginFill(this.color,1),this.graphics.drawRect(2,2,this.width,this.height),this.graphics.endFill()}draw_borders(){this.graphics.lineStyle(1,5395026),this.graphics.moveTo(0,1),this.graphics.lineTo(0,this.height+1),this.graphics.lineStyle(1,16777215),this.graphics.moveTo(1,1),this.graphics.lineTo(1,this.height+1),this.graphics.lineStyle(1,10855845),this.graphics.moveTo(2,1),this.graphics.lineTo(2,this.height),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(3,3),this.graphics.lineTo(3,this.height-1),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(this.width,2),this.graphics.lineTo(this.width,this.height),this.graphics.lineStyle(1,10855845),this.graphics.moveTo(this.width+2,1),this.graphics.lineTo(this.width+2,this.height+1),this.graphics.lineStyle(1,16777215),this.graphics.moveTo(this.width+1,1),this.graphics.lineTo(this.width+1,this.height),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(this.width+3,1),this.graphics.lineTo(this.width+3,this.height+1),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(2,0),this.graphics.lineTo(this.width+2,0),this.graphics.lineStyle(1,16777215),this.graphics.moveTo(2,1),this.graphics.lineTo(this.width+2,1),this.graphics.lineStyle(1,10855845),this.graphics.moveTo(3,2),this.graphics.lineTo(this.width+1,2),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(3,3),this.graphics.lineTo(this.width,3),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(3,this.height),this.graphics.lineTo(this.width,this.height),this.graphics.lineStyle(1,16777215),this.graphics.moveTo(2,this.height+1),this.graphics.lineTo(this.width+2,this.height+1),this.graphics.lineStyle(1,10855845),this.graphics.moveTo(2,this.height+2),this.graphics.lineTo(this.width+2,this.height+2),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(2,this.height+3),this.graphics.lineTo(this.width+2,this.height+3),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(1,1),this.graphics.lineTo(2,2),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(1,this.height+2),this.graphics.lineTo(2,this.height+3),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(this.width+2,this.height+2),this.graphics.lineTo(this.width+3,this.height+3),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(this.width+2,1),this.graphics.lineTo(this.width+3,2),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(4,4),this.graphics.lineTo(5,5),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(3,3),this.graphics.lineTo(4,4),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(this.width-1,this.height-1),this.graphics.lineTo(this.width,this.height),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(this.width-1,4),this.graphics.lineTo(this.width,5),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(4,this.height-1),this.graphics.lineTo(5,this.height)}update_size(t){void 0!==t.width&&(this.width=t.width),void 0!==t.height&&(this.height=t.height),this.graphics.clear(),this.draw_background(),this.draw_borders()}update_position(t,e=!0){void 0!==t.x&&(this.x=t.x),void 0!==t.y&&(this.y=t.y),this.group.x=(e?this.game.camera.x:0)+this.x,this.group.y=(e?this.game.camera.y:0)+this.y}define_internal_group(t,e={}){let i=this.game.add.group();return this.destroy_internal_group(t),this.internal_groups[t]=i,void 0!==e.x&&(i.x=e.x),void 0!==e.y&&(i.y=e.y),this.group.add(i),i}get_internal_group(t){return this.internal_groups[t]}add_to_internal_group(t,e){return t in this.internal_groups&&(this.internal_groups[t].add(e),!0)}destroy_internal_group(t){t in this.internal_groups&&this.internal_groups[t]&&this.internal_groups[t].destroy()}show(t,e=!0,i){this.group.alpha=1,this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y,this.close_callback=i,e?this.game.add.tween(this.group).to({width:this.graphics.width,height:this.graphics.height},_.TRANSITION_TIME,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.open=!0,void 0!==t&&t()}):(this.open=!0,this.group.width=this.graphics.width,this.group.height=this.graphics.height,void 0!==t&&t())}update(t=!1){(this.need_pos_update||t)&&(this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y)}add_sprite_to_group(t,e){let i=this.group;if(void 0!==e){const t=this.get_internal_group(e);t&&(i=t)}i.add(t),this.extra_sprites.push(t)}create_at_group(t,e,i,s,n,a){let _=this.group;if(void 0!==a){const t=this.get_internal_group(a);t&&(_=t)}let o=_.create(t,e,i,n);return void 0!==s&&(o.tint=s),this.extra_sprites.push(o),o}send_to_front(){this.group.parent.bringToTop(this.group)}remove_from_group(t,e=!0){if(void 0!==t)this.group.remove(t,e);else for(let t=0;t<this.extra_sprites.length;++t)this.group.remove(this.extra_sprites[t],e)}remove_smooth(t){t.smoothed=!1,t.autoRound=!0}set_text(t,e,i,n,a=!1,_=!1){for(let t=0;t<this.lines_sprites.length;++t)this.lines_sprites[t].text.destroy(),this.lines_sprites[t].shadow.destroy();this.lines_sprites=[];const o=a?-2:0,r=void 0===e?s.WINDOW_PADDING_H+4:e;let h=void 0===i?s.WINDOW_PADDING_TOP+o:i;const c=a?"gs-italic-bmp-font":"gs-bmp-font";let l,d,u=[];_&&(l=new Promise(t=>d=t));for(let e=0;e<t.length;++e){let i=t[e],a=this.game.add.bitmapText(r,h,c,_?"":i,s.FONT_SIZE),o=this.game.add.bitmapText(r+1,h+1,c,_?"":i,s.FONT_SIZE);if(h+=s.FONT_SIZE+(void 0===n?s.SPACE_BETWEEN_LINES:n),this.remove_smooth(a),a.tint=this.font_color,this.remove_smooth(o),o.tint=0,_){const t=i.split(" ");let e,s=0;const n=()=>{this.game.time.events.repeat(25,t.length,()=>{a.text+=t[s]+" ",o.text+=t[s]+" ",++s,s===t.length&&e()})};u.length?u.pop().then(n):n(),u.push(new Promise(t=>e=t))}this.group.add(o),this.group.add(a),this.lines_sprites.push({text:a,shadow:o})}return Promise.all(u).then(d),l}set_single_line_text(t,e=!1,i=!1){const n=i?s.WINDOW_PADDING_H+2:s.WINDOW_PADDING_H+4;let a=i?s.WINDOW_PADDING_TOP-2:s.WINDOW_PADDING_TOP;const _=i?"gs-italic-bmp-font":"gs-bmp-font";let o=this.game.add.bitmapText(n,a,_,t,s.FONT_SIZE),r=this.game.add.bitmapText(n+1,a+1,_,t,s.FONT_SIZE);return e&&(o.x-=o.width,r.x-=r.width),this.remove_smooth(o),o.tint=this.font_color,this.remove_smooth(r),r.tint=0,this.group.add(r),this.group.add(o),{text:o,shadow:r,right_align:e,initial_x:n}}set_text_in_position(t,e,i,n=!1,a=!1,_=this.font_color,o=!1,r,h=!1){const c=h?"gs-italic-bmp-font":"gs-bmp-font";let l,d=this.game.add.bitmapText(e,i,c,t,s.FONT_SIZE),u=this.game.add.bitmapText(e+1,i+1,c,t,s.FONT_SIZE);a&&(d.centerX=e,d.centerY=i,u.centerX=e+1,u.centerY=i+1),n&&(d.x-=d.width,u.x-=u.width),o&&(l=this.game.add.graphics(d.x-1,d.y),l.beginFill(this.color,1),l.drawRect(0,0,d.width+3,s.FONT_SIZE),l.endFill(),void 0!==r&&this.add_to_internal_group(r,l)||this.group.add(l)),this.remove_smooth(d),d.tint=_,this.remove_smooth(u),u.tint=0;let p=!1;return void 0!==r&&(p=this.add_to_internal_group(r,u)&&this.add_to_internal_group(r,d)),p||(this.group.add(u),this.group.add(d)),{text:d,shadow:u,right_align:n,initial_x:e,text_bg:l}}update_text(t,e,i,s){e.text.setText(t),e.shadow.setText(t),this.update_text_position({x:i,y:s},e)}update_text_position(t,e){void 0!==t.x&&(e.text.x=t.x,e.shadow.x=t.x+1,e.initial_x=t.x,e.text_bg&&(e.text_bg.x=e.text.x-1)),void 0!==t.y&&(e.text.y=t.y,e.shadow.y=t.y+1,e.text_bg&&(e.text_bg.y=e.text.y)),e.right_align&&(e.text.x=e.initial_x-e.text.width,e.shadow.x=e.initial_x-e.shadow.width+1,e.text_bg&&(e.text_bg.x=e.text.x-1))}update_text_color(t,e){e.text.tint=t}remove_text(t){t.text.destroy(),t.shadow.destroy(),t.text_bg&&t.text_bg.destroy()}close(t,e=!0){e?this.game.add.tween(this.group).to({width:0,height:0},_.TRANSITION_TIME,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.group.alpha=0,this.open=!1,this.page_indicator.is_set&&this.page_indicator.terminante(),void 0!==t&&t(),void 0!==this.close_callback&&this.close_callback()}):(this.group.alpha=0,this.open=!1,this.page_indicator.is_set&&this.page_indicator.terminante(),this.group.width=0,this.group.height=0,void 0!==t&&t(),void 0!==this.close_callback&&this.close_callback())}destroy(t,e){let i=()=>{this.page_indicator.is_set&&this.page_indicator.terminante(),this.group.destroy(),this.internal_groups={},void 0!==e&&e()};t?this.game.add.tween(this.group).to({width:0,height:0},_.TRANSITION_TIME,Phaser.Easing.Linear.None,!0).onComplete.addOnce(i):i()}}e.Window=_,_.TRANSITION_TIME=Phaser.Timer.QUARTER>>2,_.ITEM_OBJ={EQUIPPED_X:7,EQUIPPED_Y:8,QUANTITY_END_X:15,QUANTITY_Y:8}},function(t,e,i){(function(t,s){var n;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var a="Expected a function",_="__lodash_placeholder__",o=[["ary",128],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",32],["partialRight",64],["rearg",256]],r="[object Arguments]",h="[object Array]",c="[object Boolean]",l="[object Date]",d="[object Error]",u="[object Function]",p="[object GeneratorFunction]",m="[object Map]",g="[object Number]",w="[object Object]",f="[object RegExp]",y="[object Set]",b="[object String]",v="[object Symbol]",E="[object WeakMap]",x="[object ArrayBuffer]",T="[object DataView]",A="[object Float32Array]",S="[object Float64Array]",I="[object Int8Array]",k="[object Int16Array]",N="[object Int32Array]",R="[object Uint8Array]",P="[object Uint16Array]",O="[object Uint32Array]",j=/\b__p \+= '';/g,L=/\b(__p \+=) '' \+/g,M=/(__e\(.*?\)|\b__t\)) \+\n'';/g,D=/&(?:amp|lt|gt|quot|#39);/g,C=/[&<>"']/g,H=RegExp(D.source),Y=RegExp(C.source),U=/<%-([\s\S]+?)%>/g,G=/<%([\s\S]+?)%>/g,W=/<%=([\s\S]+?)%>/g,q=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,F=/^\w*$/,X=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,B=/[\\^$.*+?()[\]{}|]/g,z=RegExp(B.source),K=/^\s+|\s+$/g,V=/^\s+/,J=/\s+$/,$=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,Q=/\{\n\/\* \[wrapped with (.+)\] \*/,Z=/,? & /,tt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,et=/\\(\\)?/g,it=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,st=/\w*$/,nt=/^[-+]0x[0-9a-f]+$/i,at=/^0b[01]+$/i,_t=/^\[object .+?Constructor\]$/,ot=/^0o[0-7]+$/i,rt=/^(?:0|[1-9]\d*)$/,ht=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,ct=/($^)/,lt=/['\n\r\u2028\u2029\\]/g,dt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",ut="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",pt="[\\ud800-\\udfff]",mt="["+ut+"]",gt="["+dt+"]",wt="\\d+",ft="[\\u2700-\\u27bf]",yt="[a-z\\xdf-\\xf6\\xf8-\\xff]",bt="[^\\ud800-\\udfff"+ut+wt+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",vt="\\ud83c[\\udffb-\\udfff]",Et="[^\\ud800-\\udfff]",xt="(?:\\ud83c[\\udde6-\\uddff]){2}",Tt="[\\ud800-\\udbff][\\udc00-\\udfff]",At="[A-Z\\xc0-\\xd6\\xd8-\\xde]",St="(?:"+yt+"|"+bt+")",It="(?:"+At+"|"+bt+")",kt="(?:"+gt+"|"+vt+")"+"?",Nt="[\\ufe0e\\ufe0f]?"+kt+("(?:\\u200d(?:"+[Et,xt,Tt].join("|")+")[\\ufe0e\\ufe0f]?"+kt+")*"),Rt="(?:"+[ft,xt,Tt].join("|")+")"+Nt,Pt="(?:"+[Et+gt+"?",gt,xt,Tt,pt].join("|")+")",Ot=RegExp("['’]","g"),jt=RegExp(gt,"g"),Lt=RegExp(vt+"(?="+vt+")|"+Pt+Nt,"g"),Mt=RegExp([At+"?"+yt+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[mt,At,"$"].join("|")+")",It+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[mt,At+St,"$"].join("|")+")",At+"?"+St+"+(?:['’](?:d|ll|m|re|s|t|ve))?",At+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",wt,Rt].join("|"),"g"),Dt=RegExp("[\\u200d\\ud800-\\udfff"+dt+"\\ufe0e\\ufe0f]"),Ct=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Ht=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Yt=-1,Ut={};Ut[A]=Ut[S]=Ut[I]=Ut[k]=Ut[N]=Ut[R]=Ut["[object Uint8ClampedArray]"]=Ut[P]=Ut[O]=!0,Ut[r]=Ut[h]=Ut[x]=Ut[c]=Ut[T]=Ut[l]=Ut[d]=Ut[u]=Ut[m]=Ut[g]=Ut[w]=Ut[f]=Ut[y]=Ut[b]=Ut[E]=!1;var Gt={};Gt[r]=Gt[h]=Gt[x]=Gt[T]=Gt[c]=Gt[l]=Gt[A]=Gt[S]=Gt[I]=Gt[k]=Gt[N]=Gt[m]=Gt[g]=Gt[w]=Gt[f]=Gt[y]=Gt[b]=Gt[v]=Gt[R]=Gt["[object Uint8ClampedArray]"]=Gt[P]=Gt[O]=!0,Gt[d]=Gt[u]=Gt[E]=!1;var Wt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},qt=parseFloat,Ft=parseInt,Xt="object"==typeof t&&t&&t.Object===Object&&t,Bt="object"==typeof self&&self&&self.Object===Object&&self,zt=Xt||Bt||Function("return this")(),Kt=e&&!e.nodeType&&e,Vt=Kt&&"object"==typeof s&&s&&!s.nodeType&&s,Jt=Vt&&Vt.exports===Kt,$t=Jt&&Xt.process,Qt=function(){try{var t=Vt&&Vt.require&&Vt.require("util").types;return t||$t&&$t.binding&&$t.binding("util")}catch(t){}}(),Zt=Qt&&Qt.isArrayBuffer,te=Qt&&Qt.isDate,ee=Qt&&Qt.isMap,ie=Qt&&Qt.isRegExp,se=Qt&&Qt.isSet,ne=Qt&&Qt.isTypedArray;function ae(t,e,i){switch(i.length){case 0:return t.call(e);case 1:return t.call(e,i[0]);case 2:return t.call(e,i[0],i[1]);case 3:return t.call(e,i[0],i[1],i[2])}return t.apply(e,i)}function _e(t,e,i,s){for(var n=-1,a=null==t?0:t.length;++n<a;){var _=t[n];e(s,_,i(_),t)}return s}function oe(t,e){for(var i=-1,s=null==t?0:t.length;++i<s&&!1!==e(t[i],i,t););return t}function re(t,e){for(var i=null==t?0:t.length;i--&&!1!==e(t[i],i,t););return t}function he(t,e){for(var i=-1,s=null==t?0:t.length;++i<s;)if(!e(t[i],i,t))return!1;return!0}function ce(t,e){for(var i=-1,s=null==t?0:t.length,n=0,a=[];++i<s;){var _=t[i];e(_,i,t)&&(a[n++]=_)}return a}function le(t,e){return!!(null==t?0:t.length)&&ve(t,e,0)>-1}function de(t,e,i){for(var s=-1,n=null==t?0:t.length;++s<n;)if(i(e,t[s]))return!0;return!1}function ue(t,e){for(var i=-1,s=null==t?0:t.length,n=Array(s);++i<s;)n[i]=e(t[i],i,t);return n}function pe(t,e){for(var i=-1,s=e.length,n=t.length;++i<s;)t[n+i]=e[i];return t}function me(t,e,i,s){var n=-1,a=null==t?0:t.length;for(s&&a&&(i=t[++n]);++n<a;)i=e(i,t[n],n,t);return i}function ge(t,e,i,s){var n=null==t?0:t.length;for(s&&n&&(i=t[--n]);n--;)i=e(i,t[n],n,t);return i}function we(t,e){for(var i=-1,s=null==t?0:t.length;++i<s;)if(e(t[i],i,t))return!0;return!1}var fe=Ae("length");function ye(t,e,i){var s;return i(t,(function(t,i,n){if(e(t,i,n))return s=i,!1})),s}function be(t,e,i,s){for(var n=t.length,a=i+(s?1:-1);s?a--:++a<n;)if(e(t[a],a,t))return a;return-1}function ve(t,e,i){return e==e?function(t,e,i){var s=i-1,n=t.length;for(;++s<n;)if(t[s]===e)return s;return-1}(t,e,i):be(t,xe,i)}function Ee(t,e,i,s){for(var n=i-1,a=t.length;++n<a;)if(s(t[n],e))return n;return-1}function xe(t){return t!=t}function Te(t,e){var i=null==t?0:t.length;return i?ke(t,e)/i:NaN}function Ae(t){return function(e){return null==e?void 0:e[t]}}function Se(t){return function(e){return null==t?void 0:t[e]}}function Ie(t,e,i,s,n){return n(t,(function(t,n,a){i=s?(s=!1,t):e(i,t,n,a)})),i}function ke(t,e){for(var i,s=-1,n=t.length;++s<n;){var a=e(t[s]);void 0!==a&&(i=void 0===i?a:i+a)}return i}function Ne(t,e){for(var i=-1,s=Array(t);++i<t;)s[i]=e(i);return s}function Re(t){return function(e){return t(e)}}function Pe(t,e){return ue(e,(function(e){return t[e]}))}function Oe(t,e){return t.has(e)}function je(t,e){for(var i=-1,s=t.length;++i<s&&ve(e,t[i],0)>-1;);return i}function Le(t,e){for(var i=t.length;i--&&ve(e,t[i],0)>-1;);return i}function Me(t,e){for(var i=t.length,s=0;i--;)t[i]===e&&++s;return s}var De=Se({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Ce=Se({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function He(t){return"\\"+Wt[t]}function Ye(t){return Dt.test(t)}function Ue(t){var e=-1,i=Array(t.size);return t.forEach((function(t,s){i[++e]=[s,t]})),i}function Ge(t,e){return function(i){return t(e(i))}}function We(t,e){for(var i=-1,s=t.length,n=0,a=[];++i<s;){var o=t[i];o!==e&&o!==_||(t[i]=_,a[n++]=i)}return a}function qe(t){var e=-1,i=Array(t.size);return t.forEach((function(t){i[++e]=t})),i}function Fe(t){var e=-1,i=Array(t.size);return t.forEach((function(t){i[++e]=[t,t]})),i}function Xe(t){return Ye(t)?function(t){var e=Lt.lastIndex=0;for(;Lt.test(t);)++e;return e}(t):fe(t)}function Be(t){return Ye(t)?function(t){return t.match(Lt)||[]}(t):function(t){return t.split("")}(t)}var ze=Se({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Ke=function t(e){var i,s=(e=null==e?zt:Ke.defaults(zt.Object(),e,Ke.pick(zt,Ht))).Array,n=e.Date,dt=e.Error,ut=e.Function,pt=e.Math,mt=e.Object,gt=e.RegExp,wt=e.String,ft=e.TypeError,yt=s.prototype,bt=ut.prototype,vt=mt.prototype,Et=e["__core-js_shared__"],xt=bt.toString,Tt=vt.hasOwnProperty,At=0,St=(i=/[^.]+$/.exec(Et&&Et.keys&&Et.keys.IE_PROTO||""))?"Symbol(src)_1."+i:"",It=vt.toString,kt=xt.call(mt),Nt=zt._,Rt=gt("^"+xt.call(Tt).replace(B,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Pt=Jt?e.Buffer:void 0,Lt=e.Symbol,Dt=e.Uint8Array,Wt=Pt?Pt.allocUnsafe:void 0,Xt=Ge(mt.getPrototypeOf,mt),Bt=mt.create,Kt=vt.propertyIsEnumerable,Vt=yt.splice,$t=Lt?Lt.isConcatSpreadable:void 0,Qt=Lt?Lt.iterator:void 0,fe=Lt?Lt.toStringTag:void 0,Se=function(){try{var t=Zn(mt,"defineProperty");return t({},"",{}),t}catch(t){}}(),Ve=e.clearTimeout!==zt.clearTimeout&&e.clearTimeout,Je=n&&n.now!==zt.Date.now&&n.now,$e=e.setTimeout!==zt.setTimeout&&e.setTimeout,Qe=pt.ceil,Ze=pt.floor,ti=mt.getOwnPropertySymbols,ei=Pt?Pt.isBuffer:void 0,ii=e.isFinite,si=yt.join,ni=Ge(mt.keys,mt),ai=pt.max,_i=pt.min,oi=n.now,ri=e.parseInt,hi=pt.random,ci=yt.reverse,li=Zn(e,"DataView"),di=Zn(e,"Map"),ui=Zn(e,"Promise"),pi=Zn(e,"Set"),mi=Zn(e,"WeakMap"),gi=Zn(mt,"create"),wi=mi&&new mi,fi={},yi=Sa(li),bi=Sa(di),vi=Sa(ui),Ei=Sa(pi),xi=Sa(mi),Ti=Lt?Lt.prototype:void 0,Ai=Ti?Ti.valueOf:void 0,Si=Ti?Ti.toString:void 0;function Ii(t){if(q_(t)&&!O_(t)&&!(t instanceof Pi)){if(t instanceof Ri)return t;if(Tt.call(t,"__wrapped__"))return Ia(t)}return new Ri(t)}var ki=function(){function t(){}return function(e){if(!W_(e))return{};if(Bt)return Bt(e);t.prototype=e;var i=new t;return t.prototype=void 0,i}}();function Ni(){}function Ri(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=void 0}function Pi(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=4294967295,this.__views__=[]}function Oi(t){var e=-1,i=null==t?0:t.length;for(this.clear();++e<i;){var s=t[e];this.set(s[0],s[1])}}function ji(t){var e=-1,i=null==t?0:t.length;for(this.clear();++e<i;){var s=t[e];this.set(s[0],s[1])}}function Li(t){var e=-1,i=null==t?0:t.length;for(this.clear();++e<i;){var s=t[e];this.set(s[0],s[1])}}function Mi(t){var e=-1,i=null==t?0:t.length;for(this.__data__=new Li;++e<i;)this.add(t[e])}function Di(t){var e=this.__data__=new ji(t);this.size=e.size}function Ci(t,e){var i=O_(t),s=!i&&P_(t),n=!i&&!s&&D_(t),a=!i&&!s&&!n&&$_(t),_=i||s||n||a,o=_?Ne(t.length,wt):[],r=o.length;for(var h in t)!e&&!Tt.call(t,h)||_&&("length"==h||n&&("offset"==h||"parent"==h)||a&&("buffer"==h||"byteLength"==h||"byteOffset"==h)||_a(h,r))||o.push(h);return o}function Hi(t){var e=t.length;return e?t[Ms(0,e-1)]:void 0}function Yi(t,e){return xa(wn(t),Ki(e,0,t.length))}function Ui(t){return xa(wn(t))}function Gi(t,e,i){(void 0!==i&&!k_(t[e],i)||void 0===i&&!(e in t))&&Bi(t,e,i)}function Wi(t,e,i){var s=t[e];Tt.call(t,e)&&k_(s,i)&&(void 0!==i||e in t)||Bi(t,e,i)}function qi(t,e){for(var i=t.length;i--;)if(k_(t[i][0],e))return i;return-1}function Fi(t,e,i,s){return Zi(t,(function(t,n,a){e(s,t,i(t),a)})),s}function Xi(t,e){return t&&fn(e,bo(e),t)}function Bi(t,e,i){"__proto__"==e&&Se?Se(t,e,{configurable:!0,enumerable:!0,value:i,writable:!0}):t[e]=i}function zi(t,e){for(var i=-1,n=e.length,a=s(n),_=null==t;++i<n;)a[i]=_?void 0:mo(t,e[i]);return a}function Ki(t,e,i){return t==t&&(void 0!==i&&(t=t<=i?t:i),void 0!==e&&(t=t>=e?t:e)),t}function Vi(t,e,i,s,n,a){var _,o=1&e,h=2&e,d=4&e;if(i&&(_=n?i(t,s,n,a):i(t)),void 0!==_)return _;if(!W_(t))return t;var E=O_(t);if(E){if(_=function(t){var e=t.length,i=new t.constructor(e);e&&"string"==typeof t[0]&&Tt.call(t,"index")&&(i.index=t.index,i.input=t.input);return i}(t),!o)return wn(t,_)}else{var j=ia(t),L=j==u||j==p;if(D_(t))return ln(t,o);if(j==w||j==r||L&&!n){if(_=h||L?{}:na(t),!o)return h?function(t,e){return fn(t,ea(t),e)}(t,function(t,e){return t&&fn(e,vo(e),t)}(_,t)):function(t,e){return fn(t,ta(t),e)}(t,Xi(_,t))}else{if(!Gt[j])return n?t:{};_=function(t,e,i){var s=t.constructor;switch(e){case x:return dn(t);case c:case l:return new s(+t);case T:return function(t,e){var i=e?dn(t.buffer):t.buffer;return new t.constructor(i,t.byteOffset,t.byteLength)}(t,i);case A:case S:case I:case k:case N:case R:case"[object Uint8ClampedArray]":case P:case O:return un(t,i);case m:return new s;case g:case b:return new s(t);case f:return function(t){var e=new t.constructor(t.source,st.exec(t));return e.lastIndex=t.lastIndex,e}(t);case y:return new s;case v:return n=t,Ai?mt(Ai.call(n)):{}}var n}(t,j,o)}}a||(a=new Di);var M=a.get(t);if(M)return M;a.set(t,_),K_(t)?t.forEach((function(s){_.add(Vi(s,e,i,s,t,a))})):F_(t)&&t.forEach((function(s,n){_.set(n,Vi(s,e,i,n,t,a))}));var D=E?void 0:(d?h?Bn:Xn:h?vo:bo)(t);return oe(D||t,(function(s,n){D&&(s=t[n=s]),Wi(_,n,Vi(s,e,i,n,t,a))})),_}function Ji(t,e,i){var s=i.length;if(null==t)return!s;for(t=mt(t);s--;){var n=i[s],a=e[n],_=t[n];if(void 0===_&&!(n in t)||!a(_))return!1}return!0}function $i(t,e,i){if("function"!=typeof t)throw new ft(a);return ya((function(){t.apply(void 0,i)}),e)}function Qi(t,e,i,s){var n=-1,a=le,_=!0,o=t.length,r=[],h=e.length;if(!o)return r;i&&(e=ue(e,Re(i))),s?(a=de,_=!1):e.length>=200&&(a=Oe,_=!1,e=new Mi(e));t:for(;++n<o;){var c=t[n],l=null==i?c:i(c);if(c=s||0!==c?c:0,_&&l==l){for(var d=h;d--;)if(e[d]===l)continue t;r.push(c)}else a(e,l,s)||r.push(c)}return r}Ii.templateSettings={escape:U,evaluate:G,interpolate:W,variable:"",imports:{_:Ii}},Ii.prototype=Ni.prototype,Ii.prototype.constructor=Ii,Ri.prototype=ki(Ni.prototype),Ri.prototype.constructor=Ri,Pi.prototype=ki(Ni.prototype),Pi.prototype.constructor=Pi,Oi.prototype.clear=function(){this.__data__=gi?gi(null):{},this.size=0},Oi.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},Oi.prototype.get=function(t){var e=this.__data__;if(gi){var i=e[t];return"__lodash_hash_undefined__"===i?void 0:i}return Tt.call(e,t)?e[t]:void 0},Oi.prototype.has=function(t){var e=this.__data__;return gi?void 0!==e[t]:Tt.call(e,t)},Oi.prototype.set=function(t,e){var i=this.__data__;return this.size+=this.has(t)?0:1,i[t]=gi&&void 0===e?"__lodash_hash_undefined__":e,this},ji.prototype.clear=function(){this.__data__=[],this.size=0},ji.prototype.delete=function(t){var e=this.__data__,i=qi(e,t);return!(i<0)&&(i==e.length-1?e.pop():Vt.call(e,i,1),--this.size,!0)},ji.prototype.get=function(t){var e=this.__data__,i=qi(e,t);return i<0?void 0:e[i][1]},ji.prototype.has=function(t){return qi(this.__data__,t)>-1},ji.prototype.set=function(t,e){var i=this.__data__,s=qi(i,t);return s<0?(++this.size,i.push([t,e])):i[s][1]=e,this},Li.prototype.clear=function(){this.size=0,this.__data__={hash:new Oi,map:new(di||ji),string:new Oi}},Li.prototype.delete=function(t){var e=$n(this,t).delete(t);return this.size-=e?1:0,e},Li.prototype.get=function(t){return $n(this,t).get(t)},Li.prototype.has=function(t){return $n(this,t).has(t)},Li.prototype.set=function(t,e){var i=$n(this,t),s=i.size;return i.set(t,e),this.size+=i.size==s?0:1,this},Mi.prototype.add=Mi.prototype.push=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this},Mi.prototype.has=function(t){return this.__data__.has(t)},Di.prototype.clear=function(){this.__data__=new ji,this.size=0},Di.prototype.delete=function(t){var e=this.__data__,i=e.delete(t);return this.size=e.size,i},Di.prototype.get=function(t){return this.__data__.get(t)},Di.prototype.has=function(t){return this.__data__.has(t)},Di.prototype.set=function(t,e){var i=this.__data__;if(i instanceof ji){var s=i.__data__;if(!di||s.length<199)return s.push([t,e]),this.size=++i.size,this;i=this.__data__=new Li(s)}return i.set(t,e),this.size=i.size,this};var Zi=vn(os),ts=vn(rs,!0);function es(t,e){var i=!0;return Zi(t,(function(t,s,n){return i=!!e(t,s,n)})),i}function is(t,e,i){for(var s=-1,n=t.length;++s<n;){var a=t[s],_=e(a);if(null!=_&&(void 0===o?_==_&&!J_(_):i(_,o)))var o=_,r=a}return r}function ss(t,e){var i=[];return Zi(t,(function(t,s,n){e(t,s,n)&&i.push(t)})),i}function ns(t,e,i,s,n){var a=-1,_=t.length;for(i||(i=aa),n||(n=[]);++a<_;){var o=t[a];e>0&&i(o)?e>1?ns(o,e-1,i,s,n):pe(n,o):s||(n[n.length]=o)}return n}var as=En(),_s=En(!0);function os(t,e){return t&&as(t,e,bo)}function rs(t,e){return t&&_s(t,e,bo)}function hs(t,e){return ce(e,(function(e){return Y_(t[e])}))}function cs(t,e){for(var i=0,s=(e=on(e,t)).length;null!=t&&i<s;)t=t[Aa(e[i++])];return i&&i==s?t:void 0}function ls(t,e,i){var s=e(t);return O_(t)?s:pe(s,i(t))}function ds(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":fe&&fe in mt(t)?function(t){var e=Tt.call(t,fe),i=t[fe];try{t[fe]=void 0;var s=!0}catch(t){}var n=It.call(t);s&&(e?t[fe]=i:delete t[fe]);return n}(t):function(t){return It.call(t)}(t)}function us(t,e){return t>e}function ps(t,e){return null!=t&&Tt.call(t,e)}function ms(t,e){return null!=t&&e in mt(t)}function gs(t,e,i){for(var n=i?de:le,a=t[0].length,_=t.length,o=_,r=s(_),h=1/0,c=[];o--;){var l=t[o];o&&e&&(l=ue(l,Re(e))),h=_i(l.length,h),r[o]=!i&&(e||a>=120&&l.length>=120)?new Mi(o&&l):void 0}l=t[0];var d=-1,u=r[0];t:for(;++d<a&&c.length<h;){var p=l[d],m=e?e(p):p;if(p=i||0!==p?p:0,!(u?Oe(u,m):n(c,m,i))){for(o=_;--o;){var g=r[o];if(!(g?Oe(g,m):n(t[o],m,i)))continue t}u&&u.push(m),c.push(p)}}return c}function ws(t,e,i){var s=null==(t=ma(t,e=on(e,t)))?t:t[Aa(Ha(e))];return null==s?void 0:ae(s,t,i)}function fs(t){return q_(t)&&ds(t)==r}function ys(t,e,i,s,n){return t===e||(null==t||null==e||!q_(t)&&!q_(e)?t!=t&&e!=e:function(t,e,i,s,n,a){var _=O_(t),o=O_(e),u=_?h:ia(t),p=o?h:ia(e),E=(u=u==r?w:u)==w,A=(p=p==r?w:p)==w,S=u==p;if(S&&D_(t)){if(!D_(e))return!1;_=!0,E=!1}if(S&&!E)return a||(a=new Di),_||$_(t)?qn(t,e,i,s,n,a):function(t,e,i,s,n,a,_){switch(i){case T:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case x:return!(t.byteLength!=e.byteLength||!a(new Dt(t),new Dt(e)));case c:case l:case g:return k_(+t,+e);case d:return t.name==e.name&&t.message==e.message;case f:case b:return t==e+"";case m:var o=Ue;case y:var r=1&s;if(o||(o=qe),t.size!=e.size&&!r)return!1;var h=_.get(t);if(h)return h==e;s|=2,_.set(t,e);var u=qn(o(t),o(e),s,n,a,_);return _.delete(t),u;case v:if(Ai)return Ai.call(t)==Ai.call(e)}return!1}(t,e,u,i,s,n,a);if(!(1&i)){var I=E&&Tt.call(t,"__wrapped__"),k=A&&Tt.call(e,"__wrapped__");if(I||k){var N=I?t.value():t,R=k?e.value():e;return a||(a=new Di),n(N,R,i,s,a)}}if(!S)return!1;return a||(a=new Di),function(t,e,i,s,n,a){var _=1&i,o=Xn(t),r=o.length,h=Xn(e).length;if(r!=h&&!_)return!1;var c=r;for(;c--;){var l=o[c];if(!(_?l in e:Tt.call(e,l)))return!1}var d=a.get(t),u=a.get(e);if(d&&u)return d==e&&u==t;var p=!0;a.set(t,e),a.set(e,t);var m=_;for(;++c<r;){l=o[c];var g=t[l],w=e[l];if(s)var f=_?s(w,g,l,e,t,a):s(g,w,l,t,e,a);if(!(void 0===f?g===w||n(g,w,i,s,a):f)){p=!1;break}m||(m="constructor"==l)}if(p&&!m){var y=t.constructor,b=e.constructor;y==b||!("constructor"in t)||!("constructor"in e)||"function"==typeof y&&y instanceof y&&"function"==typeof b&&b instanceof b||(p=!1)}return a.delete(t),a.delete(e),p}(t,e,i,s,n,a)}(t,e,i,s,ys,n))}function bs(t,e,i,s){var n=i.length,a=n,_=!s;if(null==t)return!a;for(t=mt(t);n--;){var o=i[n];if(_&&o[2]?o[1]!==t[o[0]]:!(o[0]in t))return!1}for(;++n<a;){var r=(o=i[n])[0],h=t[r],c=o[1];if(_&&o[2]){if(void 0===h&&!(r in t))return!1}else{var l=new Di;if(s)var d=s(h,c,r,t,e,l);if(!(void 0===d?ys(c,h,3,s,l):d))return!1}}return!0}function vs(t){return!(!W_(t)||(e=t,St&&St in e))&&(Y_(t)?Rt:_t).test(Sa(t));var e}function Es(t){return"function"==typeof t?t:null==t?Bo:"object"==typeof t?O_(t)?ks(t[0],t[1]):Is(t):er(t)}function xs(t){if(!la(t))return ni(t);var e=[];for(var i in mt(t))Tt.call(t,i)&&"constructor"!=i&&e.push(i);return e}function Ts(t){if(!W_(t))return function(t){var e=[];if(null!=t)for(var i in mt(t))e.push(i);return e}(t);var e=la(t),i=[];for(var s in t)("constructor"!=s||!e&&Tt.call(t,s))&&i.push(s);return i}function As(t,e){return t<e}function Ss(t,e){var i=-1,n=L_(t)?s(t.length):[];return Zi(t,(function(t,s,a){n[++i]=e(t,s,a)})),n}function Is(t){var e=Qn(t);return 1==e.length&&e[0][2]?ua(e[0][0],e[0][1]):function(i){return i===t||bs(i,t,e)}}function ks(t,e){return ra(t)&&da(e)?ua(Aa(t),e):function(i){var s=mo(i,t);return void 0===s&&s===e?go(i,t):ys(e,s,3)}}function Ns(t,e,i,s,n){t!==e&&as(e,(function(a,_){if(n||(n=new Di),W_(a))!function(t,e,i,s,n,a,_){var o=wa(t,i),r=wa(e,i),h=_.get(r);if(h)return void Gi(t,i,h);var c=a?a(o,r,i+"",t,e,_):void 0,l=void 0===c;if(l){var d=O_(r),u=!d&&D_(r),p=!d&&!u&&$_(r);c=r,d||u||p?O_(o)?c=o:M_(o)?c=wn(o):u?(l=!1,c=ln(r,!0)):p?(l=!1,c=un(r,!0)):c=[]:B_(r)||P_(r)?(c=o,P_(o)?c=ao(o):W_(o)&&!Y_(o)||(c=na(r))):l=!1}l&&(_.set(r,c),n(c,r,s,a,_),_.delete(r));Gi(t,i,c)}(t,e,_,i,Ns,s,n);else{var o=s?s(wa(t,_),a,_+"",t,e,n):void 0;void 0===o&&(o=a),Gi(t,_,o)}}),vo)}function Rs(t,e){var i=t.length;if(i)return _a(e+=e<0?i:0,i)?t[e]:void 0}function Ps(t,e,i){e=e.length?ue(e,(function(t){return O_(t)?function(e){return cs(e,1===t.length?t[0]:t)}:t})):[Bo];var s=-1;return e=ue(e,Re(Jn())),function(t,e){var i=t.length;for(t.sort(e);i--;)t[i]=t[i].value;return t}(Ss(t,(function(t,i,n){return{criteria:ue(e,(function(e){return e(t)})),index:++s,value:t}})),(function(t,e){return function(t,e,i){var s=-1,n=t.criteria,a=e.criteria,_=n.length,o=i.length;for(;++s<_;){var r=pn(n[s],a[s]);if(r){if(s>=o)return r;var h=i[s];return r*("desc"==h?-1:1)}}return t.index-e.index}(t,e,i)}))}function Os(t,e,i){for(var s=-1,n=e.length,a={};++s<n;){var _=e[s],o=cs(t,_);i(o,_)&&Us(a,on(_,t),o)}return a}function js(t,e,i,s){var n=s?Ee:ve,a=-1,_=e.length,o=t;for(t===e&&(e=wn(e)),i&&(o=ue(t,Re(i)));++a<_;)for(var r=0,h=e[a],c=i?i(h):h;(r=n(o,c,r,s))>-1;)o!==t&&Vt.call(o,r,1),Vt.call(t,r,1);return t}function Ls(t,e){for(var i=t?e.length:0,s=i-1;i--;){var n=e[i];if(i==s||n!==a){var a=n;_a(n)?Vt.call(t,n,1):Qs(t,n)}}return t}function Ms(t,e){return t+Ze(hi()*(e-t+1))}function Ds(t,e){var i="";if(!t||e<1||e>9007199254740991)return i;do{e%2&&(i+=t),(e=Ze(e/2))&&(t+=t)}while(e);return i}function Cs(t,e){return ba(pa(t,e,Bo),t+"")}function Hs(t){return Hi(No(t))}function Ys(t,e){var i=No(t);return xa(i,Ki(e,0,i.length))}function Us(t,e,i,s){if(!W_(t))return t;for(var n=-1,a=(e=on(e,t)).length,_=a-1,o=t;null!=o&&++n<a;){var r=Aa(e[n]),h=i;if("__proto__"===r||"constructor"===r||"prototype"===r)return t;if(n!=_){var c=o[r];void 0===(h=s?s(c,r,o):void 0)&&(h=W_(c)?c:_a(e[n+1])?[]:{})}Wi(o,r,h),o=o[r]}return t}var Gs=wi?function(t,e){return wi.set(t,e),t}:Bo,Ws=Se?function(t,e){return Se(t,"toString",{configurable:!0,enumerable:!1,value:qo(e),writable:!0})}:Bo;function qs(t){return xa(No(t))}function Fs(t,e,i){var n=-1,a=t.length;e<0&&(e=-e>a?0:a+e),(i=i>a?a:i)<0&&(i+=a),a=e>i?0:i-e>>>0,e>>>=0;for(var _=s(a);++n<a;)_[n]=t[n+e];return _}function Xs(t,e){var i;return Zi(t,(function(t,s,n){return!(i=e(t,s,n))})),!!i}function Bs(t,e,i){var s=0,n=null==t?s:t.length;if("number"==typeof e&&e==e&&n<=2147483647){for(;s<n;){var a=s+n>>>1,_=t[a];null!==_&&!J_(_)&&(i?_<=e:_<e)?s=a+1:n=a}return n}return zs(t,e,Bo,i)}function zs(t,e,i,s){var n=0,a=null==t?0:t.length;if(0===a)return 0;for(var _=(e=i(e))!=e,o=null===e,r=J_(e),h=void 0===e;n<a;){var c=Ze((n+a)/2),l=i(t[c]),d=void 0!==l,u=null===l,p=l==l,m=J_(l);if(_)var g=s||p;else g=h?p&&(s||d):o?p&&d&&(s||!u):r?p&&d&&!u&&(s||!m):!u&&!m&&(s?l<=e:l<e);g?n=c+1:a=c}return _i(a,4294967294)}function Ks(t,e){for(var i=-1,s=t.length,n=0,a=[];++i<s;){var _=t[i],o=e?e(_):_;if(!i||!k_(o,r)){var r=o;a[n++]=0===_?0:_}}return a}function Vs(t){return"number"==typeof t?t:J_(t)?NaN:+t}function Js(t){if("string"==typeof t)return t;if(O_(t))return ue(t,Js)+"";if(J_(t))return Si?Si.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function $s(t,e,i){var s=-1,n=le,a=t.length,_=!0,o=[],r=o;if(i)_=!1,n=de;else if(a>=200){var h=e?null:Cn(t);if(h)return qe(h);_=!1,n=Oe,r=new Mi}else r=e?[]:o;t:for(;++s<a;){var c=t[s],l=e?e(c):c;if(c=i||0!==c?c:0,_&&l==l){for(var d=r.length;d--;)if(r[d]===l)continue t;e&&r.push(l),o.push(c)}else n(r,l,i)||(r!==o&&r.push(l),o.push(c))}return o}function Qs(t,e){return null==(t=ma(t,e=on(e,t)))||delete t[Aa(Ha(e))]}function Zs(t,e,i,s){return Us(t,e,i(cs(t,e)),s)}function tn(t,e,i,s){for(var n=t.length,a=s?n:-1;(s?a--:++a<n)&&e(t[a],a,t););return i?Fs(t,s?0:a,s?a+1:n):Fs(t,s?a+1:0,s?n:a)}function en(t,e){var i=t;return i instanceof Pi&&(i=i.value()),me(e,(function(t,e){return e.func.apply(e.thisArg,pe([t],e.args))}),i)}function sn(t,e,i){var n=t.length;if(n<2)return n?$s(t[0]):[];for(var a=-1,_=s(n);++a<n;)for(var o=t[a],r=-1;++r<n;)r!=a&&(_[a]=Qi(_[a]||o,t[r],e,i));return $s(ns(_,1),e,i)}function nn(t,e,i){for(var s=-1,n=t.length,a=e.length,_={};++s<n;){var o=s<a?e[s]:void 0;i(_,t[s],o)}return _}function an(t){return M_(t)?t:[]}function _n(t){return"function"==typeof t?t:Bo}function on(t,e){return O_(t)?t:ra(t,e)?[t]:Ta(_o(t))}var rn=Cs;function hn(t,e,i){var s=t.length;return i=void 0===i?s:i,!e&&i>=s?t:Fs(t,e,i)}var cn=Ve||function(t){return zt.clearTimeout(t)};function ln(t,e){if(e)return t.slice();var i=t.length,s=Wt?Wt(i):new t.constructor(i);return t.copy(s),s}function dn(t){var e=new t.constructor(t.byteLength);return new Dt(e).set(new Dt(t)),e}function un(t,e){var i=e?dn(t.buffer):t.buffer;return new t.constructor(i,t.byteOffset,t.length)}function pn(t,e){if(t!==e){var i=void 0!==t,s=null===t,n=t==t,a=J_(t),_=void 0!==e,o=null===e,r=e==e,h=J_(e);if(!o&&!h&&!a&&t>e||a&&_&&r&&!o&&!h||s&&_&&r||!i&&r||!n)return 1;if(!s&&!a&&!h&&t<e||h&&i&&n&&!s&&!a||o&&i&&n||!_&&n||!r)return-1}return 0}function mn(t,e,i,n){for(var a=-1,_=t.length,o=i.length,r=-1,h=e.length,c=ai(_-o,0),l=s(h+c),d=!n;++r<h;)l[r]=e[r];for(;++a<o;)(d||a<_)&&(l[i[a]]=t[a]);for(;c--;)l[r++]=t[a++];return l}function gn(t,e,i,n){for(var a=-1,_=t.length,o=-1,r=i.length,h=-1,c=e.length,l=ai(_-r,0),d=s(l+c),u=!n;++a<l;)d[a]=t[a];for(var p=a;++h<c;)d[p+h]=e[h];for(;++o<r;)(u||a<_)&&(d[p+i[o]]=t[a++]);return d}function wn(t,e){var i=-1,n=t.length;for(e||(e=s(n));++i<n;)e[i]=t[i];return e}function fn(t,e,i,s){var n=!i;i||(i={});for(var a=-1,_=e.length;++a<_;){var o=e[a],r=s?s(i[o],t[o],o,i,t):void 0;void 0===r&&(r=t[o]),n?Bi(i,o,r):Wi(i,o,r)}return i}function yn(t,e){return function(i,s){var n=O_(i)?_e:Fi,a=e?e():{};return n(i,t,Jn(s,2),a)}}function bn(t){return Cs((function(e,i){var s=-1,n=i.length,a=n>1?i[n-1]:void 0,_=n>2?i[2]:void 0;for(a=t.length>3&&"function"==typeof a?(n--,a):void 0,_&&oa(i[0],i[1],_)&&(a=n<3?void 0:a,n=1),e=mt(e);++s<n;){var o=i[s];o&&t(e,o,s,a)}return e}))}function vn(t,e){return function(i,s){if(null==i)return i;if(!L_(i))return t(i,s);for(var n=i.length,a=e?n:-1,_=mt(i);(e?a--:++a<n)&&!1!==s(_[a],a,_););return i}}function En(t){return function(e,i,s){for(var n=-1,a=mt(e),_=s(e),o=_.length;o--;){var r=_[t?o:++n];if(!1===i(a[r],r,a))break}return e}}function xn(t){return function(e){var i=Ye(e=_o(e))?Be(e):void 0,s=i?i[0]:e.charAt(0),n=i?hn(i,1).join(""):e.slice(1);return s[t]()+n}}function Tn(t){return function(e){return me(Uo(Oo(e).replace(Ot,"")),t,"")}}function An(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var i=ki(t.prototype),s=t.apply(i,e);return W_(s)?s:i}}function Sn(t){return function(e,i,s){var n=mt(e);if(!L_(e)){var a=Jn(i,3);e=bo(e),i=function(t){return a(n[t],t,n)}}var _=t(e,i,s);return _>-1?n[a?e[_]:_]:void 0}}function In(t){return Fn((function(e){var i=e.length,s=i,n=Ri.prototype.thru;for(t&&e.reverse();s--;){var _=e[s];if("function"!=typeof _)throw new ft(a);if(n&&!o&&"wrapper"==Kn(_))var o=new Ri([],!0)}for(s=o?s:i;++s<i;){var r=Kn(_=e[s]),h="wrapper"==r?zn(_):void 0;o=h&&ha(h[0])&&424==h[1]&&!h[4].length&&1==h[9]?o[Kn(h[0])].apply(o,h[3]):1==_.length&&ha(_)?o[r]():o.thru(_)}return function(){var t=arguments,s=t[0];if(o&&1==t.length&&O_(s))return o.plant(s).value();for(var n=0,a=i?e[n].apply(this,t):s;++n<i;)a=e[n].call(this,a);return a}}))}function kn(t,e,i,n,a,_,o,r,h,c){var l=128&e,d=1&e,u=2&e,p=24&e,m=512&e,g=u?void 0:An(t);return function w(){for(var f=arguments.length,y=s(f),b=f;b--;)y[b]=arguments[b];if(p)var v=Vn(w),E=Me(y,v);if(n&&(y=mn(y,n,a,p)),_&&(y=gn(y,_,o,p)),f-=E,p&&f<c){var x=We(y,v);return Mn(t,e,kn,w.placeholder,i,y,x,r,h,c-f)}var T=d?i:this,A=u?T[t]:t;return f=y.length,r?y=ga(y,r):m&&f>1&&y.reverse(),l&&h<f&&(y.length=h),this&&this!==zt&&this instanceof w&&(A=g||An(A)),A.apply(T,y)}}function Nn(t,e){return function(i,s){return function(t,e,i,s){return os(t,(function(t,n,a){e(s,i(t),n,a)})),s}(i,t,e(s),{})}}function Rn(t,e){return function(i,s){var n;if(void 0===i&&void 0===s)return e;if(void 0!==i&&(n=i),void 0!==s){if(void 0===n)return s;"string"==typeof i||"string"==typeof s?(i=Js(i),s=Js(s)):(i=Vs(i),s=Vs(s)),n=t(i,s)}return n}}function Pn(t){return Fn((function(e){return e=ue(e,Re(Jn())),Cs((function(i){var s=this;return t(e,(function(t){return ae(t,s,i)}))}))}))}function On(t,e){var i=(e=void 0===e?" ":Js(e)).length;if(i<2)return i?Ds(e,t):e;var s=Ds(e,Qe(t/Xe(e)));return Ye(e)?hn(Be(s),0,t).join(""):s.slice(0,t)}function jn(t){return function(e,i,n){return n&&"number"!=typeof n&&oa(e,i,n)&&(i=n=void 0),e=eo(e),void 0===i?(i=e,e=0):i=eo(i),function(t,e,i,n){for(var a=-1,_=ai(Qe((e-t)/(i||1)),0),o=s(_);_--;)o[n?_:++a]=t,t+=i;return o}(e,i,n=void 0===n?e<i?1:-1:eo(n),t)}}function Ln(t){return function(e,i){return"string"==typeof e&&"string"==typeof i||(e=no(e),i=no(i)),t(e,i)}}function Mn(t,e,i,s,n,a,_,o,r,h){var c=8&e;e|=c?32:64,4&(e&=~(c?64:32))||(e&=-4);var l=[t,e,n,c?a:void 0,c?_:void 0,c?void 0:a,c?void 0:_,o,r,h],d=i.apply(void 0,l);return ha(t)&&fa(d,l),d.placeholder=s,va(d,t,e)}function Dn(t){var e=pt[t];return function(t,i){if(t=no(t),(i=null==i?0:_i(io(i),292))&&ii(t)){var s=(_o(t)+"e").split("e");return+((s=(_o(e(s[0]+"e"+(+s[1]+i)))+"e").split("e"))[0]+"e"+(+s[1]-i))}return e(t)}}var Cn=pi&&1/qe(new pi([,-0]))[1]==1/0?function(t){return new pi(t)}:$o;function Hn(t){return function(e){var i=ia(e);return i==m?Ue(e):i==y?Fe(e):function(t,e){return ue(e,(function(e){return[e,t[e]]}))}(e,t(e))}}function Yn(t,e,i,n,o,r,h,c){var l=2&e;if(!l&&"function"!=typeof t)throw new ft(a);var d=n?n.length:0;if(d||(e&=-97,n=o=void 0),h=void 0===h?h:ai(io(h),0),c=void 0===c?c:io(c),d-=o?o.length:0,64&e){var u=n,p=o;n=o=void 0}var m=l?void 0:zn(t),g=[t,e,i,n,o,u,p,r,h,c];if(m&&function(t,e){var i=t[1],s=e[1],n=i|s,a=n<131,o=128==s&&8==i||128==s&&256==i&&t[7].length<=e[8]||384==s&&e[7].length<=e[8]&&8==i;if(!a&&!o)return t;1&s&&(t[2]=e[2],n|=1&i?0:4);var r=e[3];if(r){var h=t[3];t[3]=h?mn(h,r,e[4]):r,t[4]=h?We(t[3],_):e[4]}(r=e[5])&&(h=t[5],t[5]=h?gn(h,r,e[6]):r,t[6]=h?We(t[5],_):e[6]);(r=e[7])&&(t[7]=r);128&s&&(t[8]=null==t[8]?e[8]:_i(t[8],e[8]));null==t[9]&&(t[9]=e[9]);t[0]=e[0],t[1]=n}(g,m),t=g[0],e=g[1],i=g[2],n=g[3],o=g[4],!(c=g[9]=void 0===g[9]?l?0:t.length:ai(g[9]-d,0))&&24&e&&(e&=-25),e&&1!=e)w=8==e||16==e?function(t,e,i){var n=An(t);return function a(){for(var _=arguments.length,o=s(_),r=_,h=Vn(a);r--;)o[r]=arguments[r];var c=_<3&&o[0]!==h&&o[_-1]!==h?[]:We(o,h);if((_-=c.length)<i)return Mn(t,e,kn,a.placeholder,void 0,o,c,void 0,void 0,i-_);var l=this&&this!==zt&&this instanceof a?n:t;return ae(l,this,o)}}(t,e,c):32!=e&&33!=e||o.length?kn.apply(void 0,g):function(t,e,i,n){var a=1&e,_=An(t);return function e(){for(var o=-1,r=arguments.length,h=-1,c=n.length,l=s(c+r),d=this&&this!==zt&&this instanceof e?_:t;++h<c;)l[h]=n[h];for(;r--;)l[h++]=arguments[++o];return ae(d,a?i:this,l)}}(t,e,i,n);else var w=function(t,e,i){var s=1&e,n=An(t);return function e(){var a=this&&this!==zt&&this instanceof e?n:t;return a.apply(s?i:this,arguments)}}(t,e,i);return va((m?Gs:fa)(w,g),t,e)}function Un(t,e,i,s){return void 0===t||k_(t,vt[i])&&!Tt.call(s,i)?e:t}function Gn(t,e,i,s,n,a){return W_(t)&&W_(e)&&(a.set(e,t),Ns(t,e,void 0,Gn,a),a.delete(e)),t}function Wn(t){return B_(t)?void 0:t}function qn(t,e,i,s,n,a){var _=1&i,o=t.length,r=e.length;if(o!=r&&!(_&&r>o))return!1;var h=a.get(t),c=a.get(e);if(h&&c)return h==e&&c==t;var l=-1,d=!0,u=2&i?new Mi:void 0;for(a.set(t,e),a.set(e,t);++l<o;){var p=t[l],m=e[l];if(s)var g=_?s(m,p,l,e,t,a):s(p,m,l,t,e,a);if(void 0!==g){if(g)continue;d=!1;break}if(u){if(!we(e,(function(t,e){if(!Oe(u,e)&&(p===t||n(p,t,i,s,a)))return u.push(e)}))){d=!1;break}}else if(p!==m&&!n(p,m,i,s,a)){d=!1;break}}return a.delete(t),a.delete(e),d}function Fn(t){return ba(pa(t,void 0,ja),t+"")}function Xn(t){return ls(t,bo,ta)}function Bn(t){return ls(t,vo,ea)}var zn=wi?function(t){return wi.get(t)}:$o;function Kn(t){for(var e=t.name+"",i=fi[e],s=Tt.call(fi,e)?i.length:0;s--;){var n=i[s],a=n.func;if(null==a||a==t)return n.name}return e}function Vn(t){return(Tt.call(Ii,"placeholder")?Ii:t).placeholder}function Jn(){var t=Ii.iteratee||zo;return t=t===zo?Es:t,arguments.length?t(arguments[0],arguments[1]):t}function $n(t,e){var i,s,n=t.__data__;return("string"==(s=typeof(i=e))||"number"==s||"symbol"==s||"boolean"==s?"__proto__"!==i:null===i)?n["string"==typeof e?"string":"hash"]:n.map}function Qn(t){for(var e=bo(t),i=e.length;i--;){var s=e[i],n=t[s];e[i]=[s,n,da(n)]}return e}function Zn(t,e){var i=function(t,e){return null==t?void 0:t[e]}(t,e);return vs(i)?i:void 0}var ta=ti?function(t){return null==t?[]:(t=mt(t),ce(ti(t),(function(e){return Kt.call(t,e)})))}:nr,ea=ti?function(t){for(var e=[];t;)pe(e,ta(t)),t=Xt(t);return e}:nr,ia=ds;function sa(t,e,i){for(var s=-1,n=(e=on(e,t)).length,a=!1;++s<n;){var _=Aa(e[s]);if(!(a=null!=t&&i(t,_)))break;t=t[_]}return a||++s!=n?a:!!(n=null==t?0:t.length)&&G_(n)&&_a(_,n)&&(O_(t)||P_(t))}function na(t){return"function"!=typeof t.constructor||la(t)?{}:ki(Xt(t))}function aa(t){return O_(t)||P_(t)||!!($t&&t&&t[$t])}function _a(t,e){var i=typeof t;return!!(e=null==e?9007199254740991:e)&&("number"==i||"symbol"!=i&&rt.test(t))&&t>-1&&t%1==0&&t<e}function oa(t,e,i){if(!W_(i))return!1;var s=typeof e;return!!("number"==s?L_(i)&&_a(e,i.length):"string"==s&&e in i)&&k_(i[e],t)}function ra(t,e){if(O_(t))return!1;var i=typeof t;return!("number"!=i&&"symbol"!=i&&"boolean"!=i&&null!=t&&!J_(t))||(F.test(t)||!q.test(t)||null!=e&&t in mt(e))}function ha(t){var e=Kn(t),i=Ii[e];if("function"!=typeof i||!(e in Pi.prototype))return!1;if(t===i)return!0;var s=zn(i);return!!s&&t===s[0]}(li&&ia(new li(new ArrayBuffer(1)))!=T||di&&ia(new di)!=m||ui&&"[object Promise]"!=ia(ui.resolve())||pi&&ia(new pi)!=y||mi&&ia(new mi)!=E)&&(ia=function(t){var e=ds(t),i=e==w?t.constructor:void 0,s=i?Sa(i):"";if(s)switch(s){case yi:return T;case bi:return m;case vi:return"[object Promise]";case Ei:return y;case xi:return E}return e});var ca=Et?Y_:ar;function la(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||vt)}function da(t){return t==t&&!W_(t)}function ua(t,e){return function(i){return null!=i&&(i[t]===e&&(void 0!==e||t in mt(i)))}}function pa(t,e,i){return e=ai(void 0===e?t.length-1:e,0),function(){for(var n=arguments,a=-1,_=ai(n.length-e,0),o=s(_);++a<_;)o[a]=n[e+a];a=-1;for(var r=s(e+1);++a<e;)r[a]=n[a];return r[e]=i(o),ae(t,this,r)}}function ma(t,e){return e.length<2?t:cs(t,Fs(e,0,-1))}function ga(t,e){for(var i=t.length,s=_i(e.length,i),n=wn(t);s--;){var a=e[s];t[s]=_a(a,i)?n[a]:void 0}return t}function wa(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}var fa=Ea(Gs),ya=$e||function(t,e){return zt.setTimeout(t,e)},ba=Ea(Ws);function va(t,e,i){var s=e+"";return ba(t,function(t,e){var i=e.length;if(!i)return t;var s=i-1;return e[s]=(i>1?"& ":"")+e[s],e=e.join(i>2?", ":" "),t.replace($,"{\n/* [wrapped with "+e+"] */\n")}(s,function(t,e){return oe(o,(function(i){var s="_."+i[0];e&i[1]&&!le(t,s)&&t.push(s)})),t.sort()}(function(t){var e=t.match(Q);return e?e[1].split(Z):[]}(s),i)))}function Ea(t){var e=0,i=0;return function(){var s=oi(),n=16-(s-i);if(i=s,n>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(void 0,arguments)}}function xa(t,e){var i=-1,s=t.length,n=s-1;for(e=void 0===e?s:e;++i<e;){var a=Ms(i,n),_=t[a];t[a]=t[i],t[i]=_}return t.length=e,t}var Ta=function(t){var e=E_(t,(function(t){return 500===i.size&&i.clear(),t})),i=e.cache;return e}((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(X,(function(t,i,s,n){e.push(s?n.replace(et,"$1"):i||t)})),e}));function Aa(t){if("string"==typeof t||J_(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function Sa(t){if(null!=t){try{return xt.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Ia(t){if(t instanceof Pi)return t.clone();var e=new Ri(t.__wrapped__,t.__chain__);return e.__actions__=wn(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var ka=Cs((function(t,e){return M_(t)?Qi(t,ns(e,1,M_,!0)):[]})),Na=Cs((function(t,e){var i=Ha(e);return M_(i)&&(i=void 0),M_(t)?Qi(t,ns(e,1,M_,!0),Jn(i,2)):[]})),Ra=Cs((function(t,e){var i=Ha(e);return M_(i)&&(i=void 0),M_(t)?Qi(t,ns(e,1,M_,!0),void 0,i):[]}));function Pa(t,e,i){var s=null==t?0:t.length;if(!s)return-1;var n=null==i?0:io(i);return n<0&&(n=ai(s+n,0)),be(t,Jn(e,3),n)}function Oa(t,e,i){var s=null==t?0:t.length;if(!s)return-1;var n=s-1;return void 0!==i&&(n=io(i),n=i<0?ai(s+n,0):_i(n,s-1)),be(t,Jn(e,3),n,!0)}function ja(t){return(null==t?0:t.length)?ns(t,1):[]}function La(t){return t&&t.length?t[0]:void 0}var Ma=Cs((function(t){var e=ue(t,an);return e.length&&e[0]===t[0]?gs(e):[]})),Da=Cs((function(t){var e=Ha(t),i=ue(t,an);return e===Ha(i)?e=void 0:i.pop(),i.length&&i[0]===t[0]?gs(i,Jn(e,2)):[]})),Ca=Cs((function(t){var e=Ha(t),i=ue(t,an);return(e="function"==typeof e?e:void 0)&&i.pop(),i.length&&i[0]===t[0]?gs(i,void 0,e):[]}));function Ha(t){var e=null==t?0:t.length;return e?t[e-1]:void 0}var Ya=Cs(Ua);function Ua(t,e){return t&&t.length&&e&&e.length?js(t,e):t}var Ga=Fn((function(t,e){var i=null==t?0:t.length,s=zi(t,e);return Ls(t,ue(e,(function(t){return _a(t,i)?+t:t})).sort(pn)),s}));function Wa(t){return null==t?t:ci.call(t)}var qa=Cs((function(t){return $s(ns(t,1,M_,!0))})),Fa=Cs((function(t){var e=Ha(t);return M_(e)&&(e=void 0),$s(ns(t,1,M_,!0),Jn(e,2))})),Xa=Cs((function(t){var e=Ha(t);return e="function"==typeof e?e:void 0,$s(ns(t,1,M_,!0),void 0,e)}));function Ba(t){if(!t||!t.length)return[];var e=0;return t=ce(t,(function(t){if(M_(t))return e=ai(t.length,e),!0})),Ne(e,(function(e){return ue(t,Ae(e))}))}function za(t,e){if(!t||!t.length)return[];var i=Ba(t);return null==e?i:ue(i,(function(t){return ae(e,void 0,t)}))}var Ka=Cs((function(t,e){return M_(t)?Qi(t,e):[]})),Va=Cs((function(t){return sn(ce(t,M_))})),Ja=Cs((function(t){var e=Ha(t);return M_(e)&&(e=void 0),sn(ce(t,M_),Jn(e,2))})),$a=Cs((function(t){var e=Ha(t);return e="function"==typeof e?e:void 0,sn(ce(t,M_),void 0,e)})),Qa=Cs(Ba);var Za=Cs((function(t){var e=t.length,i=e>1?t[e-1]:void 0;return i="function"==typeof i?(t.pop(),i):void 0,za(t,i)}));function t_(t){var e=Ii(t);return e.__chain__=!0,e}function e_(t,e){return e(t)}var i_=Fn((function(t){var e=t.length,i=e?t[0]:0,s=this.__wrapped__,n=function(e){return zi(e,t)};return!(e>1||this.__actions__.length)&&s instanceof Pi&&_a(i)?((s=s.slice(i,+i+(e?1:0))).__actions__.push({func:e_,args:[n],thisArg:void 0}),new Ri(s,this.__chain__).thru((function(t){return e&&!t.length&&t.push(void 0),t}))):this.thru(n)}));var s_=yn((function(t,e,i){Tt.call(t,i)?++t[i]:Bi(t,i,1)}));var n_=Sn(Pa),a_=Sn(Oa);function __(t,e){return(O_(t)?oe:Zi)(t,Jn(e,3))}function o_(t,e){return(O_(t)?re:ts)(t,Jn(e,3))}var r_=yn((function(t,e,i){Tt.call(t,i)?t[i].push(e):Bi(t,i,[e])}));var h_=Cs((function(t,e,i){var n=-1,a="function"==typeof e,_=L_(t)?s(t.length):[];return Zi(t,(function(t){_[++n]=a?ae(e,t,i):ws(t,e,i)})),_})),c_=yn((function(t,e,i){Bi(t,i,e)}));function l_(t,e){return(O_(t)?ue:Ss)(t,Jn(e,3))}var d_=yn((function(t,e,i){t[i?0:1].push(e)}),(function(){return[[],[]]}));var u_=Cs((function(t,e){if(null==t)return[];var i=e.length;return i>1&&oa(t,e[0],e[1])?e=[]:i>2&&oa(e[0],e[1],e[2])&&(e=[e[0]]),Ps(t,ns(e,1),[])})),p_=Je||function(){return zt.Date.now()};function m_(t,e,i){return e=i?void 0:e,Yn(t,128,void 0,void 0,void 0,void 0,e=t&&null==e?t.length:e)}function g_(t,e){var i;if("function"!=typeof e)throw new ft(a);return t=io(t),function(){return--t>0&&(i=e.apply(this,arguments)),t<=1&&(e=void 0),i}}var w_=Cs((function(t,e,i){var s=1;if(i.length){var n=We(i,Vn(w_));s|=32}return Yn(t,s,e,i,n)})),f_=Cs((function(t,e,i){var s=3;if(i.length){var n=We(i,Vn(f_));s|=32}return Yn(e,s,t,i,n)}));function y_(t,e,i){var s,n,_,o,r,h,c=0,l=!1,d=!1,u=!0;if("function"!=typeof t)throw new ft(a);function p(e){var i=s,a=n;return s=n=void 0,c=e,o=t.apply(a,i)}function m(t){return c=t,r=ya(w,e),l?p(t):o}function g(t){var i=t-h;return void 0===h||i>=e||i<0||d&&t-c>=_}function w(){var t=p_();if(g(t))return f(t);r=ya(w,function(t){var i=e-(t-h);return d?_i(i,_-(t-c)):i}(t))}function f(t){return r=void 0,u&&s?p(t):(s=n=void 0,o)}function y(){var t=p_(),i=g(t);if(s=arguments,n=this,h=t,i){if(void 0===r)return m(h);if(d)return cn(r),r=ya(w,e),p(h)}return void 0===r&&(r=ya(w,e)),o}return e=no(e)||0,W_(i)&&(l=!!i.leading,_=(d="maxWait"in i)?ai(no(i.maxWait)||0,e):_,u="trailing"in i?!!i.trailing:u),y.cancel=function(){void 0!==r&&cn(r),c=0,s=h=n=r=void 0},y.flush=function(){return void 0===r?o:f(p_())},y}var b_=Cs((function(t,e){return $i(t,1,e)})),v_=Cs((function(t,e,i){return $i(t,no(e)||0,i)}));function E_(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new ft(a);var i=function(){var s=arguments,n=e?e.apply(this,s):s[0],a=i.cache;if(a.has(n))return a.get(n);var _=t.apply(this,s);return i.cache=a.set(n,_)||a,_};return i.cache=new(E_.Cache||Li),i}function x_(t){if("function"!=typeof t)throw new ft(a);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}E_.Cache=Li;var T_=rn((function(t,e){var i=(e=1==e.length&&O_(e[0])?ue(e[0],Re(Jn())):ue(ns(e,1),Re(Jn()))).length;return Cs((function(s){for(var n=-1,a=_i(s.length,i);++n<a;)s[n]=e[n].call(this,s[n]);return ae(t,this,s)}))})),A_=Cs((function(t,e){return Yn(t,32,void 0,e,We(e,Vn(A_)))})),S_=Cs((function(t,e){return Yn(t,64,void 0,e,We(e,Vn(S_)))})),I_=Fn((function(t,e){return Yn(t,256,void 0,void 0,void 0,e)}));function k_(t,e){return t===e||t!=t&&e!=e}var N_=Ln(us),R_=Ln((function(t,e){return t>=e})),P_=fs(function(){return arguments}())?fs:function(t){return q_(t)&&Tt.call(t,"callee")&&!Kt.call(t,"callee")},O_=s.isArray,j_=Zt?Re(Zt):function(t){return q_(t)&&ds(t)==x};function L_(t){return null!=t&&G_(t.length)&&!Y_(t)}function M_(t){return q_(t)&&L_(t)}var D_=ei||ar,C_=te?Re(te):function(t){return q_(t)&&ds(t)==l};function H_(t){if(!q_(t))return!1;var e=ds(t);return e==d||"[object DOMException]"==e||"string"==typeof t.message&&"string"==typeof t.name&&!B_(t)}function Y_(t){if(!W_(t))return!1;var e=ds(t);return e==u||e==p||"[object AsyncFunction]"==e||"[object Proxy]"==e}function U_(t){return"number"==typeof t&&t==io(t)}function G_(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}function W_(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function q_(t){return null!=t&&"object"==typeof t}var F_=ee?Re(ee):function(t){return q_(t)&&ia(t)==m};function X_(t){return"number"==typeof t||q_(t)&&ds(t)==g}function B_(t){if(!q_(t)||ds(t)!=w)return!1;var e=Xt(t);if(null===e)return!0;var i=Tt.call(e,"constructor")&&e.constructor;return"function"==typeof i&&i instanceof i&&xt.call(i)==kt}var z_=ie?Re(ie):function(t){return q_(t)&&ds(t)==f};var K_=se?Re(se):function(t){return q_(t)&&ia(t)==y};function V_(t){return"string"==typeof t||!O_(t)&&q_(t)&&ds(t)==b}function J_(t){return"symbol"==typeof t||q_(t)&&ds(t)==v}var $_=ne?Re(ne):function(t){return q_(t)&&G_(t.length)&&!!Ut[ds(t)]};var Q_=Ln(As),Z_=Ln((function(t,e){return t<=e}));function to(t){if(!t)return[];if(L_(t))return V_(t)?Be(t):wn(t);if(Qt&&t[Qt])return function(t){for(var e,i=[];!(e=t.next()).done;)i.push(e.value);return i}(t[Qt]());var e=ia(t);return(e==m?Ue:e==y?qe:No)(t)}function eo(t){return t?(t=no(t))===1/0||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function io(t){var e=eo(t),i=e%1;return e==e?i?e-i:e:0}function so(t){return t?Ki(io(t),0,4294967295):0}function no(t){if("number"==typeof t)return t;if(J_(t))return NaN;if(W_(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=W_(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(K,"");var i=at.test(t);return i||ot.test(t)?Ft(t.slice(2),i?2:8):nt.test(t)?NaN:+t}function ao(t){return fn(t,vo(t))}function _o(t){return null==t?"":Js(t)}var oo=bn((function(t,e){if(la(e)||L_(e))fn(e,bo(e),t);else for(var i in e)Tt.call(e,i)&&Wi(t,i,e[i])})),ro=bn((function(t,e){fn(e,vo(e),t)})),ho=bn((function(t,e,i,s){fn(e,vo(e),t,s)})),co=bn((function(t,e,i,s){fn(e,bo(e),t,s)})),lo=Fn(zi);var uo=Cs((function(t,e){t=mt(t);var i=-1,s=e.length,n=s>2?e[2]:void 0;for(n&&oa(e[0],e[1],n)&&(s=1);++i<s;)for(var a=e[i],_=vo(a),o=-1,r=_.length;++o<r;){var h=_[o],c=t[h];(void 0===c||k_(c,vt[h])&&!Tt.call(t,h))&&(t[h]=a[h])}return t})),po=Cs((function(t){return t.push(void 0,Gn),ae(xo,void 0,t)}));function mo(t,e,i){var s=null==t?void 0:cs(t,e);return void 0===s?i:s}function go(t,e){return null!=t&&sa(t,e,ms)}var wo=Nn((function(t,e,i){null!=e&&"function"!=typeof e.toString&&(e=It.call(e)),t[e]=i}),qo(Bo)),fo=Nn((function(t,e,i){null!=e&&"function"!=typeof e.toString&&(e=It.call(e)),Tt.call(t,e)?t[e].push(i):t[e]=[i]}),Jn),yo=Cs(ws);function bo(t){return L_(t)?Ci(t):xs(t)}function vo(t){return L_(t)?Ci(t,!0):Ts(t)}var Eo=bn((function(t,e,i){Ns(t,e,i)})),xo=bn((function(t,e,i,s){Ns(t,e,i,s)})),To=Fn((function(t,e){var i={};if(null==t)return i;var s=!1;e=ue(e,(function(e){return e=on(e,t),s||(s=e.length>1),e})),fn(t,Bn(t),i),s&&(i=Vi(i,7,Wn));for(var n=e.length;n--;)Qs(i,e[n]);return i}));var Ao=Fn((function(t,e){return null==t?{}:function(t,e){return Os(t,e,(function(e,i){return go(t,i)}))}(t,e)}));function So(t,e){if(null==t)return{};var i=ue(Bn(t),(function(t){return[t]}));return e=Jn(e),Os(t,i,(function(t,i){return e(t,i[0])}))}var Io=Hn(bo),ko=Hn(vo);function No(t){return null==t?[]:Pe(t,bo(t))}var Ro=Tn((function(t,e,i){return e=e.toLowerCase(),t+(i?Po(e):e)}));function Po(t){return Yo(_o(t).toLowerCase())}function Oo(t){return(t=_o(t))&&t.replace(ht,De).replace(jt,"")}var jo=Tn((function(t,e,i){return t+(i?"-":"")+e.toLowerCase()})),Lo=Tn((function(t,e,i){return t+(i?" ":"")+e.toLowerCase()})),Mo=xn("toLowerCase");var Do=Tn((function(t,e,i){return t+(i?"_":"")+e.toLowerCase()}));var Co=Tn((function(t,e,i){return t+(i?" ":"")+Yo(e)}));var Ho=Tn((function(t,e,i){return t+(i?" ":"")+e.toUpperCase()})),Yo=xn("toUpperCase");function Uo(t,e,i){return t=_o(t),void 0===(e=i?void 0:e)?function(t){return Ct.test(t)}(t)?function(t){return t.match(Mt)||[]}(t):function(t){return t.match(tt)||[]}(t):t.match(e)||[]}var Go=Cs((function(t,e){try{return ae(t,void 0,e)}catch(t){return H_(t)?t:new dt(t)}})),Wo=Fn((function(t,e){return oe(e,(function(e){e=Aa(e),Bi(t,e,w_(t[e],t))})),t}));function qo(t){return function(){return t}}var Fo=In(),Xo=In(!0);function Bo(t){return t}function zo(t){return Es("function"==typeof t?t:Vi(t,1))}var Ko=Cs((function(t,e){return function(i){return ws(i,t,e)}})),Vo=Cs((function(t,e){return function(i){return ws(t,i,e)}}));function Jo(t,e,i){var s=bo(e),n=hs(e,s);null!=i||W_(e)&&(n.length||!s.length)||(i=e,e=t,t=this,n=hs(e,bo(e)));var a=!(W_(i)&&"chain"in i&&!i.chain),_=Y_(t);return oe(n,(function(i){var s=e[i];t[i]=s,_&&(t.prototype[i]=function(){var e=this.__chain__;if(a||e){var i=t(this.__wrapped__),n=i.__actions__=wn(this.__actions__);return n.push({func:s,args:arguments,thisArg:t}),i.__chain__=e,i}return s.apply(t,pe([this.value()],arguments))})})),t}function $o(){}var Qo=Pn(ue),Zo=Pn(he),tr=Pn(we);function er(t){return ra(t)?Ae(Aa(t)):function(t){return function(e){return cs(e,t)}}(t)}var ir=jn(),sr=jn(!0);function nr(){return[]}function ar(){return!1}var _r=Rn((function(t,e){return t+e}),0),or=Dn("ceil"),rr=Rn((function(t,e){return t/e}),1),hr=Dn("floor");var cr,lr=Rn((function(t,e){return t*e}),1),dr=Dn("round"),ur=Rn((function(t,e){return t-e}),0);return Ii.after=function(t,e){if("function"!=typeof e)throw new ft(a);return t=io(t),function(){if(--t<1)return e.apply(this,arguments)}},Ii.ary=m_,Ii.assign=oo,Ii.assignIn=ro,Ii.assignInWith=ho,Ii.assignWith=co,Ii.at=lo,Ii.before=g_,Ii.bind=w_,Ii.bindAll=Wo,Ii.bindKey=f_,Ii.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return O_(t)?t:[t]},Ii.chain=t_,Ii.chunk=function(t,e,i){e=(i?oa(t,e,i):void 0===e)?1:ai(io(e),0);var n=null==t?0:t.length;if(!n||e<1)return[];for(var a=0,_=0,o=s(Qe(n/e));a<n;)o[_++]=Fs(t,a,a+=e);return o},Ii.compact=function(t){for(var e=-1,i=null==t?0:t.length,s=0,n=[];++e<i;){var a=t[e];a&&(n[s++]=a)}return n},Ii.concat=function(){var t=arguments.length;if(!t)return[];for(var e=s(t-1),i=arguments[0],n=t;n--;)e[n-1]=arguments[n];return pe(O_(i)?wn(i):[i],ns(e,1))},Ii.cond=function(t){var e=null==t?0:t.length,i=Jn();return t=e?ue(t,(function(t){if("function"!=typeof t[1])throw new ft(a);return[i(t[0]),t[1]]})):[],Cs((function(i){for(var s=-1;++s<e;){var n=t[s];if(ae(n[0],this,i))return ae(n[1],this,i)}}))},Ii.conforms=function(t){return function(t){var e=bo(t);return function(i){return Ji(i,t,e)}}(Vi(t,1))},Ii.constant=qo,Ii.countBy=s_,Ii.create=function(t,e){var i=ki(t);return null==e?i:Xi(i,e)},Ii.curry=function t(e,i,s){var n=Yn(e,8,void 0,void 0,void 0,void 0,void 0,i=s?void 0:i);return n.placeholder=t.placeholder,n},Ii.curryRight=function t(e,i,s){var n=Yn(e,16,void 0,void 0,void 0,void 0,void 0,i=s?void 0:i);return n.placeholder=t.placeholder,n},Ii.debounce=y_,Ii.defaults=uo,Ii.defaultsDeep=po,Ii.defer=b_,Ii.delay=v_,Ii.difference=ka,Ii.differenceBy=Na,Ii.differenceWith=Ra,Ii.drop=function(t,e,i){var s=null==t?0:t.length;return s?Fs(t,(e=i||void 0===e?1:io(e))<0?0:e,s):[]},Ii.dropRight=function(t,e,i){var s=null==t?0:t.length;return s?Fs(t,0,(e=s-(e=i||void 0===e?1:io(e)))<0?0:e):[]},Ii.dropRightWhile=function(t,e){return t&&t.length?tn(t,Jn(e,3),!0,!0):[]},Ii.dropWhile=function(t,e){return t&&t.length?tn(t,Jn(e,3),!0):[]},Ii.fill=function(t,e,i,s){var n=null==t?0:t.length;return n?(i&&"number"!=typeof i&&oa(t,e,i)&&(i=0,s=n),function(t,e,i,s){var n=t.length;for((i=io(i))<0&&(i=-i>n?0:n+i),(s=void 0===s||s>n?n:io(s))<0&&(s+=n),s=i>s?0:so(s);i<s;)t[i++]=e;return t}(t,e,i,s)):[]},Ii.filter=function(t,e){return(O_(t)?ce:ss)(t,Jn(e,3))},Ii.flatMap=function(t,e){return ns(l_(t,e),1)},Ii.flatMapDeep=function(t,e){return ns(l_(t,e),1/0)},Ii.flatMapDepth=function(t,e,i){return i=void 0===i?1:io(i),ns(l_(t,e),i)},Ii.flatten=ja,Ii.flattenDeep=function(t){return(null==t?0:t.length)?ns(t,1/0):[]},Ii.flattenDepth=function(t,e){return(null==t?0:t.length)?ns(t,e=void 0===e?1:io(e)):[]},Ii.flip=function(t){return Yn(t,512)},Ii.flow=Fo,Ii.flowRight=Xo,Ii.fromPairs=function(t){for(var e=-1,i=null==t?0:t.length,s={};++e<i;){var n=t[e];s[n[0]]=n[1]}return s},Ii.functions=function(t){return null==t?[]:hs(t,bo(t))},Ii.functionsIn=function(t){return null==t?[]:hs(t,vo(t))},Ii.groupBy=r_,Ii.initial=function(t){return(null==t?0:t.length)?Fs(t,0,-1):[]},Ii.intersection=Ma,Ii.intersectionBy=Da,Ii.intersectionWith=Ca,Ii.invert=wo,Ii.invertBy=fo,Ii.invokeMap=h_,Ii.iteratee=zo,Ii.keyBy=c_,Ii.keys=bo,Ii.keysIn=vo,Ii.map=l_,Ii.mapKeys=function(t,e){var i={};return e=Jn(e,3),os(t,(function(t,s,n){Bi(i,e(t,s,n),t)})),i},Ii.mapValues=function(t,e){var i={};return e=Jn(e,3),os(t,(function(t,s,n){Bi(i,s,e(t,s,n))})),i},Ii.matches=function(t){return Is(Vi(t,1))},Ii.matchesProperty=function(t,e){return ks(t,Vi(e,1))},Ii.memoize=E_,Ii.merge=Eo,Ii.mergeWith=xo,Ii.method=Ko,Ii.methodOf=Vo,Ii.mixin=Jo,Ii.negate=x_,Ii.nthArg=function(t){return t=io(t),Cs((function(e){return Rs(e,t)}))},Ii.omit=To,Ii.omitBy=function(t,e){return So(t,x_(Jn(e)))},Ii.once=function(t){return g_(2,t)},Ii.orderBy=function(t,e,i,s){return null==t?[]:(O_(e)||(e=null==e?[]:[e]),O_(i=s?void 0:i)||(i=null==i?[]:[i]),Ps(t,e,i))},Ii.over=Qo,Ii.overArgs=T_,Ii.overEvery=Zo,Ii.overSome=tr,Ii.partial=A_,Ii.partialRight=S_,Ii.partition=d_,Ii.pick=Ao,Ii.pickBy=So,Ii.property=er,Ii.propertyOf=function(t){return function(e){return null==t?void 0:cs(t,e)}},Ii.pull=Ya,Ii.pullAll=Ua,Ii.pullAllBy=function(t,e,i){return t&&t.length&&e&&e.length?js(t,e,Jn(i,2)):t},Ii.pullAllWith=function(t,e,i){return t&&t.length&&e&&e.length?js(t,e,void 0,i):t},Ii.pullAt=Ga,Ii.range=ir,Ii.rangeRight=sr,Ii.rearg=I_,Ii.reject=function(t,e){return(O_(t)?ce:ss)(t,x_(Jn(e,3)))},Ii.remove=function(t,e){var i=[];if(!t||!t.length)return i;var s=-1,n=[],a=t.length;for(e=Jn(e,3);++s<a;){var _=t[s];e(_,s,t)&&(i.push(_),n.push(s))}return Ls(t,n),i},Ii.rest=function(t,e){if("function"!=typeof t)throw new ft(a);return Cs(t,e=void 0===e?e:io(e))},Ii.reverse=Wa,Ii.sampleSize=function(t,e,i){return e=(i?oa(t,e,i):void 0===e)?1:io(e),(O_(t)?Yi:Ys)(t,e)},Ii.set=function(t,e,i){return null==t?t:Us(t,e,i)},Ii.setWith=function(t,e,i,s){return s="function"==typeof s?s:void 0,null==t?t:Us(t,e,i,s)},Ii.shuffle=function(t){return(O_(t)?Ui:qs)(t)},Ii.slice=function(t,e,i){var s=null==t?0:t.length;return s?(i&&"number"!=typeof i&&oa(t,e,i)?(e=0,i=s):(e=null==e?0:io(e),i=void 0===i?s:io(i)),Fs(t,e,i)):[]},Ii.sortBy=u_,Ii.sortedUniq=function(t){return t&&t.length?Ks(t):[]},Ii.sortedUniqBy=function(t,e){return t&&t.length?Ks(t,Jn(e,2)):[]},Ii.split=function(t,e,i){return i&&"number"!=typeof i&&oa(t,e,i)&&(e=i=void 0),(i=void 0===i?4294967295:i>>>0)?(t=_o(t))&&("string"==typeof e||null!=e&&!z_(e))&&!(e=Js(e))&&Ye(t)?hn(Be(t),0,i):t.split(e,i):[]},Ii.spread=function(t,e){if("function"!=typeof t)throw new ft(a);return e=null==e?0:ai(io(e),0),Cs((function(i){var s=i[e],n=hn(i,0,e);return s&&pe(n,s),ae(t,this,n)}))},Ii.tail=function(t){var e=null==t?0:t.length;return e?Fs(t,1,e):[]},Ii.take=function(t,e,i){return t&&t.length?Fs(t,0,(e=i||void 0===e?1:io(e))<0?0:e):[]},Ii.takeRight=function(t,e,i){var s=null==t?0:t.length;return s?Fs(t,(e=s-(e=i||void 0===e?1:io(e)))<0?0:e,s):[]},Ii.takeRightWhile=function(t,e){return t&&t.length?tn(t,Jn(e,3),!1,!0):[]},Ii.takeWhile=function(t,e){return t&&t.length?tn(t,Jn(e,3)):[]},Ii.tap=function(t,e){return e(t),t},Ii.throttle=function(t,e,i){var s=!0,n=!0;if("function"!=typeof t)throw new ft(a);return W_(i)&&(s="leading"in i?!!i.leading:s,n="trailing"in i?!!i.trailing:n),y_(t,e,{leading:s,maxWait:e,trailing:n})},Ii.thru=e_,Ii.toArray=to,Ii.toPairs=Io,Ii.toPairsIn=ko,Ii.toPath=function(t){return O_(t)?ue(t,Aa):J_(t)?[t]:wn(Ta(_o(t)))},Ii.toPlainObject=ao,Ii.transform=function(t,e,i){var s=O_(t),n=s||D_(t)||$_(t);if(e=Jn(e,4),null==i){var a=t&&t.constructor;i=n?s?new a:[]:W_(t)&&Y_(a)?ki(Xt(t)):{}}return(n?oe:os)(t,(function(t,s,n){return e(i,t,s,n)})),i},Ii.unary=function(t){return m_(t,1)},Ii.union=qa,Ii.unionBy=Fa,Ii.unionWith=Xa,Ii.uniq=function(t){return t&&t.length?$s(t):[]},Ii.uniqBy=function(t,e){return t&&t.length?$s(t,Jn(e,2)):[]},Ii.uniqWith=function(t,e){return e="function"==typeof e?e:void 0,t&&t.length?$s(t,void 0,e):[]},Ii.unset=function(t,e){return null==t||Qs(t,e)},Ii.unzip=Ba,Ii.unzipWith=za,Ii.update=function(t,e,i){return null==t?t:Zs(t,e,_n(i))},Ii.updateWith=function(t,e,i,s){return s="function"==typeof s?s:void 0,null==t?t:Zs(t,e,_n(i),s)},Ii.values=No,Ii.valuesIn=function(t){return null==t?[]:Pe(t,vo(t))},Ii.without=Ka,Ii.words=Uo,Ii.wrap=function(t,e){return A_(_n(e),t)},Ii.xor=Va,Ii.xorBy=Ja,Ii.xorWith=$a,Ii.zip=Qa,Ii.zipObject=function(t,e){return nn(t||[],e||[],Wi)},Ii.zipObjectDeep=function(t,e){return nn(t||[],e||[],Us)},Ii.zipWith=Za,Ii.entries=Io,Ii.entriesIn=ko,Ii.extend=ro,Ii.extendWith=ho,Jo(Ii,Ii),Ii.add=_r,Ii.attempt=Go,Ii.camelCase=Ro,Ii.capitalize=Po,Ii.ceil=or,Ii.clamp=function(t,e,i){return void 0===i&&(i=e,e=void 0),void 0!==i&&(i=(i=no(i))==i?i:0),void 0!==e&&(e=(e=no(e))==e?e:0),Ki(no(t),e,i)},Ii.clone=function(t){return Vi(t,4)},Ii.cloneDeep=function(t){return Vi(t,5)},Ii.cloneDeepWith=function(t,e){return Vi(t,5,e="function"==typeof e?e:void 0)},Ii.cloneWith=function(t,e){return Vi(t,4,e="function"==typeof e?e:void 0)},Ii.conformsTo=function(t,e){return null==e||Ji(t,e,bo(e))},Ii.deburr=Oo,Ii.defaultTo=function(t,e){return null==t||t!=t?e:t},Ii.divide=rr,Ii.endsWith=function(t,e,i){t=_o(t),e=Js(e);var s=t.length,n=i=void 0===i?s:Ki(io(i),0,s);return(i-=e.length)>=0&&t.slice(i,n)==e},Ii.eq=k_,Ii.escape=function(t){return(t=_o(t))&&Y.test(t)?t.replace(C,Ce):t},Ii.escapeRegExp=function(t){return(t=_o(t))&&z.test(t)?t.replace(B,"\\$&"):t},Ii.every=function(t,e,i){var s=O_(t)?he:es;return i&&oa(t,e,i)&&(e=void 0),s(t,Jn(e,3))},Ii.find=n_,Ii.findIndex=Pa,Ii.findKey=function(t,e){return ye(t,Jn(e,3),os)},Ii.findLast=a_,Ii.findLastIndex=Oa,Ii.findLastKey=function(t,e){return ye(t,Jn(e,3),rs)},Ii.floor=hr,Ii.forEach=__,Ii.forEachRight=o_,Ii.forIn=function(t,e){return null==t?t:as(t,Jn(e,3),vo)},Ii.forInRight=function(t,e){return null==t?t:_s(t,Jn(e,3),vo)},Ii.forOwn=function(t,e){return t&&os(t,Jn(e,3))},Ii.forOwnRight=function(t,e){return t&&rs(t,Jn(e,3))},Ii.get=mo,Ii.gt=N_,Ii.gte=R_,Ii.has=function(t,e){return null!=t&&sa(t,e,ps)},Ii.hasIn=go,Ii.head=La,Ii.identity=Bo,Ii.includes=function(t,e,i,s){t=L_(t)?t:No(t),i=i&&!s?io(i):0;var n=t.length;return i<0&&(i=ai(n+i,0)),V_(t)?i<=n&&t.indexOf(e,i)>-1:!!n&&ve(t,e,i)>-1},Ii.indexOf=function(t,e,i){var s=null==t?0:t.length;if(!s)return-1;var n=null==i?0:io(i);return n<0&&(n=ai(s+n,0)),ve(t,e,n)},Ii.inRange=function(t,e,i){return e=eo(e),void 0===i?(i=e,e=0):i=eo(i),function(t,e,i){return t>=_i(e,i)&&t<ai(e,i)}(t=no(t),e,i)},Ii.invoke=yo,Ii.isArguments=P_,Ii.isArray=O_,Ii.isArrayBuffer=j_,Ii.isArrayLike=L_,Ii.isArrayLikeObject=M_,Ii.isBoolean=function(t){return!0===t||!1===t||q_(t)&&ds(t)==c},Ii.isBuffer=D_,Ii.isDate=C_,Ii.isElement=function(t){return q_(t)&&1===t.nodeType&&!B_(t)},Ii.isEmpty=function(t){if(null==t)return!0;if(L_(t)&&(O_(t)||"string"==typeof t||"function"==typeof t.splice||D_(t)||$_(t)||P_(t)))return!t.length;var e=ia(t);if(e==m||e==y)return!t.size;if(la(t))return!xs(t).length;for(var i in t)if(Tt.call(t,i))return!1;return!0},Ii.isEqual=function(t,e){return ys(t,e)},Ii.isEqualWith=function(t,e,i){var s=(i="function"==typeof i?i:void 0)?i(t,e):void 0;return void 0===s?ys(t,e,void 0,i):!!s},Ii.isError=H_,Ii.isFinite=function(t){return"number"==typeof t&&ii(t)},Ii.isFunction=Y_,Ii.isInteger=U_,Ii.isLength=G_,Ii.isMap=F_,Ii.isMatch=function(t,e){return t===e||bs(t,e,Qn(e))},Ii.isMatchWith=function(t,e,i){return i="function"==typeof i?i:void 0,bs(t,e,Qn(e),i)},Ii.isNaN=function(t){return X_(t)&&t!=+t},Ii.isNative=function(t){if(ca(t))throw new dt("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return vs(t)},Ii.isNil=function(t){return null==t},Ii.isNull=function(t){return null===t},Ii.isNumber=X_,Ii.isObject=W_,Ii.isObjectLike=q_,Ii.isPlainObject=B_,Ii.isRegExp=z_,Ii.isSafeInteger=function(t){return U_(t)&&t>=-9007199254740991&&t<=9007199254740991},Ii.isSet=K_,Ii.isString=V_,Ii.isSymbol=J_,Ii.isTypedArray=$_,Ii.isUndefined=function(t){return void 0===t},Ii.isWeakMap=function(t){return q_(t)&&ia(t)==E},Ii.isWeakSet=function(t){return q_(t)&&"[object WeakSet]"==ds(t)},Ii.join=function(t,e){return null==t?"":si.call(t,e)},Ii.kebabCase=jo,Ii.last=Ha,Ii.lastIndexOf=function(t,e,i){var s=null==t?0:t.length;if(!s)return-1;var n=s;return void 0!==i&&(n=(n=io(i))<0?ai(s+n,0):_i(n,s-1)),e==e?function(t,e,i){for(var s=i+1;s--;)if(t[s]===e)return s;return s}(t,e,n):be(t,xe,n,!0)},Ii.lowerCase=Lo,Ii.lowerFirst=Mo,Ii.lt=Q_,Ii.lte=Z_,Ii.max=function(t){return t&&t.length?is(t,Bo,us):void 0},Ii.maxBy=function(t,e){return t&&t.length?is(t,Jn(e,2),us):void 0},Ii.mean=function(t){return Te(t,Bo)},Ii.meanBy=function(t,e){return Te(t,Jn(e,2))},Ii.min=function(t){return t&&t.length?is(t,Bo,As):void 0},Ii.minBy=function(t,e){return t&&t.length?is(t,Jn(e,2),As):void 0},Ii.stubArray=nr,Ii.stubFalse=ar,Ii.stubObject=function(){return{}},Ii.stubString=function(){return""},Ii.stubTrue=function(){return!0},Ii.multiply=lr,Ii.nth=function(t,e){return t&&t.length?Rs(t,io(e)):void 0},Ii.noConflict=function(){return zt._===this&&(zt._=Nt),this},Ii.noop=$o,Ii.now=p_,Ii.pad=function(t,e,i){t=_o(t);var s=(e=io(e))?Xe(t):0;if(!e||s>=e)return t;var n=(e-s)/2;return On(Ze(n),i)+t+On(Qe(n),i)},Ii.padEnd=function(t,e,i){t=_o(t);var s=(e=io(e))?Xe(t):0;return e&&s<e?t+On(e-s,i):t},Ii.padStart=function(t,e,i){t=_o(t);var s=(e=io(e))?Xe(t):0;return e&&s<e?On(e-s,i)+t:t},Ii.parseInt=function(t,e,i){return i||null==e?e=0:e&&(e=+e),ri(_o(t).replace(V,""),e||0)},Ii.random=function(t,e,i){if(i&&"boolean"!=typeof i&&oa(t,e,i)&&(e=i=void 0),void 0===i&&("boolean"==typeof e?(i=e,e=void 0):"boolean"==typeof t&&(i=t,t=void 0)),void 0===t&&void 0===e?(t=0,e=1):(t=eo(t),void 0===e?(e=t,t=0):e=eo(e)),t>e){var s=t;t=e,e=s}if(i||t%1||e%1){var n=hi();return _i(t+n*(e-t+qt("1e-"+((n+"").length-1))),e)}return Ms(t,e)},Ii.reduce=function(t,e,i){var s=O_(t)?me:Ie,n=arguments.length<3;return s(t,Jn(e,4),i,n,Zi)},Ii.reduceRight=function(t,e,i){var s=O_(t)?ge:Ie,n=arguments.length<3;return s(t,Jn(e,4),i,n,ts)},Ii.repeat=function(t,e,i){return e=(i?oa(t,e,i):void 0===e)?1:io(e),Ds(_o(t),e)},Ii.replace=function(){var t=arguments,e=_o(t[0]);return t.length<3?e:e.replace(t[1],t[2])},Ii.result=function(t,e,i){var s=-1,n=(e=on(e,t)).length;for(n||(n=1,t=void 0);++s<n;){var a=null==t?void 0:t[Aa(e[s])];void 0===a&&(s=n,a=i),t=Y_(a)?a.call(t):a}return t},Ii.round=dr,Ii.runInContext=t,Ii.sample=function(t){return(O_(t)?Hi:Hs)(t)},Ii.size=function(t){if(null==t)return 0;if(L_(t))return V_(t)?Xe(t):t.length;var e=ia(t);return e==m||e==y?t.size:xs(t).length},Ii.snakeCase=Do,Ii.some=function(t,e,i){var s=O_(t)?we:Xs;return i&&oa(t,e,i)&&(e=void 0),s(t,Jn(e,3))},Ii.sortedIndex=function(t,e){return Bs(t,e)},Ii.sortedIndexBy=function(t,e,i){return zs(t,e,Jn(i,2))},Ii.sortedIndexOf=function(t,e){var i=null==t?0:t.length;if(i){var s=Bs(t,e);if(s<i&&k_(t[s],e))return s}return-1},Ii.sortedLastIndex=function(t,e){return Bs(t,e,!0)},Ii.sortedLastIndexBy=function(t,e,i){return zs(t,e,Jn(i,2),!0)},Ii.sortedLastIndexOf=function(t,e){if(null==t?0:t.length){var i=Bs(t,e,!0)-1;if(k_(t[i],e))return i}return-1},Ii.startCase=Co,Ii.startsWith=function(t,e,i){return t=_o(t),i=null==i?0:Ki(io(i),0,t.length),e=Js(e),t.slice(i,i+e.length)==e},Ii.subtract=ur,Ii.sum=function(t){return t&&t.length?ke(t,Bo):0},Ii.sumBy=function(t,e){return t&&t.length?ke(t,Jn(e,2)):0},Ii.template=function(t,e,i){var s=Ii.templateSettings;i&&oa(t,e,i)&&(e=void 0),t=_o(t),e=ho({},e,s,Un);var n,a,_=ho({},e.imports,s.imports,Un),o=bo(_),r=Pe(_,o),h=0,c=e.interpolate||ct,l="__p += '",d=gt((e.escape||ct).source+"|"+c.source+"|"+(c===W?it:ct).source+"|"+(e.evaluate||ct).source+"|$","g"),u="//# sourceURL="+(Tt.call(e,"sourceURL")?(e.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Yt+"]")+"\n";t.replace(d,(function(e,i,s,_,o,r){return s||(s=_),l+=t.slice(h,r).replace(lt,He),i&&(n=!0,l+="' +\n__e("+i+") +\n'"),o&&(a=!0,l+="';\n"+o+";\n__p += '"),s&&(l+="' +\n((__t = ("+s+")) == null ? '' : __t) +\n'"),h=r+e.length,e})),l+="';\n";var p=Tt.call(e,"variable")&&e.variable;p||(l="with (obj) {\n"+l+"\n}\n"),l=(a?l.replace(j,""):l).replace(L,"$1").replace(M,"$1;"),l="function("+(p||"obj")+") {\n"+(p?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(n?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+l+"return __p\n}";var m=Go((function(){return ut(o,u+"return "+l).apply(void 0,r)}));if(m.source=l,H_(m))throw m;return m},Ii.times=function(t,e){if((t=io(t))<1||t>9007199254740991)return[];var i=4294967295,s=_i(t,4294967295);t-=4294967295;for(var n=Ne(s,e=Jn(e));++i<t;)e(i);return n},Ii.toFinite=eo,Ii.toInteger=io,Ii.toLength=so,Ii.toLower=function(t){return _o(t).toLowerCase()},Ii.toNumber=no,Ii.toSafeInteger=function(t){return t?Ki(io(t),-9007199254740991,9007199254740991):0===t?t:0},Ii.toString=_o,Ii.toUpper=function(t){return _o(t).toUpperCase()},Ii.trim=function(t,e,i){if((t=_o(t))&&(i||void 0===e))return t.replace(K,"");if(!t||!(e=Js(e)))return t;var s=Be(t),n=Be(e);return hn(s,je(s,n),Le(s,n)+1).join("")},Ii.trimEnd=function(t,e,i){if((t=_o(t))&&(i||void 0===e))return t.replace(J,"");if(!t||!(e=Js(e)))return t;var s=Be(t);return hn(s,0,Le(s,Be(e))+1).join("")},Ii.trimStart=function(t,e,i){if((t=_o(t))&&(i||void 0===e))return t.replace(V,"");if(!t||!(e=Js(e)))return t;var s=Be(t);return hn(s,je(s,Be(e))).join("")},Ii.truncate=function(t,e){var i=30,s="...";if(W_(e)){var n="separator"in e?e.separator:n;i="length"in e?io(e.length):i,s="omission"in e?Js(e.omission):s}var a=(t=_o(t)).length;if(Ye(t)){var _=Be(t);a=_.length}if(i>=a)return t;var o=i-Xe(s);if(o<1)return s;var r=_?hn(_,0,o).join(""):t.slice(0,o);if(void 0===n)return r+s;if(_&&(o+=r.length-o),z_(n)){if(t.slice(o).search(n)){var h,c=r;for(n.global||(n=gt(n.source,_o(st.exec(n))+"g")),n.lastIndex=0;h=n.exec(c);)var l=h.index;r=r.slice(0,void 0===l?o:l)}}else if(t.indexOf(Js(n),o)!=o){var d=r.lastIndexOf(n);d>-1&&(r=r.slice(0,d))}return r+s},Ii.unescape=function(t){return(t=_o(t))&&H.test(t)?t.replace(D,ze):t},Ii.uniqueId=function(t){var e=++At;return _o(t)+e},Ii.upperCase=Ho,Ii.upperFirst=Yo,Ii.each=__,Ii.eachRight=o_,Ii.first=La,Jo(Ii,(cr={},os(Ii,(function(t,e){Tt.call(Ii.prototype,e)||(cr[e]=t)})),cr),{chain:!1}),Ii.VERSION="4.17.20",oe(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Ii[t].placeholder=Ii})),oe(["drop","take"],(function(t,e){Pi.prototype[t]=function(i){i=void 0===i?1:ai(io(i),0);var s=this.__filtered__&&!e?new Pi(this):this.clone();return s.__filtered__?s.__takeCount__=_i(i,s.__takeCount__):s.__views__.push({size:_i(i,4294967295),type:t+(s.__dir__<0?"Right":"")}),s},Pi.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}})),oe(["filter","map","takeWhile"],(function(t,e){var i=e+1,s=1==i||3==i;Pi.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:Jn(t,3),type:i}),e.__filtered__=e.__filtered__||s,e}})),oe(["head","last"],(function(t,e){var i="take"+(e?"Right":"");Pi.prototype[t]=function(){return this[i](1).value()[0]}})),oe(["initial","tail"],(function(t,e){var i="drop"+(e?"":"Right");Pi.prototype[t]=function(){return this.__filtered__?new Pi(this):this[i](1)}})),Pi.prototype.compact=function(){return this.filter(Bo)},Pi.prototype.find=function(t){return this.filter(t).head()},Pi.prototype.findLast=function(t){return this.reverse().find(t)},Pi.prototype.invokeMap=Cs((function(t,e){return"function"==typeof t?new Pi(this):this.map((function(i){return ws(i,t,e)}))})),Pi.prototype.reject=function(t){return this.filter(x_(Jn(t)))},Pi.prototype.slice=function(t,e){t=io(t);var i=this;return i.__filtered__&&(t>0||e<0)?new Pi(i):(t<0?i=i.takeRight(-t):t&&(i=i.drop(t)),void 0!==e&&(i=(e=io(e))<0?i.dropRight(-e):i.take(e-t)),i)},Pi.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},Pi.prototype.toArray=function(){return this.take(4294967295)},os(Pi.prototype,(function(t,e){var i=/^(?:filter|find|map|reject)|While$/.test(e),s=/^(?:head|last)$/.test(e),n=Ii[s?"take"+("last"==e?"Right":""):e],a=s||/^find/.test(e);n&&(Ii.prototype[e]=function(){var e=this.__wrapped__,_=s?[1]:arguments,o=e instanceof Pi,r=_[0],h=o||O_(e),c=function(t){var e=n.apply(Ii,pe([t],_));return s&&l?e[0]:e};h&&i&&"function"==typeof r&&1!=r.length&&(o=h=!1);var l=this.__chain__,d=!!this.__actions__.length,u=a&&!l,p=o&&!d;if(!a&&h){e=p?e:new Pi(this);var m=t.apply(e,_);return m.__actions__.push({func:e_,args:[c],thisArg:void 0}),new Ri(m,l)}return u&&p?t.apply(this,_):(m=this.thru(c),u?s?m.value()[0]:m.value():m)})})),oe(["pop","push","shift","sort","splice","unshift"],(function(t){var e=yt[t],i=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",s=/^(?:pop|shift)$/.test(t);Ii.prototype[t]=function(){var t=arguments;if(s&&!this.__chain__){var n=this.value();return e.apply(O_(n)?n:[],t)}return this[i]((function(i){return e.apply(O_(i)?i:[],t)}))}})),os(Pi.prototype,(function(t,e){var i=Ii[e];if(i){var s=i.name+"";Tt.call(fi,s)||(fi[s]=[]),fi[s].push({name:e,func:i})}})),fi[kn(void 0,2).name]=[{name:"wrapper",func:void 0}],Pi.prototype.clone=function(){var t=new Pi(this.__wrapped__);return t.__actions__=wn(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=wn(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=wn(this.__views__),t},Pi.prototype.reverse=function(){if(this.__filtered__){var t=new Pi(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},Pi.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,i=O_(t),s=e<0,n=i?t.length:0,a=function(t,e,i){var s=-1,n=i.length;for(;++s<n;){var a=i[s],_=a.size;switch(a.type){case"drop":t+=_;break;case"dropRight":e-=_;break;case"take":e=_i(e,t+_);break;case"takeRight":t=ai(t,e-_)}}return{start:t,end:e}}(0,n,this.__views__),_=a.start,o=a.end,r=o-_,h=s?o:_-1,c=this.__iteratees__,l=c.length,d=0,u=_i(r,this.__takeCount__);if(!i||!s&&n==r&&u==r)return en(t,this.__actions__);var p=[];t:for(;r--&&d<u;){for(var m=-1,g=t[h+=e];++m<l;){var w=c[m],f=w.iteratee,y=w.type,b=f(g);if(2==y)g=b;else if(!b){if(1==y)continue t;break t}}p[d++]=g}return p},Ii.prototype.at=i_,Ii.prototype.chain=function(){return t_(this)},Ii.prototype.commit=function(){return new Ri(this.value(),this.__chain__)},Ii.prototype.next=function(){void 0===this.__values__&&(this.__values__=to(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?void 0:this.__values__[this.__index__++]}},Ii.prototype.plant=function(t){for(var e,i=this;i instanceof Ni;){var s=Ia(i);s.__index__=0,s.__values__=void 0,e?n.__wrapped__=s:e=s;var n=s;i=i.__wrapped__}return n.__wrapped__=t,e},Ii.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof Pi){var e=t;return this.__actions__.length&&(e=new Pi(this)),(e=e.reverse()).__actions__.push({func:e_,args:[Wa],thisArg:void 0}),new Ri(e,this.__chain__)}return this.thru(Wa)},Ii.prototype.toJSON=Ii.prototype.valueOf=Ii.prototype.value=function(){return en(this.__wrapped__,this.__actions__)},Ii.prototype.first=Ii.prototype.head,Qt&&(Ii.prototype[Qt]=function(){return this}),Ii}();zt._=Ke,void 0===(n=function(){return Ke}.call(e,i,e,s))||(s.exports=n)}).call(this)}).call(this,i(36),i(37)(t))},function(t,e,i){"use strict";var s;Object.defineProperty(e,"__esModule",{value:!0}),e.CursorManager=e.PointVariants=e.WiggleVariants=void 0,function(t){t[t.NORMAL=0]="NORMAL"}(e.WiggleVariants||(e.WiggleVariants={})),function(t){t[t.SHORT=0]="SHORT",t[t.NORMAL=1]="NORMAL",t[t.LONG=2]="LONG"}(s=e.PointVariants||(e.PointVariants={}));class n{constructor(t){this.game=t,this.group=this.game.add.group(),this.group.visible=!1,this.group.x=0,this.group.y=0,this.cursor=this.group.create(0,0,"cursor"),this.cursor.anchor.x=.5,this.active_tween=null,this.cursor_default_pos={x:0,y:0},this.cursor_flipped=!1}init_tween(t,e){switch(this.clear_tweens(),this.group.visible||this.show(),t.type){case n.WIGGLE.KEY:let e=n.WIGGLE.X1,i=n.WIGGLE.X2,a=n.WIGGLE.Y1,_=n.WIGGLE.Y2,o=t.time?t.time:n.WIGGLE.DEFAULT_TIME;this.active_tween=this.game.add.tween(this.cursor).to({x:this.cursor.x+e,y:this.cursor.y+a},o,Phaser.Easing.Linear.None).to({x:this.cursor.x+i,y:this.cursor.y+_},o,Phaser.Easing.Linear.None).to({x:this.cursor.x+e,y:this.cursor.y+a},o,Phaser.Easing.Linear.None).to({x:this.cursor.x,y:this.cursor.y},o,Phaser.Easing.Linear.None).loop();break;case n.POINT.KEY:void 0===t.variant&&(t.variant=s.NORMAL);let r=n.POINT[t.variant].X,h=n.POINT[t.variant].Y,c=t.time?t.time:n.POINT.DEFAULT_TIME;this.cursor_flipped&&(r*=-1),this.active_tween=this.game.add.tween(this.cursor).to({x:this.cursor.x+r,y:this.cursor.y+h},c,Phaser.Easing.Linear.None).to({x:this.cursor.x,y:this.cursor.y},c,Phaser.Easing.Linear.None).loop()}this.bring_to_top(),this.active_tween&&this.active_tween.start(),e&&e()}move_to(t,e,i){this.group.visible||this.show(),this.bring_to_top();const s=!!e&&(void 0!==e.flip&&e.flip),a=!e||(void 0===e.animate||e.animate),_=e?e.tween_config:void 0,o=e&&void 0!==e.move_time?e.move_time:n.DEFAULT_MOVE_TIME;if(s!==this.cursor_flipped&&this.flip_cursor(),_||this.clear_tweens(),t.x+=n.X_SHIFT,this.cursor_default_pos={x:t.x+this.game.camera.x,y:t.y+this.game.camera.y},a){this.game.add.tween(this.cursor).to({x:t.x+this.game.camera.x,y:t.y+this.game.camera.y},o,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{_?this.init_tween(_,i):i&&i()},this)}else this.cursor.x=t.x+this.game.camera.x,this.cursor.y=t.y+this.game.camera.y,_?this.init_tween(_,i):i&&i()}clear_tweens(){this.active_tween&&this.game.tweens.remove(this.active_tween),this.active_tween=null,this.cursor.x=this.cursor_default_pos.x,this.cursor.y=this.cursor_default_pos.y}flip_cursor(){this.clear_tweens(),this.cursor.scale.x*=-1,this.cursor_flipped=!this.cursor_flipped}bring_to_top(){this.game.world.bringToTop(this.group)}hide(){this.group.visible=!1}show(){this.group.visible=!0}destroy(){this.group.remove(this.cursor,!0),this.group=null,this.cursor=null,this.active_tween=null}}e.CursorManager=n,n.CursorTweens={WIGGLE:"wiggle",POINT:"point"},n.WIGGLE={KEY:n.CursorTweens.WIGGLE,X1:-4,Y1:4,X2:-8,Y2:0,DEFAULT_TIME:Phaser.Timer.QUARTER>>1},n.POINT={KEY:n.CursorTweens.POINT,0:{X:-2,Y:2},1:{X:-4,Y:4},2:{X:-6,Y:6},DEFAULT_TIME:Phaser.Timer.QUARTER>>1},n.DEFAULT_MOVE_TIME=Phaser.Timer.QUARTER>>1,n.X_SHIFT=8},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Player=e.ordered_main_stats=e.ordered_status_menu=e.ordered_status_battle=e.on_remove_status_msg=e.on_catch_status_msg=e.effect_type_stat=e.main_stats=e.permanent_status=e.temporary_status=e.fighter_types=void 0;const s=i(9),n=i(0);var a,_,o,r;!function(t){t[t.ALLY=1]="ALLY",t[t.ENEMY=2]="ENEMY"}(a=e.fighter_types||(e.fighter_types={})),function(t){t.DELUSION="delusion",t.STUN="stun",t.SLEEP="sleep",t.SEAL="seal",t.DEATH_CURSE="death_curse"}(_=e.temporary_status||(e.temporary_status={})),function(t){t.DOWNED="downed",t.POISON="poison",t.VENOM="venom",t.EQUIP_CURSE="equip_curse",t.HAUNT="haunt"}(o=e.permanent_status||(e.permanent_status={})),function(t){t.MAX_HP="max_hp",t.CURRENT_HP="current_hp",t.MAX_PP="max_pp",t.CURRENT_PP="current_pp",t.ATTACK="atk",t.DEFENSE="def",t.AGILITY="agi",t.LUCK="luk"}(r=e.main_stats||(e.main_stats={})),e.effect_type_stat={[s.effect_types.MAX_HP]:r.MAX_HP,[s.effect_types.MAX_PP]:r.MAX_PP,[s.effect_types.ATTACK]:r.ATTACK,[s.effect_types.DEFENSE]:r.DEFENSE,[s.effect_types.AGILITY]:r.AGILITY,[s.effect_types.LUCK]:r.LUCK,[s.effect_types.CURRENT_HP]:r.CURRENT_HP,[s.effect_types.CURRENT_PP]:r.CURRENT_PP},e.on_catch_status_msg={[_.DELUSION]:t=>t.name+" is wrapped in delusion!",[_.STUN]:t=>t.name+" has been stunned!",[_.SLEEP]:t=>t.name+" falls asleep!",[_.SEAL]:t=>t.name+"'s Psynergy has been sealed!",[_.DEATH_CURSE]:t=>`The Spirit of Death embraces ${t.name}!`,[o.DOWNED]:t=>t.fighter_type===a.ALLY?t.name+" was downed...":`You felled ${t.name}!`,[o.POISON]:t=>t.name+" is infected with poison!",[o.VENOM]:t=>t.name+" is infected with deadly poison!",[o.HAUNT]:t=>`An evil spirit grips ${t.name}!`},e.on_remove_status_msg={[_.DELUSION]:t=>t.name+" sees clearly once again!",[_.STUN]:t=>t.name+" is no longer stunned!",[_.SLEEP]:t=>t.name+" wakes from slumber!",[_.SEAL]:t=>t.name+"'s Psynergy seal is gone!",[o.DOWNED]:t=>t.name+"'s has been revived!",[o.POISON]:t=>`The poison is purged from ${t.name}!`,[o.VENOM]:t=>`The venom is purged from ${t.name}!`},e.ordered_status_battle=[o.DOWNED,o.EQUIP_CURSE,_.DEATH_CURSE,o.POISON,o.VENOM,_.SEAL,_.STUN,_.SLEEP,o.HAUNT,_.DELUSION],e.ordered_status_menu=[o.DOWNED,o.POISON,o.VENOM,o.EQUIP_CURSE,o.HAUNT],e.ordered_main_stats=[r.MAX_HP,r.MAX_PP,r.ATTACK,r.DEFENSE,r.AGILITY,r.LUCK];e.Player=class{constructor(t,e){this.key_name=t,this.name=e,this.temporary_status=new Set,this.permanent_status=new Set,this.effects=[],this.init_effect_turns_count()}init_effect_turns_count(){this.effect_turns_count={[_.DELUSION]:0,[_.STUN]:0,[_.SLEEP]:0,[_.SEAL]:0,[_.DEATH_CURSE]:0,[s.effect_types.MAX_HP]:0,[s.effect_types.MAX_PP]:0,[s.effect_types.ATTACK]:0,[s.effect_types.DEFENSE]:0,[s.effect_types.AGILITY]:0,[s.effect_types.LUCK]:0,[s.effect_types.POWER]:{},[s.effect_types.RESIST]:{}};for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t];this.effect_turns_count[s.effect_types.POWER][e]=0,this.effect_turns_count[s.effect_types.RESIST][e]=0}}get_effect_turns_key(t){switch(t.type){case s.effect_types.TEMPORARY_STATUS:return t.status_key_name;case s.effect_types.MAX_HP:case s.effect_types.MAX_PP:case s.effect_types.ATTACK:case s.effect_types.DEFENSE:case s.effect_types.AGILITY:case s.effect_types.LUCK:return t.type;case s.effect_types.POWER:case s.effect_types.RESIST:return t.type+"_"+t.attribute}return null}get_effect_turns_count(t){switch(t.type){case s.effect_types.TEMPORARY_STATUS:return this.effect_turns_count[t.status_key_name];case s.effect_types.MAX_HP:case s.effect_types.MAX_PP:case s.effect_types.ATTACK:case s.effect_types.DEFENSE:case s.effect_types.AGILITY:case s.effect_types.LUCK:return this.effect_turns_count[t.type];case s.effect_types.POWER:case s.effect_types.RESIST:return this.effect_turns_count[t.type][t.attribute]}return null}set_effect_turns_count(t,e=-1,i=!0){switch(t.type){case s.effect_types.TEMPORARY_STATUS:this.effect_turns_count[t.status_key_name]=i?this.effect_turns_count[t.status_key_name]+e:e;case s.effect_types.MAX_HP:case s.effect_types.MAX_PP:case s.effect_types.ATTACK:case s.effect_types.DEFENSE:case s.effect_types.AGILITY:case s.effect_types.LUCK:return this.effect_turns_count[t.type]=i?this.effect_turns_count[t.type]+e:e;case s.effect_types.POWER:case s.effect_types.RESIST:return this.effect_turns_count[t.type][t.attribute]=i?this.effect_turns_count[t.type][t.attribute]+e:e}}add_effect(t,e,i=!1){let n,a=new s.Effect(t.type,t.quantity,t.operator,e,t.quantity_is_absolute,t.rate,t.chance,t.attribute,t.add_status,t.status_key_name,t.turns_quantity,t.variation_on_final_result,t.damage_formula_key_name,t.usage,t.on_caster,t.relative_to_property,t.sub_effect,t.effect_msg,t.show_msg,this);return this.effects.push(a),i&&(n=a.apply_effect()),{effect:a,changes:n}}remove_effect(t,e=!1){this.effects=this.effects.filter(e=>e!==t),e&&t.apply_effect()}add_permanent_status(t){this.permanent_status.add(t)}remove_permanent_status(t){this.permanent_status.delete(t)}has_permanent_status(t){return this.permanent_status.has(t)}add_temporary_status(t){this.temporary_status.add(t)}remove_temporary_status(t){this.temporary_status.delete(t)}has_temporary_status(t){return this.temporary_status.has(t)}is_paralyzed(){return this.temporary_status.has(_.SLEEP)||this.temporary_status.has(_.STUN)}is_poisoned(){return this.permanent_status.has(o.POISON)?o.POISON:!!this.permanent_status.has(o.VENOM)&&o.VENOM}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TileEvent=e.event_types=void 0;const s=i(0),n=i(3);!function(t){t.CLIMB="climb",t.SPEED="speed",t.TELEPORT="teleport",t.JUMP="jump",t.STEP="step",t.COLLISION="collision",t.SLIDER="slider"}(e.event_types||(e.event_types={}));class a{constructor(t,e,i,n,_,o,r,h,c,l){this.game=t,this.data=e,this.type=i,this.x=n,this.y=_,this.location_key=a.get_location_key(this.x,this.y),this.id=a.id_incrementer++,this.activation_collision_layers=Array.isArray(r)?r:[r],void 0!==o&&"all"!==o||(o=s.get_directions(!0)),this.activation_directions=Array.isArray(o)?o:[o],this.dynamic=h,this.active=Array.isArray(c)?c:new Array(this.activation_directions.length).fill(void 0===c||c),this.origin_interactable_object=void 0===l?null:l,a.events[this.id]=this}is_active(t){const e=s.split_direction(t);for(let t=0;t<e.length;++t)if(this.active[this.activation_directions.indexOf(e[t])])return!0;return!1}activate_at(t){this.active[this.activation_directions.indexOf(t)]=!0}deactivate_at(t){this.active[this.activation_directions.indexOf(t)]=!1}activate(){this.active=this.active.map(()=>!0)}deactivate(){this.active=this.active.map(()=>!1)}check_position(){return this.data.hero.tile_x_pos===this.x&&this.data.hero.tile_y_pos===this.y}static get_location_key(t,e){return t.toString()+"_"+e.toString()}static get_event_by_id(t,e){return n.find(t,{id:e})}static get_event(t){return a.events[t]}static reset(){a.id_incrementer=0,a.events={}}}e.TileEvent=a,a.reset()},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Djinn=e.djinn_font_colors=e.djinn_status=void 0;const s=i(1),n=i(0),a=i(3);var _;!function(t){t.SET="set",t.STANDBY="standby",t.RECOVERY="recovery",t.ANY="any"}(_=e.djinn_status||(e.djinn_status={})),e.djinn_font_colors={[_.RECOVERY]:s.YELLOW_FONT_COLOR,[_.STANDBY]:s.RED_FONT_COLOR,[_.SET]:s.DEFAULT_FONT_COLOR};e.Djinn=class{constructor(t,e,i,s,n,a,o,r,h,c,l,d){this.key_name=t,this.name=e,this.description=i,this.element=s,this.ability_key_name=n,this.hp_boost=a,this.pp_boost=o,this.atk_boost=r,this.def_boost=h,this.agi_boost=c,this.luk_boost=l,this.status=_.SET,this.index=d,this.recovery_turn=0}set_status(t,e){this.status=t,e.update_elemental_attributes(),e.update_class(),e.update_attributes(),e.update_abilities()}static has_standby_djinn(t,e){return a.some(e.map(t=>t.djinni).map(e=>e.filter(e=>t[e].status===_.STANDBY).length))}static get_standby_djinni(t,e){let i=a.mapValues(a.groupBy(e.map(t=>t.djinni).flat(),e=>t[e].element),e=>e.filter(e=>t[e].status===_.STANDBY).length);for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t];e in i||(i[e]=0)}return i}static set_to_recovery(t,e,i){let s=Object.assign({},i),n=!1;for(let i=0;i<e.length;++i){const o=e[i],r=o.djinni;let h=1;for(let e=0;e<r.length;++e){const i=t[r[e]];if(i.status===_.STANDBY&&(s[i.element]>0&&(i.recovery_turn=h,++h,i.set_status(_.RECOVERY,o),--s[i.element],!a.some(s,Boolean)))){n=!0;break}}if(n)break}}}},function(t,e,i){"use strict";var s;Object.defineProperty(e,"__esModule",{value:!0}),e.Item=e.use_types=e.item_types=void 0,function(t){t.WEAPONS="weapons",t.ARMOR="armor",t.CHEST_PROTECTOR="chest_protector",t.HEAD_PROTECTOR="head_protector",t.LEG_PROTECTOR="leg_protector",t.ABILITY_GRANTOR="ability_grantor",t.CLASS_CHANGER="class_changer",t.RING="ring",t.UNDERWEAR="underwear",t.GENERAL_ITEM="general_item"}(s=e.item_types||(e.item_types={})),function(t){t.MULTIPLE_USES="multiple_uses",t.SINGLE_USE="single_use",t.BREAKS_WHEN_USE="breaks_when_use",t.NO_USE="no_use"}(e.use_types||(e.use_types={}));class n{constructor(t,e,i,n,a,_,o,r,h,c,l,d,u,p,m,g,w,f){this.key_name=t,this.name=e,this.type=i,this.description=n,this.use_type=a,this.curses_when_equipped=_,this.cant_be_removed=o,this.rare_item=r,this.important_item=h,this.carry_up_to_30=c,this.effects=l,this.attribute=d,this.unleash_ability=u,this.unleash_rate=p,this.use_ability=m,this.equipable_chars=g,this.price=w,this.granted_ability=f,this.equipable=this.type!==s.GENERAL_ITEM}}e.Item=n,n.BREAKS_CHANCE=1/8},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Effect=e.effect_msg=e.effect_usages=e.effect_operators=e.effect_names=e.effect_types=void 0;const s=i(5),n=i(0);var a,_,o;!function(t){t.MAX_HP="max_hp",t.MAX_PP="max_pp",t.ATTACK="attack",t.DEFENSE="defense",t.AGILITY="agility",t.LUCK="luck",t.POWER="power",t.RESIST="resist",t.CURRENT_HP="current_hp",t.CURRENT_PP="current_pp",t.HP_RECOVERY="hp_recovery",t.PP_RECOVERY="pp_recovery",t.CRITICALS="criticals",t.COUNTER_STRIKE="counter_strike",t.TEMPORARY_STATUS="temporary_status",t.PERMANENT_STATUS="permanent_status",t.TURNS="turns",t.ENCOUNTERS="encounters",t.FLEE="flee",t.END_THE_ROUND="end_the_round",t.ABILITY_POWER="ability_power",t.SET_DJINN="set_djinn",t.DAMAGE_MODIFIER="damage_modifier",t.DAMAGE_INPUT="damage_input"}(a=e.effect_types||(e.effect_types={})),e.effect_names={[a.MAX_HP]:"HP",[a.MAX_PP]:"PP",[a.ATTACK]:"Attack",[a.DEFENSE]:"Defense",[a.AGILITY]:"Agility",[a.LUCK]:"Luck",[a.POWER]:"Power",[a.RESIST]:"Resist"},function(t){t.PLUS="plus",t.MINUS="minus",t.TIMES="times",t.DIVIDE="divide"}(_=e.effect_operators||(e.effect_operators={})),function(t){t.NOT_APPLY="not_apply",t.ON_USE="on_use",t.ON_TAKE="on_take",t.BATTLE_ROUND_START="battle_round_start",t.BATTLE_ROUND_END="battle_round_end",t.PLAYER_TURN_START="player_turn_start",t.PLAYER_TURN_END="player_turn_end"}(o=e.effect_usages||(e.effect_usages={})),e.effect_msg={aura:t=>`A protective aura encircles ${t.name}!`,double:()=>"And it got doubled!"};class r{constructor(t,e,i,s,a,_,r,h,c,l,d,u,p,m,g,w,f,y,b,v){this.type=t,this.quantity=e,this.operator=i,this.effect_owner_instance=s,this.quantity_is_absolute=void 0!==a&&a,this.rate=void 0===_?1:_,this.chance=void 0===r?1:r,this.attribute=void 0===h?n.elements.NO_ELEMENT:h,this.add_status=c,this.status_key_name=l,this.turns_quantity=d,this.turn_count=d,this.variation_on_final_result=void 0!==u&&u,this.damage_formula_key_name=p,this.usage=void 0===m?o.NOT_APPLY:m,this.on_caster=void 0!==g&&g,this.relative_to_property=w,this.effect_msg=y,this.show_msg=void 0===b||b,this.char=v,this.sub_effect=f,void 0!==this.sub_effect&&this.init_sub_effect()}static apply_operator(t,e,i){switch(i){case _.PLUS:return t+e;case _.MINUS:return t-e;case _.TIMES:return t*e;case _.DIVIDE:return t/e}}init_sub_effect(){this.sub_effect.quantity_is_absolute=void 0!==this.sub_effect.quantity_is_absolute&&this.sub_effect.quantity_is_absolute,this.sub_effect.rate=void 0===this.sub_effect.rate?1:this.sub_effect.rate,this.sub_effect.chance=void 0===this.sub_effect.chance?1:this.sub_effect.chance,this.sub_effect.attribute=void 0===this.sub_effect.attribute?n.elements.NO_ELEMENT:this.sub_effect.attribute,this.sub_effect.variation_on_final_result=void 0!==this.sub_effect.variation_on_final_result&&this.sub_effect.variation_on_final_result,this.sub_effect.usage=void 0===this.sub_effect.usage?o.NOT_APPLY:this.sub_effect.usage,this.sub_effect.on_caster=void 0!==this.sub_effect.on_caster&&this.sub_effect.on_caster}apply_general_value(t,e){const i=void 0!==t?this.char[t]:e;if(Math.random()>=this.chance)return{before:i,after:i};let s;if(this.quantity_is_absolute)void 0!==t&&(this.char[t]=this.quantity),s=this.quantity;else{let i,a=this.quantity;a*=this.rate,this.variation_on_final_result&&(a+=n.variation()),i=void 0!==t?this.char[void 0!==this.relative_to_property?this.relative_to_property:t]:e;const _=0|r.apply_operator(i,a,this.operator);void 0!==t&&(this.char[t]=_),s=_}return{before:i,after:s}}apply_subeffect(t,e){return Math.random()<this.sub_effect.chance&&(this.sub_effect.quantity_is_absolute?this.char[t]=e:(e*=this.sub_effect.rate,this.sub_effect.variation_on_final_result&&(e+=n.variation()),this.char[t]=0|r.apply_operator(this.char[t],e,this.sub_effect.operator))),this.char[t]}static preview_value_applied(t,e){if(t.quantity_is_absolute)return t.quantity;{let i=t.quantity;return t.rate||(t.rate=1),i*=t.rate,i|=0,r.apply_operator(e,i,t.operator)}}check_caps(t,e,i,s){this.char[t]>this.char[e]?(s&&(s.after=this.char[e]),this.char[t]=this.char[e]):this.char[t]<i&&(s&&(s.after=i),this.char[t]=i)}apply_effect(t){switch(this.type){case a.MAX_HP:case a.MAX_PP:case a.ATTACK:case a.DEFENSE:case a.AGILITY:case a.LUCK:return this.apply_general_value(s.effect_type_stat[this.type]);case a.HP_RECOVERY:return this.apply_general_value("hp_recovery");case a.PP_RECOVERY:return this.apply_general_value("pp_recovery");case a.CURRENT_HP:const e=this.apply_general_value(s.main_stats.CURRENT_HP);return this.check_caps(s.main_stats.CURRENT_HP,s.main_stats.MAX_HP,0,e),e;case a.CURRENT_PP:const i=this.apply_general_value(s.main_stats.CURRENT_PP);return this.check_caps(s.main_stats.CURRENT_PP,s.main_stats.MAX_PP,0,i),i;case a.POWER:return this.apply_general_value(this.attribute+"_power_current");case a.RESIST:return this.apply_general_value(this.attribute+"_resist_current");case a.TURNS:return this.turn_count=1,this.apply_general_value("turns");case a.PERMANENT_STATUS:return void(this.add_status?this.char.add_permanent_status(this.status_key_name):this.char.remove_permanent_status(this.status_key_name));case a.TEMPORARY_STATUS:return void(this.add_status?this.char.add_temporary_status(this.status_key_name):this.char.remove_temporary_status(this.status_key_name));case a.DAMAGE_MODIFIER:return this.apply_general_value(void 0,t);case a.DAMAGE_INPUT:let n=this.apply_general_value(void 0,t);const _=s.effect_type_stat[this.sub_effect.type];switch(n.before=this.char[_],n.after=this.apply_subeffect(_,n.after),this.sub_effect.type){case a.CURRENT_HP:this.check_caps(s.main_stats.CURRENT_HP,s.main_stats.MAX_HP,0,n);break;case a.CURRENT_PP:this.check_caps(s.main_stats.CURRENT_PP,s.main_stats.MAX_PP,0,n)}return n}}}e.Effect=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.StatusComponent=e.StatusModes=void 0;const s=i(7),n=i(0);var a;!function(t){t[t.BATTLE=0]="BATTLE",t[t.MENU=1]="MENU"}(a=e.StatusModes||(e.StatusModes={}));class _{constructor(t,e,i,s,n,o){this.game=t,this.data=e,this.window=i,this.mode=o||a.BATTLE,(this.mode===a.BATTLE||this.mode===a.MENU)&&(this.manager=this.manager),this.window.internal_groups[_.GROUP_KEY]||this.window.define_internal_group(_.GROUP_KEY,{x:0,y:0}),this.highlight=this.game.add.graphics(0,0),this.highlight.blendMode=PIXI.blendModes.SCREEN,this.window.add_to_internal_group(_.GROUP_KEY,this.highlight),this.state_sprites=[],this.manager=s,this.current_col=n?n.col:0,this.current_line=n?n.line:0}get selected_char(){let t=null;return(this.mode===a.BATTLE||this.mode===a.MENU)&&(t=this.manager),t.selected_character}get battle_status_effects(){let t=null;return(this.mode===a.BATTLE||this.mode===a.MENU)&&(t=this.manager),t.battle_effects_array}update_description(t,e){let i=null;(this.mode===a.BATTLE||this.mode===a.MENU)&&(i=this.manager),i.update_description(t,e)}update_highlight(t){this.highlight.clear(),this.highlight.beginFill(this.window.color,1),this.highlight.drawRect(t.x,t.y,t.width,t.height),this.highlight.endFill()}get current_pos(){return{line:this.current_line,col:this.current_col}}reset(t){t&&(this.current_line=t.line,this.current_col=t.col),this.clear(),this.initialize(),this.select_option(),this.on_change()}clear(){this.highlight.clear(),this.data.cursor_manager.hide();for(let t in this.state_sprites)this.state_sprites[t].destroy();this.state_sprites=[],this.window.page_indicator.is_set&&this.window.page_indicator.terminante(),this.window.clear_separators()}get_djinn_counts(t){const e=this.selected_char[t+"_djinni"].map(t=>this.data.info.djinni_list[t]);return{total:e.length,set:e.filter(t=>t.status===s.djinn_status.SET).length}}get_elemental_stats(t){let e=0,i=0,s=0;switch(t){case n.elements.VENUS:e=this.selected_char.venus_level_current,i=this.selected_char.venus_power_current,s=this.selected_char.venus_resist_current;break;case n.elements.MERCURY:e=this.selected_char.mercury_level_current,i=this.selected_char.mercury_power_current,s=this.selected_char.mercury_resist_current;break;case n.elements.MARS:e=this.selected_char.mars_level_current,i=this.selected_char.mars_power_current,s=this.selected_char.mars_resist_current;break;case n.elements.JUPITER:e=this.selected_char.jupiter_level_current,i=this.selected_char.jupiter_power_current,s=this.selected_char.jupiter_resist_current}return{level:e,power:i,resistance:s}}get_djinni_sprite(t,e,i){const a=this.data.info.djinni_sprites[t].getActionKey(s.djinn_status.SET),_=e.create(i.x,i.y,a);_.anchor.setTo(.5,1),_.scale.x=-1;const o=n.reverse_directions[n.directions.down],r=s.djinn_status.SET;return this.data.info.djinni_sprites[t].setAnimation(_,r),_.animations.play(this.data.info.djinni_sprites[t].getAnimationKey(r,o)),_}}e.StatusComponent=_,_.GROUP_KEY="status_component"},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PageIndicator=e.PageIndicatorModes=void 0;const s=i(1);var n;!function(t){t[t.HIGHLIGHT=0]="HIGHLIGHT",t[t.FLASH=1]="FLASH"}(n=e.PageIndicatorModes||(e.PageIndicatorModes={}));class a{constructor(t,e,i){this.game=t,this.window=e,this.window.define_internal_group(a.GROUP_KEY,{x:0,y:0}),this.set=!1,this.mode=null,this.flash_event=null,this.page_count=0,this.anchor={x:i?i.x:this.window.width-3,y:i?i.y:0},this.default_arrow_pos={right:0,left:0}}get is_set(){return this.set}set position(t){t.x&&(this.anchor.x=t.x),t.y&&(this.anchor.y=t.y)}initialize(t,e,i){if(!(t<=1)){this.is_set,this.mode=i||n.HIGHLIGHT,this.page_count=t,this.number_bar=this.game.add.graphics(0,0),this.number_bar.alpha=0,this.window.add_sprite_to_group(this.number_bar,a.GROUP_KEY),this.number_bar.beginFill(this.window.color,1),this.number_bar.drawRect(0,0,a.NUMBER_WIDTH,a.NUMBER_HEIGHT),this.number_bar.endFill(),this.number_bar_highlight=this.game.add.graphics(0,0),this.number_bar_highlight.blendMode=PIXI.blendModes.SCREEN,this.number_bar_highlight.alpha=0,this.window.add_sprite_to_group(this.number_bar_highlight,a.GROUP_KEY),this.number_bar_highlight.beginFill(this.window.color,1),this.number_bar_highlight.drawRect(0,0,a.NUMBER_WIDTH,a.NUMBER_HEIGHT),this.number_bar_highlight.endFill(),this.page_numbers=[],this.arrow_timer=this.game.time.create(!1),this.flash_timer=this.game.time.create(!1),this.right_arrow=this.window.create_at_group(0,0,"page_arrow",void 0,void 0,a.GROUP_KEY),this.right_arrow.alpha=0,this.left_arrow=this.window.create_at_group(0,0,"page_arrow",void 0,void 0,a.GROUP_KEY),this.left_arrow.alpha=0,this.set=!0,this.number_bar.width=this.page_count*a.NUMBER_WIDTH,this.number_bar.x=this.anchor.x-this.number_bar.width-2,this.number_bar.y=this.anchor.y,this.number_bar.alpha=1;for(let t=1;t<=this.page_count;++t){const e=this.number_bar.x+a.NUMBER_WIDTH*(t-1)+(a.NUMBER_WIDTH>>1),i=this.number_bar.y+(a.NUMBER_HEIGHT>>1);this.page_numbers.push(this.window.set_text_in_position(t.toString(),e,i,!1,!0))}this.number_bar_highlight.alpha=1,this.select_page(e),this.set_arrows()}}select_page(t){this.mode===n.HIGHLIGHT?(this.number_bar_highlight.x=this.number_bar.x+t*a.NUMBER_WIDTH,this.number_bar_highlight.y=this.number_bar.y):this.mode===n.FLASH&&(this.number_bar_highlight.alpha=0,this.flash_timer.running&&(this.flash_event.pendingDelete=!0,this.flash_event=null),this.page_numbers.forEach((e,i)=>{e.text.tint=i===t?s.DEFAULT_FONT_COLOR:s.INACTIVE_FONT_COLOR}),this.flash_event=this.flash_timer.loop(a.FLASH_LOOP,()=>{this.page_numbers[t].text.tint===s.DEFAULT_FONT_COLOR?this.page_numbers[t].text.tint=s.INACTIVE_FONT_COLOR:this.page_numbers[t].text.tint=s.DEFAULT_FONT_COLOR}),this.flash_timer.start())}set_arrows(){this.left_arrow.alpha=1,this.right_arrow.alpha=1;const t=this.number_bar.x-8;this.left_arrow.x=t,this.left_arrow.y=this.anchor.y,this.right_arrow.x=this.anchor.x,this.right_arrow.y=this.anchor.y,this.right_arrow.scale.x=-1,this.right_arrow.x-=this.right_arrow.width,this.default_arrow_pos={right:this.right_arrow.x,left:this.left_arrow.x},this.arrow_timer.running&&this.arrow_timer.paused?this.arrow_timer.resume():(this.arrow_timer.loop(a.ARROW_LOOP,()=>{this.right_arrow.x!==this.default_arrow_pos.right&&this.left_arrow.x!==this.default_arrow_pos.left?(this.right_arrow.x=this.default_arrow_pos.right,this.left_arrow.x=this.default_arrow_pos.left):(this.right_arrow.x+=-a.ARROW_SHIFT,this.left_arrow.x+=a.ARROW_SHIFT)}),this.arrow_timer.start())}terminante(){if(this.set){this.set=!1,this.mode=null,this.number_bar.alpha=0,this.number_bar_highlight.alpha=0,this.left_arrow.alpha=0,this.right_arrow.alpha=0;for(let t=0;t<this.page_numbers.length;++t)this.window.remove_text(this.page_numbers[t]);this.page_numbers=[],this.arrow_timer.pause(),this.flash_timer.pause()}}}e.PageIndicator=a,a.NUMBER_WIDTH=8,a.NUMBER_HEIGHT=8,a.ARROW_SHIFT=1,a.GROUP_KEY="page_indicator",a.ARROW_LOOP=Phaser.Timer.QUARTER>>1,a.FLASH_LOOP=150},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MainChar=e.item_equip_slot=e.equip_slots=void 0;const s=i(27),n=i(7),a=i(9),_=i(8),o=i(5),r=i(0),h=i(1),c=i(3),l=i(13);var d;!function(t){t.WEAPON="weapon",t.HEAD="head",t.CHEST="chest",t.BODY="body",t.RING="ring",t.BOOTS="boots",t.UNDERWEAR="underwear"}(d=e.equip_slots||(e.equip_slots={})),e.item_equip_slot={[_.item_types.WEAPONS]:d.WEAPON,[_.item_types.ARMOR]:d.BODY,[_.item_types.CHEST_PROTECTOR]:d.CHEST,[_.item_types.HEAD_PROTECTOR]:d.HEAD,[_.item_types.LEG_PROTECTOR]:d.BOOTS,[_.item_types.RING]:d.RING,[_.item_types.UNDERWEAR]:d.UNDERWEAR};class u extends o.Player{constructor(t,e,i,s,n,a,_,h,l,u,p,m,g,w,f,y,b,v,E,x,T,A,S,I,k,N,R,P,O,j,L,M,D,C){super(t,_),this.info=e,this.sprite_base=i,this.walk_speed=s,this.dash_speed=n,this.climb_speed=a,this.starting_level=f,this.level=this.starting_level,this.class_table=y,this.battle_scale=b,this.exp_curve=w,this.current_exp=this.exp_curve[this.level-1],this.venus_level_base=v,this.mercury_level_base=E,this.mars_level_base=x,this.jupiter_level_base=T,this.venus_power_base=A,this.mercury_power_base=S,this.mars_power_base=I,this.jupiter_power_base=k,this.venus_resist_base=N,this.mercury_resist_base=R,this.mars_resist_base=P,this.jupiter_resist_base=O,this.element_afinity=c.maxBy([{element:r.elements.VENUS,level:this.venus_level_base},{element:r.elements.MERCURY,level:this.mercury_level_base},{element:r.elements.MARS,level:this.mars_level_base},{element:r.elements.JUPITER,level:this.jupiter_level_base}],t=>t.level).element,this.venus_djinni=[],this.mercury_djinni=[],this.mars_djinni=[],this.jupiter_djinni=[],this.init_djinni(M),this.update_class(),this.hp_curve=h,this.pp_curve=l,this.atk_curve=u,this.def_curve=p,this.agi_curve=m,this.luk_curve=g,this.hp_extra=0,this.pp_extra=0,this.atk_extra=0,this.def_extra=0,this.agi_extra=0,this.luk_extra=0,this.hp_recovery=0,this.pp_recovery=0,this.items=D,this.equip_slots={[d.WEAPON]:null,[d.HEAD]:null,[d.CHEST]:null,[d.BODY]:null,[d.RING]:null,[d.BOOTS]:null,[d.UNDERWEAR]:null},this.equipped_abilities=[],this.innate_abilities=j,this.init_items(),this.update_attributes(),this.update_elemental_attributes(),this.in_party=L,this.abilities=[],this.update_abilities(),this.turns=1,this.fighter_type=o.fighter_types.ALLY,this.battle_animations_variations=Object.assign({},C)}get djinni(){return this.venus_djinni.concat(this.mercury_djinni,this.mars_djinni,this.jupiter_djinni).sort((t,e)=>this.info.djinni_list[t].index-this.info.djinni_list[e].index)}update_class(){this.class=s.choose_right_class(this.info.classes_list,this.class_table,this.element_afinity,this.venus_level_current,this.mercury_level_current,this.mars_level_current,this.jupiter_level_current)}add_exp(t){let e={before:{level:this.level,abilities:this.abilities.slice(),stats:[{max_hp:this.max_hp},{max_pp:this.max_pp},{atk:this.atk},{def:this.def},{agi:this.agi},{luk:this.luk}]},after:null};return this.current_exp+=t,this.level=c.findIndex(this.exp_curve,t=>t>this.current_exp),this.update_all(),e.after={level:this.level,abilities:this.abilities.slice(),stats:[{max_hp:this.max_hp},{max_pp:this.max_pp},{atk:this.atk},{def:this.def},{agi:this.agi},{luk:this.luk}]},e}init_items(){this.items.forEach((t,e)=>{t.index=e,t.equipped&&this.equip_item(e,!0)})}add_item(t,e,i){let s=!1;this.info.items_list[t].type===_.item_types.GENERAL_ITEM&&this.items.forEach(i=>{i.key_name===t&&(s=!0,i.quantity+=e)}),s||(this.items.push({key_name:t,quantity:e,equipped:!1,index:this.items.length}),i&&this.equip_item(this.items.length-1))}remove_item(t,e){let i=!1;this.items=this.items.filter((s,n)=>t.key_name===s.key_name?(s.equipped&&this.unequip_item(n),s.quantity-e>=1?(s.quantity=s.quantity-e,!0):(i=!0,!1)):(i&&--s.index,!0))}equip_item(t,i=!1){const s=this.items[t];if(s.equipped&&!i)return;const n=this.info.items_list[s.key_name];n.type in e.item_equip_slot&&null!==this.equip_slots[e.item_equip_slot[n.type]]&&this.unequip_item(this.equip_slots[e.item_equip_slot[n.type]].index),n.type in e.item_equip_slot&&(this.equip_slots[e.item_equip_slot[n.type]]=s),s.equipped=!0;for(let t=0;t<n.effects.length;++t)this.add_effect(n.effects[t],n);this.update_attributes(),this.update_elemental_attributes(),n.type===_.item_types.ABILITY_GRANTOR&&(this.equipped_abilities.push(n.granted_ability),this.update_abilities())}unequip_item(t){const i=this.items[t];if(!i.equipped)return;const s=this.info.items_list[i.key_name];s.type in e.item_equip_slot&&null!==this.equip_slots[e.item_equip_slot[s.type]]&&(this.equip_slots[e.item_equip_slot[s.type]]=null),i.equipped=!1,this.effects.forEach(t=>{t.effect_owner_instance===s&&this.remove_effect(t)}),this.update_attributes(),this.update_elemental_attributes(),s.type===_.item_types.ABILITY_GRANTOR&&(this.equipped_abilities=this.equipped_abilities.filter(t=>t!==s.granted_ability),this.update_abilities())}init_djinni(t){for(let e=0;e<t.length;++e){const i=this.info.djinni_list[t[e]];switch(i.element){case r.elements.VENUS:this.venus_djinni.push(i.key_name);break;case r.elements.MERCURY:this.mercury_djinni.push(i.key_name);break;case r.elements.MARS:this.mars_djinni.push(i.key_name);break;case r.elements.JUPITER:this.jupiter_djinni.push(i.key_name)}}this.update_elemental_attributes()}add_djinn(t){const e=this.info.djinni_list[t];switch(e.element){case r.elements.VENUS:this.venus_djinni.push(e.key_name);break;case r.elements.MERCURY:this.mercury_djinni.push(e.key_name);break;case r.elements.MARS:this.mars_djinni.push(e.key_name);break;case r.elements.JUPITER:this.jupiter_djinni.push(e.key_name)}this.update_all()}remove_djinn(t){let e;switch(this.info.djinni_list[t].element){case r.elements.VENUS:e=this.venus_djinni;break;case r.elements.MERCURY:e=this.mercury_djinni;break;case r.elements.MARS:e=this.mars_djinni;break;case r.elements.JUPITER:e=this.jupiter_djinni}const i=e.indexOf(t);-1!==i&&e.splice(i,1),this.update_all()}replace_djinn(t,e){this.remove_djinn(t),this.add_djinn(e)}preview_djinn_change(t,e,i,a){const _=this.class;let o=this.venus_level_current,h=this.mercury_level_current,c=this.mars_level_current,l=this.jupiter_level_current;for(let t=0;t<e.length;++t){const s=this.info.djinni_list[e[t]];let a;switch(i[t]){case n.djinn_status.SET:a=u.ELEM_LV_DELTA;break;case n.djinn_status.RECOVERY:case n.djinn_status.ANY:a=0;break;default:a=-u.ELEM_LV_DELTA}switch(s.element){case r.elements.VENUS:o+=a;break;case r.elements.MERCURY:h+=a;break;case r.elements.MARS:c+=a;break;case r.elements.JUPITER:l+=a}}this.class=s.choose_right_class(this.info.classes_list,this.class_table,this.element_afinity,o,h,c,l);let d={class_name:this.class.name,class_key_name:this.class.key_name,abilities:null};return d.abilities=this.innate_abilities.concat(this.class.ability_level_pairs.filter(t=>t.level<=this.level&&!this.innate_abilities.includes(t.ability)).map(t=>t.ability),this.equipped_abilities),i=i.map(t=>t===n.djinn_status.ANY?n.djinn_status.STANDBY:t),t.forEach(t=>{d[t]=this.preview_stats_by_djinn(t,e,i,a)}),this.class=_,d}preview_stats_by_djinn(t,e,i,s){const n={djinni_key_name:e,djinni_next_status:i,action:s};return this.set_max_stat(t,!0,n)}preview_stats_by_effect(t,e,i){const s={effect_obj:e,item_key_name:i};return this.set_max_stat(o.effect_type_stat[t],!0,s)}preview_stat_without_abilities_effect(t){return this.set_max_stat(t,!0,{ignore_ability_effect:!0})}set_max_stat(t,e=!1,i={}){const s=[o.main_stats.MAX_HP,o.main_stats.MAX_PP].includes(t)?t.split("_")[1]:t,_=t,r=s+"_boost",h=s+"_curve",c=s+"_extra",d=this[_];this[_]=this[h][this.level]*this.class[r]+this[c]|0;let u=this.djinni;if(e)if("Trade"===i.action){const t=u.indexOf(i.djinni_key_name[0]);t>=0?u[t]=i.djinni_key_name[1]:u[u.indexOf(i.djinni_key_name[1])]=i.djinni_key_name[0]}else"Give"===i.action&&u.push(i.djinni_key_name[0]);for(let t=0;t<u.length;++t){let s=u[t],a=this.info.djinni_list[s],o=a.status;e&&i.djinni_key_name&&i.djinni_key_name.includes(s)&&(o=i.djinni_next_status[i.djinni_key_name.indexOf(s)]),o===n.djinn_status.SET&&(this[_]+=a[r])}if(this.effects.forEach(s=>{if(e&&s.effect_owner_instance&&i.item_key_name===s.effect_owner_instance.key_name)return;if(e&&i.ignore_ability_effect&&s.effect_owner_instance instanceof l.Ability)return;let n;switch(t){case o.main_stats.MAX_HP:n=a.effect_types.MAX_HP;break;case o.main_stats.MAX_PP:n=a.effect_types.MAX_PP;break;case o.main_stats.ATTACK:n=a.effect_types.ATTACK;break;case o.main_stats.DEFENSE:n=a.effect_types.DEFENSE;break;case o.main_stats.AGILITY:n=a.effect_types.AGILITY;break;case o.main_stats.LUCK:n=a.effect_types.LUCK}s.type===n&&s.apply_effect()}),e){const t=i.effect_obj?a.Effect.preview_value_applied(i.effect_obj,this[_]):this[_];return this[_]=d,t}if([o.main_stats.MAX_HP,o.main_stats.MAX_PP].includes(t)){const e=t===o.main_stats.MAX_HP?o.main_stats.CURRENT_HP:o.main_stats.CURRENT_PP;void 0===this[e]?this[e]=this[_]:this[e]=Math.round(this[e]*this[_]/d)}}update_attributes(){this.set_max_stat(o.main_stats.MAX_HP),this.set_max_stat(o.main_stats.MAX_PP),this.set_max_stat(o.main_stats.ATTACK),this.set_max_stat(o.main_stats.DEFENSE),this.set_max_stat(o.main_stats.AGILITY),this.set_max_stat(o.main_stats.LUCK)}add_extra_max_hp(t){this.hp_extra+=t}add_extra_max_pp(t){this.pp_extra+=t}add_extra_max_atk(t){this.atk_extra+=t}add_extra_max_def(t){this.def_extra+=t}add_extra_max_agi(t){this.agi_extra+=t}add_extra_max_luk(t){this.luk_extra+=t}preview_elemental_stats_without_abilities_effect(){return this.update_elemental_attributes(!0,!0)}update_elemental_attributes(t=!1,e=!1){const i={};r.ordered_elements.forEach(e=>{t&&(i[e]={power:this[e+"_power_current"],resist:this[e+"_resist_current"],level:this[e+"_level_current"]}),this[e+"_power_current"]=this[e+"_power_base"],this[e+"_resist_current"]=this[e+"_resist_base"],this[e+"_level_current"]=this[e+"_level_base"]});for(let t=0;t<this.djinni.length;++t){let e=this.info.djinni_list[this.djinni[t]];e.status===n.djinn_status.SET&&(this[e.element+"_power_current"]+=u.ELEM_POWER_DELTA,this[e.element+"_resist_current"]+=u.ELEM_RESIST_DELTA,this[e.element+"_level_current"]+=u.ELEM_LV_DELTA)}this.effects.forEach(t=>{if(t.type===a.effect_types.POWER||t.type===a.effect_types.RESIST){if(e&&t.effect_owner_instance instanceof l.Ability)return;t.apply_effect()}});for(let t=0;t<r.ordered_elements.length;++t){const e=r.ordered_elements[t],i=e+"_power_current",s=e+"_resist_current";this[i]=c.clamp(this[i],h.ELEM_ATTR_MIN,h.ELEM_ATTR_MAX),this[s]=c.clamp(this[s],h.ELEM_ATTR_MIN,h.ELEM_ATTR_MAX)}if(t){return Object.fromEntries(r.ordered_elements.map(t=>{const e=[t,{power:this[t+"_power_current"],resist:this[t+"_resist_current"],level:this[t+"_level_current"]}];return this[t+"_power_current"]=i[t].power,this[t+"_resist_current"]=i[t].resist,this[t+"_level_current"]=i[t].level,e}))}return null}update_abilities(){this.abilities=this.innate_abilities.concat(this.class.ability_level_pairs.filter(t=>t.level<=this.level&&!this.innate_abilities.includes(t.ability)).map(t=>t.ability),this.equipped_abilities)}update_all(){this.update_elemental_attributes(),this.update_class(),this.update_attributes(),this.update_abilities()}static get_active_players(t,e){return t.members.slice(0,e).filter(t=>!t.has_permanent_status(o.permanent_status.DOWNED))}static add_item_to_party(t,e,i){for(let s=0;s<t.members.length;++s){const n=t.members[s];if(n.items.length<u.MAX_ITEMS_PER_CHAR)return n.add_item(e.key_name,i,!1),!0}return!1}}e.MainChar=u,u.ELEM_LV_DELTA=1,u.ELEM_POWER_DELTA=5,u.ELEM_RESIST_DELTA=5,u.MAX_ITEMS_PER_CHAR=30},function(t,e,i){"use strict";var s,n;Object.defineProperty(e,"__esModule",{value:!0}),e.Ability=e.diminishing_ratios=e.ability_categories=e.ability_target_types=e.ability_msg_types=e.ability_types=void 0,function(t){t.HEALING="healing",t.EFFECT_ONLY="effect_only",t.ADDED_DAMAGE="added_damage",t.MULTIPLIER="multiplier",t.BASE_DAMAGE="base_damage",t.SUMMON="summon",t.UTILITY="utility",t.DIRECT_DAMAGE="direct_damage"}(s=e.ability_types||(e.ability_types={})),function(t){t.CAST="cast",t.ATTACK="attack",t.USE="use",t.SUMMON="summon",t.UNLEASH="unleash",t.DEFEND="defend",t.ITEM_UNLEASH="item_unleash",t.SET_DJINN="set_djinn",t.NO_MSG="no_msg"}(n=e.ability_msg_types||(e.ability_msg_types={})),function(t){t.NO_TARGET="no_target",t.ALLY="ally",t.ENEMY="enemy",t.USER="user"}(e.ability_target_types||(e.ability_target_types={})),function(t){t.PSYNERGY="psynergy",t.DJINN="djinn",t.SUMMON="summon",t.ITEM="item",t.WEAPON_UNLEASH="weapon_unleash",t.NORMAL="normal"}(e.ability_categories||(e.ability_categories={})),e.diminishing_ratios={STANDARD:{11:.1,9:.2,7:.4,5:.6,3:.8,1:1},SUMMON:{11:.1,9:.2,7:.3,5:.4,3:.7,1:1},DIMINISH:{11:.1,9:.1,7:.1,5:.3,3:.5,1:1},STATUS:{11:.3,9:.3,7:.3,5:.3,3:.6,1:1}};e.Ability=class{constructor(t,e,i,s,a,_,o,r,h,c,l,d,u,p,m,g,w,f,y,b,v,E,x,T){this.key_name=t,this.name=e,this.description=i,this.type=s,this.element=a,this.battle_target=_,this.range=o,this.pp_cost=r,this.ability_power=h,this.effects_outside_battle=c,this.is_battle_ability=l,this.is_field_psynergy=d,this.effects=u,this.ability_category=p,this.battle_animation_key=m,this.priority_move=g||!1,this.has_critical=w||!1,this.crit_mult_factor=void 0!==f?f:1,this.can_switch_to_unleash=y||!1,this.can_be_evaded=b||!1,this.use_diminishing_ratio=v||!1,this.msg_type=void 0===E?n.CAST:E,this.affects_pp=void 0!==x&&x,this.has_animation_variation=void 0!==T&&T}static get_diminishing_ratios(t,i){if(i)return e.diminishing_ratios.DIMINISH;switch(t){case s.SUMMON:return e.diminishing_ratios.SUMMON;default:return e.diminishing_ratios.STANDARD}}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SpriteBase=void 0;e.SpriteBase=class{constructor(t,e){this.key_name=t,this.actions={},this.animations={};for(let t=0;t<e.length;++t)this.actions[e[t]]={}}setActionDirections(t,e,i){this.actions[t].directions=new Array(e.length),this.actions[t].frame_counts=new Array(e.length);const s=Array.isArray(i);for(let n=0;n<e.length;++n){const a=s?i[n]:i;this.actions[t].directions[n]=e[n],this.actions[t].frame_counts[n]=a}}setActionFrameRate(t,e){this.actions[t].frame_rate={};for(let i=0;i<this.actions[t].directions.length;++i){const s=this.actions[t].directions[i];let n;n=Array.isArray(e)?1===e.length?e[0]:e[i]:e,this.actions[t].frame_rate[s]=n}}setActionLoop(t,e){this.actions[t].loop=e}setActionSpritesheet(t,e,i){this.actions[t].spritesheet={spritesheet_image_url:e,spritesheet_json_url:i}}loadSpritesheets(t,e,i){for(let s in this.actions){const n=this.actions[s].spritesheet,a=this.getActionKey(s);let _=t.load.atlasJSONHash(a,n.spritesheet_image_url,n.spritesheet_json_url);e&&(_.onLoadComplete.addOnce(i,this),t.load.start())}}generateFrameNames(t,e,i,s,n,a){t in this.animations||(this.animations[t]={}),this.animations[t][e]=Phaser.Animation.generateFrameNames(`${t}/${e}/`,i,s,n,a)}setAnimation(t,e){const i=this.actions[e].directions,s=void 0===this.actions[e].loop||this.actions[e].loop;for(let n=0;n<i.length;++n){const a=i[n],_=this.actions[e].frame_rate[a],o=this.getAnimationKey(e,a);t.animations.add(o,this.animations[e][a],_,Array.isArray(s)?s[n]:s,!1)}}generateAllFrames(){for(let t in this.actions){const e=this.actions[t].directions,i=this.actions[t].frame_counts;for(let s=0;s<e.length;++s){const n=e[s];this.generateFrameNames(t,n,0,i[s]-1,"",2)}}}getFrameName(t,e,i){return`${t}/${e}/${i.toLocaleString("en-US",{minimumIntegerDigits:2,useGrouping:!1})}`}getActionKey(t){return this.key_name+"_"+t}getAnimationKey(t,e){return t+"_"+e}getSpriteAction(t){return t.key.split("_")[1]}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CharsMenu=e.CharsMenuModes=void 0;const s=i(2),n=i(0),a=i(4);var _;!function(t){t[t.SHOP=0]="SHOP",t[t.MENU=1]="MENU"}(_=e.CharsMenuModes||(e.CharsMenuModes={}));const o=Phaser.Timer.QUARTER>>1;e.CharsMenu=class{constructor(t,e,i){this.game=t,this.data=e,this.on_change=i,this.window=new s.Window(this.game,0,112,100,20),this.char_group=this.game.add.group(),this.char_group.x=0,this.char_group.y=96,this.char_group.alpha=1,this.arrow_group=this.game.add.group(),this.arrow_group.x=96,this.arrow_group.y=100,this.up_arrow=this.arrow_group.create(16,20,"green_arrow"),this.up_arrow.rotation=Math.PI,this.down_arrow=this.arrow_group.create(0,24,"green_arrow"),this.up_arrow.alpha=0,this.down_arrow.alpha=0,this.arrow_tweens=[],this.lines=[],this.char_sprites=[],this.current_line=0,this.selected_index=null,this.is_active=!1,this.is_open=!1,this.mode=null}check_mode(){this.mode===_.SHOP?(this.window.update_size({width:100,height:20}),this.window.update_position({x:0,y:112}),this.char_group.x=0+this.game.camera.x,this.char_group.y=96+this.game.camera.y,this.arrow_group.x=96+this.game.camera.x,this.arrow_group.y=100+this.game.camera.y):this.mode===_.MENU&&(this.window.update_size({width:100,height:36}),this.window.update_position({x:0,y:0}),this.char_group.x=0+this.game.camera.x,this.char_group.y=-4+this.game.camera.y,this.arrow_group.x=92+this.game.camera.x,this.arrow_group.y=-4+this.game.camera.y,this.window.draw_separator(4,27,100,27,!1))}set_arrows(t=!1,e=!1){this.up_arrow.x=16,this.up_arrow.y=20,this.down_arrow.x=0,this.down_arrow.y=24,this.up_arrow.alpha=t?1:0,this.down_arrow.alpha=e?1:0}check_arrows(){let t=!1,e=!1;this.current_line<this.lines.length-1&&(e=!0),this.current_line>0&&(t=!0),this.set_arrows(t,e),this.init_arrow_tweens(),this.game.world.bringToTop(this.arrow_group)}init_arrow_tweens(){let t=this.game.add.tween(this.up_arrow).to({y:12},o,Phaser.Easing.Linear.None).to({y:20},o,Phaser.Easing.Linear.None).loop();this.arrow_tweens.push(t);let e=this.game.add.tween(this.down_arrow).to({y:32},o,Phaser.Easing.Linear.None).to({y:24},o,Phaser.Easing.Linear.None).loop();this.arrow_tweens.push(e),t.start(),e.start()}clear_arrow_tweens(){for(let t=0;t<this.arrow_tweens.length;t++)this.game.tweens.remove(this.arrow_tweens.pop())}set_chars(){this.char_sprites=[];for(let t=0;t<this.lines[this.current_line].length;++t){let e=this.lines[this.current_line][t],i=null,s=this.char_group.children.filter(t=>!1===t.alive&&t.key===e.sprite_base.getActionKey(n.base_actions.IDLE));i=s.length>0?s[0].reset(24*t,0):this.char_group.create(24*t,0,e.sprite_base.getActionKey(n.base_actions.IDLE)),e.sprite_base.setAnimation(i,n.base_actions.IDLE),i.animations.play(e.sprite_base.getAnimationKey(n.base_actions.IDLE,n.reverse_directions[n.directions.down])),this.char_sprites.push(i)}}make_lines(){let t=this.data.info.party_data.members.length,e=t%4==0?t/4|0:1+(t/4|0);for(let t=0;t<e;t++){let e=[];for(let i=4*t;i<4*(t+1)&&this.data.info.party_data.members[i];i++)e.push(this.data.info.party_data.members[i]);this.lines[t]=e}}change_line(t,e,i){this.data.info.party_data.members.length<4*t||(this.clear_arrow_tweens(),this.unset_character(this.selected_index),this.current_line=t,void 0!==e?this.selected_index=e:null!==this.selected_index&&this.selected_index>=this.lines[this.current_line].length&&(this.selected_index=this.lines[this.current_line].length-1),n.kill_all_sprites(this.char_group),this.set_chars(),this.check_arrows(),this.select_char(this.selected_index,i))}next_line(t,e){if(1===this.lines.length||this.current_line+1===this.lines.length)return;let i=this.current_line+1;this.change_line(i,t,e)}previous_line(t,e){if(1===this.lines.length||this.current_line-1<0)return;let i=this.current_line-1;this.change_line(i,t,e)}set_character(t){this.mode===_.SHOP||this.mode===_.MENU&&(this.char_sprites[t].y=4)}unset_character(t){null!=t&&(this.mode===_.SHOP||this.mode===_.MENU&&(this.char_sprites[t].y=0))}select_char(t,e,i){void 0===t&&(t=this.selected_index);const s=()=>{if(this.unset_character(this.selected_index),this.selected_index=t,this.set_character(this.selected_index),this.on_change&&!i){let t=this.data.info.party_data.members[4*this.current_line+this.selected_index];this.on_change(t.key_name)}};e?s():this.move_cursor(t,s)}next_char(t){1===this.lines[this.current_line].length&&1===this.lines.length||(this.selected_index+1===this.lines[this.current_line].length?this.current_line+1===this.lines.length?1===this.lines.length?this.select_char(0,t):this.change_line(0,0,t):this.next_line(0,t):this.select_char(this.selected_index+1,t))}previous_char(t){1===this.lines[this.current_line].length&&1===this.lines.length||(this.selected_index-1<0?this.current_line-1<0?1===this.lines.length?this.select_char(this.lines[this.current_line].length-1,t):this.change_line(this.lines.length-1,this.lines[this.lines.length-1].length-1,t):this.previous_line(this.lines[this.current_line-1].length-1,t):this.select_char(this.selected_index-1,t))}swap_next(){if(this.selected_index===this.lines[this.current_line].length-1&&this.current_line===this.lines.length-1)return;const t=this.selected_index+4*this.current_line,e=this.data.info.party_data.members[t];this.data.info.party_data.members[t]=this.data.info.party_data.members[t+1],this.data.info.party_data.members[t+1]=e;const i=(this.selected_index+1)%4,s=this.current_line+(0===i?1:0);this.make_lines(),this.change_line(s,i)}swap_previous(){if(0===this.selected_index&&0===this.current_line)return;const t=this.selected_index+4*this.current_line,e=this.data.info.party_data.members[t];this.data.info.party_data.members[t]=this.data.info.party_data.members[t-1],this.data.info.party_data.members[t-1]=e;const i=(this.selected_index+4-1)%4,s=this.current_line-(i>this.selected_index?1:0);this.make_lines(),this.change_line(s,i)}grant_control(t,e,i){const s=[{key:this.data.gamepad.LEFT,on_down:this.previous_char.bind(this)},{key:this.data.gamepad.RIGHT,on_down:this.next_char.bind(this)},{key:this.data.gamepad.UP,on_down:this.previous_line.bind(this)},{key:this.data.gamepad.DOWN,on_down:this.next_line.bind(this)},{key:this.data.gamepad.A,on_down:e,params:{reset_control:!0}},{key:this.data.gamepad.B,on_down:t,params:{reset_control:!0}}];i&&s.push({key:this.data.gamepad.L,on_down:this.swap_previous.bind(this)},{key:this.data.gamepad.R,on_down:this.swap_next.bind(this)}),this.data.control_manager.set_control(s,{loop_configs:{horizontal:!0}})}move_cursor(t,e){void 0===t&&(t=this.selected_index);let i=0,s=0,n={type:null,variant:null};this.mode===_.SHOP?(i=0+24*t,s=118,n.type=a.CursorManager.CursorTweens.WIGGLE):this.mode===_.MENU&&(i=0+24*t,s=22,n.type=a.CursorManager.CursorTweens.POINT,n.variant=a.PointVariants.NORMAL),this.data.cursor_manager.move_to({x:i,y:s},{animate:!1,tween_config:n},e)}activate(){this.move_cursor(),this.is_active=!0}deactivate(){this.data.cursor_manager.clear_tweens(),this.is_active=!1}open(t=0,e=_.SHOP,i,s){this.current_line=0,this.mode=e,this.make_lines(),this.check_mode(),this.check_arrows(),this.set_chars(),this.select_char(t,void 0,s),this.char_group.alpha=1,this.is_open=!0,this.activate(),this.window.show(i,!1)}close(t,e=!1){this.is_open=!1,this.deactivate(),n.kill_all_sprites(this.char_group,e),this.lines=[],this.char_sprites=[],this.current_line=0,this.selected_index=null,this.is_active=!1,this.is_open=!1,this.char_group.alpha=0,this.mode=null,this.set_arrows(!1,!1),this.window.clear_separators(),this.window.close(t,!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.JumpEvent=void 0;const s=i(6),n=i(1),a=i(0);class _ extends s.TileEvent{constructor(t,e,i,n,a,_,o,r,h){super(t,e,s.event_types.JUMP,i,n,a,_,o,r,null),this.is_set=h}fire(){if(!this.data.hero.stop_by_colliding||!this.check_position()||!this.data.hero_movement_allowed(!1))return;let t,e,i=30,n={x:this.x,y:this.y},o={x:this.x,y:this.y};if(this.data.hero.current_direction===a.directions.left?(i=-i,t="x",n.x-=2,o.x-=1,e=a.directions.left):this.data.hero.current_direction===a.directions.right?(t="x",n.x+=2,o.x+=1,e=a.directions.right):this.data.hero.current_direction===a.directions.up?(i=-i,t="y",n.y-=2,o.y-=1,e=a.directions.up):this.data.hero.current_direction===a.directions.down&&(t="y",n.y+=2,o.y+=1,e=a.directions.down),void 0===e)return;let r=s.TileEvent.get_location_key(o.x,o.y);if(r in this.data.map.events)for(let t=0;t<this.data.map.events[r].length;++t){const e=this.data.map.events[r][t];let i=!1;for(let t=0;t<this.data.map.interactable_objects.length;++t){const s=this.data.map.interactable_objects[t];if(this.data.map.collision_layer===s.base_collision_layer&&(e.x===s.current_x&&e.y===s.current_y)){i=!0;break}}if(!i&&(e.type===s.event_types.JUMP&&e.is_set&&e.activation_collision_layers.includes(this.data.map.collision_layer)))return}let h=s.TileEvent.get_location_key(n.x,n.y);for(let t=0;t<this.data.map.interactable_objects.length;++t){const e=this.data.map.interactable_objects[t];if(e.current_x===n.x&&e.current_y===n.y&&this.data.map.collision_layer===e.base_collision_layer)return}if(h in this.data.map.events){let t=!1;for(let i=0;i<this.data.map.events[h].length;++i){const n=this.data.map.events[h][i];if(n.type===s.event_types.JUMP&&n.is_active(a.get_opposite_direction(e))&&n.is_set&&n.activation_collision_layers.includes(this.data.map.collision_layer)){if(t=!0,n.dynamic){_.set_jump_collision(this.game,this.data);break}this.dynamic&&_.unset_set_jump_collision(this.data)}}if(!t)return}else if(this.dynamic)return;this.data.hero.jumping=!0,this.data.tile_event_manager.on_event=!0;let c={};c[t]=this.data.hero.sprite[t]+i;const l=this.data.map.sprite.tileWidth*(n.x+.5),d=this.data.map.sprite.tileHeight*(n.y+.5);"x"===t?c.y=[d-8,d-16,d-8,d]:c.x=l,this.game.physics.p2.pause(),this.data.hero.play(a.base_actions.JUMP,a.reverse_directions[e]),this.data.hero.sprite.animations.currentAnim.onComplete.addOnce(()=>{this.data.hero.shadow.visible=!1,this.game.add.tween(this.data.hero.sprite.body).to(c,150,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.data.hero.shadow.x=l,this.data.hero.shadow.y=d,this.data.hero.shadow.visible=!0,this.data.hero.sprite.animations.currentAnim.reverseOnce(),this.data.hero.play(a.base_actions.JUMP,a.reverse_directions[e]),this.data.hero.sprite.animations.currentAnim.onComplete.addOnce(()=>{this.game.physics.p2.resume(),this.data.hero.jumping=!1,this.data.tile_event_manager.on_event=!1})},this)})}jump_near_collision(){const t=s.TileEvent.get_location_key(this.data.hero.tile_x_pos,this.data.hero.tile_y_pos);let e={x:this.data.hero.tile_x_pos,y:this.data.hero.tile_y_pos},i=a.get_surroundings(e.x,e.y,!0),_=!1,o=a.split_direction(this.data.hero.current_direction);for(let t=0;t<o.length;++t)_=_||this.activation_directions.includes(o[t]);let r=()=>{this.data.hero.sprite.body.collides(this.data.collision.map_collision_group),this.data.map.collision_sprite.body.collides(this.data.collision.hero_collision_group);for(let t=0;t<this.data.collision.dynamic_jump_events_bodies.length;++t)this.data.collision.dynamic_jump_events_bodies[t].destroy();this.data.collision.dynamic_jump_events_bodies=[]},h=t,c=[],l=!1;for(let t=0;t<i.length;++t){const e=s.TileEvent.get_location_key(i[t].x,i[t].y);if(e in this.data.map.events)for(let n=0;n<this.data.map.events[e].length;++n){const o=this.data.map.events[e][n];if(o.type===s.event_types.JUMP&&_&&o.is_set&&o.activation_collision_layers.includes(this.data.map.collision_layer)){!o.dynamic&&!this.dynamic||i[t].diag||(l=!0);const s=a.get_surroundings(i[t].x,i[t].y,!1);c.push(s),h+="-"+e}}}if(!this.data.tile_event_manager.walking_on_pillars_tiles.has(h)&&l){this.data.tile_event_manager.walking_on_pillars_tiles.clear(),r(),this.data.tile_event_manager.walking_on_pillars_tiles.add(h);let t=new Set(i.concat(...c).map(t=>t.x+"_"+t.y));h.split("-").forEach(e=>{t.delete(e)}),this.data.hero.sprite.body.removeCollisionGroup(this.data.collision.map_collision_group,!0),this.data.map.collision_sprite.body.removeCollisionGroup(this.data.collision.hero_collision_group,!0),t.forEach(t=>{const e=t.split("_"),i=(parseInt(e[0])+.5)*this.data.map.sprite.tileWidth,s=(parseInt(e[1])+.5)*this.data.map.sprite.tileHeight;let a=this.game.physics.p2.createBody(i,s,0,!0);a.clearShapes(),a.setRectangle(this.data.map.sprite.tileWidth,this.data.map.sprite.tileHeight,0,0),a.setCollisionGroup(this.data.collision.dynamic_events_collision_group),a.damping=n.MAP_DAMPING,a.angularDamping=n.MAP_DAMPING,a.setZeroRotation(),a.fixedRotation=!0,a.dynamic=!1,a.static=!0,a.debug=this.data.hero.sprite.body.debug,a.collides(this.data.collision.hero_collision_group),this.data.collision.dynamic_jump_events_bodies.push(a)})}this.dynamic||_||!this.data.tile_event_manager.walking_on_pillars_tiles.size||(this.data.tile_event_manager.walking_on_pillars_tiles.clear(),r())}static set_jump_collision(t,e){for(let t=0;t<e.collision.dynamic_jump_events_bodies.length;++t)e.collision.dynamic_jump_events_bodies[t].destroy();e.collision.dynamic_jump_events_bodies=[],e.tile_event_manager.walking_on_pillars_tiles.clear(),e.hero.sprite.body.removeCollisionGroup(e.collision.map_collision_group,!0),e.map.collision_sprite.body.removeCollisionGroup(e.collision.hero_collision_group,!0);for(let i in e.map.events)for(let a=0;a<e.map.events[i].length;++a){const _=e.map.events[i][a];if(_.type===s.event_types.JUMP&&_.dynamic&&_.is_set&&_.activation_collision_layers.includes(e.map.collision_layer)){let i=[{x:_.x-1,y:_.y},{x:_.x+1,y:_.y},{x:_.x,y:_.y-1},{x:_.x,y:_.y+1}];for(let a=0;a<i.length;++a){const _=s.TileEvent.get_location_key(i[a].x,i[a].y);if(_ in e.map.events){let t=!1;for(let i=0;i<e.map.events[_].length;++i){const n=e.map.events[_][i];if(n.dynamic&&n.type===s.event_types.JUMP&&n.is_set&&n.activation_collision_layers.includes(e.map.collision_layer)){t=!0;break}}if(t)continue}let o=(i[a].x+.5)*e.map.sprite.tileWidth,r=(i[a].y+.5)*e.map.sprite.tileHeight,h=t.physics.p2.createBody(o,r,0,!0);h.clearShapes(),h.setRectangle(e.map.sprite.tileWidth,e.map.sprite.tileHeight,0,0),h.setCollisionGroup(e.collision.dynamic_events_collision_group),h.damping=n.MAP_DAMPING,h.angularDamping=n.MAP_DAMPING,h.setZeroRotation(),h.fixedRotation=!0,h.dynamic=!1,h.static=!0,h.debug=e.hero.sprite.body.debug,h.collides(e.collision.hero_collision_group),e.collision.dynamic_jump_events_bodies.push(h)}}}}static unset_set_jump_collision(t){t.hero.sprite.body.collides(t.collision.map_collision_group),t.map.collision_sprite.body.collides(t.collision.hero_collision_group);for(let e=0;e<t.collision.dynamic_jump_events_bodies.length;++e)t.collision.dynamic_jump_events_bodies[e].destroy();t.collision.dynamic_jump_events_bodies=[]}static active_jump_surroundings(t,e,i){for(let n=0;n<e.length;++n){const _=e[n],o=s.TileEvent.get_location_key(_.x,_.y);if(o in t.map.events)for(let e=0;e<t.map.events[o].length;++e){const n=t.map.events[o][e];n.type===s.event_types.JUMP&&n.activation_collision_layers.includes(i)&&!1===n.dynamic&&n.is_set&&n.activate_at(a.get_opposite_direction(_.direction))}}}}e.JumpEvent=_},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function _(t){try{r(s.next(t))}catch(t){a(t)}}function o(t){try{r(s.throw(t))}catch(t){a(t)}}function r(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(_,o)}r((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.Battle=void 0;const n=i(5),a=i(25),_=i(46),o=i(47),r=i(60),h=i(13),c=i(61),l=i(62),d=i(63),u=i(9),p=i(0),m=i(7),g=i(12),w=i(64),f=i(3),y=i(8);var b;!function(t){t[t.NONE=0]="NONE",t[t.START=1]="START",t[t.MENU=2]="MENU",t[t.ROUND_START=3]="ROUND_START",t[t.COMBAT=4]="COMBAT",t[t.ROUND_END=5]="ROUND_END",t[t.END=6]="END"}(b||(b={}));class v{constructor(t,e,i,s){this.game=t,this.data=e,this.allies_info=this.data.info.party_data.members.slice(0,v.MAX_CHARS_IN_BATTLE).map(t=>(t.init_effect_turns_count(),{sprite_key:t.sprite_base.getActionKey(p.base_actions.BATTLE),scale:t.battle_scale,instance:t,entered_in_battle:!0}));const n=this.data.dbs.enemies_parties_db[s];this.enemies_party_name=n.name,this.enemies_info=[],this.this_enemies_list={};let h={},l=0;n.members.forEach(t=>{const e=f.random(t.min,t.max);for(let i=0;i<e;++i){this.enemies_info.push({sprite_key:t.key+"_battle"}),this.enemies_info[l].sprite_key in h?h[this.enemies_info[l].sprite_key]+=1:h[this.enemies_info[l].sprite_key]=1;let e="",i="";h[this.enemies_info[l].sprite_key]>1&&(e="_"+h[this.enemies_info[l].sprite_key].toString(),i=" "+h[this.enemies_info[l].sprite_key].toString()),this.enemies_info[l].instance=r.get_enemy_instance(this.data.info.enemies_list[t.key].data,i),this.enemies_info[l].scale=this.enemies_info[l].instance.battle_scale,this.enemies_info[l].battle_key=this.enemies_info[l].sprite_key+e,this.this_enemies_list[this.enemies_info[l].battle_key]=this.enemies_info[l].instance,++l}}),this.battle_stage=new a.BattleStage(this.game,this.data,i,this.allies_info,this.enemies_info),this.battle_log=new _.BattleLog(this.game),this.battle_menu=new o.MainBattleMenu(this.game,this.data,this.on_abilities_choose.bind(this),this.choose_targets.bind(this)),this.target_window=new c.ChoosingTargetWindow(this.game,this.data),this.animation_manager=new w.BattleAnimationManager(this.game,this.data),this.battle_phase=b.NONE,this.on_going_effects=[],this.allies_defeated=!1,this.enemies_defeated=!1,this.battle_finishing=!1}start_battle(){this.check_phases()}on_abilities_choose(t){this.allies_abilities=t,this.battle_menu.close_menu(),this.battle_stage.reset_positions(),this.battle_stage.choosing_actions=!1,this.battle_phase=b.ROUND_START,this.check_phases()}choose_targets(t,e,i,s,n){const a=this.data.info.abilities_list[t];let _;"psynergy"===e&&(_=[a.pp_cost]),"defend"!==e&&this.target_window.open(e,a.name,a.element,t,_,n),this.battle_stage.choose_targets(a.range,a.battle_target,a.type,s,t=>{this.target_window.window_open&&this.target_window.close(),i(t)})}check_parties(){this.allies_defeated=this.allies_info.every(t=>t.instance.has_permanent_status(n.permanent_status.DOWNED)),this.enemies_defeated=this.enemies_info.every(t=>t.instance.has_permanent_status(n.permanent_status.DOWNED)),(this.allies_defeated||this.enemies_defeated)&&(this.battle_phase=b.END)}check_phases(){switch(this.check_parties(),this.battle_phase){case b.NONE:this.battle_phase_none();break;case b.START:case b.MENU:this.battle_phase_menu();break;case b.ROUND_START:this.battle_phase_round_start();break;case b.COMBAT:this.battle_phase_combat();break;case b.ROUND_END:this.battle_phase_round_end();break;case b.END:this.battle_phase_end()}}battle_phase_none(){this.game.physics.p2.pause(),this.battle_phase=b.START,this.data.in_battle=!0,this.data.battle_instance=this,this.advance_log_control_key=this.data.control_manager.simple_input(()=>{this.advance_log_resolve&&(this.advance_log_resolve(),this.advance_log_resolve=null)},{persist:!0}),this.battle_log.add(this.enemies_party_name+" appeared!"),this.battle_stage.initialize_stage(()=>{this.allies_map_sprite=f.mapValues(f.keyBy(this.allies_info,"instance.key_name"),t=>t.sprite),this.enemies_map_sprite=f.mapValues(f.keyBy(this.enemies_info,"instance.key_name"),t=>t.sprite),this.data.control_manager.simple_input(()=>{this.battle_log.clear(),this.battle_phase=b.MENU,this.check_phases()})})}battle_phase_menu(){this.battle_stage.set_choosing_action_position(),this.battle_menu.open_menu()}battle_phase_round_start(){return s(this,void 0,void 0,(function*(){const t=this.enemies_info.map(t=>t.instance);this.enemies_abilities=Object.fromEntries(t.map((e,i)=>{let s=new Array(e.turns);for(let i=0;i<e.turns;++i)s[i]=l.EnemyAI.roll_action(e,this.data.info.party_data.members,t);return[this.enemies_info[i].battle_key,s]}));for(let t in this.allies_abilities){const e=this.data.info.main_char_list[t];for(let i=0;i<this.allies_abilities[t].length;++i){const s=this.data.info.abilities_list[this.allies_abilities[t][i].key_name],n=void 0!==s&&s.priority_move;this.allies_abilities[t][i].speed=d.BattleFormulas.player_turn_speed(e.agi,n,i>0),this.allies_abilities[t][i].caster=e}}for(let t in this.enemies_abilities){const e=this.this_enemies_list[t];for(let i=0;i<this.enemies_abilities[t].length;++i){const s=this.data.info.abilities_list[this.enemies_abilities[t][i].key_name],n=void 0!==s&&s.priority_move;this.enemies_abilities[t][i].speed=d.BattleFormulas.enemy_turn_speed(e.agi,i+1,e.turns,n),this.enemies_abilities[t][i].caster=e}}this.turns_actions=f.sortBy(Object.values(this.allies_abilities).flat().concat(Object.values(this.enemies_abilities).flat()),t=>t.speed);for(let t=0;t<this.turns_actions.length;++t){const e=this.turns_actions[t],i=this.data.info.abilities_list[e.key_name];let s=this.data.info.abilities_list[e.key_name].battle_animation_key;i.has_animation_variation&&e.key_name in e.caster.battle_animations_variations&&(s=e.caster.battle_animations_variations[e.key_name]),e.battle_animation_key=s,yield this.animation_manager.load_animation(s)}this.battle_phase=b.COMBAT,this.check_phases()}))}wait_for_key(){return new Promise(t=>{this.advance_log_resolve=t})}check_downed(t){return s(this,void 0,void 0,(function*(){0===t.current_hp&&(t.add_permanent_status(n.permanent_status.DOWNED),yield this.battle_log.add(n.on_catch_status_msg[n.permanent_status.DOWNED](t)),yield this.wait_for_key())}))}battle_phase_combat(){return s(this,void 0,void 0,(function*(){if(!this.turns_actions.length)return this.battle_phase=b.ROUND_END,void this.check_phases();const t=this.turns_actions.pop();if(t.caster.has_permanent_status(n.permanent_status.DOWNED))return void this.check_phases();if(t.caster.is_paralyzed())return t.caster.temporary_status.has(n.temporary_status.SLEEP)?yield this.battle_log.add(t.caster.name+" is asleep!"):t.caster.temporary_status.has(n.temporary_status.STUN)&&(yield this.battle_log.add(t.caster.name+" is paralyzed and cannot move!")),yield this.wait_for_key(),void this.check_phases();t.caster.fighter_type!==n.fighter_types.ENEMY||this.data.info.abilities_list[t.key_name].priority_move||Object.assign(t,l.EnemyAI.roll_action(t.caster,this.data.info.party_data.members,this.enemies_info.map(t=>t.instance)));let e=this.data.info.abilities_list[t.key_name],i=t.item_slot?this.data.info.items_list[t.item_slot.key_name].name:"";if(t.caster.fighter_type===n.fighter_types.ALLY&&void 0!==e&&e.can_switch_to_unleash){const s=t.caster;if(s.equip_slots.weapon&&this.data.info.items_list[s.equip_slots.weapon.key_name].unleash_ability){const n=this.data.info.items_list[s.equip_slots.weapon.key_name];Math.random()<n.unleash_rate&&(i=n.name,t.key_name=n.unleash_ability,e=this.data.info.abilities_list[n.unleash_ability])}}if(void 0===e)return yield this.battle_log.add(t.key_name+" ability key not registered."),yield this.wait_for_key(),void this.check_phases();if(t.caster.has_temporary_status(n.temporary_status.SEAL)&&e.ability_category===h.ability_categories.PSYNERGY)return yield this.battle_log.add("But the Psynergy was blocked!"),yield this.wait_for_key(),void this.check_phases();if(e.pp_cost>t.caster.current_pp)return yield this.battle_log.add("... But doesn't have enough PP!"),yield this.wait_for_key(),void this.check_phases();t.caster.current_pp-=e.pp_cost;const s=t.djinn_key_name?this.data.info.djinni_list[t.djinn_key_name].name:void 0;if(yield this.battle_log.add_ability(t.caster,e,i,s,void 0!==t.item_slot),e.ability_category===h.ability_categories.DJINN)e.effects.some(t=>t.type===u.effect_types.SET_DJINN)?this.data.info.djinni_list[t.djinn_key_name].set_status(m.djinn_status.SET,t.caster):this.data.info.djinni_list[t.key_name].set_status(m.djinn_status.STANDBY,t.caster);else if(e.ability_category===h.ability_categories.SUMMON){const i=this.data.info.summons_list[e.key_name].requirements,s=m.Djinn.get_standby_djinni(this.data.info.djinni_list,g.MainChar.get_active_players(this.data.info.party_data,v.MAX_CHARS_IN_BATTLE));if(!f.every(i,(t,e)=>s[e]>=t))return yield this.battle_log.add(`${t.caster.name} summons ${e.name} but`),yield this.battle_log.add("doesn't have enough standby Djinn!"),yield this.wait_for_key(),void this.check_phases();m.Djinn.set_to_recovery(this.data.info.djinni_list,g.MainChar.get_active_players(this.data.info.party_data,v.MAX_CHARS_IN_BATTLE),i)}if(t.item_slot&&t.item_slot.broken)return yield this.battle_log.add(`But ${i} is broken...`),yield this.wait_for_key(),void this.check_phases();if(this.battle_menu.chars_status_window.update_chars_info(),e.type===h.ability_types.UTILITY&&(yield this.wait_for_key()),this.animation_manager.animation_available(t.battle_animation_key)){const e=t.caster.fighter_type===n.fighter_types.ALLY?this.allies_map_sprite[t.caster.key_name]:this.enemies_map_sprite[t.caster.key_name],i=t.targets.flatMap(t=>t.magnitude?[t.target.sprite]:[]),s=t.caster.fighter_type===n.fighter_types.ALLY?this.battle_stage.group_allies:this.battle_stage.group_enemies,a=t.caster.fighter_type===n.fighter_types.ALLY?this.battle_stage.group_enemies:this.battle_stage.group_allies;yield this.animation_manager.play(t.battle_animation_key,e,i,s,a,this.battle_stage),this.battle_stage.prevent_camera_angle_overflow()}else yield this.battle_log.add(`Animation for ${e.name} not available...`),yield this.wait_for_key();[h.ability_types.UTILITY,h.ability_types.EFFECT_ONLY].includes(e.type)||(yield this.apply_damage(t,e));for(let i=0;i<e.effects.length;++i){const s=e.effects[i];if(!u.effect_usages.ON_USE)continue;if(yield this.apply_effects(t,e,s))return this.battle_phase=b.ROUND_END,void this.check_phases()}if(yield this.battle_stage.set_stage_default_position(),e.ability_category===h.ability_categories.SUMMON){const i=this.data.info.summons_list[e.key_name].requirements;for(let s=0;s<p.ordered_elements.length;++s){const n=p.ordered_elements[s],a=d.BattleFormulas.summon_power(i[n]);a>0&&(t.caster.add_effect({type:"power",quantity:a,operator:"plus",attribute:n},e,!0),yield this.battle_log.add(`${t.caster.name}'s ${p.element_names[n]} Power rises by ${a.toString()}!`),yield this.wait_for_key())}}if(t.item_slot){const e=this.data.info.items_list[t.item_slot.key_name];e.use_type===y.use_types.SINGLE_USE?--t.item_slot.quantity:e.use_type===y.use_types.BREAKS_WHEN_USE&&Math.random()<y.Item.BREAKS_CHANCE&&(t.item_slot.broken=!0,yield this.battle_log.add(e.name+" broke..."),yield this.wait_for_key())}const a=t.caster.is_poisoned();if(a){let e=d.BattleFormulas.battle_poison_damage(t.caster,a);e>t.caster.current_hp&&(e=t.caster.current_hp),t.caster.current_hp=f.clamp(t.caster.current_hp-e,0,t.caster.max_hp);const i=a===n.permanent_status.POISON?"poison":"venom";yield this.battle_log.add(`The ${i} does ${e.toString()} damage to ${t.caster.name}!`),this.battle_menu.chars_status_window.update_chars_info(),yield this.wait_for_key(),yield this.check_downed(t.caster)}if(t.caster.has_temporary_status(n.temporary_status.DEATH_CURSE)){const e=f.find(t.caster.effects,{status_key_name:n.temporary_status.DEATH_CURSE});1===t.caster.get_effect_turns_count(e)&&(t.caster.current_hp=0,t.caster.add_permanent_status(n.permanent_status.DOWNED),yield this.battle_log.add("The Grim Reaper calls out to "+t.caster.name),yield this.wait_for_key())}this.check_phases()}))}apply_damage(t,e){return s(this,void 0,void 0,(function*(){let i;e.has_critical&&(i=t.caster.effects.filter(t=>t.type===u.effect_types.CRITICALS).reduce((t,e)=>u.Effect.apply_operator(t,e.quantity,e.operator),0));for(let s=0;s<t.targets.length;++s){const a=t.targets[s];if(null===a.magnitude)continue;const _=a.target.instance;if(_.has_permanent_status(n.permanent_status.DOWNED))continue;if(e.can_be_evaded&&(Math.random()<d.EVASION_CHANCE||t.caster.temporary_status.has(n.temporary_status.DELUSION)&&Math.random()<d.DELUSION_MISS_CHANCE))return yield this.battle_log.add(_.name+" nimbly dodges the blow!"),this.wait_for_key();let o=0;if(e.has_critical&&(Math.random()<d.CRITICAL_CHANCE||Math.random()<i/2)){const i=void 0===e.crit_mult_factor?1.25:e.crit_mult_factor,s=6+_.level/5;o=d.BattleFormulas.physical_attack(t.caster,_,i,s,e.element)}else switch(e.type){case h.ability_types.ADDED_DAMAGE:o=d.BattleFormulas.physical_attack(t.caster,_,1,e.ability_power,e.element);break;case h.ability_types.MULTIPLIER:o=d.BattleFormulas.physical_attack(t.caster,_,e.ability_power/10,0,e.element);break;case h.ability_types.BASE_DAMAGE:o=d.BattleFormulas.psynergy_damage(t.caster,_,e.ability_power,e.element);break;case h.ability_types.HEALING:o=-d.BattleFormulas.heal_ability(t.caster,e.ability_power,e.element);break;case h.ability_types.SUMMON:const i=f.sum(f.values(this.data.info.summons_list[e.key_name].requirements));o=d.BattleFormulas.summon_damage(_,e.ability_power,i);break;case h.ability_types.DIRECT_DAMAGE:o=e.ability_power}const r=h.Ability.get_diminishing_ratios(e.type,e.use_diminishing_ratio);o=o*r[a.magnitude]|0,o+=p.variation(),o>=0&&_.effects.forEach(t=>{t.type===u.effect_types.DAMAGE_MODIFIER&&(o=t.apply_effect(o).after)}),yield this.battle_log.add_damage(o,_,e.affects_pp);const c=e.affects_pp?n.main_stats.CURRENT_PP:n.main_stats.CURRENT_HP,l=e.affects_pp?n.main_stats.MAX_PP:n.main_stats.MAX_HP;_.current_hp=f.clamp(_[c]-o,0,_[l]),this.battle_menu.chars_status_window.update_chars_info(),yield this.wait_for_key(),yield this.check_downed(_);for(let i=0;i<e.effects.length;++i){const s=e.effects[i];if(s.type===u.effect_types.DAMAGE_INPUT){const i=s.on_caster?t.caster:_,n=i.add_effect(s,e).effect,a=n.apply_effect(o);if([u.effect_types.CURRENT_HP,u.effect_types.CURRENT_PP].includes(n.sub_effect.type)){const t=a.before-a.after;0!==t&&(n.effect_msg?yield this.battle_log.add(u.effect_msg[n.effect_msg](_)):yield this.battle_log.add_damage(t,i,n.sub_effect.type===u.effect_types.CURRENT_PP),this.battle_menu.chars_status_window.update_chars_info(),yield this.wait_for_key()),yield this.check_downed(i)}i.remove_effect(n)}}}}))}apply_effects(t,e,i){return s(this,void 0,void 0,(function*(){let s;for(let a=0;a<t.targets.length;++a){const _=t.targets[a];if(null===_.magnitude)continue;const o=_.target.instance;if(!o.has_permanent_status(n.permanent_status.DOWNED))switch(i.type){case u.effect_types.PERMANENT_STATUS:if(i.add_status){if(o.has_permanent_status(i.status_key_name))break;if(i.status_key_name===n.permanent_status.POISON&&o.has_permanent_status(n.permanent_status.VENOM))break}case u.effect_types.TEMPORARY_STATUS:if(i.add_status){let s=f.find(o.class.vulnerabilities,{status_key_name:i.status_key_name});s=void 0===s?0:s.chance;const a=h.diminishing_ratios.STATUS[_.magnitude];if(d.BattleFormulas.ailment_success(t.caster,o,i.chance,a,e.element,s)){const t=o.add_effect(i,e,!0).effect;if(t.type===u.effect_types.TEMPORARY_STATUS)o.has_temporary_status(t.status_key_name)||this.on_going_effects.push(t),t.status_key_name===n.temporary_status.DEATH_CURSE&&o.has_temporary_status(n.temporary_status.DEATH_CURSE)?o.set_effect_turns_count(t):o.set_effect_turns_count(t,t.turn_count,!1);else if(t.status_key_name===n.permanent_status.VENOM&&o.has_permanent_status(n.permanent_status.POISON)){const t=f.find(o.effects,{status_key_name:n.permanent_status.POISON});o.remove_effect(t,!0)}yield this.battle_log.add(n.on_catch_status_msg[i.status_key_name](o))}else yield this.battle_log.add(`But it has no effect on ${o.name}!`);yield this.wait_for_key()}else if(Math.random()<i.chance){let t=!1;for(;;){const t=f.find(o.effects,{status_key_name:i.status_key_name});if(!t)break;o.remove_effect(t,!0),t.status_key_name===n.permanent_status.DOWNED&&o.init_effect_turns_count(),t.type===u.effect_types.TEMPORARY_STATUS&&(this.on_going_effects=this.on_going_effects.filter(e=>e!==t))}t&&(this.battle_log.add_recover_effect(i),yield this.wait_for_key())}break;case u.effect_types.CURRENT_HP:if(s=o.add_effect(i,e,!0),s.effect.show_msg){const t=s.changes.before-s.changes.after;yield this.battle_log.add_damage(t,o),this.battle_menu.chars_status_window.update_chars_info(),yield this.wait_for_key()}yield this.check_downed(o),void 0!==s.effect.turns_quantity?this.on_going_effects.push(s.effect):o.remove_effect(s.effect);break;case u.effect_types.MAX_HP:case u.effect_types.MAX_PP:case u.effect_types.ATTACK:case u.effect_types.DEFENSE:case u.effect_types.AGILITY:case u.effect_types.LUCK:case u.effect_types.POWER:case u.effect_types.RESIST:if(s=o.add_effect(i,e,!0),this.on_going_effects.push(s.effect),o.set_effect_turns_count(s.effect,s.effect.turn_count,!1),s.effect.show_msg){const t=s.changes.after-s.changes.before,e=t>=0?"rises":"drops";let n="";[u.effect_types.POWER,u.effect_types.RESIST].includes(i.type)&&(n=p.element_names[s.effect.attribute]+" "),yield this.battle_log.add(`${o.name}'s ${n}${u.effect_names[i.type]} ${e} by ${Math.abs(t)}!`),this.battle_menu.chars_status_window.update_chars_info(),yield this.wait_for_key()}break;case u.effect_types.END_THE_ROUND:return yield this.battle_log.add("Everybody is resting!"),yield this.wait_for_key(),!0;case u.effect_types.TURNS:yield this.battle_log.add(t.caster.name+" readies for action!"),yield this.wait_for_key(),this.on_going_effects.push(o.add_effect(i,e,!0).effect);break;case u.effect_types.DAMAGE_MODIFIER:yield this.battle_log.add(u.effect_msg[i.effect_msg](o)),yield this.wait_for_key(),this.on_going_effects.push(o.add_effect(i,e,!0).effect);break;case u.effect_types.COUNTER_STRIKE:case u.effect_types.FLEE:break;default:this.on_going_effects.push(o.add_effect(i,e,!0).effect)}}return!1}))}battle_phase_round_end(){return s(this,void 0,void 0,(function*(){let t=[],e={};for(let i=0;i<this.on_going_effects.length;++i){const s=this.on_going_effects[i];if(s.char.has_permanent_status(n.permanent_status.DOWNED)){s.char.remove_effect(s),s.char.update_all(),t.push(i);continue}let a=!1;void 0!==s.turn_count&&(null!==s.char.get_effect_turns_count(s)?(s.char.key_name in e&&s.char.get_effect_turns_key(s)in e[s.char.key_name]||s.char.set_effect_turns_count(s),s.turn_count=s.char.get_effect_turns_count(s),e[s.char.key_name]?e[s.char.key_name][s.char.get_effect_turns_key(s)]=s:e[s.char.key_name]={[s.char.get_effect_turns_key(s)]:s},a=!0):--s.turn_count,0===s.turn_count&&(s.char.remove_effect(s),s.char.update_all(),t.push(i),a||(this.battle_log.add_recover_effect(s),yield this.wait_for_key())))}for(let t in e)for(let i in e[t]){const s=e[t][i];0===s.turn_count&&(this.battle_log.add_recover_effect(s),yield this.wait_for_key())}this.on_going_effects=this.on_going_effects.filter((e,i)=>!t.includes(i));for(let t=0;t<v.MAX_CHARS_IN_BATTLE;++t){const e=this.data.info.party_data.members[t];if(void 0===e)continue;const i=e.djinni;for(let t=0;t<i.length;++t){const s=i[t],n=this.data.info.djinni_list[s];n.status===m.djinn_status.RECOVERY&&(0===n.recovery_turn?(n.set_status(m.djinn_status.SET,e),yield this.battle_log.add(`${n.name} is set to ${e.name}!`),yield this.wait_for_key()):--n.recovery_turn)}}this.battle_log.clear(),this.battle_phase=b.MENU,this.check_phases()}))}battle_phase_end(){return s(this,void 0,void 0,(function*(){for(let t=0;t<this.on_going_effects.length;++t){const e=this.on_going_effects[t];e.type!==u.effect_types.PERMANENT_STATUS&&(e.char.remove_effect(e),e.char.update_all())}if(this.allies_defeated)this.battle_log.add(this.allies_info[0].instance.name+"' party has been defeated!");else{this.battle_log.add(this.enemies_party_name+" has been defeated!"),yield this.wait_for_key();const t=this.enemies_info.map(t=>t.instance.exp_reward).reduce((t,e)=>t+e,0);this.battle_log.add(`You got ${t.toString()} experience points.`),yield this.wait_for_key();for(let e=0;e<this.allies_info.length;++e){const i=this.allies_info[e],s=i.instance;if(!s.has_permanent_status(n.permanent_status.DOWNED)){const e=s.add_exp(i.entered_in_battle?t:t>>1);if(e.before.level!==e.after.level){this.battle_log.add(`${s.name} is now a level ${s.level} ${s.class.name}!`),yield this.wait_for_key();const t=f.difference(e.after.abilities,e.before.abilities);for(let e=0;e<t.length;++e){const i=this.data.info.abilities_list[t[e]];this.battle_log.add(`Mastered the ${s.class.name}'s ${i.name}!`),yield this.wait_for_key()}for(let t=0;t<e.before.stats.length;++t){const i=Object.keys(e.before.stats[t])[0],s=e.after.stats[t][i]-e.before.stats[t][i];if(0!==s){let t;switch(i){case n.main_stats.MAX_HP:t="Maximum HP";break;case n.main_stats.MAX_PP:t="Maximum PP";break;case n.main_stats.ATTACK:t="Attack";break;case n.main_stats.DEFENSE:t="Defense";break;case n.main_stats.AGILITY:t="Agility";break;case n.main_stats.LUCK:t="Luck"}this.battle_log.add(`${t} rises by ${s.toString()}!`),yield this.wait_for_key()}}}}}const e=this.enemies_info.map(t=>t.instance.coins_reward).reduce((t,e)=>t+e,0);this.battle_log.add(`You got ${e.toString()} coins.`),yield this.wait_for_key();for(let t=0;t<this.enemies_info.length;++t){const e=this.enemies_info[t].instance;if(e.item_reward&&Math.random()<e.item_reward_chance){const t=this.data.info.items_list[e.item_reward];void 0!==t?g.MainChar.add_item_to_party(this.data.info.party_data,t,1)&&(this.battle_log.add(`You got a ${t.name}.`),yield this.wait_for_key()):(this.battle_log.add(e.item_reward+" not registered..."),yield this.wait_for_key())}}}this.unset_battle()}))}unset_battle(){this.battle_finishing=!0,this.battle_stage.unset_stage(()=>{this.data.control_manager.reset(),this.data.control_manager.detach_bindings(this.advance_log_control_key),this.battle_log.destroy(),this.battle_menu.destroy_menu(),this.target_window.destroy(),this.animation_manager.destroy()},()=>{this.data.in_battle=!1,this.data.battle_instance=void 0,this.game.physics.p2.resume()})}update(){this.battle_finishing||(this.battle_stage.update_stage(),this.animation_manager.render())}}e.Battle=v,v.MAX_CHARS_IN_BATTLE=4},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.HorizontalMenu=void 0;const s=i(0),n=i(1),a=i(2),_=i(3),o=n.GAME_HEIGHT-24,r=24-n.OUTSIDE_BORDER_WIDTH-n.INSIDE_BORDER_WIDTH;e.HorizontalMenu=class{constructor(t,e,i,h,c,l,d=!1){this.game=t,this.data=e,this.buttons_keys=i,this.titles=h,this.on_cancel=c.on_cancel,this.on_press=c.on_press,this.buttons_number=i.length;const u=s.get_text_width(this.game,_.maxBy(h,t=>t.length));this.title_window_width=void 0!==l?l:u+2*(n.WINDOW_PADDING_H+n.INSIDE_BORDER_WIDTH);const p=24*this.buttons_number+this.title_window_width+2*n.OUTSIDE_BORDER_WIDTH+2;this.dock_right=d,this.custom_scale=null,this.selected_button_index=0,this.menu_open=!1,this.menu_active=!1,this.selected_button_tween=null,this.x=n.GAME_WIDTH-p,this.dock_right||(this.x=this.x>>1),this.y=o,this.title_window=new a.Window(this.game,this.x+24*this.buttons_number,this.y,this.title_window_width,r),this.group=t.add.group(),this.group.alpha=0,this.group.width=0,this.group.height=0,this.mount_buttons()}set_control(){let t=[{key:this.data.gamepad.LEFT,on_down:this.previous_button.bind(this)},{key:this.data.gamepad.RIGHT,on_down:this.next_button.bind(this)},{key:this.data.gamepad.A,on_down:this.on_press.bind(this)},{key:this.data.gamepad.B,on_down:this.on_cancel?this.on_cancel.bind(this):void 0}];this.data.control_manager.set_control(t,{loop_configs:{horizontal:!0}})}mount_buttons(t=[]){const e=this.buttons_keys.filter(e=>!t.includes(e));this.buttons_number=e.length;const i=24*this.buttons_number+this.title_window_width+(n.OUTSIDE_BORDER_WIDTH<<1)+2;this.x=n.GAME_WIDTH-i,this.dock_right||(this.x=this.x>>1),this.title_window.update_position({x:this.x+24*this.buttons_number}),this.buttons&&this.buttons.forEach(t=>{t.sprite.destroy()}),this.buttons=new Array(this.buttons_number);for(let t=0;t<this.buttons_number;++t)this.buttons[t]={sprite:this.group.create(0,0,"buttons",e[t]),title:this.titles[t]},this.buttons[t].sprite.anchor.setTo(.5,1),this.buttons[t].sprite.centerX=24*(t+.5)|0,this.buttons[t].sprite.centerY=12}change_button(t){this.reset_button(),this.selected_button_index=(this.selected_button_index+t)%this.buttons_number,this.selected_button_index<0&&(this.selected_button_index=this.buttons_number-1),this.title_window.set_text([[this.buttons[this.selected_button_index].title]]),this.set_button()}next_button(){this.change_button(1)}previous_button(){this.change_button(-1)}set_to_position(t){this.reset_button(),this.selected_button_index=t,this.title_window.set_text([[this.buttons[this.selected_button_index].title]]),this.set_button()}set_button(){let t=1.15,e=1.25;this.custom_scale&&(t=this.custom_scale.active_default,e=this.custom_scale.max_scale),this.buttons[this.selected_button_index].sprite.scale.setTo(t,t),this.buttons[this.selected_button_index].sprite.bringToTop(),this.selected_button_tween=this.game.add.tween(this.buttons[this.selected_button_index].sprite.scale).to({x:e,y:e},Phaser.Timer.QUARTER>>1,Phaser.Easing.Linear.None,!0,0,-1,!0)}reset_button(){this.buttons[this.selected_button_index]&&this.buttons[this.selected_button_index].sprite.scale.setTo(1,1),this.selected_button_tween&&this.selected_button_tween.stop()}update_position(){this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y,this.title_window.update(!0)}open(t,e=0,i=!0,s){let n;this.reset_button(),s&&(this.custom_scale=s),this.menu_active=i,this.group.alpha=1,this.selected_button_index=e,this.update_position(),this.title_window.set_text([[this.buttons[this.selected_button_index].title]]);let a,_=new Promise(t=>{n=t});this.title_window.show(n);let o=new Promise(t=>{a=t});this.game.add.tween(this.group).to({width:24*this.buttons_number,height:24},Phaser.Timer.QUARTER>>2,Phaser.Easing.Linear.None,!0).onComplete.addOnce(a),Promise.all([_,o]).then(()=>{this.set_button(),this.menu_open=!0,t&&t(),this.set_control(),this.game.world.bringToTop(this.group)})}close(t,e=!0){if(this.reset_button(),this.data.control_manager.reset(),this.menu_open=!1,this.group.alpha=0,e){let e,i=new Promise(t=>{e=t});this.title_window.close(e);const s=Phaser.Timer.QUARTER>>2;let n,a=new Promise(t=>{n=t});this.game.add.tween(this.group).to({width:0,height:0},s,Phaser.Easing.Linear.None,!0).onComplete.addOnce(n),Promise.all([i,a]).then(void 0!==t?t:()=>{})}else this.title_window.close(void 0,!1),this.group.width=this.group.height=0,t&&t()}activate(){this.menu_active=!0,this.buttons.forEach(t=>{t.sprite.alpha=1}),this.title_window.open||this.title_window.show(void 0,!1),this.title_window.set_text([[this.buttons[this.selected_button_index].title]]),this.set_button(),this.set_control()}deactivate(t=!1){this.data.control_manager.reset(),this.reset_button(),this.menu_active=!1,t&&(this.buttons.forEach(t=>{t.sprite.alpha=0}),this.title_window.close(void 0,!1))}destroy(){this.title_window.destroy(!1),this.group.destroy()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GameEvent=e.event_types=void 0,function(t){t.BATTLE="battle"}(e.event_types||(e.event_types={}));class s{constructor(t,e,i){this.game=t,this.data=e,this.type=i,this.id=s.id_incrementer++,s.events[this.id]=this}static get_event(t){return s.events[t]}static reset(){s.id_incrementer=0,s.events={}}}e.GameEvent=s,s.reset()},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FieldAbilities=void 0;const s=i(71),n=i(0),a=i(28),_=i(72);e.FieldAbilities=class{constructor(t,e,i,s,n,a){this.game=t,this.ability_key_name=i,this.data=e,this.target_max_range=s,this.action_key_name=n,this.need_target=a,this.bootstrap_method=()=>{},this.cast_finisher=()=>{},this.controllable_char=null,this.target_found=!1,this.target_object=null,this.stop_casting=null,this.field_psynergy_window=new _.FieldPsynergyWindow(this.game,this.data)}get_cast_direction(t){return t%2==0?t:++t===n.directions_count?n.directions.right:t}set_hero_cast_anim(){this.controllable_char.play(this.action_key_name,n.reverse_directions[this.cast_direction])}unset_hero_cast_anim(){this.controllable_char.sprite.animations.currentAnim.reverseOnce(),this.controllable_char.sprite.animations.currentAnim.onComplete.addOnce(()=>{this.controllable_char.play(n.base_actions.IDLE,n.reverse_directions[this.cast_direction])}),this.controllable_char.play(this.action_key_name,n.reverse_directions[this.cast_direction])}set_bootstrap_method(t){this.bootstrap_method=t}set_cast_finisher_method(t){this.cast_finisher=t}search_for_target(){let t,e,i,s;this.target_found=!1,this.cast_direction===n.directions.up||this.cast_direction===n.directions.down?(t=this.controllable_char.sprite.x-this.controllable_char.body_radius,e=this.controllable_char.sprite.x+this.controllable_char.body_radius,this.cast_direction===n.directions.up?(i=this.controllable_char.sprite.y-this.controllable_char.body_radius-this.target_max_range,s=this.controllable_char.sprite.y-this.controllable_char.body_radius):(i=this.controllable_char.sprite.y+this.controllable_char.body_radius,s=this.controllable_char.sprite.y+this.controllable_char.body_radius+this.target_max_range)):(i=this.controllable_char.sprite.y-this.controllable_char.body_radius,s=this.controllable_char.sprite.y+this.controllable_char.body_radius,this.cast_direction===n.directions.left?(t=this.controllable_char.sprite.x-this.controllable_char.body_radius-this.target_max_range,e=this.controllable_char.sprite.x-this.controllable_char.body_radius):(t=this.controllable_char.sprite.x+this.controllable_char.body_radius,e=this.controllable_char.sprite.x+this.controllable_char.body_radius+this.target_max_range));let a=1/0;for(let n=0;n<this.data.map.interactable_objects.length;++n){let _=this.data.map.interactable_objects[n];if(!(this.ability_key_name in this.data.dbs.interactable_objects_db[_.key_name].psynergy_keys))continue;const o=_.current_x*this.data.map.sprite.tileWidth+(this.data.map.sprite.tileWidth>>1),r=_.current_y*this.data.map.sprite.tileHeight+(this.data.map.sprite.tileHeight>>1),h=r>=i&&r<=s;if(o>=t&&o<=e&&h&&this.data.map.collision_layer===_.base_collision_layer){let t=Math.pow(o-this.controllable_char.sprite.x,2)+Math.pow(r-this.controllable_char.sprite.y,2);t<a&&(a=t,this.target_found=!0,this.target_object=_)}}}set_target_casted(){if(this.target_object){if(this.data.dbs.interactable_objects_db[this.target_object.key_name].psynergy_keys[this.ability_key_name].interaction_type===a.interactable_object_interaction_types.ONCE){const t=this.ability_key_name+"_casted";this.target_object.custom_data[t]?(this.target_found=!1,this.target_object=null):this.target_found&&(this.target_object.custom_data[t]=!0)}}}cast(t,e){if(this.controllable_char=t,this.controllable_char.casting_psynergy)return;if(void 0!==e&&e in this.data.info.main_char_list){const t=this.data.info.main_char_list[e],i=this.data.info.abilities_list[this.ability_key_name];if(t.current_pp<i.pp_cost||!t.abilities.includes(this.ability_key_name))return;t.current_pp-=i.pp_cost}let i;this.field_psynergy_window.window.send_to_front(),this.field_psynergy_window.open(this.ability_key_name),this.controllable_char.casting_psynergy=!0,this.game.physics.p2.pause(),this.controllable_char.stop_char(!1),this.cast_direction=this.get_cast_direction(this.controllable_char.current_direction),this.controllable_char.set_direction(this.cast_direction),this.need_target&&(this.search_for_target(),this.set_target_casted()),this.set_hero_cast_anim(),this.stop_casting=s.init_cast_aura(this.game,this.controllable_char.sprite,this.data.npc_group,this.controllable_char.color_filter,()=>{i=s.tint_map_layers(this.game,this.data.map,this.data.map.color_filter),this.bootstrap_method()},()=>{this.game.physics.p2.resume(),this.controllable_char.casting_psynergy=!1,this.target_object=null},()=>{this.cast_finisher(),i()})}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ControllableChar=void 0;const s=i(1),n=i(0),a=i(42);class _{constructor(t,e,i,s,n,_,o,r,h,c,l){this.game=t,this.data=e,this.key_name=i,this.x_speed=0,this.y_speed=0,this.extra_speed=0,this.walk_speed=h,this.dash_speed=c,this.climb_speed=l,this.stop_by_colliding=!1,this.force_direction=!1,this.dashing=!1,this.climbing=!1,this.pushing=!1,this.jumping=!1,this.sliding=!1,this.casting_psynergy=!1,this.teleporting=!1,this.idle_climbing=!1,this.sprite_info=null,this.sprite=null,this.shadow=null,this.body_radius=0,this.tile_x_pos=s,this.tile_y_pos=n,this.current_action=_,this.current_direction=o,this.required_direction=0,this.desired_direction=o,this.color_filter=this.game.add.filter("ColorFilters"),this.trying_to_push=!1,this.trying_to_push_direction=null,this.push_timer=null,this.enable_footsteps=void 0!==r&&r,this.footsteps=new a.Footsteps(this.game,this.data),this.crop_texture=!1,this.shadow_following=!0}in_action(t=!1){return this.casting_psynergy||this.pushing||this.climbing&&!t||this.jumping||this.teleporting||this.sliding}set_sprite(t,e,i,n,a,o,r=!1){a=void 0===a?_.default_anchor.x:a,o=void 0===o?_.default_anchor.y:o,this.sprite_info=e;const h=this.sprite_info.getActionKey(this.current_action);this.sprite=t.create(0,0,h),this.sprite.anchor.setTo(a,o),this.sprite.x=(this.tile_x_pos+.5)*i.tileWidth|0,this.sprite.y=(this.tile_y_pos+.5)*i.tileHeight|0,this.sprite.base_collision_layer=n,this.sprite.roundPx=!0;const c=r?s.WORLD_MAP_SPRITE_SCALE_X:1,l=r?s.WORLD_MAP_SPRITE_SCALE_Y:1;this.sprite.scale.setTo(c,l)}reset_anchor(t){void 0!==t&&["x","y"].includes(t)?this.sprite.anchor[t]=_.default_anchor[t]:(this.sprite.anchor.x=_.default_anchor.x,this.sprite.anchor.y=_.default_anchor.y)}set_shadow(t,e,i,n,a,o=!1){t=void 0===t?_.DEFAULT_SHADOW_KEYNAME:t,n=void 0===n?_.DEFAULT_SHADOW_ANCHOR_X:n,a=void 0===a?_.DEFAULT_SHADOW_ANCHOR_Y:a,this.shadow=e.create(0,0,t),this.shadow.blendMode=PIXI.blendModes.MULTIPLY,this.shadow.disableRoundPx=!0,this.shadow.anchor.setTo(n,a),this.shadow.base_collision_layer=i;const r=o?s.WORLD_MAP_SPRITE_SCALE_X:1,h=o?s.WORLD_MAP_SPRITE_SCALE_Y:1;this.shadow.scale.setTo(r,h)}camera_follow(){this.game.camera.follow(this.sprite,Phaser.Camera.FOLLOW_LOCKON,s.CAMERA_LERP,s.CAMERA_LERP),this.game.camera.focusOn(this.sprite)}set_collision_layer(t){this.sprite.base_collision_layer=t,this.shadow.base_collision_layer=t}play(t,e,i=!0){if(t=void 0===t?this.current_action:t,e=void 0===e?n.reverse_directions[this.current_direction]:e,this.sprite_info.getSpriteAction(this.sprite)!==t){const e=this.sprite_info.getActionKey(t);this.sprite.loadTexture(e)}const s=this.sprite_info.getAnimationKey(t,e);this.sprite.animations.getAnimation(s)||this.sprite_info.setAnimation(this.sprite,t);const a=this.sprite.animations.getAnimation(s);return i?this.sprite.animations.play(s):a.stop(!0),a}set_frame(t,e=0){const i=this.sprite_info.getFrameName(this.current_action,n.reverse_directions[t],e);this.sprite.frameName=i}update_shadow(){this.shadow&&this.shadow_following&&(this.sprite.body?(this.shadow.x=this.sprite.body.x,this.shadow.y=this.sprite.body.y):(this.shadow.x=this.sprite.x,this.shadow.y=this.sprite.y))}create_half_crop_mask(t=!1){t&&(this.sprite.mask=this.game.add.graphics(this.sprite.centerX-(this.sprite.width>>1),this.sprite.centerY-(this.sprite.height>>1)),this.sprite.mask.beginFill(16777215,1),this.sprite.mask.drawRect(0,0,this.sprite.width,this.sprite.height),this.sprite.mask.endFill())}set_half_crop_mask(t,e=!1){!t||this.crop_texture&&!e?t||!this.crop_texture&&!e||(this.sprite.mask.clear(),this.sprite.mask.beginFill(16777215,1),this.sprite.mask.drawRect(0,0,this.sprite.width,this.sprite.height),this.sprite.mask.endFill(),this.crop_texture=!1,this.shadow.visible=!0):(this.sprite.mask.clear(),this.sprite.mask.beginFill(16777215,1),this.sprite.mask.drawRect(0,0,this.sprite.width,(3*this.sprite.height|0)>>2),this.sprite.mask.endFill(),this.shadow.visible=!1,this.crop_texture=!0)}check_half_crop_tile(t=!1){const e=this.data.map.get_current_tile(this);for(let i=0;i<e.length;++i){if(e[i].properties.half_crop)return void this.set_half_crop_mask(!0,t)}this.set_half_crop_mask(!1,t)}update_half_crop(t=!1){this.sprite.mask&&(t&&(this.sprite.update(),this.sprite.postUpdate()),this.sprite.mask.x=this.sprite.centerX-(this.sprite.width>>1),this.sprite.mask.y=this.sprite.centerY-(this.sprite.height>>1),this.data.map.is_world_map&&this.check_half_crop_tile(t))}stop_char(t=!0){this.sprite.body&&(this.sprite.body.velocity.y=this.sprite.body.velocity.x=0),t&&(this.current_action=n.base_actions.IDLE,this.set_action())}set_direction(t){this.current_direction=this.desired_direction=t}set_action(t=!1){if(t&&this.data.tile_event_manager.on_event)return;let e=this.current_action,i=this.idle_climbing;!this.stop_by_colliding||this.pushing||this.climbing?this.stop_by_colliding&&!this.pushing&&this.climbing&&(i=!0):e=n.base_actions.IDLE;const s=i?n.base_actions.IDLE:n.reverse_directions[this.desired_direction];this.play(e,s)}tile_able_to_show_footprint(){const t=this.data.map.get_current_tile(this);for(let e=0;e<t.length;++e){const i=t[e];if(i.properties.hasOwnProperty("disable_footprint")){if(i.properties.disable_footprint.split(",").map(t=>parseInt(t)).includes(this.data.map.collision_layer))return!1}}return!0}set_current_action(){if(!this.data.tile_event_manager.on_event)if(null!==this.required_direction||this.current_action===n.base_actions.IDLE||this.climbing){if(null!==this.required_direction&&!this.climbing&&!this.pushing){const t=this.enable_footsteps&&this.data.map.show_footsteps&&this.tile_able_to_show_footprint();this.footsteps.can_make_footprint&&t&&this.footsteps.create_step(this.current_direction,this.current_action),this.dashing&&this.current_action!==n.base_actions.DASH?this.current_action=n.base_actions.DASH:this.dashing||this.current_action===n.base_actions.WALK||(this.current_action=n.base_actions.WALK)}}else this.current_action=n.base_actions.IDLE}update_tile_position(t){this.tile_x_pos=this.sprite.x/t.tileWidth|0,this.tile_y_pos=this.sprite.y/t.tileHeight|0}calculate_speed(){const t=this.game.time.elapsedMS/s.DELTA_TIME_FACTOR;if(this.current_action===n.base_actions.DASH){const e=this.dash_speed+this.extra_speed+(this.data.map.is_world_map?s.WORLD_MAP_SPEED_DASH_REDUCE:0);this.sprite.body.velocity.temp_x=t*this.x_speed*e|0,this.sprite.body.velocity.temp_y=t*this.y_speed*e|0}else if(this.current_action===n.base_actions.WALK){const e=this.walk_speed+this.extra_speed+(this.data.map.is_world_map?s.WORLD_MAP_SPEED_WALK_REDUCE:0);this.sprite.body.velocity.temp_x=t*this.x_speed*e|0,this.sprite.body.velocity.temp_y=t*this.y_speed*e|0}else this.current_action===n.base_actions.CLIMB?(this.sprite.body.velocity.temp_x=t*this.x_speed*this.climb_speed|0,this.sprite.body.velocity.temp_y=t*this.y_speed*this.climb_speed|0):this.current_action===n.base_actions.IDLE&&(this.sprite.body.velocity.y=this.sprite.body.velocity.x=0)}apply_speed(){[n.base_actions.WALK,n.base_actions.DASH,n.base_actions.CLIMB].includes(this.current_action)&&(this.sprite.body.velocity.x=this.sprite.body.velocity.temp_x,this.sprite.body.velocity.y=this.sprite.body.velocity.temp_y)}set_speed(t,e){this.x_speed=void 0===t?this.x_speed:t,this.y_speed=void 0===e?this.y_speed:e,this.calculate_speed(),this.apply_speed()}}e.ControllableChar=_,_.DEFAULT_SHADOW_KEYNAME="shadow",_.DEFAULT_SHADOW_ANCHOR_X=.45,_.DEFAULT_SHADOW_ANCHOR_Y=.05,_.DEFAULT_SPRITE_ANCHOR_X=.5,_.DEFAULT_SPRITE_ANCHOR_Y=.8,_.default_anchor={x:_.DEFAULT_SPRITE_ANCHOR_X,y:_.DEFAULT_SPRITE_ANCHOR_Y}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.fire_push_movement=e.target_only_push=e.normal_push=void 0;const s=i(1),n=i(6),a=i(0),_=i(16);function o(t,e,i,n,_,o=!1,c=!0,l){let d;if(!o){let t=e.hero.sprite.x+(-i.sprite.y-i.sprite.x),s=-e.hero.sprite.x+(-i.sprite.y+i.sprite.x);-e.hero.sprite.y>=t&&-e.hero.sprite.y>=s?d=a.directions.down:-e.hero.sprite.y<=t&&-e.hero.sprite.y>=s?d=a.directions.left:-e.hero.sprite.y<=t&&-e.hero.sprite.y<=s?d=a.directions.up:-e.hero.sprite.y>=t&&-e.hero.sprite.y<=s&&(d=a.directions.right)}if(o||d===e.hero.trying_to_push_direction){o||(e.hero.pushing=!0,e.hero.current_action=a.base_actions.PUSH,e.hero.set_action()),t.physics.p2.pause();let d=0,u=0,p=0,m=0;switch(e.hero.trying_to_push_direction){case a.directions.up:m=-1,u=-16;break;case a.directions.down:m=1,u=16;break;case a.directions.left:p=-1,d=-16;break;case a.directions.right:p=1,d=16}r(e,i,p,m);let g=[i.sprite.body];o||g.push(e.hero.shadow,e.hero.sprite.body);const w=i.current_x,f=i.current_y;i.current_x+=p,i.current_y+=m;let y=[];void 0!==_&&_(d,u),i.custom_data.blocking_stair_block&&(i.custom_data.blocking_stair_block.x+=d,i.custom_data.blocking_stair_block.y+=u);for(let n=0;n<g.length;++n){let _,o=g[n],c=o.x+d,b=o.y+u;o!==e.hero.shadow&&o!==e.hero.sprite.body||(0===d?c=e.map.sprite.tileWidth*(w+p+.5):0===u&&(b=e.map.sprite.tileHeight*(f+m+.5))),y.push(new Promise(t=>{_=t}));const v=t.add.tween(o).to({x:c,y:b},s.PUSH_TIME,Phaser.Easing.Linear.None,!0);l&&v.onUpdateCallback(l),v.onComplete.addOnce(()=>{let s=!1;n===g.length-1&&i.object_drop_tiles.forEach(n=>{if(n.x===i.current_x&&n.y===i.current_y){s=!0;const o=(n.dest_y-i.current_y)*e.map.sprite.tileHeight;return r(e,i,0,n.dest_y-i.current_y),i.current_y=n.dest_y,i.change_collider_layer(e,n.destination_collider_layer),void t.add.tween(i.sprite.body).to({y:i.sprite.body.y+o},n.animation_duration,Phaser.Easing.Quadratic.In,!0).onComplete.addOnce(()=>{n.dust_animation?(e.hero.current_action=a.base_actions.IDLE,e.hero.play(e.hero.current_action,a.reverse_directions[e.hero.current_direction]),h(t,e,i,_)):_()})}}),s||_()})}Promise.all(y).then(()=>{e.hero.pushing=!1,c&&t.physics.p2.resume(),void 0!==n&&n()})}}function r(t,e,i,s){let o=e.get_events();for(let r=0;r<o.length;++r){let h=o[r];t.map.events[h.location_key]=t.map.events[h.location_key].filter(t=>t.id!==h.id),0===t.map.events[h.location_key].length&&delete t.map.events[h.location_key];let c=h.x,l=h.y,d=c+i,u=l+s;const p=n.TileEvent.get_location_key(d,u);h.x=d,h.y=u,h.location_key=p,p in t.map.events||(t.map.events[p]=[]),t.map.events[p].push(h);const m=a.get_surroundings(d,u,!1,2);_.JumpEvent.active_jump_surroundings(t,m,e.collider_layer_shift+e.base_collision_layer);const g=a.get_surroundings(c,l,!1,2);for(let i=0;i<g.length;++i){const s=g[i],_=n.TileEvent.get_location_key(s.x,s.y);if(_ in t.map.events)for(let i=0;i<t.map.events[_].length;++i){const o=t.map.events[_][i];if(o.type===n.event_types.JUMP){const t=e.collider_layer_shift+e.base_collision_layer;o.activation_collision_layers.includes(t)&&!1===o.dynamic&&o.deactivate_at(a.get_opposite_direction(s.direction))}}}}}function h(t,e,i,n){let a=new Array(7),_=new Array(7);const o=(i.current_x+.5)*e.map.sprite.tileWidth,r=(i.current_y+.5)*e.map.sprite.tileHeight,h=e.info.misc_sprite_base_list.dust;for(let n=0;n<7;++n){const c=(Math.PI+s.degree60)*n/6-s.degree30,l=o+18*Math.cos(c),d=r+18*Math.sin(c);let u=e.npc_group.create(o,r,"dust");(c<0||c>Math.PI)&&e.npc_group.setChildIndex(u,e.npc_group.getChildIndex(i.sprite)),u.anchor.setTo(.5,.5),t.add.tween(u).to({x:l,y:d},400,Phaser.Easing.Linear.None,!0),_[n]=u,h.setAnimation(u,"dust");const p=h.getAnimationKey("dust","spread");let m;a[n]=new Promise(t=>{m=t}),u.animations.getAnimation(p).onComplete.addOnce(m),u.animations.play(p)}Promise.all(a).then(()=>{_.forEach(t=>{e.npc_group.remove(t,!0)}),n()})}e.normal_push=function(t,e,i){!e.hero.trying_to_push||![a.directions.up,a.directions.down,a.directions.left,a.directions.right].includes(e.hero.trying_to_push_direction)||e.hero.trying_to_push_direction!==e.hero.current_direction||e.hero.casting_psynergy||e.hero.jumping||e.in_battle||o(t,e,i),e.hero.trying_to_push=!1,e.hero.push_timer=null},e.target_only_push=function(t,e,i,s,n,a=!0,_){o(t,e,i,n,s,!0,a,_)},e.fire_push_movement=o},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DialogManager=void 0;const s=i(1),n=i(0),a=i(2);e.DialogManager=class{constructor(t,e,i=!0){this.game=t,this.data=e,this.italic_font=i,this.parts=null,this.step=0,this.finished=!1,this.avatar=null,this.window=null,this.avatar_window=null,this.hero_direction=n.directions.down,this.dialog_crystal_sprite_base=this.data.info.misc_sprite_base_list.dialog_crystal;const s=this.dialog_crystal_sprite_base.getActionKey("dialog_crystal");this.dialog_crystal=this.game.add.sprite(0,0,s),this.dialog_crystal_sprite_base.setAnimation(this.dialog_crystal,"dialog_crystal"),this.dialog_crystal_anim_key=this.dialog_crystal_sprite_base.getAnimationKey("dialog_crystal","rotate"),this.dialog_crystal.visible=!1,this.dialog_crystal_tween=null,this.show_crystal=!1}update_position(){this.avatar&&this.avatar_window.update(!0),this.window.update(!0)}get_dialog_window_position(t,e){const i=s.GAME_WIDTH-t>>1;let a=s.MAX_DIAG_WIN_HEIGHT-e>>1;return[n.directions.up,n.directions.up_left,n.directions.up_right].includes(this.hero_direction)||(a=s.GAME_HEIGHT-(s.MAX_DIAG_WIN_HEIGHT+4)+a),{x:i,y:a}}get_avatar_position(t){const e=(this.parts[this.step].width>>2)+t.x|0;let i;return i=t.y>=s.GAME_HEIGHT>>1?t.y-s.AVATAR_SIZE-8:t.y+this.parts[this.step].height+4,{x:e,y:i}}set_avatar(t){this.avatar=t}set_hero_direction(t){void 0!==t&&(this.hero_direction=t)}next(t,e,i){if(this.avatar_window&&(this.avatar_window.destroy(!1),this.avatar_window=null),this.step>=this.parts.length)return this.finished=!0,this.window.destroy(!0,t.bind(this,this.finished)),void this.dialog_crystal.destroy();this.window&&(this.window.destroy(!1),this.window=null),this.mount_window(t,e,i),++this.step}mount_window(t,e,i){this.dialog_crystal.visible=!1;let n=this.get_dialog_window_position(this.parts[this.step].width,this.parts[this.step].height);if(e&&void 0!==e.x&&(n.x=e.x),e&&void 0!==e.y&&(n.y=e.y),this.window=new a.Window(this.game,n.x,n.y,this.parts[this.step].width,this.parts[this.step].height,!1),this.window.show(((t,e,i)=>{this.window.set_text(this.parts[t].lines,void 0,void 0,void 0,e,!0).then(()=>{if(t<this.parts.length-1||this.show_crystal){this.dialog_crystal.visible=!0,this.dialog_crystal.x=this.window.real_x+this.parts[t].width-this.dialog_crystal.width,this.dialog_crystal.y=this.window.real_y+this.parts[t].height;const e=this.dialog_crystal.parent;e.setChildIndex(this.dialog_crystal,e.getChildIndex(this.window.group)),this.dialog_crystal.play(this.dialog_crystal_anim_key);const i=[this.dialog_crystal.y-(this.dialog_crystal.height>>1),this.dialog_crystal.y];this.dialog_crystal_tween&&this.dialog_crystal_tween.isRunning&&this.dialog_crystal_tween.stop(),this.dialog_crystal_tween=this.game.tweens.create(this.dialog_crystal).to({y:i},1400,Phaser.Easing.Quadratic.InOut,!0,0,-1)}else this.dialog_crystal_tween&&this.dialog_crystal_tween.isRunning&&this.dialog_crystal_tween.stop();i&&i(this.finished)})}).bind(this,this.step,this.italic_font,t)),this.avatar){let t=this.get_avatar_position(n);i&&void 0!==i.x&&(t.x=i.x),i&&void 0!==i.y&&(t.y=i.y);const e=s.AVATAR_SIZE+4;this.avatar_window=new a.Window(this.game,t.x,t.y,e,e),this.avatar_window.create_at_group(4,4,"avatars",void 0,this.avatar),this.avatar_window.show()}}set_dialog(t,e,i){this.set_avatar(e),this.set_hero_direction(i);const a=s.MAX_DIAG_WIN_WIDTH-2*s.WINDOW_PADDING_H-s.INSIDE_BORDER_WIDTH;let _=t.split(" "),o=[],r=[],h=[],c=0,l=0;for(let t=0;t<_.length;++t){const e=_[t];if(c=n.get_text_width(this.game,h.join(" ")+e,this.italic_font),c>=a){const t=h.join(" ");r.push(t),l=Math.max(l,n.get_text_width(this.game,t,this.italic_font)),h=[],h.push(e),c=n.get_text_width(this.game,e,this.italic_font),r.length===s.MAX_LINES_PER_DIAG_WIN&&(o.push({lines:r.slice(),width:l+2*s.WINDOW_PADDING_H+s.INSIDE_BORDER_WIDTH,height:s.WINDOW_PADDING_TOP+s.WINDOW_PADDING_BOTTOM+r.length*(s.FONT_SIZE+s.SPACE_BETWEEN_LINES)-s.SPACE_BETWEEN_LINES}),l=0,r=[])}else h.push(e)}h.length&&(l=Math.max(l,n.get_text_width(this.game,h.join(" "),this.italic_font)),r.push(h.join(" ")),o.push({lines:r.slice(),width:l+2*s.WINDOW_PADDING_H+s.INSIDE_BORDER_WIDTH+2,height:s.WINDOW_PADDING_TOP+s.WINDOW_PADDING_BOTTOM+r.length*(s.FONT_SIZE+s.SPACE_BETWEEN_LINES)-s.SPACE_BETWEEN_LINES})),this.parts=o}quick_next(t,e,i,s,n,a,_=!1){this.parts=null,this.step=0,this.window&&(this.window.destroy(!1),this.window=null),this.avatar_window&&(this.avatar_window.destroy(!1),this.avatar_window=null),this.show_crystal=_,this.set_dialog(t,i,s),this.mount_window(e,n,a)}kill_dialog(t,e=!1,i=!1){e||this.avatar_window&&this.avatar_window.destroy(!1),this.window&&(this.finished=!0,this.window.destroy(!0,t),i&&this.dialog_crystal.destroy())}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.NPC=e.npc_types=e.npc_movement_types=void 0;const s=i(19),n=i(0),a=i(21),_=i(45);var o;!function(t){t.IDLE="idle",t.WALK_AROUND="walk_around"}(o=e.npc_movement_types||(e.npc_movement_types={})),function(t){t.NORMAL="normal",t.INN="inn",t.SHOP="shop",t.SPRITE="sprite"}(e.npc_types||(e.npc_types={}));class r extends a.ControllableChar{constructor(t,e,i,s,n,a,_,o,h,c,l,d,u,p,m,g,w,f,y,b,v){super(t,e,i,s,n,a,_,o,h,c,l),this.npc_type=d,this.movement_type=u,this.message=p,this.thought_message=m,this.avatar=g,this.shop_key=w,this.base_collision_layer=f,this.talk_range_factor=void 0===y?r.NPC_TALK_RANGE:y,this.no_shadow=void 0!==v&&v,this.events=[],this.set_events(b)}set_sprite_as_npc(){this.sprite.is_npc=!0}set_events(t){for(let e=0;e<t.length;++e){const i=t[e];switch(i.type){case s.event_types.BATTLE:this.events.push(new _.BattleEvent(this.game,this.data,i.background_key,i.enemy_party_key))}}}update(){this.movement_type===o.IDLE&&this.stop_char(!1),this.update_shadow()}config_body(t){this.game.physics.p2.enable(this.sprite,!1),void 0!==this.data.dbs.npc_db[this.key_name].anchor_x?this.sprite.anchor.x=this.data.dbs.npc_db[this.key_name].anchor_x:this.reset_anchor("x"),void 0!==this.data.dbs.npc_db[this.key_name].anchor_y?this.sprite.anchor.y=this.data.dbs.npc_db[this.key_name].anchor_y:this.reset_anchor("y"),this.sprite.body.clearShapes(),this.body_radius=this.data.dbs.npc_db[this.key_name].body_radius;const e=this.body_radius<<1,i=n.mount_collision_polygon(e,-(e>>1),this.data.dbs.npc_db[this.key_name].collision_body_bevel);this.sprite.body.addPolygon({optimalDecomp:!1,skipSimpleCheck:!0,removeCollinearPoints:!1},i),this.sprite.body.setCollisionGroup(t.npc_collision_groups[this.base_collision_layer]),this.sprite.body.damping=1,this.sprite.body.angularDamping=1,this.sprite.body.setZeroRotation(),this.sprite.body.fixedRotation=!0,this.sprite.body.dynamic=!1,this.sprite.body.static=!0}}e.NPC=r,r.NPC_TALK_RANGE=3},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function _(t){try{r(s.next(t))}catch(t){a(t)}}function o(t){try{r(s.throw(t))}catch(t){a(t)}}function r(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(_,o)}r((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.BattleStage=e.DEFAULT_POS_ANGLE=void 0;const n=i(1),a=i(0),_=i(13),o=i(5),r=i(3),h=n.GAME_WIDTH>>1,c=n.GAME_HEIGHT-35,l=.009*Math.PI,d=n.GAME_WIDTH/2-50,u=n.GAME_HEIGHT/50;e.DEFAULT_POS_ANGLE=.7551327;const p=[11,9,7,5,3,1,3,5,7,9,11],m=[.1,.2,.3,.4,.6,1,.6,.4,.3,.2,.1];class g{constructor(t,e,i,s,n){this.game=t,this.data=e,this.camera_angle={rad:-2.120575,spining:!1,update:this.update_sprite_properties.bind(this)},this.background_key=i,this.old_camera_angle=this.camera_angle.rad,this.battle_group=this.game.add.group(),this.crop_group=this.game.add.group(),this.group_enemies=this.game.add.group(),this.group_allies=this.game.add.group(),this.allies_info=s,this.enemies_info=n,this.allies_count=s.length,this.enemies_count=n.length,this.shift_from_middle_enemy=35*this.enemies_count*.5,this.shift_from_middle_ally=35*this.allies_count*.5,this.sprites=[],this.x=this.game.camera.x,this.y=this.game.camera.y,this.battle_group.x=this.x,this.battle_group.y=this.y,this.battle_group.scale.setTo(1.2,1.2),this.crop_group.x=this.x,this.crop_group.y=this.y}set_targets(){let t,e;switch(this.target_type){case _.ability_target_types.ALLY:t=this.allies_count,e=this.allies_info;break;case _.ability_target_types.ENEMY:t=this.enemies_count,e=this.enemies_info;break;case _.ability_target_types.USER:t=this.ability_caster.fighter_type===o.fighter_types.ALLY?this.allies_count:this.enemies_count,e=this.ability_caster.fighter_type===o.fighter_types.ENEMY?this.allies_info:this.enemies_info}const i=r.zipWith(p.slice(this.range_cursor_position-(t>>1),this.range_cursor_position+(t>>1)+1).reverse(),e,(t,e)=>({magnitude:t>this.ability_range?null:t,target:e}));this.target_type===_.ability_target_types.USER?this.choosing_targets_callback(i):this.choosing_targets_finished(i)}next_target(){this.change_target(-1)}previous_target(){this.change_target(1)}change_target(t,e=!0){this.target_type===_.ability_target_types.ENEMY&&(t*=-1);const i=this.target_type===_.ability_target_types.ALLY?this.allies_info:this.enemies_info,s=i.length,n=s%2?s>>1:(s>>1)-1;let a;do{this.range_cursor_position+=t,0===t&&(t=-1);a=n+(this.range_cursor_position-(p.length>>1)),a>=s?(this.range_cursor_position=(p.length>>1)-n,a=0):a<0&&(this.range_cursor_position=(p.length>>1)+n+ +!(s%2),a=s-1)}while(i[a].instance.has_permanent_status(o.permanent_status.DOWNED));this.set_battle_cursors_position(e)}initialize_sprites(){this.black_bg=this.game.add.graphics(0,0),this.battle_group.add(this.black_bg),this.black_bg.beginFill(0,1),this.black_bg.drawRect(0,0,n.GAME_WIDTH,n.GAME_HEIGHT),this.black_bg.endFill(),this.battle_bg=this.game.add.tileSprite(0,17,n.GAME_WIDTH,120,"battle_backgrounds",this.background_key),this.battle_bg2=this.game.add.tileSprite(0,17,n.GAME_WIDTH,120,"battle_backgrounds",this.background_key),this.bg_height=this.battle_bg.height,this.battle_bg.scale.setTo(1,1),this.battle_bg2.scale.setTo(1,1);const t=(t,e,i,s,n)=>{const a=t.create(0,0,e.sprite_key);return a.anchor.setTo(.5,1),a.scale.setTo(e.scale,e.scale),a.ellipses_semi_major=d,a.ellipses_semi_minor=u,a.data.is_Ally=i,n.setAnimation(a,"battle"),a.animations.play(s),this.sprites.push(a),a};this.allies_info.forEach(e=>{const i=t(this.group_allies,e,!0,"battle_back",this.data.info.main_char_list[e.instance.key_name].sprite_base);e.sprite=i}),this.enemies_info.forEach(e=>{const i=t(this.group_enemies,e,!1,"battle_front",this.data.info.enemies_list[e.instance.key_name].sprite_base);e.sprite=i}),this.first_ally_char=this.group_allies.children[0],this.last_ally_char=this.group_allies.children[this.allies_count-1],this.first_enemy_char=this.group_enemies.children[0],this.last_enemy_char=this.group_enemies.children[this.enemies_count-1]}intialize_crop_rectangles(){this.upper_rect=this.game.add.graphics(0,0),this.crop_group.add(this.upper_rect),this.upper_rect.beginFill(0,1),this.upper_rect.drawRect(0,0,n.GAME_WIDTH,n.GAME_HEIGHT>>1),this.upper_rect.endFill();const t=17+(this.bg_height>>1)+2;this.lower_rect=this.game.add.graphics(0,t),this.crop_group.add(this.lower_rect),this.lower_rect.beginFill(0,1),this.lower_rect.drawRect(0,0,n.GAME_WIDTH,2+(n.GAME_HEIGHT>>1)),this.lower_rect.endFill()}initialize_stage(t){this.choosing_actions=!1,this.choosing_targets=!1,this.initialize_sprites(),this.intialize_crop_rectangles(),this.battle_group.add(this.battle_bg),this.battle_group.add(this.battle_bg2),this.battle_group.add(this.group_enemies),this.battle_group.add(this.group_allies),this.game.add.tween(this.upper_rect).to({height:17},1500,Phaser.Easing.Linear.None,!0),this.game.add.tween(this.lower_rect).to({y:17+this.bg_height-1,height:n.GAME_HEIGHT-this.bg_height-17+1},1500,Phaser.Easing.Linear.None,!0),this.game.add.tween(this.camera_angle).to({rad:e.DEFAULT_POS_ANGLE},1500,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{t&&t()}),this.game.add.tween(this.battle_group.scale).to({x:1,y:1},1500,Phaser.Easing.Linear.None,!0)}set_stage_default_position(){return s(this,void 0,void 0,(function*(){let t;const i=new Promise(e=>{t=e});this.game.add.tween(this.camera_angle).to({rad:e.DEFAULT_POS_ANGLE},300,Phaser.Easing.Linear.None,!0).onComplete.addOnce(t),yield i}))}set_choosing_action_position(){this.choosing_actions=!0,this.battle_bg2.x=0,this.battle_bg2.scale.setTo(2,2),this.battle_bg2.y=1*-this.battle_bg.height+17- -3;for(let t=0;t<this.sprites.length;++t){const e=this.sprites[t],i=e.data.is_Ally?t:this.enemies_count-1-(t-this.allies_count),s=(e.data.is_Ally?88:106-40*(this.enemies_count>>1))+40*i,n=e.data.is_Ally?160:98;e.x=s,e.y=n;const a=e.scale.x+.2*Math.sign(e.scale.x),_=e.scale.y+.2*Math.sign(e.scale.y);e.scale.setTo(a,_)}}reset_positions(){this.battle_bg2.scale.setTo(1,1),this.battle_bg2.y=17;for(let t=0;t<this.sprites.length;++t){const e=this.sprites[t],i=e.scale.x-.2*Math.sign(e.scale.x),s=e.scale.y-.2*Math.sign(e.scale.y);e.scale.setTo(i,s)}}set_battle_cursors_position(t=!0){const e=this.target_type===_.ability_target_types.ALLY?this.allies_info:this.enemies_info,i=e.length%2?e.length>>1:(e.length>>1)-1,s=this.range_cursor_position-(p.length>>1);this.cursors.forEach((n,a)=>{let _=a-((this.cursors.length>>1)-i)+s;const r=e[_];if(r&&!r.instance.has_permanent_status(o.permanent_status.DOWNED)){const e=r.sprite,i=m[this.range_cursor_position-s-(this.cursors.length>>1)+a];n.scale.setTo(i,i),n.alpha=1,this.cursors_tweens[a]&&this.cursors_tweens[a].stop();const _=e.x,o=e.y-e.height-5;t?this.game.add.tween(n).to({centerX:_,y:o},85,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.cursors_tweens[a]=this.game.add.tween(n).to({y:n.y-4},100,Phaser.Easing.Linear.None,!0,0,-1,!0)}):(n.centerX=_,n.y=o,this.cursors_tweens[a]=this.game.add.tween(n).to({y:n.y-4},100,Phaser.Easing.Linear.None,!0,0,-1,!0))}else{n.alpha=0,_=_<0?0:e.length-1;const t=e[_].sprite;n.centerX=t.x,n.y=t.y-t.height}})}unset_battle_cursors(){this.cursors.forEach((t,e)=>{t.destroy(),this.cursors_tweens[e]&&this.cursors_tweens[e].stop()})}choose_targets(t,e,i,s,n){this.choosing_targets_callback=n,this.range_cursor_position=p.length>>1,this.ability_range="all"===t?p[0]:t,this.ability_type=i,this.ability_caster=s,this.target_type=e,this.target_type===_.ability_target_types.USER?this.set_targets():this.game.add.tween(this.battle_group).to({y:this.battle_group.y+(this.target_type===_.ability_target_types.ALLY?-3:15)},150,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{const t=this.ability_range;this.cursors=new Array(t),this.cursors_tweens=new Array(t).fill(null);for(let e=0;e<t;++e)this.cursors[e]=this.battle_group.create(0,0,"battle_cursor"),this.cursors[e].animations.add("anim"),this.cursors[e].animations.play("anim",40,!0);this.choosing_targets=!0,this.change_target(0,!1);let e=[{key:this.data.gamepad.LEFT,on_down:this.next_target.bind(this)},{key:this.data.gamepad.RIGHT,on_down:this.previous_target.bind(this)},{key:this.data.gamepad.A,on_down:this.set_targets.bind(this)},{key:this.data.gamepad.B,on_down:this.choosing_targets_finished.bind(this,null)}];this.data.control_manager.set_control(e,{loop_configs:{horizontal:!0}})})}choosing_targets_finished(t){this.choosing_targets=!1,this.game.add.tween(this.battle_group).to({y:this.battle_group.y-(this.target_type===_.ability_target_types.ALLY?-3:15)},150,Phaser.Easing.Linear.None,!0),this.unset_battle_cursors(),this.choosing_targets_callback(t)}prevent_camera_angle_overflow(){this.camera_angle.rad=a.range_360(this.camera_angle.rad)}update_stage(){if(!this.choosing_actions){if(!this.game.input.keyboard.isDown(this.data.gamepad.DEBUG_CAM_PLUS)&&this.game.input.keyboard.isDown(this.data.gamepad.DEBUG_CAM_MINUS))this.camera_angle.rad-=l,this.battle_bg.x-=2.4;else if(this.game.input.keyboard.isDown(this.data.gamepad.DEBUG_CAM_PLUS)&&!this.game.input.keyboard.isDown(this.data.gamepad.DEBUG_CAM_MINUS))this.camera_angle.rad+=l,this.battle_bg.x+=2.4;else{const t=a.range_360(this.camera_angle.rad)-a.range_360(this.old_camera_angle);this.battle_bg.x+=.4*this.battle_bg.width*t}this.old_camera_angle=this.camera_angle.rad,(this.battle_bg.x>this.battle_bg.width||this.battle_bg.x<-this.battle_bg.width)&&(this.battle_bg.x=this.battle_bg2.x),this.battle_bg.x>0?this.battle_bg2.x=this.battle_bg.x-this.battle_bg.width:this.battle_bg.x<0&&(this.battle_bg2.x=this.battle_bg.x+this.battle_bg.width),(Math.sin(this.camera_angle.rad)>0&&this.battle_group.getChildIndex(this.group_allies)<this.battle_group.getChildIndex(this.group_enemies)||Math.sin(this.camera_angle.rad)<0&&this.battle_group.getChildIndex(this.group_allies)>this.battle_group.getChildIndex(this.group_enemies))&&this.battle_group.swapChildren(this.group_enemies,this.group_allies),(Math.cos(this.camera_angle.rad)<0&&this.first_ally_char.z>this.last_ally_char.z||Math.cos(this.camera_angle.rad)>0&&this.first_ally_char.z<this.last_ally_char.z)&&this.group_allies.reverse(),(Math.cos(this.camera_angle.rad)<0&&this.first_enemy_char.z<this.last_enemy_char.z||Math.cos(this.camera_angle.rad)>0&&this.first_enemy_char.z>this.last_enemy_char.z)&&this.group_enemies.reverse(),this.update_sprite_properties()}}update_sprite_properties(){for(let t=0;t<this.sprites.length;++t){const e=this.sprites[t],i=e.data.is_Ally?this.camera_angle.rad:this.camera_angle.rad+Math.PI,s=g.get_angle(i),n=g.ellipse_position(e,s,!0),a=g.ellipse_position(e,s,!1),_=e.data.is_Ally?this.shift_from_middle_ally:this.shift_from_middle_enemy,o=e.data.is_Ally?t:t-this.allies_count;e.x=n+(35*o-_+17)*Math.sin(i),e.y=a;const r=e.data.is_Ally?this.allies_info[o]:this.enemies_info[o],h=g.get_scale(r.scale,i);e.scale.setTo(h,h),Math.sin(i)>0&&!e.animations.currentAnim.name.endsWith("back")?e.animations.play(e.animations.currentAnim.name.replace("front","back")):Math.sin(i)<=0&&!e.animations.currentAnim.name.endsWith("front")&&e.animations.play(e.animations.currentAnim.name.replace("back","front")),Math.cos(i)>0&&e.scale.x<0?e.scale.setTo(e.scale.x,e.scale.y):Math.cos(i)<=0&&e.scale.x>0&&e.scale.setTo(-e.scale.x,e.scale.y)}}unset_stage(t,e){this.game.camera.fade(),this.game.camera.onFadeComplete.addOnce(()=>{t&&t(),this.battle_group.destroy(),this.upper_rect.height=this.lower_rect.height=n.GAME_HEIGHT>>1,this.upper_rect.y=0,this.lower_rect.y=n.GAME_HEIGHT>>1;this.game.camera.resetFX(),this.game.add.tween(this.upper_rect).to({height:0},300,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{e&&e(),this.crop_group.destroy()}),this.game.add.tween(this.lower_rect).to({height:0,y:n.GAME_HEIGHT},300,Phaser.Easing.Linear.None,!0)},this)}static ellipse(t,e,i){return(e=void 0===e?d:e)*(i=void 0===i?u:i)/Math.sqrt(Math.pow(i*Math.cos(t),2)+Math.pow(e*Math.sin(t),2))}static ellipse_position(t,e,i){if(i){const i=t.ellipses_semi_major;return h+g.ellipse(e,i,u)*Math.cos(e)}{const i=t.ellipses_semi_minor;return c+g.ellipse(e,d,i)*Math.sin(e)}}static get_angle(t){return t+Math.atan((u-d)*Math.tan(t)/(d+u*Math.pow(Math.tan(t),2)))}static get_scale(t,e){return(Math.sin(e)/7+.8334)*t}}e.BattleStage=g},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CharsStatusWindow=void 0;const s=i(2),n=i(0),a=i(1),_=i(7),o=i(12),r=i(3),h=a.BLUE_FONT_COLOR,c=a.RED_FONT_COLOR,l=[0,16],d=[0,8],u=[21,37],p=[8,16];e.CharsStatusWindow=class{constructor(t,e,i=!1,_=!1){this.game=t,this.data=e,this.djinni_info=i,this.compact=_,this.name_y=8,this.compact&&(this.name_y=0),this.status_win_height=35,this.compact&&(this.status_win_height=24);const o=r.clamp(this.data.info.party_data.members.length,4);if(this.status_win_width=48*o+4,this.status_win_x=a.GAME_WIDTH-this.status_win_width-a.INSIDE_BORDER_WIDTH-a.OUTSIDE_BORDER_WIDTH,this.status_window=new s.Window(this.game,this.status_win_x,0,this.status_win_width,this.status_win_height,!1),this.info_sprites={},this.set_chars_info(),this.djinni_info){this.standby_count_text={},this.stars_group=this.game.add.group();for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t],i=t%2,s=+(t>1);this.stars_group.create(l[i],d[s],e+"_star"),this.standby_count_text[e]=this.status_window.set_text_in_position("",u[i],p[s],!0)}this.status_window.add_sprite_to_group(this.stars_group)}}update_position(t=!1){this.status_window.update(t)}set_chars_info(){const t=this.data.info.party_data.members.slice(0,4);for(let e=0;e<t.length;++e){let i={group:null,name:null,hp_bar_graphics:null,hp_bar_damage_graphics:null,hp_header:null,hp:null,pp_bar_graphics:null,pp_bar_damage_graphics:null,pp_header:null,pp:null};const s=t[e],n=48*e+8,_=s.key_name+"_status";i.group=this.status_window.define_internal_group(_),i.name=this.status_window.set_text_in_position(s.name,n,this.name_y,!1,!1,this.status_window.font_color,this.compact,_);let o=this.name_y+a.FONT_SIZE,r=o+a.FONT_SIZE-3;i.hp_bar_graphics=this.game.add.graphics(n,r),i.hp_bar_graphics.beginFill(h,1),i.hp_bar_graphics.drawRect(0,0,40,3),i.hp_bar_graphics.endFill(),i.group.add(i.hp_bar_graphics),i.hp_bar_damage_graphics=this.game.add.graphics(0,0),i.hp_bar_damage_graphics.data.default_y=r,i.group.add(i.hp_bar_damage_graphics);const c=n+26;i.hp_header=this.status_window.set_text_in_position("HP",n,o,!1,!1,this.status_window.font_color,!1,_),i.hp=this.status_window.set_text_in_position(s.current_hp.toString(),c,o,!0,!1,this.status_window.font_color,!1,_),o=this.name_y+2*a.FONT_SIZE,r=o+a.FONT_SIZE-3,i.pp_bar_graphics=this.game.add.graphics(n,r),i.pp_bar_graphics.beginFill(h,1),i.pp_bar_graphics.drawRect(0,0,40,3),i.pp_bar_graphics.endFill(),i.group.add(i.pp_bar_graphics),i.pp_bar_damage_graphics=this.game.add.graphics(0,0),i.pp_bar_damage_graphics.data.default_y=r,i.group.add(i.pp_bar_damage_graphics),i.pp_header=this.status_window.set_text_in_position("PP",n,o,!1,!1,this.status_window.font_color,!1,_),i.pp=this.status_window.set_text_in_position(s.current_pp.toString(),c,o,!0,!1,this.status_window.font_color,!1,_),this.info_sprites[s.key_name]=i}}update_chars_info(){let t=!1;if(this.djinni_info)if(this.standby_djinni=_.Djinn.get_standby_djinni(this.data.info.djinni_list,o.MainChar.get_active_players(this.data.info.party_data,4)),t=r.some(this.standby_djinni,Boolean),t){this.stars_group.alpha=1,this.stars_group.x=9,this.stars_group.y=9;for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t],i=e in this.standby_djinni?this.standby_djinni[e].toString():"0";this.status_window.update_text(i,this.standby_count_text[e],void 0,this.name_y+p[+(t>1)])}}else{for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t];this.status_window.update_text("",this.standby_count_text[e])}this.stars_group.alpha=0}const e=r.clamp(this.data.info.party_data.members.length,4);this.status_win_width=48*e+4+(t?40:0),this.status_win_x=a.GAME_WIDTH-this.status_win_width-a.INSIDE_BORDER_WIDTH-a.OUTSIDE_BORDER_WIDTH,this.status_window.update_size({width:this.status_win_width}),this.status_window.update_position({x:this.status_win_x}),this.status_window.clear_separators();let i=[];for(let s=0;s<e;++s){let e=this.data.info.party_data.members[s];i.push(e.key_name);let n=this.info_sprites[e.key_name];n.group.visible=!0;const a=48*s+8+(t?40:0),_=a+26;this.status_window.update_text(e.name,n.name,a),this.status_window.update_text(e.current_hp,n.hp,_),this.status_window.update_text(e.current_pp,n.pp,_);let o=n.hp.text.textWidth;n.hp.text.x+=o/2,n.hp.shadow.x+=o/2;let r=n.pp.text.textWidth;n.pp.text.x+=r/2,n.pp.shadow.x+=r/2,this.status_window.update_text_position({x:a},n.hp_header),this.status_window.update_text_position({x:a},n.pp_header),n.hp_bar_graphics.x=a,n.pp_bar_graphics.x=a;const h=40*(1-e.current_hp/e.max_hp)|0,l=a+40-h;n.hp_bar_damage_graphics.clear(),n.hp_bar_damage_graphics.beginFill(c,1),n.hp_bar_damage_graphics.drawRect(l,n.hp_bar_damage_graphics.data.default_y,h,3),n.hp_bar_damage_graphics.endFill();const d=40*(1-e.current_pp/e.max_pp)|0,u=a+40-d;n.pp_bar_damage_graphics.clear(),n.pp_bar_damage_graphics.beginFill(c,1),n.pp_bar_damage_graphics.drawRect(u,n.pp_bar_damage_graphics.data.default_y,d,3),n.pp_bar_damage_graphics.endFill(),(0!==s||t)&&this.status_window.draw_separator(a-5,3,a-5,this.status_win_height-1)}for(let t in this.info_sprites){if(i.includes(t))continue;this.info_sprites[t].group.visible=!1}}show(){this.status_window.show()}close(t){this.status_window.close(t)}destroy(){this.status_window.destroy(!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.choose_right_class=e.Classes=void 0;const s=i(0),n=i(3);e.Classes=class{constructor(t,e,i,s,n,a,_,o,r,h,c,l,d,u,p){this.key_name=t,this.name=e,this.required_venus_level=i,this.required_mercury_level=s,this.required_mars_level=n,this.required_jupiter_level=a,this.hp_boost=_,this.pp_boost=o,this.atk_boost=r,this.def_boost=h,this.agi_boost=c,this.luk_boost=l,this.ability_level_pairs=d,this.class_type=u,this.vulnerabilities=void 0===p?[]:p}},e.choose_right_class=function(t,e,i,a,_,o,r){let h,c=[...i!==s.elements.VENUS?[{element:s.elements.VENUS,level:a}]:[],...i!==s.elements.MERCURY?[{element:s.elements.MERCURY,level:_}]:[],...i!==s.elements.MARS?[{element:s.elements.MARS,level:o}]:[],...i!==s.elements.JUPITER?[{element:s.elements.JUPITER,level:r}]:[]];h=c.every(t=>0===t.level)?i:n.maxBy(c,t=>t.level).element;const l=e[i][h];let d=Object.values(t).filter(t=>t.class_type===l);return d=d.filter(t=>t.required_venus_level<=a&&t.required_mercury_level<=_&&t.required_mars_level<=o&&t.required_jupiter_level<=r),n.sortBy(d,[t=>t.required_venus_level+t.required_mercury_level+t.required_mars_level+t.required_jupiter_level]).reverse()[0]}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.InteractableObjects=e.interactable_object_event_types=e.interactable_object_interaction_types=void 0;const s=i(6),n=i(1),a=i(0),_=i(16),o=i(29);var r;!function(t){t.ONCE="once",t.INFINITE="infinite"}(e.interactable_object_interaction_types||(e.interactable_object_interaction_types={})),function(t){t.JUMP="jump",t.JUMP_AROUND="jump_around",t.CLIMB="climb"}(r=e.interactable_object_event_types||(e.interactable_object_event_types={}));e.InteractableObjects=class{constructor(t,e,i,s,n,a,_,o,r,h,c){this.game=t,this.data=e,this.key_name=i,this.x=s,this.y=n,this.sprite_info=null,this.allowed_tiles=a,this.base_collision_layer=_,this.collider_layer_shift=o,this.intermediate_collider_layer_shift=void 0===c?0:c,this.not_allowed_tiles=void 0===r?[]:r,this.object_drop_tiles=void 0===h?[]:h,this.events=new Set,this.events_info={},this.current_x=s,this.current_y=n,this.custom_data={collision_tiles_bodies:[]},this.collision_change_functions=[],this.color_filter=this.game.add.filter("ColorFilters")}set_sprite(t){this.sprite=t}position_allowed(t,e){if(this.data.map.interactable_objects.filter(i=>i.current_x===t&&i.current_y===e).length)return!1;for(let i=0;i<this.allowed_tiles.length;++i){const s=this.allowed_tiles[i];if(s.x===t&&s.y===e&&s.collision_layer===this.data.map.collision_layer)return!0}return!1}get_current_position(t){return{x:this.sprite.x/t.sprite.tileWidth|0,y:this.sprite.y/t.sprite.tileHeight|0}}change_collider_layer(t,e){this.sprite.body.removeCollisionGroup(t.collision.interactable_objs_collision_groups[this.base_collision_layer]),this.sprite.body.setCollisionGroup(t.collision.interactable_objs_collision_groups[e]),this.base_collision_layer=e,this.sprite.base_collision_layer=e,this.collision_change_functions.forEach(t=>{t()})}insert_event(t){this.events.add(t)}get_events(){return[...this.events].map(t=>s.TileEvent.get_event(t))}remove_event(t){this.events.delete(t)}creating_blocking_stair_block(t){const e=this.base_collision_layer+this.custom_data.block_stair_collider_layer_shift,i=(this.current_x+.5)*this.data.map.sprite.tileWidth,s=(this.current_y+1.5)*this.data.map.sprite.tileHeight-4;let a=this.game.physics.p2.createBody(i,s,0,!0);a.clearShapes();const _=2*this.data.dbs.interactable_objects_db[this.key_name].body_radius;a.setRectangle(_,_,0,0),e in this.data.collision.interactable_objs_collision_groups||(this.data.collision.interactable_objs_collision_groups[e]=this.game.physics.p2.createCollisionGroup()),a.setCollisionGroup(this.data.collision.interactable_objs_collision_groups[e]),a.damping=n.MAP_DAMPING,a.angularDamping=n.MAP_DAMPING,a.setZeroRotation(),a.fixedRotation=!0,a.dynamic=!1,a.static=!0,a.debug=this.data.hero.sprite.body.debug,a.collides(t.hero_collision_group),this.custom_data.blocking_stair_block=a}initial_config(t){const e=this.data.npc_group.create(0,0,this.key_name+"_"+this.key_name);this.set_sprite(e),this.sprite.is_interactable_object=!0,this.sprite.roundPx=!0,this.sprite.base_collision_layer=this.base_collision_layer,this.sprite.interactable_object=this,void 0!==this.data.dbs.interactable_objects_db[this.key_name].send_to_back&&(this.sprite.send_to_back=this.data.dbs.interactable_objects_db[this.key_name].send_to_back),void 0!==this.data.dbs.interactable_objects_db[this.key_name].anchor_x&&(this.sprite.anchor.x=this.data.dbs.interactable_objects_db[this.key_name].anchor_x),this.sprite.anchor.y=this.data.dbs.interactable_objects_db[this.key_name].anchor_y;const i=void 0!==this.data.dbs.interactable_objects_db[this.key_name].shift_x?this.data.dbs.interactable_objects_db[this.key_name].shift_x:0,s=void 0!==this.data.dbs.interactable_objects_db[this.key_name].shift_y?this.data.dbs.interactable_objects_db[this.key_name].shift_y:0;this.sprite.centerX=(this.x+1)*t.tileWidth+i;const n=this.data.dbs.interactable_objects_db[this.key_name].anchor_y*t.tileWidth*.5;this.sprite.centerY=this.y*t.tileWidth-n+s,this.sprite_info.setAnimation(this.sprite,this.key_name);const a=this.data.dbs.interactable_objects_db[this.key_name].initial_animation;this.sprite.animations.play(this.key_name+"_"+a)}initialize_related_events(t,e){const i=this.get_current_position(e);let s=i.x,n=i.y;for(let e=0;e<this.data.dbs.interactable_objects_db[this.key_name].events.length;++e){const i=this.data.dbs.interactable_objects_db[this.key_name].events[e];s+=void 0!==i.x_shift?i.x_shift:0,n+=void 0!==i.y_shift?i.y_shift:0;let a=void 0!==i.collider_layer_shift?i.collider_layer_shift:0;a=void 0!==this.collider_layer_shift?this.collider_layer_shift:a,this.collider_layer_shift=a;const _=void 0===i.active||i.active,o=this.base_collision_layer+a;switch(i.type){case r.JUMP:this.set_jump_type_event(i,s,n,_,o,t);break;case r.JUMP_AROUND:this.set_jump_around_event(i,s,n,_,o,t);break;case r.CLIMB:this.set_stair_event(i,s,n,_,o,t)}}}not_allowed_tile_test(t,e){for(let i=0;i<this.not_allowed_tiles.length;++i){const s=this.not_allowed_tiles[i];if(s.x===t&&s.y===e)return!0}return!1}set_jump_type_event(t,e,i,n,o,r){if(this.not_allowed_tile_test(e,i))return;const h=s.TileEvent.get_location_key(e,i);h in r||(r[h]=[]);const c=new _.JumpEvent(this.game,this.data,e,i,[a.directions.up,a.directions.down,a.directions.right,a.directions.left],[o],t.dynamic,n,void 0===t.is_set||t.is_set);r[h].push(c),this.insert_event(c.id),this.events_info[t.type]=t,this.collision_change_functions.push(()=>{c.activation_collision_layers=[this.base_collision_layer+this.collider_layer_shift]})}set_jump_around_event(t,e,i,n,o,r){let h=void 0===t.is_set||t.is_set;a.get_surroundings(e,i).forEach((e,i)=>{if(this.not_allowed_tile_test(e.x,e.y))return;const c=s.TileEvent.get_location_key(e.x,e.y);if(c in r)for(let t=0;t<r[c].length;++t){const e=r[c][t];e.type===s.event_types.JUMP&&e.is_set&&e.activation_collision_layers.includes(o)&&(h=!1)}else r[c]=[];const l=new _.JumpEvent(this.game,this.data,e.x,e.y,[a.directions.right,a.directions.left,a.directions.down,a.directions.up][i],[this.base_collision_layer],t.dynamic,n,h);r[c].push(l),this.insert_event(l.id),this.collision_change_functions.push(()=>{l.activation_collision_layers=[this.base_collision_layer]})}),this.events_info[t.type]=t}set_stair_event(t,e,i,n,_,r){[{x:e,y:i+1,activation_directions:[a.directions.up],activation_collision_layers:[this.base_collision_layer],change_to_collision_layer:this.base_collision_layer+this.intermediate_collider_layer_shift,climbing_only:!1,collision_change_function:t=>{t.activation_collision_layers=[this.base_collision_layer],t.change_to_collision_layer=this.base_collision_layer+this.intermediate_collider_layer_shift}},{x:e,y:i,activation_directions:[a.directions.down],activation_collision_layers:[this.base_collision_layer+this.intermediate_collider_layer_shift],change_to_collision_layer:this.base_collision_layer,climbing_only:!0,collision_change_function:t=>{t.activation_collision_layers=[this.base_collision_layer+this.intermediate_collider_layer_shift],t.change_to_collision_layer=this.base_collision_layer}},{x:e,y:i+t.last_y_shift+1,activation_directions:[a.directions.up],activation_collision_layers:[this.base_collision_layer+this.intermediate_collider_layer_shift],change_to_collision_layer:_,climbing_only:!0,collision_change_function:t=>{t.activation_collision_layers=[this.base_collision_layer+this.intermediate_collider_layer_shift],t.change_to_collision_layer=this.base_collision_layer+this.collider_layer_shift}},{x:e,y:i+t.last_y_shift,activation_directions:[a.directions.down],activation_collision_layers:[_],change_to_collision_layer:this.base_collision_layer+this.intermediate_collider_layer_shift,climbing_only:!1,collision_change_function:t=>{t.activation_collision_layers=[this.base_collision_layer+this.collider_layer_shift],t.change_to_collision_layer=this.base_collision_layer+this.intermediate_collider_layer_shift}}].forEach(e=>{const i=s.TileEvent.get_location_key(e.x,e.y);i in r||(r[i]=[]);const a=new o.ClimbEvent(this.game,this.data,e.x,e.y,e.activation_directions,e.activation_collision_layers,t.dynamic,n,e.change_to_collision_layer,t.is_set,this,e.climbing_only);r[i].push(a),this.insert_event(a.id),this.collision_change_functions.push(e.collision_change_function.bind(null,a))}),this.events_info[t.type]=t}config_body(t){if(0===this.data.dbs.interactable_objects_db[this.key_name].body_radius)return;const e=t.interactable_objs_collision_groups;this.game.physics.p2.enable(this.sprite,!1),this.sprite.anchor.y=this.data.dbs.interactable_objects_db[this.key_name].anchor_y,this.sprite.body.clearShapes();const i=this.data.dbs.interactable_objects_db[this.key_name].body_radius<<1,s=a.mount_collision_polygon(i,-(i>>1),this.data.dbs.interactable_objects_db[this.key_name].collision_body_bevel);this.sprite.body.addPolygon({optimalDecomp:!1,skipSimpleCheck:!0,removeCollinearPoints:!1},s),this.sprite.body.setCollisionGroup(e[this.base_collision_layer]),this.sprite.body.damping=1,this.sprite.body.angularDamping=1,this.sprite.body.setZeroRotation(),this.sprite.body.fixedRotation=!0,this.sprite.body.dynamic=!1,this.sprite.body.static=!0,void 0!==this.custom_data.block_stair_collider_layer_shift&&this.creating_blocking_stair_block(t)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ClimbEvent=void 0;const s=i(0),n=i(16),a=i(6),_=i(1);class o extends a.TileEvent{constructor(t,e,i,s,n,_,o,r,h,c,l,d){super(t,e,a.event_types.CLIMB,i,s,n,_,o,r,l),this.change_to_collision_layer=h,this.is_set=void 0===c||c,this.climbing_only=void 0!==d&&d}fire(t){this.data.hero.stop_by_colliding&&this.check_position()&&this.data.hero_movement_allowed()&&(this.data.hero.climbing||this.climbing_only?(this.data.hero.climbing&&!this.climbing_only||this.data.hero.climbing&&this.climbing_only)&&this.finish_climbing(t):this.start_climbing(t))}start_climbing(t){if(this.game.physics.p2.pause(),null!==this.change_to_collision_layer&&this.data.collision.change_map_body(this.data,this.change_to_collision_layer),this.data.tile_event_manager.on_event=!0,t===s.directions.down){this.data.hero.play(s.base_actions.CLIMB,"turn").onComplete.addOnce(()=>{this.data.hero.shadow.visible=!1;const t=this.data.map.sprite.tileWidth*(this.x+.5),e=this.data.hero.sprite.y+25;this.game.add.tween(this.data.hero.sprite.body).to({x:t,y:e},300,Phaser.Easing.Linear.None,!0);this.data.hero.play(s.base_actions.CLIMB,"start").onComplete.addOnce(()=>{this.data.hero.play(s.base_actions.CLIMB,s.base_actions.IDLE),this.data.tile_event_manager.on_event=!1,this.data.hero.climbing=!0,this.data.hero.current_action=s.base_actions.CLIMB,this.dynamic&&this.create_climb_collision_bodies(),this.game.physics.p2.resume()})})}else if(t===s.directions.up){this.data.hero.play(s.base_actions.CLIMB,s.base_actions.IDLE);const t=Phaser.Timer.QUARTER/3,e=this.data.map.sprite.tileWidth*(this.x+.5),i=this.data.hero.sprite.y-15;this.dynamic&&this.create_climb_collision_bodies(),this.game.add.tween(this.data.hero.sprite.body).to({x:e,y:i},t,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.game.physics.p2.resume(),this.data.tile_event_manager.on_event=!1,this.data.hero.climbing=!0}),this.data.hero.shadow.visible=!1,this.data.hero.current_action=s.base_actions.CLIMB,this.data.hero.idle_climbing=!0}}finish_climbing(t){if(this.game.physics.p2.pause(),t===s.directions.up){for(let t=0;t<this.data.map.interactable_objects.length;++t){const e=this.data.map.interactable_objects[t];if(e.current_x===this.x&&e.current_y===this.y-1&&this.change_to_collision_layer===e.base_collision_layer)return void this.game.physics.p2.resume()}null!==this.change_to_collision_layer&&this.data.collision.change_map_body(this.data,this.change_to_collision_layer),this.data.tile_event_manager.on_event=!0;const t=this.data.hero.play(s.base_actions.CLIMB,"end");this.data.hero.shadow.visible=!1,this.game.add.tween(this.data.hero.sprite.body).to({y:this.data.hero.sprite.y-15},170,Phaser.Easing.Linear.None,!0);const e=this.data.hero.sprite.y-15;this.game.time.events.add(170,()=>{this.data.hero.shadow.y=e,this.data.hero.shadow.visible=!0}),t.onComplete.addOnce(()=>{this.game.time.events.add(150,()=>{this.data.hero.shadow.y=this.data.hero.sprite.y,this.data.hero.play(s.base_actions.IDLE,s.reverse_directions[s.directions.up]),this.dynamic&&this.remove_climb_collision_bodies(!1),this.game.time.events.add(250,()=>{this.data.tile_event_manager.on_event=!1,this.data.hero.climbing=!1,this.data.hero.current_action=s.base_actions.IDLE,this.data.hero.set_direction(s.directions.up),this.game.physics.p2.resume()},this)},this)})}else if(t===s.directions.down){null!==this.change_to_collision_layer&&this.data.collision.change_map_body(this.data,this.change_to_collision_layer),this.data.tile_event_manager.on_event=!0,this.data.hero.play(s.base_actions.IDLE,s.reverse_directions[s.directions.up]);const t=Phaser.Timer.QUARTER>>1;this.game.add.tween(this.data.hero.sprite.body).to({y:[this.data.hero.sprite.y-4,this.data.hero.sprite.y+15]},t,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.game.time.events.add(50,()=>{this.data.tile_event_manager.on_event=!1,this.data.hero.climbing=!1,this.game.physics.p2.resume()},this)}),this.dynamic&&this.remove_climb_collision_bodies(),this.data.hero.shadow.y=this.data.hero.sprite.y+15,this.data.hero.shadow.visible=!0,this.data.hero.current_action=s.base_actions.IDLE,this.data.hero.set_direction(s.directions.up)}}create_climb_collision_bodies(){this.origin_interactable_object.sprite.send_to_back=!0;const t=this.origin_interactable_object.events_info.climb.collision_tiles.map(t=>({x:this.origin_interactable_object.current_x+t.x,y:this.origin_interactable_object.current_y+t.y}));n.JumpEvent.unset_set_jump_collision(this.data),this.data.hero.sprite.body.removeCollisionGroup(this.data.collision.map_collision_group,!0),this.data.map.collision_sprite.body.removeCollisionGroup(this.data.collision.hero_collision_group,!0);for(let t in this.data.collision.interactable_objs_collision_groups)this.data.hero.sprite.body.removeCollisionGroup(this.data.collision.interactable_objs_collision_groups[t],!0);for(let e=0;e<t.length;++e){const i=(t[e].x+.5)*this.data.map.sprite.tileWidth,s=(t[e].y+.5)*this.data.map.sprite.tileHeight;let n=this.game.physics.p2.createBody(i,s,0,!0);n.clearShapes(),n.setRectangle(this.data.map.sprite.tileWidth,this.data.map.sprite.tileHeight,0,0),n.setCollisionGroup(this.data.collision.dynamic_events_collision_group),n.damping=_.MAP_DAMPING,n.angularDamping=_.MAP_DAMPING,n.setZeroRotation(),n.fixedRotation=!0,n.dynamic=!1,n.static=!0,n.debug=this.data.hero.sprite.body.debug,n.collides(this.data.collision.hero_collision_group),this.origin_interactable_object.custom_data.collision_tiles_bodies.push(n)}}remove_climb_collision_bodies(t=!0){this.origin_interactable_object.sprite.send_to_back=!1,n.JumpEvent.set_jump_collision(this.game,this.data),t&&(this.data.hero.sprite.body.collides(this.data.collision.map_collision_group),this.data.map.collision_sprite.body.collides(this.data.collision.hero_collision_group));for(let t in this.data.collision.interactable_objs_collision_groups)this.data.hero.sprite.body.removeCollisionGroup(this.data.collision.interactable_objs_collision_groups[t],!0);this.data.map.collision_layer in this.data.collision.interactable_objs_collision_groups&&this.data.hero.sprite.body.collides(this.data.collision.interactable_objs_collision_groups[this.data.map.collision_layer]);let e=this.origin_interactable_object.custom_data.collision_tiles_bodies;for(let t=0;t<e.length;++t)e[t].destroy();e=[]}}e.ClimbEvent=o},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BasicInfoWindow=void 0;const s=i(2);e.BasicInfoWindow=class{constructor(t){this.game=t,this.char=null,this.window_open=!1,this.x=0,this.y=40,this.base_window=new s.Window(this.game,this.x,this.y,100,92),this.avatar_group=t.add.group(),this.avatar_group.alpha=0,this.x_avatar=this.x+8,this.y_avatar=this.y+8,this.avatar=null,this.base_window.set_text_in_position("Lv",48,24),this.base_window.set_text_in_position("HP",8,48),this.base_window.set_text_in_position("PP",8,56),this.base_window.set_text_in_position("/",56,49),this.base_window.set_text_in_position("/",56,56),this.base_window.set_text_in_position("Exp",8,73),this.name_text=this.base_window.set_text_in_position("0",40,8),this.lv_text=this.base_window.set_text_in_position("0",80,24),this.class_text=this.base_window.set_text_in_position("0",8,40),this.hp_text=this.base_window.set_text_in_position("0",51,48,!0),this.pp_text=this.base_window.set_text_in_position("0",51,56,!0),this.max_hp_text=this.base_window.set_text_in_position("0",94,48,!0),this.max_pp_text=this.base_window.set_text_in_position("0",94,56,!0),this.exp_text=this.base_window.set_text_in_position("0",94,80,!0)}update_position(){this.avatar_group.x=this.game.camera.x+this.x_avatar,this.avatar_group.y=this.game.camera.y+this.y_avatar}set_char(t){void 0!==t&&(this.char=t),this.base_window.update_text(this.char.name,this.name_text),this.base_window.update_text(this.char.level.toString(),this.lv_text),this.base_window.update_text(this.char.class.name,this.class_text),this.base_window.update_text(this.char.current_hp.toString(),this.hp_text),this.base_window.update_text(this.char.current_pp.toString(),this.pp_text),this.base_window.update_text(this.char.max_hp.toString(),this.max_hp_text),this.base_window.update_text(this.char.max_pp.toString(),this.max_pp_text),this.base_window.update_text(this.char.current_exp.toString(),this.exp_text),this.avatar&&this.avatar.destroy(),this.avatar=this.avatar_group.create(0,0,"avatars",this.char.key_name)}open(t,e){this.update_position(),this.avatar_group.alpha=1,this.set_char(t),this.base_window.show(()=>{this.window_open=!0,void 0!==e&&e()},!1)}close(t){this.avatar_group.alpha=0,this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ItemPsynergyChooseWindow=void 0;const s=i(2),n=i(1),a=i(4),_=n.FONT_SIZE;e.ItemPsynergyChooseWindow=class{constructor(t,e,i,a){this.game=t,this.data=e,this.is_psynergy_window=i,this.on_change=void 0===a?()=>{}:a,this.element_list=this.is_psynergy_window?this.data.info.abilities_list:this.data.info.items_list,this.element_sprite_key=this.is_psynergy_window?"abilities_icons":"items_icons",this.window=new s.Window(this.game,104,24,132,108),this.group=t.add.group(),this.group.alpha=0,this.window_open=!1,this.window_activated=!1,this.close_callback=void 0,this.char=null,this.char_select_controls_sprites=[this.window.create_at_group(9,97,"shift_keyboard",0),this.window.create_at_group(8,96,"shift_keyboard"),this.window.create_at_group(32,97,"tab_keyboard",0),this.window.create_at_group(31,96,"tab_keyboard")];const o=this.window.set_text_in_position(": Change Char",49,96);this.char_select_controls_sprites.push(o.text,o.shadow),this.page_index=0,this.page_number=0,this.text_sprites_in_window=[],this.icon_sprites_in_window=[],this.selected_element_index=0,this.elements=[],this.selected_element_tween=null,this.highlight_bar=this.game.add.graphics(0,0),this.highlight_bar.blendMode=PIXI.blendModes.SCREEN,this.window.add_sprite_to_group(this.highlight_bar),this.highlight_bar.beginFill(this.window.color,1),this.highlight_bar.drawRect(8+(n.ICON_WIDTH>>1),0,114,_),this.highlight_bar.endFill(),this.is_psynergy_window&&this.window.set_text_in_position("PP",102,8)}next_page(){1!==this.page_number&&(this.page_index<this.page_number-1?this.page_change(this.page_index+1):this.page_change(0))}previous_page(){1!==this.page_number&&(this.page_index>0?this.page_change(this.page_index-1):this.page_change(this.page_number-1))}next_element(){1!==this.elements.length&&(this.selected_element_index<this.elements.length-1?this.element_change(this.selected_element_index+1):this.element_change(0))}previous_element(){1!==this.elements.length&&(this.selected_element_index>0?this.element_change(this.selected_element_index-1):this.element_change(this.elements.length-1))}get_element_key_name(t){return this.is_psynergy_window?this.elements[t]:this.elements[t].key_name}set_page_number(){let t;t=this.is_psynergy_window?this.char.abilities.filter(t=>t in this.element_list&&(this.element_list[t].is_field_psynergy||this.element_list[t].effects_outside_battle)).length:this.char.items.filter(t=>t.key_name in this.element_list).length,this.page_number=1+((t-1)/5|0),this.page_index>=this.page_number&&(this.page_index=this.page_number-1),this.window.page_indicator.initialize(this.page_number,this.page_index)}update_position(){this.group.x=this.game.camera.x+104,this.group.y=this.game.camera.y+24}set_elements(){this.clear_sprites(),this.item_objs=[],this.is_psynergy_window?this.elements=this.char.abilities.filter(t=>t in this.element_list&&(this.element_list[t].is_field_psynergy||this.element_list[t].effects_outside_battle)).slice(5*this.page_index,5*(this.page_index+1)):(this.elements=this.char.items.filter(t=>t.key_name in this.element_list&&(this.item_objs.push(t),!0)).slice(5*this.page_index,5*(this.page_index+1)),this.item_objs=this.item_objs.slice(5*this.page_index,5*(this.page_index+1))),this.selected_element_index>=this.elements.length&&(this.selected_element_index=this.elements.length-1,this.move_cursor(98,42+16*this.selected_element_index));for(let t=0;t<this.elements.length;++t){const e=this.get_element_key_name(t),i=8,s=12+t*(n.ICON_HEIGHT+1),a=i+(n.ICON_WIDTH>>1),_=s+(n.ICON_HEIGHT>>1),o=8+n.ICON_WIDTH+(this.is_psynergy_window?2:4);if(this.text_sprites_in_window.push(this.window.set_text_in_position(this.element_list[e].name,o,s+4)),this.is_psynergy_window)this.icon_sprites_in_window.push(this.window.create_at_group(a,_,this.element_sprite_key,void 0,e)),this.icon_sprites_in_window[t].anchor.setTo(.5,.5);else{let i=this.game.add.group();if(i.create(0,0,this.element_sprite_key,e).anchor.setTo(.5,.5),this.item_objs[t].equipped&&i.create(0,0,"equipped"),this.item_objs[t].quantity>1){let e=this.game.add.bitmapText(0,0,"gs-item-bmp-font",this.item_objs[t].quantity.toString());i.add(e)}this.window.add_sprite_to_group(i),i.x=a,i.y=_,this.icon_sprites_in_window.push(i)}if(this.is_psynergy_window){const t=125;this.text_sprites_in_window.push(this.window.set_text_in_position(this.element_list[e].pp_cost,t,s+4,!0))}}}set_highlight_bar(){this.highlight_bar.alpha=1,this.highlight_bar.y=12+this.selected_element_index*(n.ICON_HEIGHT+1)+4}unset_highlight_bar(){this.highlight_bar.alpha=0}set_element_tween(t){this.selected_element_tween=this.game.add.tween(this.icon_sprites_in_window[t].scale).to({x:1.6,y:1.6},Phaser.Timer.QUARTER,Phaser.Easing.Linear.None,!0,0,-1,!0)}unset_element_tween(t){this.icon_sprites_in_window[t]&&this.icon_sprites_in_window[t].scale.setTo(1,1),this.selected_element_tween&&(this.selected_element_tween.stop(),this.selected_element_tween=null)}element_change(t){this.unset_element_tween(this.selected_element_index),this.selected_element_index=t,this.set_element_tween(this.selected_element_index),this.set_highlight_bar(),this.on_change(this.element_list[this.get_element_key_name(t)],this.is_psynergy_window?void 0:this.item_objs[t]),this.move_cursor(98,42+16*this.selected_element_index)}page_change(t){this.page_index=t,this.set_elements(),this.set_element_tween(this.selected_element_index),this.set_highlight_bar(),this.on_change(this.element_list[this.get_element_key_name(this.selected_element_index)],this.is_psynergy_window?void 0:this.item_objs[this.selected_element_index]),this.window.page_indicator.select_page(this.page_index)}clear_sprites(){for(let t=0;t<this.icon_sprites_in_window.length;++t)this.window.remove_from_group(this.icon_sprites_in_window[t]);this.icon_sprites_in_window=[];for(let t=0;t<this.text_sprites_in_window.length;++t)this.window.remove_text(this.text_sprites_in_window[t]);this.text_sprites_in_window=[]}grant_control(t,e,i,s){let n=[{key:this.data.gamepad.LEFT,on_down:this.previous_page.bind(this)},{key:this.data.gamepad.RIGHT,on_down:this.next_page.bind(this)},{key:this.data.gamepad.UP,on_down:this.previous_element.bind(this)},{key:this.data.gamepad.DOWN,on_down:this.next_element.bind(this)},{key:this.data.gamepad.A,on_down:e},{key:this.data.gamepad.B,on_down:t},{key:this.data.gamepad.L,on_down:s},{key:this.data.gamepad.R,on_down:i}];this.data.control_manager.set_control(n,{loop_configs:{vertical:!0,horizontal:!0,shoulder:!0,horizontal_time:300,shoulder_time:200}})}move_cursor(t,e,i){let s={type:a.CursorManager.CursorTweens.POINT,variant:a.PointVariants.NORMAL};this.data.cursor_manager.move_to({x:t,y:e},{animate:!1,tween_config:s},i)}hide(){this.window.group.alpha=0}show(){this.window.group.alpha=1}open(t,e,i,s){this.update_position(),this.char_index=t,this.char=this.data.info.party_data.members[t],this.page_index=s?s.page:0,this.set_page_number(),this.group.alpha=1,this.close_callback=e,this.window.show(i,!1),this.selected_element_index=s?s.index:0,this.set_elements(),this.set_element_tween(this.selected_element_index),this.set_highlight_bar(),this.on_change(this.element_list[this.get_element_key_name(this.selected_element_index)],this.is_psynergy_window?void 0:this.item_objs[this.selected_element_index]),this.move_cursor(98,42+16*this.selected_element_index),this.window_open=!0,this.window_activated=!0}close(){this.window.close(this.close_callback,!1),this.group.alpha=1,this.clear_sprites(),this.window.page_indicator.terminante(),this.data.cursor_manager.hide(),this.unset_element_tween(this.selected_element_index),this.window_open=!1,this.window_activated=!1}activate(){this.set_page_number(),this.set_elements(),this.element_change(this.selected_element_index),this.window.page_indicator.initialize(this.page_number,this.page_index),this.set_element_tween(this.selected_element_index),this.set_highlight_bar(),this.window_activated=!0,this.char_select_controls_sprites.forEach(t=>{t.alpha=1})}deactivate(){this.clear_sprites(),this.window.page_indicator.terminante(),this.unset_element_tween(this.selected_element_index),this.unset_highlight_bar(),this.window_activated=!1,this.char_select_controls_sprites.forEach(t=>{t.alpha=0})}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ItemQuantityManagerWindow=void 0;const s=i(2),n=i(1),a=i(33),_=i(4),o=16+n.FONT_SIZE,r=o+n.FONT_SIZE;e.ItemQuantityManagerWindow=class{constructor(t,e){this.game=t,this.data=e,this.item_obj=null,this.item=null,this.char=null,this.window_open=!1,this.window_active=!1,this.x=104,this.y=0,this.base_window=new s.Window(this.game,this.x,this.y,132,52),this.group=this.game.add.group(),this.group.alpha=0,this.base_window.set_text_in_position("How many?",40,8),this.choosen_quantity=1,this.item_counter=new a.ItemCounter(this.game,this.group,56,40,this.on_change.bind(this)),this.remaining_with_char_count=this.base_window.set_text_in_position("",37,r,!0),this.new_amount_with_dest_char_count=this.base_window.set_text_in_position("",94,r,!0),this.to_remove_count=this.base_window.set_text_in_position("",53,40,!0)}grant_control(t,e){let i=[{key:this.data.gamepad.LEFT,on_down:this.decrease_amount.bind(this)},{key:this.data.gamepad.RIGHT,on_down:this.increase_amount.bind(this)},{key:this.data.gamepad.A,on_down:e},{key:this.data.gamepad.B,on_down:t}];this.data.control_manager.set_control(i,{loop_configs:{horizontal:!0,horizontal_time:100}})}increase_amount(){this.item_counter.advance_step(1)}decrease_amount(){this.item_counter.advance_step(-1)}on_change(t){this.choosen_quantity=t,this.base_window.update_text(this.choosen_quantity.toString(),this.to_remove_count),this.base_window.update_text((this.item_obj.quantity-this.choosen_quantity).toString(),this.remaining_with_char_count),this.destination_char&&this.base_window.update_text((this.dest_item_obj.quantity+this.choosen_quantity).toString(),this.new_amount_with_dest_char_count)}set_header(){this.icon_sprite=this.base_window.create_at_group(8,8,"items_icons",void 0,this.item.key_name),this.char_name=this.base_window.set_text_in_position(this.char.name,27,o),this.destination_char&&(this.dest_char_name=this.base_window.set_text_in_position(this.destination_char.name,84,o)),this.item_name=this.base_window.set_text_in_position(this.item.name,27,16),this.equip_sprite=null,this.item_obj.equipped&&(this.equip_sprite=this.base_window.create_at_group(15,16,"equipped")),this.item_count_sprite=null,this.item_obj.quantity>1&&(this.item_count_sprite=this.game.add.bitmapText(15,16,"gs-item-bmp-font",this.item_obj.quantity.toString()),this.base_window.add_sprite_to_group(this.item_count_sprite))}unset_header(){this.base_window.remove_from_group(this.icon_sprite),this.base_window.remove_text(this.char_name),this.destination_char&&(this.base_window.remove_text(this.dest_char_name),this.base_window.update_text("",this.new_amount_with_dest_char_count)),this.base_window.remove_text(this.item_name),this.equip_sprite&&this.base_window.remove_from_group(this.equip_sprite),this.item_count_sprite&&this.base_window.remove_from_group(this.item_count_sprite)}update_position(){this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y}open(t,e,i,s,n,a){this.data.cursor_manager.move_to({x:138,y:46},{animate:!1,tween_config:{type:_.CursorManager.CursorTweens.POINT,variant:_.PointVariants.NORMAL}},()=>{if(this.item_obj=t,this.item=e,this.char=i,this.destination_char=n,this.destination_char){const e=this.destination_char.items.filter(e=>e.key_name===t.key_name);this.dest_item_obj=e.length?e[0]:{key_name:null,index:null,quantity:0}}this.choosen_quantity=1,this.close_callback=s,this.update_position(),this.set_header(),this.item_counter.config(this.item_obj.quantity,this.choosen_quantity),this.group.alpha=1,this.on_change(this.choosen_quantity),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0,void 0!==a&&a()},!1)})}close(t){this.data.cursor_manager.hide(),this.unset_header(),this.item_counter.deactivate(),this.group.alpha=0,this.choosen_quantity=0,this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t(this.choosen_quantity)},!1)}activate(){this.set_header(),this.item_counter.activate(),this.on_change(this.choosen_quantity),this.window_active=!0}deactivate(){this.data.cursor_manager.hide(),this.unset_header(),this.item_counter.deactivate(),this.window_active=!1}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ItemCounter=void 0;e.ItemCounter=class{constructor(t,e,i,s,n){this.game=t,this.group=e,this.available_items_count=0,this.disabled_count=0,this.x=i,this.y=s,this.on_change=void 0===n?()=>{}:n,this.current_quantity=1,this.internal_group=this.game.add.group(),this.internal_group.x=this.x,this.internal_group.y=this.y,this.graphics=this.game.add.graphics(0,0),this.active_bar_graphics=this.game.add.graphics(0,0),this.inactive_bar_graphics=this.game.add.graphics(0,0),this.disabled_bar_graphics=this.game.add.graphics(0,0),this.internal_group.add(this.graphics),this.internal_group.add(this.active_bar_graphics),this.internal_group.add(this.inactive_bar_graphics),this.internal_group.add(this.disabled_bar_graphics),this.group.add(this.internal_group),this.active=!1,this.create_grid()}advance_step(t){this.current_quantity+=t,this.current_quantity>this.available_items_count?this.current_quantity=1:0===this.current_quantity&&(this.current_quantity=this.available_items_count),this.active_bar_graphics.clear();for(let t=this.disabled_count;t<this.disabled_count+this.current_quantity;++t){this.active_bar_graphics.lineStyle(1,16298096);const e=2*t+1;this.active_bar_graphics.moveTo(e,0),this.active_bar_graphics.lineTo(e,6)}this.on_change(this.current_quantity)}create_grid(){this.graphics.lineStyle(1,0),this.graphics.moveTo(0,0),this.graphics.lineTo(61,0),this.graphics.lineStyle(1,0),this.graphics.moveTo(60,0),this.graphics.lineTo(60,7),this.graphics.lineStyle(1,0),this.graphics.moveTo(60,7),this.graphics.lineTo(0,7),this.graphics.lineStyle(1,0),this.graphics.moveTo(0,7),this.graphics.lineTo(0,0);for(let t=0;t<29;++t){this.graphics.lineStyle(1,0);const e=2+2*t;this.graphics.moveTo(e,0),this.graphics.lineTo(e,6)}}create_inactive_bar(){for(let t=0;t<this.disabled_count;++t){this.disabled_bar_graphics.lineStyle(1,16711680);const e=2*t+1;this.disabled_bar_graphics.moveTo(e,0),this.disabled_bar_graphics.lineTo(e,6)}for(let t=30;t>this.available_items_count+this.disabled_count;--t){this.inactive_bar_graphics.lineStyle(1,10000536);const e=2*t-1;this.inactive_bar_graphics.moveTo(e,0),this.inactive_bar_graphics.lineTo(e,6)}}config(t,e,i=0){this.clear(),this.current_quantity=e,this.available_items_count=t,this.disabled_count=i,this.active=!0,this.create_inactive_bar(),this.advance_step(0)}clear(){this.active_bar_graphics.clear(),this.inactive_bar_graphics.clear(),this.disabled_bar_graphics.clear(),this.current_quantity=1,this.available_items_count=0,this.disabled_count=0}activate(){this.active=!0}deactivate(){this.active=!1}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MainStatusMenu=e.MainStatusStates=void 0;const s=i(12),n=i(5),a=i(15),_=i(2),o=i(3),r=i(105),h=i(106),c=i(107),l=i(108);var d;!function(t){t[t.CHARACTERS=0]="CHARACTERS",t[t.DJINN=1]="DJINN",t[t.STATISTICS=2]="STATISTICS",t[t.PSYNERGY=3]="PSYNERGY",t[t.ITEMS=4]="ITEMS"}(d=e.MainStatusStates||(e.MainStatusStates={}));class u{constructor(t,e){this.game=t,this.data=e,this.chars_menu=new a.CharsMenu(this.game,this.data,this.on_character_change.bind(this)),this.main_window=new _.Window(this.game,u.MAIN_WIN.X,u.MAIN_WIN.Y,u.MAIN_WIN.WIDTH,u.MAIN_WIN.HEIGHT),this.guide_window=new _.Window(this.game,u.GUIDE_WIN.X,u.GUIDE_WIN.Y,u.GUIDE_WIN.WIDTH,u.GUIDE_WIN.HEIGHT),this.desc_window=new _.Window(this.game,u.DESC_WIN.X,u.DESC_WIN.Y,u.DESC_WIN.WIDTH,u.DESC_WIN.HEIGHT),this.equip_window=new _.Window(this.game,u.EQUIP_WIN.X,u.EQUIP_WIN.Y,u.EQUIP_WIN.WIDTH,u.EQUIP_WIN.HEIGHT),this.desc_window.define_internal_group(u.DESC_GUIDE_KEY),this.main_window.define_internal_group(u.GROUP_KEY),this.guide_window.define_internal_group(u.GROUP_KEY),this.equip_window.define_internal_group(u.GROUP_KEY),this.components=[new r.MainStatusStatistics(this.game,this.data,this.main_window,this),new c.MainStatusPsynergy(this.game,this.data,this.main_window,this),new h.MainStatusDjinn(this.game,this.data,this.main_window,this),new l.MainStatusItems(this.game,this.data,this.main_window,this)],this.eq_highlight=this.game.add.graphics(0,0),this.eq_highlight.blendMode=PIXI.blendModes.SCREEN,this.equip_window.add_to_internal_group(u.GROUP_KEY,this.eq_highlight),this.current_state=null,this.current_component=null,this.selected_char=null,this.menu_open=!1,this.active_sprites=[]}get selected_character(){return this.selected_char}get battle_effects_array(){return this.battle_effects}get state(){return this.current_state}get is_open(){return this.menu_open}set_battle_effects(){const t=[],e=o.sortBy([...this.data.info.main_char_list[this.selected_char.key_name].permanent_status],t=>n.ordered_status_menu.indexOf(t));for(let i in e){const s={key:null,properties:null};s.key=e[i],t.length<u.MAX_EFFECTS_DISPLAYED&&t.push(s)}this.battle_effects=t}update_description(t,e){if(!this.desc_window.open)return;const i=void 0!==e?e:"",s=this.desc_window.get_internal_group(u.DESC_GUIDE_KEY),n=[d.STATISTICS,d.PSYNERGY,d.ITEMS];if(""===i&&n.includes(this.current_state)){const t=u.AdvanceState[this.current_state];let e=d[t].toLowerCase();e=e.charAt(0).toUpperCase()+e.slice(1);const i=": "+e;this.desc_window.update_text(i,this.desc_guide_a_text),s.visible||(s.visible=!0)}else s.visible&&(s.visible=!1);let a=u.FONTS.NORMAL;this.current_state===d.STATISTICS&&(a=u.FONTS.ITALIC),this.desc_line1.text.font=a,this.desc_line1.shadow.font=a,this.desc_line2.text.font=a,this.desc_line2.shadow.font=a,this.desc_window.update_text(t,this.desc_line1),this.desc_window.update_text(i,this.desc_line2)}toggle_guide_win(){this.l_button.shadow.visible=!this.l_button.shadow.visible,this.r_button.shadow.visible=!this.r_button.shadow.visible,this.a_button.shadow.visible=!this.a_button.shadow.visible,this.l_button.sprite.visible=!this.l_button.sprite.visible,this.r_button.sprite.visible=!this.r_button.sprite.visible,this.a_button.sprite.visible=!this.a_button.sprite.visible,this.hifen.shadow.visible=!this.hifen.shadow.visible,this.lr_text.shadow.visible=!this.lr_text.shadow.visible,this.a_text.shadow.visible=!this.a_text.shadow.visible,this.hifen.text.visible=!this.hifen.text.visible,this.lr_text.text.visible=!this.lr_text.text.visible,this.a_text.text.visible=!this.a_text.text.visible;const t=": Return"===this.select_text.text.text?": Djinn  list":": Return";this.guide_window.update_text(t,this.select_text)}check_main_components(){if(this.current_state===d.DJINN)this.main_window.get_internal_group(u.GROUP_KEY).visible=!1;else{let t=0,e=0,i=0,s=0,n="";[d.CHARACTERS,d.STATISTICS].includes(this.current_state)?(t=u.LEVEL.LABEL_X1,e=u.LEVEL.LABEL_Y1,i=u.LEVEL.VALUE_END_X1,s=u.LEVEL.VALUE_Y1,n="Lv"):(t=u.LEVEL.LABEL_X2,e=u.LEVEL.LABEL_Y2,i=u.LEVEL.VALUE_END_X2,s=u.LEVEL.VALUE_Y2,n="L v"),this.main_window.update_text_position({x:t,y:e},this.level_label),this.main_window.update_text_position({x:i,y:s},this.level_value),this.main_window.update_text(n,this.level_label),this.main_window.get_internal_group(u.GROUP_KEY).visible=!0}}init_desc_guide(){let t=this.desc_window.create_at_group(u.DESC_GUIDE.L.X+1,u.DESC_GUIDE.L.Y+1,"l_button",0,void 0,u.DESC_GUIDE_KEY);this.active_sprites.push(t),t=this.desc_window.create_at_group(u.DESC_GUIDE.L.X,u.DESC_GUIDE.L.Y,"l_button",void 0,void 0,u.DESC_GUIDE_KEY),this.active_sprites.push(t),t=this.desc_window.create_at_group(u.DESC_GUIDE.R.X+1,u.DESC_GUIDE.R.Y+1,"r_button",0,void 0,u.DESC_GUIDE_KEY),this.active_sprites.push(t),t=this.desc_window.create_at_group(u.DESC_GUIDE.R.X,u.DESC_GUIDE.R.Y,"r_button",void 0,void 0,u.DESC_GUIDE_KEY),this.active_sprites.push(t),t=this.desc_window.create_at_group(u.DESC_GUIDE.A.X+1,u.DESC_GUIDE.A.Y+1,"a_button",0,void 0,u.DESC_GUIDE_KEY),this.active_sprites.push(t),t=this.desc_window.create_at_group(u.DESC_GUIDE.A.X,u.DESC_GUIDE.A.Y,"a_button",void 0,void 0,u.DESC_GUIDE_KEY),this.active_sprites.push(t);let e=this.desc_window.set_text_in_position("-",u.DESC_GUIDE.HIFEN.X,u.DESC_GUIDE.HIFEN.Y,!1,!1,void 0,!1,u.DESC_GUIDE_KEY);this.active_sprites.push(e.text,e.shadow),e=this.desc_window.set_text_in_position(": Switch  characters",u.DESC_GUIDE.LR_TEXT.X,u.DESC_GUIDE.LR_TEXT.Y,!1,!1,void 0,!1,u.DESC_GUIDE_KEY),this.active_sprites.push(e.text,e.shadow),e=this.desc_guide_a_text=this.desc_window.set_text_in_position("",u.DESC_GUIDE.A_TEXT.X,u.DESC_GUIDE.A_TEXT.Y,!1,!1,void 0,!1,u.DESC_GUIDE_KEY),this.active_sprites.push(e.text,e.shadow)}initialize(){this.avatar=this.main_window.create_at_group(u.AVATAR.X,u.AVATAR.Y,"avatars",void 0,this.selected_char.key_name,u.GROUP_KEY),this.active_sprites.push(this.avatar),this.name=this.main_window.set_text_in_position("",u.NAME.X,u.NAME.Y,!1,!1,void 0,!1,u.GROUP_KEY),this.active_sprites.push(this.name.text,this.name.shadow),this.level_label=this.main_window.set_text_in_position("Lv",u.LEVEL.LABEL_X1,u.LEVEL.LABEL_Y1,!1,!1,void 0,!1,u.GROUP_KEY),this.active_sprites.push(this.level_label.text,this.level_label.shadow),this.level_value=this.main_window.set_text_in_position("",u.LEVEL.VALUE_END_X1,u.LEVEL.VALUE_Y1,!0,!1,void 0,!1,u.GROUP_KEY),this.active_sprites.push(this.level_value.text,this.level_value.shadow),this.class_name=this.main_window.set_text_in_position("",u.CLASS_NAME.X,u.CLASS_NAME.Y,!1,!1,void 0,!1,u.GROUP_KEY),this.active_sprites.push(this.class_name.text,this.class_name.shadow),this.l_button={shadow:this.guide_window.create_at_group(u.GUIDE.L.X+1,u.GUIDE.L.Y+1,"l_button",0,void 0,u.GROUP_KEY),sprite:this.guide_window.create_at_group(u.GUIDE.L.X,u.GUIDE.L.Y,"l_button",void 0,void 0,u.GROUP_KEY)},this.active_sprites.push(this.l_button.sprite,this.l_button.shadow),this.r_button={shadow:this.guide_window.create_at_group(u.GUIDE.R.X+1,u.GUIDE.R.Y+1,"r_button",0,void 0,u.GROUP_KEY),sprite:this.guide_window.create_at_group(u.GUIDE.R.X,u.GUIDE.R.Y,"r_button",void 0,void 0,u.GROUP_KEY)},this.active_sprites.push(this.r_button.sprite,this.r_button.shadow),this.a_button={shadow:this.guide_window.create_at_group(u.GUIDE.A.X+1,u.GUIDE.A.Y+1,"a_button",0,void 0,u.GROUP_KEY),sprite:this.guide_window.create_at_group(u.GUIDE.A.X,u.GUIDE.A.Y,"a_button",void 0,void 0,u.GROUP_KEY)},this.active_sprites.push(this.a_button.sprite,this.a_button.shadow),this.select_button={shadow:this.guide_window.create_at_group(u.GUIDE.SELECT.X+1,u.GUIDE.SELECT.Y+1,"select_button",0,void 0,u.GROUP_KEY),sprite:this.guide_window.create_at_group(u.GUIDE.SELECT.X,u.GUIDE.SELECT.Y,"select_button",void 0,void 0,u.GROUP_KEY)},this.active_sprites.push(this.select_button.sprite,this.select_button.shadow),this.hifen=this.guide_window.set_text_in_position("-",u.GUIDE.HIFEN.X,u.GUIDE.HIFEN.Y,!1,!1,void 0,!1,u.GROUP_KEY),this.active_sprites.push(this.hifen.text,this.hifen.shadow),this.lr_text=this.guide_window.set_text_in_position(": Rearrange",u.GUIDE.LR_TEXT.X,u.GUIDE.LR_TEXT.Y,!1,!1,void 0,!1,u.GROUP_KEY),this.active_sprites.push(this.lr_text.text,this.lr_text.shadow),this.a_text=this.guide_window.set_text_in_position(": Details",u.GUIDE.A_TEXT.X,u.GUIDE.A_TEXT.Y,!1,!1,void 0,!1,u.GROUP_KEY),this.active_sprites.push(this.a_text.text,this.a_text.shadow),this.select_text=this.guide_window.set_text_in_position(": Djinn  list",u.GUIDE.SELECT_TEXT.X,u.GUIDE.SELECT_TEXT.Y,!1,!1,void 0,!1,u.GROUP_KEY),this.active_sprites.push(this.select_text.text,this.select_text.shadow),this.desc_line1=this.desc_window.set_text_in_position("",u.DESC.LINE1.X,u.DESC.LINE1.Y,!1,!1,void 0,!1,u.GROUP_KEY,!0),this.active_sprites.push(this.desc_line1.text,this.desc_line1.shadow),this.desc_line2=this.desc_window.set_text_in_position("",u.DESC.LINE2.X,u.DESC.LINE2.Y,!1,!1,void 0,!1,u.GROUP_KEY,!0),this.active_sprites.push(this.desc_line2.text,this.desc_line2.shadow);let t=this.equip_window.set_text_in_position("Weapon",u.EQUIP_TEXT.LABEL.X,u.EQUIP_TEXT.LABEL.Y,!1,!1,void 0,!1,u.GROUP_KEY);this.active_sprites.push(t.text,t.shadow),this.eq_weapon_name=this.equip_window.set_text_in_position("",u.EQUIP_TEXT.NAME.X,u.EQUIP_TEXT.NAME.Y,!1,!1,void 0,!1,u.GROUP_KEY),this.active_sprites.push(this.eq_weapon_name.text,this.eq_weapon_name.shadow);let e=u.EQUIP_TEXT.SHIFT;t=this.equip_window.set_text_in_position("Head",u.EQUIP_TEXT.LABEL.X,u.EQUIP_TEXT.LABEL.Y+e,!1,!1,void 0,!1,u.GROUP_KEY),this.active_sprites.push(t.text,t.shadow),this.eq_head_name=this.equip_window.set_text_in_position("",u.EQUIP_TEXT.NAME.X,u.EQUIP_TEXT.NAME.Y+e,!1,!1,void 0,!1,u.GROUP_KEY),this.active_sprites.push(this.eq_head_name.text,this.eq_head_name.shadow),e+=u.EQUIP_TEXT.SHIFT,t=this.equip_window.set_text_in_position("Shield",u.EQUIP_TEXT.LABEL.X,u.EQUIP_TEXT.LABEL.Y+e,!1,!1,void 0,!1,u.GROUP_KEY),this.active_sprites.push(t.text,t.shadow),this.eq_shield_name=this.equip_window.set_text_in_position("",u.EQUIP_TEXT.NAME.X,u.EQUIP_TEXT.NAME.Y+e,!1,!1,void 0,!1,u.GROUP_KEY),this.active_sprites.push(this.eq_shield_name.text,this.eq_shield_name.shadow),e+=u.EQUIP_TEXT.SHIFT,t=this.equip_window.set_text_in_position("Chest",u.EQUIP_TEXT.LABEL.X,u.EQUIP_TEXT.LABEL.Y+e,!1,!1,void 0,!1,u.GROUP_KEY),this.active_sprites.push(t.text,t.shadow),this.eq_chest_name=this.equip_window.set_text_in_position("",u.EQUIP_TEXT.NAME.X,u.EQUIP_TEXT.NAME.Y+e,!1,!1,void 0,!1,u.GROUP_KEY),this.active_sprites.push(this.eq_chest_name.text,this.eq_chest_name.shadow),this.init_desc_guide()}update_info(){this.avatar&&this.avatar.destroy();const t=this.selected_char;this.set_battle_effects(),this.avatar=this.main_window.create_at_group(u.AVATAR.X,u.AVATAR.Y,"avatars",void 0,t.key_name,u.GROUP_KEY),this.main_window.update_text(t.name,this.name),this.main_window.update_text(t.level,this.level_value),this.main_window.update_text(t.class.name,this.class_name);const e={[s.equip_slots.WEAPON]:"",[s.equip_slots.HEAD]:"",[s.equip_slots.CHEST]:"",[s.equip_slots.BODY]:""};for(let i in e){const s=t.equip_slots[i];e[i]=s?this.data.info.items_list[s.key_name].name:""}this.equip_window.update_text(e[s.equip_slots.WEAPON],this.eq_weapon_name),this.equip_window.update_text(e[s.equip_slots.HEAD],this.eq_head_name),this.equip_window.update_text(e[s.equip_slots.CHEST],this.eq_shield_name),this.equip_window.update_text(e[s.equip_slots.BODY],this.eq_chest_name)}trigger_state_change(){this.change_state(u.AdvanceState[this.current_state],!0)}on_character_change(t){this.selected_char=t?"string"==typeof t?this.data.info.main_char_list[t]:t:this.chars_menu.lines[this.chars_menu.current_line][this.chars_menu.selected_index];let e=null;e=null===this.current_state||void 0===this.current_state?d.CHARACTERS:this.current_state,this.update_info(),this.change_state(e),this.data.cursor_manager.show()}inner_control(){const t=[{key:this.data.gamepad.LEFT,on_down:this.current_component.on_left.bind(this.current_component)},{key:this.data.gamepad.RIGHT,on_down:this.current_component.on_right.bind(this.current_component)},{key:this.data.gamepad.UP,on_down:this.current_component.on_up.bind(this.current_component)},{key:this.data.gamepad.DOWN,on_down:this.current_component.on_down.bind(this.current_component)}];this.current_state!==d.DJINN?t.push({key:this.data.gamepad.A,on_down:this.trigger_state_change.bind(this)},{key:this.data.gamepad.B,on_down:this.selecting_char.bind(this)},{key:this.data.gamepad.L,on_down:this.chars_menu.previous_char.bind(this.chars_menu,!0)},{key:this.data.gamepad.R,on_down:this.chars_menu.next_char.bind(this.chars_menu,!0)}):t.push({key:this.data.gamepad.A,on_down:this.selecting_char.bind(this)},{key:this.data.gamepad.B,on_down:this.selecting_char.bind(this)},{key:this.data.gamepad.SELECT,on_down:this.selecting_char.bind(this)}),this.data.control_manager.set_control(t,{loop_configs:{vertical:!0,horizontal:!0,shoulder:!0}})}change_state(t,e=!1){let i={line:0,col:0};t!==d.DJINN&&this.current_state!==d.DJINN||(this.toggle_guide_win(),t===d.DJINN?(this.chars_menu.unset_character(this.chars_menu.selected_index),this.chars_menu.arrow_group.visible=!1):(this.chars_menu.set_character(this.chars_menu.selected_index),this.chars_menu.arrow_group.visible=!0)),[d.CHARACTERS,d.DJINN].includes(t)||this.desc_window.open?t===d.CHARACTERS&&this.desc_window.open&&this.desc_window.close(void 0,!1):this.desc_window.show(void 0,!1),t!==d.ITEMS||this.equip_window.open?t!==d.ITEMS&&this.equip_window.open&&this.equip_window.close(void 0,!1):this.equip_window.show(void 0,!1),this.current_component&&(e||(i=this.current_component.current_pos),this.current_component.clear(),this.current_component=null),this.current_state=t,this.current_component=this.components[u.StateComponent[this.current_state]],this.current_state===d.DJINN?this.current_component.initialize():this.current_component.reset(i),this.current_state!==d.CHARACTERS&&this.inner_control(),this.check_main_components()}selecting_char(){this.update_info(),this.change_state(d.CHARACTERS),this.chars_menu.select_char(this.chars_menu.selected_index,!1,!0),this.chars_menu.grant_control(this.close_menu.bind(this,this.close_callback),this.trigger_state_change.bind(this),!0);const t=[{key:this.data.gamepad.SELECT,on_down:this.change_state.bind(this,d.DJINN)}];this.data.control_manager.set_control(t,{no_reset:!0}),this.data.cursor_manager.show()}open_menu(t,e){t&&(this.close_callback=t),this.selected_char=this.data.info.party_data.members[0],this.initialize(),this.guide_window.show(void 0,!1),this.main_window.show(void 0,!1),this.chars_menu.open(0,a.CharsMenuModes.MENU,void 0,!0),this.selecting_char(),this.main_window.group.bringToTop(this.main_window.get_internal_group(u.GROUP_KEY)),e&&e(),this.menu_open=!0}close_menu(t){this.menu_open=!1,this.data.cursor_manager.hide(),this.data.control_manager.reset(),this.current_component.clear(),this.current_component=null,this.current_state=null,t||(t=this.close_callback),this.chars_menu.close(),this.main_window.close(void 0,!1),this.guide_window.close(void 0,!1),this.desc_window.close(void 0,!1),this.equip_window.close(void 0,!1),this.active_sprites.forEach(t=>{t.destroy()}),this.active_sprites=[],t(),this.close_callback=null}update_eq_highlight(t){this.eq_highlight.clear(),this.eq_highlight.beginFill(this.equip_window.color,1),this.eq_highlight.drawRect(t.x,t.y,t.width,t.height),this.eq_highlight.endFill()}}e.MainStatusMenu=u,u.DESC_WIN={X:0,Y:0,WIDTH:236,HEIGHT:36},u.EQUIP_WIN={X:0,Y:80,WIDTH:116,HEIGHT:76},u.GUIDE_WIN={X:104,Y:0,WIDTH:132,HEIGHT:36},u.MAIN_WIN={X:0,Y:40,WIDTH:236,HEIGHT:116},u.NAME={X:48,Y:8},u.CLASS_NAME={X:8,Y:40},u.LEVEL={LABEL_X1:112,LABEL_Y1:8,VALUE_END_X1:149,VALUE_Y1:8,LABEL_X2:8,LABEL_Y2:56,VALUE_END_X2:45,VALUE_Y2:56},u.AVATAR={X:8,Y:8},u.GUIDE={L:{X:8,Y:8},HIFEN:{X:22,Y:8},R:{X:27,Y:8},LR_TEXT:{X:42,Y:8},A:{X:9,Y:16},A_TEXT:{X:19,Y:16},SELECT:{X:8,Y:24},SELECT_TEXT:{X:21,Y:24}},u.DESC={LINE1:{X:6,Y:7},LINE2:{X:6,Y:21}},u.DESC_GUIDE={L:{X:88,Y:24},HIFEN:{X:102,Y:24},R:{X:107,Y:24},LR_TEXT:{X:122,Y:24},A:{X:9,Y:24},A_TEXT:{X:19,Y:24}},u.EQUIP_TEXT={LABEL:{X:8,Y:8},NAME:{X:16,Y:16},SHIFT:16},u.StateComponent={[d.CHARACTERS]:0,[d.DJINN]:2,[d.STATISTICS]:0,[d.PSYNERGY]:1,[d.ITEMS]:3},u.AdvanceState={[d.CHARACTERS]:d.STATISTICS,[d.STATISTICS]:d.PSYNERGY,[d.PSYNERGY]:d.ITEMS,[d.ITEMS]:d.STATISTICS},u.FONTS={NORMAL:"gs-bmp-font",ITALIC:"gs-italic-bmp-font"},u.GROUP_KEY="main_status",u.DESC_GUIDE_KEY="desc_guide",u.MAX_EFFECTS_DISPLAYED=4},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function _(t){try{r(s.next(t))}catch(t){a(t)}}function o(t){try{r(s.throw(t))}catch(t){a(t)}}function r(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(_,o)}r((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.GoldenSun=void 0;const n=i(1),a=i(6),_=i(38),o=i(39),r=i(40),h=i(0),c=i(41),l=i(43),d=i(44),u=i(66),p=i(67),m=i(91),g=i(109),w=i(118),f=i(4),y=i(119);class b{constructor(){this.game=null,this.dbs={},this.info={},this.particle_manager=null,this.menu_open=!1,this.shop_open=!1,this.in_battle=!1,this.created=!1,this.force_stop_movement=!1,this.hero=null,this.collision=null,this.debug=null,this.main_menu=null,this.shop_menu=null,this.map=null,this.tile_event_manager=null,this.game_event_manager=null,this.battle_instance=null,this.control_manager=null,this.cursor_manager=null,this.gamepad=null,this.fullscreen=!1,this.scale_factor=1,this.underlayer_group=null,this.npc_group=null,this.overlayer_group=null,this.game=new Phaser.Game(n.GAME_WIDTH,n.GAME_HEIGHT,Phaser.WEBGL,"game",{preload:this.preload.bind(this),create:this.create.bind(this),update:this.update.bind(this),render:this.render.bind(this),loadRender:this.loadRender.bind(this)},!1,!1)}preload(){o.load_all(this.game),this.game.time.advancedTiming=!0,this.game.stage.smoothed=!1,this.game.camera.roundPx=!0,this.game.renderer.renderSession.roundPixels=!0,this.game.camera.fade(0,1)}render_loading(){this.game.debug.text("Loading...",5,15,"#00ff00")}loadRender(){this.render_loading()}create(){return s(this,void 0,void 0,(function*(){u.load_databases(this.game,this.dbs),this.gamepad=new y.Gamepad(this),this.cursor_manager=new f.CursorManager(this.game),this.control_manager=new w.ControlManager(this.game,this.gamepad),this.scale_factor=this.dbs.init_db.initial_scale_factor,this.particle_manager=this.game.plugins.add(Phaser.ParticleStorm),this.debug=new _.Debug(this.game,this),this.debug.initialize_controls(),this.underlayer_group=this.game.add.group(),this.npc_group=this.game.add.group(),this.overlayer_group=this.game.add.group(),yield p.initialize_game_data(this.game,this),this.map=yield this.info.maps_list[this.dbs.init_db.map_key_name].mount_map(this.dbs.init_db.map_z_index);const t=this.dbs.init_db.hero_key_name;this.hero=new c.Hero(this.game,this,t,this.dbs.init_db.x_tile_position,this.dbs.init_db.y_tile_position,this.dbs.init_db.initial_action,h.directions[this.dbs.init_db.initial_direction],this.info.main_char_list[t].walk_speed,this.info.main_char_list[t].dash_speed,this.info.main_char_list[t].climb_speed);const e=this.info.main_char_list[t].sprite_base;this.hero.set_sprite(this.npc_group,e,this.map.sprite,this.map.collision_layer,void 0,void 0,this.map.is_world_map),this.hero.set_shadow("shadow",this.npc_group,this.map.collision_layer),this.hero.create_half_crop_mask(this.map.is_world_map),this.hero.camera_follow(),this.hero.play(),this.collision=new r.Collision(this.game,this.hero),this.hero.config_body(this.collision),this.collision.config_collision_groups(this.map),this.map.config_all_bodies(this.collision,this.map.collision_layer),this.collision.config_collisions(this.map,this.map.collision_layer,this.npc_group),this.game.physics.p2.updateBoundsCollisionGroup(),this.tile_event_manager=new l.TileEventManager(this.game,this,this.hero,this.collision),this.game_event_manager=new d.GameEventManager(this.game,this),this.initialize_utils_controls(),this.created=!0,this.game.camera.resetFX()}))}initialize_utils_controls(){this.game.scale.setupScale(this.scale_factor*n.GAME_WIDTH,this.scale_factor*n.GAME_HEIGHT),window.dispatchEvent(new Event("resize")),this.game.scale.fullScreenScaleMode=Phaser.ScaleManager.SHOW_ALL,this.game.input.onTap.add((t,e)=>{e&&this.game.scale.startFullScreen(!0)}),this.game.scale.onFullScreenChange.add(()=>{this.fullscreen=!this.fullscreen,this.scale_factor=1,this.game.scale.setupScale(n.GAME_WIDTH,n.GAME_HEIGHT),window.dispatchEvent(new Event("resize"))}),this.shop_menu=new g.ShopMenu(this.game,this),this.main_menu=m.initialize_menu(this.game,this);let t=[{key:this.gamepad.ZOOM1,on_down:()=>{this.fullscreen||(this.scale_factor=1,this.game.scale.setupScale(n.GAME_WIDTH,n.GAME_HEIGHT),window.dispatchEvent(new Event("resize")))}},{key:this.gamepad.ZOOM2,on_down:()=>{this.fullscreen||(this.scale_factor=2,this.game.scale.setupScale(this.scale_factor*n.GAME_WIDTH,this.scale_factor*n.GAME_HEIGHT),window.dispatchEvent(new Event("resize")))}},{key:this.gamepad.ZOOM3,on_down:()=>{this.fullscreen||(this.scale_factor=3,this.game.scale.setupScale(this.scale_factor*n.GAME_WIDTH,this.scale_factor*n.GAME_HEIGHT),window.dispatchEvent(new Event("resize")))}},{key:this.gamepad.PSY1,on_down:()=>{this.hero.in_action()||this.menu_open||this.in_battle||this.shop_open||this.info.field_abilities_list.move.cast(this.hero,this.dbs.init_db.initial_shortcuts.move)}},{key:this.gamepad.PSY2,on_down:()=>{this.hero.in_action()||this.menu_open||this.in_battle||this.shop_open||this.info.field_abilities_list.frost.cast(this.hero,this.dbs.init_db.initial_shortcuts.frost)}},{key:this.gamepad.PSY3,on_down:()=>{this.hero.in_action()||this.menu_open||this.in_battle||this.shop_open||this.info.field_abilities_list.growth.cast(this.hero,this.dbs.init_db.initial_shortcuts.growth)}}];this.control_manager.set_control(t,{persist:!0})}hero_movement_allowed(t=!0){return!(this.hero.in_action(t)||this.menu_open||this.shop_open||this.in_battle||this.tile_event_manager.on_event||this.force_stop_movement)}update(){if(this.created)if(this.hero_movement_allowed()){this.hero.update_tile_position(this.map.sprite),this.tile_event_manager.fire_triggered_events();const t=a.TileEvent.get_location_key(this.hero.tile_x_pos,this.hero.tile_y_pos);t in this.map.events&&this.tile_event_manager.check_tile_events(t,this.map),this.hero.update(this.map),this.map.update()}else this.hero.stop_char(!1),this.menu_open&&this.main_menu.is_active?this.main_menu.update_position():this.shop_open&&this.shop_menu.horizontal_menu.menu_active?this.shop_menu.update_position():this.in_battle&&this.battle_instance.update();else this.render_loading()}render(){this.debug.set_debug_info(),this.game.time.frames%8==0&&this.debug.fill_key_debug_table(),this.game.time.frames%30==0&&this.debug.fill_stats_debug_table()}}e.GoldenSun=b;var v=new b;window.data=v},function(t,e){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(t){"object"==typeof window&&(i=window)}t.exports=i},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Debug=void 0;const s=i(0),n=i(3);e.Debug=class{constructor(t,e){this.game=t,this.data=e,this.debug_physics=!1,this.grid=!1,this.debug_keys=!1,this.debug_stats=!1,this.show_fps=!1,this.show_sliders=!1}initialize_controls(){let t=[{key:this.data.gamepad.DEBUG_PHYSICS,on_down:this.toggle_debug_physics.bind(this)},{key:this.data.gamepad.DEBUG_GRID,on_down:this.toggle_grid.bind(this)},{key:this.data.gamepad.DEBUG_KEYS,on_down:this.toggle_keys.bind(this)},{key:this.data.gamepad.DEBUG_STATS,on_down:this.toggle_stats.bind(this)},{key:this.data.gamepad.DEBUG_FPS,on_down:this.toggle_fps.bind(this)},{key:this.data.gamepad.DEBUG_SLIDERS,on_down:this.toggle_sliders.bind(this)}];this.data.control_manager.set_control(t,{persist:!0})}update_debug_physics(t){this.data.map.collision_sprite.body.debug=t;for(let e=0;e<this.data.npc_group.children.length;++e){let i=this.data.npc_group.children[e];(i.is_npc||i.is_interactable_object)&&(i.body&&(i.body.debug=t))}}toggle_debug_physics(){this.data.hero.sprite.body.debug=!this.data.hero.sprite.body.debug,this.update_debug_physics(this.data.hero.sprite.body.debug);for(let t=0;t<this.data.collision.dynamic_jump_events_bodies.length;++t)this.data.collision.dynamic_jump_events_bodies[t].debug=!this.data.collision.dynamic_jump_events_bodies[t].debug;for(let t=0;t<this.data.map.interactable_objects.length;++t){const e=this.data.map.interactable_objects[t];e.custom_data.blocking_stair_block&&(e.custom_data.blocking_stair_block.debug=!e.custom_data.blocking_stair_block.debug)}this.debug_physics=!this.debug_physics}toggle_keys(){this.debug_keys=!this.debug_keys;const t=(t,e)=>{let i;switch(e.keyCode){case 38:if(e.repeat)return;i=document.querySelector("#key_debug .up").classList;break;case 40:if(e.repeat)return;i=document.querySelector("#key_debug .down").classList;break;case 39:if(e.repeat)return;i=document.querySelector("#key_debug .right").classList;break;case 37:if(e.repeat)return;i=document.querySelector("#key_debug .left").classList}i&&(t?i.add("pressed"):i.remove("pressed"))};this.debug_keys?(document.getElementById("key_debug").style.display="flex",document.onkeydown=t.bind(null,!0),document.onkeyup=t.bind(null,!1)):(document.getElementById("key_debug").style.display="none",document.onkeydown=void 0,document.onkeyup=void 0)}toggle_sliders(){this.show_sliders=!this.show_sliders,this.show_sliders?document.getElementById("sliders_debug").style.display="block":document.getElementById("sliders_debug").style.display="none"}add_slider(){const t=document.createElement("div");t.classList.add("holder");const e=document.createElement("input");e.type="text",e.placeholder="variable name";const i=document.createElement("input");i.type="range",i.disabled=!0;const s=document.createElement("input");s.type="number",s.placeholder="min value",s.onkeyup=t=>{i.min=s.value};const a=document.createElement("input");a.type="number",a.placeholder="max value",a.onkeyup=t=>{i.max=a.value};const _=document.createElement("input");_.type="number",_.placeholder="step value";const o=document.createElement("input");o.type="number",o.placeholder="current value",o.disabled=!0,o.onkeyup=o.onchange=t=>{n.set(window,e.value,parseFloat(o.value))};const r=document.createElement("input");r.type="button",r.value="Remove",r.onclick=e=>{t.remove()},_.onkeyup=t=>{i.step=_.value,o.step=_.value,s.step=_.value,a.step=_.value},i.oninput=t=>{n.set(window,e.value,parseFloat(i.value)),o.value=i.value},e.onkeyup=t=>{const s=n.get(window,e.value);n.isNumber(s)?(i.disabled=!1,o.disabled=!1,i.value=s.toString(),o.value=s.toString()):(i.disabled=!0,o.disabled=!0)},t.appendChild(e),t.appendChild(s),t.appendChild(a),t.appendChild(_),t.appendChild(i),t.appendChild(o),t.appendChild(r),document.getElementById("sliders_debug").appendChild(t)}fill_key_debug_table(){this.debug_keys&&(document.querySelector("#key_debug table .direction").innerHTML=s.reverse_directions[this.data.hero.current_direction],document.querySelector("#key_debug table .action").innerHTML=this.data.hero.current_action,document.querySelector("#key_debug table .x").innerHTML=`${this.data.hero.tile_x_pos}/${this.data.hero.sprite.body.x.toFixed(3)}`,document.querySelector("#key_debug table .y").innerHTML=`${this.data.hero.tile_y_pos}/${this.data.hero.sprite.body.y.toFixed(3)}`,document.querySelector("#key_debug table .speed_x").innerHTML=this.data.hero.sprite.body.velocity.x.toFixed(3),document.querySelector("#key_debug table .speed_y").innerHTML=this.data.hero.sprite.body.velocity.y.toFixed(3),document.querySelector("#key_debug table .force_direction").innerHTML=this.data.hero.force_direction.toString(),document.querySelector("#key_debug table .stop_by_colliding").innerHTML=this.data.hero.stop_by_colliding.toString())}toggle_fps(){this.show_fps=!this.show_fps}toggle_grid(){this.grid=!this.grid}set_debug_info(){if(this.game.debug.text("",0,0),this.show_fps&&this.game.debug.text("FPS: "+this.game.time.fps||!1,5,15,"#00ff00"),this.grid){const t=this.data.map.sprite.tileWidth;for(let e=0;e<this.game.world.width;e+=t)this.game.debug.geom(new Phaser.Line(e,0,e,this.game.world.height),"rgba(0,255,255,0.35)",!1,4);const e=this.data.map.sprite.tileHeight;for(let t=0;t<this.game.world.height;t+=e)this.game.debug.geom(new Phaser.Line(0,t,this.game.world.width,t),"rgba(0,255,255,0.35)",!1,4);let i=this.data.hero.tile_x_pos*t,n=this.data.hero.tile_y_pos*e;this.game.debug.geom(new Phaser.Rectangle(i,n,t,e),"rgba(255,0,0,0.5)"),this.game.debug.geom(new Phaser.Circle(this.data.hero.sprite.x,this.data.hero.sprite.y,5),"rgba(20,75,0,1.0)");for(let i in this.data.map.events){let s=i.split("_").map(t=>parseInt(t));this.game.debug.geom(new Phaser.Rectangle(s[0]*t,s[1]*e,t,e),"rgba(255,255,60,0.7)")}if(this.game.input.mousePointer.withinGame){const t=(this.game.camera.x+this.game.input.mousePointer.x/this.data.scale_factor)/this.data.map.sprite.tileWidth|0,e=(this.game.camera.y+this.game.input.mousePointer.y/this.data.scale_factor)/this.data.map.sprite.tileHeight|0;this.game.debug.text(`x: ${t}, y: ${e}`,140,15,"#00ff00");const i=t+"_"+e;if(i in this.data.map.events){const t=this.data.map.events[i].map(t=>Object.assign({},t,Object.assign({game:"[Phaser.Game]",data:"[GoldenSun]",activation_directions:t.activation_directions.map(t=>s.reverse_directions[t])},t.origin_interactable_object&&{origin_interactable_object:`[${t.origin_interactable_object.key_name}]`})));document.getElementById("object_inspector").innerText=JSON.stringify(t,null,4)}}else this.game.debug.text("x: --, y: --",140,15,"#00ff00")}else document.getElementById("object_inspector").innerText=""}toggle_stats(){this.data.in_battle?this.debug_stats=!this.debug_stats:this.debug_stats=!1;const t=document.getElementById("stats_debug_select");this.debug_stats?(this.debug_stats_info={chars:this.data.battle_instance.allies_info.concat(this.data.battle_instance.enemies_info).map(t=>t.instance),selected:0,listener:t=>{this.debug_stats_info.selected=t.target.value}},this.debug_stats_info.chars.forEach((e,i)=>{let s=document.createElement("option");s.innerText=e.name,s.setAttribute("value",i.toString()),t.appendChild(s)}),t.addEventListener("change",this.debug_stats_info.listener),document.getElementById("stats_debug").style.display="block"):(this.debug_stats_info&&(t.removeEventListener("change",this.debug_stats_info.listener),this.debug_stats_info=void 0),document.getElementById("stats_debug_select").innerHTML="",document.getElementById("stats_debug").style.display="none")}fill_stats_debug_table(){if(!this.debug_stats||!this.data.in_battle)return;const t=this.debug_stats_info.chars[this.debug_stats_info.selected];document.querySelector("#stats_debug table .name").innerHTML=t.name,document.querySelector("#stats_debug table .class").innerHTML=t.class.name,document.querySelector("#stats_debug table .level").innerHTML=t.level.toString(),document.querySelector("#stats_debug table .exp").innerHTML=t.current_exp.toString(),document.querySelector("#stats_debug table .current_hp").innerHTML=t.current_hp.toString(),document.querySelector("#stats_debug table .max_hp").innerHTML=t.max_hp.toString(),document.querySelector("#stats_debug table .current_pp").innerHTML=t.current_pp.toString(),document.querySelector("#stats_debug table .max_pp").innerHTML=t.max_pp.toString(),document.querySelector("#stats_debug table .atk").innerHTML=t.atk.toString(),document.querySelector("#stats_debug table .def").innerHTML=t.def.toString(),document.querySelector("#stats_debug table .agi").innerHTML=t.agi.toString(),document.querySelector("#stats_debug table .luk").innerHTML=t.luk.toString(),document.querySelector("#stats_debug table .venus_power").innerHTML=t.venus_power_current.toString(),document.querySelector("#stats_debug table .venus_resist").innerHTML=t.venus_resist_current.toString(),document.querySelector("#stats_debug table .venus_level").innerHTML=t.venus_level_current.toString(),document.querySelector("#stats_debug table .mercury_power").innerHTML=t.mercury_power_current.toString(),document.querySelector("#stats_debug table .mercury_resist").innerHTML=t.mercury_resist_current.toString(),document.querySelector("#stats_debug table .mercury_level").innerHTML=t.mercury_level_current.toString(),document.querySelector("#stats_debug table .mars_power").innerHTML=t.mars_power_current.toString(),document.querySelector("#stats_debug table .mars_resist").innerHTML=t.mars_resist_current.toString(),document.querySelector("#stats_debug table .mars_level").innerHTML=t.mars_level_current.toString(),document.querySelector("#stats_debug table .jupiter_power").innerHTML=t.jupiter_power_current.toString(),document.querySelector("#stats_debug table .jupiter_resist").innerHTML=t.jupiter_resist_current.toString(),document.querySelector("#stats_debug table .jupiter_level").innerHTML=t.jupiter_level_current.toString(),document.querySelector("#stats_debug table .turns").innerHTML=t.turns.toString(),document.querySelector("#stats_debug table .temp_statuses").innerHTML=[...t.temporary_status].join(" "),document.querySelector("#stats_debug table .perm_statuses").innerHTML=[...t.permanent_status].join(" ");let e="";Object.keys(t.effect_turns_count).sort().forEach(i=>{"power"===i||"resist"===i?s.ordered_elements.forEach(s=>{e+=`${i}[${s}]/${t.effect_turns_count[i][s]} <br>`}):e+=`${i}/${t.effect_turns_count[i]} <br>`}),document.querySelector("#stats_debug table .buff").innerHTML=e,document.querySelector("#stats_debug table .effect_count").innerHTML=t.effects.length.toString()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.load_all=void 0,e.load_all=function(t){!function(t){t.load.json("init_db","assets/init.json"),t.load.json("classes_db","assets/dbs/classes_db.json"),t.load.json("abilities_db","assets/dbs/abilities_db.json"),t.load.json("items_db","assets/dbs/items_db.json"),t.load.json("npc_db","assets/dbs/npc_db.json"),t.load.json("interactable_objects_db","assets/dbs/interactable_objects_db.json"),t.load.json("djinni_db","assets/dbs/djinni_db.json"),t.load.json("enemies_db","assets/dbs/enemies_db.json"),t.load.json("enemies_parties_db","assets/dbs/enemies_parties_db.json"),t.load.json("maps_db","assets/dbs/maps_db.json"),t.load.json("main_chars_db","assets/dbs/main_chars_db.json"),t.load.json("summons_db","assets/dbs/summons_db.json"),t.load.json("misc_animations_db","assets/dbs/misc_animations_db.json"),t.load.json("shopkeep_dialog_db","assets/dbs/shopkeep_dialog_db.json"),t.load.json("shops_db","assets/dbs/shops_db.json")}(t),function(t){t.load.image("shadow","assets/images/misc/shadow.jpg"),t.load.image("cursor","assets/images/misc/cursor.gif"),t.load.image("green_arrow","assets/images/misc/green_arrow.gif"),t.load.image("up_arrow","assets/images/misc/up_arrow.gif"),t.load.image("down_arrow","assets/images/misc/down_arrow.gif"),t.load.image("page_arrow","assets/images/misc/page_arrow.png"),t.load.image("psynergy_aura","assets/images/misc/psynergy_aura.png"),t.load.image("equipped","assets/images/misc/equipped.gif"),t.load.image("venus_star","assets/images/misc/venus_star.gif"),t.load.image("mercury_star","assets/images/misc/mercury_star.gif"),t.load.image("mars_star","assets/images/misc/mars_star.gif"),t.load.image("jupiter_star","assets/images/misc/jupiter_star.gif"),t.load.image("stat_up","assets/images/misc/stat_up.gif"),t.load.image("stat_down","assets/images/misc/stat_down.gif"),t.load.image("arrow_change","assets/images/misc/arrow_change.png"),t.load.image("item_border","assets/images/misc/item_border.png"),t.load.image("price_tag","assets/images/misc/price_tag.png"),t.load.image("broken","assets/images/misc/broken.png"),t.load.image("frost_snowflake","assets/images/interactable_objects/snowflake.png"),t.load.atlasJSONHash("battle_effect_icons","assets/images/icons/battle_effects/battle_effect_icons.png","assets/images/icons/battle_effects/battle_effect_icons.json"),t.load.atlasJSONHash("dust","assets/images/misc/dust.png","assets/images/misc/dust.json"),t.load.atlasJSONHash("battle_cursor","assets/images/misc/battle_cursor.png","assets/images/misc/battle_cursor.json"),t.load.atlasJSONHash("ranges","assets/images/misc/ranges.png","assets/images/misc/ranges.json"),t.load.atlasJSONHash("psynergy_particle","assets/images/interactable_objects/psynergy_particle.png","assets/images/interactable_objects/psynergy_particle.json"),t.load.atlasJSONHash("psynergy_ball","assets/images/interactable_objects/psynergy_ball.png","assets/images/interactable_objects/psynergy_ball.json")}(t),function(t){t.load.atlasJSONHash("battle_backgrounds","assets/images/battle_backgrounds/battle_backgrounds.png","assets/images/battle_backgrounds/battle_backgrounds.json"),t.load.atlasJSONHash("avatars","assets/images/avatars/avatars.png","assets/images/avatars/avatars.json")}(t),function(t){t.load.atlasJSONHash("buttons","assets/images/buttons/buttons.png","assets/images/buttons/buttons.json"),t.load.image("shift_keyboard","assets/images/keyboard/shift.png"),t.load.image("tab_keyboard","assets/images/keyboard/tab.png"),t.load.image("spacebar_keyboard","assets/images/keyboard/spacebar.png"),t.load.image("a_button","assets/images/keyboard/a_button.png"),t.load.image("select_button","assets/images/keyboard/select_button.png"),t.load.image("l_button","assets/images/keyboard/l_button.png"),t.load.image("r_button","assets/images/keyboard/r_button.png")}(t),function(t){t.load.bitmapFont("gs-bmp-font","assets/font/golden-sun.png","assets/font/golden-sun.fnt"),t.load.bitmapFont("gs-italic-bmp-font","assets/font/golden-sun-italic.png","assets/font/golden-sun-italic.fnt"),t.load.bitmapFont("gs-item-bmp-font","assets/font/gs-item-font.png","assets/font/gs-item-font.fnt"),t.load.bitmapFont("gs-shop-bmp-font","assets/font/gs-shop-font.png","assets/font/gs-shop-font.fnt")}(t),function(t){t.load.script("color_filters","assets/filters/color_filters.js"),t.load.script("mode7","assets/filters/mode7.js")}(t),function(t){t.load.script("particlestorm","assets/plugins/particle-storm.js")}(t)}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Collision=void 0;e.Collision=class{constructor(t,e){this.game=t,this.hero=e,this.config_world(),this.hero_collision_group=this.game.physics.p2.createCollisionGroup(),this.dynamic_events_collision_group=this.game.physics.p2.createCollisionGroup(),this.map_collision_group=t.physics.p2.createCollisionGroup(),this.npc_collision_groups={},this.interactable_objs_collision_groups={},this.max_layers_created=0,this.dynamic_jump_events_bodies=[]}config_world(){this.game.physics.startSystem(Phaser.Physics.P2JS),this.game.physics.p2.setImpactEvents(!0),this.game.physics.p2.world.defaultContactMaterial.restitution=0,this.game.physics.p2.world.defaultContactMaterial.relaxation=8,this.game.physics.p2.world.defaultContactMaterial.friction=0,this.game.physics.p2.world.defaultContactMaterial.contactSkinSize=.001,this.game.physics.p2.world.setGlobalStiffness(1e5),this.game.physics.p2.restitution=0}config_collision_groups(t){for(let e=this.max_layers_created;e<t.collision_layers_number;++e)this.npc_collision_groups[e]=this.game.physics.p2.createCollisionGroup(),this.interactable_objs_collision_groups[e]=this.game.physics.p2.createCollisionGroup();this.max_layers_created=Math.max(this.max_layers_created,t.collision_layers_number)}config_collisions(t,e,i){this.hero.sprite.body.collides(this.map_collision_group),t.collision_sprite.body.collides(this.hero_collision_group);for(let t in this.npc_collision_groups)this.hero.sprite.body.removeCollisionGroup(this.npc_collision_groups[t],!0);e in this.npc_collision_groups&&this.hero.sprite.body.collides(this.npc_collision_groups[e]);for(let t in this.interactable_objs_collision_groups)this.hero.sprite.body.removeCollisionGroup(this.interactable_objs_collision_groups[t],!0);e in this.interactable_objs_collision_groups&&this.hero.sprite.body.collides(this.interactable_objs_collision_groups[e]);for(let t=0;t<i.children.length;++t){const e=i.children[t];(e.is_npc||e.is_interactable_object)&&(e.body&&e.body.collides(this.hero_collision_group))}this.hero.sprite.body.collides(this.dynamic_events_collision_group)}change_map_body(t,e){if(t.map.collision_layer===e)return;t.map.collision_layer=e,this.hero.shadow.base_collision_layer=t.map.collision_layer,this.hero.sprite.base_collision_layer=t.map.collision_layer,t.map.config_body(this,e),this.config_collision_groups(t.map),this.config_collisions(t.map,t.map.collision_layer,t.npc_group);let i=t.map.layers;for(let e=0;e<i.length;++e){let s=i[e];if(void 0!==s.properties.over){const i=s.properties.over.toString().split(",").map(t=>parseInt(t));if(i.length<=t.map.collision_layer)continue;if(Boolean(i[t.map.collision_layer])){t.underlayer_group.remove(s.sprite,!1,!0);let i=0;for(i=0;i<t.overlayer_group.children.length;++i){if(t.overlayer_group.children[i].layer_z>(void 0===s.z?e:s.z)){t.overlayer_group.addAt(s.sprite,i,!0);break}}i===t.overlayer_group.children.length&&t.overlayer_group.add(s.sprite,!0)}else{t.overlayer_group.remove(s.sprite,!1,!0);let e=0;for(e=0;e<t.underlayer_group.children.length;++e){if(t.underlayer_group.children[e].layer_z>s.z){t.underlayer_group.addAt(s.sprite,e,!0);break}}e===t.underlayer_group.children.length&&t.underlayer_group.add(s.sprite,!0)}}}}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Hero=void 0;const s=i(21),n=i(1),a=i(6),_=i(0),o=i(22);class r extends s.ControllableChar{constructor(t,e,i,s,n,a,_,o,r,h){super(t,e,i,s,n,a,_,!0,o,r,h),this.arrow_inputs=null}check_control_inputs(){this.arrow_inputs=1*+this.game.input.keyboard.isDown(this.data.gamepad.RIGHT)|2*+this.game.input.keyboard.isDown(this.data.gamepad.LEFT)|4*+this.game.input.keyboard.isDown(this.data.gamepad.UP)|8*+this.game.input.keyboard.isDown(this.data.gamepad.DOWN),this.required_direction=r.ROTATION_KEY[this.arrow_inputs],this.dashing=this.game.input.keyboard.isDown(this.data.gamepad.B)}set_speed_factors(t=!1){if(t&&this.data.tile_event_manager.on_event)return;let e=r.ROTATION_KEY[this.arrow_inputs];this.climbing?null===e?(this.x_speed=this.y_speed=0,this.idle_climbing=!0):(1==(1&e)&&--e,this.set_direction(e),this.idle_climbing=!1,this.x_speed=r.SPEEDS[e].x,this.y_speed=r.SPEEDS[e].y):null!==e||this.force_direction?(this.force_direction?e=this.current_direction:(this.current_direction=e,1&this.game.time.frames&&(this.desired_direction=_.get_transition_directions(this.desired_direction,e))),this.x_speed=r.SPEEDS[e].x,this.y_speed=r.SPEEDS[e].y):this.x_speed=this.y_speed=0}check_interactable_objects(t,e){let i=0;for(i=0;i<t.interactable_objects.length;++i){const s=t.interactable_objects[i].sprite.body;if(s&&!(e.bodyA!==s.data&&e.bodyB!==s.data||e.bodyA!==this.sprite.body.data&&e.bodyB!==this.sprite.body.data)){const e=t.interactable_objects[i];if([_.base_actions.WALK,_.base_actions.DASH].includes(this.current_action)&&this.data.map.collision_layer===e.base_collision_layer){if(this.trying_to_push=!0,null===this.push_timer){this.trying_to_push_direction=this.current_direction;const i=t.events[a.TileEvent.get_location_key(this.tile_x_pos,this.tile_y_pos)];let s=!1;if(i&&i.forEach(t=>{t.type===a.event_types.CLIMB&&t.is_set&&t.activation_directions.includes(this.trying_to_push_direction)&&(s=!0)}),!s){let i=e.get_current_position(t);switch(this.trying_to_push_direction){case _.directions.up:i.y-=1;break;case _.directions.down:i.y+=1;break;case _.directions.left:i.x-=1;break;case _.directions.right:i.x+=1}e.position_allowed(i.x,i.y)&&(this.push_timer=this.game.time.events.add(Phaser.Timer.QUARTER,o.normal_push.bind(this,this.game,this.data,e)))}}break}}}i===t.interactable_objects.length&&(this.trying_to_push=!1)}collision_dealer(t){let e=[];for(let i=0;i<this.game.physics.p2.world.narrowphase.contactEquations.length;++i){const s=this.game.physics.p2.world.narrowphase.contactEquations[i];s.bodyA===this.sprite.body.data&&e.push(s.normalA),this.check_interactable_objects(t,s)}if(e.length&&[_.base_actions.WALK,_.base_actions.DASH,_.base_actions.CLIMB].includes(this.current_action)){const t=this.data.map.is_world_map?r.SPEED_LIMIT_TO_STOP_WORLD_MAP:r.SPEED_LIMIT_TO_STOP;if(Math.abs(this.sprite.body.velocity.x)<t&&Math.abs(this.sprite.body.velocity.y)<t){let t=new Array(e.length);e.forEach((e,i)=>{Math.abs(e[0])<r.MINIMAL_SLOPE&&(e[0]=0),Math.abs(e[1])<r.MINIMAL_SLOPE&&(e[1]=0),Math.abs(e[0])>1-r.MINIMAL_SLOPE&&(e[0]=Math.sign(e[0])),Math.abs(e[1])>1-r.MINIMAL_SLOPE&&(e[1]=Math.sign(e[1])),t[i]=_.range_360(Math.atan2(e[1],-e[0]))});const i=_.range_360(Math.atan2(-this.sprite.body.velocity.temp_y,this.sprite.body.velocity.temp_x));t.forEach(t=>{if(t>=i-n.degree15&&t<=i+n.degree15)return this.sprite.body.velocity.temp_x=0,void(this.sprite.body.velocity.temp_y=0)}),this.stop_by_colliding=!0,this.force_direction=!1}else if(this.current_action!==_.base_actions.CLIMB)if(this.stop_by_colliding=!1,1===e.length){const t=r.ROTATION_NORMAL[_.range_360(Math.atan2(e[0][1],-e[0][0])+n.degree15)/n.degree30|0],i=r.ROTATION_KEY[this.arrow_inputs]-t&7;1===i||7===i?(this.force_direction=!0,this.set_direction(t+(i<<1)&7)):this.force_direction=!1}else this.force_direction=!1;else this.stop_by_colliding=!1}else this.stop_by_colliding=!1,this.force_direction=!1;this.apply_speed()}update(t){this.check_control_inputs(),this.set_speed_factors(!0),this.set_current_action(),this.calculate_speed(),this.collision_dealer(t),this.set_action(!0),this.update_shadow(),this.update_half_crop()}config_body(t,e=n.HERO_BODY_RADIUS){this.game.physics.p2.enable(this.sprite,!1),this.reset_anchor(),this.sprite.body.clearShapes(),this.body_radius=e,this.sprite.body.setCircle(this.body_radius,0,0),this.sprite.body.setCollisionGroup(t.hero_collision_group),this.sprite.body.mass=1,this.sprite.body.damping=0,this.sprite.body.angularDamping=0,this.sprite.body.inertia=0,this.sprite.body.setZeroRotation(),this.sprite.body.fixedRotation=!0}}e.Hero=r,r.SPEED_LIMIT_TO_STOP=13,r.SPEED_LIMIT_TO_STOP_WORLD_MAP=9,r.MINIMAL_SLOPE=.1,r.ROTATION_KEY=[null,_.directions.right,_.directions.left,null,_.directions.up,_.directions.up_right,_.directions.up_left,null,_.directions.down,_.directions.down_right,_.directions.down_left,null,null,null,null,null],r.ROTATION_NORMAL=[_.directions.right,_.directions.up_right,_.directions.up_right,_.directions.up,_.directions.up_left,_.directions.up_left,_.directions.left,_.directions.down_left,_.directions.down_left,_.directions.down,_.directions.down_right,_.directions.down_right],r.SPEEDS={[_.directions.right]:{x:1,y:0},[_.directions.left]:{x:-1,y:0},[_.directions.up]:{x:0,y:-1},[_.directions.up_right]:{x:n.INV_SQRT2,y:-n.INV_SQRT2},[_.directions.up_left]:{x:-n.INV_SQRT2,y:-n.INV_SQRT2},[_.directions.down]:{x:0,y:1},[_.directions.down_right]:{x:n.INV_SQRT2,y:n.INV_SQRT2},[_.directions.down_left]:{x:-n.INV_SQRT2,y:n.INV_SQRT2}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Footsteps=void 0;const s=i(0),n=Phaser.Timer.SECOND<<1,a=Phaser.Timer.QUARTER,_=Phaser.Timer.QUARTER,o=s.base_actions.IDLE,r=s.directions.down,h="none",c="right",l="left";e.Footsteps=class{constructor(t,e){this.game=t,this.data=e,this.x_pos=0,this.y_pos=0,this.current_action=o,this.current_direction=r,this.anchor_x=.5,this.anchor_y=.5,this.group=this.game.add.group(),this.group.send_to_back=!0,this.group.base_collision_layer=0,this.dead_steps=new Array(20),this.dead_index=0,this.foot_forward=h,this.can_make_footprint=!0,this.footsteps_time_interval=a,this.new_step_timer=this.game.time.create(!1),this.expire_timer=this.game.time.create(!1),this.footsteps_sprite_base=this.data.info.misc_sprite_base_list.footprints}set_new_step_timer(){this.can_make_footprint=!1,this.new_step_timer.add(this.footsteps_time_interval,()=>{this.can_make_footprint=!0}),this.new_step_timer.start()}set_expire_timer(t,e){this.expire_timer.add(n,()=>{t.animations.play(e)},this),this.expire_timer.start()}kill_step(t){20===this.dead_index?t.destroy():(t.kill(),this.dead_steps[this.dead_index++]=t)}position_footsteps(t){t.scale.x=this.foot_forward===c?-1:1,t.rotation=(this.current_direction+2)*Math.PI/4}create_step(t,e){this.data.npc_group.getIndex(this.group)<0&&this.data.npc_group.add(this.group),this.current_direction=t,this.current_action=e,this.update_foot();const i=this.current_action===s.base_actions.IDLE?"double":"single",n=this.footsteps_sprite_base.getAnimationKey("footprints",i);let a;if(0===this.dead_index){const t=this.footsteps_sprite_base.getActionKey("footprints");a=this.group.create(0,0,t),a.anchor.setTo(this.anchor_x,this.anchor_y),this.footsteps_sprite_base.setAnimation(a,"footprints")}else a=this.dead_steps[--this.dead_index],a.reset(0,0);const _=a.animations.getAnimation(n);_.stop(!0),this.group.base_collision_layer=this.data.map.collision_layer,a.x=this.data.hero.shadow.x,a.y=this.data.hero.shadow.y,this.position_footsteps(a),_.onComplete.addOnce(()=>{this.kill_step(a)}),this.set_expire_timer(a,n),this.set_new_step_timer()}update_foot(){this.footsteps_time_interval=this.current_action===s.base_actions.WALK?a:_,this.current_action===s.base_actions.IDLE?this.foot_forward=h:this.foot_forward=this.foot_forward===l?c:l}clean_all(t=!1){this.new_step_timer.stop(!0),this.expire_timer.stop(!0),this.group.children.forEach(e=>{t?e.destroy():(e.animations.currentAnim.stop(!0),e.animations.currentAnim.onComplete.removeAll(),e.kill())}),this.dead_steps=this.group.children.slice(),this.dead_index=this.group.children.length}destroy(){this.clean_all(!0),this.new_step_timer.destroy(),this.expire_timer.destroy()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TileEventManager=void 0;const s=i(0),n=i(6);class a{constructor(){this.climb_event=!1,this.queue=[]}add(t,e,i,s=!1){switch(t.type){case n.event_types.CLIMB:t.active&&t.is_set&&t.activation_directions.includes(e)&&(this.climb_event=!0)}s?i():this.queue.push({event:t,fire_function:i})}process_queue(){this.climb_event&&(this.queue=this.queue.filter(t=>t.event.type!==n.event_types.JUMP)),this.queue.forEach(t=>t.fire_function())}}class _{constructor(t,e,i,s){this.game=t,this.data=e,this.hero=i,this.collision=s,this.event_timers={},this.on_event=!1,this.walking_on_pillars_tiles=new Set,this.triggered_events={}}set_triggered_event(t){this.triggered_events[t.id]=t}unset_triggered_event(t){delete this.triggered_events[t.id]}event_triggered(t){return t.id in this.triggered_events}fire_triggered_events(){Object.keys(this.triggered_events).forEach(t=>{const e=this.triggered_events[t];e.type===n.event_types.SPEED?e.unset():e.fire()})}fire_event(t,e){this.hero.current_direction===e&&(t.type!==n.event_types.CLIMB||this.hero.idle_climbing?[n.event_types.TELEPORT,n.event_types.JUMP,n.event_types.SLIDER].includes(t.type)&&t.fire():t.fire(e))}check_tile_events(t,e){let i=new a;for(let a=0;a<e.events[t].length;++a){const o=e.events[t][a];if(o.activation_collision_layers.includes(e.collision_layer)&&(o.type===n.event_types.JUMP&&o.jump_near_collision(),o.is_active(this.hero.current_direction)))if(o.type===n.event_types.SPEED)this.hero.extra_speed!==o.speed&&i.add(o,this.hero.current_direction,o.fire.bind(o),!0);else if(o.type!==n.event_types.TELEPORT||o.advance_effect)if([n.event_types.STEP,n.event_types.COLLISION].includes(o.type)&&!this.event_triggered(o))i.add(o,this.hero.current_direction,o.set.bind(o));else{if(o.activation_directions.includes(this.hero.current_direction)&&[s.base_actions.WALK,s.base_actions.DASH,s.base_actions.CLIMB].includes(this.hero.current_action)){if(this.event_timers[o.id]&&!this.event_timers[o.id].timer.expired)continue;i.add(o,this.hero.current_direction,()=>{this.event_timers[o.id]=this.game.time.events.add(_.EVENT_INIT_DELAY,this.fire_event.bind(this,o,this.hero.current_direction))})}}else i.add(o,this.hero.current_direction,this.fire_event.bind(this,o,this.hero.current_direction))}i.process_queue()}}e.TileEventManager=_,_.EVENT_INIT_DELAY=350},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GameEventManager=e.interaction_patterns=void 0;const s=i(0),n=i(23),a=i(24);var _;!function(t){t.TIK_TAK_TOE="tik_tak_toe",t.CROSS="cross"}(_=e.interaction_patterns||(e.interaction_patterns={}));class o{constructor(t,e){this.game=t,this.data=e,this.on_event=!1,this.control_enable=!0,this.fire_next_step=()=>{},this.set_controls()}set_controls(){let t=[{key:this.data.gamepad.A,on_down:()=>{this.data.hero.in_action()||this.data.in_battle||!this.control_enable||(this.on_event?(this.control_enable=!1,this.fire_next_step()):this.search_for_npc())}}];this.data.control_manager.set_control(t,{persist:!0})}search_for_npc(){for(let t=0;t<this.data.map.npcs.length;++t){const e=this.data.map.npcs[t];if(e.npc_type===a.npc_types.SPRITE)continue;if(s.is_close(this.data.hero.current_direction,this.data.hero.sprite.x,this.data.hero.sprite.y,e.sprite.x,e.sprite.y,e.talk_range_factor)){this.data.hero.stop_char(),this.on_event=!0,this.data.force_stop_movement=!0,this.control_enable=!1,this.set_npc_event(e);break}}}set_npc_event(t){t.npc_type===a.npc_types.NORMAL?t.message?this.manage_npc_dialog(t):this.fire_npc_events(t):t.npc_type===a.npc_types.SHOP&&(this.data.shop_open||(this.set_npc_and_hero_directions(t),this.data.shop_menu.open_menu(t.shop_key,()=>{this.on_event=!1,this.reset_npc_direction(t),this.data.force_stop_movement=!1,this.control_enable=!0})))}set_npc_and_hero_directions(t){const e=t.sprite.x,i=t.sprite.y,n=this.data.dbs.npc_db[t.key_name].interaction_pattern,a=o.get_interaction_directions(this.data.hero.sprite.x,this.data.hero.sprite.y,e,i,n,t.body_radius);this.data.hero.set_direction(a.hero_direction),this.data.hero.play(s.base_actions.IDLE,s.reverse_directions[a.hero_direction]),t.play(s.base_actions.IDLE,s.reverse_directions[a.target_direction])}reset_npc_direction(t){const e=this.data.dbs.npc_db[t.key_name].initial_action,i=this.data.dbs.npc_db[t.key_name].actions[e].initial_direction;t.play(e,i)}manage_npc_dialog(t){const e=new n.DialogManager(this.game,this.data);e.set_dialog(t.message,t.avatar,this.data.hero.current_direction),this.set_npc_and_hero_directions(t),this.fire_next_step=e.next.bind(e,e=>{e&&(this.on_event=!1,this.data.force_stop_movement=!1,this.reset_npc_direction(t),this.fire_npc_events(t)),this.control_enable=!0}),this.fire_next_step()}fire_npc_events(t){t.events.forEach(t=>{t.fire()})}static get_interaction_directions(t,e,i,n,a,o){let r,h;if(a===_.CROSS){let a=t+(-n-i),_=-t+(-n+i);-e>=a&&-e>=_?r=s.directions.up:-e<=a&&-e>=_?r=s.directions.right:-e<=a&&-e<=_?r=s.directions.down:-e>=a&&-e<=_&&(r=s.directions.left)}return t<=i-o&&e>=n+o?(h=s.directions.up_right,r=a===_.TIK_TAK_TOE?s.directions.down_left:r):t<=i-o&&e>=n-o&&e<=n+o?(h=s.directions.right,r=a===_.TIK_TAK_TOE?s.directions.left:r):t<=i-o&&e<=n-o?(h=s.directions.down_right,r=a===_.TIK_TAK_TOE?s.directions.up_left:r):t>=i-o&&t<=i+o&&e<=n-o?(h=s.directions.down,r=a===_.TIK_TAK_TOE?s.directions.up:r):t>=i+o&&e<=n-o?(h=s.directions.down_left,r=a===_.TIK_TAK_TOE?s.directions.up_right:r):t>=i+o&&e>=n-o&&e<=n+o?(h=s.directions.left,r=a===_.TIK_TAK_TOE?s.directions.right:r):t>=i+o&&e>=n+o?(h=s.directions.up_left,r=a===_.TIK_TAK_TOE?s.directions.down_right:r):t>=i-o&&t<=i+o&&e>=n+o&&(h=s.directions.up,r=a===_.TIK_TAK_TOE?s.directions.down:r),{hero_direction:h,target_direction:r}}}e.GameEventManager=o},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BattleEvent=void 0;const s=i(17),n=i(19);class a extends n.GameEvent{constructor(t,e,i,s){super(t,e,n.event_types.BATTLE),this.background_key=i,this.enemy_party_key=s}fire(){this.data.hero.stop_char(!0),this.battle=new s.Battle(this.game,this.data,this.background_key,this.enemy_party_key),this.battle.start_battle()}}e.BattleEvent=a},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function _(t){try{r(s.next(t))}catch(t){a(t)}}function o(t){try{r(s.throw(t))}catch(t){a(t)}}function r(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(_,o)}r((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.BattleLog=void 0;const n=i(1),a=i(13),_=i(9),o=i(0),r=i(5);e.BattleLog=class{constructor(t){this.game=t,this.x=t.camera.x,this.y=t.camera.y,this.logs=[],this.logs.push(this.create(this.y+139)),this.logs.push(this.create(this.y+151))}create(t){const e=this.game.add.bitmapText(this.x+3,t,"gs-bmp-font","",n.FONT_SIZE);return e.tint=n.DEFAULT_FONT_COLOR,e.smoothed=!1,e.autoRound=!0,e}add(t){let e;const i=new Promise(t=>{e=t});return""===this.logs[0].text?(this.logs[0].setText(t),this.logs[1].setText(""),e()):""===this.logs[1].text?(this.logs[1].setText(t),e()):(this.game.add.tween(this.logs[0]).to({y:this.y+127},50,Phaser.Easing.Linear.None,!0),this.game.add.tween(this.logs[1]).to({y:this.y+139},50,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.logs[0].y=this.y+151,this.logs[0].setText(t),this.logs.reverse(),e()})),i}add_ability(t,e,i,n,_=!1){return s(this,void 0,void 0,(function*(){switch(_?a.ability_msg_types.USE:e.msg_type){case a.ability_msg_types.ATTACK:yield this.add(t.name+" attacks!");break;case a.ability_msg_types.CAST:yield this.add(`${t.name} casts ${e.name}!`);break;case a.ability_msg_types.UNLEASH:yield this.add(`${t.name} unleashes ${e.name}!`);break;case a.ability_msg_types.SUMMON:yield this.add(`${t.name} summons ${e.name}!`);break;case a.ability_msg_types.USE:yield this.add(`${t.name} uses ${i||e.name}!`);break;case a.ability_msg_types.DEFEND:yield this.add(t.name+" is defending!");break;case a.ability_msg_types.ITEM_UNLEASH:yield this.add(`${t.name}'s ${i}`),yield this.add(`lets out a howl! ${e.name}!`);break;case a.ability_msg_types.SET_DJINN:yield this.add(`${n} is set to ${t.name}!`)}}))}add_recover_effect(t){return s(this,void 0,void 0,(function*(){const e=t.char;switch(t.type){case _.effect_types.MAX_HP:case _.effect_types.MAX_PP:case _.effect_types.ATTACK:case _.effect_types.DEFENSE:case _.effect_types.AGILITY:case _.effect_types.LUCK:yield this.add(`${e.name}'s ${_.effect_names[t.type]} returns to normal!`);break;case _.effect_types.POWER:case _.effect_types.RESIST:yield this.add(`${e.name}'s ${o.element_names[t.attribute]} ${_.effect_names[t.type]} returns to normal!`);break;case _.effect_types.TEMPORARY_STATUS:case _.effect_types.PERMANENT_STATUS:yield this.add(r.on_remove_status_msg[t.status_key_name](e))}}))}add_damage(t,e,i=!1){return s(this,void 0,void 0,(function*(){const s=i?"PP":"HP",n=i?r.main_stats.CURRENT_PP:r.main_stats.CURRENT_HP,a=i?r.main_stats.MAX_PP:r.main_stats.MAX_HP;t>=0?(e[n]-t<0&&(t=e[n]),yield this.add(`${e.name} takes ${t.toString()} damage!`)):e[n]>=e[a]?yield this.add(`${e.name}'s ${s} is fully restored`):yield this.add(`${e.name} recovers ${Math.abs(t).toString()} ${s}!`)}))}clear(){this.logs[0].setText(""),this.logs[1].setText("")}destroy(){this.logs[0].destroy(),this.logs[1].destroy()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MainBattleMenu=void 0;const s=i(26),n=i(0),a=i(1),_=i(7),o=i(48),r=i(49),h=i(50),c=i(52),l=i(53),d=i(17),u=i(5),p=i(3),m=i(18),g=i(55),w=i(13);e.MainBattleMenu=class{constructor(t,e,i,_){this.game=t,this.data=e,this.on_abilities_choose=i,this.choose_targets=_,this.start_buttons_keys=["fight","flee","status"],this.start_horizontal_menu=new m.HorizontalMenu(this.game,this.data,this.start_buttons_keys,this.start_buttons_keys.map(t=>n.capitalize(t)),{on_press:this.start_button_press.bind(this)},76,!0),this.inner_buttons_keys=["attack","psynergy","djinni","summon","item","defend"],this.inner_horizontal_menu=new m.HorizontalMenu(this.game,this.data,this.inner_buttons_keys,this.inner_buttons_keys.map(t=>n.capitalize(t)),{on_press:this.inner_button_press.bind(this),on_cancel:this.inner_menu_cancel.bind(this)},60,!0),this.chars_status_window=new s.CharsStatusWindow(this.game,this.data,!0,!0),this.description_window=new o.BattleDescriptionWindow(this.game),this.djinn_window=new h.BattleDjinnWindow(this.game,this.data),this.psynergy_window=new r.BattlePsynergyWindow(this.game,this.data),this.item_window=new c.BattleItemWindow(this.game,this.data),this.summon_window=new l.BattleSummonWindow(this.game,this.data),this.status_window=new g.BattleStatusWindow(this.game,this.data),this.group=this.game.add.group(),this.avatar_sprite=this.group.create(0,a.GAME_HEIGHT-a.AVATAR_SIZE),this.avatar_sprite.alpha=0}start_button_press(){switch(this.start_buttons_keys[this.start_horizontal_menu.selected_button_index]){case"fight":this.start_horizontal_menu.close(()=>{this.current_buttons=this.inner_buttons_keys,this.abilities={},this.data.info.party_data.members.slice(0,d.Battle.MAX_CHARS_IN_BATTLE).forEach(t=>{this.abilities[t.key_name]=[]}),this.djinni_already_used=n.ordered_elements.reduce((t,e)=>(t[e]=0,t),{}),this.inner_horizontal_menu.open();let t=this.data.info.party_data.members[this.current_char_index];for(;t.is_paralyzed()||t.has_permanent_status(u.permanent_status.DOWNED);)if(this.abilities[this.data.info.party_data.members[this.current_char_index].key_name].push({key_name:"",targets:[]}),++this.current_char_index,t=this.data.info.party_data.members[this.current_char_index],this.current_char_index>=d.Battle.MAX_CHARS_IN_BATTLE||this.current_char_index>=this.data.info.party_data.members.length){this.current_char_index=0,this.on_abilities_choose(this.abilities);break}this.set_avatar()});break;case"status":this.start_horizontal_menu.close(()=>{this.status_window.open(this.data.info.party_data.members[0],()=>{this.start_horizontal_menu.open()})})}}inner_button_press(){switch(this.current_buttons[this.inner_horizontal_menu.selected_button_index]){case"attack":this.inner_horizontal_menu.deactivate(!0),this.choose_targets("attack","attack",t=>{t?(this.abilities[this.data.info.party_data.members[this.current_char_index].key_name].push({key_name:"attack",targets:t}),this.inner_horizontal_menu.activate(),this.change_char(1)):this.inner_horizontal_menu.activate()},this.data.info.party_data.members[this.current_char_index]);break;case"psynergy":this.on_ability_choose(this.psynergy_window,!1,"psynergy");break;case"djinni":this.on_ability_choose(this.djinn_window,!0,"djinni",this.psynergy_window);break;case"summon":this.on_ability_choose(this.summon_window,!0,"summon",this.djinni_already_used);break;case"item":this.on_ability_choose(this.item_window,!1,"item");break;case"defend":this.inner_horizontal_menu.deactivate(!0),this.choose_targets("defend","defend",t=>{t?(this.abilities[this.data.info.party_data.members[this.current_char_index].key_name].push({key_name:"defend",targets:t}),this.inner_horizontal_menu.activate(),this.change_char(1)):this.inner_horizontal_menu.activate()},this.data.info.party_data.members[this.current_char_index])}}on_ability_choose(t,e,i,...s){this.inner_horizontal_menu.deactivate(!0),this.description_window.open(e),t.open(this.data.info.party_data.members[this.current_char_index],(e,s)=>{if(e){let n,a=null;if("djinni"===i&&this.data.info.djinni_list[e].status===_.djinn_status.STANDBY)n=e,e="set_djinn";else if("summon"===i){const t=this.data.info.summons_list[e].requirements;a=p.mapValues(this.djinni_already_used,(e,i)=>e+t[i]),this.djinni_already_used=a}this.description_window.hide(),this.choose_targets(e,i,i=>{i?(this.abilities[this.data.info.party_data.members[this.current_char_index].key_name].push({key_name:e,targets:i,djinn_key_name:n,item_slot:s}),t.close(),this.description_window.close(),this.inner_horizontal_menu.activate(),this.change_char(1)):(a&&(this.djinni_already_used=p.mapValues(this.djinni_already_used,(t,e)=>t-a[e])),this.description_window.show(),t.show())},this.data.info.party_data.members[this.current_char_index],s)}else t.window_open&&t.close(),this.description_window.close(),this.inner_horizontal_menu.activate()},this.description_window.set_description.bind(this.description_window),...s)}change_char(t,e=!1){const i=this.data.info.party_data.members[this.current_char_index],s=this.abilities[i.key_name].length;if(i.turns!==s&&s||(this.current_char_index+=t),this.current_char_index>=d.Battle.MAX_CHARS_IN_BATTLE||this.current_char_index>=this.data.info.party_data.members.length)this.current_char_index=0,this.on_abilities_choose(this.abilities);else if(this.current_char_index>=0){const i=this.data.info.party_data.members[this.current_char_index];if(e){const t=this.abilities[i.key_name].pop();if(this.data.info.abilities_list[t.key_name].ability_category===w.ability_categories.SUMMON){const e=this.data.info.summons_list[t.key_name].requirements;this.djinni_already_used=p.mapValues(this.djinni_already_used,(t,i)=>t-e[i])}}i.is_paralyzed()||i.has_permanent_status(u.permanent_status.DOWNED)?this.change_char(t,e):(this.set_avatar(),this.inner_horizontal_menu.close(void 0,!1),this.inner_horizontal_menu.open())}else this.current_char_index=0,this.inner_menu_cancel()}set_avatar(){this.avatar_sprite.alpha=1,this.avatar_sprite.loadTexture("avatars",this.data.info.party_data.members[this.current_char_index].key_name)}hide_avatar(){this.avatar_sprite.alpha=0}inner_menu_cancel(){const t=this.data.info.party_data.members[this.current_char_index].key_name;this.current_char_index>0||1===this.abilities[t].length?this.change_char(-1,!0):(this.inner_horizontal_menu.close(),this.hide_avatar(),this.start_horizontal_menu.open())}update_position(){this.chars_status_window.update_position(!0),this.start_horizontal_menu.update_position(),this.inner_horizontal_menu.update_position(),this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}is_active(){return this.start_horizontal_menu.menu_active||this.inner_horizontal_menu.menu_active}open_menu(){this.current_char_index=0,this.start_horizontal_menu.open(),this.update_position(),this.chars_status_window.update_chars_info(),this.chars_status_window.show()}close_menu(){this.is_active()&&(this.hide_avatar(),this.start_horizontal_menu.close(),this.inner_horizontal_menu.close())}destroy_menu(){this.chars_status_window.destroy(),this.inner_horizontal_menu.destroy(),this.start_horizontal_menu.destroy(),this.description_window.destroy(),this.djinn_window.destroy(),this.psynergy_window.destroy(),this.item_window.destroy(),this.summon_window.destroy(),this.group.destroy()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BattleDescriptionWindow=void 0;const s=i(2);e.BattleDescriptionWindow=class{constructor(t){this.game=t,this.base_window=new s.Window(this.game,0,40,236,28),this.description=this.base_window.set_text_in_position("",8,12)}update_position(t){t?this.base_window.update_position({y:32}):this.base_window.update_position({y:40})}set_description(t){this.base_window.update_text(t,this.description)}open(t=!1){this.is_open=!0,this.update_position(t),this.base_window.show(void 0,!1)}show(){this.base_window.show(void 0,!1)}hide(){this.base_window.close(void 0,!1)}close(){this.is_open=!1,this.base_window.close(void 0,!1)}destroy(){this.base_window.destroy(!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BattlePsynergyWindow=void 0;const s=i(2),n=i(1),a=i(5),_=i(4),o=i(11),r=n.YELLOW_FONT_COLOR,h=n.RED_FONT_COLOR,c=90+n.FONT_SIZE;e.BattlePsynergyWindow=class{constructor(t,e){this.game=t,this.data=e,this.window_open=!1,this.window_active=!1,this.text_sprites_in_window=[],this.icon_sprites_in_window=[],this.misc_sprites_in_window=[],this.base_window=new s.Window(this.game,72,72,164,84),this.group=this.game.add.group(),this.group.alpha=0,this.button=this.group.create(48,136,"buttons","psynergy"),this.highlight_bar=this.game.add.graphics(0,0),this.highlight_bar.blendMode=PIXI.blendModes.SCREEN,this.highlight_bar.alpha=0,this.base_window.add_sprite_to_group(this.highlight_bar),this.highlight_bar.beginFill(this.base_window.color,1),this.highlight_bar.drawRect(8,0,152,8),this.highlight_bar.endFill()}select_ability(t){this.ability_index=t;let e=83+16*this.ability_index,i={type:_.CursorManager.CursorTweens.POINT,variant:_.PointVariants.NORMAL};this.data.cursor_manager.move_to({x:66,y:e},{animate:!1,tween_config:i}),this.change_ability()}next_ability(){1!==this.abilities.length&&this.select_ability((this.ability_index+1)%this.abilities.length)}previous_ability(){1!==this.abilities.length&&this.select_ability((this.ability_index+this.abilities.length-1)%this.abilities.length)}next_page(){1!==this.page_number&&(this.page_index=(this.page_index+1)%this.page_number,this.change_page())}previous_page(){1!==this.page_number&&(this.page_index=(this.page_index+this.page_number-1)%this.page_number,this.change_page())}update_position(){this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}set_page_number(){const t=this.all_abilities.length;this.page_number=1+((t-1)/5|0),this.page_index>=this.page_number&&(this.page_index=this.page_number-1),this.base_window.page_indicator.initialize(this.page_number,this.page_index,o.PageIndicatorModes.FLASH)}change_page(){this.set_abilities_list(),this.ability_index>=this.abilities.length&&(this.ability_index=this.abilities.length-1,this.select_ability(this.ability_index)),this.set_description&&this.set_description(this.data.info.abilities_list[this.abilities[this.ability_index]].description),this.set_highlight_bar(),this.base_window.page_indicator.select_page(this.page_index)}change_ability(){this.set_description&&this.set_description(this.data.info.abilities_list[this.abilities[this.ability_index]].description),this.set_highlight_bar()}change_djinni(t){this.djinni=[t],this.clear_sprites(),this.base_window.page_indicator.terminante(),this.mount_window(),this.set_highlight_bar()}set_highlight_bar(){this.highlight_bar.y=5+this.ability_index*(n.ICON_HEIGHT+2)+4}set_abilities_list(){this.clear_sprites(!1),this.abilities=this.all_abilities.slice(5*this.page_index,5*(this.page_index+1));for(let t=0;t<this.abilities.length;++t){const e=this.abilities[t],i=10,s=5+t*(n.ICON_HEIGHT+2),a=i+(n.ICON_WIDTH>>1),_=s+(n.ICON_HEIGHT>>1),o=10+n.ICON_WIDTH+2;let c=n.DEFAULT_FONT_COLOR;this.psy_sealed?c=n.PURPLE_FONT_COLOR:this.char.current_pp<this.data.info.abilities_list[e].pp_cost&&(c=n.RED_FONT_COLOR);const l=this.base_window.set_text_in_position(this.data.info.abilities_list[e].name,o,s+4,!1,!1,c);this.text_sprites_in_window.push(l);const d=this.base_window.set_text_in_position("PP",96,s+4,!1,!1,c);this.text_sprites_in_window.push(d),this.icon_sprites_in_window.push(this.base_window.create_at_group(a,_,"abilities_icons",void 0,e)),this.icon_sprites_in_window[t].anchor.setTo(.5,.5),this.misc_sprites_in_window.push(this.base_window.create_at_group(129,s+5,this.data.info.abilities_list[e].element+"_star")),this.misc_sprites_in_window.push(this.base_window.create_at_group(137,s+4,"ranges",void 0,this.data.info.abilities_list[e].range.toString()));const u=this.base_window.set_text_in_position(this.data.info.abilities_list[e].pp_cost,126,s+4,!0,!1,c);this.text_sprites_in_window.push(u),this.expanded&&(this.gained_abilities.includes(e)?(this.base_window.update_text_color(r,l),this.base_window.update_text_color(r,u),this.base_window.update_text_color(r,d)):this.lost_abilities.includes(e)&&(this.base_window.update_text_color(h,l),this.base_window.update_text_color(h,u),this.base_window.update_text_color(h,d)))}}set_abilities(){if(this.current_abilities=this.char.abilities.filter(t=>t in this.data.info.abilities_list&&this.data.info.abilities_list[t].is_battle_ability),this.all_abilities=this.current_abilities,this.expanded){const t=this.char.preview_djinn_change([],this.djinni.map(t=>t.key_name),this.next_djinni_status);this.next_abilities=t.abilities.filter(t=>t in this.data.info.abilities_list&&this.data.info.abilities_list[t].is_battle_ability);let e=new Set(this.current_abilities),i=new Set(this.next_abilities);this.gained_abilities=[...i].filter(t=>!e.has(t)),this.lost_abilities=[...e].filter(t=>!i.has(t)),this.intersection_abilities=[...e].filter(t=>i.has(t)),this.all_abilities=this.gained_abilities.concat(this.intersection_abilities,this.lost_abilities),this.psy_info_1_text=this.base_window.set_text_in_position("",40,89),this.psy_info_2_text=this.base_window.set_text_in_position("",40,c),0===this.gained_abilities.length&&0===this.lost_abilities.length?(this.base_window.update_text("* No change",this.psy_info_1_text),this.base_window.update_text_color(n.DEFAULT_FONT_COLOR,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):this.gained_abilities.length&&0===this.lost_abilities.length?(this.base_window.update_text("* Psynergy Gained",this.psy_info_1_text),this.base_window.update_text_color(r,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):0===this.gained_abilities.length&&this.lost_abilities.length?(this.base_window.update_text("* Psynergy Lost",this.psy_info_1_text),this.base_window.update_text_color(h,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):this.gained_abilities.length&&this.lost_abilities.length&&(this.base_window.update_text("* Psynergy Gained",this.psy_info_1_text),this.base_window.update_text_color(r,this.psy_info_1_text),this.base_window.update_text("* Psynergy Lost",this.psy_info_2_text),this.base_window.update_text_color(h,this.psy_info_2_text))}}mount_window(){this.set_abilities(),this.set_abilities_list(),this.set_page_number(),this.expanded?(this.base_window.update_size({height:108}),this.base_window.update_position({x:0,y:40})):(this.base_window.update_size({height:84}),this.base_window.update_position({x:72,y:72}))}clear_sprites(t=!0){for(let t=0;t<this.icon_sprites_in_window.length;++t)this.base_window.remove_from_group(this.icon_sprites_in_window[t]);this.icon_sprites_in_window=[];for(let t=0;t<this.misc_sprites_in_window.length;++t)this.base_window.remove_from_group(this.misc_sprites_in_window[t]);this.misc_sprites_in_window=[];for(let t=0;t<this.text_sprites_in_window.length;++t)this.base_window.remove_text(this.text_sprites_in_window[t]);t&&(this.psy_info_1_text&&(this.base_window.remove_text(this.psy_info_1_text),this.psy_info_1_text=null),this.psy_info_2_text&&(this.base_window.remove_text(this.psy_info_2_text),this.psy_info_2_text=null)),this.text_sprites_in_window=[]}ability_choose(){let t=[{key:this.data.gamepad.LEFT,on_down:this.previous_page.bind(this)},{key:this.data.gamepad.RIGHT,on_down:this.next_page.bind(this)},{key:this.data.gamepad.UP,on_down:this.previous_ability.bind(this)},{key:this.data.gamepad.DOWN,on_down:this.next_ability.bind(this)},{key:this.data.gamepad.A,on_down:()=>{this.expanded||(this.choosen_ability=this.abilities[this.ability_index],this.hide(this.close_callback))}},{key:this.data.gamepad.B,on_down:()=>{this.expanded||(this.choosen_ability=null,this.close(this.close_callback))}}];this.data.control_manager.set_control(t,{loop_configs:{vertical:!0,horizontal:!0}})}open(t,e,i,s=!1,n=null,_=null){this.char=t,this.close_callback=e,this.set_description=i,this.expanded=s,this.djinni=[n],this.next_djinni_status=[_],this.psy_sealed=this.char.has_temporary_status(a.temporary_status.SEAL),this.choosen_ability=null,this.page_index=0,this.ability_index=0,this.group.alpha=1,this.update_position(),this.mount_window(),this.set_highlight_bar(),this.expanded?(this.button.alpha=0,this.highlight_bar.alpha=0):(this.select_ability(0),this.ability_choose(),this.button.alpha=1,this.highlight_bar.alpha=1),this.set_description&&this.set_description(this.data.info.abilities_list[this.abilities[this.ability_index]].description),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0},!1)}show(){this.group.alpha=1,this.highlight_bar.alpha=1,this.select_ability(this.ability_index),this.ability_choose(),this.base_window.show(()=>{this.window_active=!0},!1)}hide(t){this.group.alpha=0,this.highlight_bar.alpha=0,this.data.cursor_manager.hide(),this.base_window.close(()=>{this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}close(t){this.clear_sprites(),this.base_window.page_indicator.terminante(),this.group.alpha=0,this.highlight_bar.alpha=0,this.data.cursor_manager.hide(),this.data.control_manager.reset(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}destroy(){this.base_window.destroy(!1),this.group.destroy(),this.data.cursor_manager.hide(),this.data.control_manager.reset()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BattleDjinnWindow=void 0;const s=i(2),n=i(7),a=i(51),_=i(4),o=i(11);e.BattleDjinnWindow=class{constructor(t,e){this.game=t,this.data=e,this.base_window=new s.Window(this.game,160,72,76,84),this.stats_window=new a.DjinnStatsWindow(this.game,this.data),this.group=this.game.add.group(),this.group.alpha=0,this.button=this.group.create(140,136,"buttons","djinni"),this.highlight_bar=this.game.add.graphics(0,0),this.highlight_bar.blendMode=PIXI.blendModes.SCREEN,this.highlight_bar.alpha=0,this.base_window.add_sprite_to_group(this.highlight_bar),this.highlight_bar.beginFill(this.base_window.color,1),this.highlight_bar.drawRect(8,0,64,8),this.highlight_bar.endFill(),this.djinn_names=[],this.stars_sprites=[],this.open_psy_key=null}select_djinn(t){this.djinn_index=t;let e=84+16*this.djinn_index,i={type:_.CursorManager.CursorTweens.POINT,variant:_.PointVariants.NORMAL};this.data.cursor_manager.move_to({x:154,y:e},{animate:!1,tween_config:i}),this.change_djinn(),this.psynergy_window_open&&this.psynergy_window.change_djinni(this.data.info.djinni_list[this.djinni[this.djinn_index]])}next_djinn(){1!==this.djinni.length&&this.select_djinn((this.djinn_index+1)%this.djinni.length)}previous_djinn(){1!==this.djinni.length&&this.select_djinn((this.djinn_index+this.djinni.length-1)%this.djinni.length)}next_page(){1!==this.page_number&&(this.page_index=(this.page_index+1)%this.page_number,this.change_page())}previous_page(){1!==this.page_number&&(this.page_index=(this.page_index+this.page_number-1)%this.page_number,this.change_page())}update_position(){this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}call_set_description(){const t=this.data.info.djinni_list[this.djinni[this.djinn_index]];if(this.set_description)switch(t.status){case n.djinn_status.SET:this.set_description(t.description);break;case n.djinn_status.STANDBY:this.set_description("Ready to summon. Choose to set it again.");break;case n.djinn_status.RECOVERY:this.set_description("This Djinn is still recovering.")}}change_page(){this.config_page(),this.djinn_index>=this.djinni.length&&(this.djinn_index=this.djinni.length-1,this.select_djinn(this.djinn_index)),this.call_set_description(),this.set_highlight_bar(),this.base_window.page_indicator.select_page(this.page_index),this.update_stats()}change_djinn(){this.call_set_description(),this.set_highlight_bar(),this.update_stats()}set_highlight_bar(){this.highlight_bar.y=8+16*this.djinn_index}config_page(){this.clear_sprites(),this.djinni=this.all_djinni.slice(5*this.page_index,5*(this.page_index+1));for(let t=0;t<this.djinni.length;++t){const e=this.data.info.djinni_list[this.djinni[t]],i=8+16*t,s=this.base_window.create_at_group(9,i+1,e.element+"_star");let a;switch(this.stars_sprites.push(s),e.status){case n.djinn_status.SET:a=n.djinn_font_colors[n.djinn_status.SET];break;case n.djinn_status.STANDBY:a=n.djinn_font_colors[n.djinn_status.STANDBY];break;case n.djinn_status.RECOVERY:a=n.djinn_font_colors[n.djinn_status.RECOVERY]}const _=this.base_window.set_text_in_position(e.name,17,i,!1,!1,a);if(this.djinn_names.push(_),e.status===n.djinn_status.RECOVERY){const t=this.base_window.set_text_in_position((e.recovery_turn+1).toString(),67,i,!0,!1,n.djinn_font_colors[n.djinn_status.RECOVERY]);this.djinn_names.push(t)}}}set_page_number(){const t=this.all_djinni.length;this.page_number=1+((t-1)/5|0),this.page_index>=this.page_number&&(this.page_index=this.page_number-1),this.base_window.page_indicator.initialize(this.page_number,this.page_index,o.PageIndicatorModes.FLASH)}get_next_status(){let t;switch(this.data.info.djinni_list[this.djinni[this.djinn_index]].status){case n.djinn_status.SET:t=n.djinn_status.STANDBY;break;case n.djinn_status.STANDBY:t=n.djinn_status.SET;break;case n.djinn_status.RECOVERY:t=n.djinn_status.RECOVERY}return t}update_stats(){const t=this.data.info.djinni_list[this.djinni[this.djinn_index]];this.stats_window.set_djinn(t,this.get_next_status())}mount_window(){this.all_djinni=this.char.djinni,this.set_page_number(),this.config_page(),this.update_stats()}clear_sprites(){this.stars_sprites.forEach(t=>{this.base_window.remove_from_group(t,!0)}),this.djinn_names.forEach(t=>{this.base_window.remove_text(t)})}show_psynergy(){if(this.psynergy_window_open)return;this.psynergy_window.open(this.char,void 0,void 0,!0,this.data.info.djinni_list[this.djinni[this.djinn_index]],this.get_next_status()),this.psynergy_window_open=!0;let t=[{key:this.data.gamepad.LEFT,on_down:this.psynergy_window.previous_page.bind(this.psynergy_window)},{key:this.data.gamepad.RIGHT,on_down:this.psynergy_window.next_page.bind(this.psynergy_window)},{key:this.data.gamepad.UP,on_down:this.previous_djinn.bind(this)},{key:this.data.gamepad.DOWN,on_down:this.next_djinn.bind(this)}];this.data.control_manager.set_control(t,{loop_configs:{vertical:!0,horizontal:!0}})}hide_psynergy(){this.psynergy_window_open&&(this.psynergy_window.close(),this.psynergy_window_open=!1,this.select_djinn(this.djinn_index),this.djinn_choose())}djinn_choose(){let t=[{key:this.data.gamepad.LEFT,on_down:this.previous_page.bind(this)},{key:this.data.gamepad.RIGHT,on_down:this.next_page.bind(this)},{key:this.data.gamepad.UP,on_down:this.previous_djinn.bind(this)},{key:this.data.gamepad.DOWN,on_down:this.next_djinn.bind(this)},{key:this.data.gamepad.A,on_down:()=>{const t=this.data.info.djinni_list[this.djinni[this.djinn_index]];t.status!==n.djinn_status.RECOVERY&&(this.choosen_ability=t.ability_key_name,this.hide(this.close_callback))}},{key:this.data.gamepad.B,on_down:()=>{this.choosen_ability=null,this.close(this.close_callback)}}];if(this.data.control_manager.set_control(t,{loop_configs:{vertical:!0,horizontal:!0}}),!this.open_psy_key){let t=[{key:this.data.gamepad.R,on_down:this.show_psynergy.bind(this),on_up:this.hide_psynergy.bind(this)}];this.open_psy_key=this.data.control_manager.set_control(t,{persist:!0,no_reset:!0})}}open(t,e,i,s){this.char=t,this.close_callback=e,this.set_description=i,this.psynergy_window=s,this.psynergy_window_open=!1,this.group.alpha=1,this.djinn_index=0,this.page_index=0,this.choosen_ability=null,this.highlight_bar.alpha=1,this.stats_window.open(this.char),this.update_position(),this.set_highlight_bar(),this.mount_window(),this.select_djinn(0),this.djinn_choose(),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0},!1)}show(){this.group.alpha=1,this.highlight_bar.alpha=1,this.select_djinn(this.djinn_index),this.stats_window.open(this.char),this.update_stats(),this.djinn_choose(),this.base_window.show(()=>{this.window_active=!0},!1)}hide(t){this.group.alpha=0,this.highlight_bar.alpha=0,this.stats_window.close(),this.data.cursor_manager.hide(),this.data.control_manager.detach_bindings(this.open_psy_key),this.open_psy_key=null,this.base_window.close(()=>{this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}close(t){this.clear_sprites(),this.base_window.page_indicator.terminante(),this.group.alpha=0,this.highlight_bar.alpha=0,this.data.cursor_manager.hide(),this.data.control_manager.reset(),this.data.control_manager.detach_bindings(this.open_psy_key),this.open_psy_key=null,this.stats_window.close(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}destroy(){this.base_window.destroy(!1),this.stats_window.destroy(),this.group.destroy(),this.data.cursor_manager.hide(),this.data.control_manager.reset()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DjinnStatsWindow=void 0;const s=i(2),n=i(1),a=i(5);e.DjinnStatsWindow=class{constructor(t,e){this.game=t,this.data=e,this.base_window=new s.Window(this.game,0,64,156,84);const i=["HP","PP","Attack","Defense","Agility","Luck"];this.before_stats={},this.after_stats={},this.up_arrows={},this.down_arrows={};for(let t=0;t<a.ordered_main_stats.length;++t)this.base_window.set_text_in_position(i[t],8,16+t*n.FONT_SIZE),this.before_stats[a.ordered_main_stats[t]]=this.base_window.set_text_in_position("",78,16+t*n.FONT_SIZE,!0),this.after_stats[a.ordered_main_stats[t]]=this.base_window.set_text_in_position("",126,16+t*n.FONT_SIZE,!0),this.up_arrows[a.ordered_main_stats[t]]=this.base_window.create_at_group(80,15+t*n.FONT_SIZE,"stat_up"),this.down_arrows[a.ordered_main_stats[t]]=this.base_window.create_at_group(80,15+t*n.FONT_SIZE,"stat_down");this.hide_arrows(),this.before_class_text=this.base_window.set_text_in_position("",8,8),this.after_class_text=this.base_window.set_text_in_position("",88,8),this.base_window.create_at_group(80,16,"arrow_change").rotation=-n.degree90,this.base_window.create_at_group(33,73,"shift_keyboard",0),this.base_window.create_at_group(32,72,"shift_keyboard"),this.base_window.set_text_in_position(": Psy. Gained",55,72),this.window_open=!1}hide_arrows(){for(let t=0;t<a.ordered_main_stats.length;++t)this.down_arrows[a.ordered_main_stats[t]].alpha=0,this.up_arrows[a.ordered_main_stats[t]].alpha=0}set_stats(){this.base_window.update_text(this.char.class.name,this.before_class_text);const t=this.char.preview_djinn_change(a.ordered_main_stats,[this.djinn.key_name],[this.next_djinni_status]);this.base_window.update_text(t.class_name,this.after_class_text);for(let e=0;e<a.ordered_main_stats.length;++e){const i=a.ordered_main_stats[e],s=this.char[i],n=t[i];this.base_window.update_text(s.toString(),this.before_stats[i]),this.base_window.update_text(n.toString(),this.after_stats[i]),s>n?this.down_arrows[i].alpha=1:s<n&&(this.up_arrows[i].alpha=1)}}set_djinn(t,e){this.djinn=t,this.next_djinni_status=e,this.hide_arrows(),this.set_stats()}open(t){this.char=t,this.djinn=null,this.next_djinni_status=null,this.hide_arrows(),this.base_window.show(()=>{this.window_open=!0},!1)}close(){this.base_window.close(()=>{this.window_open=!1},!1)}destroy(){this.base_window.destroy(!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BattleItemWindow=void 0;const s=i(2),n=i(1),a=i(8),_=i(3),o=i(4),r=i(11);e.BattleItemWindow=class{constructor(t,e){this.game=t,this.data=e,this.base_window=new s.Window(this.game,120,72,116,84),this.group=this.game.add.group(),this.group.alpha=0,this.button=this.group.create(96,136,"buttons","item"),this.highlight_bar=this.game.add.graphics(0,0),this.highlight_bar.blendMode=PIXI.blendModes.SCREEN,this.highlight_bar.alpha=0,this.base_window.add_sprite_to_group(this.highlight_bar),this.highlight_bar.beginFill(this.base_window.color,1),this.highlight_bar.drawRect(8,0,104,8),this.highlight_bar.endFill(),this.item_names=[],this.other_sprites=[]}select_item(t){this.item_index=t;let e=84+16*this.item_index,i={type:o.CursorManager.CursorTweens.POINT,variant:o.PointVariants.NORMAL};this.data.cursor_manager.move_to({x:116,y:e},{animate:!1,tween_config:i}),this.change_item()}next_item(){1!==this.items.length&&this.select_item((this.item_index+1)%this.items.length)}previous_item(){1!==this.items.length&&this.select_item((this.item_index+this.items.length-1)%this.items.length)}next_page(){1!==this.page_number&&(this.page_index=(this.page_index+1)%this.page_number,this.change_page())}previous_page(){1!==this.page_number&&(this.page_index=(this.page_index+this.page_number-1)%this.page_number,this.change_page())}update_position(){this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}change_page(){this.config_page(),this.item_index>=this.items.length&&(this.item_index=this.items.length-1,this.select_item(this.item_index)),this.set_description&&this.set_description(this.data.info.items_list[this.items[this.item_index].key_name].description),this.set_highlight_bar(),this.base_window.page_indicator.select_page(this.page_index)}change_item(){this.set_description&&this.set_description(this.data.info.items_list[this.items[this.item_index].key_name].description),this.set_highlight_bar()}set_highlight_bar(){this.highlight_bar.y=8+16*this.item_index}config_page(){this.clear_sprites(),this.items=this.all_items.slice(5*this.page_index,5*(this.page_index+1));for(let t=0;t<this.items.length;++t){const e=this.data.info.items_list[this.items[t].key_name],i=8+16*t,s=i-4;if(this.other_sprites.push(this.base_window.create_at_group(8,s,"items_icons",void 0,this.items[t].key_name)),this.items[t].equipped&&this.other_sprites.push(this.base_window.create_at_group(15,s+8,"equipped")),this.items[t].quantity>1){let e=this.game.add.bitmapText(15,s+8,"gs-item-bmp-font",this.items[t].quantity.toString());this.base_window.add_sprite_to_group(e),this.other_sprites.push(e)}let _=n.DEFAULT_FONT_COLOR;e.use_type!==a.use_types.NO_USE&&this.data.info.abilities_list[e.use_ability].is_battle_ability||(_=n.YELLOW_FONT_COLOR);const o=this.base_window.set_text_in_position(e.name,26,i,!1,!1,_);this.item_names.push(o)}}set_page_number(){const t=this.all_items.length;this.page_number=1+((t-1)/5|0),this.page_index>=this.page_number&&(this.page_index=this.page_number-1),this.base_window.page_indicator.initialize(this.page_number,this.page_index,r.PageIndicatorModes.FLASH)}mount_window(){this.all_items=this.char.items,this.all_items=_.sortBy(this.all_items,[t=>this.data.info.items_list[t.key_name].use_type===a.use_types.NO_USE||!this.data.info.abilities_list[this.data.info.items_list[t.key_name].use_ability].is_battle_ability]),this.set_page_number(),this.config_page()}clear_sprites(){this.item_names.forEach(t=>{this.base_window.remove_text(t)}),this.other_sprites.forEach(t=>{this.base_window.remove_from_group(t,!0)})}item_choose(){let t=[{key:this.data.gamepad.LEFT,on_down:this.previous_page.bind(this)},{key:this.data.gamepad.RIGHT,on_down:this.next_page.bind(this)},{key:this.data.gamepad.UP,on_down:this.previous_item.bind(this)},{key:this.data.gamepad.DOWN,on_down:this.next_item.bind(this)},{key:this.data.gamepad.A,on_down:()=>{const t=this.data.info.items_list[this.items[this.item_index].key_name];t.use_type!==a.use_types.NO_USE&&this.data.info.abilities_list[t.use_ability].is_battle_ability&&(this.choosen_ability=t.use_ability,this.item_obj=this.items[this.item_index],this.hide(this.close_callback))}},{key:this.data.gamepad.B,on_down:()=>{this.choosen_ability=null,this.item_obj=null,this.close(this.close_callback)}}];this.data.control_manager.set_control(t,{loop_configs:{vertical:!0,horizontal:!0}})}open(t,e,i,...s){this.char=t,this.close_callback=e,this.set_description=i,this.group.alpha=1,this.item_index=0,this.page_index=0,this.choosen_ability=null,this.highlight_bar.alpha=1,this.update_position(),this.set_highlight_bar(),this.mount_window(),this.select_item(0),this.item_choose(),this.set_description&&this.set_description(this.data.info.items_list[this.items[this.item_index].key_name].description),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0},!1)}show(){this.group.alpha=1,this.highlight_bar.alpha=1,this.select_item(this.item_index),this.item_choose(),this.base_window.show(()=>{this.window_active=!0},!1)}hide(t){this.group.alpha=0,this.highlight_bar.alpha=0,this.data.cursor_manager.hide(),this.base_window.close(()=>{this.window_active=!1,void 0!==t&&t(this.choosen_ability,this.item_obj)},!1)}close(t){this.clear_sprites(),this.base_window.page_indicator.terminante(),this.group.alpha=0,this.highlight_bar.alpha=0,this.data.cursor_manager.hide(),this.data.control_manager.reset(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t(this.choosen_ability,this.item_obj)},!1)}destroy(){this.base_window.destroy(!1),this.group.destroy(),this.data.cursor_manager.hide(),this.data.control_manager.reset()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BattleSummonWindow=void 0;const s=i(2),n=i(1),a=i(7),_=i(54),o=i(17),r=i(12),h=i(3),c=i(4),l=i(11);e.BattleSummonWindow=class{constructor(t,e){this.game=t,this.data=e,this.base_window=new s.Window(this.game,104,88,132,68),this.djinn_numbers_window=new _.SummonDjinnStandbyWindow(t),this.group=this.game.add.group(),this.group.alpha=0,this.button=this.group.create(80,136,"buttons","summon"),this.highlight_bar=this.game.add.graphics(0,0),this.highlight_bar.blendMode=PIXI.blendModes.SCREEN,this.highlight_bar.alpha=0,this.base_window.add_sprite_to_group(this.highlight_bar),this.highlight_bar.beginFill(this.base_window.color,1),this.highlight_bar.drawRect(8,0,120,8),this.highlight_bar.endFill(),this.summon_names=[],this.other_sprites=[]}select_summon(t){this.summon_index=t;let e=100+16*this.summon_index,i={type:c.CursorManager.CursorTweens.POINT,variant:c.PointVariants.NORMAL};this.data.cursor_manager.move_to({x:98,y:e},{animate:!1,tween_config:i}),this.change_summon()}next_summon(){1!==this.summons.length&&this.select_summon((this.summon_index+1)%this.summons.length)}previous_summon(){1!==this.summons.length&&this.select_summon((this.summon_index+this.summons.length-1)%this.summons.length)}next_page(){1!==this.page_number&&(this.page_index=(this.page_index+1)%this.page_number,this.change_page())}previous_page(){1!==this.page_number&&(this.page_index=(this.page_index+this.page_number-1)%this.page_number,this.change_page())}update_position(){this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}change_page(){this.config_page(),this.summon_index>=this.summons.length&&(this.summon_index=this.summons.length-1,this.select_summon(this.summon_index)),this.set_description&&this.set_description(this.data.info.abilities_list[this.summons[this.summon_index].key_name].description),this.set_highlight_bar(),this.base_window.page_indicator.select_page(this.page_index),this.djinn_numbers_window.set_numbers(this.summons[this.summon_index].requirements)}change_summon(){this.set_description&&this.set_description(this.data.info.abilities_list[this.summons[this.summon_index].key_name].description),this.set_highlight_bar(),this.djinn_numbers_window.set_numbers(this.summons[this.summon_index].requirements)}set_highlight_bar(){this.highlight_bar.y=8+16*this.summon_index}config_page(){this.clear_sprites(),this.summons=this.all_summons.slice(4*this.page_index,4*(this.page_index+1));for(let t=0;t<this.summons.length;++t){const e=this.data.info.abilities_list[this.summons[t].key_name],i=8+16*t,s=i-3;this.other_sprites.push(this.base_window.create_at_group(10,s,"abilities_icons",void 0,this.summons[t].key_name));let a=n.DEFAULT_FONT_COLOR;this.summons[t].can_be_summoned||(a=n.RED_FONT_COLOR);const _=this.base_window.set_text_in_position(e.name,28,i,!1,!1,a);this.summon_names.push(_)}}set_page_number(){const t=this.all_summons.length;this.page_number=1+((t-1)/4|0),this.page_index>=this.page_number&&(this.page_index=this.page_number-1),this.base_window.page_indicator.initialize(this.page_number,this.page_index,l.PageIndicatorModes.FLASH)}mount_window(){const t=a.Djinn.get_standby_djinni(this.data.info.djinni_list,r.MainChar.get_active_players(this.data.info.party_data,o.Battle.MAX_CHARS_IN_BATTLE));for(let e in t)t[e]-=this.djinni_already_used[e];this.all_summons=h.flatMap(this.data.info.summons_list,e=>{if(!e.available)return[];const i=h.every(e.requirements,(e,i)=>e<=t[i]);return[Object.assign({},e,{can_be_summoned:i,index:i?-e.index:e.index})]}),this.all_summons=h.sortBy(this.all_summons,[t=>t.index]),this.set_page_number(),this.config_page()}clear_sprites(){this.summon_names.forEach(t=>{this.base_window.remove_text(t)}),this.other_sprites.forEach(t=>{this.base_window.remove_from_group(t,!0)})}summon_choose(){let t=[{key:this.data.gamepad.LEFT,on_down:this.previous_page.bind(this)},{key:this.data.gamepad.RIGHT,on_down:this.next_page.bind(this)},{key:this.data.gamepad.UP,on_down:this.previous_summon.bind(this)},{key:this.data.gamepad.DOWN,on_down:this.next_summon.bind(this)},{key:this.data.gamepad.A,on_down:()=>{this.choosen_ability=this.summons[this.summon_index].key_name,this.hide(this.close_callback)}},{key:this.data.gamepad.B,on_down:()=>{this.choosen_ability=null,this.close(this.close_callback)}}];this.data.control_manager.set_control(t,{loop_configs:{vertical:!0,horizontal:!0}})}open(t,e,i,s){this.char=t,this.close_callback=e,this.set_description=i,this.djinni_already_used=s,this.summon_index=0,this.page_index=0,this.choosen_ability=null,this.highlight_bar.alpha=1,this.group.alpha=1,this.djinn_numbers_window.open(),this.update_position(),this.set_highlight_bar(),this.mount_window(),this.djinn_numbers_window.set_numbers(this.summons[this.summon_index].requirements),this.select_summon(0),this.summon_choose(),this.set_description&&this.set_description(this.data.info.abilities_list[this.summons[this.summon_index].key_name].description),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0},!1)}show(){this.group.alpha=1,this.highlight_bar.alpha=1,this.djinn_numbers_window.open(),this.djinn_numbers_window.set_numbers(this.summons[this.summon_index].requirements),this.select_summon(this.summon_index),this.summon_choose(),this.base_window.show(()=>{this.window_active=!0},!1)}hide(t){this.group.alpha=0,this.highlight_bar.alpha=0,this.data.cursor_manager.hide(),this.djinn_numbers_window.close(),this.base_window.close(()=>{this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}close(t){this.clear_sprites(),this.base_window.page_indicator.terminante(),this.group.alpha=0,this.highlight_bar.alpha=0,this.data.cursor_manager.hide(),this.data.control_manager.reset(),this.djinn_numbers_window.close(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}destroy(){this.base_window.destroy(!1),this.group.destroy(),this.djinn_numbers_window.destroy(),this.data.cursor_manager.hide(),this.data.control_manager.reset()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SummonDjinnStandbyWindow=void 0;const s=i(2),n=i(0);e.SummonDjinnStandbyWindow=class{constructor(t){this.game=t,this.base_window=new s.Window(this.game,160,64,76,20),this.texts={},this.graphics={},this.timers={};for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t];this.base_window.create_at_group(9+16*t,9,e+"_star"),this.texts[e]=this.base_window.set_text_in_position("",22+16*t,8,!0),this.graphics[e]=this.game.add.graphics(0,0),this.graphics[e].blendMode=PIXI.blendModes.SCREEN,this.base_window.add_sprite_to_group(this.graphics[e]),this.graphics[e].beginFill(this.base_window.color,1),this.graphics[e].drawRect(8+16*t,8,16,8),this.graphics[e].endFill()}this.window_open=!1}blink(t,e){this.timers[t]=this.game.time.create(!1),this.timers[t].loop(150,()=>{e.alpha=+!e.alpha}),this.timers[t].start()}set_numbers(t){for(let e in t){const i=t[e];this.timers[e]&&(this.timers[e].destroy(),this.timers[e]=null),i?this.blink(e,this.graphics[e]):this.graphics[e].alpha=0,this.base_window.update_text(i.toString(),this.texts[e])}}open(){this.base_window.show(void 0,!1),this.window_open=!0}close(){this.base_window.close(void 0,!1),this.window_open=!1;for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t];this.timers[e]&&(this.timers[e].destroy(),this.timers[e]=null)}}destroy(){this.base_window.destroy(!1);for(let t in this.timers)this.timers[t]&&this.timers[t].destroy()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BattleStatusWindow=e.BattleStatusStates=void 0;const s=i(17),n=i(5),a=i(2),_=i(0),o=i(3),r=i(56),h=i(9),c=i(57),l=i(58),d=i(59);var u;!function(t){t[t.STATISTICS=0]="STATISTICS",t[t.PSYNERGY=1]="PSYNERGY",t[t.DJINN=2]="DJINN",t[t.ITEMS=3]="ITEMS"}(u=e.BattleStatusStates||(e.BattleStatusStates={}));class p{constructor(t,e){this.game=t,this.data=e,this.close_callback=null,this.desc_shifted=null,this.selected_char=null,this.battle_effects=[],this.effect_sprites=[],this.window=new a.Window(this.game,0,0,p.WINDOW.WIDTH,p.WINDOW.HEIGHT),this.window.define_internal_group(p.GROUP_KEY,{x:0,y:0}),this.components=[new r.BattleStatusStatistics(this.game,this.data,this.window,this),new c.BattleStatusPsynergy(this.game,this.data,this.window,this),new l.BattleStatusDjinn(this.game,this.data,this.window,this),new d.BattleStatusItems(this.game,this.data,this.window,this)],this.battle_sprite=null,this.avatar=null,this.window.group.bringToTop(this.window.internal_groups[p.GROUP_KEY]),this.init_text()}get selected_character(){return this.selected_char}get battle_effects_array(){return this.battle_effects}init_text(){this.name=this.window.set_text_in_position("",p.NAME.X,p.NAME.Y,!1,!1,void 0,!1,p.GROUP_KEY),this.window.set_text_in_position("Lv",p.LEVEL.LABEL_X,p.LEVEL.LABEL_Y,!1,!1,void 0,!1,p.GROUP_KEY),this.level_value=this.window.set_text_in_position("",p.LEVEL.VALUE_END_X,p.LEVEL.VALUE_Y,!0,!1,void 0,!1,p.GROUP_KEY),this.window.set_text_in_position("Exp",p.EXP.LABEL_X,p.EXP.LABEL_Y,!1,!1,void 0,!1,p.GROUP_KEY),this.exp_value=this.window.set_text_in_position("",p.EXP.VALUE_END_X,p.EXP.VALUE_Y,!0,!1,void 0,!1,p.GROUP_KEY),this.normal_status=this.window.set_text_in_position("",p.NORMAL_STATUS.X,p.NORMAL_STATUS.Y,!1,!1,void 0,!1,p.GROUP_KEY),this.window.set_text_in_position("HP",p.HP.LABEL_X,p.HP.LABEL_Y,!1,!1,void 0,!1,p.GROUP_KEY),this.max_hp=this.window.set_text_in_position("",p.HP.MAX_END_X,p.HP.MAX_Y,!0,!1,void 0,!1,p.GROUP_KEY),this.curr_hp=this.window.set_text_in_position("/",p.HP.CURR_END_X,p.HP.CURR_Y,!0,!1,void 0,!1,p.GROUP_KEY),this.window.set_text_in_position("PP",p.PP.LABEL_X,p.PP.LABEL_Y,!1,!1,void 0,!1,p.GROUP_KEY),this.max_pp=this.window.set_text_in_position("",p.PP.MAX_END_X,p.PP.MAX_Y,!0,!1,void 0,!1,p.GROUP_KEY),this.curr_pp=this.window.set_text_in_position("/",p.PP.CURR_END_X,p.PP.CURR_Y,!0,!1,void 0,!1,p.GROUP_KEY);const t=p.STATS.LINE_SHIFT;this.window.set_text_in_position("Attack",p.STATS.LABEL_X,p.STATS.LABEL_Y,!1,!1,void 0,!1,p.GROUP_KEY),this.atk_value=this.window.set_text_in_position("",p.STATS.VALUE_END_X,p.STATS.VALUE_Y,!0,!1,void 0,!1,p.GROUP_KEY),this.window.set_text_in_position("Defense",p.STATS.LABEL_X,p.STATS.LABEL_Y+t,!1,!1,void 0,!1,p.GROUP_KEY),this.def_value=this.window.set_text_in_position("",p.STATS.VALUE_END_X,p.STATS.VALUE_Y+t,!0,!1,void 0,!1,p.GROUP_KEY),this.window.set_text_in_position("Agility",p.STATS.LABEL_X,p.STATS.LABEL_Y+2*t,!1,!1,void 0,!1,p.GROUP_KEY),this.agi_value=this.window.set_text_in_position("",p.STATS.VALUE_END_X,p.STATS.VALUE_Y+2*t,!0,!1,void 0,!1,p.GROUP_KEY),this.window.set_text_in_position("Luck",p.STATS.LABEL_X,p.STATS.LABEL_Y+3*t,!1,!1,void 0,!1,p.GROUP_KEY),this.luk_value=this.window.set_text_in_position("",p.STATS.VALUE_END_X,p.STATS.VALUE_Y+3*t,!0,!1,void 0,!1,p.GROUP_KEY),this.class_name=this.window.set_text_in_position("",p.CLASS_NAME.X,p.CLASS_NAME.Y,!1,!1,void 0,!1,p.GROUP_KEY),this.in_the_back=this.window.set_text_in_position("",p.IN_THE_BACK.X,p.IN_THE_BACK.Y,!1,!1,void 0,!1,p.GROUP_KEY),this.desc_line1=this.window.set_text_in_position("",p.DESCRIPTION.X,p.DESCRIPTION.LINE1_Y,!1,!1,void 0,!1,p.GROUP_KEY),this.desc_line2=this.window.set_text_in_position("",p.DESCRIPTION.X,p.DESCRIPTION.LINE2_Y,!1,!1,void 0,!1,p.GROUP_KEY)}update_info(){const t=this.selected_char,e=this.data.info.party_data.members;let i=-1;this.battle_effects=[];for(let t in e){e[t].key_name===this.selected_char.key_name&&(i=parseInt(t));break}this.window.update_text(t.name,this.name),this.window.update_text(t.level,this.level_value),this.window.update_text(t.current_exp,this.exp_value),this.window.update_text(t.class.name,this.class_name),this.window.update_text(i>=s.Battle.MAX_CHARS_IN_BATTLE?"In the back":"",this.in_the_back),0!==this.update_effects()?this.window.update_text("",this.normal_status):this.window.update_text("Normal",this.normal_status),this.window.update_text(t.max_hp,this.max_hp),this.window.update_text(t.current_hp+"/",this.curr_hp),this.window.update_text(t.max_pp,this.max_pp),this.window.update_text(t.current_pp+"/",this.curr_pp),this.window.update_text(t.atk,this.atk_value),this.window.update_text(t.def,this.def_value),this.window.update_text(t.agi,this.agi_value),this.window.update_text(t.luk,this.luk_value)}update_effects(){const t=this.get_status_effects(),e=this.get_buffs_debuffs(),i=[];for(let e in t){const s={key:null,properties:null};if(s.key=t[e],t[e]===n.temporary_status.DEATH_CURSE){const t=o.find(this.selected_char.effects,{status_key_name:n.temporary_status.DEATH_CURSE});s.properties.turns=this.selected_char.get_effect_turns_count(t)}i.length<p.MAX_EFFECTS_DISPLAYED&&i.push(s)}for(let t in e){const s={key:null,properties:{value:null}};let a=null;if(e[t].stat===h.effect_types.RESIST||e[t].stat===h.effect_types.POWER)for(let i in _.elements)e[t].value[_.elements[i]]<0?null===a&&(a="down"):e[t].value[_.elements[i]]>0&&(null===a?a="up":"down"===a&&(a="up_down"));else e[t].stat in n.effect_type_stat&&(a=s.properties.value>=0?"up":"down");null!==a&&(s.key=e[t].stat,s.properties.modifier=a,s.properties.value=e[t].value,i.length<p.MAX_EFFECTS_DISPLAYED&&i.push(s))}return this.battle_effects=i,this.battle_effects.length}get_buffs_debuffs(){const t=[],e=[h.effect_types.ATTACK,h.effect_types.DEFENSE,h.effect_types.AGILITY];for(let i=0;i<e.length;i++){const s=this.selected_char[n.effect_type_stat[e[i]]]-this.selected_char.preview_stat_without_abilities_effect(n.effect_type_stat[e[i]]);if(0!==s){const n={stat:e[i],value:s};t.push(n)}}const i=this.selected_char.preview_elemental_stats_without_abilities_effect(),s={[_.elements.VENUS]:this.selected_char.venus_power_current-i[_.elements.VENUS].power,[_.elements.MERCURY]:this.selected_char.mercury_power_current-i[_.elements.MERCURY].power,[_.elements.MARS]:this.selected_char.mars_power_current-i[_.elements.MARS].power,[_.elements.JUPITER]:this.selected_char.jupiter_power_current-i[_.elements.JUPITER].power},a={[_.elements.VENUS]:this.selected_char.venus_resist_current-i[_.elements.VENUS].resist,[_.elements.MERCURY]:this.selected_char.mercury_resist_current-i[_.elements.MERCURY].resist,[_.elements.MARS]:this.selected_char.mars_resist_current-i[_.elements.MARS].resist,[_.elements.JUPITER]:this.selected_char.jupiter_resist_current-i[_.elements.JUPITER].resist};return o.some(s)&&t.push({stat:h.effect_types.POWER,value:s}),o.some(a)&&t.push({stat:h.effect_types.RESIST,value:a}),t}get_status_effects(t){return t?o.sortBy([...this.data.info.main_char_list[this.selected_char.key_name].permanent_status],t=>n.ordered_status_menu.indexOf(t)):o.sortBy([...this.data.info.main_char_list[this.selected_char.key_name].temporary_status].concat([...this.data.info.main_char_list[this.selected_char.key_name].permanent_status]),t=>n.ordered_status_battle.indexOf(t))}set_sprites(){if(this.battle_sprite&&this.battle_sprite.destroy(),this.avatar&&this.avatar.destroy(),this.effect_sprites.length>0){for(let t in this.effect_sprites)this.effect_sprites[t].destroy();this.effect_sprites=[]}this.avatar=this.window.create_at_group(p.AVATAR.X,p.AVATAR.Y,"avatars",void 0,this.selected_char.key_name,p.GROUP_KEY);const t=this.selected_char.sprite_base.getActionKey(_.base_actions.BATTLE),e=this.data.info.main_char_list[this.selected_char.key_name].sprite_base;if(this.battle_sprite=this.window.create_at_group(p.BATTLESPRITE.CENTER_X,p.BATTLESPRITE.END_Y,t,void 0,void 0,p.GROUP_KEY),this.battle_sprite.anchor.setTo(.5,1),e.setAnimation(this.battle_sprite,_.base_actions.BATTLE),this.battle_sprite.animations.play(e.getAnimationKey(_.base_actions.BATTLE,"back")),this.battle_effects.length>0)for(let t in this.battle_effects){const e=this.battle_effects[t];let i=e.key;(e.key in n.effect_type_stat||e.key===h.effect_types.RESIST||e.key===h.effect_types.POWER)&&(i=i+"_"+e.properties.modifier);const s=p.EFFECTS.X+parseInt(t)*p.EFFECTS.SHIFT,a=p.EFFECTS.Y,_=this.window.create_at_group(s,a,"battle_effect_icons",void 0,i,p.GROUP_KEY);this.effect_sprites.push(_)}}change_character(t){this.selected_char=t,this.update_info(),this.set_sprites(),this.change_state(this.current_state)}next_char(){const t=this.data.info.party_data.members;let e=-1;for(let i in t)if(t[i].key_name===this.selected_char.key_name){e=parseInt(i);break}this.change_character(t[(e+1)%t.length])}previous_char(){const t=this.data.info.party_data.members;let e=-1;for(let i in t)if(t[i].key_name===this.selected_char.key_name){e=parseInt(i);break}this.change_character(t[(e+t.length-1)%t.length])}grant_control(){const t=[{key:this.data.gamepad.A,on_down:this.trigger_state_change.bind(this)},{key:this.data.gamepad.B,on_down:this.close.bind(this,this.close_callback)},{key:this.data.gamepad.L,on_down:this.previous_char.bind(this)},{key:this.data.gamepad.R,on_down:this.next_char.bind(this)},{key:this.data.gamepad.LEFT,on_down:this.current_component.on_left.bind(this.current_component)},{key:this.data.gamepad.RIGHT,on_down:this.current_component.on_right.bind(this.current_component)},{key:this.data.gamepad.UP,on_down:this.current_component.on_up.bind(this.current_component)},{key:this.data.gamepad.DOWN,on_down:this.current_component.on_down.bind(this.current_component)}];this.data.control_manager.set_control(t,{loop_configs:{vertical:!0,horizontal:!0,shoulder:!0}})}trigger_state_change(){this.current_state===u.ITEMS?this.current_state=u.STATISTICS:this.current_state++,this.change_state(this.current_state,!0)}change_state(t,e=!1){let i={line:0,col:0};this.current_component&&(e||(i=this.current_component.current_pos),this.current_component.clear(),this.current_component=null),this.current_state=t,this.current_component=this.components[this.current_state],this.check_shift(),this.current_component.reset(i),this.grant_control()}check_shift(){const t=this.current_state!==u.STATISTICS;if(this.desc_shifted===t)return;this.window.clear_separators();const e=p.SEPARATOR.X,i=p.SEPARATOR.Y+(t?p.SEPARATOR.SHIFT:0),s=p.SEPARATOR.WIDTH;this.window.draw_separator(e,i,e+s,i,!1),this.desc_shifted=t}update_description(t,e){void 0===e?(this.window.update_text("",this.desc_line1),this.window.update_text(t,this.desc_line2)):(this.window.update_text(t,this.desc_line1),this.window.update_text(e,this.desc_line2))}open(t,e,i){this.selected_char=t||this.data.info.party_data.members[0],this.close_callback=e,this.window.show(()=>{this.update_info(),this.set_sprites(),this.change_state(u.STATISTICS),i&&i()})}clear_component(){this.current_component.clear(),this.current_state=null,this.current_component=null}close(t){this.clear_component(),this.window.close(t)}}e.BattleStatusWindow=p,p.WINDOW={WIDTH:236,HEIGHT:156},p.SEPARATOR={X:4,Y:115,WIDTH:232,SHIFT:16},p.BATTLESPRITE={CENTER_X:204,END_Y:120,SHADOW_Y:114},p.DESCRIPTION={X:8,LINE1_Y:124,LINE2_Y:140},p.NAME={X:8,Y:8},p.CLASS_NAME={X:8,Y:56},p.EXP={LABEL_X:8,LABEL_Y:16,VALUE_END_X:109,VALUE_Y:16},p.LEVEL={LABEL_X:64,LABEL_Y:8,VALUE_END_X:93,VALUE_Y:8},p.AVATAR={X:8,Y:24},p.NORMAL_STATUS={X:120,Y:8},p.IN_THE_BACK={X:48,Y:24},p.STATS={LABEL_X:144,LABEL_Y:24,VALUE_END_X:213,VALUE_Y:24,LINE_SHIFT:8},p.HP={LABEL_X:48,LABEL_Y:32,MAX_END_X:133,MAX_Y:32,CURR_END_X:100,CURR_Y:32},p.PP={LABEL_X:48,LABEL_Y:40,MAX_END_X:133,MAX_Y:40,CURR_END_X:100,CURR_Y:40},p.EFFECTS={X:112,Y:8,SHIFT:16},p.GROUP_KEY="status_win",p.MAX_EFFECTS_DISPLAYED=8},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BattleStatusStatistics=e.BattleStatistics=void 0;const s=i(10),n=i(4),a=i(5),_=i(0),o=i(9),r=i(3);var h;!function(t){t[t.NAME=0]="NAME",t[t.EXP=1]="EXP",t[t.HP=2]="HP",t[t.PP=3]="PP",t[t.CLASS=4]="CLASS",t[t.DJINN=5]="DJINN",t[t.ELEM_LEVELS=6]="ELEM_LEVELS",t[t.ELEM_POWER=7]="ELEM_POWER",t[t.ELEM_RESIST=8]="ELEM_RESIST"}(h=e.BattleStatistics||(e.BattleStatistics={}));class c extends s.StatusComponent{constructor(t,e,i,s,n){super(t,e,i,s,n)}select_option(){const t={x:0,y:0,width:0,height:0};let e=0,i=0;if(0===this.current_col)t.x=c.HIGHLIGHT[this.current_line].X,t.y=c.HIGHLIGHT[this.current_line].Y,t.width=c.HIGHLIGHT[this.current_line].WIDTH,t.height=c.HIGHLIGHT[this.current_line].HEIGHT,e=c.CURSOR[this.current_line].X,i=c.CURSOR[this.current_line].Y;else{if(0===this.battle_status_effects.length)t.x=c.HIGHLIGHT.NORMAL.X,t.y=c.HIGHLIGHT.NORMAL.Y,t.width=c.HIGHLIGHT.NORMAL.WIDTH,t.height=c.HIGHLIGHT.NORMAL.HEIGHT;else{let e=c.HIGHLIGHT.EFFECT.SHIFT;t.x=c.HIGHLIGHT.EFFECT.X+e*(this.current_col-1),t.y=c.HIGHLIGHT.EFFECT.Y,t.width=c.HIGHLIGHT.EFFECT.WIDTH,t.height=c.HIGHLIGHT.EFFECT.HEIGHT}const s=c.CURSOR.EFFECT.SHIFT;e=c.CURSOR.EFFECT.X+s*(this.current_col-1),i=c.CURSOR.EFFECT.Y}this.update_highlight(t);const s={type:n.CursorManager.CursorTweens.POINT,variant:n.PointVariants.SHORT};this.data.cursor_manager.move_to({x:e,y:i},{animate:!1,flip:!0,tween_config:s})}on_change(){if(this.select_option(),0===this.current_col){const t={line1:c.BattleDescriptions[this.current_line].line1,line2:c.BattleDescriptions[this.current_line].line2};if(this.current_line===h.EXP){const e=this.selected_char,i=e.exp_curve[e.level]-e.current_exp;t.line2=t.line2(i)}this.update_description(t.line1,t.line2)}else if(0===this.battle_status_effects.length)this.update_description("Normal status.","");else{const t=this.battle_status_effects[this.current_col-1];let e=null;if(a.ordered_status_battle.includes(t.key)){if(e={line1:c.BattleStatusMsgs[t.key].line1,line2:c.BattleStatusMsgs[t.key].line2},t.key===a.temporary_status.DEATH_CURSE){const i=t.properties.turns?t.properties.turns:0;e.line1=e.line1(i)}}else if(t.key===o.effect_types.RESIST||t.key===o.effect_types.POWER){const i=o.effect_names[t.key],s=r.flatMap(_.elements,e=>t.properties.value[e]?[{element:e,value:t.properties.value[e]}]:[]);e={line1:"",line2:""};for(let t=0;t<s.length;t++){s[t].value>=0&&(s[t].value="+"+s[t].value);const n=_.element_names[s[t].element];e[t<2?"line1":"line2"]+=(t%2!=0?", ":"")+n+" "+i+" "+s[t].value}""===e.line2?e.line1+=".":e.line2+="."}else if(t.key in a.effect_type_stat){e={line1:c.BattleBuffMsgs[t.properties.modifier][t.key].line1,line2:c.BattleBuffMsgs[t.properties.modifier][t.key].line2};const i=t.properties.value?t.properties.value:0;e.line1=e.line1(i)}this.update_description(e.line1,e.line2)}}on_left(){const t=this.battle_status_effects.length;this.current_col=0===t?0===this.current_col?1:0:(this.current_col+(t+1)-1)%(t+1),this.on_change()}on_right(){const t=this.battle_status_effects.length;this.current_col=0===t?0===this.current_col?1:0:(this.current_col+1)%(t+1),this.on_change()}on_up(){0!==this.current_col?this.current_col=0:this.current_line=(this.current_line+c.LINES-1)%c.LINES,this.on_change()}on_down(){0!==this.current_col?this.current_col=0:this.current_line=(this.current_line+1)%c.LINES,this.on_change()}initialize(){const t=["venus_star","mercury_star","mars_star","jupiter_star"];for(let e=0;e<t.length;e++){const i=c.STARS.X+e*c.STARS_SHIFT,s=c.STARS.Y,n=this.window.create_at_group(i,s,t[e],void 0,void 0,c.GROUP_KEY);this.state_sprites.push(n)}const e=["Djinn","Lv","Power","Resist"];for(let t=0;t<e.length;t++){const i=c.LABEL.X,s=c.LABEL.Y+t*c.LABEL_SHIFT,n=this.window.set_text_in_position(e[t],i,s,!1,!1,void 0,!1,c.GROUP_KEY);this.state_sprites.push(n.text,n.shadow)}for(let t=0;t<_.ordered_elements.length;t++){const e=this.get_djinn_counts(_.ordered_elements[t]),i=this.get_elemental_stats(_.ordered_elements[t]),s=c.ELEM_NUMBERS.END_X+t*c.ELEM_NUMBERS.X_SHIFT;let n=c.ELEM_NUMBERS.Y,a=e.set+"/"+e.total,o=this.window.set_text_in_position(a,s,n,!0,!1,void 0,!1,c.GROUP_KEY);this.state_sprites.push(o.text,o.shadow),n+=c.ELEM_NUMBERS.Y_SHIFT,a=String(i.level),o=this.window.set_text_in_position(a,s,n,!0,!1,void 0,!1,c.GROUP_KEY),this.state_sprites.push(o.text,o.shadow),n+=c.ELEM_NUMBERS.Y_SHIFT,a=String(i.power),o=this.window.set_text_in_position(a,s,n,!0,!1,void 0,!1,c.GROUP_KEY),this.state_sprites.push(o.text,o.shadow),n+=c.ELEM_NUMBERS.Y_SHIFT,a=String(i.resistance),o=this.window.set_text_in_position(a,s,n,!0,!1,void 0,!1,c.GROUP_KEY),this.state_sprites.push(o.text,o.shadow)}}}e.BattleStatusStatistics=c,c.BattleStatusMsgs={[a.temporary_status.DELUSION]:{line1:"Delusions misdirect your attacks.",line2:"Cure with Elixer or Restore."},[a.temporary_status.STUN]:{line1:"You are stunned and cannot act.",line2:"Cure with Elixer or Restore."},[a.temporary_status.SLEEP]:{line1:"Sleep prevents you from acting.",line2:"Wake with Elixer or Restore."},[a.temporary_status.SEAL]:{line1:"Your Psynergy is sealed.",line2:"Cure with Elixer or Restore."},[a.temporary_status.DEATH_CURSE]:{line1:t=>`You will be downed in ${t} turns.`,line2:"Cure wth Elixer or Restore."},[a.permanent_status.DOWNED]:{line1:"You are down. Heal at a Sanctum",line2:"or use Revive or Water of Life."},[a.permanent_status.POISON]:{line1:"A mild poison wracks your body.",line2:"Cure with Antidote or Cure Poison."},[a.permanent_status.VENOM]:{line1:"A vile poison wracks your body.",line2:"Cure with Antidote or Cure Poison."},[a.permanent_status.EQUIP_CURSE]:{line1:"A cursed item binds your actions.",line2:"Remove the item at a Sanctum."},[a.permanent_status.HAUNT]:{line1:"An evil spirit wounds you.",line2:"Exorcise it at a Sanctum."}},c.BattleBuffMsgs={up:{[o.effect_types.ATTACK]:{line1:t=>`Attack increased by ${t}.`,line2:""},[o.effect_types.DEFENSE]:{line1:t=>`Defense increased by ${t}.`,line2:""},[o.effect_types.AGILITY]:{line1:t=>`Agility increased by ${t}.`,line2:""}},down:{[o.effect_types.ATTACK]:{line1:t=>`Attack dropped by ${t}.`,line2:"Increase with spells like Impact."},[o.effect_types.DEFENSE]:{line1:t=>`Defense dropped by ${t}.`,line2:"Increase with spells like Guard."},[o.effect_types.AGILITY]:{line1:t=>`Agility dropped by ${t}.`,line2:""}}},c.BattleDescriptions={[h.NAME]:{line1:"Use the L & R Buttons to",line2:"switch between characters."},[h.EXP]:{line1:"Current experience points.",line2:t=>t+" to next level."},[h.HP]:{line1:"Your current and maximum HP.",line2:"Affected by Djinn and equipment."},[h.PP]:{line1:"Your current and maximum PP.",line2:"Affected by Djinn and equipment."},[h.CLASS]:{line1:"Your current class. Your",line2:"class changes when you set Djinn."},[h.DJINN]:{line1:"The number of Djinn currently set",line2:"and your total number of Djinn."},[h.ELEM_LEVELS]:{line1:"Your Elemental Levels. These",line2:"reflect your skill in each element."},[h.ELEM_POWER]:{line1:"Power reflects the damage you",line2:"can do with each element."},[h.ELEM_RESIST]:{line1:"Resist reflects your defensive",line2:"strength against each element."}},c.CURSOR={[h.NAME]:{X:31,Y:15},[h.EXP]:{X:79,Y:23},[h.HP]:{X:111,Y:39},[h.PP]:{X:111,Y:47},[h.CLASS]:{X:39,Y:63},[h.DJINN]:{X:119,Y:87},[h.ELEM_LEVELS]:{X:119,Y:95},[h.ELEM_POWER]:{X:119,Y:103},[h.ELEM_RESIST]:{X:119,Y:111},EFFECT:{X:119,Y:15,SHIFT:16}},c.HIGHLIGHT={[h.NAME]:{X:8,Y:8,WIDTH:96,HEIGHT:8},[h.EXP]:{X:8,Y:16,WIDTH:104,HEIGHT:8},[h.HP]:{X:48,Y:32,WIDTH:88,HEIGHT:8},[h.PP]:{X:48,Y:40,WIDTH:88,HEIGHT:8},[h.CLASS]:{X:8,Y:56,WIDTH:80,HEIGHT:8},[h.DJINN]:{X:8,Y:80,WIDTH:160,HEIGHT:8},[h.ELEM_LEVELS]:{X:8,Y:88,WIDTH:160,HEIGHT:8},[h.ELEM_POWER]:{X:8,Y:96,WIDTH:160,HEIGHT:8},[h.ELEM_RESIST]:{X:8,Y:104,WIDTH:160,HEIGHT:8},EFFECT:{X:112,Y:8,WIDTH:16,HEIGHT:16,SHIFT:16},NORMAL:{X:120,Y:8,WIDTH:80,HEIGHT:8}},c.LINES=9,c.STARS={X:64,Y:73},c.STARS_SHIFT=32,c.LABEL={X:8,Y:80},c.LABEL_SHIFT=8,c.ELEM_NUMBERS={END_X:69,Y:80,X_SHIFT:32,Y_SHIFT:8}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BattleStatusPsynergy=void 0;const s=i(10),n=i(4),a=i(11);class _ extends s.StatusComponent{constructor(t,e,i,s,n){super(t,e,i,s,n)}select_option(){const t={x:_.HIGHLIGHT.X,y:_.HIGHLIGHT.Y+_.SHIFT*this.current_line,width:_.HIGHLIGHT.WIDTH,height:_.HIGHLIGHT.HEIGHT};this.update_highlight(t);const e=_.CURSOR.X,i=_.CURSOR.Y+_.SHIFT*this.current_line,s={type:n.CursorManager.CursorTweens.POINT,variant:n.PointVariants.SHORT};this.data.cursor_manager.move_to({x:e,y:i},{animate:!1,tween_config:s}),this.window.page_indicator.select_page(this.current_col)}on_change(){this.select_option();const t=this.battle_abilities[this.current_col][this.current_line];this.update_description(t.description)}on_left(){if(this.battle_abilities.length<=1)return;const t=this.battle_abilities.length;this.current_col=(this.current_col+t-1)%t,this.battle_abilities[this.current_col][this.current_line]||(this.current_line=this.battle_abilities[this.current_col].length-1),this.reset()}on_right(){if(this.battle_abilities.length<=1)return;const t=this.battle_abilities.length;this.current_col=(this.current_col+1)%t,this.battle_abilities[this.current_col][this.current_line]||(this.current_line=this.battle_abilities[this.current_col].length-1),this.reset()}on_up(){this.battle_abilities[this.current_col].length<=1||(0===this.current_line?(0===this.current_col?(this.current_col=this.battle_abilities.length-1,this.current_line=this.battle_abilities[this.battle_abilities.length-1].length-1):(this.current_col=this.current_col-1,this.current_line=this.battle_abilities[this.current_col].length-1),this.reset()):(this.current_line--,this.on_change()))}on_down(){this.battle_abilities[this.current_col].length<=1||(this.current_line+1===this.battle_abilities[this.current_col].length?(this.current_col===this.battle_abilities.length-1?(this.current_col=0,this.current_line=0):(this.current_col=this.current_col+1,this.current_line=0),this.reset()):(this.current_line++,this.on_change()))}initialize(){const t={x:_.PAGE_INDICATOR_ANCHOR.X,y:_.PAGE_INDICATOR_ANCHOR.Y};this.update_abilities();this.battle_abilities[this.current_col].forEach((t,e)=>{const i=t.key_name,s=t.name,n=t.pp_cost,a=t.element+"_star",o=String(t.range);let r=_.PSYNERGY.ICON_X,h=_.PSYNERGY.ICON_Y+e*_.SHIFT;const c=this.window.create_at_group(r,h,"abilities_icons",void 0,i,_.GROUP_KEY);this.state_sprites.push(c),r=_.PSYNERGY.NAME_X,h=_.PSYNERGY.NAME_Y+e*_.SHIFT;const l=this.window.set_text_in_position(s,r,h,!1,!1,void 0,!1,_.GROUP_KEY);this.state_sprites.push(l.text,l.shadow),r=_.PSYNERGY.PP_LABEL_X,h=_.PSYNERGY.PP_LABEL_Y+e*_.SHIFT;const d=this.window.set_text_in_position("PP",r,h,!1,!1,void 0,!1,_.GROUP_KEY);this.state_sprites.push(d.text,d.shadow),r=_.PSYNERGY.PP_VALUE_END_X,h=_.PSYNERGY.PP_VALUE_Y+e*_.SHIFT;const u=this.window.set_text_in_position(n,r,h,!0,!1,void 0,!1,_.GROUP_KEY);this.state_sprites.push(u.text,u.shadow),r=_.PSYNERGY.STAR_X,h=_.PSYNERGY.STAR_Y+e*_.SHIFT;const p=this.window.create_at_group(r,h,a,void 0,void 0,_.GROUP_KEY);this.state_sprites.push(p),r=_.PSYNERGY.RANGE_CENTER_X,h=_.PSYNERGY.RANGE_Y+e*_.SHIFT;const m=this.window.create_at_group(r,h,"ranges",void 0,o,_.GROUP_KEY);m.x-=m.width/2|0,this.state_sprites.push(m)}),this.window.page_indicator.position=t,this.window.page_indicator.initialize(this.battle_abilities.length,this.current_line,a.PageIndicatorModes.FLASH),this.select_option()}update_abilities(){const t=this.selected_char.abilities;let e=[];this.battle_abilities=[];let i=0;t.forEach(t=>{i===_.MAX_LINES&&(this.battle_abilities.push(e),e=[],i=0),this.data.info.abilities_list[t]?this.data.info.abilities_list[t].is_battle_ability&&(e.push(this.data.info.abilities_list[t]),i++):console.warn('Ability "'+t+'" does not exist in the database.')}),e.length>0&&this.battle_abilities.push(e)}}e.BattleStatusPsynergy=_,_.CURSOR={X:0,Y:79},_.HIGHLIGHT={X:8,Y:72,WIDTH:160,HEIGHT:8},_.PSYNERGY={ICON_X:9,ICON_Y:70,NAME_X:24,NAME_Y:72,PP_LABEL_X:96,PP_LABEL_Y:72,PP_VALUE_END_X:125,PP_VALUE_Y:72,STAR_X:129,STAR_Y:73,RANGE_CENTER_X:148,RANGE_Y:72},_.PAGE_INDICATOR_ANCHOR={X:171,Y:64},_.MAX_LINES=4,_.SHIFT=16},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BattleStatusDjinn=void 0;const s=i(10),n=i(4),a=i(7),_=i(1);class o extends s.StatusComponent{constructor(t,e,i,s,n){super(t,e,i,s,n)}select_option(){const t={x:o.HIGHLIGHT.X+o.SHIFT_X*this.current_col,y:o.HIGHLIGHT.Y+o.SHIFT_Y*this.current_line,width:o.HIGHLIGHT.WIDTH,height:o.HIGHLIGHT.HEIGHT};this.update_highlight(t);const e=o.CURSOR.X+o.SHIFT_X*this.current_col,i=o.CURSOR.Y+o.SHIFT_Y*this.current_line,s={type:n.CursorManager.CursorTweens.POINT,variant:n.PointVariants.SHORT};this.data.cursor_manager.move_to({x:e,y:i},{animate:!1,tween_config:s}),this.window.page_indicator.select_page(this.current_col)}on_change(){this.select_option();const t=this.char_djinn[this.current_col][this.current_line],e=t.status===a.djinn_status.STANDBY?"Ready to summon.":t.description;this.update_description(e)}on_left(){if(this.char_djinn.length<=1)return;const t=this.char_djinn.length;this.current_col=(this.current_col+t-1)%t,this.char_djinn[this.current_col][this.current_line]||(this.current_line=this.char_djinn[this.current_col].length-1),this.on_change()}on_right(){if(this.char_djinn.length<=1)return;const t=this.char_djinn.length;this.current_col=(this.current_col+1)%t,this.char_djinn[this.current_col][this.current_line]||(this.current_line=this.char_djinn[this.current_col].length-1),this.on_change()}on_up(){this.char_djinn[this.current_col].length<=1||(0===this.current_line?0===this.current_col?(this.current_col=this.char_djinn.length-1,this.current_line=this.char_djinn[this.char_djinn.length-1].length-1):(this.current_col=this.current_col-1,this.current_line=this.char_djinn[this.current_col].length-1):this.current_line--,this.on_change())}on_down(){this.char_djinn[this.current_col].length<=1||(this.current_line+1===this.char_djinn[this.current_col].length?this.current_col===this.char_djinn.length-1?(this.current_col=0,this.current_line=0):(this.current_col=this.current_col+1,this.current_line=0):this.current_line++,this.on_change())}initialize(){this.update_djinn(),this.char_djinn.forEach((t,e)=>{t.forEach((t,i)=>{const s=t.name,n=t.element+"_star",r=t.recovery_turn+1,h=t.status;let c=o.DJINN.STAR_X+e*o.SHIFT_X,l=o.DJINN.STAR_Y+i*o.SHIFT_Y;const d=this.window.create_at_group(c,l,n,void 0,void 0,o.GROUP_KEY);this.state_sprites.push(d);let u=_.DEFAULT_FONT_COLOR;if(h===a.djinn_status.RECOVERY){u=_.YELLOW_FONT_COLOR,c=o.DJINN.RECOVERY_END_X+e*o.SHIFT_X,l=o.DJINN.RECOVERY_Y+i*o.SHIFT_Y;const t=this.window.set_text_in_position(r,c,l,!0,!1,u,!1,o.GROUP_KEY);this.state_sprites.push(t.text,t.shadow)}else h===a.djinn_status.STANDBY&&(u=_.RED_FONT_COLOR);c=o.DJINN.NAME_X+e*o.SHIFT_X,l=o.DJINN.NAME_Y+i*o.SHIFT_Y;const p=this.window.set_text_in_position(s,c,l,!1,!1,u,!1,o.GROUP_KEY);this.state_sprites.push(p.text,p.shadow)})}),this.select_option()}update_djinn(){const t=this.selected_char.djinni;let e=[];this.char_djinn=[];let i=0;t.forEach(t=>{i===o.MAX_LINES&&(this.char_djinn.push(e),e=[],i=0),e.push(this.data.info.djinni_list[t]),i++}),e.length>0&&this.char_djinn.push(e)}}e.BattleStatusDjinn=o,o.CURSOR={X:1,Y:87},o.HIGHLIGHT={X:8,Y:80,WIDTH:56,HEIGHT:8},o.DJINN={STAR_X:9,STAR_Y:81,NAME_X:16,NAME_Y:80,RECOVERY_END_X:58,RECOVERY_Y:80},o.SHIFT_X=56,o.SHIFT_Y=16,o.MAX_LINES=3},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BattleStatusItems=void 0;const s=i(10),n=i(4),a=i(11),_=i(8),o=i(1);class r extends s.StatusComponent{constructor(t,e,i,s,n){super(t,e,i,s,n)}select_option(){const t={x:r.HIGHLIGHT.X,y:r.HIGHLIGHT.Y+r.SHIFT*this.current_line,width:r.HIGHLIGHT.WIDTH,height:r.HIGHLIGHT.HEIGHT};this.update_highlight(t);const e=r.CURSOR.X,i=r.CURSOR.Y+r.SHIFT*this.current_line,s={type:n.CursorManager.CursorTweens.POINT,variant:n.PointVariants.SHORT};this.data.cursor_manager.move_to({x:e,y:i},{animate:!1,tween_config:s}),this.window.page_indicator.select_page(this.current_col)}on_change(){this.select_option();const t=this.char_items[this.current_col][this.current_line];this.update_description(this.data.info.items_list[t.key_name].description)}on_left(){if(this.char_items.length<=1)return;const t=this.char_items.length;this.current_col=(this.current_col+t-1)%t,this.char_items[this.current_col][this.current_line]||(this.current_line=this.char_items[this.current_col].length-1),this.reset()}on_right(){if(this.char_items.length<=1)return;const t=this.char_items.length;this.current_col=(this.current_col+1)%t,this.char_items[this.current_col][this.current_line]||(this.current_line=this.char_items[this.current_col].length-1),this.reset()}on_up(){this.char_items[this.current_col].length<=1||(0===this.current_line?(0===this.current_col?(this.current_col=this.char_items.length-1,this.current_line=this.char_items[this.char_items.length-1].length-1):(this.current_col=this.current_col-1,this.current_line=this.char_items[this.current_col].length-1),this.reset()):(this.current_line--,this.on_change()))}on_down(){this.char_items[this.current_col].length<=1||(this.current_line+1===this.char_items[this.current_col].length?(this.current_col===this.char_items.length-1?(this.current_col=0,this.current_line=0):(this.current_col=this.current_col+1,this.current_line=0),this.reset()):(this.current_line++,this.on_change()))}initialize(){const t={x:r.PAGE_INDICATOR_ANCHOR.X,y:r.PAGE_INDICATOR_ANCHOR.Y};this.update_abilities();this.char_items[this.current_col].forEach((t,e)=>{const i=t.key_name,s=this.data.info.items_list[t.key_name].name,n=t.broken,a=t.equipped,h=t.quantity<=1?void 0:t.quantity;let c=r.ITEM.ICON_X,l=r.ITEM.ICON_Y+e*r.SHIFT;const d=this.window.make_item_obj(i,{x:c,y:l},{broken:n,equipped:a,quantity:h,internal_group:r.GROUP_KEY});for(let t in d)d[t]&&this.state_sprites.push(d[t]);c=r.ITEM.NAME_X,l=r.ITEM.NAME_Y+e*r.SHIFT;let u=o.YELLOW_FONT_COLOR;t.broken?u=o.RED_FONT_COLOR:this.data.info.items_list[t.key_name].use_type!==_.use_types.NO_USE&&(u=o.DEFAULT_FONT_COLOR);const p=this.window.set_text_in_position(s,c,l,!1,!1,u,!1,r.GROUP_KEY);this.state_sprites.push(p.text,p.shadow)}),this.window.page_indicator.position=t,this.window.page_indicator.initialize(this.char_items.length,this.current_line,a.PageIndicatorModes.FLASH),this.select_option()}update_abilities(){const t=[...this.selected_char.items];this.char_items=[];let e=[];t.forEach((i,s)=>{this.data.info.items_list[i.key_name].use_type!==_.use_types.NO_USE&&e.push(t.splice(s,1)[0])});let i=[],s=0;e=e.concat(t),e.forEach(t=>{s===r.MAX_LINES&&(this.char_items.push(i),i=[],s=0),i.push(t),s++}),i.length>0&&this.char_items.push(i)}}e.BattleStatusItems=r,r.CURSOR={X:10,Y:79},r.HIGHLIGHT={X:8,Y:72,WIDTH:160,HEIGHT:8},r.ITEM={ICON_X:23,ICON_Y:68,NAME_X:40,NAME_Y:72},r.PAGE_INDICATOR_ANCHOR={X:171,Y:64},r.MAX_LINES=4,r.SHIFT=16},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.get_enemy_instance=e.Enemy=void 0;const s=i(5),n=i(0),a=i(3),_=i(1),o=i(9);class r extends s.Player{constructor(t,e){super(t.key_name,e||t.name),this.level=t.level,this.turns=t.turns,this.max_hp=t.max_hp,this.max_pp=t.max_pp,this.hp_recovery=t.hp_recovery,this.pp_recovery=t.pp_recovery,this.atk=t.atk,this.def=t.def,this.agi=t.agi,this.luk=t.luk,this.items=t.items,this.abilities=t.abilities,this.coins_reward=t.coins_reward,this.item_reward=t.item_reward,this.item_reward_chance=t.item_reward_chance,this.exp_reward=t.exp_reward,this.venus_level=t.venus_level,this.mercury_level=t.mercury_level,this.mars_level=t.mars_level,this.jupiter_level=t.jupiter_level,this.venus_power=t.venus_power,this.mercury_power=t.mercury_power,this.mars_power=t.mars_power,this.jupiter_power=t.jupiter_power,this.venus_resist=t.venus_resist,this.mercury_resist=t.mercury_resist,this.mars_resist=t.mars_resist,this.jupiter_resist=t.jupiter_resist,this.battle_scale=t.battle_scale,this.battle_animations_variations=Object.assign({},t.battle_animations_variations),this.fighter_type=s.fighter_types.ENEMY,this.class={name:"No Class",vulnerabilities:void 0===t.vulnerabilities?[]:t.vulnerabilities},this.current_exp=-1,this.effects=[],this.set_base_attributes()}set_base_attributes(){this.current_hp=this.max_hp,this.current_pp=this.max_pp,this.current_hp_recovery=this.hp_recovery,this.current_pp_recovery=this.pp_recovery,this.venus_level_current=this.venus_level,this.mercury_level_current=this.mercury_level,this.mars_level_current=this.mars_level,this.jupiter_level_current=this.jupiter_level,this.venus_power_current=this.venus_power,this.mercury_power_current=this.mercury_power,this.mars_power_current=this.mars_power,this.jupiter_power_current=this.jupiter_power,this.venus_resist_current=this.venus_resist,this.mercury_resist_current=this.mercury_resist,this.mars_resist_current=this.mars_resist,this.jupiter_resist_current=this.jupiter_resist}update_all(){this.set_base_attributes(),this.effects.forEach(t=>{switch(t.type){case o.effect_types.POWER:case o.effect_types.RESIST:case o.effect_types.MAX_HP:case o.effect_types.MAX_PP:case o.effect_types.ATTACK:case o.effect_types.DEFENSE:case o.effect_types.AGILITY:case o.effect_types.LUCK:t.apply_effect()}});for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t],i=e+"_power_current",s=e+"_resist_current";this[i]=a.clamp(this[i],_.ELEM_ATTR_MIN,_.ELEM_ATTR_MAX),this[s]=a.clamp(this[s],_.ELEM_ATTR_MIN,_.ELEM_ATTR_MAX)}}}e.Enemy=r,e.get_enemy_instance=function(t,e){return new r(t,t.name+e)}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ChoosingTargetWindow=void 0;const s=i(2),n=i(1),a=i(0),_=i(3);e.ChoosingTargetWindow=class{constructor(t,e){this.game=t,this.data=e,this.base_window=new s.Window(this.game,0,136,0,20),this.window_open=!1,this.group=this.game.add.group()}update_position(){this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}set_button(){const t=this.group.create(this.x-24,136,"buttons",this.action);this.sprites.push(t)}set_info(){const t="item"===this.action?this.data.info.items_list[this.item_obj.key_name].name:this.ability_name,e=this.base_window.set_text_in_position(t,this.ability_name_x,8);if(this.texts.push(e),this.element&&this.element!==a.elements.NO_ELEMENT&&!["summon","item"].includes(this.action)){const t=this.base_window.create_at_group(this.star_x,9,this.element+"_star");this.window_sprites.push(t)}if(this.icon_sprite_sheet&&"item"!==this.action){const t=this.base_window.create_at_group(9,5,this.icon_sprite_sheet,void 0,this.ability_key_name);this.window_sprites.push(t)}if("psynergy"===this.action){const t=this.base_window.set_text_in_position(this.quantities[0].toString(),123,8,!0);this.texts.push(t);const e=this.base_window.set_text_in_position("PP",96,8);this.texts.push(e)}else if("summon"===this.action){const t=_.pickBy(this.data.info.summons_list[this.ability_key_name].requirements,t=>t);let e=0;a.ordered_elements.forEach(i=>{if(!(i in t))return;const s=0===e?97:113,n=this.base_window.create_at_group(s,9,i+"_star");this.window_sprites.push(n);const a=this.base_window.set_text_in_position(t[i].toString(),s+6+1,8);this.texts.push(a),++e})}else if("item"===this.action){if(this.icon_group=this.game.add.group(),this.icon_group.create(0,0,this.icon_sprite_sheet,this.item_obj.key_name).anchor.setTo(.5,.5),this.item_obj.equipped&&this.icon_group.create(0,0,"equipped"),this.item_obj.quantity>1){let t=this.game.add.bitmapText(0,0,"gs-item-bmp-font",this.item_obj.quantity.toString());this.icon_group.add(t)}this.base_window.add_sprite_to_group(this.icon_group),this.icon_group.x=9+(n.ICON_WIDTH>>1),this.icon_group.y=5+(n.ICON_HEIGHT>>1),this.window_sprites.push(this.icon_group)}}open(t,e,i,s,n,a){switch(this.action=t,this.ability_name=e,this.element=i,this.ability_key_name=s,this.quantities=n,this.action){case"attack":this.width=84,this.x=88,this.ability_name_x=24;break;case"psynergy":this.width=140,this.x=64,this.ability_name_x=24,this.star_x=129,this.icon_sprite_sheet="abilities_icons";break;case"djinni":this.width=76,this.x=88,this.ability_name_x=24,this.star_x=9;break;case"summon":this.width=132,this.x=80,this.ability_name_x=24,this.icon_sprite_sheet="abilities_icons";break;case"item":this.width=124,this.x=72,this.ability_name_x=32,this.icon_sprite_sheet="items_icons",this.item_obj=a}this.base_window.update_size({width:this.width}),this.base_window.update_position({x:this.x}),this.base_window.show(void 0,!1),this.sprites=[],this.window_sprites=[],this.texts=[],this.update_position(),this.set_button(),this.set_info(),this.window_open=!0}close(){this.sprites.forEach(t=>{t.destroy()}),this.texts.forEach(t=>{this.base_window.remove_text(t)}),this.window_sprites.forEach(t=>{this.base_window.remove_from_group(t,!0)}),this.sprites=[],this.window_sprites=[],this.texts=[],this.base_window.close(void 0,!1),this.icon_group&&(this.icon_group.destroy(),this.icon_group=null),this.window_open=!1,this.element=void 0,this.icon_sprite_sheet=void 0}destroy(){this.base_window.destroy(!1),this.group.destroy(),this.icon_group&&this.icon_group.destroy()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.EnemyAI=void 0;const s=i(5);e.EnemyAI=class{static roll_action(t,e,i){let n=!1;return{key_name:"attack",targets:e.map((t,e)=>{let i=!t.has_permanent_status(s.permanent_status.DOWNED);const a={magnitude:i&&!n?1:null,target:{instance:i&&!n?t:null},type:"attack"};return i&&!n&&(n=!0),a})}}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BattleFormulas=e.DELUSION_MISS_CHANCE=e.EVASION_CHANCE=e.CRITICAL_CHANCE=void 0;const s=i(0),n=i(5),a=i(1),_=i(3);e.CRITICAL_CHANCE=1/32,e.EVASION_CHANCE=1/32,e.DELUSION_MISS_CHANCE=.66;e.BattleFormulas=class{static player_turn_speed(t,e=!1,i=!1){return(t+(t*_.random(0,65535)>>20))*(i?.5:1)+(e?1e4:0)}static enemy_turn_speed(t,e,i,s=!1){const n=s?1e4:0;if(1===e)return t+n;if(2===i)return(t>>1)+n;if(3===i)switch(e){case 2:return 3*t/4+n;case 3:return(t>>1)+n}return(t>>1)+n}static base_damage(t,e){const i=t.atk-e.def;return(i<0?0:i)/2}static special_physical_attack(t,e,i,s){return this.base_damage(t,e)*i+s}static power_multiplier(t,e,i,n=!0){let o=100,r=100;if(i!==s.elements.NO_ELEMENT){if(r=e[i+"_resist_current"],void 0!==t){o=t[i+"_power_current"]}}return 1+_.clamp(o-r,a.ELEM_ATTR_MIN,a.ELEM_ATTR_MAX)/(n?200:400)}static physical_attack(t,e,i,s,n){return this.special_physical_attack(t,e,i,s)*this.power_multiplier(t,e,n,!1)}static psynergy_damage(t,e,i,s){return i+this.power_multiplier(t,e,s,!0)}static item_damage(t,e,i){return e+this.power_multiplier(void 0,t,i,!0)}static heal_ability(t,e,i){let n=100;if(i!==s.elements.NO_ELEMENT){n=t[i+"_power_current"]}return e*n/100}static summon_damage(t,e,i){return e+t.max_hp*i*.03}static ailment_success(t,e,i,s,n,a){const _=n+"_level_current";return 3*(t[_]-e[_]-(e.luk>>1))/100+i+(a=void 0===a?0:a)*s>=Math.random()}static ailment_recovery(t,e,i){return 655*(3*t.luk-5*e+100*i)>=_.random(0,65535)}static battle_poison_damage(t,e){let i=0;switch(e){case n.permanent_status.POISON:i=1;break;case n.permanent_status.VENOM:i=2}return i*t.max_hp/10|0}static summon_power(t){return 5*((t=_.clamp(t,0,4))*t+t)}}},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function _(t){try{r(s.next(t))}catch(t){a(t)}}function o(t){try{r(s.throw(t))}catch(t){a(t)}}function r(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(_,o)}r((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.BattleAnimationManager=void 0;const n=i(65);e.BattleAnimationManager=class{constructor(t,e){this.game=t,this.data=e,this.animations={},this.not_available=new Set,this.render_function=null}load_animation(t){return s(this,void 0,void 0,(function*(){if(t in this.animations||this.not_available.has(t)||"no_animation"===t)return;const e=t+"_battle_animation",i=t+"_battle_recipe",s=this.game.load.atlasJSONHash(e,`assets/images/abilities_animations/${t}.png`,`assets/images/abilities_animations/${t}.json`),a=this.game.load.json(i,`assets/dbs/abilities_animations/${t}_db.json`);let _,o=!0;const r=new Promise(t=>{_=t});let h;s.onFileComplete.addOnce((t,e,i)=>{o=o&&i,_()});const c=new Promise(t=>{h=t});let l;a.onFileComplete.addOnce((t,e,i)=>{o=o&&i,h()});const d=new Promise(t=>l=t);if(this.game.load.onLoadComplete.addOnce(l),this.game.load.start(),yield Promise.all([r,c,d]),o){const e=this.game.cache.getJSON(t+"_battle_recipe");this.animations[t]=new n.BattleAnimation(this.game,this.data,e.key_name,e.sprites,e.x_sequence,e.y_sequence,e.x_ellipse_axis_factor_sequence,e.y_ellipse_axis_factor_sequence,e.x_scale_sequence,e.y_scale_sequence,e.x_anchor_sequence,e.y_anchor_sequence,e.alpha_sequence,e.rotation_sequence,e.stage_angle_sequence,e.hue_angle_sequence,e.tint_sequence,e.grayscale_sequence,e.colorize_sequence,e.custom_filter_sequence,e.play_sequence,e.set_frame_sequence,e.blend_mode_sequence,e.particles_sequence,e.is_party_animation)}else this.not_available.add(t)}))}animation_available(t){return t in this.animations}play(t,e,i,n,a,_){return s(this,void 0,void 0,(function*(){if(!(t in this.animations))return;const s=t+"_battle_animation";let o;this.animations[t].initialize(s,e,i,n,a,_.battle_group,_.camera_angle,[_.battle_bg,_.battle_bg2]);const r=new Promise(t=>{o=t});this.render_function=this.animations[t].render.bind(this.animations[t]),this.animations[t].play(o),yield r,this.render_function=null}))}render(){this.render_function&&this.render_function()}destroy(){for(let t in this.animations)this.game.cache.removeTextureAtlas(t+"_battle_animation"),this.game.cache.removeJSON(t+"_battle_recipe")}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BattleAnimation=void 0;const s=i(1),n=i(0),a=i(25),_=i(3);var o;!function(t){t.RECTANGLE="rectangle",t.POINT="point",t.LINE="line",t.ELLIPSE="ellipse",t.CIRCLE="circle"}(o||(o={}));class r{constructor(t,e,i,s,n,a,_,o,r,h,c,l,d,u,p,m,g,w,f,y,b,v,E,x,T){this.x_sequence=[],this.y_sequence=[],this.x_ellipse_axis_factor_sequence=[],this.y_ellipse_axis_factor_sequence=[],this.x_scale_sequence=[],this.y_scale_sequence=[],this.x_anchor_sequence=[],this.y_anchor_sequence=[],this.alpha_sequence=[],this.rotation_sequence=[],this.stage_angle_sequence=[],this.hue_angle_sequence=[],this.tint_sequence=[],this.grayscale_sequence=[],this.colorize_sequence=[],this.custom_filter_sequence=[],this.play_sequence=[],this.set_frame_sequence=[],this.blend_mode_sequence=[],this.game=t,this.data=e,this.key_name=i,this.sprites_keys=s,this.x_sequence=void 0===n?[]:n,this.y_sequence=void 0===a?[]:a,this.x_ellipse_axis_factor_sequence=void 0===_?[]:_,this.y_ellipse_axis_factor_sequence=void 0===o?[]:o,this.x_scale_sequence=void 0===r?[]:r,this.y_scale_sequence=void 0===h?[]:h,this.x_anchor_sequence=void 0===c?[]:c,this.y_anchor_sequence=void 0===l?[]:l,this.alpha_sequence=void 0===d?[]:d,this.rotation_sequence=void 0===u?[]:u,this.stage_angle_sequence=void 0===p?[]:p,this.hue_angle_sequence=void 0===m?[]:m,this.tint_sequence=void 0===g?[]:g,this.grayscale_sequence=void 0===w?[]:w,this.colorize_sequence=void 0===f?[]:f,this.custom_filter_sequence=void 0===y?[]:y,this.play_sequence=void 0===b?[]:b,this.set_frame_sequence=void 0===v?[]:v,this.blend_mode_sequence=void 0===E?[]:E,this.particles_sequence=void 0===x?[]:x,this.is_party_animation=T,this.running=!1,this.render_callbacks={}}initialize(t,e,i,s,n,a,_,o){this.sprites=[],this.sprites_prev_properties={},this.stage_prev_value=void 0,this.x0=this.game.camera.x,this.y0=this.game.camera.y,this.caster_sprite=e,this.targets_sprites=i,this.background_sprites=o,this.group_caster=s,this.group_enemy=n,this.super_group=a,this.stage_camera=_,this.trails_objs=[],a.getChildIndex(s)<a.getChildIndex(n)?(this.back_group=s,this.front_group=n):(this.back_group=n,this.front_group=s);for(let e=0;e<this.sprites_keys.length;++e){const i=this.sprites_keys[e];let s;if(i.trails&&(s=this.initialize_trail_textures(i.trail_frame_diff,i.trails_mode)),!i.per_target){const e=i.count?i.count:1;for(let n=0;n<e;++n){const e=this.game.add.sprite(this.x0,this.y0,t);"over"===i.position?a.addChild(e):"between"===i.position?a.addChildAt(e,a.getChildIndex(this.front_group)):"behind"===i.position&&a.addChildAt(e,a.getChildIndex(this.back_group));const n=Phaser.Animation.generateFrameNames(i.key_name+"/",0,e.animations.frameTotal,"",3);e.animations.add(i.key_name,n),e.animations.frameName=n[0],e.data.battle_index=this.sprites.length,e.data.trails=i.trails,e.data.trails_info=s,i.trails&&(e.data.x_history=new Array(s.frame_diff+1).fill(e.x-this.game.camera.x),e.data.y_history=new Array(s.frame_diff+1).fill(e.y-this.game.camera.y)),this.sprites.push(e)}}}this.set_filters()}initialize_trail_textures(t,e){switch(e){case"screen":e=PIXI.blendModes.SCREEN;break;case"normal":e=PIXI.blendModes.NORMAL}const i=this.game.add.renderTexture(s.GAME_WIDTH,s.GAME_HEIGHT);let n=this.game.add.sprite(this.game.camera.x,this.game.camera.y,i);n.blendMode=e,n.alpha=.6;const a=this.game.add.renderTexture(s.GAME_WIDTH,s.GAME_HEIGHT);let _=this.game.add.sprite(this.game.camera.x,this.game.camera.y,a);return _.blendMode=e,_.alpha=.4,this.trails_objs=this.trails_objs.concat(i,a,n,_),{texture_1:i,texture_2:a,frame_diff:t}}set_filters(){this.caster_filter=this.game.add.filter("ColorFilters"),this.targets_filter=this.game.add.filter("ColorFilters"),this.background_filter=this.game.add.filter("ColorFilters"),this.sprites_filters=[],this.caster_sprite.filters=[this.caster_filter],this.targets_sprites.forEach(t=>{t.filters=[this.targets_filter]}),this.background_sprites.forEach(t=>{t.filters=[this.background_filter]}),this.sprites.forEach((t,e)=>{this.sprites_filters.push(this.game.add.filter("ColorFilters")),t.filters=[this.sprites_filters[e]]})}play(t){this.running=!0,this.promises=[],this.play_number_property_sequence(this.x_sequence,"x"),this.play_number_property_sequence(this.y_sequence,"y"),this.play_number_property_sequence(this.x_ellipse_axis_factor_sequence,"ellipses_semi_major"),this.play_number_property_sequence(this.y_ellipse_axis_factor_sequence,"ellipses_semi_minor"),this.play_number_property_sequence(this.alpha_sequence,"alpha"),this.play_number_property_sequence(this.rotation_sequence,"rotation"),this.play_number_property_sequence(this.x_scale_sequence,"x","scale"),this.play_number_property_sequence(this.y_scale_sequence,"y","scale"),this.play_number_property_sequence(this.x_anchor_sequence,"x","anchor"),this.play_number_property_sequence(this.y_anchor_sequence,"y","anchor"),this.play_number_property_sequence(this.hue_angle_sequence,"hue_adjust","filter"),this.play_number_property_sequence(this.grayscale_sequence,"gray","filter"),this.play_sprite_sequence(),this.play_blend_modes(),this.play_filter_property(this.tint_sequence,"tint"),this.play_filter_property(this.colorize_sequence,"colorize","colorize_intensity"),this.play_filter_property(this.custom_filter_sequence),this.play_stage_angle_sequence(),this.play_particles(),this.unmount_animation(t)}unmount_animation(t){Promise.all(this.promises).then(()=>{this.caster_filter=null,this.targets_filter=null,this.background_filter=null,this.sprites_filters=[],this.caster_sprite.filters=void 0,this.targets_sprites.forEach(t=>{t.filters=void 0}),this.background_sprites.forEach(t=>{t.filters=void 0}),this.sprites.forEach(t=>{t.destroy()}),this.trails_objs.forEach(t=>{t.destroy(!0)}),this.running=!1,void 0!==t&&t()})}get_sprites(t,e){return e?"background"===t.sprite_index?"filter"===e?[this.background_filter]:this.background_sprites.forEach(t=>t[e]):"caster"===t.sprite_index?"filter"===e?[this.caster_filter]:[this.caster_sprite[e]]:"targets"===t.sprite_index?"filter"===e?[this.targets_filter]:this.targets_sprites.forEach(t=>t[e]):"filter"===e?Array.isArray(t.sprite_index)?t.sprite_index.map(t=>this.sprites_filters[t]):[this.sprites_filters[t.sprite_index]]:Array.isArray(t.sprite_index)?t.sprite_index.map(t=>this.sprites[t][e]):[this.sprites[t.sprite_index][e]]:"background"===t.sprite_index?this.background_sprites:"caster"===t.sprite_index?[this.caster_sprite]:"targets"===t.sprite_index?this.targets_sprites:Array.isArray(t.sprite_index)?t.sprite_index.map(t=>this.sprites[t]):[this.sprites[t.sprite_index]]}play_number_property_sequence(t,e,i){let a={},_={};for(let o=0;o<t.length;++o){const h=t[o];h.sprite_index in _||(_[h.sprite_index]=!0),h.sprite_index in a&&(_[h.sprite_index]=!1);let c=this.get_sprites(h,i),l=!1;c.forEach((t,i)=>{let o;o=t.data&&t.data.hasOwnProperty("battle_index")?t.key+"_"+t.data.battle_index:t.key+"_"+i,void 0===this.sprites_prev_properties[o]&&(this.sprites_prev_properties[o]={}),void 0===this.sprites_prev_properties[o][e]&&(this.sprites_prev_properties[o][e]=t[e]);const c=Array.isArray(h.to)?h.to[i]:h.to;let d=c;if("target"===c){const t=Array.isArray(h.shift)?h.shift[i]:h.shift;d=this.targets_sprites[this.targets_sprites.length>>1][e]+(void 0===t?0:t)}if(["rotation","hue_adjust"].includes(e)&&(this.sprites_prev_properties[o][e]=n.range_360(this.sprites_prev_properties[o][e]),t[e]=this.sprites_prev_properties[o][e],d=r.get_angle_by_direction(this.sprites_prev_properties[o][e],c,h.direction,"rotation"===e),Math.abs(this.sprites_prev_properties[o][e]-d)>s.degree360&&(d-=Math.sign(d)*s.degree360)),d=h.is_absolute?d:this.sprites_prev_properties[o][e]+c,this.sprites_prev_properties[o][e]=d,"initial"===h.tween)t[e]=d;else{h.sprite_index in a||(a[h.sprite_index]={[i]:[]}),i in a[h.sprite_index]||(a[h.sprite_index][i]=[]);const s=Array.isArray(h.start_delay)?h.start_delay[i]:h.start_delay;if("instantly"===h.duration){let i;if(!l){let t=new Promise(t=>{i=t});this.promises.push(t),l=!0}this.game.time.events.add(s,()=>{t[e]=d,h.force_stage_update&&this.stage_camera.update(),h.is_absolute&&["rotation","hue_adjust"].includes(e)&&(t[e]=n.range_360(t[e])),void 0!==i&&i()})}else{const o=this.game.add.tween(t).to({[e]:d},Array.isArray(h.duration)?h.duration[i]:h.duration,h.tween.split(".").reduce((t,e)=>t[e],Phaser.Easing),_[h.sprite_index],s,0,void 0!==h.yoyo&&h.yoyo);if(!l){let i,s=new Promise(t=>{i=t});this.promises.push(s),o.onStart.addOnce(()=>{h.force_stage_update&&(this.stage_camera.spining=!0)}),o.onComplete.addOnce(()=>{h.is_absolute&&["rotation","hue_adjust"].includes(e)&&(t[e]=n.range_360(t[e])),i(),h.force_stage_update&&(this.stage_camera.spining=!1)}),l=!0}a[h.sprite_index][i].length&&a[h.sprite_index][i][a[h.sprite_index][i].length-1].chain(o),a[h.sprite_index][i].push(o)}}})}}play_sprite_sequence(){for(let t=0;t<this.play_sequence.length;++t){const e=this.play_sequence[t];this.get_sprites(e).forEach((t,i)=>{let s,n=new Promise(t=>{s=t});this.promises.push(n);const a=Array.isArray(e.start_delay)?e.start_delay[i]:e.start_delay;this.game.time.events.add(a,()=>{const i=t.animations.getAnimation(e.animation_key);i.reversed=void 0!==e.reverse&&e.reverse,i.stop(!0),t.animations.play(e.animation_key,e.frame_rate,e.repeat),e.wait?t.animations.currentAnim.onComplete.addOnce(()=>{e.hide_on_complete&&(t.alpha=0),s()}):s()})})}}play_blend_modes(){for(let t=0;t<this.blend_mode_sequence.length;++t){const e=this.blend_mode_sequence[t];this.get_sprites(e).forEach((t,i)=>{let s,n=new Promise(t=>{s=t});this.promises.push(n);const a=Array.isArray(e.start_delay)?e.start_delay[i]:e.start_delay;this.game.time.events.add(a,()=>{switch(e.mode){case"screen":t.blendMode=PIXI.blendModes.SCREEN;break;case"normal":t.blendMode=PIXI.blendModes.NORMAL}}),s()})}}play_filter_property(t,e,...i){for(let s=0;s<t.length;++s){const n=t[s];this.get_sprites(n).forEach((t,s)=>{let a,_=new Promise(t=>{a=t});this.promises.push(_);const o=Array.isArray(n.start_delay)?n.start_delay[s]:n.start_delay;this.game.time.events.add(o,()=>{const s=void 0!==n.filter?n.filter:e;t.filters[0][s]=n.value,i.forEach(e=>{t.filters[0][e]=n[e]})}),a()})}}play_stage_angle_sequence(){let t=[];for(let e=0;e<this.stage_angle_sequence.length;++e){const i=this.stage_angle_sequence[e];let _;if(void 0===this.stage_prev_value&&(this.stage_prev_value=this.stage_camera.rad),"default"===i.to?_=a.DEFAULT_POS_ANGLE:i.is_absolute?(this.stage_prev_value=n.range_360(this.stage_prev_value),this.stage_camera.rad=this.stage_prev_value,_=r.get_angle_by_direction(this.stage_prev_value,i.to,i.direction,!0),Math.abs(this.stage_prev_value-_)>s.degree360&&(_-=Math.sign(_)*s.degree360)):_=this.stage_prev_value+i.to,this.stage_prev_value=_,"initial"===i.tween)i.is_absolute?this.stage_camera.rad=_:this.stage_camera.rad+=_;else{const e=this.game.add.tween(this.stage_camera).to({rad:_},i.duration,i.tween.split(".").reduce((t,e)=>t[e],Phaser.Easing),0===t.length,i.start_delay);let s,a=new Promise(t=>{s=t});this.promises.push(a),e.onStart.addOnce(()=>{this.stage_camera.spining=!0}),e.onComplete.addOnce(()=>{i.is_absolute&&(this.stage_camera.rad=n.range_360(this.stage_camera.rad)),this.stage_camera.spining=!1,s()}),t.length&&t[t.length-1].chain(e),t.push(e)}}}get_sprite_xy_pos(t,e,i,s){return"caster"===t?t=this.caster_sprite.x:"targets"===t&&_.mean(this.targets_sprites.map(t=>t.x)),"caster"===e?e=this.caster_sprite.y:"targets"===e&&_.mean(this.targets_sprites.map(t=>t.y)),{x:t+=i||0,y:e+=s||0}}play_particles(){var t;for(let e=0;e<this.particles_sequence.length;++e){let i;const n=new Promise(t=>{i=t});this.promises.push(n);const a=this.particles_sequence[e],r={};for(let t in a.zones){const e=a.zones[t];let i;switch(e.type){case o.CIRCLE:i=this.data.particle_manager.createCircleZone(e.radius);break;case o.ELLIPSE:i=this.data.particle_manager.createEllipseZone(e.width,e.height);break;case o.LINE:i=this.data.particle_manager.createLineZone(e.points[0].x,e.points[0].y,e.points[1].x,e.points[1].y);break;case o.POINT:i=this.data.particle_manager.createPointZone(e.points[0].x,e.points[0].y);break;case o.RECTANGLE:i=this.data.particle_manager.createRectangleZone(e.width,e.height)}r[t]=i}for(let e in a.data){const i=_.cloneDeep(a.data[e]);void 0!==(null===(t=i.target)||void 0===t?void 0:t.zone_key)&&(i.target.zone=r[i.target.zone_key]),this.data.particle_manager.addData(e,i)}const h=[],c=[];a.emitters.forEach((t,i)=>{var n,_;const o=this.data.particle_manager.createEmitter(t.render_type,void 0,void 0,t.render_white_core);if(o.force.x=void 0===(null===(n=t.force)||void 0===n?void 0:n.x)?o.force.x:t.force.x,o.force.y=void 0===(null===(_=t.force)||void 0===_?void 0:_.y)?o.force.y:t.force.y,o.renderer.autoClear=!t.show_trails,t.show_trails||t.pixel_reducing_factor){const s=`advanced_particles_sequence_${e}_${i}`;this.render_callbacks[s]=()=>{"pixel"===t.render_type&&(t.show_trails&&o.renderer.clear(t.trails_clear_factor),void 0!==t.pixel_reducing_factor&&(o._delay.waiting||(o.renderer.pixelSize-=t.pixel_reducing_factor)))},h.push(s)}"pixel"===t.render_type&&(o.renderer.pixelSize=void 0===t.pixel_size?2:t.pixel_size,o.renderer.useRect=void 0!==t.pixel_is_rect&&t.pixel_is_rect,"screen"===t.particles_display_blend_mode&&(o.renderer.display.blendMode=Phaser.blendModes.SCREEN),o.renderer.resize(s.GAME_WIDTH<<1,s.GAME_HEIGHT));o.addToWorld(this.super_group).forEach(e=>{e&&("over"===t.position?this.super_group.addChild(e):"between"===t.position?this.super_group.setChildIndex(e,this.super_group.getChildIndex(this.front_group)):"behind"===t.position&&this.super_group.setChildIndex(e,this.super_group.getChildIndex(this.back_group)))}),t.gravity_well&&o.createGravityWell(t.gravity_well.x,t.gravity_well.y,t.gravity_well.power,t.gravity_well.epsilon,t.gravity_well.gravity);const{x:l,y:d}=this.get_sprite_xy_pos(t.x,t.y,t.shift_x,t.shift_y);if(o.emit(t.emitter_data_key,l,d,Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},void 0!==t.total&&{total:t.total}),void 0!==t.repeat&&{repeat:t.repeat}),void 0!==t.frequency&&{frequency:t.frequency}),void 0!==t.x_step&&{xStep:t.x_step}),void 0!==t.y_step&&{yStep:t.y_step}),void 0!==t.delay&&{delay:t.delay}),void 0!==t.zone_key&&{zone:r[t.zone_key]}),void 0!==t.random_in_zone&&{random:t.random_in_zone}),void 0!==t.spacing&&{spacing:t.spacing}),void 0!==t.radiate&&{radiate:t.radiate}),void 0!==t.radiateFrom&&{radiateFrom:t.radiateFrom})),void 0!==t.animation){const e=a.data[t.emitter_data_key].image,i=this.data.info.misc_sprite_base_list[e],s=i.getAnimationKey(e,t.animation.animation_key);o.forEach(t=>{i.setAnimation(t,e)},this),o.onEmit=new Phaser.Signal,o.onEmit.add((e,i)=>{i.animations.play(s,t.animation.frame_rate,t.animation.loop)})}c.push(o)}),this.game.time.events.add(a.emission_finish,()=>{h.forEach(t=>{delete this.render_callbacks[t]}),c.forEach(t=>{this.data.particle_manager.removeEmitter(t),t.onEmit&&t.onEmit.removeAll(),t.destroy()});for(let t in a.data)this.data.particle_manager.clearData(t);i()})}}render(){let t=!0;this.sprites.forEach(e=>{e.data.trails&&(e.data.x_history.unshift(e.x),e.data.y_history.unshift(e.y),t&&(e.data.trails_info.texture_1.clear(),e.data.trails_info.texture_2.clear(),t=!1),e.data.trails_info.texture_1.renderXY(e,e.data.x_history[e.data.trails_info.frame_diff>>1],e.data.y_history[e.data.trails_info.frame_diff>>1]),e.data.trails_info.texture_2.renderXY(e,e.data.x_history.pop(),e.data.y_history.pop()))});for(let t in this.render_callbacks)this.render_callbacks[t]()}static get_angle_by_direction(t,e,i,a=!1){let _;if(_=a?(e=s.degree360-e)<t?"counter_clockwise":"clockwise":e>t?"counter_clockwise":"clockwise",_===i)return e;const o=e%s.degree360-t%s.degree360,r=Math.sign(o)*s.degree360-o,h=t%s.degree360-r;if("closest"===i){let i,a;return h>0?(a=h-n.range_360(t),i=s.degree360-a):(i=e-n.range_360(t),a=s.degree360-i),Math.abs(i)<Math.abs(a)?e:h}return h}}e.BattleAnimation=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.load_databases=void 0;const s=i(3);e.load_databases=function(t,e){e.init_db=t.cache.getJSON("init_db"),e.npc_db=t.cache.getJSON("npc_db"),e.interactable_objects_db=t.cache.getJSON("interactable_objects_db"),e.misc_animations_db=t.cache.getJSON("misc_animations_db"),e.classes_db=t.cache.getJSON("classes_db"),e.abilities_db=t.cache.getJSON("abilities_db"),e.items_db=t.cache.getJSON("items_db"),e.djinni_db=t.cache.getJSON("djinni_db"),e.enemies_db=t.cache.getJSON("enemies_db"),e.enemies_parties_db=t.cache.getJSON("enemies_parties_db"),e.maps_db=t.cache.getJSON("maps_db"),e.main_chars_db=t.cache.getJSON("main_chars_db"),e.summons_db=t.cache.getJSON("summons_db"),e.shopkeep_dialog_db=t.cache.getJSON("shopkeep_dialog_db"),e.shops_db=t.cache.getJSON("shops_db"),e.shopkeep_dialog_db=s.mapKeys(e.shopkeep_dialog_db,t=>t.key_name),e.interactable_objects_db=s.mapKeys(e.interactable_objects_db,t=>t.key_name),e.enemies_parties_db=s.mapKeys(e.enemies_parties_db,t=>t.key_name),e.npc_db=s.mapKeys(e.npc_db,t=>t.key_name)}},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function _(t){try{r(s.next(t))}catch(t){a(t)}}function o(t){try{r(s.throw(t))}catch(t){a(t)}}function r(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(_,o)}r((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_game_data=void 0;const n=i(68),a=i(69),_=i(75),o=i(76),r=i(77),h=i(78),c=i(85),l=i(86),d=i(88),u=i(89);e.initialize_game_data=function(t,e){return s(this,void 0,void 0,(function*(){let i;const s=new Promise(t=>{i=t});let p;e.info.maps_list=h.initialize_maps(t,e,e.dbs.maps_db,i),yield s,e.info.classes_list=n.initialize_classes(e.dbs.classes_db);const m=new Promise(t=>{p=t});let g;e.info.enemies_list=r.initialize_enemies(t,e.dbs.enemies_db,p),yield m,e.info.djinni_list=o.initialize_djinni(e.dbs.djinni_db);const w=new Promise(t=>{g=t});let f;e.info.djinni_sprites=o.initialize_djinni_sprites(t,g),yield w;const y=new Promise(t=>{f=t});let b;e.info.abilities_list=a.initialize_abilities(t,e.dbs.abilities_db,f),yield y;const v=new Promise(t=>{b=t});let E;e.info.items_list=_.initialize_items(t,e.dbs.items_db,b),yield v,e.info.party_data={members:[],coins:e.dbs.init_db.coins,game_tickets:{coins_remaining:300,tickets_bought:0}};const x=new Promise(t=>{E=t});let T;e.info.main_char_list=n.initialize_main_chars(t,e.info,e.dbs.main_chars_db,e.dbs.classes_db,E),yield x;const A=new Promise(t=>{T=t});let S;e.info.misc_sprite_base_list=c.initialize_misc_data(t,e.dbs.misc_animations_db,T),yield A;const I=new Promise(t=>{S=t});e.info.iter_objs_sprite_base_list=d.initialize_interactable_objs_data(t,e.dbs.interactable_objects_db,S),yield I,e.info.shops_list=l.initialize_shops(e.dbs.shops_db),e.info.summons_list=u.initialize_summons(e.dbs.summons_db),e.info.field_abilities_list=a.initialize_field_abilities(t,e)}))}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_main_chars=e.initialize_classes=void 0;const s=i(27),n=i(12),a=i(14);e.initialize_classes=function(t){let e={};for(let i=0;i<t.classes.length;++i){const n=t.classes[i];e[n.key_name]=new s.Classes(n.key_name,n.name,n.required_venus_level,n.required_mercury_level,n.required_mars_level,n.required_jupiter_level,n.hp_boost,n.pp_boost,n.atk_boost,n.def_boost,n.agi_boost,n.luk_boost,n.ability_level_pairs,n.class_type,n.vulnerabilities)}return e},e.initialize_main_chars=function(t,e,i,s,_){let o=[],r={};for(let _=0;_<i.length;++_){const h=i[_],c=new a.SpriteBase(h.key_name,h.actions.map(t=>t.key));r[h.key_name]=new n.MainChar(h.key_name,e,c,h.walk_speed,h.dash_speed,h.climb_speed,h.name,h.hp_curve,h.pp_curve,h.atk_curve,h.def_curve,h.agi_curve,h.luk_curve,h.exp_curve,h.starting_level,s.class_table,h.battle_scale,h.venus_level_base,h.mercury_level_base,h.mars_level_base,h.jupiter_level_base,h.venus_power_base,h.mercury_power_base,h.mars_power_base,h.jupiter_power_base,h.venus_resist_base,h.mercury_resist_base,h.mars_resist_base,h.jupiter_resist_base,h.innate_abilities,h.in_party,h.djinni,h.items,h.battle_animations_variations),h.in_party&&e.party_data.members.push(r[h.key_name]);for(let t=0;t<h.actions.length;++t){const e=h.actions[t];c.setActionSpritesheet(e.key,e.spritesheet_img,e.spritesheet),c.setActionDirections(e.key,e.directions,e.directions_frames_number),c.setActionFrameRate(e.key,e.frame_rate),c.setActionLoop(e.key,e.loop)}let l;c.generateAllFrames();const d=new Promise(t=>{l=t});o.push(d),c.loadSpritesheets(t,!0,l)}return Promise.all(o).then(_),r}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_field_abilities=e.initialize_abilities=void 0;const s=i(13),n=i(70),a=i(73),_=i(74);e.initialize_abilities=function(t,e,i){let n={};for(let t=0;t<e.length;++t){const i=e[t];n[i.key_name]=new s.Ability(i.key_name,i.name,i.description,i.type,i.element,i.battle_target,i.range,i.pp_cost,i.ability_power,i.effects_outside_battle,i.is_battle_ability,i.is_field_psynergy,i.effects,i.ability_category,i.battle_animation_key,i.priority_move,i.has_critical,i.crit_mult_factor,i.can_switch_to_unleash,i.can_be_evaded,i.use_diminishing_ratio,i.msg_type,i.affects_pp,i.has_animation_variation)}return t.load.atlasJSONHash("abilities_icons","assets/images/icons/abilities/abilities_icons.png","assets/images/icons/abilities/abilities_icons.json").onLoadComplete.addOnce(i),t.load.start(),n},e.initialize_field_abilities=function(t,e){return{move:new n.MoveFieldPsynergy(t,e),frost:new a.FrostFieldPsynergy(t,e),growth:new _.GrowthFieldPsynergy(t,e)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MoveFieldPsynergy=void 0;const s=i(1),n=i(22),a=i(0),_=i(20);class o extends _.FieldAbilities{constructor(t,e){super(t,e,o.ABILITY_KEY_NAME,o.MOVE_MAX_RANGE,o.ACTION_KEY_NAME,!0),this.set_bootstrap_method(this.init_move.bind(this)),this.set_cast_finisher_method(this.unset_hue_shifter.bind(this)),this.hand_sprite_base=this.data.info.misc_sprite_base_list[o.MOVE_HAND_KEY_NAME];const i=this.hand_sprite_base.getActionKey(o.MOVE_HAND_KEY_NAME);this.hand_sprite=this.game.add.sprite(0,0,i),this.hand_sprite.visible=!1,this.hand_sprite_base.setAnimation(this.hand_sprite,o.MOVE_HAND_KEY_NAME),this.emitter=null,this.final_emitter=null}set_controls(){let t=[{key:this.data.gamepad.LEFT,on_down:()=>{this.controllable_char.trying_to_push_direction=a.directions.left,this.fire_push()}},{key:this.data.gamepad.RIGHT,on_down:()=>{this.controllable_char.trying_to_push_direction=a.directions.right,this.fire_push()}},{key:this.data.gamepad.UP,on_down:()=>{this.controllable_char.trying_to_push_direction=a.directions.up,this.fire_push()}},{key:this.data.gamepad.DOWN,on_down:()=>{this.controllable_char.trying_to_push_direction=a.directions.down,this.fire_push()}},{key:this.data.gamepad.B,on_down:()=>{this.finish_hand(),this.unset_hero_cast_anim()}}];this.data.control_manager.set_control(t)}fire_push(){if(this.data.map.collision_layer===this.target_object.base_collision_layer){let t=this.target_object.get_current_position(this.data.map);switch(this.controllable_char.trying_to_push_direction){case a.directions.up:t.y-=1;break;case a.directions.down:t.y+=1;break;case a.directions.left:t.x-=1;break;case a.directions.right:t.x+=1}!this.target_object.position_allowed(t.x,t.y)||this.controllable_char.tile_x_pos===t.x&&this.controllable_char.tile_y_pos===t.y||(this.data.control_manager.reset(),n.target_only_push(this.game,this.data,this.target_object,(t,e)=>{const i=this.hand_sprite.x+t,n=this.hand_sprite.y+e;this.game.add.tween(this.hand_sprite).to({x:i,y:n},s.PUSH_TIME,Phaser.Easing.Linear.None,!0),this.game.time.events.add(s.PUSH_TIME>>1,()=>{let t=!1;if([a.directions.up,a.directions.down].includes(this.cast_direction)&&[a.directions.left,a.directions.right].includes(this.controllable_char.trying_to_push_direction)?(this.cast_direction=a.join_directions(this.cast_direction,this.controllable_char.trying_to_push_direction),t=!0):[a.directions.up,a.directions.down].includes(this.controllable_char.trying_to_push_direction)&&[a.directions.left,a.directions.right].includes(this.cast_direction)&&(this.cast_direction=a.join_directions(this.controllable_char.trying_to_push_direction,this.cast_direction),t=!0),!t)return;this.controllable_char.set_direction(this.cast_direction),this.controllable_char.sprite.animations.stop();const e=a.reverse_directions[this.cast_direction],i=this.controllable_char.sprite_info.getAnimationKey(a.base_actions.CAST,e);this.controllable_char.sprite.animations.play(i),this.controllable_char.sprite.animations.currentAnim.stop();const s=this.controllable_char.sprite_info.getFrameName(a.base_actions.CAST,e,1);this.controllable_char.sprite.animations.frameName=s})},()=>{Math.pow(this.controllable_char.sprite.body.x-this.target_object.sprite.body.x,2)+Math.pow(this.controllable_char.sprite.body.y-this.target_object.sprite.body.y,2)<=Math.pow(s.HERO_BODY_RADIUS+this.data.dbs.interactable_objects_db[this.target_object.key_name].body_radius,2)&&(this.controllable_char.sprite.body.x=(this.controllable_char.tile_x_pos+.5)*this.data.map.sprite.tileWidth,this.controllable_char.sprite.body.y=(this.controllable_char.tile_y_pos+.5)*this.data.map.sprite.tileHeight,this.controllable_char.shadow.x=this.controllable_char.sprite.body.x,this.controllable_char.shadow.y=this.controllable_char.sprite.body.y),this.controllable_char.sprite.body.velocity.x=this.controllable_char.sprite.body.velocity.y=0,this.finish_hand(),this.unset_hero_cast_anim()},!1,()=>{this.data.map.sort_sprites()}))}}set_hand(){this.data.overlayer_group.add(this.hand_sprite),this.data.overlayer_group.bringToTop(this.hand_sprite),this.hand_sprite.visible=!0,this.hand_sprite.scale.setTo(1,1),this.hand_sprite.send_to_front=!0,this.hand_sprite.base_collision_layer=this.data.map.collision_layer,this.hand_sprite.animations.currentAnim.stop(!0),this.hand_sprite.frameName=this.hand_sprite_base.getFrameName(o.MOVE_HAND_KEY_NAME,a.reverse_directions[this.cast_direction],0),this.hand_sprite.anchor.x=.5,this.hand_sprite.centerX=this.controllable_char.sprite.centerX,this.hand_sprite.centerY=this.controllable_char.sprite.centerY}translate_hand(){let t=this.hand_sprite.centerX,e=this.hand_sprite.centerY;switch(this.cast_direction){case a.directions.up:this.target_found?(t=this.target_object.sprite.centerX,e=this.target_object.sprite.y):e-=o.MAX_HAND_TRANSLATE;break;case a.directions.down:this.target_found?(t=this.target_object.sprite.centerX,e=this.target_object.sprite.y-this.target_object.sprite.height+this.data.dbs.interactable_objects_db[this.target_object.key_name].body_radius):e+=o.MAX_HAND_TRANSLATE;break;case a.directions.right:this.target_found?(t=this.target_object.sprite.x-2*this.data.dbs.interactable_objects_db[this.target_object.key_name].body_radius,e=this.target_object.sprite.centerY):t+=o.MAX_HAND_TRANSLATE;break;case a.directions.left:this.target_found?(t=this.target_object.sprite.x+2*this.data.dbs.interactable_objects_db[this.target_object.key_name].body_radius,e=this.target_object.sprite.centerY):t-=o.MAX_HAND_TRANSLATE}this.game.add.tween(this.hand_sprite).to({centerX:t,centerY:e},200,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{const t=this.hand_sprite_base.getAnimationKey(o.MOVE_HAND_KEY_NAME,a.reverse_directions[this.cast_direction]);this.hand_sprite.animations.play(t),this.target_found?(this.target_object.sprite.filters=[this.target_object.color_filter],this.target_hueshift_timer=this.game.time.create(!1),this.target_hueshift_timer.loop(5,()=>{this.target_object.color_filter.hue_adjust=2*Math.random()*Math.PI}),this.target_hueshift_timer.start(),this.set_controls()):this.game.time.events.add(700,()=>{this.finish_hand(),this.unset_hero_cast_anim()})})}finish_hand(){this.data.control_manager.reset();let t=this.game.time.create(!1),e={x:1};t.loop(40,()=>{this.hand_sprite.scale.x=this.hand_sprite.scale.x>0?-e.x:e.x}),t.start();let i=this.hand_sprite.y-10;this.game.add.tween(this.hand_sprite).to({y:i},350,Phaser.Easing.Linear.None,!0),this.game.add.tween(e).to({x:0},350,Phaser.Easing.Linear.None,!0),this.game.add.tween(this.hand_sprite.scale).to({y:0},350,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.start_final_emitter(this.hand_sprite.x,this.hand_sprite.y),this.stop_casting(),t.stop(),this.data.overlayer_group.remove(this.hand_sprite,!1),this.unset_emitter()})}set_emitter(){let t=0,e=0;switch(this.cast_direction){case a.directions.up:e=-o.MAX_HAND_TRANSLATE;break;case a.directions.down:e=o.MAX_HAND_TRANSLATE;break;case a.directions.left:t=-o.MAX_HAND_TRANSLATE;break;case a.directions.right:t=o.MAX_HAND_TRANSLATE}this.emitter=this.game.add.emitter(this.controllable_char.sprite.centerX+t,this.controllable_char.sprite.centerY+e,150),this.emitter.makeParticles("psynergy_particle"),this.emitter.minParticleSpeed.setTo(-15,-15),this.emitter.maxParticleSpeed.setTo(15,15),this.emitter.gravity=0,this.emitter.width=2*o.MOVE_MAX_RANGE,this.emitter.height=2*o.MOVE_MAX_RANGE,this.emitter.forEach(t=>{t.animations.add("vanish",null,4,!0,!1)})}start_emitter(){this.emitter.start(!1,Phaser.Timer.QUARTER,15,0),this.emitter.forEach(t=>{t.animations.play("vanish"),t.animations.currentAnim.setFrame(Math.random()*t.animations.frameTotal|0)})}unset_emitter(){this.emitter.destroy()}set_final_emitter(){this.final_emitter_particles_count=8,this.final_emitter=this.game.add.emitter(0,0,this.final_emitter_particles_count),this.final_emitter.makeParticles("psynergy_particle"),this.final_emitter.gravity=300,this.final_emitter.forEach(t=>{t.animations.add("vanish",null,4,!0,!1)})}start_final_emitter(t,e){this.final_emitter.x=t,this.final_emitter.y=e;const i=Phaser.Timer.QUARTER;this.final_emitter.start(!0,i,null,this.final_emitter_particles_count),this.final_emitter.forEach(t=>{t.animations.play("vanish"),t.animations.currentAnim.setFrame(Math.random()*t.animations.frameTotal|0)}),this.game.time.events.add(i,()=>{this.unset_final_emitter()})}unset_final_emitter(){this.final_emitter.destroy()}unset_hue_shifter(){this.target_found&&(this.target_object.sprite.filters=void 0,this.target_hueshift_timer.stop())}init_move(){this.set_emitter(),this.set_final_emitter(),this.search_for_target(),this.set_hand(),this.field_psynergy_window.close(),this.translate_hand(),this.start_emitter()}}e.MoveFieldPsynergy=o,o.ABILITY_KEY_NAME="move",o.ACTION_KEY_NAME="cast",o.MAX_HAND_TRANSLATE=16,o.MOVE_MAX_RANGE=26,o.MOVE_HAND_KEY_NAME="move_hand"},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function _(t){try{r(s.next(t))}catch(t){a(t)}}function o(t){try{r(s.throw(t))}catch(t){a(t)}}function r(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(_,o)}r((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.tint_map_layers=e.init_cast_aura=void 0,e.init_cast_aura=function(t,e,i,n,a,_,o){e.filters=[n];let r=[],h=!1,c=[];for(let s=0;s<2;++s){let n=i.create(0,0,"psynergy_aura"),a=i.create(0,0,"psynergy_aura");n.base_collision_layer=e.base_collision_layer,a.base_collision_layer=e.base_collision_layer,n.sort_function=()=>{i.setChildIndex(n,i.getChildIndex(e))},n.sort_function(),a.sort_function=()=>{i.setChildIndex(a,i.getChildIndex(e)+1)},a.sort_function();const _=(e.height+a.height-8)/3|0;a.anchor.setTo(.5,0),a.centerX=e.centerX,a.centerY=e.centerY+(e.height>>1)+(a.height>>1);const o=a.y;a.scale.setTo(0,0),n.anchor.setTo(.5,0),n.centerX=e.centerX,n.centerY=e.centerY+(e.height>>1)+(n.height>>1);const l=n.y;n.scale.setTo(0,0);let d=[{aura:a,initial_y:o,scale_factor:1},{aura:n,initial_y:l,scale_factor:-1}];r.push([]);for(let e=0;e<d.length;++e){let i,n=d[e].aura,a=d[e].initial_y,o=d[e].scale_factor,l=t.add.tween(n).to({y:a-_},250,Phaser.Easing.Linear.None),u=t.add.tween(n).to({y:a-2*_},250,Phaser.Easing.Linear.None),p=t.add.tween(n).to({y:a-3*_},250,Phaser.Easing.Linear.None);c.push(new Promise(t=>{i=t})),p.onComplete.add(()=>{n.y=a,h?i():(l.start(),m.start())});let m=t.add.tween(n.scale).to({x:o,y:o},375,Phaser.Easing.Quadratic.Out),g=t.add.tween(n.scale).to({x:0,y:0},375,Phaser.Easing.Quadratic.Out);r[s].push({aura:n,tween_a:l,tween_aa:m,tween_b:u,tween_c:p,tween_cc:g}),l.chain(u),u.chain(p),m.chain(g),s>0&&(m.onComplete.addOnce(()=>{r[0][e].aura.y=a,r[0][e].tween_a.start(),r[0][e].tween_aa.start()}),l.start(),m.start())}}let l=16,d=t.time.create(!1),u=t.time.create(!1);return d.loop(50,()=>{n.tint=l%2==0?[1,1,1]:[-1,-1,-1],--l,0===l&&(n.gray=.4,d.stop(),void 0!==a&&a(),u.start())}),u.loop(100,()=>{n.hue_adjust=2*Math.random()*Math.PI}),d.start(),()=>s(this,void 0,void 0,(function*(){void 0!==o&&o(),h=!0,u.stop(),d.stop(),n.tint=[-1,-1,-1],n.gray=0,n.hue_adjust=0,e.filters=void 0,yield Promise.all(c);for(let t=0;t<r.length;++t)for(let e=0;e<r[t].length;++e)r[t][e].tween_a.stop(),r[t][e].tween_aa.stop(),r[t][e].tween_b.stop(),r[t][e].tween_c.stop(),r[t][e].tween_cc.stop(),i.remove(r[t][e].aura,!0);void 0!==_&&_()}))},e.tint_map_layers=function(t,e,i,s){i.colorize_intensity=0,i.gray=0,i.colorize=Math.random();for(let t=0;t<e.layers.length;++t)e.layers[t].sprite.filters=[i];return t.add.tween(i).to({colorize_intensity:.4,gray:1},Phaser.Timer.QUARTER,Phaser.Easing.Linear.None,!0),()=>{t.add.tween(i).to({colorize_intensity:0,gray:0},Phaser.Timer.QUARTER,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{i.colorize=-1;for(let t=0;t<e.layers.length;++t)e.layers[t].sprite.filters=void 0;void 0!==s&&s()})}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FieldPsynergyWindow=void 0;const s=i(2),n=i(0),a=i(1),_=(a.GAME_WIDTH>>1)-5,o=(a.GAME_HEIGHT>>1)+a.HERO_BODY_RADIUS+6;e.FieldPsynergyWindow=class{constructor(t,e){this.game=t,this.data=e,this.window=new s.Window(this.game,_,o,10,20),this.text=this.window.set_single_line_text("",!1,!0)}vertical_adjust(){let t=this.data.hero.sprite.y-this.game.camera.y;return t>90?t-90-56:0}open(t,e){const i=n.capitalize(t);this.window.update_text(i,this.text),this.window.update_size({width:10+this.text.text.width,height:20}),this.window.update_position({x:_-(this.text.text.width>>1)|0,y:o+this.vertical_adjust()|0}),this.window.show(()=>{void 0!==e&&e()},!1)}close(t){this.window.close(()=>{void 0!==t&&t()},!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FrostFieldPsynergy=void 0;const s=i(1),n=i(0),a=i(16),_=i(20),o=i(3);class r extends _.FieldAbilities{constructor(t,e){super(t,e,r.ABILITY_KEY_NAME,r.FROST_MAX_RANGE,r.ACTION_KEY_NAME,!0),this.set_bootstrap_method(this.init_snowflakes.bind(this))}init_snowflakes(){this.field_psynergy_window.close();for(let t=0;t<r.SNOWFLAKES_COUNT;++t){let e=this.data.overlayer_group.create(0,0,"frost_snowflake");e.anchor.setTo(.5,.5);const i=o.random(5,8)/10,a=Math.random()*s.degree360;e.scale.setTo(i,i),e.rotation=a;let _=this.controllable_char.sprite.centerX,h=this.controllable_char.sprite.centerY+12;switch(this.cast_direction){case n.directions.left:_-=16;break;case n.directions.right:_+=16;break;case n.directions.up:h-=14;break;case n.directions.down:h+=12}let c={rad:r.TOTAL_TURNS_SNOWFLAKES};const l=Math.sign(Math.random()-.5),d=Math.sign(Math.random()-.5),u=this.game.add.tween(c).to({rad:-Math.PI},r.SNOWFLAKE_DURATION,Phaser.Easing.Linear.None,!0,t*(Phaser.Timer.QUARTER/5));u.onUpdateCallback(()=>{e.centerX=l*r.SPIRAL_INTENSITY*Math.exp(r.POLAR_SLOPE*c.rad)*Math.cos(c.rad)+_,e.centerY=d*r.SPIRAL_INTENSITY*Math.exp(r.POLAR_SLOPE*c.rad)*Math.sin(c.rad)+h}),u.onComplete.addOnce(()=>{e.destroy(),t===r.SNOWFLAKES_COUNT-1&&(this.target_found?this.init_pillar():(this.unset_hero_cast_anim(),this.stop_casting()))})}}init_pillar(){this.target_object.get_events().forEach(t=>{t.is_set?(t.deactivate(),t.is_set=!1):(t.activate(),t.is_set=!0,a.JumpEvent.active_jump_surroundings(this.data,n.get_surroundings(t.x,t.y,!1,2),this.target_object.collider_layer_shift+this.target_object.base_collision_layer))}),this.target_object.sprite.send_to_back=!1,this.data.map.sort_sprites(),this.target_object.custom_data.color_filters=this.game.add.filter("ColorFilters"),this.target_object.sprite.filters=[this.target_object.custom_data.color_filters];let t=16,e=this.game.time.create(!1);e.loop(50,()=>{this.target_object.custom_data.color_filters.tint=t%2==0?[1,1,1]:[-1,-1,-1],--t,0===t&&(e.stop(),this.grow_pillar())}),e.start()}grow_pillar(){this.target_object.sprite.animations.play("frost_pool_pillar"),this.target_object.sprite.animations.currentAnim.onComplete.addOnce(()=>{this.set_permanent_blink(),this.unset_hero_cast_anim(),this.stop_casting()})}set_permanent_blink(){let t=this.game.time.create(!1),e=this.target_object;t.loop(150,()=>{e.custom_data.color_filters.hue_adjust=5.3,this.game.time.events.add(20,()=>{e.custom_data.color_filters.hue_adjust=0})}),t.start(),e.sprite.events.onDestroy.add(()=>{t.destroy()})}}e.FrostFieldPsynergy=r,r.ABILITY_KEY_NAME="frost",r.ACTION_KEY_NAME="cast",r.FROST_MAX_RANGE=12,r.SNOWFLAKES_COUNT=16,r.TOTAL_TURNS_SNOWFLAKES=7*Math.PI,r.POLAR_SLOPE=.15,r.SPIRAL_INTENSITY=8,r.SNOWFLAKE_DURATION=1650},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GrowthFieldPsynergy=void 0;const s=i(0),n=i(20),a=i(3);class _ extends n.FieldAbilities{constructor(t,e){super(t,e,_.ABILITY_KEY_NAME,_.GROWTH_MAX_RANGE,_.ACTION_KEY_NAME,!0),this.set_bootstrap_method(this.init_bubbles.bind(this)),this.sprite_base=this.data.info.iter_objs_sprite_base_list[_.ABILITY_KEY_NAME]}set_emitter(){let t=0,e=0,i=0,n=0,a=this.controllable_char.sprite.centerX,o=this.controllable_char.sprite.centerY+5,r=0,h=0;switch(this.increase_duration=0,this.cast_direction){case s.directions.up:e=-_.MAX_PARTICLE_SPEED,n=-_.MIN_PARTICLE_SPEED,t=i=_.X_PARTICLE_SPEED,o-=7,r=_.GROWTH_MAX_RANGE>>1,h=1.5*_.GROWTH_MAX_RANGE,this.increase_duration=80;break;case s.directions.down:e=_.MAX_PARTICLE_SPEED,n=_.MIN_PARTICLE_SPEED,t=i=_.X_PARTICLE_SPEED,o+=12,r=_.GROWTH_MAX_RANGE>>1,h=1.5*_.GROWTH_MAX_RANGE,this.increase_duration=80;break;case s.directions.left:t=-_.MAX_PARTICLE_SPEED,i=-_.MIN_PARTICLE_SPEED,e=n=_.Y_PARTICLE_SPEED,a-=16,r=1.5*_.GROWTH_MAX_RANGE,h=_.GROWTH_MAX_RANGE;break;case s.directions.right:t=_.MAX_PARTICLE_SPEED,i=_.MIN_PARTICLE_SPEED,e=n=_.Y_PARTICLE_SPEED,a+=16,r=1.5*_.GROWTH_MAX_RANGE,h=_.GROWTH_MAX_RANGE}this.emitter=this.game.add.emitter(a,o,20),this.emitter.makeParticles("psynergy_ball"),this.emitter.minParticleSpeed.setTo(i,n),this.emitter.maxParticleSpeed.setTo(t,e),this.emitter.gravity=0,this.emitter.width=r,this.emitter.height=h,this.particle_filter=this.game.add.filter("ColorFilters"),this.particle_filter.hue_adjust=3,this.emitter.maxParticleScale=.5,this.emitter.minParticleScale=.4,this.emitter.forEach(t=>{t.filters=[this.particle_filter],t.animations.add("shine",["ball/01","ball/02","ball/03"],4,!1,!1)})}init_bubbles(){this.field_psynergy_window.close(),this.set_emitter(),this.emitter.start(!1,100+this.increase_duration,8,0),this.emitter.forEach(t=>{t.animations.play("shine")}),this.game.time.events.add(Phaser.Timer.SECOND,()=>{this.target_found?this.grow_sprout():this.miss_target()})}grow_sprout(){this.emitter.destroy(),this.target_object.get_events().forEach(t=>{t.activate()});const t=this.sprite_base.getAnimationKey(_.ABILITY_KEY_NAME,"growing");this.target_object.sprite.animations.play(t),this.target_object.sprite.animations.currentAnim.onComplete.addOnce(()=>{this.unset_hero_cast_anim(),this.stop_casting()})}miss_target(){this.emitter.destroy();let t=this.controllable_char.sprite.centerX,e=this.controllable_char.sprite.centerY+17;switch(this.cast_direction){case s.directions.up:e-=16;break;case s.directions.down:e+=16;break;case s.directions.left:t-=16;break;case s.directions.right:t+=16}let i=new Array(_.NO_TARGET_SPROUT_COUNT);const n=this.sprite_base.getActionKey(_.ABILITY_KEY_NAME),o=this.sprite_base.getAnimationKey(_.ABILITY_KEY_NAME,"no_target"),r=this.sprite_base.getFrameName(_.ABILITY_KEY_NAME,"no_target",0);for(let s=0;s<_.NO_TARGET_SPROUT_COUNT;++s){const h=t+a.random(-13,13),c=e+a.random(-13,13),l=this.data.overlayer_group.create(h,c,n);let d;l.anchor.setTo(.5,1),this.sprite_base.setAnimation(l,_.ABILITY_KEY_NAME),l.frameName=r,i.push(new Promise(t=>{d=t})),this.game.time.events.add(40*s,()=>{l.animations.play(o),l.animations.currentAnim.onComplete.addOnce(()=>{l.destroy(),d()})})}Promise.all(i).then(()=>{this.unset_hero_cast_anim(),this.stop_casting()})}}e.GrowthFieldPsynergy=_,_.ABILITY_KEY_NAME="growth",_.ACTION_KEY_NAME="cast",_.GROWTH_MAX_RANGE=12,_.MAX_PARTICLE_SPEED=60,_.MIN_PARTICLE_SPEED=55,_.X_PARTICLE_SPEED=35,_.Y_PARTICLE_SPEED=35,_.NO_TARGET_SPROUT_COUNT=5},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_items=void 0;const s=i(8);e.initialize_items=function(t,e,i){let n={};for(let t=0;t<e.length;++t){const i=e[t];n[i.key_name]=new s.Item(i.key_name,i.name,i.type,i.description,i.use_type,i.curses_when_equipped,i.cant_be_removed,i.rare_item,i.important_item,i.carry_up_to_30,i.effects,i.attribute,i.unleash_ability,i.unleash_rate,i.use_ability,i.equipable_chars,i.price,i.granted_ability)}return t.load.atlasJSONHash("items_icons","assets/images/icons/items/items_icons.png","assets/images/icons/items/items_icons.json").onLoadComplete.addOnce(i),t.load.start(),n}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_djinni_sprites=e.initialize_djinni=void 0;const s=i(7),n=i(14),a=i(0);e.initialize_djinni=function(t){let e={};for(let i=0;i<t.length;++i){const n=t[i];e[n.key_name]=new s.Djinn(n.key_name,n.name,n.description,n.element,n.ability_key_name,n.hp_boost,n.pp_boost,n.atk_boost,n.def_boost,n.agi_boost,n.luk_boost,i)}return e},e.initialize_djinni_sprites=function(t,e){const i=["set","standby"],s={set:["down"],standby:["left","down"]},_={set:6,standby:2},o="assets/images/spritesheets/djinn/";let r=[],h={};for(let e in a.elements){const c=a.elements[e];if(c===a.elements.NO_ELEMENT)continue;h[c]=new n.SpriteBase(c+"_djinn",i);for(let t=0;t<i.length;++t){const e=i[t];h[c].setActionSpritesheet(e,`${o}${c}_djinn.png`,`${o}${c}_djinn.json`),h[c].setActionDirections(e,s[e],new Array(s[e].length).fill(4)),h[c].setActionFrameRate(e,_[e])}let l;h[c].generateAllFrames();const d=new Promise(t=>{l=t});r.push(d),h[c].loadSpritesheets(t,!0,l)}return Promise.all(r).then(e),h}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_enemies=void 0;const s=i(14);e.initialize_enemies=function(t,e,i){let n=[],a={};for(let i=0;i<e.length;++i){let _={data:e[i],sprite_base:null};_.sprite_base=new s.SpriteBase(_.data.key_name,["battle"]);const o=_.data.battle_spritesheet;if(void 0!==o){let e;_.sprite_base.setActionSpritesheet("battle",o.spritesheet_img,o.spritesheet),_.sprite_base.setActionDirections("battle",o.positions,o.frames_number),_.sprite_base.setActionFrameRate("battle",o.frame_rate),_.sprite_base.setActionLoop("battle",o.loop),_.sprite_base.generateAllFrames();const i=new Promise(t=>{e=t});n.push(i),_.sprite_base.loadSpritesheets(t,!0,e)}a[_.data.key_name]=_}return Promise.all(n).then(i),a}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_maps=void 0;const s=i(79);e.initialize_maps=function(t,e,i,n){let a={};for(let n=0;n<i.length;++n){const _=i[n];a[_.key_name]=new s.Map(t,e,_.name,_.key_name,_.tileset_key_name,_.collision_key_names,_.tileset_files.image,_.tileset_files.json,_.collision_files,_.lazy_load,_.collision_embedded)}let _=[];for(let t in a){if(a[t].lazy_load)continue;let e;const i=new Promise(t=>{e=t});_.push(i),a[t].load_map_assets(!0,e)}return Promise.all(_).then(n),a}},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function _(t){try{r(s.next(t))}catch(t){a(t)}}function o(t){try{r(s.throw(t))}catch(t){a(t)}}function r(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(_,o)}r((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.Map=void 0;const n=i(0),a=i(24),_=i(28),o=i(6),r=i(1),h=i(16),c=i(80),l=i(29),d=i(81),u=i(82),p=i(83),m=i(19),g=i(3),w=i(84),f=i(14);class y{constructor(t,e,i,s,n,a,_,o,r,h,c){this.game=t,this.data=e,this.name=i,this.key_name=s,this.tileset_name=n,this.physics_names=void 0===a?[]:a,this.tileset_image_url=_,this.tileset_json_url=o,this.physics_jsons_url=void 0===r?[]:r,this.sprite=null,this.events={},this.npcs=[],this.interactable_objects=[],this.collision_layers_number=this.physics_names.length,this.collision_sprite=this.game.add.sprite(0,0),this.collision_sprite.width=this.collision_sprite.height=0,this.color_filter=this.game.add.filter("ColorFilters"),this.mode7_filter=this.game.add.filter("Mode7"),this.collision_layer=null,this.show_footsteps=!1,this.assets_loaded=!1,this.lazy_load=void 0!==h&&h,this.layers=[],this.collision_embedded=void 0!==c&&c,this.is_world_map=!1}sort_sprites(){let t=new Array(this.data.npc_group.children.length),e=new Array(this.data.npc_group.children.length),i=new Array(this.data.npc_group.children.length);this.data.npc_group.children.forEach((s,n)=>{s.y_sort=parseInt(s.base_collision_layer.toString()+s.y.toString()),s.sort_function?i[n]=s:s.send_to_back?t[n]=s:s.send_to_front&&(e[n]=s)}),this.data.npc_group.sort("y_sort",Phaser.Group.SORT_ASCENDING);let s=this.data.npc_group.getChildIndex(this.data.hero.sprite)-1;s>=-1&&s<this.data.npc_group.children.length&&(-1===s&&(s=0),this.data.npc_group.setChildIndex(this.data.hero.shadow,s)),t.forEach(t=>{t&&this.data.npc_group.sendToBack(t)}),e.forEach(t=>{t&&this.data.npc_group.bringToTop(t)}),i.forEach(t=>{t&&t.sort_function()})}freeze_body(){this.collision_sprite.body.velocity.y=this.collision_sprite.body.velocity.x=0}update(){this.freeze_body(),this.npcs.forEach(t=>t.update()),this.sort_sprites(),this.update_map_rotation()}update_map_rotation(){if(this.is_world_map){const t=Math.abs(this.mode7_filter.angle)<y.MAX_CAMERA_ROTATION*Math.abs(this.data.hero.x_speed),e=Math.sign(this.mode7_filter.angle)===this.data.hero.x_speed;this.data.hero.x_speed&&(t||e)?this.mode7_filter.angle-=Math.sign(this.data.hero.x_speed)*y.CAMERA_ROTATION_STEP:!this.data.hero.x_speed&&Math.abs(this.mode7_filter.angle)>0&&(this.mode7_filter.angle-=Math.sign(this.mode7_filter.angle)*y.CAMERA_ROTATION_STEP)}}load_map_assets(t,e){let i,s,n=new Promise(t=>{i=t});this.game.load.tilemap(this.key_name,this.tileset_json_url,null,Phaser.Tilemap.TILED_JSON).onLoadComplete.addOnce(i);let a=new Promise(t=>{s=t});this.game.load.image(this.key_name,this.tileset_image_url).onLoadComplete.addOnce(s);let _=[];for(let t=0;t<this.physics_names.length;++t){let e,i=new Promise(t=>{e=t});_.push(i),this.game.load.physics(this.physics_names[t],this.physics_jsons_url[t]).onLoadComplete.addOnce(e)}t&&(Promise.all([n,a,..._]).then(()=>{this.assets_loaded=!0,e()}),this.game.load.start())}config_body(t,e){if(this.game.physics.p2.enable(this.collision_sprite,!1),this.collision_sprite.body.clearShapes(),this.collision_embedded){this.collision_sprite.width=this.sprite.widthInPixels,this.collision_sprite.height=this.sprite.heightInPixels,this.collision_sprite.anchor.setTo(0,0);const t=this.sprite.objects[this.collision_layer];for(let e=0;e<t.length;++e){const i=t[e];if(i.polygon){const t=i.polygon.map(t=>[Math.round(i.x+t[0]),Math.round(i.y+t[1])]);this.collision_sprite.body.addPolygon({optimalDecomp:!1,skipSimpleCheck:!1,removeCollinearPoints:!1,remove:!1,adjustCenterOfMass:!1},t)}else i.rectangle?this.collision_sprite.body.addRectangle(Math.round(i.width),Math.round(i.height),Math.round(i.x)+(Math.round(i.width)>>1),Math.round(i.y)+(Math.round(i.height)>>1)):i.ellipse&&this.collision_sprite.body.addCircle(i.width>>1,Math.round(i.x)+(Math.round(i.width)>>1),Math.round(i.y)+(Math.round(i.height)>>1))}}else this.collision_sprite.body.loadPolygon(this.physics_names[e],this.physics_names[e]);this.collision_sprite.body.setCollisionGroup(t.map_collision_group),this.collision_sprite.body.damping=r.MAP_DAMPING,this.collision_sprite.body.angularDamping=r.MAP_DAMPING,this.collision_sprite.body.setZeroRotation(),this.collision_sprite.body.dynamic=!1,this.collision_sprite.body.static=!0}config_all_bodies(t,e){this.is_world_map||(this.npcs.forEach(e=>e.config_body(t)),this.interactable_objects.forEach(e=>e.config_body(t))),this.config_body(t,e)}get_current_tile(t,e){return void 0!==e?this.sprite.getTile(t.tile_x_pos,t.tile_y_pos,e):this.layers.map(e=>this.sprite.getTile(t.tile_x_pos,t.tile_y_pos,e.name)).filter(t=>t)}get_layer(t){return g.find(this.layers,{name:t})}create_tile_events(t){const e=JSON.parse(t),i=o.TileEvent.get_location_key(e.x,e.y);if(i in this.events||(this.events[i]=[]),e.type===o.event_types.CLIMB){const t=new l.ClimbEvent(this.game,this.data,e.x,e.y,n.map_directions(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.active||e.active,void 0===e.change_to_collision_layer?null:e.change_to_collision_layer);this.events[i].push(t)}else if(e.type===o.event_types.SPEED){const t=new p.SpeedEvent(this.game,this.data,e.x,e.y,n.map_directions(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.active||e.active,e.speed);this.events[i].push(t)}else if(e.type===o.event_types.TELEPORT){const t=new c.TeleportEvent(this.game,this.data,e.x,e.y,n.map_directions(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,e.active,e.target,e.x_target,e.y_target,e.advance_effect,e.dest_collision_layer?e.dest_collision_layer:0);this.events[i].push(t)}else if(e.type===o.event_types.SLIDER){const t=new w.SliderEvent(this.game,this.data,e.x,e.y,n.map_directions(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.active||e.active,e.x_target,e.y_target,e.dest_collision_layer?e.dest_collision_layer:0,e.show_dust);this.events[i].push(t)}else if(e.type===o.event_types.JUMP){const t=new h.JumpEvent(this.game,this.data,e.x,e.y,n.map_directions(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.initially_active||e.initially_active,void 0===e.is_set||e.is_set);this.events[i].push(t)}else if(e.type===o.event_types.STEP){const t=new d.StepEvent(this.game,this.data,e.x,e.y,n.map_directions(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.active||e.active,n.directions[e.step_direction]);this.events[i].push(t)}else if(e.type===o.event_types.COLLISION){const t=new u.CollisionEvent(this.game,this.data,e.x,e.y,n.map_directions(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.active||e.active,e.dest_collision_layer);this.events[i].push(t)}}create_npcs(t){const e=JSON.parse(t),i=this.data.dbs.npc_db[e.key_name],s=i.initial_action,n=void 0!==e.animation_key?e.animation_key:i.actions[s].initial_direction;this.npcs.push(new a.NPC(this.game,this.data,e.key_name,e.initial_x,e.initial_y,s,n,e.enable_footsteps,i.walk_speed,i.dash_speed,i.climb_speed,e.npc_type,e.movement_type,e.message,e.thought_message,e.avatar?e.avatar:null,e.shop_key,void 0===e.base_collision_layer?0:e.base_collision_layer,e.talk_range_factor,void 0===e.events?[]:e.events,this.data.dbs.npc_db[e.key_name].no_shadow))}create_interactable_objects(t){const e=JSON.parse(t),i=new _.InteractableObjects(this.game,this.data,e.key_name,e.x,e.y,void 0===e.allowed_tiles?[]:e.allowed_tiles,void 0===e.base_collision_layer?0:e.base_collision_layer,e.collider_layer_shift,e.not_allowed_tiles,e.object_drop_tiles,e.intermediate_collider_layer_shift);this.interactable_objects.push(i);for(let t in this.data.dbs.interactable_objects_db[e.key_name].psynergy_keys){this.data.dbs.interactable_objects_db[e.key_name].psynergy_keys[t].interaction_type===_.interactable_object_interaction_types.ONCE&&(i.custom_data[t+"_casted"]=!1)}this.data.dbs.interactable_objects_db[e.key_name].pushable&&void 0!==e.block_stair_collider_layer_shift&&(i.custom_data.block_stair_collider_layer_shift=e.block_stair_collider_layer_shift)}config_interactable_object(){for(let t=0;t<this.interactable_objects.length;++t){const e=this.interactable_objects[t];e.sprite_info=this.data.info.iter_objs_sprite_base_list[e.key_name],e.initial_config(this.sprite),e.initialize_related_events(this.events,this)}}config_npc(){return s(this,void 0,void 0,(function*(){for(let t=0;t<this.npcs.length;++t){const e=this.npcs[t],i=this.data.dbs.npc_db[e.key_name];let s=Object.keys(i.actions);const n=new f.SpriteBase(e.key_name,s);for(let t=0;t<s.length;++t){const e=s[t];n.setActionSpritesheet(e,i.actions[e].spritesheet.image,i.actions[e].spritesheet.json),n.setActionDirections(e,i.actions[e].directions,i.actions[e].frames_count),n.setActionFrameRate(e,i.actions[e].frame_rate),n.setActionLoop(e,i.actions[e].loop)}n.generateAllFrames(),yield new Promise(t=>{n.loadSpritesheets(this.game,!0,()=>{e.no_shadow||e.set_shadow(i.shadow_key,this.data.npc_group,e.base_collision_layer,i.shadow_anchor_x,i.shadow_anchor_y),e.set_sprite(this.data.npc_group,n,this.sprite,e.base_collision_layer,i.anchor_x,i.anchor_y,this.is_world_map),this.data.dbs.npc_db[e.key_name].ignore_world_map_scale&&(e.sprite.scale.setTo(1,1),e.shadow&&e.shadow.scale.setTo(1,1)),e.set_sprite_as_npc(),e.play(e.current_action,e.current_direction),t()})})}}))}config_layers(t,e){for(let i=0;i<this.layers.length;++i){let s=this.sprite.createLayer(this.layers[i].name);this.layers[i].sprite=s,s.layer_z=void 0===this.layers[i].properties.z?i:this.layers[i].properties.z,s.resizeWorld(),void 0!==this.layers[i].properties.blendMode&&(s.blendMode=PIXI.blendModes[this.layers[i].properties.blendMode]),void 0!==this.layers[i].alpha&&(s.alpha=this.layers[i].alpha);let n=!1;if(void 0!==this.layers[i].properties.over){const t=this.layers[i].properties.over.toString().split(",").map(t=>parseInt(t));n=t.length>this.collision_layer?Boolean(t[this.collision_layer]):Boolean(t[0])}n?t.add(s):e.add(s)}}mount_map(t){return s(this,void 0,void 0,(function*(){if(!this.assets_loaded){let t;const e=new Promise(e=>t=e);this.load_map_assets(!0,t),yield e}this.collision_layer=t,this.events={},o.TileEvent.reset(),m.GameEvent.reset(),this.sprite=this.game.add.tilemap(this.key_name),this.sprite.properties.world_map&&(this.is_world_map=!0),this.sprite.addTilesetImage(this.tileset_name,this.key_name),this.sprite.objects=g.mapKeys(this.sprite.objects,(t,e)=>parseInt(e));for(let t=0;t<this.sprite.tilesets.length;++t){const e=this.sprite.tilesets[t];for(let t in e.tileProperties)e.tileProperties[t].index=t}for(let t in this.sprite.properties){const e=this.sprite.properties[t];t.startsWith("event")?this.create_tile_events(e):t.startsWith("npc")?this.create_npcs(e):t.startsWith("interactable_object")&&this.create_interactable_objects(e)}return this.layers=this.sprite.layers.sort((t,e)=>t.properties.over!==e.properties.over||t.properties.z!==e.properties.z?t-e:void 0),this.config_layers(this.data.overlayer_group,this.data.underlayer_group),this.config_interactable_object(),yield this.config_npc(),this.sprite.properties.footprint&&(this.show_footsteps=!0),this.config_world_map(),this}))}config_world_map(){let t=r.HERO_BODY_RADIUS;this.is_world_map?(this.layers.forEach(t=>t.sprite.filters=[this.mode7_filter]),this.game.camera.bounds=null,this.npcs.forEach(t=>{this.data.dbs.npc_db[t.key_name].ignore_world_map_scale||t.sprite.scale.setTo(r.WORLD_MAP_SPRITE_SCALE_X,r.WORLD_MAP_SPRITE_SCALE_Y),t.sprite.data.mode7=!0,t.sprite.data.map=this,t.shadow&&(this.data.dbs.npc_db[t.key_name].ignore_world_map_scale||t.shadow.scale.setTo(r.WORLD_MAP_SPRITE_SCALE_X,r.WORLD_MAP_SPRITE_SCALE_Y),t.shadow.data.mode7=!0,t.shadow.data.map=this)}),this.interactable_objects.forEach(t=>t.sprite.data.mode7=!0),t=r.HERO_BODY_RADIUS_M7):(this.game.camera.bounds=new Phaser.Rectangle,this.game.camera.bounds.copyFrom(this.game.world.bounds)),this.data.hero&&t!==this.data.hero.body_radius&&(this.data.hero.config_body(this.data.collision,this.is_world_map?r.HERO_BODY_RADIUS_M7:r.HERO_BODY_RADIUS),this.is_world_map?(this.data.hero.sprite.scale.setTo(r.WORLD_MAP_SPRITE_SCALE_X,r.WORLD_MAP_SPRITE_SCALE_Y),this.data.hero.shadow.scale.setTo(r.WORLD_MAP_SPRITE_SCALE_X,r.WORLD_MAP_SPRITE_SCALE_Y),this.data.hero.create_half_crop_mask(this.is_world_map)):(this.data.hero.sprite.scale.setTo(1,1),this.data.hero.shadow.scale.setTo(1,1),this.data.hero.sprite.mask.destroy(),this.data.hero.sprite.mask=null))}unset_map(){this.data.underlayer_group.removeAll(),this.data.overlayer_group.removeAll(),this.collision_sprite.body.clearShapes(),this.show_footsteps&&this.data.hero.footsteps.clean_all();let t=[];for(let e=0;e<this.data.npc_group.children.length;++e){let i=this.data.npc_group.children[e];(i.is_npc||i.is_interactable_object)&&(i.is_interactable_object&&i.interactable_object.custom_data.blocking_stair_block&&(i.interactable_object.custom_data.blocking_stair_block.destroy(),i.interactable_object.custom_data.blocking_stair_block=void 0),t.push(i))}for(let e=0;e<t.length;++e){let i=t[e];this.data.npc_group.remove(i,!0)}this.npcs=[],this.interactable_objects=[],this.data.npc_group.removeAll(),this.data.npc_group.add(this.data.hero.shadow),this.data.npc_group.add(this.data.hero.sprite)}}e.Map=y,y.MAX_CAMERA_ROTATION=.035,y.CAMERA_ROTATION_STEP=.003},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function _(t){try{r(s.next(t))}catch(t){a(t)}}function o(t){try{r(s.throw(t))}catch(t){a(t)}}function r(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(_,o)}r((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.TeleportEvent=void 0;const n=i(0),a=i(6),_=i(1),o=i(3);class r extends a.TileEvent{constructor(t,e,i,s,n,_,o,r,h,c,l,d,u){super(t,e,a.event_types.TELEPORT,i,s,n,_,o,r,null),this.target=h,this.x_target=c,this.y_target=l,this.advance_effect=d,this.dest_collision_layer=u}fire(){if(this.check_position()&&this.data.hero_movement_allowed())if(this.data.tile_event_manager.on_event=!0,this.data.hero.teleporting=!0,this.advance_effect){if(!this.data.hero.stop_by_colliding)return this.data.tile_event_manager.on_event=!1,void(this.data.hero.teleporting=!1);this.data.hero.play(n.base_actions.WALK,n.reverse_directions[n.directions.up]),this.open_door(),this.game.physics.p2.pause();const t=400,e=this.data.map.sprite.tileWidth*(this.x+.5),i=this.data.hero.sprite.y-15;this.game.add.tween(this.data.hero.shadow).to({x:e,y:i},t,Phaser.Easing.Linear.None,!0),this.game.add.tween(this.data.hero.sprite.body).to({x:e,y:i},t,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.camera_fade_in()})}else this.camera_fade_in()}camera_fade_in(){this.data.hero.stop_char(!0),this.game.camera.fade(),this.game.camera.onFadeComplete.addOnce(()=>{this.data.hero.set_direction(this.activation_directions[0]),this.data.hero.play(n.base_actions.IDLE,n.reverse_directions[this.data.hero.current_direction]),this.game.camera.lerp.setTo(1,1),this.change_map()})}change_map(){var t,e;return s(this,void 0,void 0,(function*(){this.data.map.unset_map();const i=this.target,s=this.dest_collision_layer;this.data.hero.shadow.base_collision_layer=s,this.data.hero.sprite.base_collision_layer=s,this.data.map=yield this.data.info.maps_list[i].mount_map(s),this.game.camera.setBoundsToWorld(),(null===(t=this.game.camera.bounds)||void 0===t?void 0:t.width)<_.GAME_WIDTH&&(this.game.camera.bounds.width=_.GAME_WIDTH),(null===(e=this.game.camera.bounds)||void 0===e?void 0:e.height)<_.GAME_HEIGHT&&(this.game.camera.bounds.height=_.GAME_HEIGHT),this.data.collision.config_collision_groups(this.data.map),this.data.map.config_all_bodies(this.data.collision,this.data.map.collision_layer),this.data.collision.config_collisions(this.data.map,this.data.map.collision_layer,this.data.npc_group),this.game.physics.p2.updateBoundsCollisionGroup(),this.data.debug.update_debug_physics(this.data.hero.sprite.body.debug),this.data.hero.sprite.body.x=(this.x_target+.5)*this.data.map.sprite.tileWidth,this.data.hero.sprite.body.y=(this.y_target+.5)*this.data.map.sprite.tileHeight,this.game.physics.p2.resume(),this.camera_fade_out()}))}camera_fade_out(){this.data.hero.update_shadow(),this.data.hero.update_half_crop(!0),this.data.map.sort_sprites(),this.data.map.npcs.forEach(t=>t.update()),this.game.camera.flash(0),this.game.camera.onFlashComplete.addOnce(()=>{this.game.camera.lerp.setTo(_.CAMERA_LERP,_.CAMERA_LERP),this.data.tile_event_manager.on_event=!1,this.data.hero.teleporting=!1})}open_door(){const t=o.find(this.data.map.sprite.layers,{name:this.data.map.sprite.properties.door_layer}),e=this.data.map.sprite.getTile(this.x,this.y-1,t.name),i=e.properties.door_type,s=o.filter(this.data.map.sprite.tilesets[0].tileProperties,t=>t.door_type===i&&"close_door"in t&&t.id===e.properties.id);let n,a,_,r,h,c,l;for(let e=0;e<s.length;++e)n=s[e],a=1+(0|n.index),_=n.close_door,r=n.base_offset.split(","),h=this.x+(0|r[0]),c=this.y+(0|r[1])-1,l=parseInt(o.findKey(this.data.map.sprite.tilesets[0].tileProperties,{open_door:_}))+1,this.data.map.sprite.replace(a,l,h,c,1,1,t.name)}}e.TeleportEvent=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.StepEvent=void 0;const s=i(0),n=i(6);class a extends n.TileEvent{constructor(t,e,i,s,a,_,o,r,h){super(t,e,n.event_types.STEP,i,s,a,_,o,r,null),this.step_direction=h,this.next_x=0,this.next_y=0,this.shift_y=0}set(){let t,e,i=this.y;this.step_direction===s.directions.up?e=-(this.data.map.sprite.tileHeight/a.STEP_SHIFT_FACTOR|0):this.step_direction===s.directions.down&&(e=this.data.map.sprite.tileHeight/a.STEP_SHIFT_FACTOR|0),this.activation_directions[0]===s.directions.left?t=this.x-1:this.activation_directions[0]===s.directions.right&&(t=this.x+1),this.next_x=t,this.next_y=i,this.shift_y=e,this.data.tile_event_manager.set_triggered_event(this)}fire(){if(this.data.hero.tile_x_pos===this.next_x&&this.data.hero.tile_y_pos===this.next_y){this.data.tile_event_manager.unset_triggered_event(this),this.data.hero.shadow_following=!1,this.data.hero.shadow.y+=this.shift_y;const t=this.game.add.tween(this.data.hero.sprite.body).to({y:this.data.hero.sprite.body.y+this.shift_y},this.shift_y>0?80:50,Phaser.Easing.Linear.None,!0);t.onComplete.addOnce(()=>{this.data.hero.shadow_following=!0}),t.onUpdateCallback(()=>{this.data.hero.shadow.x=this.data.hero.sprite.body.x})}else this.check_position()||this.data.tile_event_manager.unset_triggered_event(this)}}e.StepEvent=a,a.STEP_SHIFT_FACTOR=3},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CollisionEvent=void 0;const s=i(0),n=i(6);class a extends n.TileEvent{constructor(t,e,i,s,a,_,o,r,h){super(t,e,n.event_types.COLLISION,i,s,a,_,o,r,null),this.dest_collision_layer=h,this.next_x=0,this.next_y=0}set(){let t=this.x,e=this.y;this.activation_directions[0]===s.directions.left?t=this.x-1:this.activation_directions[0]===s.directions.right?t=this.x+1:this.activation_directions[0]===s.directions.up?e=this.y-1:this.activation_directions[0]===s.directions.down&&(e=this.y+1),this.next_x=t,this.next_y=e,this.data.tile_event_manager.set_triggered_event(this)}fire(){this.data.hero.tile_x_pos===this.next_x&&this.data.hero.tile_y_pos===this.next_y?(this.data.tile_event_manager.unset_triggered_event(this),this.data.collision.change_map_body(this.data,this.dest_collision_layer)):this.check_position()||this.data.tile_event_manager.unset_triggered_event(this)}}e.CollisionEvent=a},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SpeedEvent=void 0;const s=i(6);class n extends s.TileEvent{constructor(t,e,i,n,a,_,o,r,h){super(t,e,s.event_types.SPEED,i,n,a,_,o,r,null),this.speed=h}unset(){this.data.tile_event_manager.event_triggered(this)&&!this.check_position()&&(this.data.tile_event_manager.unset_triggered_event(this),this.data.hero.extra_speed-=this.speed)}fire(){this.data.tile_event_manager.event_triggered(this)||(this.data.tile_event_manager.set_triggered_event(this),this.data.hero.extra_speed+=this.speed)}}e.SpeedEvent=n},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SliderEvent=void 0;const s=i(0),n=i(6);class a extends n.TileEvent{constructor(t,e,i,s,a,_,o,r,h,c,l,d){super(t,e,n.event_types.SLIDER,i,s,a,_,o,r,null),this.x_target=h,this.y_target=c,this.dest_collision_layer=l,this.show_dust=void 0===d||d}fire(){if(!this.data.hero.stop_by_colliding||!this.check_position()||!this.data.hero_movement_allowed(!1))return;this.data.tile_event_manager.on_event=!0,this.data.hero.sliding=!0,this.game.physics.p2.pause();const t=this.data.map.sprite.tileWidth*(this.x+.5),e=this.data.map.sprite.tileHeight*(this.y+.6),i=this.data.map.sprite.tileHeight*this.y;this.data.hero.play(s.base_actions.JUMP,s.reverse_directions[s.directions.down],!1),this.game.time.events.add(200,()=>{this.data.hero.shadow.visible=!1,this.data.hero.current_action=s.base_actions.IDLE,this.data.hero.play(s.base_actions.IDLE,s.reverse_directions[s.directions.down],!1),this.game.add.tween(this.data.hero.sprite.body).to({x:t,y:[i,e]},150,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.show_dust&&this.dust_animation();const t=e+1.2*this.data.map.sprite.tileHeight;this.game.add.tween(this.data.hero.sprite.body).to({y:t},70,Phaser.Easing.Quadratic.Out,!0).onComplete.addOnce(()=>{this.data.hero.set_frame(s.directions.down_right),this.game.time.events.add(40,()=>{this.data.hero.set_frame(s.directions.down_left),this.game.time.events.add(40,()=>{this.data.hero.set_frame(s.directions.down)})});const t=this.data.map.sprite.tileWidth*(this.x_target+.5),e=this.data.map.sprite.tileHeight*(this.y_target+.5),i=Math.abs(this.y_target-this.y)*a.TIME_PER_TILE;this.game.add.tween(this.data.hero.sprite.body).to({x:t,y:e},i,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.data.hero.play(),this.data.hero.update_shadow(),this.data.hero.shadow.visible=!0,this.dest_collision_layer!==this.data.map.collision_layer&&this.data.collision.change_map_body(this.data,this.dest_collision_layer),this.game.time.events.add(80,()=>{this.data.hero.sliding=!1,this.game.physics.p2.resume(),this.data.tile_event_manager.on_event=!1})})})})})}dust_animation(){const t=this.data.info.misc_sprite_base_list[a.DUST_KEY],e=this.data.map.sprite.tileWidth*(this.x+.5);for(let i=0;i<a.DUST_COUNT;++i)this.game.time.events.add(40*i,()=>{const i=this.data.hero.sprite.body.x-Math.random()*this.data.map.sprite.tileWidth+(this.data.map.sprite.tileWidth>>1),s=this.data.hero.sprite.body.y-Math.random()*this.data.map.sprite.tileHeight+(this.data.map.sprite.tileHeight>>1),n=this.data.npc_group.create(i,s,a.DUST_KEY);n.base_collision_layer=this.dest_collision_layer,n.anchor.setTo(.5,.5),this.game.add.tween(n).to({x:i+(i<e?-1:1)*(this.data.map.sprite.tileHeight/3),y:s-(this.data.map.sprite.tileHeight>>1)},400,Phaser.Easing.Linear.None,!0),this.data.npc_group.setChildIndex(n,this.data.npc_group.getChildIndex(this.data.hero.sprite)),t.setAnimation(n,a.DUST_KEY);const _=t.getAnimationKey(a.DUST_KEY,"spread");n.animations.getAnimation(_).onComplete.addOnce(()=>{n.destroy()}),n.animations.play(_)})}}e.SliderEvent=a,a.TIME_PER_TILE=60,a.DUST_COUNT=6,a.DUST_KEY="dust"},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_misc_data=void 0;const s=i(14);e.initialize_misc_data=function(t,e,i){let n={},a=[];for(let i=0;i<e.length;++i){const _=e[i],o=new s.SpriteBase(_.key_name,_.actions.map(t=>t.key_name));n[_.key_name]=o;for(let t=0;t<_.actions.length;++t){const e=_.actions[t];o.setActionSpritesheet(e.key_name,e.spritesheet.image,e.spritesheet.json),o.setActionDirections(e.key_name,e.animations,e.frames_count),o.setActionFrameRate(e.key_name,e.frame_rate),o.setActionLoop(e.key_name,e.loop)}let r;o.generateAllFrames();const h=new Promise(t=>{r=t});a.push(h),o.loadSpritesheets(t,!0,r)}return Promise.all(a).then(i),n}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_shops=void 0;const s=i(87);e.initialize_shops=function(t){let e={};for(let i=0;i<t.length;++i){const n=t[i];e[n.key_name]=new s.Shop(n.key_name,n.dialog_key,n.avatar_key,n.item_list)}return e}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Shop=void 0;e.Shop=class{constructor(t,e,i,s){this.key_name=t,this.dialog_key=e,this.avatar_key=i,this.item_list=s}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_interactable_objs_data=void 0;const s=i(14);e.initialize_interactable_objs_data=function(t,e,i){let n={},a=[];for(let i in e){const _=e[i],o=new s.SpriteBase(_.key_name,[_.key_name]);let r;n[_.key_name]=o,o.setActionSpritesheet(_.key_name,_.spritesheet.image,_.spritesheet.json),o.setActionDirections(_.key_name,_.actions.animations,_.actions.frames_count),o.setActionFrameRate(_.key_name,_.actions.frame_rate),o.setActionLoop(_.key_name,_.actions.loop),o.generateAllFrames();const h=new Promise(t=>{r=t});a.push(h),o.loadSpritesheets(t,!0,r)}return Promise.all(a).then(i),n}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_summons=void 0;const s=i(90);e.initialize_summons=function(t){let e={};for(let i=0;i<t.length;++i){const n=t[i];e[n.key_name]=new s.Summon(n.key_name,i,n.requirements,n.available)}return e}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Summon=void 0;e.Summon=class{constructor(t,e,i,s){this.key_name=t,this.index=e,this.requirements=i,this.available=s}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_menu=e.MainMenu=void 0;const s=i(0),n=i(92),a=i(93),_=i(98),o=i(34),r=i(26),h=i(18);class c{constructor(t,e){this.game=t,this.data=e,this.buttons_keys=["psynergy","djinni","item","status"],this.current_index=0,this.chars_status_window=new r.CharsStatusWindow(this.game,this.data),this.horizontal_menu=new h.HorizontalMenu(this.game,this.data,this.buttons_keys,this.buttons_keys.map(t=>s.capitalize(t)),{on_press:this.button_press.bind(this),on_cancel:this.close_menu.bind(this)},c.TITLE_WINDOW_WIDTH),this.psynergy_menu=new n.MainPsynergyMenu(this.game,this.data),this.item_menu=new a.MainItemMenu(this.game,this.data),this.djinn_menu=new _.MainDjinnMenu(this.game,this.data),this.status_menu=new o.MainStatusMenu(this.game,this.data)}get is_active(){return this.horizontal_menu.menu_active}button_press(){switch(this.current_index=this.horizontal_menu.selected_button_index,this.buttons_keys[this.horizontal_menu.selected_button_index]){case"psynergy":this.button_press_action(this.psynergy_menu);break;case"djinni":this.button_press_action(this.djinn_menu);break;case"item":this.button_press_action(this.item_menu);break;case"status":this.button_press_action(this.status_menu)}}button_press_action(t){this.horizontal_menu.close(()=>{t.open_menu(t=>{t?this.close_menu():(this.chars_status_window.update_chars_info(),this.horizontal_menu.open(void 0,this.current_index))})},!1)}update_position(){this.chars_status_window.update_position(!0),this.horizontal_menu.update_position()}open_menu(){this.chars_status_window.update_chars_info(),this.chars_status_window.update_position(),this.chars_status_window.show(),this.horizontal_menu.open()}close_menu(){if(!this.horizontal_menu.menu_active)return;this.data.control_manager.reset(),this.data.cursor_manager.hide();let t,e=[],i=new Promise(e=>t=e);e.push(i),this.horizontal_menu.close(t),this.chars_status_window.close(t),Promise.all(e).then(()=>{this.data.menu_open=!1,this.current_index=0})}}e.MainMenu=c,c.TITLE_WINDOW_WIDTH=70,e.initialize_menu=function(t,e){let i=()=>{e.hero.in_action()||e.in_battle||!e.created||e.game_event_manager.on_event||e.menu_open||(e.menu_open=!0,e.hero.stop_char(),e.hero.update_shadow(),e.main_menu.open_menu())},s=[{key:e.gamepad.A,on_down:i},{key:e.gamepad.SELECT,on_down:i}];return e.control_manager.set_control(s,{persist:!0}),new c(t,e)}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MainPsynergyMenu=void 0;const s=i(30),n=i(31),a=i(2),_=i(1),o=i(15),r=_.INSIDE_BORDER_WIDTH+_.OUTSIDE_BORDER_WIDTH,h=(132-2*(_.INSIDE_BORDER_WIDTH+1)-8*_.ICON_WIDTH)/7;e.MainPsynergyMenu=class{constructor(t,e){this.game=t,this.data=e,this.selected_char_index=0,this.is_open=!1,this.choosing_psynergy=!1,this.close_callback=null,this.guide_window_msgs={choosing_char:"Whose Psynergy?",choosing_psynergy:"Which Psynergy?"},this.psynergy_choose_window=new n.ItemPsynergyChooseWindow(this.game,this.data,!0,this.psynergy_change.bind(this)),this.chars_menu=new o.CharsMenu(this.game,this.data,this.char_change.bind(this)),this.basic_info_window=new s.BasicInfoWindow(this.game),this.guide_window=new a.Window(this.game,104,0,132,20),this.description_window=new a.Window(this.game,0,136,236,20),this.psynergy_overview_window=new a.Window(this.game,104,24,132,76),this.shortcuts_window=new a.Window(this.game,104,104,132,28),this.guide_window_text=this.guide_window.set_single_line_text(""),this.description_window_text=this.description_window.set_single_line_text(""),this.shortcuts_window.set_text(["Use a keyboard number","to set a shorcut."],void 0,7,3)}char_change(){this.selected_char_index!==this.chars_menu.selected_index&&(this.selected_char_index=this.chars_menu.selected_index,this.basic_info_window.set_char(this.data.info.party_data.members[this.chars_menu.selected_index]),this.set_psynergy_icons(),this.psynergy_choose_window.window_open&&(this.psynergy_choose_window.close(),this.psynergy_choose_window.open(this.chars_menu.selected_index)))}char_choose(){this.shortcuts_window.open&&this.shortcuts_window.close(void 0,!1),this.psynergy_overview_window.open&&this.psynergy_overview_window.close(void 0,!1),this.chars_menu.is_active&&this.chars_menu.deactivate(),this.choosing_psynergy=!0,this.set_guide_window_text(),this.psynergy_choose_window.window_open||this.psynergy_choose_window.open(this.chars_menu.selected_index,()=>{this.choosing_psynergy=!1,this.chars_menu.activate(),this.set_guide_window_text(),this.set_description_window_text()}),this.psynergy_choose_window.grant_control(this.open_char_select.bind(this),()=>{let t=this.psynergy_choose_window,e=t.element_list[t.elements[t.selected_element_index]];this.psynergy_choose(e)},this.chars_menu.next_char.bind(this.chars_menu),this.chars_menu.previous_char.bind(this.chars_menu))}psynergy_change(t){this.set_description_window_text(t.description)}psynergy_choose(t){t.key_name in this.data.info.field_abilities_list?(this.close_menu(!0),this.data.info.field_abilities_list[t.key_name].cast(this.data.hero,this.data.info.party_data.members[this.selected_char_index].key_name)):this.char_choose()}set_guide_window_text(){this.choosing_psynergy?this.guide_window.update_text(this.guide_window_msgs.choosing_psynergy,this.guide_window_text):this.guide_window.update_text(this.guide_window_msgs.choosing_char,this.guide_window_text)}set_description_window_text(t){this.choosing_psynergy?this.description_window.update_text(t,this.description_window_text):this.description_window.update_text(this.data.info.party_data.coins+"    Coins",this.description_window_text)}set_psynergy_icons(){this.psynergy_overview_window.remove_from_group();let t=0;for(let e=0;e<this.data.info.party_data.members[this.selected_char_index].abilities.length;++e){const i=this.data.info.party_data.members[this.selected_char_index].abilities[e];if(i in this.data.info.abilities_list){const e=this.data.info.abilities_list[i];if(e.is_field_psynergy||e.effects_outside_battle){const e=r+1+Math.ceil(t%8*(h+_.ICON_WIDTH)),s=r+5+(t/8|0)*(3+_.ICON_HEIGHT);this.psynergy_overview_window.create_at_group(e,s,"abilities_icons",void 0,i),++t}}}}open_char_select(){this.psynergy_choose_window.window_open&&this.psynergy_choose_window.close(),this.psynergy_overview_window.open||this.psynergy_overview_window.show(void 0,!1),this.shortcuts_window.open||this.shortcuts_window.show(void 0,!1),this.chars_menu.is_open||this.chars_menu.open(this.selected_char_index,o.CharsMenuModes.MENU),this.chars_menu.select_char(this.selected_char_index),this.chars_menu.grant_control(this.close_menu.bind(this),this.char_choose.bind(this))}open_menu(t){this.close_callback=t,this.basic_info_window.open(this.data.info.party_data.members[this.selected_char_index]),this.is_open=!0,this.set_psynergy_icons(),this.set_guide_window_text(),this.set_description_window_text(),this.guide_window.show(void 0,!1),this.description_window.show(void 0,!1),this.psynergy_overview_window.show(void 0,!1),this.shortcuts_window.show(void 0,!1),this.open_char_select()}close_menu(t=!1){this.data.cursor_manager.hide(),this.data.control_manager.reset(),this.chars_menu.close(),this.basic_info_window.close(),this.is_open=!1,this.guide_window.close(void 0,!1),this.description_window.close(void 0,!1),this.psynergy_overview_window.close(void 0,!1),this.shortcuts_window.close(void 0,!1),this.psynergy_choose_window.window_open&&this.psynergy_choose_window.close(),null!==this.close_callback&&this.close_callback(t)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MainItemMenu=void 0;const s=i(30),n=i(31),a=i(2),_=i(1),o=i(94),r=i(97),h=i(8),c=i(15),l=i(32),d=_.INSIDE_BORDER_WIDTH+_.OUTSIDE_BORDER_WIDTH,u=(132-2*(_.INSIDE_BORDER_WIDTH+11)-5*_.ICON_WIDTH)/4;e.MainItemMenu=class{constructor(t,e){this.game=t,this.data=e,this.chars_menu=new c.CharsMenu(this.game,this.data,this.char_change.bind(this)),this.basic_info_window=new s.BasicInfoWindow(this.game),this.item_change_stats_window=new r.StatsCheckWithItemWindow(this.game,this.data),this.selected_char_index=0,this.selected_item_pos={page:0,index:0},this.is_open=!1,this.choosing_give_destination=!1,this.overview_shifted=!1,this.close_callback=null,this.guide_window=new a.Window(this.game,104,0,132,20),this.guide_window_text=this.guide_window.set_single_line_text(""),this.choosing_item=!1,this.guide_window_msgs={choosing_char:"Whose item?",choosing_item:"Which item?"},this.description_window=new a.Window(this.game,0,136,236,20),this.description_window_text=this.description_window.set_single_line_text(""),this.arrange_window=new a.Window(this.game,104,104,132,28),this.arrange_window_text=this.arrange_window.set_text(["Arrange info here..."],void 0,7,3),this.item_overview_window=new a.Window(this.game,104,24,132,76),this.item_choose_window=new n.ItemPsynergyChooseWindow(this.game,this.data,!1,this.item_change.bind(this)),this.item_options_window=new o.ItemOptionsWindow(this.game,this.data),this.item_quant_win=new l.ItemQuantityManagerWindow(this.game,this.data)}shift_item_overview(t,e=!0){this.overview_shifted!==t&&(e&&(t?(this.item_choose_window.hide(),this.item_options_window.hide()):(this.item_choose_window.show(),this.item_options_window.show())),this.item_overview_window.update_position({y:24+(t?16:0)}),this.item_overview_window.update_size({height:76+(t?16:0)}),this.overview_shifted=t)}char_change(){if(this.selected_char_index=this.chars_menu.selected_index,this.basic_info_window.set_char(this.data.info.party_data.members[this.selected_char_index]),this.set_item_icons(),this.choosing_give_destination){if(this.item_options_window.item.type===h.item_types.ABILITY_GRANTOR);else if(this.item_options_window.item.type!==h.item_types.GENERAL_ITEM){const t=Object.assign({},this.item_options_window.item_obj,{equipped:!1});this.item_change_stats_window.open(this.data.info.party_data.members[this.selected_char_index],this.item_options_window.item,t),this.item_change_stats_window.compare_items()}}else this.item_choose_window.window_open&&!this.item_options_window.window_open&&(this.item_choose_window.close(),this.item_choose_window.open(this.chars_menu.selected_index))}char_choose(){if(this.choosing_give_destination){if(this.data.info.party_data.members[this.selected_char_index].key_name===this.item_options_window.char.key_name)return;this.chars_menu.deactivate()}else this.chars_menu.deactivate(),this.choosing_item=!0,this.set_guide_window_text(),this.item_choose_window.open(this.selected_char_index,()=>{this.on_item_choose_close()},void 0,this.selected_item_pos);this.item_choose_window.grant_control(this.open_char_select.bind(this),()=>{const t=this.item_choose_window;this.selected_item_pos={page:t.page_index,index:t.selected_element_index};const e=t.element_list[t.elements[t.selected_element_index].key_name],i=t.item_objs[t.selected_element_index];this.item_choose(e,i)},this.chars_menu.next_char.bind(this.chars_menu),this.chars_menu.previous_char.bind(this.chars_menu))}on_item_choose_close(){this.choosing_item=!1,this.chars_menu.activate(),this.set_guide_window_text(),this.set_description_window_text(),this.set_item_icons(),this.item_change_stats_window.window_open&&this.item_change_stats_window.close()}item_change(t,e){this.set_description_window_text(t.description),this.item_change_stats_window.window_open&&this.item_change_stats_window.close(),t.type===h.item_types.ABILITY_GRANTOR||t.type!==h.item_types.GENERAL_ITEM&&this.item_change_stats_window.open(this.data.info.party_data.members[this.selected_char_index],t,e)}item_choose(t,e){this.data.control_manager.reset(),this.item_options_window.open(e,t,this.data.info.party_data.members[this.selected_char_index],this.item_change_stats_window,this,(t,e)=>{this.shift_item_overview(!1),t?(this.selected_char_index=e,this.open_char_select()):this.char_choose()},()=>{t.type===h.item_types.ABILITY_GRANTOR||t.type!==h.item_types.GENERAL_ITEM&&(this.item_change_stats_window.update_info(!1),this.item_change_stats_window.hide_arrows())}),this.item_choose_window.deactivate()}set_guide_window_text(){this.choosing_item?this.guide_window.update_text(this.guide_window_msgs.choosing_item,this.guide_window_text):this.guide_window.update_text(this.guide_window_msgs.choosing_char,this.guide_window_text)}set_description_window_text(t){this.choosing_item?this.description_window.update_text(t,this.description_window_text):this.description_window.update_text(this.data.info.party_data.coins+"    Coins",this.description_window_text)}set_item_icons(){this.item_overview_window.remove_from_group();let t=0;for(let e=0;e<this.data.info.party_data.members[this.selected_char_index].items.length;++e){const i=this.data.info.party_data.members[this.selected_char_index].items[e],s=i.key_name;if(s in this.data.info.items_list){const e=d+11+Math.ceil(t%5*(u+_.ICON_WIDTH)),n=d+12+(t/5|0)*(3+_.ICON_HEIGHT);if(this.item_overview_window.create_at_group(e,n,"items_icons",void 0,s),i.equipped&&this.item_overview_window.create_at_group(e+7,n+8,"equipped"),i.quantity>1){let t=this.game.add.bitmapText(e+7,n+8,"gs-item-bmp-font",i.quantity.toString());this.item_overview_window.add_sprite_to_group(t)}++t}}}open_char_select(){this.item_choose_window.window_open&&this.item_choose_window.close(),this.item_change_stats_window.window_open&&this.item_change_stats_window.close(),this.item_overview_window.open||this.item_overview_window.show(void 0,!1),this.arrange_window.open||this.arrange_window.show(void 0,!1),this.chars_menu.is_open||this.chars_menu.open(this.selected_char_index,c.CharsMenuModes.MENU),this.shift_item_overview(!1),this.chars_menu.select_char(this.selected_char_index),this.chars_menu.grant_control(this.close_menu.bind(this),this.char_choose.bind(this))}open_menu(t){this.basic_info_window.open(this.data.info.party_data.members[this.selected_char_index]),this.close_callback=t,this.is_open=!0,this.set_item_icons(),this.set_guide_window_text(),this.set_description_window_text(),this.guide_window.show(void 0,!1),this.description_window.show(void 0,!1),this.item_overview_window.show(void 0,!1),this.arrange_window.show(void 0,!1),this.open_char_select()}close_menu(t=!1){this.data.cursor_manager.hide(),this.data.control_manager.reset(),this.chars_menu.close(),this.basic_info_window.close(),this.item_change_stats_window.close(),this.is_open=!1,this.guide_window.close(void 0,!1),this.description_window.close(void 0,!1),this.item_overview_window.close(void 0,!1),this.arrange_window.close(void 0,!1),null!==this.close_callback&&this.close_callback(t)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ItemOptionsWindow=void 0;const s=i(2),n=i(1),a=i(95),_=i(32),o=i(96),r=i(8),h=i(4),c=8+n.FONT_SIZE,l=[96,136,176],d=[36,44];e.ItemOptionsWindow=class{constructor(t,e){this.game=t,this.data=e,this.item_obj=null,this.item=null,this.char=null,this.stats_window=null,this.item_menu=null,this.window_open=!1,this.window_active=!1,this.x=104,this.y=0,this.base_window=new s.Window(this.game,this.x,this.y,132,52),this.group=this.game.add.group(),this.text_sprites={use:this.base_window.set_text_in_position("Use",8,32),equip:this.base_window.set_text_in_position("Equip",48,32),details:this.base_window.set_text_in_position("Details",88,32),give:this.base_window.set_text_in_position("Give",8,32+n.FONT_SIZE),remove:this.base_window.set_text_in_position("Remove",48,32+n.FONT_SIZE),drop:this.base_window.set_text_in_position("Drop",88,32+n.FONT_SIZE)},this.horizontal_index=0,this.vertical_index=0,this.option_active={use:!0,equip:!0,details:!0,give:!0,remove:!0,drop:!0},this.give_item_options_window=new o.GiveItemWindow(this.game,this.data),this.item_quantity_manager_window=new _.ItemQuantityManagerWindow(this.game,this.data),this.drop_item_window=new a.DropItemWindow(this.game,this.data),this.action_message_window=new s.Window(this.game,122,66,67,20)}hide(){this.base_window.group.alpha=0}show(){this.base_window.group.alpha=1}hide_text(){for(let t in this.text_sprites)this.text_sprites[t].text.alpha=this.text_sprites[t].shadow.alpha=0}show_text(){for(let t in this.text_sprites)this.text_sprites[t].text.alpha=this.text_sprites[t].shadow.alpha=1}next_vertical(){this.vertical_index<1?this.choose_position(this.vertical_index+1,this.horizontal_index):this.choose_position(0,this.horizontal_index)}previous_vertical(){this.vertical_index>0?this.choose_position(this.vertical_index-1,this.horizontal_index):this.choose_position(1,this.horizontal_index)}next_horizontal(){this.horizontal_index<2?this.choose_position(this.vertical_index,this.horizontal_index+1):this.choose_position(this.vertical_index,0)}previous_horizontal(){this.horizontal_index>0?this.choose_position(this.vertical_index,this.horizontal_index-1):this.choose_position(this.vertical_index,2)}choose_position(t,e){this.vertical_index=t,this.horizontal_index=e;let i=l[this.horizontal_index],s=d[this.vertical_index],n={type:h.CursorManager.CursorTweens.POINT,variant:h.PointVariants.NORMAL};this.data.cursor_manager.move_to({x:i,y:s},{animate:!1,tween_config:n}),this.on_change()}set_available_options(){this.show_text(),!this.item.use_ability||this.item_obj.broken?(this.text_sprites.use.text.tint=6316128,this.option_active.use=!1):(this.text_sprites.use.text.tint=16777215,this.option_active.use=!0),this.item.equipable&&!this.item_obj.equipped&&this.item.equipable_chars.includes(this.char.key_name)?(this.text_sprites.equip.text.tint=16777215,this.option_active.equip=!0):(this.text_sprites.equip.text.tint=6316128,this.option_active.equip=!1),this.data.info.party_data.members.length<=1?(this.text_sprites.give.text.tint=6316128,this.option_active.give=!1):(this.text_sprites.give.text.tint=16777215,this.option_active.give=!0),this.item.equipable&&this.item_obj.equipped&&this.item.equipable_chars.includes(this.char.key_name)?(this.text_sprites.remove.text.tint=16777215,this.option_active.remove=!0):(this.text_sprites.remove.text.tint=6316128,this.option_active.remove=!1),this.item.important_item?(this.text_sprites.drop.text.tint=6316128,this.option_active.drop=!1):(this.text_sprites.drop.text.tint=16777215,this.option_active.drop=!0)}set_header(){this.icon_sprite=this.base_window.create_at_group(8,8,"items_icons",void 0,this.item.key_name),this.char_name=this.base_window.set_text_in_position(this.char.name,27,8),this.item_name=this.base_window.set_text_in_position(this.item.name,27,c),this.equip_sprite=null,this.item_obj.equipped&&(this.equip_sprite=this.base_window.create_at_group(15,16,"equipped")),this.item_count_sprite=null,this.item_obj.quantity>1&&(this.item_count_sprite=this.game.add.bitmapText(15,16,"gs-item-bmp-font",this.item_obj.quantity.toString()),this.base_window.add_sprite_to_group(this.item_count_sprite))}unset_header(){this.base_window.remove_from_group(this.icon_sprite),this.base_window.remove_text(this.char_name),this.base_window.remove_text(this.item_name),this.equip_sprite&&this.base_window.remove_from_group(this.equip_sprite),this.item_count_sprite&&this.base_window.remove_from_group(this.item_count_sprite)}update_position(){this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y}open_action_message_window(t,e){this.action_message_window.set_text([t]),this.data.cursor_manager.hide(),void 0!==this.stats_update_callback&&this.stats_update_callback(),this.action_message_window.show(void 0,!0,()=>{e()}),this.data.control_manager.simple_input(()=>{this.action_message_window.close(),this.data.control_manager.reset()})}on_choose(){0===this.horizontal_index?1===this.vertical_index&&this.option_active.give&&(this.deactivate(),this.give_item_options_window.open(this.item_obj,this.item,this.char,this.item_menu,()=>{this.data.cursor_manager.show(),this.item_menu.choosing_give_destination=!1,this.item_menu.shift_item_overview(!1),this.give_item_options_window.choosing_char&&this.open_options(this.vertical_index,this.horizontal_index)})):1===this.horizontal_index?(0===this.vertical_index&&this.option_active.equip&&(this.char.equip_item(this.item_obj.index),this.open_action_message_window("Equipped.",()=>{this.close(this.close_callback)})),1===this.vertical_index&&this.option_active.remove&&(this.char.unequip_item(this.item_obj.index),this.open_action_message_window("Removed.",()=>{this.close(this.close_callback)}))):2===this.horizontal_index&&1===this.vertical_index&&this.option_active.drop&&(this.deactivate(),this.drop_item_window.open(this.item_obj,this.item,this.char,this.item_menu,()=>{this.drop_item_window.dropped?(this.hide_text(),this.item_menu.item_choose_window.close(),this.item_menu.shift_item_overview(!0,!1),this.open_action_message_window("Dropped it.",()=>{this.close(this.close_callback)})):this.open_options(this.vertical_index,this.horizontal_index)}))}on_change(){this.stats_window.hide_arrows(),this.stats_window.window_open&&this.stats_window.close(),this.stats_window.open(this.char,this.item,this.item_obj),0===this.horizontal_index?(0===this.vertical_index&&this.option_active.use&&this.stats_window.hide(),1===this.vertical_index&&this.option_active.give&&this.item_obj.equipped&&this.stats_window.compare_items(!0)):1===this.horizontal_index?(0===this.vertical_index&&this.option_active.equip&&this.stats_window.compare_items(),1===this.vertical_index&&this.option_active.remove&&this.stats_window.compare_items(!0)):2===this.horizontal_index&&1===this.vertical_index&&this.option_active.drop&&this.item_obj.equipped&&this.stats_window.compare_items(!0)}open_options(t=0,e=0){this.set_header(),this.item_menu.item_choose_window.deactivate(),this.item.type===r.item_types.ABILITY_GRANTOR||this.item.type!==r.item_types.GENERAL_ITEM&&(this.item_menu.item_change_stats_window.open(this.data.info.party_data.members[this.item_menu.item_choose_window.char_index],this.item,this.item_obj),this.item_menu.item_change_stats_window.compare_items()),this.item_menu.chars_menu.select_char(this.item_menu.item_choose_window.char_index),this.item_menu.item_options_window.stats_window.compare_items(!0),this.choose_position(t,e);let i=[{key:this.data.gamepad.LEFT,on_down:this.previous_horizontal.bind(this)},{key:this.data.gamepad.RIGHT,on_down:this.next_horizontal.bind(this)},{key:this.data.gamepad.UP,on_down:this.next_vertical.bind(this)},{key:this.data.gamepad.DOWN,on_down:this.previous_vertical.bind(this)},{key:this.data.gamepad.A,on_down:this.on_choose.bind(this)},{key:this.data.gamepad.B,on_down:this.close.bind(this,this.close_callback)}];this.data.control_manager.set_control(i,{loop_configs:{vertical:!0,horizontal:!0}})}open(t,e,i,s,n,a,_,o){this.item_obj=t,this.item=e,this.char=i,this.stats_window=s,this.item_menu=n,this.close_callback=a,this.stats_update_callback=_,this.update_position(),this.set_available_options(),this.on_change(),this.open_options(),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0,void 0!==o&&o()},!1)}close(t){this.data.cursor_manager.hide(),this.data.control_manager.reset(),this.unset_header(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t()},!1)}activate(){this.set_header(),this.set_available_options(),this.on_change(),this.window_active=!0}deactivate(){this.unset_header(),this.data.cursor_manager.hide(),this.window_active=!1}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DropItemWindow=void 0;const s=i(2),n=i(4);e.DropItemWindow=class{constructor(t,e){this.game=t,this.data=e,this.item_menu=null,this.item_quant_win=null,this.base_window=new s.Window(this.game,104,26,132,76),this.item_obj=null,this.item=null,this.char=null,this.window_open=!1,this.window_active=!1,this.quantity_to_remove=0,this.answer_index=0,this.base_window.set_text(["Are you sure you","want to drop it?"],16,22,1),this.base_window.set_text_in_position("Yes",32,46),this.base_window.set_text_in_position("No",32,62),this.icon_name=this.base_window.set_text_in_position("",32,8),this.icon=null,this.item_count_sprite=null,this.group=this.game.add.group(),this.dropped=!1}change_answer(){46===this.answer_index?this.set_answer_index(62):this.set_answer_index(46)}set_answer_index(t){this.answer_index=t;let e=46===t?76:92,i={type:n.CursorManager.CursorTweens.POINT,variant:n.PointVariants.NORMAL};this.data.cursor_manager.move_to({x:114,y:e},{animate:!1,tween_config:i})}update_position(){this.group.x=this.game.camera.x+104,this.group.y=this.game.camera.y+26}set_info(){this.base_window.update_text(this.item.name,this.icon_name),this.icon=this.base_window.create_at_group(16,4,"items_icons",void 0,this.item.key_name),this.quantity_to_remove>1&&(this.item_count_sprite=this.game.add.bitmapText(23,12,"gs-item-bmp-font",this.quantity_to_remove.toString()),this.base_window.add_sprite_to_group(this.item_count_sprite))}unset_info(){this.base_window.remove_from_group(this.icon),this.item_count_sprite&&this.base_window.remove_from_group(this.item_count_sprite)}on_drop(){46===this.answer_index&&(this.char.remove_item(this.item_obj,this.quantity_to_remove),this.dropped=!0),this.close()}on_quantity_select(){this.quantity_to_remove=this.item_quant_win.window_open?this.item_quant_win.choosen_quantity:this.item_obj.quantity,this.set_answer_index(46),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0,void 0!==this.open_callback&&this.open_callback()},!1);let t=[{key:this.data.gamepad.UP,on_down:this.change_answer.bind(this)},{key:this.data.gamepad.DOWN,on_down:this.change_answer.bind(this)},{key:this.data.gamepad.A,on_down:this.on_drop.bind(this)},{key:this.data.gamepad.B,on_down:this.close.bind(this)}];this.data.control_manager.set_control(t,{loop_configs:{vertical:!0}})}on_item_select(){this.item_obj.quantity>1?(this.item_quant_win.open(this.item_obj,this.item,this.char),this.item_quant_win.grant_control(this.close.bind(this),this.on_quantity_select.bind(this))):this.on_quantity_select()}open(t,e,i,s,n,a){this.item_obj=t,this.item=e,this.char=i,this.item_menu=s,this.close_callback=n,this.open_callback=a,this.quantity_to_remove=0,this.item_quant_win=this.item_menu.item_options_window.item_quantity_manager_window,this.answer_index=0,this.dropped=!1,this.set_info(),this.update_position(),this.on_item_select()}close(){this.unset_info(),this.item_quant_win.window_open&&this.item_quant_win.close(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==this.close_callback&&this.close_callback()},!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GiveItemWindow=void 0;const s=i(2),n=i(1),a=i(4),_=8+n.FONT_SIZE,o=_+n.FONT_SIZE;e.GiveItemWindow=class{constructor(t,e){this.game=t,this.data=e,this.close_callback=null,this.item_menu=null,this.item_obj=null,this.item=null,this.char=null,this.answer_index=0,this.window_open=!1,this.window_active=!1,this.choosing_char=!1,this.asking_for_equip=!1,this.base_window=new s.Window(this.game,104,0,132,36),this.item_quantity_manager_window=null,this.group=this.game.add.group(),this.char_name=this.base_window.set_text_in_position("",27,8),this.item_name=this.base_window.set_text_in_position("",27,_),this.action_text=this.base_window.set_text_in_position("",8,o),this.yes_text=this.base_window.set_text_in_position("Yes",112,8),this.no_text=this.base_window.set_text_in_position("No",112,24),this.yes_text.text.alpha=this.no_text.text.alpha=0,this.yes_text.shadow.alpha=this.no_text.shadow.alpha=0,this.icon_sprite=null,this.equip_sprite=null,this.item_count_sprite=null}change_answer(){8===this.answer_index?this.set_answer_index(24):this.set_answer_index(8)}set_answer_index(t){this.answer_index=t;let e=8===t?12:28,i={type:a.CursorManager.CursorTweens.POINT,variant:a.PointVariants.NORMAL};this.data.cursor_manager.move_to({x:194,y:e},{animate:!1,tween_config:i})}update_position(){this.group.x=this.game.camera.x+104,this.group.y=this.game.camera.y+0}set_header(){this.unset_header(),this.icon_sprite=this.base_window.create_at_group(8,8,"items_icons",void 0,this.item.key_name),this.base_window.update_text(this.char.name,this.char_name,27,8),this.base_window.update_text(this.item.name,this.item_name,27,_),this.choosing_char?this.base_window.update_text("Give it to whom?",this.action_text,27,o):this.asking_for_equip&&(this.yes_text.text.alpha=this.no_text.text.alpha=1,this.yes_text.shadow.alpha=this.no_text.shadow.alpha=1,this.base_window.update_text("Equip this item?",this.action_text,8,o)),this.equip_sprite=null,this.item_obj.equipped&&(this.equip_sprite=this.base_window.create_at_group(15,16,"equipped")),this.item_count_sprite=null,this.item_obj.quantity>1&&(this.item_count_sprite=this.game.add.bitmapText(15,16,"gs-item-bmp-font",this.item_obj.quantity.toString()),this.base_window.add_sprite_to_group(this.item_count_sprite))}unset_header(){this.base_window.remove_from_group(this.icon_sprite),this.base_window.update_text("",this.char_name,27,8),this.base_window.update_text("",this.item_name,27,_),this.base_window.update_text("",this.action_text,8,o),this.yes_text.text.alpha=this.no_text.text.alpha=0,this.yes_text.shadow.alpha=this.no_text.shadow.alpha=0,this.equip_sprite&&this.base_window.remove_from_group(this.equip_sprite),this.item_count_sprite&&this.base_window.remove_from_group(this.item_count_sprite)}on_give(t){t||(t=8===this.answer_index);let e=this.item_menu.chars_menu,i=e.lines[e.current_line][e.selected_index],s={key_name:this.item_obj.key_name,equipped:t,quantity:this.item_quantity_manager_window.window_open?this.item_quantity_manager_window.choosen_quantity:this.item_obj.quantity};this.item_quantity_manager_window.window_open&&this.item_quantity_manager_window.close(),this.char.remove_item(this.item_obj,s.quantity),i.add_item(s.key_name,s.quantity,t),this.base_window.update_text("",this.action_text,8,o),this.yes_text.text.alpha=this.no_text.text.alpha=0,this.yes_text.shadow.alpha=this.no_text.shadow.alpha=0,this.item_menu.item_options_window.open_action_message_window("Given.",()=>{const t=this.data.info.party_data.members.indexOf(this.char);this.item_menu.item_options_window.close(()=>{this.item_menu.item_options_window.close_callback(!0,t)}),this.close()})}on_character_select(){this.choosing_char=!1,this.item_menu.choosing_give_destination=!1;let t=this.item_menu.chars_menu,e=t.lines[t.current_line][t.selected_index];if(this.asking_for_equip=this.item.equipable_chars.includes(e.key_name),this.asking_for_equip){this.set_header(),this.set_answer_index(8);let t=[{key:this.data.gamepad.UP,on_down:this.change_answer.bind(this)},{key:this.data.gamepad.DOWN,on_down:this.change_answer.bind(this)},{key:this.data.gamepad.A,on_down:this.on_give.bind(this)},{key:this.data.gamepad.B,on_down:this.on_give.bind(this,!1)}];this.data.control_manager.set_control(t,{loop_configs:{vertical:!0}})}else if(this.item_obj.quantity>1){let e=t.lines[t.current_line][t.selected_index];this.item_quantity_manager_window.open(this.item_obj,this.item,this.char,void 0,e),this.item_quantity_manager_window.grant_control(()=>{this.item_quantity_manager_window.close(),this.choosing_character()},this.on_give.bind(this))}else this.on_give(!1)}choosing_character(){this.choosing_char=!0,this.set_header(),this.item_menu.choosing_give_destination=!0,this.item_menu.chars_menu.select_char(this.item_menu.chars_menu.selected_index),this.item_menu.chars_menu.grant_control(this.close.bind(this),this.on_character_select.bind(this)),this.item_menu.item_overview_window.show(void 0,!1),this.item_menu.shift_item_overview(!0)}open(t,e,i,s,n,a){this.item_obj=t,this.item=e,this.char=i,this.choosing_char=!1,this.asking_for_equip=!1,this.item_menu=s,this.item_quantity_manager_window=this.item_menu.item_quant_win,this.answer_index=0,this.asking_for_equip&&this.set_answer_index(8),this.set_header(),this.update_position(),this.close_callback=n,this.base_window.show(()=>{this.window_open=!0,this.window_active=!0,a&&a()},!1),this.choosing_character()}close(){this.data.cursor_manager.hide(),this.unset_header(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,this.close_callback&&this.close_callback()},!1)}active(){this.window_active=!0,this.data.cursor_manager.hide()}deactive(){this.window_active=!1,this.data.cursor_manager.hide()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.StatsCheckWithItemWindow=void 0;const s=i(2),n=i(8),a=i(9),_=i(12),o=i(3),r=i(5);e.StatsCheckWithItemWindow=class{constructor(t,e){this.game=t,this.data=e,this.char=null,this.window_open=!1,this.x=0,this.y=40,this.base_window=new s.Window(this.game,this.x,this.y,100,92),this.avatar_group=t.add.group(),this.avatar_group.alpha=0,this.x_avatar=this.x+8,this.y_avatar=this.y+8,this.avatar=null,this.up_arrows={[a.effect_types.ATTACK]:this.base_window.create_at_group(53,46,"up_arrow"),[a.effect_types.DEFENSE]:this.base_window.create_at_group(53,62,"up_arrow"),[a.effect_types.AGILITY]:this.base_window.create_at_group(53,78,"up_arrow")},this.down_arrows={[a.effect_types.ATTACK]:this.base_window.create_at_group(53,46,"down_arrow"),[a.effect_types.DEFENSE]:this.base_window.create_at_group(53,62,"down_arrow"),[a.effect_types.AGILITY]:this.base_window.create_at_group(53,78,"down_arrow")},this.preview_stats_texts={[a.effect_types.ATTACK]:this.base_window.set_text_in_position("0",94,48,!0),[a.effect_types.DEFENSE]:this.base_window.set_text_in_position("0",94,64,!0),[a.effect_types.AGILITY]:this.base_window.set_text_in_position("0",94,80,!0)},this.hide_arrows(),this.base_window.set_text_in_position("Lv",48,24),this.base_window.set_text_in_position("Attack",8,40),this.base_window.set_text_in_position("Defense",8,56),this.base_window.set_text_in_position("Agility",8,72),this.name_text=this.base_window.set_text_in_position("0",40,8),this.lv_text=this.base_window.set_text_in_position("0",80,24),this.attack_text=this.base_window.set_text_in_position("0",40,48,!0),this.defense_text=this.base_window.set_text_in_position("0",40,64,!0),this.agility_text=this.base_window.set_text_in_position("0",40,80,!0)}update_position(){this.avatar_group.x=this.game.camera.x+this.x_avatar,this.avatar_group.y=this.game.camera.y+this.y_avatar}hide(){this.base_window.group.alpha=0,this.avatar_group.alpha=0}show(){this.window_open&&(this.base_window.group.alpha=1,this.avatar_group.alpha=1)}update_info(t=!0){this.base_window.update_text(this.char.name,this.name_text),this.base_window.update_text(this.char.level.toString(),this.lv_text),this.base_window.update_text(this.char.atk.toString(),this.attack_text),this.base_window.update_text(this.char.def.toString(),this.defense_text),this.base_window.update_text(this.char.agi.toString(),this.agility_text),this.avatar&&this.avatar.destroy(),this.avatar=this.avatar_group.create(0,0,"avatars",this.char.key_name),t&&this.compare_items()}set_compare_arrows(t,e,i,s){let n,_=o.find(this.item.effects,{type:t});if(void 0!==_){const i=null===this.char.equip_slots[e]?null:this.char.equip_slots[e].key_name;n=this.char.preview_stats_by_effect(t,_,i)}if(null===this.char.equip_slots[e]){if(void 0===_)return;this.update_preview_text(n,t),this.up_arrows[t].alpha=1}else{if(void 0===o.find(this.data.info.items_list[this.char.equip_slots[e].key_name].effects,{type:t})&&void 0===_)return;(void 0===_||s)&&(_={type:t,quantity:0,operator:a.effect_operators.PLUS},n=this.char.preview_stats_by_effect(t,_,this.char.equip_slots[e].key_name));const r=this.char[i];n>r?(this.up_arrows[t].alpha=1,this.update_preview_text(n,t)):n<r&&(this.down_arrows[t].alpha=1,this.update_preview_text(n,t))}}update_preview_text(t,e){this.preview_stats_texts[e].text.alpha=1,this.preview_stats_texts[e].shadow.alpha=1,this.base_window.update_text(t.toString(),this.preview_stats_texts[e])}hide_arrows(){for(let t in this.up_arrows)this.up_arrows[t].alpha=0,this.down_arrows[t].alpha=0,this.preview_stats_texts[t].text.alpha=0,this.preview_stats_texts[t].shadow.alpha=0}compare_items(t=!1){if(this.hide_arrows(),this.item_obj.equipped&&!t)return;if(!this.item.equipable_chars.includes(this.char.key_name))return;let e=null;switch(this.item.type){case n.item_types.WEAPONS:e="weapon";break;case n.item_types.HEAD_PROTECTOR:e="head";break;case n.item_types.CHEST_PROTECTOR:e="chest";break;case n.item_types.ARMOR:e="body"}this.set_compare_arrows(a.effect_types.ATTACK,_.item_equip_slot[this.item.type],r.main_stats.ATTACK,t),this.set_compare_arrows(a.effect_types.DEFENSE,_.item_equip_slot[this.item.type],r.main_stats.DEFENSE,t),this.set_compare_arrows(a.effect_types.AGILITY,_.item_equip_slot[this.item.type],r.main_stats.AGILITY,t)}open(t,e,i,s){this.update_position(),this.avatar_group.alpha=1,this.char=t,this.item=e,this.item_obj=i,this.update_info(),this.base_window.show(()=>{this.window_open=!0,void 0!==s&&s()},!1)}close(t){this.avatar_group.alpha=0,this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MainDjinnMenu=void 0;const s=i(99),n=i(100),a=i(104);e.MainDjinnMenu=class{constructor(t,e){this.game=t,this.data=e,this.close_callback=null,this.is_open=!1,this.selected_char_index=0,this.chars_quick_info_window=new s.CharsQuickInfoDjinnWindow(this.game),this.djinn_action_window=new a.DjinnActionWindow(this.game),this.djinni_list_window=new n.DjinnListWindow(this.game,this.data)}open_menu(t){this.close_callback=t,this.selected_char_index=0,this.chars_quick_info_window.open(this.data.info.party_data.members[this.selected_char_index]),this.djinni_list_window.open(this.chars_quick_info_window,this.djinn_action_window,this.close_menu.bind(this)),this.djinn_action_window.open(),this.is_open=!0}close_menu(t=!1){this.data.cursor_manager.hide(),this.data.control_manager.reset(),this.is_open=!1,this.chars_quick_info_window.close(),this.djinni_list_window.window_open&&this.djinni_list_window.close(),this.djinn_action_window.close(),null!==this.close_callback&&this.close_callback(t)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CharsQuickInfoDjinnWindow=void 0;const s=i(2),n=i(1),a=8+n.FONT_SIZE;e.CharsQuickInfoDjinnWindow=class{constructor(t){this.game=t,this.char=null,this.window_open=!1,this.x=0,this.y=0,this.base_window=new s.Window(this.game,this.x,this.y,100,36),this.char_name=this.base_window.set_text_in_position("",8,8),this.char_class=this.base_window.set_text_in_position("",8,a),this.base_window.set_text_in_position("Lv",56,8),this.level_number=this.base_window.set_text_in_position("",94,8,!0)}update_text(){this.base_window.update_text(this.char.name,this.char_name),this.base_window.update_text(this.char.class.name,this.char_class),this.base_window.update_text(this.char.level.toString(),this.level_number)}set_char(t){this.char=t,this.update_text()}open(t,e){this.char=t,this.update_text(),this.base_window.show(()=>{this.window_open=!0,void 0!==e&&e()},!1)}close(t){this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DjinnListWindow=void 0;const s=i(2),n=i(7),a=i(1),_=i(0),o=i(101),r=i(102),h=i(103),c=0,l=1,d=2;e.DjinnListWindow=class{constructor(t,e){this.game=t,this.data=e,this.close_callback=null,this.base_window=new s.Window(this.game,0,40,236,116),this.group=this.game.add.group(),this.group.alpha=0,this.chars_sprites_group=this.game.add.group(),this.group.add(this.chars_sprites_group),this.window_open=!1,this.window_active=!1,this.selected_char_index=0,this.selected_djinn_index=0,this.action_text_selected=!1,this.page_index=0,this.chars_sprites={},this.djinns_sprites=[],this.djinn_description=this.base_window.set_text_in_position("",8,104),this.page_number_bar_highlight=this.get_highlight_bar(),this.on_action_bar_highlight=this.get_highlight_bar(),this.on_action_bar_highlight.alpha=0,this.sizes=[],this.djinn_names=[],this.active_djinn_sprite=null,this.djinn_status_change_header_window=new o.DjinnModeHeaderWindow(this.game,this.data),this.djinn_char_stats_window_left=new r.DjinnCharStatsWindow(this.game),this.djinn_char_stats_window_right=new r.DjinnCharStatsWindow(this.game,120),this.djinn_psynergy_window=new h.DjinnPsynergyWindow(this.game,this.data),this.init_djinn_sprites(),this.init_djinni_status_texts()}get_highlight_bar(){const t=this.game.add.graphics(0,0);return t.blendMode=PIXI.blendModes.SCREEN,this.group.add(t),t.beginFill(this.base_window.color,1),t.drawRect(0,0,48,8),t.endFill(),t}update_position(){this.group.x=this.game.camera.x+0,this.group.y=this.game.camera.y+40}next_character(){this.selected_char_index!==this.sizes.length-1&&(this.setting_djinn_status&&(this.selected_char_index+1===this.setting_djinn_status_char_index||this.sizes[this.selected_char_index+1]<this.sizes[this.setting_djinn_status_char_index]&&this.action_text_selected)?(this.selected_char_index=this.selected_char_index+1,this.select_action_text(),this.on_char_change()):(this.action_text_selected&&(this.selected_djinn_index=0),this.select_djinn(this.selected_char_index+1,this.selected_djinn_index)))}previous_character(){0!==this.selected_char_index&&(this.setting_djinn_status&&(this.selected_char_index-1===this.setting_djinn_status_char_index||this.sizes[this.selected_char_index-1]<this.sizes[this.setting_djinn_status_char_index]&&this.action_text_selected)?(this.selected_char_index=this.selected_char_index-1,this.select_action_text(),this.on_char_change()):(this.action_text_selected&&(this.selected_djinn_index=0),this.select_djinn(this.selected_char_index-1,this.selected_djinn_index)))}next_djinni(){this.setting_djinn_status&&this.selected_char_index===this.setting_djinn_status_char_index||this.sizes[this.selected_char_index]<=1||(this.setting_djinn_status&&this.selected_djinn_index===this.sizes[this.selected_char_index]-1&&!this.action_text_selected&&this.sizes[this.selected_char_index]<this.sizes[this.setting_djinn_status_char_index]?this.select_action_text():this.action_text_selected||this.selected_djinn_index===this.sizes[this.selected_char_index]-1?this.select_djinn(this.selected_char_index,0,!0):this.select_djinn(this.selected_char_index,this.selected_djinn_index+1))}previous_djinni(){this.setting_djinn_status&&this.selected_char_index===this.setting_djinn_status_char_index||this.sizes[this.selected_char_index]<=1||(this.setting_djinn_status&&0===this.selected_djinn_index&&!this.action_text_selected&&this.sizes[this.selected_char_index]<this.sizes[this.setting_djinn_status_char_index]?this.select_action_text():this.action_text_selected||0===this.selected_djinn_index?this.select_djinn(this.selected_char_index,this.sizes[this.selected_char_index]-1,!0):this.select_djinn(this.selected_char_index,this.selected_djinn_index-1))}select_action_text(){this.action_text_selected=!0,this.set_highlight_bar(),this.selected_char_index===this.setting_djinn_status_char_index?this.set_djinn_sprite():this.active_djinn_sprite.alpha=0,this.data.cursor_manager.clear_tweens(),this.move_cursor(0+58*this.selected_char_index,60)}select_djinn(t,e,i=!1){this.action_text_selected=!1,(this.selected_djinn_index!==e||i)&&(this.selected_djinn_index=e,this.on_djinn_change()),(this.selected_char_index!==t||i)&&(this.selected_char_index=t,this.on_char_change()),this.data.cursor_manager.clear_tweens(),this.move_cursor(0+58*t,68+8*e)}init_djinn_sprites(){for(let t=0;t<4;++t){this.djinns_sprites.push({});for(let e in _.elements){const i=_.elements[e];if(i===_.elements.NO_ELEMENT)continue;const s=50+58*t;this.djinns_sprites[t][i]=this.chars_sprites_group.create(s,23,i+"_djinn_set"),this.djinns_sprites[t][i].anchor.setTo(.5,1),this.djinns_sprites[t][i].scale.x=-1,this.djinns_sprites[t][i].alpha=0}}}init_djinni_status_texts(){this.djinni_status_texts=[];for(let t=0;t<4;++t){const e=16+58*t,i=16;this.djinni_status_texts.push(this.base_window.set_text_in_position("",e,i))}}set_djinn_sprite(t=!0){const e=this.data.info.party_data.members[this.selected_char_index];if(this.setting_djinn_status&&this.selected_djinn_index===e.djinni.length)return;const i=this.data.info.djinni_list[e.djinni[this.selected_djinn_index]];null!==this.active_djinn_sprite&&(this.active_djinn_sprite.alpha=0,this.active_djinn_sprite.animations.stop());const s=this.djinns_sprites[this.selected_char_index][i.element];let a,_;switch(this.active_djinn_sprite=s,t&&(s.scale.setTo(0,0),this.game.add.tween(s.scale).to({x:-1,y:1},Phaser.Timer.QUARTER>>1,Phaser.Easing.Linear.None,!0)),s.alpha=1,i.status){case n.djinn_status.RECOVERY:_="left";case n.djinn_status.STANDBY:_="down",a="standby";break;case n.djinn_status.SET:_="down",a="set"}this.data.info.djinni_sprites[i.element].setAnimation(s,a),s.animations.play(a+"_"+_)}load_page(){this.sizes=new Array(this.data.info.party_data.members.length),this.djinn_names=[],this.stars=[];for(let t=0;t<4;++t){const e=4*this.page_index+t;if(e>=this.data.info.party_data.members.length)continue;const i=this.data.info.party_data.members[e],s=i.key_name;if(!(s in this.chars_sprites)){const t=i.sprite_base.getActionKey(_.base_actions.IDLE);this.chars_sprites[s]=this.chars_sprites_group.create(0,0,t),this.chars_sprites[s].anchor.setTo(.5,1),i.sprite_base.setAnimation(this.chars_sprites[s],_.base_actions.IDLE)}const n=i.sprite_base.getAnimationKey(_.base_actions.IDLE,_.reverse_directions[_.directions.down]);this.chars_sprites[s].animations.play(n);const a=32+58*t;this.chars_sprites[s].x=a,this.chars_sprites[s].y=23,this.chars_sprites[s].alpha=1,this.djinn_names.push([]),this.stars.push([]),this.update_djinn_list(t)}}update_djinn_list(t){this.djinn_names[t].forEach(t=>{this.base_window.remove_text(t)}),this.stars[t].forEach(t=>{this.base_window.remove_from_group(t,!0)});const e=this.data.info.party_data.members[t].djinni;let i=[],s=[];for(let _=0;_<e.length;++_){const o=this.data.info.djinni_list[e[_]],r=17+58*t,h=25+_*a.FONT_SIZE;s.push(this.base_window.create_at_group(r,h,o.element+"_star"));const c=24+58*t,l=24+_*a.FONT_SIZE;let d;switch(o.status){case n.djinn_status.SET:d=n.djinn_font_colors[n.djinn_status.SET];break;case n.djinn_status.STANDBY:d=n.djinn_font_colors[n.djinn_status.STANDBY];break;case n.djinn_status.RECOVERY:d=n.djinn_font_colors[n.djinn_status.RECOVERY]}const u=this.base_window.set_text_in_position(o.name,c,l,!1,!1,d);i.push(u)}this.sizes[t]=e.length,this.djinn_names[t]=i,this.stars[t]=s}unset_page(){for(let t in this.chars_sprites)this.chars_sprites[t].animations.stop(),this.chars_sprites[t].alpha=0;this.base_window.remove_from_group();for(let t=0;t<this.djinn_names.length;++t){const e=this.djinn_names[t];for(let t=0;t<e.length;++t)this.base_window.remove_text(e[t])}}set_highlight_bar(){this.setting_djinn_status&&this.action_text_selected?this.page_number_bar_highlight.alpha=0:(this.page_number_bar_highlight.alpha=1,this.page_number_bar_highlight.x=16+58*this.selected_char_index,this.page_number_bar_highlight.y=24+this.selected_djinn_index*a.FONT_SIZE),this.setting_djinn_status?(this.on_action_bar_highlight.alpha=1,this.on_action_bar_highlight.x=16+58*this.setting_djinn_status_char_index,this.on_action_bar_highlight.y=24+this.setting_djinn_status_djinn_index*a.FONT_SIZE):this.on_action_bar_highlight.alpha=0}update_djinn_description(){if(this.setting_djinn_status&&this.selected_djinn_index===this.data.info.party_data.members[this.selected_char_index].djinni.length)this.base_window.update_text("",this.djinn_description);else{const t=this.data.info.party_data.members[this.selected_char_index],e=this.data.info.djinni_list[t.djinni[this.selected_djinn_index]];this.base_window.update_text(e.description,this.djinn_description)}}set_action_text(){if(this.setting_djinn_status);else{const t=this.data.info.party_data.members[this.selected_char_index],e=this.data.info.djinni_list[t.djinni[this.selected_djinn_index]];this.djinn_action_window.set_action_text(e.status)}}on_char_change(){this.setting_djinn_status&&this.selected_char_index===this.setting_djinn_status_char_index?this.selected_djinn_index=this.setting_djinn_status_djinn_index:this.selected_djinn_index>=this.sizes[this.selected_char_index]&&(this.selected_djinn_index=this.sizes[this.selected_char_index]-1,this.move_cursor(0+58*this.selected_char_index,68+8*this.selected_djinn_index)),this.set_highlight_bar();const t=this.data.info.party_data.members[this.selected_char_index];this.chars_quick_info_window.set_char(t),this.set_action_text(),this.update_djinn_description(),this.set_djinn_sprite()}on_djinn_change(){this.set_highlight_bar(),this.set_action_text(),this.update_djinn_description(),this.set_djinn_sprite()}move_cursor(t,e,i){this.data.cursor_manager.move_to({x:t,y:e},{animate:!1},i)}grant_control(t,e,i){let s=[{key:this.data.gamepad.LEFT,on_down:this.previous_character.bind(this)},{key:this.data.gamepad.RIGHT,on_down:this.next_character.bind(this)},{key:this.data.gamepad.UP,on_down:this.previous_djinni.bind(this)},{key:this.data.gamepad.DOWN,on_down:this.next_djinni.bind(this)},{key:this.data.gamepad.A,on_down:e},{key:this.data.gamepad.B,on_down:t},{key:this.data.gamepad.R,on_down:i}];this.data.control_manager.set_control(s,{loop_configs:{vertical:!0,horizontal:!0}})}darken_font_color(t=!0){const e=this.data.info.party_data.members[this.setting_djinn_status_char_index];for(let i=0;i<this.djinn_names[this.setting_djinn_status_char_index].length;++i){const s=this.data.info.djinni_list[e.djinni[i]],a=t?_.change_brightness(n.djinn_font_colors[s.status],.7):n.djinn_font_colors[s.status];t&&i===this.setting_djinn_status_djinn_index||this.base_window.update_text_color(a,this.djinn_names[this.setting_djinn_status_char_index][i])}}set_djinn_operation(){const t=this.data.info.party_data.members[this.setting_djinn_status_char_index],e=this.data.info.djinni_list[t.djinni[this.setting_djinn_status_djinn_index]];if(this.setting_djinn_status_char_index!==this.selected_char_index){const i=this.data.info.party_data.members[this.selected_char_index];let s,a,_,o,r,h;this.action_text_selected?(s=[e.status===n.djinn_status.STANDBY?n.djinn_status.ANY:n.djinn_status.STANDBY],a=[e.status===n.djinn_status.STANDBY?n.djinn_status.ANY:e.status],_=[e],o=[e],r="Give"):(h=this.data.info.djinni_list[i.djinni[this.selected_djinn_index]],s=[h.status===n.djinn_status.STANDBY?n.djinn_status.ANY:h.status,e.status===n.djinn_status.STANDBY?n.djinn_status.ANY:n.djinn_status.STANDBY],a=[e.status===n.djinn_status.STANDBY?n.djinn_status.ANY:e.status,h.status===n.djinn_status.STANDBY?n.djinn_status.ANY:n.djinn_status.STANDBY],_=[h,e],o=[e,h],r="Trade"),this.djinn_char_stats_window_left.open(t,_,s,r),this.djinn_char_stats_window_right.open(i,o,a,r),this.djinn_char_stats_window_right.base_window.update_position({x:120}),this.djinn_status_change_header_window.open([t,i],o,s,r),this.deactivate(),this.view_state=c,this.djinn_psynergy_window.open(t,_,s,s=>{this.djinn_status_change_header_window.close(),this.djinn_char_stats_window_left.close(),this.djinn_char_stats_window_right.close(),s?("Trade"===r?(t.replace_djinn(e.key_name,h.key_name),i.replace_djinn(h.key_name,e.key_name)):"Give"===r&&(t.remove_djinn(e.key_name),i.add_djinn(e.key_name),this.selected_djinn_index=0),this.update_djinn_list(this.selected_char_index),this.update_djinn_list(this.setting_djinn_status_char_index),this.cancel_djinn_status_set()):this.grant_control(this.cancel_djinn_status_set.bind(this,!0),this.set_djinn_operation.bind(this)),this.activate()},!0,()=>{switch(++this.view_state,this.view_state>d&&(this.view_state=c),this.view_state){case c:this.djinn_psynergy_window.base_window.close(void 0,!1),this.djinn_char_stats_window_left.base_window.show(void 0,!1),this.djinn_char_stats_window_right.base_window.update_position({x:120}),this.djinn_status_change_header_window.set_action_info_text(`: ${t.name}'s Psy`);break;case l:this.djinn_psynergy_window.update_info(t,_,s),this.djinn_psynergy_window.base_window.show(void 0,!1),this.djinn_char_stats_window_right.base_window.close(void 0,!1),this.djinn_status_change_header_window.set_action_info_text(`: ${i.name}'s Psy`);break;case d:this.djinn_psynergy_window.update_info(i,o,a),this.djinn_char_stats_window_left.base_window.close(void 0,!1),this.djinn_char_stats_window_right.base_window.show(void 0,!1),this.djinn_char_stats_window_right.base_window.update_position({x:0}),this.djinn_status_change_header_window.set_action_info_text(": Status")}},r),this.djinn_psynergy_window.grant_control()}else{let i;switch(e.status){case n.djinn_status.SET:i=n.djinn_status.STANDBY;break;case n.djinn_status.STANDBY:i=n.djinn_status.SET}this.deactivate(),this.djinn_status_change_header_window.open([t],[e],[i]),this.djinn_char_stats_window_left.open(t,[e],[i]),this.djinn_psynergy_window.open(t,[e],[i],t=>{this.djinn_status_change_header_window.close(),this.djinn_char_stats_window_left.close(),t?(this.change_djinn_status(),this.cancel_djinn_status_set(!0)):this.grant_control(this.cancel_djinn_status_set.bind(this,!0),this.set_djinn_operation.bind(this)),this.activate()}),this.djinn_psynergy_window.grant_control()}}change_djinn_status(){let t=this.setting_djinn_status?this.setting_djinn_status_djinn_index:this.selected_djinn_index;const e=this.data.info.party_data.members[this.selected_char_index],i=this.data.info.djinni_list[e.djinni[t]];i.status===n.djinn_status.SET?(i.set_status(n.djinn_status.STANDBY,e),this.base_window.update_text_color(n.djinn_font_colors[n.djinn_status.STANDBY],this.djinn_names[this.selected_char_index][this.selected_djinn_index]),this.chars_quick_info_window.update_text(),this.set_action_text(),this.set_djinn_sprite(!1)):i.status===n.djinn_status.STANDBY&&(i.set_status(n.djinn_status.SET,e),this.base_window.update_text_color(n.djinn_font_colors[n.djinn_status.SET],this.djinn_names[this.selected_char_index][this.selected_djinn_index]),this.chars_quick_info_window.update_text(),this.set_action_text(),this.set_djinn_sprite(!1))}cancel_djinn_status_set(t=!1){if(this.setting_djinn_status){for(let t in this.chars_sprites)this.chars_sprites[t].y+=a.FONT_SIZE;for(let t=0;t<4;++t){for(let e in _.elements){const i=_.elements[e];i!==_.elements.NO_ELEMENT&&(this.djinns_sprites[t][i].y+=a.FONT_SIZE)}this.base_window.update_text("",this.djinni_status_texts[t]);const e=this.data.info.party_data.members[t];void 0!==e&&(this.sizes[t]=e.djinni.length)}t&&(this.selected_char_index=this.setting_djinn_status_char_index,this.selected_djinn_index=this.setting_djinn_status_djinn_index,this.set_highlight_bar()),this.darken_font_color(!1),this.setting_djinn_status_char_index=-1,this.setting_djinn_status_djinn_index=-1,this.setting_djinn_status=!1,this.set_highlight_bar(),this.set_action_text(),this.update_djinn_description(),this.set_djinn_sprite(),this.select_djinn(this.selected_char_index,this.selected_djinn_index),this.grant_control(this.close.bind(this),this.on_choose.bind(this),this.change_djinn_status.bind(this))}}on_choose(){const t=this.data.info.party_data.members[this.selected_char_index],e=this.data.info.djinni_list[t.djinni[this.selected_djinn_index]];if(!this.setting_djinn_status&&e.status!==n.djinn_status.RECOVERY){for(let t in this.chars_sprites)this.chars_sprites[t].y-=a.FONT_SIZE;for(let t=0;t<4;++t)for(let e in _.elements){const i=_.elements[e];i!==_.elements.NO_ELEMENT&&(this.djinns_sprites[t][i].y-=a.FONT_SIZE)}for(let i=0;i<4;++i){let s;if(i===this.selected_char_index)switch(e.status){case n.djinn_status.SET:s=_.capitalize(n.djinn_status.STANDBY);break;case n.djinn_status.STANDBY:s=_.capitalize(n.djinn_status.SET)}else{const e=this.data.info.party_data.members[i];if(void 0===e)continue;s=e.djinni.length<t.djinni.length?"Give":"Trade"}this.base_window.update_text(s,this.djinni_status_texts[i])}this.setting_djinn_status_char_index=this.selected_char_index,this.setting_djinn_status_djinn_index=this.selected_djinn_index,this.setting_djinn_status=!0,this.djinn_action_window.set_action_for_specific_djinn(t,e),this.darken_font_color(),this.select_action_text(),this.selected_djinn_index=0,this.grant_control(this.cancel_djinn_status_set.bind(this,!0),this.set_djinn_operation.bind(this))}}open(t,e,i,s){this.selected_char_index=0,this.selected_djinn_index=0,this.page_index=0,this.group.alpha=1,this.setting_djinn_status_char_index=-1,this.setting_djinn_status_djinn_index=-1,this.setting_djinn_status=!1,this.chars_quick_info_window=t,this.djinn_action_window=e,this.load_page(),this.update_position(),this.set_highlight_bar(),this.set_action_text(),this.update_djinn_description(),this.set_djinn_sprite(),this.select_djinn(0,0),this.window_open=!0,this.window_active=!0,this.changing_djinn_status=!1,this.close_callback=i,this.grant_control(this.close.bind(this),this.on_choose.bind(this),this.change_djinn_status.bind(this)),this.base_window.show(void 0,!1),s&&s()}close(){this.window_open=!1,this.window_active=!1,this.data.cursor_manager.hide(),this.unset_page(),this.group.alpha=0,this.base_window.close(void 0,!1),this.close_callback&&this.close_callback()}activate(){this.window_active=!0,this.select_djinn(this.selected_char_index,this.selected_djinn_index)}deactivate(){this.window_active=!1,this.data.cursor_manager.hide()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DjinnModeHeaderWindow=void 0;const s=i(2),n=i(0),a=i(7),_=i(1),o=[32,99],r=[21,37],h=[16,117],c=[34,34];e.DjinnModeHeaderWindow=class{constructor(t,e){this.game=t,this.data=e,this.sprites=[],this.djinn_sprites=[],this.tweens=[],this.window_open=!1,this.x=0,this.y=0,this.base_window=new s.Window(this.game,this.x,this.y,236,36),this.group=t.add.group(),this.ok_msg_text=this.base_window.set_text_in_position("Is this OK?",104,24),this.djinn_status_text=this.base_window.set_text_in_position("",104,8),this.djinn_name_before_text=this.base_window.set_text_in_position("",56,8),this.djinn_name_after_text=this.base_window.set_text_in_position("",56,24),this.djinn_status_arrow=this.base_window.create_at_group(64,16,"arrow_change"),this.spacebar_key={shadow:this.base_window.create_at_group(133,25,"spacebar_keyboard",0),text:this.base_window.create_at_group(132,24,"spacebar_keyboard")},this.action_info_text=this.base_window.set_text_in_position("",this.spacebar_key.text.width+132+2,24),this.init_arrow_blinks()}update_position(){this.group.x=this.game.camera.x+0,this.group.y=this.game.camera.y+0}init_arrow_blinks(){this.djinn_status_arrow_blink_timer=this.game.time.create(!1),this.djinn_status_arrow_blink_timer.loop(90,()=>{this.djinn_status_arrow.alpha=this.djinn_status_arrow.alpha?0:1}),this.djinn_status_arrow_blink_timer.start(),this.djinn_status_arrow_blink_timer.pause()}set_action_info_text(t){this.base_window.update_text(t,this.action_info_text)}mount_window(){this.update_position(),1===this.chars.length?(this.action_text=n.capitalize(this.next_djinni_status[0]),this.base_window.update_text(this.action_text,this.djinn_status_text,104),this.spacebar_key.text.alpha=this.spacebar_key.shadow.alpha=0,this.base_window.update_text("",this.action_info_text),this.base_window.update_text_position({x:104,y:24},this.ok_msg_text),this.base_window.update_text(this.djinni[0].name,this.djinn_name_before_text),this.base_window.update_text_color(a.djinn_font_colors[this.djinni[0].status],this.djinn_name_before_text),this.base_window.update_text_position({x:56,y:8},this.djinn_name_before_text),this.base_window.update_text_position({x:56},this.djinn_name_after_text),this.base_window.update_text(this.djinni[0].name,this.djinn_name_after_text),this.base_window.update_text_color(a.djinn_font_colors[this.next_djinni_status[0]],this.djinn_name_after_text),this.sprites.push(this.base_window.create_at_group(49,9,this.djinni[0].element+"_star")),this.sprites.push(this.base_window.create_at_group(49,25,this.djinni[0].element+"_star")),this.djinn_status_arrow.alpha=1,this.djinn_status_arrow_blink_timer.resume()):(this.base_window.update_text(this.action_text,this.djinn_status_text,132),this.spacebar_key.text.alpha=this.spacebar_key.shadow.alpha=1,this.base_window.update_text(`: ${this.chars[0].name}'s Psy`,this.action_info_text),this.base_window.update_text_position({x:132,y:16},this.ok_msg_text),this.base_window.update_text(this.djinni[0].name,this.djinn_name_before_text),this.base_window.update_text_color(a.djinn_font_colors[this.djinni[0].status],this.djinn_name_before_text),"Trade"===this.action_text?(this.sprites.push(this.base_window.create_at_group(44,9,this.djinni[0].element+"_star")),this.base_window.update_text(this.djinni[1].name,this.djinn_name_after_text),this.base_window.update_text_color(a.djinn_font_colors[this.djinni[1].status],this.djinn_name_after_text),this.sprites.push(this.base_window.create_at_group(44,25,this.djinni[1].element+"_star")),this.base_window.update_text_position({x:51},this.djinn_name_after_text),this.base_window.update_text_position({x:51,y:8},this.djinn_name_before_text)):"Give"===this.action_text&&(this.base_window.update_text("",this.djinn_name_after_text),this.base_window.update_text_position({x:51,y:8+_.FONT_SIZE},this.djinn_name_before_text),this.sprites.push(this.base_window.create_at_group(44,9+_.FONT_SIZE,this.djinni[0].element+"_star"))),this.djinn_status_arrow.alpha=0),this.set_char_and_djinn_sprite()}set_char_and_djinn_sprite(){for(let t=0;t<this.chars.length;++t){const e=this.chars[t],i=this.djinni[t];let s,a;["Trade","Give"].includes(this.action_text)?(s=o[t],a=r[t]):(s=32,a=31);const _=e.sprite_base.getActionKey(n.base_actions.IDLE),l=this.base_window.create_at_group(h[t],c[t],_);l.anchor.setTo(.5,1);const d=e.sprite_base.getAnimationKey(n.base_actions.IDLE,n.reverse_directions[n.directions.down]);if(l.animations.add(d,e.sprite_base.animations.idle.down,e.sprite_base.actions.idle.frame_rate,!0),l.animations.play(d,e.sprite_base.actions.idle.frame_rate,!0),this.sprites.push(l),"Give"===this.action_text&&1===t)break;const u=this.group.create(s,a,i.element+"_djinn_"+i.status);if(u.anchor.setTo(.5,1),u.scale.x=-.8,u.scale.y=.8,this.data.info.djinni_sprites[i.element].setAnimation(u,i.status),u.animations.play(i.status+"_down"),this.djinn_sprites.push(u),["Trade","Give"].includes(this.action_text)){const e=0===t?1:-1,i=17*e,n=33*e,_=5*-e,o=this.game.add.tween(u).to({y:[a,a+_,a+_,a],x:[s,s+i,s+i+n,s+i+n+i]},700,Phaser.Easing.Linear.None,!0,0,-1,!1);o.repeatDelay(300),this.tweens.push(o)}}}unmount_window(){this.sprites.forEach(t=>{this.base_window.remove_from_group(t,!0)}),this.djinn_sprites.forEach(t=>{t.destroy()}),this.tweens.forEach(t=>{t.stop()}),this.sprites=[],this.djinn_sprites=[],this.tweens=[],this.djinn_status_arrow.alpha=0,this.djinn_status_arrow_blink_timer.paused||this.djinn_status_arrow_blink_timer.pause()}open(t,e,i,s,n){this.chars=t,this.djinni=e,this.next_djinni_status=i,this.action_text=s,this.mount_window(),this.base_window.show(()=>{this.window_open=!0,void 0!==n&&n()},!1)}close(t){this.unmount_window(),this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DjinnCharStatsWindow=void 0;const s=i(2),n=i(1),a=i(0),_=i(5),o=["HP","PP","Attack","Defense","Agility","Luck"],r=a.ordered_elements.slice().reverse();e.DjinnCharStatsWindow=class{constructor(t,e=0){this.game=t,this.window_open=!1,this.sprites=[],this.djinn_number_texts={},this.stats_current_texts={},this.stats_next_texts={},this.base_window=new s.Window(this.game,e,40,116,116),this.char_name_text=this.base_window.set_text_in_position("",48,8),this.base_window.set_text_in_position("Lv",48,24),this.level_number_text=this.base_window.set_text_in_position("",110,24,!0),this.class_text=this.base_window.set_text_in_position("",8,40),this.new_class_text=this.base_window.set_text_in_position("",8,56),r.forEach((t,e)=>{const i=110-17*e;this.djinn_number_texts[t]=this.base_window.set_text_in_position("",i,48,!0)}),o.forEach((t,e)=>{const i=64+e*n.FONT_SIZE;this.base_window.set_text_in_position(t,8,i);let s=0;["HP","PP"].includes(t)&&(s=-8),this.stats_current_texts[t]=this.base_window.set_text_in_position("",78+s,i,!0),this.stats_next_texts[t]=this.base_window.set_text_in_position("",110,i,!0)}),this.class_name_arrow=this.base_window.create_at_group(24,48,"arrow_change"),this.init_arrow_blinks()}init_arrow_blinks(){this.class_name_arrow_blink_timer=this.game.time.create(!1),this.class_name_arrow_blink_timer.loop(90,()=>{this.class_name_arrow.alpha=this.class_name_arrow.alpha?0:1}),this.class_name_arrow_blink_timer.start(),this.class_name_arrow_blink_timer.pause(),this.class_name_arrow.alpha=0}mount_window(){const t=this.base_window.create_at_group(8,8,"avatars",void 0,this.char.key_name);this.sprites.push(t),this.base_window.update_text(this.char.name,this.char_name_text),this.base_window.update_text(this.char.level.toString(),this.level_number_text),this.base_window.update_text(this.char.class.name,this.class_text),r.forEach((t,e)=>{this.base_window.update_text(this.char[t+"_djinni"].length.toString(),this.djinn_number_texts[t]);const i=97-17*e,s=this.base_window.create_at_group(i,49,t+"_star");this.sprites.push(s)});const e=this.char.preview_djinn_change(_.ordered_main_stats,this.djinni.map(t=>t.key_name),this.next_djinni_status,this.action);e.class_key_name!==this.char.class.key_name?(this.base_window.update_text(e.class_name,this.new_class_text),this.class_name_arrow_blink_timer.resume()):this.base_window.update_text("",this.new_class_text),o.forEach((t,i)=>{const s=this.char[_.ordered_main_stats[i]],a=e[_.ordered_main_stats[i]];this.base_window.update_text(s.toString(),this.stats_current_texts[t]),this.base_window.update_text(a.toString(),this.stats_next_texts[t]);const o=64+i*n.FONT_SIZE-3;let r=0;if(["HP","PP"].includes(t)&&(r=-8),s!==a){const t=this.base_window.create_at_group(78+r,o,"stat_"+(a>s?"up":"down"));this.sprites.push(t)}})}unmount_window(){this.sprites.forEach(t=>{t.destroy()}),this.class_name_arrow.alpha=0,this.class_name_arrow_blink_timer.paused||this.class_name_arrow_blink_timer.pause()}open(t,e,i,s,n){this.char=t,this.djinni=e,this.next_djinni_status=i,this.action=s,this.mount_window(),this.base_window.show(()=>{this.window_open=!0,void 0!==n&&n()},!1)}close(t){this.unmount_window(),this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DjinnPsynergyWindow=void 0;const s=i(2),n=i(1),a=n.YELLOW_FONT_COLOR,_=n.RED_FONT_COLOR,o=97+n.FONT_SIZE;e.DjinnPsynergyWindow=class{constructor(t,e){this.game=t,this.data=e,this.window_open=!1,this.text_sprites_in_window=[],this.icon_sprites_in_window=[],this.base_window=new s.Window(this.game,120,40,116,116),this.base_window.set_text_in_position("PP",86,8),this.psy_info_1_text=this.base_window.set_text_in_position("",8,96),this.psy_info_2_text=this.base_window.set_text_in_position("",8,o)}previous_page(){this.change_page(-1)}next_page(){this.change_page(1)}grant_control(){let t=[{key:this.data.gamepad.LEFT,on_down:this.previous_page.bind(this)},{key:this.data.gamepad.RIGHT,on_down:this.next_page.bind(this)},{key:this.data.gamepad.R,on_down:this.next_state_callback},{key:this.data.gamepad.A,on_down:()=>{this.execute_operation=!0,this.close(this.close_callback)}},{key:this.data.gamepad.B,on_down:()=>{this.execute_operation=!1,this.close(this.close_callback)}}];this.data.control_manager.set_control(t,{loop_configs:{horizontal:!0}})}set_page_number(){const t=this.all_abilities.length;this.page_number=1+((t-1)/5|0),this.page_index>=this.page_number&&(this.page_index=this.page_number-1),this.base_window.page_indicator.initialize(this.page_number,this.page_index)}change_page(t){this.page_index+=t,this.page_index===this.page_number?this.page_index=0:this.page_index<0&&(this.page_index=this.page_number-1),this.set_abilities_list(),this.base_window.page_indicator.select_page(this.page_index)}set_abilities_list(){this.clear_sprites(),this.abilities=this.all_abilities.slice(5*this.page_index,5*(this.page_index+1));for(let t=0;t<this.abilities.length;++t){const e=this.abilities[t],i=8,s=12+t*(n.ICON_HEIGHT+2),o=i+(n.ICON_WIDTH>>1),r=s+(n.ICON_HEIGHT>>1),h=8+n.ICON_WIDTH+2,c=this.base_window.set_text_in_position(this.data.info.abilities_list[e].name,h,s+4);this.text_sprites_in_window.push(c),this.icon_sprites_in_window.push(this.base_window.create_at_group(o,r,"abilities_icons",void 0,e)),this.icon_sprites_in_window[t].anchor.setTo(.5,.5);const l=this.base_window.set_text_in_position(this.data.info.abilities_list[e].pp_cost,109,s+4,!0);this.text_sprites_in_window.push(l),this.gained_abilities.includes(e)?(this.base_window.update_text_color(a,c),this.base_window.update_text_color(a,l)):this.lost_abilities.includes(e)&&(this.base_window.update_text_color(_,c),this.base_window.update_text_color(_,l))}}set_abilities(){this.current_abilities=this.char.abilities.filter(t=>t in this.data.info.abilities_list);const t=this.char.preview_djinn_change([],this.djinni.map(t=>t.key_name),this.next_djinni_status,this.action);this.next_abilities=t.abilities.filter(t=>t in this.data.info.abilities_list);let e=new Set(this.current_abilities),i=new Set(this.next_abilities);this.gained_abilities=[...i].filter(t=>!e.has(t)),this.lost_abilities=[...e].filter(t=>!i.has(t)),this.intersection_abilities=[...e].filter(t=>i.has(t)),this.all_abilities=this.gained_abilities.concat(this.intersection_abilities,this.lost_abilities),0===this.gained_abilities.length&&0===this.lost_abilities.length?(this.base_window.update_text("* No change",this.psy_info_1_text),this.base_window.update_text_color(n.DEFAULT_FONT_COLOR,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):this.gained_abilities.length&&0===this.lost_abilities.length?(this.base_window.update_text("* Psynergy Gained",this.psy_info_1_text),this.base_window.update_text_color(a,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):0===this.gained_abilities.length&&this.lost_abilities.length?(this.base_window.update_text("* Psynergy Lost",this.psy_info_1_text),this.base_window.update_text_color(_,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):this.gained_abilities.length&&this.lost_abilities.length&&(this.base_window.update_text("* Psynergy Gained",this.psy_info_1_text),this.base_window.update_text_color(a,this.psy_info_1_text),this.base_window.update_text("* Psynergy Lost",this.psy_info_2_text),this.base_window.update_text_color(_,this.psy_info_2_text))}mount_window(){this.set_abilities(),this.set_abilities_list(),this.set_page_number()}clear_sprites(){for(let t=0;t<this.icon_sprites_in_window.length;++t)this.base_window.remove_from_group(this.icon_sprites_in_window[t]);this.icon_sprites_in_window=[];for(let t=0;t<this.text_sprites_in_window.length;++t)this.base_window.remove_text(this.text_sprites_in_window[t]);this.text_sprites_in_window=[]}update_info(t,e,i){this.clear_sprites(),this.base_window.page_indicator.terminante(),this.char=t,this.djinni=e,this.next_djinni_status=i,this.page_index=0,this.mount_window()}open(t,e,i,s,n=!1,a,_,o){this.char=t,this.djinni=e,this.next_djinni_status=i,this.close_callback=s,this.execute_operation=!1,this.page_index=0,this.mount_window(),this.next_state_callback=a,this.action=_,n?this.window_open=!0:this.base_window.show(()=>{this.window_open=!0,void 0!==o&&o()},!1)}close(t){this.clear_sprites(),this.base_window.page_indicator.terminante(),this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t(this.execute_operation)},!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DjinnActionWindow=void 0;const s=i(2),n=i(7);e.DjinnActionWindow=class{constructor(t){this.game=t,this.window_open=!1,this.star_sprite=null,this.base_window=new s.Window(this.game,104,0,132,36),this.action_description_text=this.base_window.set_text_in_position("",8,8),this.char_name_text=this.base_window.set_text_in_position("",8,16),this.djinn_name_text=this.base_window.set_text_in_position("",64,16),this.action_text=this.base_window.set_text_in_position("",31,24),this.shift_key={shadow:this.base_window.create_at_group(9,25,"shift_keyboard",0),text:this.base_window.create_at_group(8,24,"shift_keyboard")}}set_action_text(t){switch(this.base_window.update_text("Choose a djinn.",this.action_description_text),this.base_window.update_text("",this.char_name_text),this.base_window.update_text("",this.djinn_name_text),this.shift_key.text.alpha=this.shift_key.shadow.alpha=1,this.star_sprite&&(this.star_sprite.destroy(),this.star_sprite=null),t){case n.djinn_status.SET:this.base_window.update_text(": Standby",this.action_text);break;case n.djinn_status.STANDBY:this.base_window.update_text(": Set",this.action_text)}}set_action_for_specific_djinn(t,e){this.star_sprite=this.base_window.create_at_group(57,17,e.element+"_star"),this.base_window.update_text("What will you do?",this.action_description_text),this.base_window.update_text(t.name+"'s",this.char_name_text),this.base_window.update_text(e.name,this.djinn_name_text),this.base_window.update_text("",this.action_text),this.shift_key.text.alpha=this.shift_key.shadow.alpha=0}open(t){this.base_window.show(()=>{this.window_open=!0,void 0!==t&&t()},!1)}close(t){this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MainStatusStatistics=e.MainStatistics=void 0;const s=i(10),n=i(4),a=i(5),_=i(0),o=i(34);var r;!function(t){t[t.NAME=0]="NAME",t[t.EXP=1]="EXP",t[t.HP=2]="HP",t[t.PP=3]="PP",t[t.DJINN=4]="DJINN",t[t.ELEM_LEVELS=5]="ELEM_LEVELS",t[t.ELEM_POWER=6]="ELEM_POWER",t[t.ELEM_RESIST=7]="ELEM_RESIST"}(r=e.MainStatistics||(e.MainStatistics={}));class h extends s.StatusComponent{constructor(t,e,i,s,n){super(t,e,i,s,n),this.djinn_group=this.game.add.group()}select_option(){if(this.state===o.MainStatusStates.CHARACTERS)return;const t={x:0,y:0,width:0,height:0};let e=0,i=0;if(0!==this.current_col)t.x=h.HIGHLIGHT[this.current_line].X,t.y=h.HIGHLIGHT[this.current_line].Y,t.width=h.HIGHLIGHT[this.current_line].WIDTH,t.height=h.HIGHLIGHT[this.current_line].HEIGHT,e=h.CURSOR[this.current_line].X,i=h.CURSOR[this.current_line].Y;else{let s=h.HIGHLIGHT.EFFECT.SHIFT;t.x=h.HIGHLIGHT.EFFECT.X,t.y=h.HIGHLIGHT.EFFECT.Y+s*this.current_line,t.width=h.HIGHLIGHT.EFFECT.WIDTH,t.height=h.HIGHLIGHT.EFFECT.HEIGHT;const n=h.CURSOR.EFFECT.SHIFT;e=h.CURSOR.EFFECT.X,i=h.CURSOR.EFFECT.Y+n*this.current_line}this.update_highlight(t);const s={type:n.CursorManager.CursorTweens.POINT,variant:n.PointVariants.NORMAL};this.data.cursor_manager.move_to({x:e,y:i},{animate:!1,tween_config:s})}on_change(){this.select_option();let t=null;if(0===this.current_col)t=0===this.battle_status_effects.length?h.MenuStatusMsgs.normal:h.MenuStatusMsgs[this.battle_status_effects[this.current_line].key];else if(t={line1:null,line2:null},t.line1=h.MenuDescriptions[this.current_line].line1,this.current_line===r.EXP){const e=this.selected_char.exp_curve[this.selected_char.level]-this.selected_char.current_exp;t.line2=h.MenuDescriptions[this.current_line].line2(e)}else t.line2=h.MenuDescriptions[this.current_line].line2;this.update_description(t.line1,t.line2)}on_left(){if(this.state===o.MainStatusStates.CHARACTERS)return;const t=this.battle_status_effects.length;this.current_col=(this.current_col+1)%2,0===this.current_col&&this.current_line>=t&&(this.current_line=0===t?0:t-1),this.on_change()}on_right(){if(this.state===o.MainStatusStates.CHARACTERS)return;const t=this.battle_status_effects.length;this.current_col=(this.current_col+1)%2,0===this.current_col&&this.current_line>=t&&(this.current_line=0===t?0:t-1),this.on_change()}on_up(){if(this.state===o.MainStatusStates.CHARACTERS)return;const t=this.battle_status_effects.length;if(0===this.current_col){if(t<=1)return;this.current_line=(this.current_line+t-1)%t}else this.current_line=(this.current_line+h.LINES-1)%h.LINES;this.on_change()}on_down(){if(this.state===o.MainStatusStates.CHARACTERS)return;const t=this.battle_status_effects.length;if(0===this.current_col){if(t<=1)return;this.current_line=(this.current_line+1)%t}else this.current_line=(this.current_line+1)%h.LINES;this.on_change()}initialize(){this.djinn_group.x=this.game.camera.x,this.djinn_group.y=this.game.camera.y+h.DJINN_GROUP_Y_OFFSET,this.state=this.manager.state;const t=["venus_star","mercury_star","mars_star","jupiter_star"];for(let e=0;e<t.length;e++){const i=h.ELEM.STARS.X+e*h.ELEM.STARS_SHIFT;let s=h.ELEM.STARS.Y;this.state===o.MainStatusStates.CHARACTERS&&(s+=h.ELEM.DOWN_SHIFT);const n=this.window.create_at_group(i,s,t[e],void 0,void 0,h.GROUP_KEY);this.state_sprites.push(n)}const e=["Djinn","Lv","Power","Resist"];for(let t=0;t<e.length;t++){const i=h.ELEM.LABEL.X;let s=h.ELEM.LABEL.Y+t*h.ELEM.LABEL_SHIFT;this.state===o.MainStatusStates.CHARACTERS&&(s+=h.ELEM.DOWN_SHIFT);const n=this.window.set_text_in_position(e[t],i,s,!1,!1,void 0,!1,h.GROUP_KEY);if(this.state_sprites.push(n.text,n.shadow),this.state===o.MainStatusStates.CHARACTERS&&0===t)break}for(let t=0;t<_.ordered_elements.length;t++){const e=this.get_djinn_counts(_.ordered_elements[t]),i=this.get_elemental_stats(_.ordered_elements[t]),s=h.ELEM.NUMBERS.END_X+t*h.ELEM.NUMBERS.X_SHIFT;let n=h.ELEM.NUMBERS.Y,a=e.set+"/"+e.total;this.state===o.MainStatusStates.CHARACTERS&&(n+=h.ELEM.DOWN_SHIFT,a=String(e.total));let r=this.window.set_text_in_position(a,s,n,!0,!1,void 0,!1,h.GROUP_KEY);this.state_sprites.push(r.text,r.shadow),this.state!==o.MainStatusStates.CHARACTERS&&(n+=h.ELEM.NUMBERS.Y_SHIFT,a=String(i.level),r=this.window.set_text_in_position(a,s,n,!0,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(r.text,r.shadow),n+=h.ELEM.NUMBERS.Y_SHIFT,a=String(i.power),r=this.window.set_text_in_position(a,s,n,!0,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(r.text,r.shadow),n+=h.ELEM.NUMBERS.Y_SHIFT,a=String(i.resistance),r=this.window.set_text_in_position(a,s,n,!0,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(r.text,r.shadow));for(let t=0;t<_.ordered_elements.length;t++){const e=_.ordered_elements[t],i=h.ELEM.DJINN.CENTER_X+t*h.ELEM.DJINN.X_SHIFT;let s=h.ELEM.DJINN.Y;this.state===o.MainStatusStates.CHARACTERS&&(s+=h.ELEM.DOWN_SHIFT);const n=this.get_djinni_sprite(e,this.djinn_group,{x:i,y:s});this.state_sprites.push(n)}let c=this.window.set_text_in_position("Exp",h.EXP.LABEL_X,h.EXP.LABEL_Y,!1,!1,void 0,!1,h.GROUP_KEY);this.state_sprites.push(c.text,c.shadow),c=this.window.set_text_in_position(this.selected_char.current_exp,h.EXP.VALUE_END_X,h.EXP.VALUE_Y,!0,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(c.text,c.shadow),c=this.window.set_text_in_position("HP",h.HP.LABEL_X,h.HP.LABEL_Y,!1,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(c.text,c.shadow),c=this.window.set_text_in_position(this.selected_char.max_hp,h.HP.MAX_END_X,h.HP.MAX_Y,!0,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(c.text,c.shadow),c=this.window.set_text_in_position(this.selected_char.current_hp+"/",h.HP.CURR_END_X,h.HP.CURR_Y,!0,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(c.text,c.shadow),c=this.window.set_text_in_position("PP",h.PP.LABEL_X,h.PP.LABEL_Y,!1,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(c.text,c.shadow),c=this.window.set_text_in_position(this.selected_char.max_pp,h.PP.MAX_END_X,h.PP.MAX_Y,!0,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(c.text,c.shadow),c=this.window.set_text_in_position(this.selected_char.current_pp+"/",h.PP.CURR_END_X,h.PP.CURR_Y,!0,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(c.text,c.shadow);const l=h.STATS.LINE_SHIFT;c=this.window.set_text_in_position("Attack",h.STATS.LABEL_X,h.STATS.LABEL_Y,!1,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(c.text,c.shadow),c=this.window.set_text_in_position(this.selected_char.atk,h.STATS.VALUE_END_X,h.STATS.VALUE_Y,!0,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(c.text,c.shadow),c=this.window.set_text_in_position("Defense",h.STATS.LABEL_X,h.STATS.LABEL_Y+l,!1,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(c.text,c.shadow),c=this.window.set_text_in_position(this.selected_char.def,h.STATS.VALUE_END_X,h.STATS.VALUE_Y+l,!0,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(c.text,c.shadow),c=this.window.set_text_in_position("Agility",h.STATS.LABEL_X,h.STATS.LABEL_Y+2*l,!1,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(c.text,c.shadow),c=this.window.set_text_in_position(this.selected_char.agi,h.STATS.VALUE_END_X,h.STATS.VALUE_Y+2*l,!0,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(c.text,c.shadow),c=this.window.set_text_in_position("Luck",h.STATS.LABEL_X,h.STATS.LABEL_Y+3*l,!1,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(c.text,c.shadow),c=this.window.set_text_in_position(this.selected_char.luk,h.STATS.VALUE_END_X,h.STATS.VALUE_Y+3*l,!0,!1,void 0,!1,h.GROUP_KEY),this.state_sprites.push(c.text,c.shadow)}this.init_status_effects()}init_status_effects(){if(0===this.battle_status_effects.length){let t=this.window.set_text_in_position("Normal",h.NORMAL_STATUS.X,h.NORMAL_STATUS.Y,!1,!1,void 0,!1,h.GROUP_KEY);this.state_sprites.push(t.text,t.shadow)}else for(let t=0;t<this.battle_status_effects.length;t++){const e=this.battle_status_effects[t];let i=h.EFFECTS.NAME_X,s=h.EFFECTS.NAME_Y+t*h.EFFECTS.SHIFT,n=this.window.set_text_in_position(h.EFFECT_LABELS[e.key],i,s,!1,!1,void 0,!1,h.GROUP_KEY);this.state_sprites.push(n.text,n.shadow),i=h.EFFECTS.ICON_X,s=h.EFFECTS.ICON_Y+t*h.EFFECTS.SHIFT;const a=this.window.create_at_group(i,s,"battle_effect_icons",void 0,e.key,h.GROUP_KEY);this.state_sprites.push(a)}}}e.MainStatusStatistics=h,h.MenuStatusMsgs={[a.permanent_status.DOWNED]:{line1:"You are down. Revive at a Sanctum",line2:"or with the Water of Life."},[a.permanent_status.POISON]:{line1:"You're afflicted by poison.",line2:"Cure with Antidote or Cure Poison."},[a.permanent_status.VENOM]:{line1:"You're afflicted by venom.",line2:"Cure with Antidote or Cure Poison."},[a.permanent_status.EQUIP_CURSE]:{line1:"A cursed item immoblizes you.",line2:"Remove it at a Sanctum."},[a.permanent_status.HAUNT]:{line1:"You receve damage from spirits.",line2:"Exorcise the spirits at a Sanctum."},normal:{line1:"Your status is normal.",line2:""}},h.MenuDescriptions={[r.NAME]:{line1:"Your name and level. Experience",line2:"points increase your level."},[r.EXP]:{line1:"Experience points. You need",line2:t=>t+" more to reach the next level."},[r.HP]:{line1:"Your current and max Hit Points.",line2:"At zero HP you cannot fight."},[r.PP]:{line1:"Your Psynergy Points. They",line2:"recover as you travel."},[r.DJINN]:{line1:"Your Djinn. This also shows",line2:"which ones are set."},[r.ELEM_LEVELS]:{line1:"Elemental Levels indicate the skill",line2:"level of the elemental attribute."},[r.ELEM_POWER]:{line1:"Power reflects the damage you",line2:"can do with each element."},[r.ELEM_RESIST]:{line1:"Resist reflects your defensive",line2:"strength against each element."}},h.EFFECT_LABELS={[a.permanent_status.DOWNED]:"Downed",[a.permanent_status.EQUIP_CURSE]:"Cursed",[a.permanent_status.HAUNT]:"Haunt",[a.permanent_status.POISON]:"Poison",[a.permanent_status.VENOM]:"Venom"},h.CURSOR={[r.NAME]:{X:34,Y:54},[r.EXP]:{X:34,Y:62},[r.HP]:{X:34,Y:70},[r.PP]:{X:34,Y:78},[r.DJINN]:{X:58,Y:118},[r.ELEM_LEVELS]:{X:58,Y:126},[r.ELEM_POWER]:{X:58,Y:134},[r.ELEM_RESIST]:{X:58,Y:142},EFFECT:{X:0,Y:94,SHIFT:16}},h.HIGHLIGHT={[r.NAME]:{X:48,Y:8,WIDTH:104,HEIGHT:8},[r.EXP]:{X:48,Y:16,WIDTH:104,HEIGHT:8},[r.HP]:{X:48,Y:24,WIDTH:104,HEIGHT:8},[r.PP]:{X:48,Y:32,WIDTH:104,HEIGHT:8},[r.DJINN]:{X:72,Y:72,WIDTH:160,HEIGHT:8},[r.ELEM_LEVELS]:{X:72,Y:80,WIDTH:160,HEIGHT:8},[r.ELEM_POWER]:{X:72,Y:88,WIDTH:160,HEIGHT:8},[r.ELEM_RESIST]:{X:72,Y:96,WIDTH:160,HEIGHT:8},EFFECT:{X:8,Y:48,WIDTH:40,HEIGHT:8,SHIFT:16}},h.ELEM={STARS:{X:128,Y:65},STARS_SHIFT:32,LABEL:{X:72,Y:72},LABEL_SHIFT:8,NUMBERS:{END_X:133,Y:72,X_SHIFT:32,Y_SHIFT:8},DJINN:{CENTER_X:130,Y:66,X_SHIFT:32},DOWN_SHIFT:24},h.EXP={LABEL_X:48,LABEL_Y:16,VALUE_END_X:149,VALUE_Y:16},h.NORMAL_STATUS={X:8,Y:48},h.STATS={LABEL_X:160,LABEL_Y:8,VALUE_END_X:229,VALUE_Y:8,LINE_SHIFT:8},h.HP={LABEL_X:48,LABEL_Y:24,MAX_END_X:149,MAX_Y:24,CURR_END_X:117,CURR_Y:24},h.PP={LABEL_X:48,LABEL_Y:32,MAX_END_X:149,MAX_Y:32,CURR_END_X:117,CURR_Y:32},h.EFFECTS={ICON_X:9,ICON_Y:48,NAME_X:24,NAME_Y:48,SHIFT:16},h.LINES=8,h.DJINN_GROUP_Y_OFFSET=40},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MainStatusDjinn=void 0;const s=i(10),n=i(0),a=i(3);class _ extends s.StatusComponent{constructor(t,e,i,s,n){super(t,e,i,s,n),this.djinn_group=this.game.add.group()}select_option(){}on_change(){}on_left(){this.djinn_pages.length<=1||(this.current_page=(this.current_page+this.djinn_pages.length-1)%this.djinn_pages.length,this.load_page())}on_right(){this.djinn_pages.length<=1||(this.current_page=(this.current_page+1)%this.djinn_pages.length,this.load_page())}on_up(){}on_down(){}initialize(){this.djinn_group.x=this.game.camera.x,this.djinn_group.y=this.game.camera.y,this.make_pages(),this.window.page_indicator.initialize(this.djinn_pages.length,this.current_page),this.current_page=0,this.load_page()}load_page(){this.clear(),this.window.page_indicator.select_page(this.current_col);const t=this.djinn_pages[this.current_page];for(let e=0;e<n.ordered_elements.length;e++){const i=n.ordered_elements[e],s=t[n.ordered_elements[e]];for(let t=0;t<s.length;t++){let i=_.STARS.X+e*_.STARS.X_SHIFT,a=_.STARS.Y+t*_.STARS.Y_SHIFT;const o=this.window.create_at_group(i,a,n.ordered_elements[e]+"_star",void 0,void 0,_.GROUP_KEY);this.state_sprites.push(o),i=_.NAMES.X+e*_.NAMES.X_SHIFT,a=_.NAMES.Y+t*_.NAMES.Y_SHIFT;const r=this.window.set_text_in_position(s[t].name,i,a,!1,!1,void 0,!1,_.GROUP_KEY);this.state_sprites.push(r.text,r.shadow)}const a=_.SPRITES.CENTER_X+e*_.SPRITES.SHIFT,o=_.SPRITES.Y,r=this.get_djinni_sprite(i,this.djinn_group,{x:a,y:o});this.state_sprites.push(r)}const e=_.SEPARATOR.X,i=_.SEPARATOR.Y,s=_.SEPARATOR.WIDTH;this.window.draw_separator(e,i,e+s,i,!1);const a=this.window.set_text_in_position("Current Djinn",_.CURRENT_DJINN.X,_.CURRENT_DJINN.Y,!1,!1,void 0,!1,_.GROUP_KEY,!0);this.state_sprites.push(a.text,a.shadow)}make_pages(){let t=this.get_djinn_by_element();const e=_.DJINN_PER_LINE,i=a.maxBy(Object.values(t),t=>t.length).length;let s=i/e|0;i%e&&s++,this.djinn_pages=[];for(let i=0;i<s;i++){const s=n.ordered_elements.reduce((s,n)=>(s[n]=t[n].slice(e*i,e*(i+1)-1),s),{});this.djinn_pages.push(s)}}get_djinn_by_element(){return n.ordered_elements.reduce((t,e)=>{const i=this.data.info.party_data.members.map(t=>t[e+"_djinni"]).flat();return t[e]=a.sortBy(i.map(t=>this.data.info.djinni_list[t]),t=>t.index),t},{})}}e.MainStatusDjinn=_,_.STARS={X:17,Y:17,X_SHIFT:56,Y_SHIFT:8},_.NAMES={X:24,Y:16,X_SHIFT:56,Y_SHIFT:8},_.SPRITES={CENTER_X:32,Y:57,SHIFT:56},_.SEPARATOR={X:4,Y:91,WIDTH:232},_.CURRENT_DJINN={X:14,Y:100},_.DJINN_PER_LINE=9},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MainStatusPsynergy=void 0;const s=i(10),n=i(4);class a extends s.StatusComponent{constructor(t,e,i,s,n){super(t,e,i,s,n)}select_option(){const t={x:a.HIGHLIGHT.X,y:a.HIGHLIGHT.Y+a.SHIFT*this.current_line,width:a.HIGHLIGHT.WIDTH,height:a.HIGHLIGHT.HEIGHT};this.update_highlight(t);const e=a.CURSOR.X,i=a.CURSOR.Y+a.SHIFT*this.current_line,s={type:n.CursorManager.CursorTweens.POINT,variant:n.PointVariants.NORMAL};this.data.cursor_manager.move_to({x:e,y:i},{animate:!1,tween_config:s}),this.window.page_indicator.select_page(this.current_col)}on_change(){this.ability_pages[this.current_col][this.current_line]||(this.current_line=this.ability_pages[this.current_col].length-1);const t=this.ability_pages[this.current_col][this.current_line];this.select_option(),this.update_description(t.description);let e="Can be used in ";t.is_field_psynergy||t.effects_outside_battle?e+="Towns":e+="Battle",this.window.update_text(e,this.use_text)}on_left(){if(this.ability_pages.length<=1)return;const t=this.ability_pages.length;this.current_col=(this.current_col+t-1)%t,this.ability_pages[this.current_col][this.current_line]||(this.current_line=this.ability_pages[this.current_col].length-1),this.reset()}on_right(){if(this.ability_pages.length<=1)return;const t=this.ability_pages.length;this.current_col=(this.current_col+1)%t,this.ability_pages[this.current_col][this.current_line]||(this.current_line=this.ability_pages[this.current_col].length-1),this.reset()}on_up(){if(this.ability_pages[this.current_col].length<=1)return;const t=this.ability_pages[this.current_col].length;this.current_line=(this.current_line+t-1)%t,this.on_change()}on_down(){if(this.ability_pages[this.current_col].length<=1)return;const t=this.ability_pages[this.current_col].length;this.current_line=(this.current_line+1)%t,this.on_change()}initialize(){this.update_abilities(),this.ability_pages[this.current_col]||(this.current_col=this.ability_pages.length-1);this.ability_pages[this.current_col].forEach((t,e)=>{const i=t.key_name,s=t.name,n=t.pp_cost,_=t.element+"_star",o=String(t.range);let r=a.PSYNERGY.ICON_X,h=a.PSYNERGY.ICON_Y+e*a.SHIFT;const c=this.window.create_at_group(r,h,"abilities_icons",void 0,i,a.GROUP_KEY);this.state_sprites.push(c),r=a.PSYNERGY.NAME_X,h=a.PSYNERGY.NAME_Y+e*a.SHIFT;const l=this.window.set_text_in_position(s,r,h,!1,!1,void 0,!1,a.GROUP_KEY);this.state_sprites.push(l.text,l.shadow),r=a.PSYNERGY.PP_VALUE_END_X,h=a.PSYNERGY.PP_VALUE_Y+e*a.SHIFT;const d=this.window.set_text_in_position(n,r,h,!0,!1,void 0,!1,a.GROUP_KEY);this.state_sprites.push(d.text,d.shadow),r=a.PSYNERGY.STAR_X,h=a.PSYNERGY.STAR_Y+e*a.SHIFT;const u=this.window.create_at_group(r,h,_,void 0,void 0,a.GROUP_KEY);this.state_sprites.push(u),r=a.PSYNERGY.RANGE_CENTER_X,h=a.PSYNERGY.RANGE_Y+e*a.SHIFT;const p=this.window.create_at_group(r,h,"ranges",void 0,o,a.GROUP_KEY);p.x-=p.width/2|0,this.state_sprites.push(p)});let t=a.PSYNERGY.PP_LABEL_X,e=a.PSYNERGY.PP_LABEL_Y;const i=this.window.set_text_in_position("PP",t,e,!1,!1,void 0,!1,a.GROUP_KEY);this.state_sprites.push(i.text,i.shadow),t=a.USE_TEXT.X,e=a.USE_TEXT.Y,this.use_text=this.window.set_text_in_position("",t,e,!1,!1,void 0,!1,a.GROUP_KEY),this.state_sprites.push(this.use_text.text,this.use_text.shadow),this.window.page_indicator.initialize(this.ability_pages.length,this.current_line),this.select_option()}update_abilities(){const t=this.selected_char.abilities,e=t.filter(t=>{const e=this.data.info.abilities_list[t];return!e||!(e.is_field_psynergy||e.effects_outside_battle)}),i=t.filter(t=>{const e=this.data.info.abilities_list[t];return!!e&&(e.is_field_psynergy||e.effects_outside_battle)}).concat(e);let s=[];this.ability_pages=[];let n=0;i.forEach(t=>{n===a.MAX_LINES&&(this.ability_pages.push(s),s=[],n=0),this.data.info.abilities_list[t]?(s.push(this.data.info.abilities_list[t]),n++):console.warn(`Ability "${t}" does not exist in the database.`)}),s.length>0&&this.ability_pages.push(s)}}e.MainStatusPsynergy=a,a.CURSOR={X:65,Y:66},a.HIGHLIGHT={X:80,Y:24,WIDTH:152,HEIGHT:8},a.PSYNERGY={ICON_X:81,ICON_Y:19,NAME_X:96,NAME_Y:24,PP_LABEL_X:184,PP_LABEL_Y:8,PP_VALUE_END_X:194,PP_VALUE_Y:24,STAR_X:201,STAR_Y:25,RANGE_CENTER_X:220,RANGE_Y:24},a.USE_TEXT={X:8,Y:104},a.MAX_LINES=5,a.SHIFT=16},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MainStatusItems=void 0;const s=i(10),n=i(4),a=i(12);class _ extends s.StatusComponent{constructor(t,e,i,s,n){super(t,e,i,s,n)}select_option(){const t={x:_.HIGHLIGHT.X,y:_.HIGHLIGHT.Y+_.SHIFT*this.current_line,width:_.HIGHLIGHT.WIDTH,height:_.HIGHLIGHT.HEIGHT};this.update_highlight(t);const e=_.CURSOR.X,i=_.CURSOR.Y+_.SHIFT*this.current_line,s={type:n.CursorManager.CursorTweens.POINT,variant:n.PointVariants.NORMAL};this.data.cursor_manager.move_to({x:e,y:i},{animate:!1,tween_config:s}),this.window.page_indicator.select_page(this.current_col)}on_change(){this.char_items[this.current_col][this.current_line]||(this.current_line=this.char_items[this.current_col].length-1);const t=this.char_items[this.current_col][this.current_line];this.select_option();const e=a.item_equip_slot[this.data.info.items_list[t.key_name].type],i={x:0,y:0,width:0,height:0};if([a.equip_slots.WEAPON,a.equip_slots.BODY,a.equip_slots.CHEST,a.equip_slots.HEAD].includes(e)&&t.equipped){const t=_.EQ_HIGHLIGHT.SHIFT*_.EQ_HIGHLIGHT.POS[e];i.x=_.EQ_HIGHLIGHT.X,i.y=_.EQ_HIGHLIGHT.Y+t,i.width=_.EQ_HIGHLIGHT.WIDTH,i.height=_.EQ_HIGHLIGHT.HEIGHT}this.manager.update_eq_highlight(i),this.update_description(this.data.info.items_list[t.key_name].description)}on_left(){if(this.char_items.length<=1)return;const t=this.char_items.length;this.current_col=(this.current_col+t-1)%t,this.char_items[this.current_col][this.current_line]||(this.current_line=this.char_items[this.current_col].length-1),this.reset()}on_right(){if(this.char_items.length<=1)return;const t=this.char_items.length;this.current_col=(this.current_col+1)%t,this.char_items[this.current_col][this.current_line]||(this.current_line=this.char_items[this.current_col].length-1),this.reset()}on_up(){this.char_items[this.current_col].length<=1||(0===this.current_line?(0===this.current_col?(this.current_col=this.char_items.length-1,this.current_line=this.char_items[this.char_items.length-1].length-1):(this.current_col=this.current_col-1,this.current_line=this.char_items[this.current_col].length-1),this.reset()):(this.current_line--,this.on_change()))}on_down(){this.char_items[this.current_col].length<=1||(this.current_line+1===this.char_items[this.current_col].length?(this.current_col===this.char_items.length-1?(this.current_col=0,this.current_line=0):(this.current_col=this.current_col+1,this.current_line=0),this.reset()):(this.current_line++,this.on_change()))}initialize(){this.update_items(),this.char_items[this.current_col]||(this.current_col=this.char_items.length-1);this.char_items[this.current_col].forEach((t,e)=>{const i=t.key_name,s=this.data.info.items_list[t.key_name].name,n=t.broken,a=t.equipped,o=t.quantity<=1?void 0:t.quantity;let r=_.ITEM.ICON_X,h=_.ITEM.ICON_Y+e*_.SHIFT;const c=this.window.make_item_obj(i,{x:r,y:h},{broken:n,equipped:a,quantity:o,internal_group:_.GROUP_KEY});for(let t in c)c[t]&&this.state_sprites.push(c[t]);r=_.ITEM.NAME_X,h=_.ITEM.NAME_Y+e*_.SHIFT;const l=this.window.set_text_in_position(s,r,h,!1,!1,void 0,!1,_.GROUP_KEY);this.state_sprites.push(l.text,l.shadow)});let t=this.window.set_text_in_position("Attack",_.STATS.LABEL_X,_.STATS.LABEL_Y,!1,!1,void 0,!1,_.GROUP_KEY);this.state_sprites.push(t.text,t.shadow),t=this.window.set_text_in_position(this.selected_char.atk,_.STATS.VALUE_END_X,_.STATS.VALUE_Y,!0,!1,void 0,!1,_.GROUP_KEY),this.state_sprites.push(t.text,t.shadow),t=this.window.set_text_in_position("Defense",_.STATS.LABEL_X,_.STATS.LABEL_Y+_.STATS.LINE_SHIFT,!1,!1,void 0,!1,_.GROUP_KEY),this.state_sprites.push(t.text,t.shadow),t=this.window.set_text_in_position(this.selected_char.def,_.STATS.VALUE_END_X,_.STATS.VALUE_Y+_.STATS.LINE_SHIFT,!0,!1,void 0,!1,_.GROUP_KEY),this.state_sprites.push(t.text,t.shadow),this.window.page_indicator.initialize(this.char_items.length,this.current_line),this.select_option()}update_items(){const t=[...this.selected_char.items];this.char_items=[];let e=[],i=0;t.forEach(t=>{i===_.MAX_LINES&&(this.char_items.push(e),e=[],i=0),e.push(t),i++}),e.length>0&&this.char_items.push(e)}}e.MainStatusItems=_,_.CURSOR={X:106,Y:58},_.HIGHLIGHT={X:120,Y:16,WIDTH:112,HEIGHT:8},_.ITEM={ICON_X:121,ICON_Y:11,NAME_X:144,NAME_Y:16},_.STATS={LABEL_X:40,LABEL_Y:24,VALUE_END_X:109,VALUE_Y:24,LINE_SHIFT:8},_.EQ_HIGHLIGHT={X:16,Y:16,WIDTH:96,HEIGHT:8,SHIFT:16,POS:{[a.equip_slots.WEAPON]:0,[a.equip_slots.HEAD]:1,[a.equip_slots.CHEST]:2,[a.equip_slots.BODY]:3}},_.MAX_LINES=5,_.SHIFT=16},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ShopMenu=void 0;const s=i(110),n=i(111),a=i(112),_=i(0),o=i(113),r=i(114),h=i(115),c=i(116),l=i(117),d=i(2),u=i(15),p=i(18),m=i(3);e.ShopMenu=class{constructor(t,e){this.game=t,this.data=e,this.shop_key=null,this.close_callback=null,this.items_db=this.data.info.items_list,this.shops_db=m.mapKeys(this.data.dbs.shops_db,t=>t.key_name),this.shopkeep_dialog_db=this.data.dbs.shopkeep_dialog_db,this.normal_item_list={},this.artifact_list={},this.buttons_keys=["buy","sell","artifacts","repair"],this.windows_mode="buy",this.current_index=0,this.horizontal_menu=new p.HorizontalMenu(this.game,this.data,this.buttons_keys,this.buttons_keys.map(t=>_.capitalize(t)),{on_press:this.button_press.bind(this),on_cancel:this.close_menu.bind(this)}),this.npc_dialog=new s.ShopkeepDialog(this.game,this.data),this.yesno_action=new c.YesNoMenu(this.game,this.data),this.inv_win=new o.InventoryWindow(this.game,this.data,this.on_inv_win_change.bind(this)),this.buy_select=new r.BuySelectMenu(this.game,this.data,this.on_buy_select_change.bind(this)),this.eq_compare=new h.EquipCompare(this.game,this.data),this.quant_win=new l.ShopItemQuantityWindow(this.game,this.data),this.char_display=new u.CharsMenu(this.game,this.data,this.on_char_display_change.bind(this)),this.item_price_win=new d.Window(this.game,0,64,116,28),this.your_coins_win=new d.Window(this.game,144,56,92,28),this.item_desc_win=new d.Window(this.game,0,136,236,20),this.buy_menu=new n.BuyArtifactsMenu(this.game,this.data,this),this.sell_menu=new a.SellRepairMenu(this.game,this.data,this),this.your_coins_label=this.your_coins_win.set_text_in_position("Your Coins: ",8,8),this.your_coins_text=this.your_coins_win.set_text_in_position("",85,16,!0),this.item_name_text=this.item_price_win.set_text_in_position("",8,8),this.item_price_label=this.item_price_win.set_text_in_position("Price",8,16),this.item_price_val_text=this.item_price_win.set_text_in_position("",77,16,!0),this.item_price_coins_label=this.item_price_win.set_text_in_position("Coins",80,16),this.item_desc_text=this.item_desc_win.set_text_in_position("",8,8)}on_submenu_close(){this.open_horizontal_menu()}on_char_display_change(t){this.eq_compare.is_open&&this.eq_compare.change_character(t),this.inv_win.is_open&&this.inv_win.change_character(t)}on_inv_win_change(t,e){if(this.item_price_win.open&&this.sell_menu.active){let i=this.sell_menu.is_repair_menu,s=this.inv_win.item_grid[t][e];if(s){let t=this.data.info.items_list[s.key_name].price,e=this.data.info.items_list[s.key_name].important_item,n=t;n=i?t*(1/4)|0:t*(s.broken?.5:3/4)|0,this.update_item_info(s.key_name,n,i?!s.broken:e,!i||s.broken,e)}}}on_buy_select_change(t){this.update_item_info(t)}set_item_lists(){let t=[],e=[],i=this.shops_db[this.shop_key].item_list;for(let s=0;s<i.length;s++){let n=this.items_db[i[s].key_name];0!==i[s].quantity&&(!0===n.rare_item?e.push(i[s]):t.push(i[s]))}this.normal_item_list=m.mapKeys(t,t=>t.key_name),this.artifact_list=m.mapKeys(e,t=>t.key_name)}update_your_coins(){this.your_coins_win.update_text(String(this.data.info.party_data.coins),this.your_coins_text)}update_item_info(t,e,i=!1,s=!1,n=!1){let a=this.data.info.items_list[t];this.item_desc_win.update_text(a.description,this.item_desc_text),this.item_price_win.update_text(a.name,this.item_name_text);let _=i?"":"Coins";this.item_price_win.update_text(_,this.item_price_coins_label);let o="Price";i&&!s?o="It's not broken.":i&&n&&(o="We can't buy that."),this.item_price_win.update_text(o,this.item_price_label);let r=e||a.price,h=i?"":r;this.item_price_win.update_text(h,this.item_price_val_text)}alternate_window_pos(t){this.windows_mode!==t&&("buy"===t?(this.item_price_win.update_position({x:0,y:64}),this.item_desc_win.update_position({x:0,y:136}),this.your_coins_win.update_position({x:144,y:56}),this.windows_mode="buy"):(this.item_price_win.update_position({x:120,y:64}),this.item_desc_win.update_position({x:0,y:40}),this.your_coins_win.update_position({x:0,y:72}),this.windows_mode="sell"))}button_press(){this.horizontal_menu.close(()=>{switch(this.current_index=this.horizontal_menu.selected_button_index,this.buttons_keys[this.horizontal_menu.selected_button_index]){case"buy":this.alternate_window_pos("buy"),this.buy_menu.open_menu(!1,this.on_submenu_close.bind(this));break;case"sell":this.alternate_window_pos("sell"),this.sell_menu.open_menu(!1,this.on_submenu_close.bind(this));break;case"artifacts":this.alternate_window_pos("buy"),this.buy_menu.open_menu(!0,this.on_submenu_close.bind(this));break;case"repair":this.alternate_window_pos("sell"),this.sell_menu.open_menu(!0,this.on_submenu_close.bind(this))}this.npc_dialog.is_active||this.npc_dialog.close_dialog()})}update_items(){let t=this.buy_menu.active?this.buy_menu:this.sell_menu.active?this.sell_menu:null;this.set_item_lists(),t===this.buy_menu&&(this.buy_menu.item_list=this.buy_menu.is_artifacts_menu?this.artifact_list:this.normal_item_list,this.buy_select.items=this.buy_menu.item_list)}update_position(){this.npc_dialog.update_position(),this.horizontal_menu.update_position()}open_horizontal_menu(t="cancel_option"){this.npc_dialog.is_active?this.npc_dialog.update_dialog(t):this.npc_dialog.open(this.shop_key,this.data.info.shops_list[this.shop_key].avatar_key,this.data.info.shops_list[this.shop_key].dialog_key),this.horizontal_menu.open(void 0,this.current_index)}open_menu(t,e){this.shop_key=t,this.close_callback=e,this.data.hero.in_action()&&(this.data.hero.stop_char(),this.data.hero.update_shadow()),this.set_item_lists(),this.data.shop_open=!0,this.open_horizontal_menu()}end_dialog(){this.shop_key=null,this.npc_dialog.close(),this.data.shop_open=!1,this.data.control_manager.reset(),this.close_callback&&this.close_callback(),this.close_callback=null}close_menu(){this.horizontal_menu.menu_active&&(this.horizontal_menu.close(),this.data.cursor_manager.hide(),this.npc_dialog.update_dialog("goodbye"),this.normal_item_list={},this.artifact_list={},this.current_index=0,this.data.control_manager.simple_input(this.end_dialog.bind(this)))}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ShopkeepDialog=void 0;const s=i(23),n=i(3);e.ShopkeepDialog=class{constructor(t,e){this.game=t,this.data=e,this.shop_key=null,this.avatar_key=null,this.dialog_key=null,this.dialog_manager=new s.DialogManager(this.game,this.data),this.messages=null,this.current_message=null,this.is_active=!1}open(t,e,i){this.shop_key=t,this.avatar_key=e,this.dialog_key=i,this.messages=n.mapKeys(this.data.shop_menu.shopkeep_dialog_db[this.dialog_key].messages,t=>t.key),this.update_dialog("welcome")}update_position(){this.dialog_manager.update_position()}replace_text(t,e,i,s){do{t.includes("${HERO}")&&(t=t.replace("${HERO}",e)),t.includes("${ITEM}")&&(t=t.replace("${ITEM}",i)),t.includes("${PRICE}")&&(t=t.replace("${PRICE}",s))}while(t.includes("${HERO}")||t.includes("${ITEM}")||t.includes("${PRICE}"));return t}get_message(t){return this.messages[t].text}update_dialog(t,e=!1,i=!0,s){this.current_message=i?this.messages[t].text:t,this.is_active=!0,this.dialog_manager.quick_next(this.current_message,s,this.avatar_key,void 0,{x:40,y:0},{x:0,y:0},e)}close_dialog(t,e=!0){this.is_active=!1,this.dialog_manager.kill_dialog(t,e)}close(t){this.close_dialog(t,!1),this.shop_key=null,this.avatar_key=null,this.dialog_key=null,this.messages=null,this.current_message=null}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BuyArtifactsMenu=e.WindowNames=void 0;const s=i(8),n=i(15),a=i(2);e.WindowNames={ITEM_DESC_WIN:"item_desc_win",ITEM_PRICE_WIN:"item_price_win",YOUR_COINS_WIN:"your_coins_win",CHAR_DISPLAY:"char_display",INV_WIN:"inv_win",YESNO_ACTION:"yesno_action",QUANT_WIN:"quant_win",BUY_SELECT:"buy_select",EQ_COMPARE:"eq_compare"};e.BuyArtifactsMenu=class{constructor(t,e,i){this.game=t,this.data=e,this.parent=i,this.close_callback=null,this.item_desc_win=this.parent.item_desc_win,this.your_coins_win=this.parent.your_coins_win,this.item_price_win=this.parent.item_price_win,this.char_display=this.parent.char_display,this.inv_win=this.parent.inv_win,this.quant_win=this.parent.quant_win,this.buy_select=this.parent.buy_select,this.eq_compare=this.parent.eq_compare,this.yesno_action=this.parent.yesno_action,this.npc_dialog=this.parent.npc_dialog,this.is_artifacts_menu=null,this.active=!1,this.item_list={},this.selected_item=null,this.buy_select_pos={page:0,index:0,is_last:!1,should_change:!1},this.old_item=null,this.selected_character=null,this.selected_char_index=0}update_game_ticket_step(){let t=this.data.info.party_data.game_tickets.tickets_bought;return t>=1&&t<6?300:t>=6&&t<11?500:t>=11&&t<16?1e3:t>=16&&t<21?2e3:t>=21&&t<26?4e3:t>=26?8e3:void 0}check_game_ticket(){let t=!1;this.data.info.party_data.game_tickets.coins_remaining-=this.data.info.items_list[this.selected_item.key_name].price,this.data.info.party_data.game_tickets.coins_remaining<=0&&(t=!0,this.data.info.party_data.game_tickets.tickets_bought+=1,this.data.info.party_data.game_tickets.coins_remaining+=this.update_game_ticket_step()),t?(this.npc_dialog.update_dialog("game_ticket",!0),this.data.control_manager.simple_input(this.open_inventory_view.bind(this,!0))):this.open_buy_select()}sell_old_equip(t,e){let i=t.rare_item?"after_sell_artifact":"after_sell_normal";if(this.npc_dialog.update_dialog(i,!0),t.rare_item){let e=this.data.info.shops_list[this.parent.shop_key].item_list,i=!1;for(let s=0;s<e.length;s++)e[s].key_name===t.key_name&&(i=!0,this.data.info.shops_list[this.parent.shop_key].item_list[s].quantity+=1);i||this.data.info.shops_list[this.parent.shop_key].item_list.push({key_name:t.key_name,quantity:1}),this.buy_select_pos.should_change&&(this.buy_select_pos.should_change=!1)}for(let e=0;e<this.selected_character.items.length;e++)this.selected_character.items[e].key_name===t.key_name&&this.selected_character.items.splice(e,1);let s=e.broken?.5*this.old_item.price:this.old_item.price*(3/4);this.data.info.party_data.coins+=0|s,this.parent.update_your_coins(),this.parent.update_items(),this.data.control_manager.simple_input(this.check_game_ticket.bind(this))}equip_new_item(){let t=this.data.info.items_list[this.selected_item.key_name].type,e=this.selected_character.equip_slots;this.npc_dialog.update_dialog("equip_compliment",!0),this.old_item=null;let i=null,n=["WEAPONS","ARMOR","CHEST_PROTECTOR","HEAD_PROTECTOR","RING","LEG_PROTECTOR","UNDERWEAR"],a=["weapon","body","chest","head","ring","boots","underwear"];for(let _=0;_<n.length;_++)t===s.item_types[n[_]]&&e[a[_]]&&(i=e[a[_]]);if(i&&(this.old_item=this.data.info.items_list[i.key_name]),this.old_item)for(let t=0;t<this.selected_character.items.length;t++){let e=this.selected_character.items[t];if(e.key_name===this.old_item.key_name&&e.equipped){this.selected_character.unequip_item(t);break}}for(let t=this.selected_character.items.length-1;t>0;t--){if(this.selected_character.items[t].key_name===this.selected_item.key_name){this.selected_character.equip_item(t);break}}if(this.old_item){let t=()=>{let t=i.broken?.5*this.old_item.price:this.old_item.price*(3/4),e=this.npc_dialog.get_message("sell_current");e=this.npc_dialog.replace_text(e,void 0,this.old_item.name,String(0|t)),this.npc_dialog.update_dialog(e,!1,!1),this.yesno_action.open({yes:this.sell_old_equip.bind(this,this.old_item,i),no:()=>{let t=this.old_item.rare_item?"decline_sell_artifact":"decline_sell_normal";this.npc_dialog.update_dialog(t,!0),this.data.control_manager.simple_input(this.check_game_ticket.bind(this))}},{x:56,y:40})};this.data.control_manager.simple_input(t.bind(this))}else this.data.control_manager.simple_input(this.check_game_ticket.bind(this))}on_purchase_success(t=!1,e=!1){let i=1,s=e?"game_ticket":this.selected_item.key_name,n=this.data.info.items_list[s];if(this.quant_win.is_open&&!e&&(i=this.quant_win.chosen_quantity),this.data.info.party_data.coins-this.data.info.items_list[this.selected_item.key_name].price*i<0&&!e){this.npc_dialog.update_dialog("not_enough_coins",!0),this.data.cursor_manager.hide();let t=()=>{this.data.control_manager.simple_input(this.open_buy_select.bind(this))};this.quant_win.is_open?this.quant_win.close(t):t()}else{this.npc_dialog.update_dialog("after_buy",!0),this.data.cursor_manager.hide();let s=()=>{e||(this.data.info.party_data.coins-=this.data.info.items_list[this.selected_item.key_name].price*i);let s=!1;for(let t=0;t<this.selected_character.items.length;t++){this.selected_character.items[t].key_name===n.key_name&&this.data.info.items_list[n.key_name].carry_up_to_30&&(s=!0,this.selected_character.items[t].quantity+=i)}let a=this.selected_character.items.length;if(s||(n.equipable?this.selected_character.items.push({key_name:n.key_name,quantity:1,equipped:!1,index:a}):this.selected_character.items.push({key_name:n.key_name,quantity:i,index:a})),e)this.data.control_manager.simple_input(this.open_buy_select.bind(this));else{let e=this.data.info.shops_list[this.parent.shop_key].item_list,s=!1;for(let t=0;t<e.length;t++)e[t].key_name===this.selected_item.key_name&&-1!==e[t].quantity&&(this.data.info.shops_list[this.parent.shop_key].item_list[t].quantity-=i,0===this.data.info.shops_list[this.parent.shop_key].item_list[t].quantity&&(s=!0));if(this.buy_select_pos.is_last&&s&&(this.buy_select_pos.should_change=!0),this.parent.update_items(),t){let t=()=>{let t=this.npc_dialog.get_message("equip_now");t=this.npc_dialog.replace_text(t,this.selected_character.name),this.npc_dialog.update_dialog(t,!1,!1),this.yesno_action.open({yes:this.equip_new_item.bind(this),no:this.check_game_ticket.bind(this)},{x:56,y:40})};this.data.control_manager.simple_input(t.bind(this))}else this.data.control_manager.simple_input(this.check_game_ticket.bind(this))}};this.quant_win.is_open?this.quant_win.close(()=>{s()}):s()}}on_buy_equip_select(){if(this.selected_character=this.char_display.lines[this.char_display.current_line][this.char_display.selected_index],this.selected_char_index=this.char_display.selected_index,15===this.selected_character.items.length){let t=this.npc_dialog.get_message("inventory_full");t=this.npc_dialog.replace_text(t,this.selected_character.name),this.npc_dialog.update_dialog(t,!1,!1),this.char_display.grant_control(this.on_cancel_char_select.bind(this),this.on_buy_equip_select.bind(this))}else if(this.data.info.items_list[this.selected_item.key_name].equipable_chars.includes(this.selected_character.key_name))this.on_purchase_success(!0);else{let t=this.npc_dialog.get_message("cant_equip");t=this.npc_dialog.replace_text(t,this.selected_character.name),this.npc_dialog.update_dialog(t,!1,!1),this.yesno_action.open({yes:this.on_purchase_success.bind(this,!1,!1),no:this.open_equip_compare.bind(this)},{x:56,y:40})}}on_buy_item_select(t=!1){this.selected_character=this.char_display.lines[this.char_display.current_line][this.char_display.selected_index],this.selected_char_index=this.char_display.selected_index;let e=0;for(let t=0;t<this.selected_character.items.length;t++){let i=this.selected_character.items[t];i.key_name===this.selected_item.key_name&&(e=i.quantity)}if(15===this.selected_character.items.length){let e=this.npc_dialog.get_message("inventory_full");e=this.npc_dialog.replace_text(e,this.selected_character.name),this.npc_dialog.update_dialog(e,!1,!1),this.char_display.grant_control(t?this.on_cancel_game_ticket.bind(this):this.on_cancel_char_select.bind(this),this.on_buy_item_select.bind(this,t))}else if(30===e){let e=this.data.info.items_list[this.selected_item.key_name].name,i=this.npc_dialog.get_message("stack_full");i=this.npc_dialog.replace_text(i,this.selected_character.name,e),this.npc_dialog.update_dialog(i,!1,!1),this.char_display.grant_control(t?this.on_cancel_game_ticket.bind(this):this.on_cancel_char_select.bind(this),this.on_buy_item_select.bind(this,t))}else if(t)this.on_purchase_success(!1,t);else if(this.data.info.party_data.coins-this.data.info.items_list[this.selected_item.key_name].price<0&&!t){this.npc_dialog.update_dialog("not_enough_coins",!0),this.data.cursor_manager.hide();let t=()=>{this.data.control_manager.simple_input(this.open_buy_select.bind(this))};this.quant_win.is_open?this.quant_win.close(t):t()}else{this.npc_dialog.update_dialog("buy_quantity");let t=this.data.info.shops_list[this.parent.shop_key].item_list.filter(t=>t.key_name===this.selected_item.key_name)[0],e={key_name:t.key_name,quantity:-1===t.quantity?30:t.quantity},i=this.selected_character.items.filter(t=>t.key_name===this.selected_item.key_name),s=0!==i.length?i[0]:null;this.quant_win.is_open||this.quant_win.open(e,s,!0),this.quant_win.grant_control(this.open_inventory_view.bind(this),this.on_purchase_success.bind(this))}}on_cancel_char_select(){this.inv_win.is_open&&this.inv_win.close(),this.eq_compare.is_open&&this.eq_compare.close(),this.char_display.is_open&&this.char_display.close();let t=[e.WindowNames.INV_WIN,e.WindowNames.EQ_COMPARE,e.WindowNames.CHAR_DISPLAY];this.close_windows(t,this.open_buy_select.bind(this))}on_cancel_game_ticket(){this.npc_dialog.update_dialog("game_ticket_decline",!0),this.data.control_manager.simple_input(this.on_cancel_char_select.bind(this))}open_equip_compare(){this.buy_select_pos={page:this.buy_select.current_page,index:this.buy_select.selected_index,is_last:this.buy_select.is_last(this.buy_select.current_page,this.buy_select.selected_index),should_change:!1};let t=[e.WindowNames.BUY_SELECT,e.WindowNames.ITEM_DESC_WIN];this.close_windows(t,()=>{this.npc_dialog.update_dialog("character_select");let t=this.selected_character?this.selected_character.key_name:this.data.info.party_data.members[0].key_name,i=[{name:e.WindowNames.CHAR_DISPLAY,arguments:[this.selected_char_index,"shop"]},{name:e.WindowNames.EQ_COMPARE,arguments:[t,this.selected_item.key_name]}];this.show_windows(i,()=>{this.char_display.grant_control(this.on_cancel_char_select.bind(this),this.on_buy_equip_select.bind(this))})})}open_inventory_view(t=!1){!t&&this.buy_select.is_open&&(this.buy_select_pos={page:this.buy_select.current_page,index:this.buy_select.selected_index,is_last:this.buy_select.is_last(this.buy_select.current_page,this.buy_select.selected_index),should_change:!1});let i=[e.WindowNames.ITEM_DESC_WIN,e.WindowNames.BUY_SELECT,e.WindowNames.QUANT_WIN,e.WindowNames.EQ_COMPARE];this.close_windows(i,()=>{t?this.npc_dialog.update_dialog("game_ticket_select"):this.npc_dialog.update_dialog("character_select");let e=t?"game_ticket":this.selected_item.key_name,i=()=>{let i=this.selected_character?this.selected_character.key_name:this.data.info.party_data.members[0].key_name,s=()=>{this.char_display.grant_control(t?this.on_cancel_game_ticket.bind(this):this.on_cancel_char_select.bind(this),this.on_buy_item_select.bind(this,t))};this.inv_win.is_open?(this.inv_win.refresh(i,e),s()):this.inv_win.open(i,e,!0,s)};this.char_display.is_open?(this.char_display.select_char(this.selected_char_index),i()):this.char_display.open(this.selected_char_index,n.CharsMenuModes.SHOP,i)})}on_buy_select(){this.selected_item=this.buy_select.pages[this.buy_select.current_page][this.buy_select.selected_index],this.data.control_manager.reset(),this.data.info.items_list[this.selected_item.key_name].equipable?this.open_equip_compare():this.open_inventory_view()}open_buy_select(t="sell_follow_up"){if(0===Object.keys(this.item_list).length)this.close_menu();else{this.buy_select_pos.should_change&&(0===this.buy_select_pos.index?(this.buy_select_pos.page-=1,this.buy_select_pos.index=6):this.buy_select_pos.index-=1),this.npc_dialog.update_dialog(t);let i=[e.WindowNames.CHAR_DISPLAY,e.WindowNames.INV_WIN,e.WindowNames.EQ_COMPARE];this.close_windows(i,()=>{let t=[{name:e.WindowNames.BUY_SELECT,arguments:[this.item_list,this.buy_select_pos.index,this.buy_select_pos.page]},{name:e.WindowNames.YOUR_COINS_WIN,arguments:[]},{name:e.WindowNames.ITEM_PRICE_WIN,arguments:[]},{name:e.WindowNames.ITEM_DESC_WIN,arguments:[]}];this.show_windows(t,()=>{this.selected_item=this.buy_select.pages[this.buy_select.current_page][this.buy_select.selected_index],this.parent.update_item_info(this.selected_item.key_name),this.parent.update_your_coins(),this.buy_select.grant_control(this.close_menu.bind(this),this.on_buy_select.bind(this))})})}}open_menu(t,e){this.is_artifacts_menu=t,this.close_callback=e,this.active=!0,this.item_list=this.is_artifacts_menu?this.parent.artifact_list:this.parent.normal_item_list,t?0===Object.keys(this.item_list).length?(this.npc_dialog.update_dialog("no_artifacts",!0),this.data.control_manager.simple_input(this.close_menu.bind(this),{reset_on_press:!0})):(this.npc_dialog.update_dialog("artifacts_menu",!0),this.data.control_manager.simple_input(this.open_buy_select.bind(this,"buy_select"),{reset_on_press:!0})):this.open_buy_select("buy_select")}close_menu(){this.data.cursor_manager.hide(),this.data.control_manager.reset(),this.is_artifacts_menu=null,this.item_list={},this.selected_item=null,this.selected_character=null,this.selected_char_index=0,this.old_item=null,this.buy_select_pos={page:0,index:0,is_last:!1,should_change:!1},this.active=!1;let t=[e.WindowNames.ITEM_DESC_WIN,e.WindowNames.ITEM_PRICE_WIN,e.WindowNames.YOUR_COINS_WIN,e.WindowNames.CHAR_DISPLAY,e.WindowNames.INV_WIN,e.WindowNames.YESNO_ACTION,e.WindowNames.QUANT_WIN,e.WindowNames.BUY_SELECT,e.WindowNames.EQ_COMPARE];this.close_windows(t,()=>{this.close_callback(),this.close_callback=null})}show_windows(t,e){let i=[],s=Object.keys(t).length;for(let e=0;e<s;e++){let s=t[e].arguments?t[e].arguments:[],n=this[t[e].name]instanceof a.Window;if(!(n?this[t[e].name].open:this[t[e].name].is_open)){let a,_=new Promise(t=>a=t);i.push(_),s.push(a),n?this[t[e].name].show.apply(this[t[e].name],s):this[t[e].name].open.apply(this[t[e].name],s)}}Promise.all(i).then(()=>{e()})}close_windows(t,e){let i=[];for(let e in t){if(this[t[e]]instanceof a.Window?this[t[e]].open:this[t[e]].is_open){let s,n=new Promise(t=>s=t);i.push(n),this[t[e]].close(s)}}Promise.all(i).then(()=>{e()})}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SellRepairMenu=e.WindowNames=void 0;const s=i(2),n=i(15),a=6*Phaser.Timer.SECOND;e.WindowNames={ITEM_DESC_WIN:"item_desc_win",ITEM_PRICE_WIN:"item_price_win",YOUR_COINS_WIN:"your_coins_win",CHAR_DISPLAY:"char_display",INV_WIN:"inv_win",YESNO_ACTION:"yesno_action",QUANT_WIN:"quant_win"};e.SellRepairMenu=class{constructor(t,e,i){this.game=t,this.data=e,this.parent=i,this.close_callback=null,this.item_desc_win=this.parent.item_desc_win,this.your_coins_win=this.parent.your_coins_win,this.item_price_win=this.parent.item_price_win,this.char_display=this.parent.char_display,this.inv_win=this.parent.inv_win,this.quant_win=this.parent.quant_win,this.yesno_action=this.parent.yesno_action,this.npc_dialog=this.parent.npc_dialog,this.is_repair_menu=null,this.active=!1,this.selected_item=null,this.inv_win_pos={line:0,col:0},this.selected_character=null,this.selected_char_index=0}on_item_repair(){let t=()=>{this.inv_win.kill_item_at(this.inv_win_pos.line,this.inv_win_pos.col),this.data.control_manager.reset(),this.game.time.events.add(a,()=>{this.selected_item.broken=!1,this.data.info.party_data.coins-=this.data.info.items_list[this.selected_item.key_name].price*(1/4)|0,this.npc_dialog.update_dialog("repair_done",!0),this.parent.update_your_coins(),this.data.control_manager.simple_input(this.on_character_select.bind(this,"repair_follow_up",this.inv_win_pos))},this)};this.npc_dialog.dialog_manager.window.open?(this.npc_dialog.dialog_manager.dialog_crystal.visible=!1,this.npc_dialog.dialog_manager.window.close(t)):t()}on_repair_item_select(){let t=()=>{if(this.inv_win_pos=this.inv_win.cursor_pos,this.selected_item=this.inv_win.item_grid[this.inv_win_pos.line][this.inv_win_pos.col],this.selected_item.broken){let t=this.data.info.items_list[this.selected_item.key_name].price*(1/4)|0,e=this.npc_dialog.get_message("repair_deal");e=this.npc_dialog.replace_text(e,void 0,this.data.info.items_list[this.selected_item.key_name].name,String(t)),this.npc_dialog.update_dialog(e,!1,!1),this.yesno_action.open({yes:()=>{this.npc_dialog.update_dialog("repair_deal_accept",!0),this.data.control_manager.simple_input(this.on_item_repair.bind(this))},no:()=>{this.npc_dialog.update_dialog("repair_deal_decline",!0),this.data.control_manager.simple_input(this.on_character_select.bind(this,"repair_follow_up",this.inv_win_pos))}},{x:56,y:40})}else{let t="breaks_when_use"===this.data.info.items_list[this.selected_item.key_name].use_type?"cant_repair":"repair_decline",e=this.npc_dialog.get_message(t);e=this.npc_dialog.replace_text(e,void 0,this.data.info.items_list[this.selected_item.key_name].name),this.npc_dialog.update_dialog(e,!0,!1),this.data.control_manager.simple_input(this.on_character_select.bind(this,"repair_follow_up",this.inv_win_pos))}};this.item_desc_win.open?this.item_desc_win.close(t):t()}on_sale_success(t=1){let e=()=>{let e=this.data.info.items_list[this.selected_item.key_name].rare_item?"after_sell_artifact":"after_sell_normal";this.npc_dialog.update_dialog(e,!0);let i=this.data.info.items_list[this.selected_item.key_name].price*(this.selected_item.broken?.5:3/4)|0;this.data.info.party_data.coins+=i*t,this.parent.update_your_coins();for(let e=0;e<this.selected_character.items.length;e++){this.selected_character.items[e].key_name===this.selected_item.key_name&&(this.selected_character.items[e].quantity-=t,0===this.selected_character.items[e].quantity&&this.selected_character.items.splice(e,1))}if(this.data.info.items_list[this.selected_item.key_name].rare_item){let e=!1,i=this.data.info.shops_list[this.parent.shop_key].item_list;for(let s=0;s<i.length;s++)i[s].key_name===this.selected_item.key_name&&(e=!0,this.data.info.shops_list[this.parent.shop_key].item_list[s].quantity+=t);e||i.push({key_name:this.selected_item.key_name,quantity:t})}this.parent.set_item_lists(),this.data.control_manager.simple_input(this.on_character_select.bind(this,"sell_follow_up",this.inv_win_pos))};this.inv_win.is_open?(this.inv_win.refresh(this.selected_character.key_name,void 0),e()):this.inv_win.open(this.selected_character.key_name,void 0,!1,e)}on_sell_item_select(){let t=()=>{if(this.inv_win_pos=this.inv_win.cursor_pos,this.selected_item=this.inv_win.item_grid[this.inv_win_pos.line][this.inv_win_pos.col],this.data.info.items_list[this.selected_item.key_name].important_item)this.npc_dialog.update_dialog("cant_sell",!0),this.data.control_manager.simple_input(this.on_character_select.bind(this,"sell_follow_up",this.inv_win_pos));else if(1===this.selected_item.quantity){let t=this.data.info.items_list[this.selected_item.key_name].rare_item?"sell_artifact":"sell_normal",e=this.npc_dialog.get_message(t),i="sell_normal"===t?this.data.info.items_list[this.selected_item.key_name].name:void 0,s=this.data.info.items_list[this.selected_item.key_name].price*(this.selected_item.broken?.5:3/4)|0;e=this.npc_dialog.replace_text(e,void 0,i,String(s)),this.npc_dialog.update_dialog(e,!1,!1),this.yesno_action.open({yes:this.on_sale_success.bind(this,1),no:()=>{let t=this.data.info.items_list[this.selected_item.key_name].rare_item?"decline_sell_artifact":"decline_sell_normal";this.npc_dialog.update_dialog(t,!0),this.data.control_manager.simple_input(this.on_character_select.bind(this,"sell_follow_up",this.inv_win_pos))}},{x:56,y:40})}else{this.npc_dialog.update_dialog("sell_quantity_select");let t=this.selected_character.items.filter(t=>t.key_name===this.selected_item.key_name),e=0!==t.length?t[0]:null,i=()=>{this.quant_win.grant_control(this.on_character_select.bind(this,"sell_follow_up",this.selected_char_index,this.inv_win_pos),()=>{let t=1;t=this.quant_win.chosen_quantity,this.quant_win.close(),this.data.cursor_manager.hide();let e=this.npc_dialog.get_message("sell_quantity_confirm"),i=this.data.info.items_list[this.selected_item.key_name].price*(this.selected_item.broken?.5:3/4)|0;e=this.npc_dialog.replace_text(e,void 0,void 0,String(i*t)),this.npc_dialog.update_dialog(e,!1,!1),this.yesno_action.open({yes:this.on_sale_success.bind(this,t),no:()=>{let t=this.data.info.items_list[this.selected_item.key_name].rare_item?"decline_sell_artifact":"decline_sell_normal";this.npc_dialog.update_dialog(t,!0),this.data.control_manager.simple_input(this.on_character_select.bind(this,"sell_follow_up",this.inv_win_pos))}},{x:56,y:40})})};this.quant_win.is_open?i():this.quant_win.open(e,void 0,!1,i)}};this.item_desc_win.open?this.item_desc_win.close(t):t()}on_character_select(t="sell_follow_up",i={line:0,col:0}){let s=()=>{let s=[{name:e.WindowNames.ITEM_DESC_WIN},{name:e.WindowNames.ITEM_PRICE_WIN}];this.show_windows(s,()=>{t&&this.npc_dialog.update_dialog(t),this.selected_character=this.char_display.lines[this.char_display.current_line][this.char_display.selected_index],this.selected_char_index=this.char_display.selected_index;let e=()=>{this.inv_win.set_cursor(i.line,i.col),this.inv_win.item_grid[i.line][i.col]||this.inv_win.previous_col(),this.inv_win.grant_control(this.open_inventory_view.bind(this),this.is_repair_menu?this.on_repair_item_select.bind(this):this.on_sell_item_select.bind(this))};this.inv_win.is_open?(this.inv_win.refresh(this.selected_character.key_name,void 0),e()):this.inv_win.open(this.selected_character.key_name,void 0,!1,e)})};this.quant_win.is_open?this.quant_win.close(()=>{}):s()}open_inventory_view(t="sell_follow_up"){let i=[e.WindowNames.ITEM_DESC_WIN,e.WindowNames.ITEM_PRICE_WIN,e.WindowNames.QUANT_WIN];this.close_windows(i,()=>{this.npc_dialog.update_dialog(t);let e=()=>{this.game.world.bringToTop(this.char_display.char_group);let t=this.selected_character?this.selected_character.key_name:this.data.info.party_data.members[0].key_name,e=()=>{this.your_coins_win.open||this.your_coins_win.show(),this.parent.update_your_coins(),this.char_display.grant_control(this.close_menu.bind(this),this.on_character_select.bind(this))};this.inv_win.is_open?(this.inv_win.refresh(t),e()):this.inv_win.open(t,void 0,!1,e)};this.char_display.is_open?(this.char_display.select_char(this.selected_char_index),e()):this.char_display.open(this.selected_char_index,n.CharsMenuModes.SHOP,e)})}open_menu(t,e){this.is_repair_menu=t,this.close_callback=e,this.active=!0,t?(this.npc_dialog.update_dialog("repair_menu",!0),this.data.control_manager.simple_input(this.open_inventory_view.bind(this,"repair_select"))):this.open_inventory_view("sell_select")}close_menu(){this.data.cursor_manager.hide(),this.data.control_manager.reset(),this.is_repair_menu=null,this.selected_item=null,this.inv_win_pos={line:0,col:0},this.selected_character=null,this.selected_char_index=0,this.active=!1;let t=[e.WindowNames.ITEM_DESC_WIN,e.WindowNames.ITEM_PRICE_WIN,e.WindowNames.YOUR_COINS_WIN,e.WindowNames.CHAR_DISPLAY,e.WindowNames.INV_WIN,e.WindowNames.YESNO_ACTION,e.WindowNames.QUANT_WIN];this.close_windows(t,()=>{this.close_callback(),this.close_callback=null})}show_windows(t,e){let i=[],n=Object.keys(t).length;for(let e=0;e<n;e++){let n=t[e].arguments?t[e].arguments:[],a=this[t[e].name]instanceof s.Window;if(!(a?this[t[e].name].open:this[t[e].name].is_open)){let s,_=new Promise(t=>s=t);i.push(_),n.push(s),a?this[t[e].name].show.apply(this[t[e].name],n):this[t[e].name].open.apply(this[t[e].name],n)}}Promise.all(i).then(()=>{e()})}close_windows(t,e){let i=[];for(let e in t){if(this[t[e]]instanceof s.Window?this[t[e]].open:this[t[e]].is_open){let s,n=new Promise(t=>s=t);i.push(n),this[t[e]].close(s)}}Promise.all(i).then(()=>{e()})}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.InventoryWindow=void 0;const s=i(2),n=i(0),a=i(4);e.InventoryWindow=class{constructor(t,e,i){this.game=t,this.data=e,this.on_change=i,this.expanded=!1,this.is_open=!1,this.window=new s.Window(this.game,128,96,108,60),this.text=this.window.set_text_in_position("",8,8),this.text.text.alpha=0,this.text.shadow.alpha=0,this.char=null,this.item_grid=[],this.selected_item=null,this.cursor_pos={line:0,col:0},this.sprite_group=this.window.define_internal_group("sprites",{x:16,y:8}),this.icon_group=this.window.define_internal_group("icons",{x:23,y:16})}check_expand(t){if(t&&this.set_text(),this.expanded===t)return;let e=t?1:-1;this.window.update_size({height:this.window.height+8*e}),this.window.update_position({y:this.window.y-8*e}),this.sprite_group.y=this.sprite_group.y+8*e,this.icon_group.y=this.icon_group.y+8*e,this.window.update(),this.expanded=t}set_text(){let t=null,e=!1,i=!1;for(let s=0;s<3;s++){for(let n=0;n<5;n++){if(!this.item_grid[s][n]){i=!0;break}if(this.item_grid[s][n].key_name===this.selected_item){t=this.item_grid[s][n],e=!0;break}}if(e||i)break}e?this.window.update_text("You have "+t.quantity,this.text):this.window.update_text("None in stock",this.text),this.text.text.alpha=1,this.text.shadow.alpha=1}change_character(t){this.char=this.data.info.party_data.members.filter(e=>e.key_name===t)[0],this.make_item_grid(),n.kill_all_sprites(this.sprite_group),n.kill_all_sprites(this.icon_group),this.expanded&&this.set_text(),this.set_sprites()}make_item_grid(){this.item_grid=[];let t=this.char.items.filter(t=>t.key_name in this.data.info.items_list),e=[];for(let i=0;i<1+(t.length/5|0);i++){let s=[];for(let e=0;e<5;e++)t[5*i+e]&&s.push(t[5*i+e]);e.push(s)}this.item_grid=e}kill_item_at(t,e){let i=this.sprite_group.children.filter(i=>!0===i.alive&&"items_icons"===i.key&&i.x===16*e&&i.y===16*t),s=this.sprite_group.children.filter(i=>!0===i.alive&&"item_border"===i.key&&i.x===16*e&&i.y===16*t);if(i[0].kill(),s[0].kill(),this.item_grid[t][e].broken){this.sprite_group.children.filter(i=>!0===i.alive&&"broken"===i.key&&i.x===16*e&&i.y===16*t)[0].kill()}if(this.item_grid[t][e].equipped){this.icon_group.children.filter(i=>!0===i.alive&&"equipped"===i.key&&i.x===16*e&&i.y===16*t)[0].kill()}}grant_control(t,e){let i=[{key:this.data.gamepad.LEFT,on_down:this.previous_col.bind(this)},{key:this.data.gamepad.RIGHT,on_down:this.next_col.bind(this)},{key:this.data.gamepad.UP,on_down:this.previous_line.bind(this)},{key:this.data.gamepad.DOWN,on_down:this.next_line.bind(this)},{key:this.data.gamepad.A,on_down:e},{key:this.data.gamepad.B,on_down:t}];this.data.control_manager.set_control(i,{loop_configs:{vertical:!0,horizontal:!0}})}next_col(){1===this.item_grid.length&&1===this.item_grid[this.cursor_pos.line].length||(this.cursor_pos.col<this.item_grid[this.cursor_pos.line].length-1?this.set_cursor(this.cursor_pos.line,this.cursor_pos.col+1):this.cursor_pos.line===this.item_grid.length-1?this.set_cursor(0,0):this.set_cursor(this.cursor_pos.line+1,0))}previous_col(){1===this.item_grid.length&&1===this.item_grid[this.cursor_pos.line].length||(this.cursor_pos.col>0?this.set_cursor(this.cursor_pos.line,this.cursor_pos.col-1):0===this.cursor_pos.line?this.set_cursor(this.item_grid.length-1,this.item_grid[this.item_grid.length-1].length-1):this.set_cursor(this.cursor_pos.line-1,4))}next_line(){1!==this.item_grid.length&&(this.cursor_pos.line===this.item_grid.length-1?this.set_cursor(0,this.cursor_pos.col):this.cursor_pos.col>this.item_grid[this.cursor_pos.line+1].length-1?this.set_cursor(this.cursor_pos.line+1,this.item_grid[this.cursor_pos.line+1].length-1):this.set_cursor(this.cursor_pos.line+1,this.cursor_pos.col))}previous_line(){1!==this.item_grid.length&&(0===this.cursor_pos.line?this.cursor_pos.col>this.item_grid[this.item_grid.length-1].length-1?this.set_cursor(this.item_grid.length-1,this.item_grid[this.item_grid.length-1].length-1):this.set_cursor(this.item_grid.length-1,this.cursor_pos.col):this.set_cursor(this.cursor_pos.line-1,this.cursor_pos.col))}set_cursor(t,e){this.cursor_pos={line:t,col:e};let i=136+16*e,s=112+16*t;this.data.cursor_manager.move_to({x:i,y:s},{tween_config:{type:a.CursorManager.CursorTweens.POINT,variant:a.PointVariants.LONG}},()=>{this.on_change(t,e)})}set_sprites(){let t=!1;for(let e=0;e<3;e++){for(let i=0;i<5;i++){if(!this.item_grid[e][i]){t=!0;break}let s=this.data.info.items_list[this.item_grid[e][i].key_name],n=this.sprite_group.children.filter(t=>!1===t.alive&&"items_icons"===t.key),a=this.sprite_group.children.filter(t=>!1===t.alive&&"item_border"===t.key);if(n.length>0&&a.length>0?(a[0].reset(16*i,16*e),n[0].reset(16*i,16*e),n[0].frameName=s.key_name):(this.window.create_at_group(16*i,16*e,"item_border",void 0,void 0,"sprites"),this.window.create_at_group(16*i,16*e,"items_icons",void 0,s.key_name,"sprites")),this.item_grid[e][i].broken){let t=this.sprite_group.children.filter(t=>!1===t.alive&&"broken"===t.key);t.length>0?t[0].reset(16*i,16*e):this.window.create_at_group(16*i,16*e,"broken",void 0,void 0,"sprites")}if(this.item_grid[e][i].equipped){let t=this.icon_group.children.filter(t=>!1===t.alive&&"equipped"===t.key);t.length>0?t[0].reset(16*i,16*e):this.window.create_at_group(16*i,16*e,"equipped",void 0,void 0,"icons")}if(this.item_grid[e][i].quantity>1){let t=this.icon_group.children.filter(t=>!1===t.alive&&void 0!==t.text);if(t.length>0)t[0].text=this.item_grid[e][i].quantity.toString(),t[0].reset(16*i,16*e),t[0].x+=8-t[0].width;else{let t=this.game.add.bitmapText(16*i,16*e,"gs-item-bmp-font",this.item_grid[e][i].quantity.toString());t.x+=8-t.width,this.window.add_to_internal_group("icons",t)}}}if(t)break}this.sprite_group.alpha=1}refresh(t,e){this.char=this.data.info.party_data.members.filter(e=>e.key_name===t)[0],this.selected_item=e,n.kill_all_sprites(this.sprite_group),n.kill_all_sprites(this.icon_group),this.make_item_grid(),this.set_sprites()}open(t,e,i=!1,s){this.char=this.data.info.party_data.members.filter(e=>e.key_name===t)[0],this.selected_item=e,this.make_item_grid(),this.check_expand(i),this.set_sprites(),this.is_open=!0,this.window.show(s,!1)}close(t,e=!1){n.kill_all_sprites(this.sprite_group,e),n.kill_all_sprites(this.icon_group,e),this.text.text.alpha=0,this.text.shadow.alpha=0,this.char=null,this.selected_item=null,this.cursor_pos={line:0,col:0},this.item_grid=[],this.check_expand(!1),this.is_open=!1,this.window.close(t,!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BuySelectMenu=void 0;const s=i(2),n=i(0),a=i(4),_=Phaser.Timer.QUARTER,o=Phaser.Timer.QUARTER>>1;e.BuySelectMenu=class{constructor(t,e,i){this.game=t,this.data=e,this.on_change=i,this.window=new s.Window(this.game,0,96,236,28),this.items={},this.selected_index=0,this.current_page=0,this.pages=[],this.tweens={item:null,bg:null},this.is_open=!1,this.sprite_group=this.game.add.group(),this.sprite_group.x=16,this.sprite_group.y=112,this.tag_group=this.game.add.group(),this.tag_group.x=24,this.tag_group.y=104,this.text_group=this.game.add.group(),this.text_group.x=39,this.text_group.y=131,this.bg_group=this.game.add.group(),this.bg_group.x=36,this.bg_group.y=132,this.arrow_group=this.game.add.group(),this.arrow_group.x=224,this.arrow_group.y=80,this.up_arrow=this.arrow_group.create(16,20,"green_arrow"),this.up_arrow.rotation=Math.PI,this.down_arrow=this.arrow_group.create(0,52,"green_arrow"),this.up_arrow.alpha=0,this.down_arrow.alpha=0,this.arrow_tweens=[]}update_group_pos(){this.sprite_group.x=16+this.game.camera.x,this.sprite_group.y=112+this.game.camera.y,this.tag_group.x=24+this.game.camera.x,this.tag_group.y=104+this.game.camera.y,this.text_group.x=39+this.game.camera.x,this.text_group.y=131+this.game.camera.y,this.bg_group.x=36+this.game.camera.x,this.bg_group.y=132+this.game.camera.y,this.arrow_group.x=224+this.game.camera.x,this.arrow_group.y=80+this.game.camera.y}set_arrows(t=!1,e=!1){this.up_arrow.x=16,this.up_arrow.y=20,this.down_arrow.x=0,this.down_arrow.y=52,this.up_arrow.alpha=t?1:0,this.down_arrow.alpha=e?1:0}check_arrows(){let t=!1,e=!1;this.current_page<this.pages.length-1&&(e=!0),this.current_page>0&&(t=!0),this.set_arrows(t,e),this.init_arrow_tweens(),this.game.world.bringToTop(this.arrow_group)}init_arrow_tweens(){let t=this.game.add.tween(this.up_arrow).to({y:12},o,Phaser.Easing.Linear.None).to({y:20},o,Phaser.Easing.Linear.None).loop();this.arrow_tweens.push(t);let e=this.game.add.tween(this.down_arrow).to({y:60},o,Phaser.Easing.Linear.None).to({y:52},o,Phaser.Easing.Linear.None).loop();this.arrow_tweens.push(e),t.start(),e.start()}clear_arrow_tweens(){for(let t=0;t<this.arrow_tweens.length;t++)this.game.tweens.remove(this.arrow_tweens.pop())}set_text(t,e){let i=this.text_group.children.filter(t=>!1===t.alive&&0!==t.tint),s=this.text_group.children.filter(t=>!1===t.alive&&0===t.tint),n=null,a=null;i.length>0&&s.length>0?(i[0].text=t,i[0].reset(32*e,0),s[0].text=t,s[0].reset(32*e,0),n=i[0],a=s[0]):(a=this.game.add.bitmapText(32*e,0,"gs-shop-bmp-font",t),n=this.game.add.bitmapText(32*e,0,"gs-shop-bmp-font",t),a.rotation=Math.PI/2,n.rotation=Math.PI/2,a.tint=0,this.text_group.add(a),this.text_group.add(n)),a.y-=n.width-1,n.y-=n.width,a.x-=1;let _=this.bg_group.children.filter(t=>!1===t.alive);if(_.length>0)_[0].clear(),_[0].beginFill(16741120,1),_[0].drawRect(0,0,-(n.height+1),-(n.width+1)),_[0].endFill(),_[0].reset(32*e,0);else{let t=this.game.add.graphics(32*e,0);t.beginFill(16741120,1),t.drawRect(0,0,-(n.height+1),-(n.width+1)),t.endFill(),this.bg_group.add(t)}this.game.world.bringToTop(this.text_group)}make_pages(){let t=Object.keys(this.items).length,e=Array.from(Object.keys(this.items)),i=t%7==0?t/7|0:1+(t/7|0);for(let t=0;t<i;t++){let i=[];for(let s=7*t;s<7*(t+1)&&e[s];s++)i.push(this.items[e[s]]);this.pages[t]=i}}set_sprites(t){for(let e=0;e<this.pages[t].length;e++){let i=this.sprite_group.children.filter(t=>!1===t.alive&&"items_icons"===t.key),s=this.sprite_group.children.filter(t=>!1===t.alive&&"item_border"===t.key);i.length>0&&s.length>0?(s[0].reset(32*e,0),s[0].scale.x=1,s[0].scale.y=1,i[0].frameName=this.pages[t][e].key_name,i[0].scale.x=1,i[0].scale.y=1,i[0].reset(32*e,0)):(this.sprite_group.create(32*e,0,"item_border").anchor.setTo(.5,.5),this.sprite_group.create(32*e,0,"items_icons",this.pages[t][e].key_name).anchor.setTo(.5,.5));let n=this.tag_group.children.filter(t=>!1===t.alive);n.length>0?n[0].reset(32*e,0):this.tag_group.create(32*e,0,"price_tag");let a=this.data.info.items_list[this.pages[t][e].key_name].price;this.set_text(a.toString(),e)}this.set_item(this.selected_index%7)}change_page(t,e){if(1===this.pages.length)return;this.clear_arrow_tweens(),Object.keys(this.items).length<7*t||(this.current_page=t,void 0!==e?this.selected_index=e:null!==this.selected_index&&this.selected_index>=this.pages[this.current_page].length&&(this.selected_index=this.pages[this.current_page].length-1),n.kill_all_sprites(this.sprite_group),n.kill_all_sprites(this.tag_group),n.kill_all_sprites(this.text_group),n.kill_all_sprites(this.bg_group),this.unset_item(this.selected_index),this.set_sprites(t),this.check_arrows(),this.change_item(this.selected_index))}grant_control(t,e){let i=[{key:this.data.gamepad.LEFT,on_down:this.previous_item.bind(this)},{key:this.data.gamepad.RIGHT,on_down:this.next_item.bind(this)},{key:this.data.gamepad.UP,on_down:this.previous_page.bind(this)},{key:this.data.gamepad.DOWN,on_down:this.next_page.bind(this)},{key:this.data.gamepad.A,on_down:e,params:{reset_control:!0}},{key:this.data.gamepad.B,on_down:t,params:{reset_control:!0}}];this.data.control_manager.set_control(i,{loop_configs:{horizontal:!0}})}next_page(t){if(1===this.pages.length||this.current_page+1===this.pages.length)return;let e=this.current_page+1;this.change_page(e,t)}previous_page(t){if(1===this.pages.length||this.current_page-1<0)return;let e=this.current_page-1;this.change_page(e,t)}change_item(t){this.unset_item(this.selected_index),this.selected_index=t,this.set_item(this.selected_index),this.set_cursor(this.selected_index),this.on_change(this.pages[this.current_page][this.selected_index].key_name)}next_item(){1===this.pages[this.current_page].length&&1===this.pages.length||(this.selected_index+1===this.pages[this.current_page].length?this.current_page+1===this.pages.length?1===this.pages.length?this.change_item(0):this.change_page(0,0):this.next_page(0):this.change_item(this.selected_index+1))}previous_item(){1===this.pages[this.current_page].length&&1===this.pages.length||(this.selected_index-1<0?this.current_page-1<0?1===this.pages.length?this.change_item(this.pages[this.current_page].length-1):this.change_page(this.pages.length-1,this.pages[this.pages.length-1].length-1):this.previous_page(this.pages[this.current_page-1].length-1):this.change_item(this.selected_index-1))}set_item(t){this.game.world.bringToTop(this.sprite_group),this.data.cursor_manager.bring_to_top();let e=this.sprite_group.children.filter(t=>!0===t.alive&&"items_icons"===t.key),i=this.sprite_group.children.filter(t=>!0===t.alive&&"item_border"===t.key),s=[this.tweens.item,this.tweens.bg],n=[e,i];for(let e=0;e<2;e++)s[e]=this.game.add.tween(n[e][t].scale).to({x:1.55,y:1.55},_,Phaser.Easing.Linear.None,!0,0,-1,!0);this.tweens={item:s[0],bg:s[1]}}is_last(t,e){return t===this.pages.length-1&&e===this.pages[t].length-1}unset_item(t){let e=this.sprite_group.children.filter(t=>!0===t.alive&&"items_icons"===t.key),i=this.sprite_group.children.filter(t=>!0===t.alive&&"item_border"===t.key),s=[this.tweens.item,this.tweens.bg],n=[e,i];for(let e=0;e<2;e++)n[e][t]&&n[e][t].scale.setTo(1,1),s[e]&&(this.game.tweens.remove(s[e]),s[e]=null)}set_cursor(t,e){let i=0+32*t;this.data.cursor_manager.move_to({x:i,y:112},{animate:!1,tween_config:{type:a.CursorManager.CursorTweens.POINT,variant:a.PointVariants.LONG}},e)}open(t,e=0,i=0,s){this.items=t,this.current_page=i,this.selected_index=e,this.is_open=!0,this.make_pages(),this.check_arrows(),this.set_sprites(this.current_page),this.set_cursor(this.selected_index),this.update_group_pos(),this.window.show(s,!1)}close(t,e=!1){this.unset_item(this.selected_index),n.kill_all_sprites(this.sprite_group,e),n.kill_all_sprites(this.tag_group,e),n.kill_all_sprites(this.text_group,e),n.kill_all_sprites(this.bg_group,e),this.items={},this.pages=[],this.selected_index=0,this.current_page=0,this.is_open=!1,this.set_arrows(!1,!1),this.window.close(t,!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.EquipCompare=void 0;const s=i(2),n=i(0),a=i(8),_=i(9),o=i(5),r=i(3);e.EquipCompare=class{constructor(t,e){this.game=t,this.data=e,this.selected_item=null,this.selected_char=null,this.is_open=!1,this.window=new s.Window(this.game,128,88,108,68),this.text_group=this.window.define_internal_group("texts",{x:8,y:8}),this.arrow_group=this.window.define_internal_group("arrows",{x:65,y:7}),this.cant_equip_text=this.window.set_text_in_position("Can't equip",14,32,!1,!1,this.window.font_color,!1,void 0,!0),this.cant_equip_text.text.alpha=0,this.cant_equip_text.shadow.alpha=0,this.atk_label_text=this.init_text_sprite("ATK",0,0,!1),this.def_label_text=this.init_text_sprite("DEF",0,16,!1),this.agi_label_text=this.init_text_sprite("AGL",0,32,!1),this.item_name_text=this.init_text_sprite("",0,48,!1),this.curr_atk_text=this.init_text_sprite("",53,0,!0),this.curr_def_text=this.init_text_sprite("",53,16,!0),this.curr_agi_text=this.init_text_sprite("",53,32,!0),this.new_atk_text=this.init_text_sprite("",93,0,!0),this.new_def_text=this.init_text_sprite("",93,16,!0),this.new_agi_text=this.init_text_sprite("",93,32,!0),this.text_group.alpha=0,this.arrow_group.alpha=0}init_text_sprite(t,e,i,s){let n=this.window.set_text_in_position(t,e,i,s);return this.window.add_to_internal_group("texts",n.shadow),this.window.add_to_internal_group("texts",n.text),n}make_arrow(t,e){if(0===t)return;let i=16*e+(t>0?-1:0),s=t>0?"up_arrow":"down_arrow",n=this.arrow_group.children.filter(t=>!1===t.alive&&t.key===s);n.length>0?n[0].reset(0,i):this.window.create_at_group(0,i,s,void 0,void 0,"arrows")}compare_items(t,e,i,s){let n={};t&&(n=r.mapKeys(this.data.info.items_list[t].effects,t=>t.type));let a=r.mapKeys(this.data.info.items_list[e].effects,t=>t.type),o=0,h=0;if(n[i])switch(n[i].operator){case _.effect_operators.PLUS:o=n[i].quantity;break;case _.effect_operators.MINUS:o=-1*n[i].quantity;break;case _.effect_operators.TIMES:o=n[i].quantity*s;break;case _.effect_operators.DIVIDE:o=n[i].quantity/s|0}if(a[i])switch(a[i].operator){case _.effect_operators.PLUS:h=a[i].quantity;break;case _.effect_operators.MINUS:h=-1*a[i].quantity;break;case _.effect_operators.TIMES:h=a[i].quantity*s;break;case _.effect_operators.DIVIDE:h=-s/a[i].quantity|0}return h-o}display_stat(t,e,i){let s=null,n=null,a=0;switch(t){case _.effect_types.ATTACK:s=this.new_atk_text,n=this.curr_atk_text,a=0;break;case _.effect_types.DEFENSE:s=this.new_def_text,n=this.curr_def_text,a=1;break;case _.effect_types.AGILITY:s=this.new_agi_text,n=this.curr_agi_text,a=2}s.text.alpha=0===i?0:1,s.shadow.alpha=0===i?0:1,this.window.update_text(String(e),n),0!==i&&(this.window.update_text(String(e+i),s),this.make_arrow(i,a))}change_character(t){this.selected_char=this.data.info.party_data.members.filter(e=>e.key_name===t)[0],n.kill_all_sprites(this.arrow_group),this.show_stat_compare()}show_stat_compare(){if(!this.data.info.items_list[this.selected_item].equipable_chars.includes(this.selected_char.key_name))return void this.show_cant_equip();this.cant_equip_text.text.alpha=0,this.cant_equip_text.shadow.alpha=0;let t=this.data.info.items_list[this.selected_item].type,e=null,i=this.selected_char.equip_slots,s=["WEAPONS","ARMOR","CHEST_PROTECTOR","HEAD_PROTECTOR","RING","LEG_PROTECTOR","UNDERWEAR"],n=["weapon","body","chest","head","ring","boots","underwear"];for(let _=0;_<s.length;_++)t===a.item_types[s[_]]&&i[n[_]]&&(e=this.data.info.items_list[i[n[_]].key_name].key_name);let r={[o.main_stats.ATTACK]:0,[o.main_stats.DEFENSE]:0,[o.main_stats.AGILITY]:0},h=[_.effect_types.ATTACK,_.effect_types.DEFENSE,_.effect_types.AGILITY];for(let t=0;t<h.length;t++)r[o.effect_type_stat[h[t]]]=this.compare_items(e,this.selected_item,h[t],this.selected_char[o.effect_type_stat[h[t]]]),this.display_stat(h[t],this.selected_char[o.effect_type_stat[h[t]]],r[o.effect_type_stat[h[t]]]);let c=this.data.info.items_list[e]?this.data.info.items_list[e].name:"";this.window.update_text(c,this.item_name_text);for(let t=0;t<3;t++)this.window.draw_separator(4,19+16*t,108,19+16*t,!1);this.text_group.alpha=1,this.arrow_group.alpha=1}show_cant_equip(){this.text_group.alpha=0,this.arrow_group.alpha=0,this.window.clear_separators(),this.cant_equip_text.text.alpha=1,this.cant_equip_text.shadow.alpha=1}open(t,e,i){this.selected_char=this.data.info.party_data.members.filter(e=>e.key_name===t)[0],this.selected_item=e,this.show_stat_compare(),this.is_open=!0,this.window.show(i,!1)}close(t,e=!1){n.kill_all_sprites(this.arrow_group,e),e&&n.kill_all_sprites(this.text_group,e),this.selected_item=null,this.selected_char=null,this.is_open=!1,this.window.close(t,!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.YesNoMenu=void 0;const s=i(18),n=i(0);e.YesNoMenu=class{constructor(t,e){this.game=t,this.data=e,this.yes_callback=null,this.no_callback=null,this.buttons_keys=["yes","no"],this.is_open=!1,this.menu=new s.HorizontalMenu(this.game,this.data,this.buttons_keys,this.buttons_keys.map(t=>n.capitalize(t)),{on_press:this.button_press.bind(this),on_cancel:this.close.bind(this)}),this.menu.title_window.update_size({width:36})}update_position(t,e){if(void 0!==t){let e=this.menu.title_window.x-this.menu.x;this.menu.x=t,this.menu.title_window.x=t+e}void 0!==e&&(this.menu.y=e,this.menu.title_window.y=e),this.menu.update_position(),this.menu.title_window.send_to_front()}button_press(){switch(this.buttons_keys[this.menu.selected_button_index]){case"yes":this.close(this.yes_callback);break;case"no":this.close(this.no_callback)}}is_active(){return this.menu.menu_active}open(t,e,i){this.yes_callback=t.yes,this.no_callback=t.no,this.data.hero.in_action()&&(this.data.hero.stop_char(),this.data.hero.update_shadow()),this.is_open=!0,this.menu.open(i,0,!0),e&&this.update_position(e.x,e.y)}close(t){void 0===t&&(t=this.no_callback),this.is_active()&&(this.menu.close(t),this.is_open=!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ShopItemQuantityWindow=void 0;const s=i(33),n=i(2),a=i(4);e.ShopItemQuantityWindow=class{constructor(t,e){this.game=t,this.data=e,this.window=new n.Window(this.game,56,32,180,20),this.item_counter=new s.ItemCounter(this.game,this.window.group,8,8,this.on_change.bind(this)),this.chosen_quantity=1,this.base_price=0,this.is_open=!1,this.quantity_text=this.window.set_text_in_position(String(this.chosen_quantity),93,8,!0),this.coins_val_text=this.window.set_text_in_position("",141,8,!0),this.coins_label_text=this.window.set_text_in_position("Coins",144,8)}on_change(t){this.chosen_quantity=t,this.window.update_text(String(this.chosen_quantity),this.quantity_text),this.window.update_text(String(this.base_price*this.chosen_quantity),this.coins_val_text)}grant_control(t,e){let i=[{key:this.data.gamepad.LEFT,on_down:this.decrease_amount.bind(this)},{key:this.data.gamepad.RIGHT,on_down:this.increase_amount.bind(this)},{key:this.data.gamepad.A,on_down:e},{key:this.data.gamepad.B,on_down:t}];this.data.control_manager.set_control(i,{loop_configs:{horizontal:!0,horizontal_time:100}})}increase_amount(){this.item_counter.advance_step(1)}decrease_amount(){this.item_counter.advance_step(-1)}open(t,e,i=!1,s){this.data.cursor_manager.move_to({x:132,y:46},{tween_config:{type:a.CursorManager.CursorTweens.WIGGLE}},()=>{this.base_price=this.data.info.items_list[t.key_name].price,this.window.update_text(String(this.base_price),this.coins_val_text);let n=e?e.quantity:0,a=-1===t.quantity?30:t.quantity;a+n>30&&(a=30-n),i&&this.base_price*a>this.data.info.party_data.coins&&(a=this.data.info.party_data.coins/this.base_price|0),this.item_counter.config(a,this.chosen_quantity,n),this.is_open=!0,this.window.show(s,!1)})}close(t){this.item_counter.deactivate(),this.item_counter.clear(),this.data.cursor_manager.clear_tweens(),this.chosen_quantity=1,this.base_price=0,this.is_open=!1,this.window.close(t,!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ControlManager=void 0;const s=i(3),n=Phaser.Timer.QUARTER>>1;e.ControlManager=class{constructor(t,e){this.game=t,this.gamepad=e,this.disabled=!1,this.busy=!1,this.keys_list=this.gamepad.keys;let i=[];for(let t=0;t<this.keys_list.length;t++)i.push({key:this.keys_list[t],on_down:null,on_up:null,pressed:!1,loop:!1,loop_time:n,reset:!1});this.keys=s.mapKeys(i,t=>t.key),this.signal_bindings=[],this.signal_bindings_key=null,this.control_queue=[],this.global_bindings={},this.loop_start_timer=this.game.time.create(!1),this.loop_repeat_timer=this.game.time.create(!1)}get initialized(){return 0!==this.signal_bindings.length}get has_next(){return 0!==this.control_queue.length}simple_input(t,e){let i=[{key:this.gamepad.A,on_down:t,reset_control:e?e.reset_on_press:void 0}];return e?(e.confirm_only||i.push({key:this.gamepad.B,on_down:t,reset_control:e?e.reset_on_press:void 0}),this.set_control(i,{persist:e.persist,no_reset:e.no_initial_reset})):(i.push({key:this.gamepad.B,on_down:t,reset_control:e?e.reset_on_press:void 0}),this.set_control(i))}set_control(t,e){if(this.busy){console.log("ControlManager is busy. Request queued.");let i=this.make_global_key(),s=e;return s.global_key=i,this.control_queue.push({controls:t,configs:s}),i}{let i=!!e&&(!!e.no_reset&&e.no_reset);this.initialized&&!i&&this.reset(),this.busy=!0;for(let e=0;e<t.length;e++)t[e].on_down&&(this.keys[t[e].key].on_down=t[e].on_down),t[e].on_up&&(this.keys[t[e].key].on_up=t[e].on_up),t[e].params&&(this.keys[t[e].key].reset=!!t[e].params.reset_control&&t[e].params.reset_control);if(e){this.set_configs(e);let t=e.global_key?e.global_key:this.make_global_key();return this.enable_keys(t,e.persist)}{let t=this.make_global_key();return this.enable_keys(t)}}}set_configs(t){if(t.loop_configs){let e=t.loop_configs,i=[];e.vertical&&(i.push({key:this.gamepad.UP,loop_time:e.vertical_time}),i.push({key:this.gamepad.DOWN,loop_time:e.vertical_time})),e.horizontal&&(i.push({key:this.gamepad.LEFT,loop_time:e.horizontal_time}),i.push({key:this.gamepad.RIGHT,loop_time:e.horizontal_time})),e.shoulder&&(i.push({key:this.gamepad.L,loop_time:e.shoulder_time}),i.push({key:this.gamepad.R,loop_time:e.shoulder_time})),this.enable_loop(i)}}enable_loop(t){t.forEach(t=>{this.keys[t.key].loop=!0,t.loop_time&&(this.keys[t.key].loop_time=t.loop_time)})}enable_keys(t,e){let i=[];for(let t=0;t<this.keys_list.length;t++){let s=this.keys[this.keys_list[t]].on_down,n=this.keys[this.keys_list[t]].on_up;if(this.keys[this.keys_list[t]].on_up){let s=this.game.input.keyboard.addKey(this.keys[this.keys_list[t]].key).onUp.add(()=>{this.disabled||n()});e||this.signal_bindings.push(s),i.push(s)}if(this.keys[this.keys_list[t]].on_down){let n=this.keys[this.keys_list[t]].loop_time,a=this.keys[this.keys_list[t]].reset;if(this.keys[this.keys_list[t]].loop){let a=this.game.input.keyboard.addKey(this.keys[this.keys_list[t]].key).onDown.add(()=>{if(this.keys[this.gamepad.opposite_key(this.keys_list[t])].pressed){if(this.disabled)return;this.keys[this.gamepad.opposite_key(this.keys_list[t])].pressed=!1,this.stop_timers()}this.keys[this.keys_list[t]].pressed=!0,this.set_loop_timers(s,n)}),_=this.game.input.keyboard.addKey(this.keys[this.keys_list[t]].key).onUp.add(()=>{this.disabled||(this.keys[this.keys_list[t]].pressed=!1,this.stop_timers())});e||this.signal_bindings.push(a,_),i.push(a,_)}else{let n=this.game.input.keyboard.addKey(this.keys[this.keys_list[t]].key).onDown.add(()=>{this.disabled||(a&&this.reset(),s())});e||this.signal_bindings.push(n),i.push(n)}}}if(this.reset(!1),this.busy=!1,this.global_bindings[t]=i,e||(this.signal_bindings_key=t),!this.has_next)return t;{console.log("Executing next ControlManager request...");let t=this.control_queue.shift();this.set_control(t.controls,t.configs)}}set_loop_timers(t,e){t(),this.loop_start_timer.add(Phaser.Timer.QUARTER,()=>{this.loop_repeat_timer.loop(e,t),this.loop_repeat_timer.start()}),this.loop_start_timer.start()}stop_timers(){this.loop_start_timer.stop(),this.loop_repeat_timer.stop()}make_global_key(){let t=!1,e=0;do{if(!this.global_bindings[e]){t=!0;break}e++}while(!t);return this.global_bindings[e]=[new Phaser.SignalBinding(new Phaser.Signal,()=>{},!1)],e}detach_bindings(t){if(!this.global_bindings[t])return;this.global_bindings[t].forEach(t=>t.detach()),this.global_bindings[t]=null}reset(t=!0){this.loop_start_timer.stop(),this.loop_repeat_timer.stop();for(let t=0;t<this.keys_list.length;t++)this.keys[this.keys_list[t]].pressed=!1,this.keys[this.keys_list[t]].on_down=null,this.keys[this.keys_list[t]].on_up=null,this.keys[this.keys_list[t]].loop=!1,this.keys[this.keys_list[t]].loop_time=n,this.keys[this.keys_list[t]].reset=!1;t&&(this.signal_bindings.forEach(t=>{t.detach()}),this.signal_bindings_key&&this.detach_bindings(this.signal_bindings_key),this.signal_bindings_key=null,this.signal_bindings=[])}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Gamepad=e.input_ids=void 0,e.input_ids=["LEFT","RIGHT","UP","DOWN","A","B","L","R","SELECT","START","PSY1","PSY2","PSY3","ZOOM1","ZOOM2","ZOOM3","DEBUG_PHYSICS","DEBUG_GRID","DEBUG_KEYS","DEBUG_STATS","DEBUG_FPS","DEBUG_SLIDERS","DEBUG_CAM_PLUS","DEBUG_CAM_MINUS"];e.Gamepad=class{constructor(t){this.data=t,this.initialize_gamepad()}initialize_gamepad(){for(let t in e.input_ids)this[e.input_ids[t]]=Phaser.Keyboard[this.data.dbs.init_db.default_inputs[e.input_ids[t].toLowerCase()]]}get_id_by_key(t){for(let e in this){let i=e;if(this[i]===t)return i}return null}opposite_key(t){switch(t){case this.LEFT:return this.RIGHT;case this.RIGHT:return this.LEFT;case this.UP:return this.DOWN;case this.DOWN:return this.UP;case this.A:return this.B;case this.B:return this.A;case this.L:return this.R;case this.R:return this.L;case this.SELECT:return this.START;case this.START:return this.SELECT;default:return null}}get keys(){let t=[];for(let i in this){let s=i;e.input_ids.includes(s)&&t.push(this[s])}return t}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vYmFzZS91dGlscy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL21hZ2ljX251bWJlcnMudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9XaW5kb3cudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9sb2Rhc2guanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS91dGlscy9DdXJzb3JNYW5hZ2VyLnRzIiwid2VicGFjazovLy8uL2Jhc2UvUGxheWVyLnRzIiwid2VicGFjazovLy8uL2Jhc2UvdGlsZV9ldmVudHMvVGlsZUV2ZW50LnRzIiwid2VicGFjazovLy8uL2Jhc2UvRGppbm4udHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9JdGVtLnRzIiwid2VicGFjazovLy8uL2Jhc2UvRWZmZWN0LnRzIiwid2VicGFjazovLy8uL2Jhc2Uvc3VwcG9ydF9tZW51cy9TdGF0dXNDb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9zdXBwb3J0X21lbnVzL1BhZ2VJbmRpY2F0b3IudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9NYWluQ2hhci50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL0FiaWxpdHkudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9TcHJpdGVCYXNlLnRzIiwid2VicGFjazovLy8uL2Jhc2Uvc3VwcG9ydF9tZW51cy9DaGFyc01lbnUudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS90aWxlX2V2ZW50cy9KdW1wRXZlbnQudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9iYXR0bGUvQmF0dGxlLnRzIiwid2VicGFjazovLy8uL2Jhc2Uvc3VwcG9ydF9tZW51cy9Ib3Jpem9udGFsTWVudS50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL2dhbWVfZXZlbnRzL0dhbWVFdmVudC50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL2ZpZWxkX2FiaWxpdGllcy9GaWVsZEFiaWxpdGllcy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL0NvbnRyb2xsYWJsZUNoYXIudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9pbnRlcmFjdGFibGVfb2JqZWN0cy9wdXNoLnRzIiwid2VicGFjazovLy8uL2Jhc2UvdXRpbHMvRGlhbG9nTWFuYWdlci50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL05QQy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL2JhdHRsZS9CYXR0bGVTdGFnZS50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3dpbmRvd3MvQ2hhcnNTdGF0dXNXaW5kb3cudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9DbGFzc2VzLnRzIiwid2VicGFjazovLy8uL2Jhc2UvSW50ZXJhY3RhYmxlT2JqZWN0cy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3RpbGVfZXZlbnRzL0NsaW1iRXZlbnQudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS93aW5kb3dzL0Jhc2ljSW5mb1dpbmRvdy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3dpbmRvd3MvSXRlbVBzeW5lcmd5Q2hvb3NlV2luZG93LnRzIiwid2VicGFjazovLy8uL2Jhc2Uvd2luZG93cy9pdGVtL0l0ZW1RdWFudGl0eU1hbmFnZXJXaW5kb3cudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS91dGlscy9JdGVtQ291bnRlci50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL21haW5fbWVudXMvTWFpblN0YXR1c01lbnUudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9Hb2xkZW5TdW4udHMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8uL2Jhc2UvZGVidWcvRGVidWcudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9pbml0aWFsaXplcnMvYXNzZXRzX2xvYWRlci50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL0NvbGxpc2lvbi50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL0hlcm8udHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS91dGlscy9Gb290c3RlcHMudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS90aWxlX2V2ZW50cy9UaWxlRXZlbnRNYW5hZ2VyLnRzIiwid2VicGFjazovLy8uL2Jhc2UvZ2FtZV9ldmVudHMvR2FtZUV2ZW50TWFuYWdlci50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL2dhbWVfZXZlbnRzL0JhdHRsZUV2ZW50LnRzIiwid2VicGFjazovLy8uL2Jhc2UvYmF0dGxlL0JhdHRsZUxvZy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL21haW5fbWVudXMvTWFpbkJhdHRsZU1lbnUudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS93aW5kb3dzL2JhdHRsZS9CYXR0bGVEZXNjcmlwdGlvbldpbmRvdy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3dpbmRvd3MvYmF0dGxlL0JhdHRsZVBzeW5lcmd5V2luZG93LnRzIiwid2VicGFjazovLy8uL2Jhc2Uvd2luZG93cy9iYXR0bGUvQmF0dGxlRGppbm5XaW5kb3cudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS93aW5kb3dzL2JhdHRsZS9EamlublN0YXRzV2luZG93LnRzIiwid2VicGFjazovLy8uL2Jhc2Uvd2luZG93cy9iYXR0bGUvQmF0dGxlSXRlbVdpbmRvdy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3dpbmRvd3MvYmF0dGxlL0JhdHRsZVN1bW1vbldpbmRvdy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3dpbmRvd3MvYmF0dGxlL1N1bW1vbkRqaW5uU3RhbmRieVdpbmRvdy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3dpbmRvd3MvYmF0dGxlL0JhdHRsZVN0YXR1c1dpbmRvdy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3N1cHBvcnRfbWVudXMvQmF0dGxlU3RhdHVzU3RhdGlzdGljcy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3N1cHBvcnRfbWVudXMvQmF0dGxlU3RhdHVzUHN5bmVyZ3kudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9zdXBwb3J0X21lbnVzL0JhdHRsZVN0YXR1c0RqaW5uLnRzIiwid2VicGFjazovLy8uL2Jhc2Uvc3VwcG9ydF9tZW51cy9CYXR0bGVTdGF0dXNJdGVtcy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL0VuZW15LnRzIiwid2VicGFjazovLy8uL2Jhc2Uvd2luZG93cy9iYXR0bGUvQ2hvb3NpbmdUYXJnZXRXaW5kb3cudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9iYXR0bGUvRW5lbXlBSS50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL2JhdHRsZS9CYXR0bGVGb3JtdWxhcy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL2JhdHRsZS9CYXR0bGVBbmltYXRpb25NYW5hZ2VyLnRzIiwid2VicGFjazovLy8uL2Jhc2UvYmF0dGxlL0JhdHRsZUFuaW1hdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL2luaXRpYWxpemVycy9kYXRhYmFzZXNfbG9hZGVyLnRzIiwid2VicGFjazovLy8uL2Jhc2UvaW5pdGlhbGl6ZXJzL2luaXRpYWxpemVfaW5mby50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL2luaXRpYWxpemVycy9tYWluX2NoYXJzLnRzIiwid2VicGFjazovLy8uL2Jhc2UvaW5pdGlhbGl6ZXJzL2FiaWxpdGllcy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL2ZpZWxkX2FiaWxpdGllcy9Nb3ZlRmllbGRQc3luZXJneS50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL2ZpZWxkX2FiaWxpdGllcy9wc3luZXJneV9jYXN0LnRzIiwid2VicGFjazovLy8uL2Jhc2Uvd2luZG93cy9GaWVsZFBzeW5lcmd5V2luZG93LnRzIiwid2VicGFjazovLy8uL2Jhc2UvZmllbGRfYWJpbGl0aWVzL0Zyb3N0RmllbGRQc3luZXJneS50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL2ZpZWxkX2FiaWxpdGllcy9Hcm93dGhGaWVsZFBzeW5lcmd5LnRzIiwid2VicGFjazovLy8uL2Jhc2UvaW5pdGlhbGl6ZXJzL2l0ZW1zLnRzIiwid2VicGFjazovLy8uL2Jhc2UvaW5pdGlhbGl6ZXJzL2RqaW5uaS50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL2luaXRpYWxpemVycy9lbmVtaWVzLnRzIiwid2VicGFjazovLy8uL2Jhc2UvaW5pdGlhbGl6ZXJzL21hcHMudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9NYXAudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS90aWxlX2V2ZW50cy9UZWxlcG9ydEV2ZW50LnRzIiwid2VicGFjazovLy8uL2Jhc2UvdGlsZV9ldmVudHMvU3RlcEV2ZW50LnRzIiwid2VicGFjazovLy8uL2Jhc2UvdGlsZV9ldmVudHMvQ29sbGlzaW9uRXZlbnQudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS90aWxlX2V2ZW50cy9TcGVlZEV2ZW50LnRzIiwid2VicGFjazovLy8uL2Jhc2UvdGlsZV9ldmVudHMvU2xpZGVyRXZlbnQudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9pbml0aWFsaXplcnMvbWlzY19kYXRhLnRzIiwid2VicGFjazovLy8uL2Jhc2UvaW5pdGlhbGl6ZXJzL3Nob3BzLnRzIiwid2VicGFjazovLy8uL2Jhc2UvU2hvcC50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL2luaXRpYWxpemVycy9pbnRlcmFjdGFibGVfb2JqZWN0cy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL2luaXRpYWxpemVycy9zdW1tb25zLnRzIiwid2VicGFjazovLy8uL2Jhc2UvU3VtbW9uLnRzIiwid2VicGFjazovLy8uL2Jhc2UvbWFpbl9tZW51cy9NYWluTWVudS50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL21haW5fbWVudXMvTWFpblBzeW5lcmd5TWVudS50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL21haW5fbWVudXMvTWFpbkl0ZW1NZW51LnRzIiwid2VicGFjazovLy8uL2Jhc2Uvd2luZG93cy9pdGVtL0l0ZW1PcHRpb25zV2luZG93LnRzIiwid2VicGFjazovLy8uL2Jhc2Uvd2luZG93cy9pdGVtL0Ryb3BJdGVtV2luZG93LnRzIiwid2VicGFjazovLy8uL2Jhc2Uvd2luZG93cy9pdGVtL0dpdmVJdGVtV2luZG93LnRzIiwid2VicGFjazovLy8uL2Jhc2Uvd2luZG93cy9pdGVtL1N0YXRzQ2hlY2tXaXRoSXRlbVdpbmRvdy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL21haW5fbWVudXMvTWFpbkRqaW5uTWVudS50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3dpbmRvd3MvZGppbm4vQ2hhcnNRdWlja0luZm9EamlubldpbmRvdy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3dpbmRvd3MvZGppbm4vRGppbm5MaXN0V2luZG93LnRzIiwid2VicGFjazovLy8uL2Jhc2Uvd2luZG93cy9kamlubi9Eamlubk1vZGVIZWFkZXJXaW5kb3cudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS93aW5kb3dzL2RqaW5uL0RqaW5uQ2hhclN0YXRzV2luZG93LnRzIiwid2VicGFjazovLy8uL2Jhc2Uvd2luZG93cy9kamlubi9EamlublBzeW5lcmd5V2luZG93LnRzIiwid2VicGFjazovLy8uL2Jhc2Uvd2luZG93cy9kamlubi9EamlubkFjdGlvbldpbmRvdy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3N1cHBvcnRfbWVudXMvTWFpblN0YXR1c1N0YXRpc3RpY3MudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9zdXBwb3J0X21lbnVzL01haW5TdGF0dXNEamlubi50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3N1cHBvcnRfbWVudXMvTWFpblN0YXR1c1BzeW5lcmd5LnRzIiwid2VicGFjazovLy8uL2Jhc2Uvc3VwcG9ydF9tZW51cy9NYWluU3RhdHVzSXRlbXMudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9tYWluX21lbnVzL1Nob3BNZW51LnRzIiwid2VicGFjazovLy8uL2Jhc2Uvd2luZG93cy9zaG9wL1Nob3BrZWVwRGlhbG9nLnRzIiwid2VicGFjazovLy8uL2Jhc2Uvd2luZG93cy9zaG9wL0J1eUFydGlmYWN0c01lbnUudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS93aW5kb3dzL3Nob3AvU2VsbFJlcGFpck1lbnUudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS93aW5kb3dzL3Nob3AvSW52ZW50b3J5V2luZG93LnRzIiwid2VicGFjazovLy8uL2Jhc2Uvd2luZG93cy9zaG9wL0J1eVNlbGVjdE1lbnUudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS93aW5kb3dzL3Nob3AvRXF1aXBDb21wYXJlLnRzIiwid2VicGFjazovLy8uL2Jhc2Uvd2luZG93cy9ZZXNOb01lbnUudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS93aW5kb3dzL3Nob3AvU2hvcEl0ZW1RdWFudGl0eVdpbmRvdy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3V0aWxzL0NvbnRyb2xNYW5hZ2VyLnRzIiwid2VicGFjazovLy8uL2Jhc2UvR2FtZXBhZC50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImVsZW1lbnRzIiwicmFuZ2VfMzYwIiwiYW5nbGUiLCJudW1iZXJzIiwiZGVncmVlMzYwIiwiaXNfaW5zaWRlX3NlY3RvciIsInF1YWRyYW50cyIsInJhZGl1cyIsInJhbmdlX2ZhY3RvciIsIngiLCJ5IiwidGFyZ2V0X3giLCJ0YXJnZXRfeSIsInJhbmdlX3JhZGl1c19zcXVhcmVkIiwidGFyZ2V0X3JhZGl1c19zcXVhcmVkIiwiTWF0aCIsInBvdyIsInRhcmdldF9hbmdsZSIsImF0YW4yIiwiYW5nbGVzIiwiZGVncmVlOTAiLCJQSSIsImRlZ3JlZTI3MCIsImJldHdlZW5fYW5nbGVzIiwibGVuZ3RoIiwicXVhZHJhbnQiLCJzdGFydF9hbmdsZSIsInJnYjJoc3YiLCJnIiwiYiIsInYiLCJtYXgiLCJtaW4iLCJoIiwiaHN2MnJnYiIsImYiLCJrIiwib3JkZXJlZF9lbGVtZW50cyIsIlZFTlVTIiwiTUVSQ1VSWSIsIk1BUlMiLCJKVVBJVEVSIiwiZWxlbWVudF9uYW1lcyIsImRpcmVjdGlvbnMiLCJyaWdodCIsImRvd25fcmlnaHQiLCJkb3duIiwiZG93bl9sZWZ0IiwibGVmdCIsInVwX2xlZnQiLCJ1cCIsInVwX3JpZ2h0IiwiZGlyZWN0aW9uc19jb3VudCIsImtleXMiLCJyZXZlcnNlX2RpcmVjdGlvbnMiLCJiYXNlX2FjdGlvbnMiLCJkaXJlY3Rpb24iLCJhcnIiLCJ1bmRlZmluZWQiLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiLCJ2YWxzIiwiZGlyXzEiLCJkaXJfMiIsIl8iLCJyYW5kb20iLCJjdXJyZW50X2RpcmVjdGlvbiIsIkhFUk9fQk9EWV9SQURJVVMiLCJ0cmFuc2l0aW9ucyIsImRlc2lyZWRfZGlyZWN0aW9uIiwiZ2FtZSIsInRleHQiLCJpdGFsaWMiLCJmb250X25hbWUiLCJ0ZXh0X3Nwcml0ZSIsImFkZCIsImJpdG1hcFRleHQiLCJGT05UX1NJWkUiLCJ0ZXh0X3dpZHRoIiwid2lkdGgiLCJkZXN0cm95IiwiZ3JvdXAiLCJjaGlsZHJlbiIsImZvckVhY2giLCJjaGlsZCIsInBhcmVudCIsInJlbW92ZSIsImtpbGwiLCJ3aXRoX2RpYWdvbmFscyIsInNoaWZ0Iiwic3Vycm91bmRpbmdzIiwiZGlhZyIsImNvbmNhdCIsImRpcnMiLCJwdXNoIiwibG93ZXIiLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2UiLCJtYXRjaCIsInRvVXBwZXJDYXNlIiwiaGV4IiwicGVyY2VudCIsInRvU3RyaW5nIiwic2xpY2UiLCJwYXJzZUludCIsInN1YnN0ciIsImJldmVsIiwiR0FNRV9XSURUSCIsIkdBTUVfSEVJR0hUIiwiVEFSR0VUX0ZQUyIsIkhFUk9fQk9EWV9SQURJVVNfTTciLCJJTlZfU1FSVDIiLCJzcXJ0IiwiREVMVEFfVElNRV9GQUNUT1IiLCJNQVBfREFNUElORyIsIkRFRkFVTFRfV0lORE9XX0NPTE9SIiwiREVGQVVMVF9GT05UX0NPTE9SIiwiSU5BQ1RJVkVfRk9OVF9DT0xPUiIsIllFTExPV19GT05UX0NPTE9SIiwiUkVEX0ZPTlRfQ09MT1IiLCJCTFVFX0ZPTlRfQ09MT1IiLCJQVVJQTEVfRk9OVF9DT0xPUiIsIklOU0lERV9CT1JERVJfV0lEVEgiLCJPVVRTSURFX0JPUkRFUl9XSURUSCIsIldJTkRPV19QQURESU5HX0giLCJXSU5ET1dfUEFERElOR19UT1AiLCJXSU5ET1dfUEFERElOR19CT1RUT00iLCJTUEFDRV9CRVRXRUVOX0xJTkVTIiwiTUFYX0RJQUdfV0lOX1dJRFRIIiwiTUFYX0xJTkVTX1BFUl9ESUFHX1dJTiIsIk1BWF9ESUFHX1dJTl9IRUlHSFQiLCJQVVNIX1RJTUUiLCJJQ09OX1dJRFRIIiwiSUNPTl9IRUlHSFQiLCJkZWdyZWUxNSIsImRlZ3JlZTMwIiwiZGVncmVlNjAiLCJkZWdyZWUxODAiLCJkZWdyZWU1NDAiLCJDQU1FUkFfTEVSUCIsIkVMRU1fQVRUUl9NSU4iLCJFTEVNX0FUVFJfTUFYIiwiQVZBVEFSX1NJWkUiLCJXT1JMRF9NQVBfU1BFRURfREFTSF9SRURVQ0UiLCJXT1JMRF9NQVBfU1BFRURfV0FMS19SRURVQ0UiLCJXT1JMRF9NQVBfU1BSSVRFX1NDQUxFX1kiLCJXT1JMRF9NQVBfU1BSSVRFX1NDQUxFX1giLCJXaW5kb3ciLCJoZWlnaHQiLCJuZWVkX3Bvc191cGRhdGUiLCJjb2xvciIsImZvbnRfY29sb3IiLCJ0aGlzIiwiZXh0cmFfc3ByaXRlcyIsImludGVybmFsX2dyb3VwcyIsImdyYXBoaWNzIiwic2VwYXJhdG9yc19ncmFwaGljcyIsImRyYXdfYmFja2dyb3VuZCIsImRyYXdfYm9yZGVycyIsImFscGhhIiwib3BlbiIsImxpbmVzX3Nwcml0ZXMiLCJwYWdlX2luZGljYXRvciIsIlBhZ2VJbmRpY2F0b3IiLCJrZXlfbmFtZSIsInBvcyIsInBhcmFtcyIsIm9iaiIsImljb24iLCJiYWNrZ3JvdW5kIiwiZXF1aXBwZWQiLCJicm9rZW4iLCJxdWFudGl0eSIsImJhc2VfeCIsImJhc2VfeSIsImJnIiwiY3JlYXRlX2F0X2dyb3VwIiwiaW50ZXJuYWxfZ3JvdXAiLCJJVEVNX09CSiIsIkVRVUlQUEVEX1giLCJFUVVJUFBFRF9ZIiwiUVVBTlRJVFlfRU5EX1giLCJRVUFOVElUWV9ZIiwiYWRkX3RvX2ludGVybmFsX2dyb3VwIiwiaXRlbV9vYmoiLCJuZXdfcG9zIiwiY2xlYXIiLCJ4XzAiLCJ5XzAiLCJ4XzEiLCJ5XzEiLCJ2ZXJ0aWNhbCIsImxpZ2h0ZXIiLCJ1dGlscyIsImNoYW5nZV9icmlnaHRuZXNzIiwiZGFya2VyIiwiY29sb3JzIiwibGluZVN0eWxlIiwibW92ZVRvIiwibGluZVRvIiwiYmVnaW5GaWxsIiwiZHJhd1JlY3QiLCJlbmRGaWxsIiwibmV3X3NpemUiLCJuZXdfcG9zaXRpb24iLCJyZWxhdGl2ZSIsImNhbWVyYSIsInBvc2l0aW9uIiwiZGVzdHJveV9pbnRlcm5hbF9ncm91cCIsInNwcml0ZSIsInNob3dfY2FsbGJhY2siLCJhbmltYXRlIiwiY2xvc2VfY2FsbGJhY2siLCJ0d2VlbiIsInRvIiwiVFJBTlNJVElPTl9USU1FIiwiUGhhc2VyIiwiRWFzaW5nIiwiTGluZWFyIiwiTm9uZSIsIm9uQ29tcGxldGUiLCJhZGRPbmNlIiwiZm9yY2UiLCJpbnRlcm5hbF9ncm91cF9rZXkiLCJnZXRfaW50ZXJuYWxfZ3JvdXAiLCJmcmFtZSIsInRpbnQiLCJicmluZ1RvVG9wIiwic21vb3RoZWQiLCJhdXRvUm91bmQiLCJsaW5lcyIsInBhZGRpbmdfeCIsInBhZGRpbmdfeSIsInNwYWNlX2JldHdlZW5fbGluZXMiLCJzaGFkb3ciLCJ0b3Bfc2hpZnQiLCJ4X3BvcyIsInlfcG9zIiwiYW5pbV9wcm9taXNlIiwiYW5pbV9wcm9taXNlX3Jlc29sdmUiLCJsaW5lc19wcm9taXNlcyIsIlByb21pc2UiLCJyZXNvbHZlIiwibGluZSIsInRleHRfc3ByaXRlX3NoYWRvdyIsInJlbW92ZV9zbW9vdGgiLCJ3b3JkcyIsInNwbGl0IiwibGluZV9wcm9taXNlX3Jlc29sdmUiLCJ3b3Jkc19pbmRleCIsInJlcGVhdGVyIiwidGltZSIsImV2ZW50cyIsInJlcGVhdCIsInBvcCIsInRoZW4iLCJhbGwiLCJyaWdodF9hbGlnbiIsImluaXRpYWxfeCIsImlzX2NlbnRlcl9wb3MiLCJ3aXRoX2JnIiwidGV4dF9iZyIsImNlbnRlclgiLCJjZW50ZXJZIiwiYWRkZWRfdG9faW50ZXJuYWwiLCJuZXdfdGV4dCIsInRleHRfc2hhZG93X3BhaXIiLCJuZXdfeCIsIm5ld195Iiwic2V0VGV4dCIsInVwZGF0ZV90ZXh0X3Bvc2l0aW9uIiwiY2FsbGJhY2siLCJpc19zZXQiLCJ0ZXJtaW5hbnRlIiwiZGVzdHJveV9jYWxsYmFjayIsIm9uX2Rlc3Ryb3kiLCJUaW1lciIsIlFVQVJURVIiLCJGVU5DX0VSUk9SX1RFWFQiLCJQTEFDRUhPTERFUiIsIndyYXBGbGFncyIsImFyZ3NUYWciLCJhcnJheVRhZyIsImJvb2xUYWciLCJkYXRlVGFnIiwiZXJyb3JUYWciLCJmdW5jVGFnIiwiZ2VuVGFnIiwibWFwVGFnIiwibnVtYmVyVGFnIiwib2JqZWN0VGFnIiwicmVnZXhwVGFnIiwic2V0VGFnIiwic3RyaW5nVGFnIiwic3ltYm9sVGFnIiwid2Vha01hcFRhZyIsImFycmF5QnVmZmVyVGFnIiwiZGF0YVZpZXdUYWciLCJmbG9hdDMyVGFnIiwiZmxvYXQ2NFRhZyIsImludDhUYWciLCJpbnQxNlRhZyIsImludDMyVGFnIiwidWludDhUYWciLCJ1aW50MTZUYWciLCJ1aW50MzJUYWciLCJyZUVtcHR5U3RyaW5nTGVhZGluZyIsInJlRW1wdHlTdHJpbmdNaWRkbGUiLCJyZUVtcHR5U3RyaW5nVHJhaWxpbmciLCJyZUVzY2FwZWRIdG1sIiwicmVVbmVzY2FwZWRIdG1sIiwicmVIYXNFc2NhcGVkSHRtbCIsIlJlZ0V4cCIsInNvdXJjZSIsInJlSGFzVW5lc2NhcGVkSHRtbCIsInJlRXNjYXBlIiwicmVFdmFsdWF0ZSIsInJlSW50ZXJwb2xhdGUiLCJyZUlzRGVlcFByb3AiLCJyZUlzUGxhaW5Qcm9wIiwicmVQcm9wTmFtZSIsInJlUmVnRXhwQ2hhciIsInJlSGFzUmVnRXhwQ2hhciIsInJlVHJpbSIsInJlVHJpbVN0YXJ0IiwicmVUcmltRW5kIiwicmVXcmFwQ29tbWVudCIsInJlV3JhcERldGFpbHMiLCJyZVNwbGl0RGV0YWlscyIsInJlQXNjaWlXb3JkIiwicmVFc2NhcGVDaGFyIiwicmVFc1RlbXBsYXRlIiwicmVGbGFncyIsInJlSXNCYWRIZXgiLCJyZUlzQmluYXJ5IiwicmVJc0hvc3RDdG9yIiwicmVJc09jdGFsIiwicmVJc1VpbnQiLCJyZUxhdGluIiwicmVOb01hdGNoIiwicmVVbmVzY2FwZWRTdHJpbmciLCJyc0NvbWJvUmFuZ2UiLCJyc0NvbWJvTWFya3NSYW5nZSIsInJzQnJlYWtSYW5nZSIsInJzTWF0aE9wUmFuZ2UiLCJyc0FzdHJhbCIsInJzQnJlYWsiLCJyc0NvbWJvIiwicnNEaWdpdHMiLCJyc0RpbmdiYXQiLCJyc0xvd2VyIiwicnNNaXNjIiwicnNGaXR6IiwicnNOb25Bc3RyYWwiLCJyc1JlZ2lvbmFsIiwicnNTdXJyUGFpciIsInJzVXBwZXIiLCJyc01pc2NMb3dlciIsInJzTWlzY1VwcGVyIiwicmVPcHRNb2QiLCJyc1NlcSIsImpvaW4iLCJyc0Vtb2ppIiwicnNTeW1ib2wiLCJyZUFwb3MiLCJyZUNvbWJvTWFyayIsInJlVW5pY29kZSIsInJlVW5pY29kZVdvcmQiLCJyZUhhc1VuaWNvZGUiLCJyZUhhc1VuaWNvZGVXb3JkIiwiY29udGV4dFByb3BzIiwidGVtcGxhdGVDb3VudGVyIiwidHlwZWRBcnJheVRhZ3MiLCJjbG9uZWFibGVUYWdzIiwic3RyaW5nRXNjYXBlcyIsImZyZWVQYXJzZUZsb2F0IiwicGFyc2VGbG9hdCIsImZyZWVQYXJzZUludCIsImZyZWVHbG9iYWwiLCJnbG9iYWwiLCJmcmVlU2VsZiIsInNlbGYiLCJyb290IiwiRnVuY3Rpb24iLCJmcmVlRXhwb3J0cyIsIm5vZGVUeXBlIiwiZnJlZU1vZHVsZSIsIm1vZHVsZUV4cG9ydHMiLCJmcmVlUHJvY2VzcyIsInByb2Nlc3MiLCJub2RlVXRpbCIsInR5cGVzIiwicmVxdWlyZSIsImJpbmRpbmciLCJlIiwibm9kZUlzQXJyYXlCdWZmZXIiLCJpc0FycmF5QnVmZmVyIiwibm9kZUlzRGF0ZSIsImlzRGF0ZSIsIm5vZGVJc01hcCIsImlzTWFwIiwibm9kZUlzUmVnRXhwIiwiaXNSZWdFeHAiLCJub2RlSXNTZXQiLCJpc1NldCIsIm5vZGVJc1R5cGVkQXJyYXkiLCJpc1R5cGVkQXJyYXkiLCJhcHBseSIsImZ1bmMiLCJ0aGlzQXJnIiwiYXJncyIsImFycmF5QWdncmVnYXRvciIsImFycmF5Iiwic2V0dGVyIiwiaXRlcmF0ZWUiLCJhY2N1bXVsYXRvciIsImluZGV4IiwiYXJyYXlFYWNoIiwiYXJyYXlFYWNoUmlnaHQiLCJhcnJheUV2ZXJ5IiwicHJlZGljYXRlIiwiYXJyYXlGaWx0ZXIiLCJyZXNJbmRleCIsInJlc3VsdCIsImFycmF5SW5jbHVkZXMiLCJiYXNlSW5kZXhPZiIsImFycmF5SW5jbHVkZXNXaXRoIiwiY29tcGFyYXRvciIsImFycmF5TWFwIiwiYXJyYXlQdXNoIiwidmFsdWVzIiwib2Zmc2V0IiwiYXJyYXlSZWR1Y2UiLCJpbml0QWNjdW0iLCJhcnJheVJlZHVjZVJpZ2h0IiwiYXJyYXlTb21lIiwiYXNjaWlTaXplIiwiYmFzZVByb3BlcnR5IiwiYmFzZUZpbmRLZXkiLCJjb2xsZWN0aW9uIiwiZWFjaEZ1bmMiLCJiYXNlRmluZEluZGV4IiwiZnJvbUluZGV4IiwiZnJvbVJpZ2h0Iiwic3RyaWN0SW5kZXhPZiIsImJhc2VJc05hTiIsImJhc2VJbmRleE9mV2l0aCIsImJhc2VNZWFuIiwiYmFzZVN1bSIsImJhc2VQcm9wZXJ0eU9mIiwiYmFzZVJlZHVjZSIsImN1cnJlbnQiLCJiYXNlVGltZXMiLCJiYXNlVW5hcnkiLCJiYXNlVmFsdWVzIiwicHJvcHMiLCJjYWNoZUhhcyIsImNhY2hlIiwiaGFzIiwiY2hhcnNTdGFydEluZGV4Iiwic3RyU3ltYm9scyIsImNoclN5bWJvbHMiLCJjaGFyc0VuZEluZGV4IiwiY291bnRIb2xkZXJzIiwicGxhY2Vob2xkZXIiLCJkZWJ1cnJMZXR0ZXIiLCJlc2NhcGVIdG1sQ2hhciIsImVzY2FwZVN0cmluZ0NoYXIiLCJjaHIiLCJoYXNVbmljb2RlIiwic3RyaW5nIiwidGVzdCIsIm1hcFRvQXJyYXkiLCJzaXplIiwib3ZlckFyZyIsInRyYW5zZm9ybSIsImFyZyIsInJlcGxhY2VIb2xkZXJzIiwic2V0VG9BcnJheSIsInNldCIsInNldFRvUGFpcnMiLCJzdHJpbmdTaXplIiwibGFzdEluZGV4IiwidW5pY29kZVNpemUiLCJzdHJpbmdUb0FycmF5IiwidW5pY29kZVRvQXJyYXkiLCJhc2NpaVRvQXJyYXkiLCJ1bmVzY2FwZUh0bWxDaGFyIiwicnVuSW5Db250ZXh0IiwiY29udGV4dCIsInVpZCIsImRlZmF1bHRzIiwicGljayIsIkRhdGUiLCJFcnJvciIsIlN0cmluZyIsIlR5cGVFcnJvciIsImFycmF5UHJvdG8iLCJmdW5jUHJvdG8iLCJvYmplY3RQcm90byIsImNvcmVKc0RhdGEiLCJmdW5jVG9TdHJpbmciLCJpZENvdW50ZXIiLCJtYXNrU3JjS2V5IiwiZXhlYyIsIklFX1BST1RPIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJvYmplY3RDdG9yU3RyaW5nIiwib2xkRGFzaCIsInJlSXNOYXRpdmUiLCJCdWZmZXIiLCJVaW50OEFycmF5IiwiYWxsb2NVbnNhZmUiLCJnZXRQcm90b3R5cGUiLCJnZXRQcm90b3R5cGVPZiIsIm9iamVjdENyZWF0ZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwic3BsaWNlIiwic3ByZWFkYWJsZVN5bWJvbCIsImlzQ29uY2F0U3ByZWFkYWJsZSIsInN5bUl0ZXJhdG9yIiwiaXRlcmF0b3IiLCJzeW1Ub1N0cmluZ1RhZyIsImdldE5hdGl2ZSIsImN0eENsZWFyVGltZW91dCIsImNsZWFyVGltZW91dCIsImN0eE5vdyIsIm5vdyIsImN0eFNldFRpbWVvdXQiLCJzZXRUaW1lb3V0IiwibmF0aXZlQ2VpbCIsImNlaWwiLCJuYXRpdmVGbG9vciIsImZsb29yIiwibmF0aXZlR2V0U3ltYm9scyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm5hdGl2ZUlzQnVmZmVyIiwiaXNCdWZmZXIiLCJuYXRpdmVJc0Zpbml0ZSIsImlzRmluaXRlIiwibmF0aXZlSm9pbiIsIm5hdGl2ZUtleXMiLCJuYXRpdmVNYXgiLCJuYXRpdmVNaW4iLCJuYXRpdmVOb3ciLCJuYXRpdmVQYXJzZUludCIsIm5hdGl2ZVJhbmRvbSIsIm5hdGl2ZVJldmVyc2UiLCJyZXZlcnNlIiwiRGF0YVZpZXciLCJNYXAiLCJTZXQiLCJXZWFrTWFwIiwibmF0aXZlQ3JlYXRlIiwibWV0YU1hcCIsInJlYWxOYW1lcyIsImRhdGFWaWV3Q3RvclN0cmluZyIsInRvU291cmNlIiwibWFwQ3RvclN0cmluZyIsInByb21pc2VDdG9yU3RyaW5nIiwic2V0Q3RvclN0cmluZyIsIndlYWtNYXBDdG9yU3RyaW5nIiwic3ltYm9sUHJvdG8iLCJzeW1ib2xWYWx1ZU9mIiwidmFsdWVPZiIsInN5bWJvbFRvU3RyaW5nIiwibG9kYXNoIiwiaXNPYmplY3RMaWtlIiwiTGF6eVdyYXBwZXIiLCJMb2Rhc2hXcmFwcGVyIiwid3JhcHBlckNsb25lIiwiYmFzZUNyZWF0ZSIsInByb3RvIiwiaXNPYmplY3QiLCJiYXNlTG9kYXNoIiwiY2hhaW5BbGwiLCJfX3dyYXBwZWRfXyIsIl9fYWN0aW9uc19fIiwiX19jaGFpbl9fIiwiX19pbmRleF9fIiwiX192YWx1ZXNfXyIsIl9fZGlyX18iLCJfX2ZpbHRlcmVkX18iLCJfX2l0ZXJhdGVlc19fIiwiX190YWtlQ291bnRfXyIsIl9fdmlld3NfXyIsIkhhc2giLCJlbnRyaWVzIiwiZW50cnkiLCJMaXN0Q2FjaGUiLCJNYXBDYWNoZSIsIlNldENhY2hlIiwiX19kYXRhX18iLCJTdGFjayIsImRhdGEiLCJhcnJheUxpa2VLZXlzIiwiaW5oZXJpdGVkIiwiaXNBcnIiLCJpc0FyZyIsImlzQXJndW1lbnRzIiwiaXNCdWZmIiwiaXNUeXBlIiwic2tpcEluZGV4ZXMiLCJpc0luZGV4IiwiYXJyYXlTYW1wbGUiLCJiYXNlUmFuZG9tIiwiYXJyYXlTYW1wbGVTaXplIiwic2h1ZmZsZVNlbGYiLCJjb3B5QXJyYXkiLCJiYXNlQ2xhbXAiLCJhcnJheVNodWZmbGUiLCJhc3NpZ25NZXJnZVZhbHVlIiwiZXEiLCJiYXNlQXNzaWduVmFsdWUiLCJhc3NpZ25WYWx1ZSIsIm9ialZhbHVlIiwiYXNzb2NJbmRleE9mIiwiYmFzZUFnZ3JlZ2F0b3IiLCJiYXNlRWFjaCIsImJhc2VBc3NpZ24iLCJjb3B5T2JqZWN0IiwiYmFzZUF0IiwicGF0aHMiLCJza2lwIiwibnVtYmVyIiwidXBwZXIiLCJiYXNlQ2xvbmUiLCJiaXRtYXNrIiwiY3VzdG9taXplciIsInN0YWNrIiwiaXNEZWVwIiwiaXNGbGF0IiwiaXNGdWxsIiwiY29uc3RydWN0b3IiLCJpbnB1dCIsImluaXRDbG9uZUFycmF5IiwidGFnIiwiZ2V0VGFnIiwiaXNGdW5jIiwiY2xvbmVCdWZmZXIiLCJpbml0Q2xvbmVPYmplY3QiLCJnZXRTeW1ib2xzSW4iLCJjb3B5U3ltYm9sc0luIiwia2V5c0luIiwiYmFzZUFzc2lnbkluIiwiZ2V0U3ltYm9scyIsImNvcHlTeW1ib2xzIiwiQ3RvciIsImNsb25lQXJyYXlCdWZmZXIiLCJkYXRhVmlldyIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwiY2xvbmVEYXRhVmlldyIsImNsb25lVHlwZWRBcnJheSIsInJlZ2V4cCIsImNsb25lUmVnRXhwIiwic3ltYm9sIiwiaW5pdENsb25lQnlUYWciLCJzdGFja2VkIiwic3ViVmFsdWUiLCJnZXRBbGxLZXlzSW4iLCJnZXRBbGxLZXlzIiwiYmFzZUNvbmZvcm1zVG8iLCJiYXNlRGVsYXkiLCJ3YWl0IiwiYmFzZURpZmZlcmVuY2UiLCJpbmNsdWRlcyIsImlzQ29tbW9uIiwidmFsdWVzTGVuZ3RoIiwib3V0ZXIiLCJjb21wdXRlZCIsInZhbHVlc0luZGV4IiwidGVtcGxhdGVTZXR0aW5ncyIsImdldE1hcERhdGEiLCJwYWlycyIsIkxBUkdFX0FSUkFZX1NJWkUiLCJjcmVhdGVCYXNlRWFjaCIsImJhc2VGb3JPd24iLCJiYXNlRWFjaFJpZ2h0IiwiYmFzZUZvck93blJpZ2h0IiwiYmFzZUV2ZXJ5IiwiYmFzZUV4dHJlbXVtIiwiaXNTeW1ib2wiLCJiYXNlRmlsdGVyIiwiYmFzZUZsYXR0ZW4iLCJkZXB0aCIsImlzU3RyaWN0IiwiaXNGbGF0dGVuYWJsZSIsImJhc2VGb3IiLCJjcmVhdGVCYXNlRm9yIiwiYmFzZUZvclJpZ2h0IiwiYmFzZUZ1bmN0aW9ucyIsImlzRnVuY3Rpb24iLCJiYXNlR2V0IiwicGF0aCIsImNhc3RQYXRoIiwidG9LZXkiLCJiYXNlR2V0QWxsS2V5cyIsImtleXNGdW5jIiwic3ltYm9sc0Z1bmMiLCJiYXNlR2V0VGFnIiwiaXNPd24iLCJ1bm1hc2tlZCIsImdldFJhd1RhZyIsIm9iamVjdFRvU3RyaW5nIiwiYmFzZUd0Iiwib3RoZXIiLCJiYXNlSGFzIiwiYmFzZUhhc0luIiwiYmFzZUludGVyc2VjdGlvbiIsImFycmF5cyIsIm90aExlbmd0aCIsIm90aEluZGV4IiwiY2FjaGVzIiwibWF4TGVuZ3RoIiwiSW5maW5pdHkiLCJzZWVuIiwiYmFzZUludm9rZSIsImxhc3QiLCJiYXNlSXNBcmd1bWVudHMiLCJiYXNlSXNFcXVhbCIsImVxdWFsRnVuYyIsIm9iaklzQXJyIiwib3RoSXNBcnIiLCJvYmpUYWciLCJvdGhUYWciLCJvYmpJc09iaiIsIm90aElzT2JqIiwiaXNTYW1lVGFnIiwiZXF1YWxBcnJheXMiLCJtZXNzYWdlIiwiY29udmVydCIsImlzUGFydGlhbCIsImVxdWFsQnlUYWciLCJvYmpJc1dyYXBwZWQiLCJvdGhJc1dyYXBwZWQiLCJvYmpVbndyYXBwZWQiLCJvdGhVbndyYXBwZWQiLCJvYmpQcm9wcyIsIm9iakxlbmd0aCIsIm9ialN0YWNrZWQiLCJvdGhTdGFja2VkIiwic2tpcEN0b3IiLCJvdGhWYWx1ZSIsImNvbXBhcmVkIiwib2JqQ3RvciIsIm90aEN0b3IiLCJlcXVhbE9iamVjdHMiLCJiYXNlSXNFcXVhbERlZXAiLCJiYXNlSXNNYXRjaCIsIm1hdGNoRGF0YSIsIm5vQ3VzdG9taXplciIsInNyY1ZhbHVlIiwiQ09NUEFSRV9QQVJUSUFMX0ZMQUciLCJiYXNlSXNOYXRpdmUiLCJiYXNlSXRlcmF0ZWUiLCJpZGVudGl0eSIsImJhc2VNYXRjaGVzUHJvcGVydHkiLCJiYXNlTWF0Y2hlcyIsImJhc2VLZXlzIiwiaXNQcm90b3R5cGUiLCJiYXNlS2V5c0luIiwibmF0aXZlS2V5c0luIiwiaXNQcm90byIsImJhc2VMdCIsImJhc2VNYXAiLCJpc0FycmF5TGlrZSIsImdldE1hdGNoRGF0YSIsIm1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIiwiaXNLZXkiLCJpc1N0cmljdENvbXBhcmFibGUiLCJoYXNJbiIsImJhc2VNZXJnZSIsInNyY0luZGV4IiwibWVyZ2VGdW5jIiwic2FmZUdldCIsIm5ld1ZhbHVlIiwiaXNUeXBlZCIsImlzQXJyYXlMaWtlT2JqZWN0IiwiaXNQbGFpbk9iamVjdCIsInRvUGxhaW5PYmplY3QiLCJiYXNlTWVyZ2VEZWVwIiwiYmFzZU50aCIsImJhc2VPcmRlckJ5IiwiaXRlcmF0ZWVzIiwib3JkZXJzIiwiZ2V0SXRlcmF0ZWUiLCJjb21wYXJlciIsInNvcnQiLCJiYXNlU29ydEJ5Iiwib2JqQ3JpdGVyaWEiLCJjcml0ZXJpYSIsIm90aENyaXRlcmlhIiwib3JkZXJzTGVuZ3RoIiwiY29tcGFyZUFzY2VuZGluZyIsIm9yZGVyIiwiY29tcGFyZU11bHRpcGxlIiwiYmFzZVBpY2tCeSIsImJhc2VTZXQiLCJiYXNlUHVsbEFsbCIsImluZGV4T2YiLCJiYXNlUHVsbEF0IiwiaW5kZXhlcyIsInByZXZpb3VzIiwiYmFzZVVuc2V0IiwiYmFzZVJlcGVhdCIsImJhc2VSZXN0Iiwic3RhcnQiLCJzZXRUb1N0cmluZyIsIm92ZXJSZXN0IiwiYmFzZVNhbXBsZSIsImJhc2VTYW1wbGVTaXplIiwibmVzdGVkIiwiYmFzZVNldERhdGEiLCJiYXNlU2V0VG9TdHJpbmciLCJjb25zdGFudCIsImJhc2VTaHVmZmxlIiwiYmFzZVNsaWNlIiwiZW5kIiwiYmFzZVNvbWUiLCJiYXNlU29ydGVkSW5kZXgiLCJyZXRIaWdoZXN0IiwibG93IiwiaGlnaCIsIk1BWF9BUlJBWV9MRU5HVEgiLCJtaWQiLCJiYXNlU29ydGVkSW5kZXhCeSIsInZhbElzTmFOIiwidmFsSXNOdWxsIiwidmFsSXNTeW1ib2wiLCJ2YWxJc1VuZGVmaW5lZCIsIm90aElzRGVmaW5lZCIsIm90aElzTnVsbCIsIm90aElzUmVmbGV4aXZlIiwib3RoSXNTeW1ib2wiLCJzZXRMb3ciLCJiYXNlU29ydGVkVW5pcSIsImJhc2VUb051bWJlciIsImJhc2VUb1N0cmluZyIsImJhc2VVbmlxIiwiY3JlYXRlU2V0Iiwic2VlbkluZGV4IiwiYmFzZVVwZGF0ZSIsInVwZGF0ZXIiLCJiYXNlV2hpbGUiLCJpc0Ryb3AiLCJiYXNlV3JhcHBlclZhbHVlIiwiYWN0aW9ucyIsImFjdGlvbiIsImJhc2VYb3IiLCJiYXNlWmlwT2JqZWN0IiwiYXNzaWduRnVuYyIsInZhbHNMZW5ndGgiLCJjYXN0QXJyYXlMaWtlT2JqZWN0IiwiY2FzdEZ1bmN0aW9uIiwic3RyaW5nVG9QYXRoIiwiY2FzdFJlc3QiLCJjYXN0U2xpY2UiLCJpZCIsImNvcHkiLCJhcnJheUJ1ZmZlciIsInR5cGVkQXJyYXkiLCJ2YWxJc0RlZmluZWQiLCJ2YWxJc1JlZmxleGl2ZSIsImNvbXBvc2VBcmdzIiwicGFydGlhbHMiLCJob2xkZXJzIiwiaXNDdXJyaWVkIiwiYXJnc0luZGV4IiwiYXJnc0xlbmd0aCIsImhvbGRlcnNMZW5ndGgiLCJsZWZ0SW5kZXgiLCJsZWZ0TGVuZ3RoIiwicmFuZ2VMZW5ndGgiLCJpc1VuY3VycmllZCIsImNvbXBvc2VBcmdzUmlnaHQiLCJob2xkZXJzSW5kZXgiLCJyaWdodEluZGV4IiwicmlnaHRMZW5ndGgiLCJpc05ldyIsImNyZWF0ZUFnZ3JlZ2F0b3IiLCJpbml0aWFsaXplciIsImNyZWF0ZUFzc2lnbmVyIiwiYXNzaWduZXIiLCJzb3VyY2VzIiwiZ3VhcmQiLCJpc0l0ZXJhdGVlQ2FsbCIsIml0ZXJhYmxlIiwiY3JlYXRlQ2FzZUZpcnN0IiwibWV0aG9kTmFtZSIsImNoYXJBdCIsInRyYWlsaW5nIiwiY3JlYXRlQ29tcG91bmRlciIsImRlYnVyciIsImNyZWF0ZUN0b3IiLCJhcmd1bWVudHMiLCJ0aGlzQmluZGluZyIsImNyZWF0ZUZpbmQiLCJmaW5kSW5kZXhGdW5jIiwiY3JlYXRlRmxvdyIsImZsYXRSZXN0IiwiZnVuY3MiLCJwcmVyZXEiLCJ0aHJ1Iiwid3JhcHBlciIsImdldEZ1bmNOYW1lIiwiZnVuY05hbWUiLCJnZXREYXRhIiwiaXNMYXppYWJsZSIsInBsYW50IiwiY3JlYXRlSHlicmlkIiwicGFydGlhbHNSaWdodCIsImhvbGRlcnNSaWdodCIsImFyZ1BvcyIsImFyeSIsImFyaXR5IiwiaXNBcnkiLCJpc0JpbmQiLCJpc0JpbmRLZXkiLCJpc0ZsaXAiLCJnZXRIb2xkZXIiLCJob2xkZXJzQ291bnQiLCJuZXdIb2xkZXJzIiwiY3JlYXRlUmVjdXJyeSIsImZuIiwicmVvcmRlciIsImNyZWF0ZUludmVydGVyIiwidG9JdGVyYXRlZSIsImJhc2VJbnZlcnRlciIsImNyZWF0ZU1hdGhPcGVyYXRpb24iLCJvcGVyYXRvciIsImRlZmF1bHRWYWx1ZSIsImNyZWF0ZU92ZXIiLCJhcnJheUZ1bmMiLCJjcmVhdGVQYWRkaW5nIiwiY2hhcnMiLCJjaGFyc0xlbmd0aCIsImNyZWF0ZVJhbmdlIiwic3RlcCIsInRvRmluaXRlIiwiYmFzZVJhbmdlIiwiY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbiIsInRvTnVtYmVyIiwid3JhcEZ1bmMiLCJpc0N1cnJ5IiwibmV3RGF0YSIsInNldERhdGEiLCJzZXRXcmFwVG9TdHJpbmciLCJjcmVhdGVSb3VuZCIsInByZWNpc2lvbiIsInRvSW50ZWdlciIsInBhaXIiLCJub29wIiwiY3JlYXRlVG9QYWlycyIsImJhc2VUb1BhaXJzIiwiY3JlYXRlV3JhcCIsInNyY0JpdG1hc2siLCJuZXdCaXRtYXNrIiwiaXNDb21ibyIsIm1lcmdlRGF0YSIsImNyZWF0ZUN1cnJ5IiwiY3JlYXRlUGFydGlhbCIsImNyZWF0ZUJpbmQiLCJjdXN0b21EZWZhdWx0c0Fzc2lnbkluIiwiY3VzdG9tRGVmYXVsdHNNZXJnZSIsImN1c3RvbU9taXRDbG9uZSIsImFyckxlbmd0aCIsImFyclN0YWNrZWQiLCJhcnJWYWx1ZSIsImZsYXR0ZW4iLCJvdGhlckZ1bmMiLCJ0eXBlIiwiZ2V0VmFsdWUiLCJzdHViQXJyYXkiLCJoYXNQYXRoIiwiaGFzRnVuYyIsImlzTGVuZ3RoIiwiQXJyYXlCdWZmZXIiLCJjdG9yU3RyaW5nIiwiaXNNYXNrYWJsZSIsInN0dWJGYWxzZSIsIm90aGVyQXJncyIsIm9sZEFycmF5Iiwic2hvcnRPdXQiLCJyZWZlcmVuY2UiLCJkZXRhaWxzIiwiaW5zZXJ0V3JhcERldGFpbHMiLCJ1cGRhdGVXcmFwRGV0YWlscyIsImdldFdyYXBEZXRhaWxzIiwiY291bnQiLCJsYXN0Q2FsbGVkIiwic3RhbXAiLCJyZW1haW5pbmciLCJyYW5kIiwibWVtb2l6ZSIsIm1lbW9pemVDYXBwZWQiLCJjaGFyQ29kZUF0IiwicXVvdGUiLCJzdWJTdHJpbmciLCJjbG9uZSIsImRpZmZlcmVuY2UiLCJkaWZmZXJlbmNlQnkiLCJkaWZmZXJlbmNlV2l0aCIsImZpbmRJbmRleCIsImZpbmRMYXN0SW5kZXgiLCJoZWFkIiwiaW50ZXJzZWN0aW9uIiwibWFwcGVkIiwiaW50ZXJzZWN0aW9uQnkiLCJpbnRlcnNlY3Rpb25XaXRoIiwicHVsbCIsInB1bGxBbGwiLCJwdWxsQXQiLCJ1bmlvbiIsInVuaW9uQnkiLCJ1bmlvbldpdGgiLCJ1bnppcCIsInVuemlwV2l0aCIsIndpdGhvdXQiLCJ4b3IiLCJ4b3JCeSIsInhvcldpdGgiLCJ6aXAiLCJ6aXBXaXRoIiwiY2hhaW4iLCJpbnRlcmNlcHRvciIsIndyYXBwZXJBdCIsImNvdW50QnkiLCJmaW5kIiwiZmluZExhc3QiLCJmb3JFYWNoUmlnaHQiLCJncm91cEJ5IiwiaW52b2tlTWFwIiwia2V5QnkiLCJwYXJ0aXRpb24iLCJzb3J0QnkiLCJiZWZvcmUiLCJiaW5kS2V5IiwiV1JBUF9CSU5EX0ZMQUciLCJkZWJvdW5jZSIsIm9wdGlvbnMiLCJsYXN0QXJncyIsImxhc3RUaGlzIiwibWF4V2FpdCIsInRpbWVySWQiLCJsYXN0Q2FsbFRpbWUiLCJsYXN0SW52b2tlVGltZSIsImxlYWRpbmciLCJtYXhpbmciLCJpbnZva2VGdW5jIiwibGVhZGluZ0VkZ2UiLCJ0aW1lckV4cGlyZWQiLCJzaG91bGRJbnZva2UiLCJ0aW1lU2luY2VMYXN0Q2FsbCIsInRyYWlsaW5nRWRnZSIsInRpbWVXYWl0aW5nIiwicmVtYWluaW5nV2FpdCIsImRlYm91bmNlZCIsImlzSW52b2tpbmciLCJjYW5jZWwiLCJmbHVzaCIsImRlZmVyIiwiZGVsYXkiLCJyZXNvbHZlciIsIm1lbW9pemVkIiwiQ2FjaGUiLCJuZWdhdGUiLCJvdmVyQXJncyIsInRyYW5zZm9ybXMiLCJmdW5jc0xlbmd0aCIsInBhcnRpYWwiLCJwYXJ0aWFsUmlnaHQiLCJyZWFyZyIsImd0IiwiZ3RlIiwiaXNFcnJvciIsImlzSW50ZWdlciIsImlzTnVtYmVyIiwiaXNTdHJpbmciLCJsdCIsImx0ZSIsInRvQXJyYXkiLCJuZXh0IiwiZG9uZSIsIml0ZXJhdG9yVG9BcnJheSIsInJlbWFpbmRlciIsInRvTGVuZ3RoIiwiaXNCaW5hcnkiLCJhc3NpZ24iLCJhc3NpZ25JbiIsImFzc2lnbkluV2l0aCIsImFzc2lnbldpdGgiLCJhdCIsInByb3BzSW5kZXgiLCJwcm9wc0xlbmd0aCIsImRlZmF1bHRzRGVlcCIsIm1lcmdlV2l0aCIsImludmVydCIsImludmVydEJ5IiwiaW52b2tlIiwibWVyZ2UiLCJvbWl0IiwiQ0xPTkVfREVFUF9GTEFHIiwiYmFzZVBpY2siLCJwaWNrQnkiLCJwcm9wIiwidG9QYWlycyIsInRvUGFpcnNJbiIsImNhbWVsQ2FzZSIsIndvcmQiLCJjYXBpdGFsaXplIiwidXBwZXJGaXJzdCIsImtlYmFiQ2FzZSIsImxvd2VyQ2FzZSIsImxvd2VyRmlyc3QiLCJzbmFrZUNhc2UiLCJzdGFydENhc2UiLCJ1cHBlckNhc2UiLCJwYXR0ZXJuIiwiaGFzVW5pY29kZVdvcmQiLCJ1bmljb2RlV29yZHMiLCJhc2NpaVdvcmRzIiwiYXR0ZW1wdCIsImJpbmRBbGwiLCJtZXRob2ROYW1lcyIsImZsb3ciLCJmbG93UmlnaHQiLCJtZXRob2QiLCJtZXRob2RPZiIsIm1peGluIiwib3ZlciIsIm92ZXJFdmVyeSIsIm92ZXJTb21lIiwiYmFzZVByb3BlcnR5RGVlcCIsInJhbmdlIiwicmFuZ2VSaWdodCIsImF1Z2VuZCIsImFkZGVuZCIsImRpdmlkZSIsImRpdmlkZW5kIiwiZGl2aXNvciIsIm11bHRpcGx5IiwibXVsdGlwbGllciIsIm11bHRpcGxpY2FuZCIsInJvdW5kIiwic3VidHJhY3QiLCJtaW51ZW5kIiwic3VidHJhaGVuZCIsImFmdGVyIiwiY2FzdEFycmF5IiwiY2h1bmsiLCJjb21wYWN0IiwiY29uZCIsImNvbmZvcm1zIiwiYmFzZUNvbmZvcm1zIiwicHJvcGVydGllcyIsImN1cnJ5IiwiY3VycnlSaWdodCIsImRyb3AiLCJkcm9wUmlnaHQiLCJkcm9wUmlnaHRXaGlsZSIsImRyb3BXaGlsZSIsImZpbGwiLCJiYXNlRmlsbCIsImZpbHRlciIsImZsYXRNYXAiLCJmbGF0TWFwRGVlcCIsImZsYXRNYXBEZXB0aCIsImZsYXR0ZW5EZWVwIiwiZmxhdHRlbkRlcHRoIiwiZmxpcCIsImZyb21QYWlycyIsImZ1bmN0aW9ucyIsImZ1bmN0aW9uc0luIiwiaW5pdGlhbCIsIm1hcEtleXMiLCJtYXBWYWx1ZXMiLCJtYXRjaGVzIiwibWF0Y2hlc1Byb3BlcnR5IiwibnRoQXJnIiwib21pdEJ5Iiwib25jZSIsIm9yZGVyQnkiLCJwcm9wZXJ0eU9mIiwicHVsbEFsbEJ5IiwicHVsbEFsbFdpdGgiLCJyZWplY3QiLCJyZXN0Iiwic2FtcGxlU2l6ZSIsInNldFdpdGgiLCJzaHVmZmxlIiwic29ydGVkVW5pcSIsInNvcnRlZFVuaXFCeSIsInNlcGFyYXRvciIsImxpbWl0Iiwic3ByZWFkIiwidGFpbCIsInRha2UiLCJ0YWtlUmlnaHQiLCJ0YWtlUmlnaHRXaGlsZSIsInRha2VXaGlsZSIsInRhcCIsInRocm90dGxlIiwidG9QYXRoIiwiaXNBcnJMaWtlIiwidW5hcnkiLCJ1bmlxIiwidW5pcUJ5IiwidW5pcVdpdGgiLCJ1bnNldCIsInVwZGF0ZSIsInVwZGF0ZVdpdGgiLCJ2YWx1ZXNJbiIsIndyYXAiLCJ6aXBPYmplY3QiLCJ6aXBPYmplY3REZWVwIiwiZW50cmllc0luIiwiZXh0ZW5kIiwiZXh0ZW5kV2l0aCIsImNsYW1wIiwiY2xvbmVEZWVwIiwiY2xvbmVEZWVwV2l0aCIsImNsb25lV2l0aCIsImNvbmZvcm1zVG8iLCJkZWZhdWx0VG8iLCJlbmRzV2l0aCIsInRhcmdldCIsImVzY2FwZSIsImVzY2FwZVJlZ0V4cCIsImV2ZXJ5IiwiZmluZEtleSIsImZpbmRMYXN0S2V5IiwiZm9ySW4iLCJmb3JJblJpZ2h0IiwiZm9yT3duIiwiZm9yT3duUmlnaHQiLCJpblJhbmdlIiwiYmFzZUluUmFuZ2UiLCJpc0Jvb2xlYW4iLCJpc0VsZW1lbnQiLCJpc0VtcHR5IiwiaXNFcXVhbCIsImlzRXF1YWxXaXRoIiwiaXNNYXRjaCIsImlzTWF0Y2hXaXRoIiwiaXNOYU4iLCJpc05hdGl2ZSIsImlzTmlsIiwiaXNOdWxsIiwiaXNTYWZlSW50ZWdlciIsImlzVW5kZWZpbmVkIiwiaXNXZWFrTWFwIiwiaXNXZWFrU2V0IiwibGFzdEluZGV4T2YiLCJzdHJpY3RMYXN0SW5kZXhPZiIsIm1heEJ5IiwibWVhbiIsIm1lYW5CeSIsIm1pbkJ5Iiwic3R1Yk9iamVjdCIsInN0dWJTdHJpbmciLCJzdHViVHJ1ZSIsIm50aCIsIm5vQ29uZmxpY3QiLCJwYWQiLCJzdHJMZW5ndGgiLCJwYWRFbmQiLCJwYWRTdGFydCIsInJhZGl4IiwiZmxvYXRpbmciLCJ0ZW1wIiwicmVkdWNlIiwicmVkdWNlUmlnaHQiLCJzYW1wbGUiLCJzb21lIiwic29ydGVkSW5kZXgiLCJzb3J0ZWRJbmRleEJ5Iiwic29ydGVkSW5kZXhPZiIsInNvcnRlZExhc3RJbmRleCIsInNvcnRlZExhc3RJbmRleEJ5Iiwic29ydGVkTGFzdEluZGV4T2YiLCJzdGFydHNXaXRoIiwic3VtIiwic3VtQnkiLCJ0ZW1wbGF0ZSIsInNldHRpbmdzIiwiaXNFc2NhcGluZyIsImlzRXZhbHVhdGluZyIsImltcG9ydHMiLCJpbXBvcnRzS2V5cyIsImltcG9ydHNWYWx1ZXMiLCJpbnRlcnBvbGF0ZSIsInJlRGVsaW1pdGVycyIsImV2YWx1YXRlIiwic291cmNlVVJMIiwiZXNjYXBlVmFsdWUiLCJpbnRlcnBvbGF0ZVZhbHVlIiwiZXNUZW1wbGF0ZVZhbHVlIiwiZXZhbHVhdGVWYWx1ZSIsInZhcmlhYmxlIiwidGltZXMiLCJ0b0xvd2VyIiwidG9TYWZlSW50ZWdlciIsInRvVXBwZXIiLCJ0cmltIiwidHJpbUVuZCIsInRyaW1TdGFydCIsInRydW5jYXRlIiwib21pc3Npb24iLCJzZWFyY2giLCJzdWJzdHJpbmciLCJuZXdFbmQiLCJ1bmVzY2FwZSIsInVuaXF1ZUlkIiwicHJlZml4IiwiZWFjaCIsImVhY2hSaWdodCIsImZpcnN0IiwiVkVSU0lPTiIsImlzRmlsdGVyIiwidGFrZU5hbWUiLCJkcm9wTmFtZSIsImNoZWNrSXRlcmF0ZWUiLCJpc1Rha2VyIiwibG9kYXNoRnVuYyIsInJldFVud3JhcHBlZCIsImlzTGF6eSIsInVzZUxhenkiLCJpc0h5YnJpZCIsImlzVW53cmFwcGVkIiwib25seUxhenkiLCJjaGFpbk5hbWUiLCJkaXIiLCJpc1JpZ2h0IiwidmlldyIsImdldFZpZXciLCJpdGVyTGVuZ3RoIiwidGFrZUNvdW50IiwiaXRlckluZGV4IiwiY29tbWl0Iiwid3JhcHBlZCIsInRvSlNPTiIsIlBvaW50VmFyaWFudHMiLCJXaWdnbGVWYXJpYW50cyIsIkN1cnNvck1hbmFnZXIiLCJ2aXNpYmxlIiwiY3Vyc29yIiwiYW5jaG9yIiwiYWN0aXZlX3R3ZWVuIiwiY3Vyc29yX2RlZmF1bHRfcG9zIiwiY3Vyc29yX2ZsaXBwZWQiLCJjb25maWciLCJjbGVhcl90d2VlbnMiLCJzaG93IiwiV0lHR0xFIiwiS0VZIiwid2lnZ2xlX3gxIiwiWDEiLCJ3aWdnbGVfeDIiLCJYMiIsIndpZ2dsZV95MSIsIlkxIiwid2lnZ2xlX3kyIiwiWTIiLCJ3aWdnbGVfdGltZSIsIkRFRkFVTFRfVElNRSIsImxvb3AiLCJQT0lOVCIsInZhcmlhbnQiLCJOT1JNQUwiLCJwb2ludF94IiwiWCIsInBvaW50X3kiLCJZIiwicG9pbnRfdGltZSIsImJyaW5nX3RvX3RvcCIsIm9uX2NvbXBsZXRlIiwidHdlZW5fY29uZmlnIiwibW92ZV90aW1lIiwiREVGQVVMVF9NT1ZFX1RJTUUiLCJmbGlwX2N1cnNvciIsIlhfU0hJRlQiLCJpbml0X3R3ZWVuIiwidHdlZW5zIiwic2NhbGUiLCJ3b3JsZCIsIkN1cnNvclR3ZWVucyIsIjAiLCIxIiwiMiIsImZpZ2h0ZXJfdHlwZXMiLCJ0ZW1wb3Jhcnlfc3RhdHVzIiwicGVybWFuZW50X3N0YXR1cyIsIm1haW5fc3RhdHMiLCJlZmZlY3RfdHlwZV9zdGF0IiwiZWZmZWN0X3R5cGVzIiwiTUFYX0hQIiwiTUFYX1BQIiwiQVRUQUNLIiwiREVGRU5TRSIsIkFHSUxJVFkiLCJMVUNLIiwiQ1VSUkVOVF9IUCIsIkNVUlJFTlRfUFAiLCJvbl9jYXRjaF9zdGF0dXNfbXNnIiwiREVMVVNJT04iLCJTVFVOIiwiU0xFRVAiLCJTRUFMIiwiREVBVEhfQ1VSU0UiLCJET1dORUQiLCJmaWdodGVyX3R5cGUiLCJBTExZIiwiUE9JU09OIiwiVkVOT00iLCJIQVVOVCIsIm9uX3JlbW92ZV9zdGF0dXNfbXNnIiwib3JkZXJlZF9zdGF0dXNfYmF0dGxlIiwiRVFVSVBfQ1VSU0UiLCJvcmRlcmVkX3N0YXR1c19tZW51Iiwib3JkZXJlZF9tYWluX3N0YXRzIiwiZWZmZWN0cyIsImluaXRfZWZmZWN0X3R1cm5zX2NvdW50IiwiZWZmZWN0X3R1cm5zX2NvdW50IiwiUE9XRVIiLCJSRVNJU1QiLCJlbGVtZW50IiwiZWZmZWN0IiwiVEVNUE9SQVJZX1NUQVRVUyIsInN0YXR1c19rZXlfbmFtZSIsImF0dHJpYnV0ZSIsImVmZmVjdF9vYmoiLCJlZmZlY3Rfb3duZXJfaW5zdGFuY2UiLCJjaGFuZ2VzIiwiRWZmZWN0IiwicXVhbnRpdHlfaXNfYWJzb2x1dGUiLCJyYXRlIiwiY2hhbmNlIiwiYWRkX3N0YXR1cyIsInR1cm5zX3F1YW50aXR5IiwidmFyaWF0aW9uX29uX2ZpbmFsX3Jlc3VsdCIsImRhbWFnZV9mb3JtdWxhX2tleV9uYW1lIiwidXNhZ2UiLCJvbl9jYXN0ZXIiLCJyZWxhdGl2ZV90b19wcm9wZXJ0eSIsInN1Yl9lZmZlY3QiLCJlZmZlY3RfbXNnIiwic2hvd19tc2ciLCJhcHBseV9lZmZlY3QiLCJlZmZlY3RfdG9fcmVtb3ZlIiwic3RhdHVzIiwiZGVsZXRlIiwiZXZlbnRfdHlwZXMiLCJUaWxlRXZlbnQiLCJhY3RpdmF0aW9uX2RpcmVjdGlvbnMiLCJhY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMiLCJkeW5hbWljIiwiYWN0aXZlIiwib3JpZ2luX2ludGVyYWN0YWJsZV9vYmplY3QiLCJsb2NhdGlvbl9rZXkiLCJnZXRfbG9jYXRpb25fa2V5IiwiaWRfaW5jcmVtZW50ZXIiLCJnZXRfZGlyZWN0aW9ucyIsInBvc3NpYmxlX2RpcmVjdGlvbnMiLCJzcGxpdF9kaXJlY3Rpb24iLCJoZXJvIiwidGlsZV94X3BvcyIsInRpbGVfeV9wb3MiLCJyZXNldCIsImRqaW5uX3N0YXR1cyIsImRqaW5uX2ZvbnRfY29sb3JzIiwiUkVDT1ZFUlkiLCJTVEFOREJZIiwiU0VUIiwiZGVzY3JpcHRpb24iLCJhYmlsaXR5X2tleV9uYW1lIiwiaHBfYm9vc3QiLCJwcF9ib29zdCIsImF0a19ib29zdCIsImRlZl9ib29zdCIsImFnaV9ib29zdCIsImx1a19ib29zdCIsInJlY292ZXJ5X3R1cm4iLCJjaGFyIiwidXBkYXRlX2VsZW1lbnRhbF9hdHRyaWJ1dGVzIiwidXBkYXRlX2NsYXNzIiwidXBkYXRlX2F0dHJpYnV0ZXMiLCJ1cGRhdGVfYWJpbGl0aWVzIiwiZGppbm5pX2xpc3QiLCJtZW1iZXJzIiwiZGppbm5pIiwiZGppbm5fa2V5cyIsInN0YW5kYnlfZGppbm5pIiwiZmxhdCIsImRqaW5uaV9rZXlzIiwicmVxdWlyZW1lbnRzIiwicmVxX2NvdW50ZXIiLCJwbGF5ZXIiLCJwbGF5ZXJfZGppbm5pIiwicmVjb3ZlcnlfY291bnRlciIsImoiLCJkamlubiIsInNldF9zdGF0dXMiLCJCb29sZWFuIiwiaXRlbV90eXBlcyIsInVzZV90eXBlcyIsIkl0ZW0iLCJ1c2VfdHlwZSIsImN1cnNlc193aGVuX2VxdWlwcGVkIiwiY2FudF9iZV9yZW1vdmVkIiwicmFyZV9pdGVtIiwiaW1wb3J0YW50X2l0ZW0iLCJjYXJyeV91cF90b18zMCIsInVubGVhc2hfYWJpbGl0eSIsInVubGVhc2hfcmF0ZSIsInVzZV9hYmlsaXR5IiwiZXF1aXBhYmxlX2NoYXJzIiwicHJpY2UiLCJncmFudGVkX2FiaWxpdHkiLCJlcXVpcGFibGUiLCJHRU5FUkFMX0lURU0iLCJCUkVBS1NfQ0hBTkNFIiwiZWZmZWN0X29wZXJhdG9ycyIsImVmZmVjdF91c2FnZXMiLCJlZmZlY3RfbmFtZXMiLCJhdXJhIiwiZG91YmxlIiwiTk9fRUxFTUVOVCIsInR1cm5fY291bnQiLCJOT1RfQVBQTFkiLCJpbml0X3N1Yl9lZmZlY3QiLCJhIiwiUExVUyIsIk1JTlVTIiwiVElNRVMiLCJESVZJREUiLCJkaXJlY3RfdmFsdWUiLCJiZWZvcmVfdmFsdWUiLCJhZnRlcl92YWx1ZSIsInZhbHVlX3RvX3VzZSIsInZhcmlhdGlvbiIsImFwcGx5X29wZXJhdG9yIiwiYmFzZV92YWx1ZSIsImN1cnJlbnRfcHJvcCIsIm1heF9wcm9wIiwibWluX3ZhbHVlIiwicmVzdWx0X29iaiIsImFwcGx5X2dlbmVyYWxfdmFsdWUiLCJIUF9SRUNPVkVSWSIsIlBQX1JFQ09WRVJZIiwicmVzdWx0X2N1cnJlbnRfaHAiLCJjaGVja19jYXBzIiwicmVzdWx0X2N1cnJlbnRfcHAiLCJUVVJOUyIsIlBFUk1BTkVOVF9TVEFUVVMiLCJhZGRfcGVybWFuZW50X3N0YXR1cyIsInJlbW92ZV9wZXJtYW5lbnRfc3RhdHVzIiwiYWRkX3RlbXBvcmFyeV9zdGF0dXMiLCJyZW1vdmVfdGVtcG9yYXJ5X3N0YXR1cyIsIkRBTUFHRV9NT0RJRklFUiIsIkRBTUFHRV9JTlBVVCIsInN0YXQiLCJhcHBseV9zdWJlZmZlY3QiLCJTdGF0dXNNb2RlcyIsIlN0YXR1c0NvbXBvbmVudCIsIndpbmRvdyIsIm1hbmFnZXIiLCJCQVRUTEUiLCJNRU5VIiwiR1JPVVBfS0VZIiwiZGVmaW5lX2ludGVybmFsX2dyb3VwIiwiaGlnaGxpZ2h0IiwiYmxlbmRNb2RlIiwiUElYSSIsImJsZW5kTW9kZXMiLCJTQ1JFRU4iLCJzdGF0ZV9zcHJpdGVzIiwiY3VycmVudF9jb2wiLCJjb2wiLCJjdXJyZW50X2xpbmUiLCJzZWxlY3RlZF9jaGFyYWN0ZXIiLCJiYXR0bGVfZWZmZWN0c19hcnJheSIsImxpbmUxIiwibGluZTIiLCJ1cGRhdGVfZGVzY3JpcHRpb24iLCJpbml0aWFsaXplIiwic2VsZWN0X29wdGlvbiIsIm9uX2NoYW5nZSIsImN1cnNvcl9tYW5hZ2VyIiwiaGlkZSIsImNsZWFyX3NlcGFyYXRvcnMiLCJzZWxlY3RlZF9jaGFyIiwiZGppbm5fa2V5IiwiaW5mbyIsInRvdGFsIiwiZWxlbWVudGFsX2xldmVsIiwiZWxlbWVudGFsX3Bvd2VyIiwiZWxlbWVudGFsX3Jlc2lzdGFuY2UiLCJ2ZW51c19sZXZlbF9jdXJyZW50IiwidmVudXNfcG93ZXJfY3VycmVudCIsInZlbnVzX3Jlc2lzdF9jdXJyZW50IiwibWVyY3VyeV9sZXZlbF9jdXJyZW50IiwibWVyY3VyeV9wb3dlcl9jdXJyZW50IiwibWVyY3VyeV9yZXNpc3RfY3VycmVudCIsIm1hcnNfbGV2ZWxfY3VycmVudCIsIm1hcnNfcG93ZXJfY3VycmVudCIsIm1hcnNfcmVzaXN0X2N1cnJlbnQiLCJqdXBpdGVyX2xldmVsX2N1cnJlbnQiLCJqdXBpdGVyX3Bvd2VyX2N1cnJlbnQiLCJqdXBpdGVyX3Jlc2lzdF9jdXJyZW50IiwibGV2ZWwiLCJwb3dlciIsInJlc2lzdGFuY2UiLCJlbGVtIiwiYWN0aW9uX2tleSIsImRqaW5uaV9zcHJpdGVzIiwiZ2V0QWN0aW9uS2V5Iiwic2V0VG8iLCJzZXRBbmltYXRpb24iLCJhbmltYXRpb25zIiwicGxheSIsImdldEFuaW1hdGlvbktleSIsIlBhZ2VJbmRpY2F0b3JNb2RlcyIsImZsYXNoX2V2ZW50IiwicGFnZV9jb3VudCIsImRlZmF1bHRfYXJyb3dfcG9zIiwicGFnZV9pbmRleCIsIkhJR0hMSUdIVCIsIm51bWJlcl9iYXIiLCJhZGRfc3ByaXRlX3RvX2dyb3VwIiwiTlVNQkVSX1dJRFRIIiwiTlVNQkVSX0hFSUdIVCIsIm51bWJlcl9iYXJfaGlnaGxpZ2h0IiwicGFnZV9udW1iZXJzIiwiYXJyb3dfdGltZXIiLCJmbGFzaF90aW1lciIsInJpZ2h0X2Fycm93IiwibGVmdF9hcnJvdyIsInNldF90ZXh0X2luX3Bvc2l0aW9uIiwic2VsZWN0X3BhZ2UiLCJzZXRfYXJyb3dzIiwiRkxBU0giLCJydW5uaW5nIiwicGVuZGluZ0RlbGV0ZSIsIkZMQVNIX0xPT1AiLCJsZWZ0X2Fycm93X3giLCJwYXVzZWQiLCJyZXN1bWUiLCJBUlJPV19MT09QIiwiQVJST1dfU0hJRlQiLCJyZW1vdmVfdGV4dCIsInBhdXNlIiwiZXF1aXBfc2xvdHMiLCJpdGVtX2VxdWlwX3Nsb3QiLCJXRUFQT05TIiwiV0VBUE9OIiwiQVJNT1IiLCJCT0RZIiwiQ0hFU1RfUFJPVEVDVE9SIiwiQ0hFU1QiLCJIRUFEX1BST1RFQ1RPUiIsIkhFQUQiLCJMRUdfUFJPVEVDVE9SIiwiQk9PVFMiLCJSSU5HIiwiVU5ERVJXRUFSIiwiTWFpbkNoYXIiLCJQbGF5ZXIiLCJzcHJpdGVfYmFzZSIsIndhbGtfc3BlZWQiLCJkYXNoX3NwZWVkIiwiY2xpbWJfc3BlZWQiLCJocF9jdXJ2ZSIsInBwX2N1cnZlIiwiYXRrX2N1cnZlIiwiZGVmX2N1cnZlIiwiYWdpX2N1cnZlIiwibHVrX2N1cnZlIiwiZXhwX2N1cnZlIiwic3RhcnRpbmdfbGV2ZWwiLCJjbGFzc190YWJsZSIsImJhdHRsZV9zY2FsZSIsInZlbnVzX2xldmVsX2Jhc2UiLCJtZXJjdXJ5X2xldmVsX2Jhc2UiLCJtYXJzX2xldmVsX2Jhc2UiLCJqdXBpdGVyX2xldmVsX2Jhc2UiLCJ2ZW51c19wb3dlcl9iYXNlIiwibWVyY3VyeV9wb3dlcl9iYXNlIiwibWFyc19wb3dlcl9iYXNlIiwianVwaXRlcl9wb3dlcl9iYXNlIiwidmVudXNfcmVzaXN0X2Jhc2UiLCJtZXJjdXJ5X3Jlc2lzdF9iYXNlIiwibWFyc19yZXNpc3RfYmFzZSIsImp1cGl0ZXJfcmVzaXN0X2Jhc2UiLCJpbm5hdGVfYWJpbGl0aWVzIiwiaW5fcGFydHkiLCJpdGVtcyIsImJhdHRsZV9hbmltYXRpb25zX3ZhcmlhdGlvbnMiLCJzdXBlciIsImN1cnJlbnRfZXhwIiwiZWxlbWVudF9hZmluaXR5IiwidmVudXNfZGppbm5pIiwibWVyY3VyeV9kamlubmkiLCJtYXJzX2RqaW5uaSIsImp1cGl0ZXJfZGppbm5pIiwiaW5pdF9kamlubmkiLCJocF9leHRyYSIsInBwX2V4dHJhIiwiYXRrX2V4dHJhIiwiZGVmX2V4dHJhIiwiYWdpX2V4dHJhIiwibHVrX2V4dHJhIiwiaHBfcmVjb3ZlcnkiLCJwcF9yZWNvdmVyeSIsImVxdWlwcGVkX2FiaWxpdGllcyIsImluaXRfaXRlbXMiLCJhYmlsaXRpZXMiLCJ0dXJucyIsImNsYXNzIiwiY2hvb3NlX3JpZ2h0X2NsYXNzIiwiY2xhc3Nlc19saXN0IiwicmV0dXJuX2RhdGEiLCJzdGF0cyIsIm1heF9ocCIsIm1heF9wcCIsImF0ayIsImRlZiIsImFnaSIsImx1ayIsImV4cCIsInVwZGF0ZV9hbGwiLCJlcXVpcF9pdGVtIiwiaXRlbV9rZXlfbmFtZSIsImVxdWlwIiwiZm91bmQiLCJpdGVtc19saXN0IiwiaXRlbV9vYmpfdG9fcmVtb3ZlIiwiYWRqdXN0X2luZGV4IiwidW5lcXVpcF9pdGVtIiwiaXRlbSIsImFkZF9lZmZlY3QiLCJBQklMSVRZX0dSQU5UT1IiLCJyZW1vdmVfZWZmZWN0IiwiYWJpbGl0eSIsImRqaW5uX2tleV9uYW1lIiwidGhpc19kamlubmlfbGlzdCIsIm9sZF9kamlubl9rZXlfbmFtZSIsIm5ld19kamlubl9rZXlfbmFtZSIsInJlbW92ZV9kamlubiIsImFkZF9kamlubiIsImRqaW5uaV9rZXlfbmFtZSIsImRqaW5uaV9uZXh0X3N0YXR1cyIsInByZXZpb3VzX2NsYXNzIiwidmVudXNfbHYiLCJtZXJjdXJ5X2x2IiwibWFyc19sdiIsImp1cGl0ZXJfbHYiLCJsdl9zaGlmdCIsIkVMRU1fTFZfREVMVEEiLCJBTlkiLCJyZXR1cm5fb2JqIiwiY2xhc3NfbmFtZSIsImNsYXNzX2tleV9uYW1lIiwiYWJpbGl0eV9sZXZlbF9wYWlycyIsInByZXZpZXdfc3RhdHNfYnlfZGppbm4iLCJwcmV2aWV3X29iaiIsInNldF9tYXhfc3RhdCIsImVmZmVjdF90eXBlIiwiaWdub3JlX2FiaWxpdHlfZWZmZWN0IiwicHJldmlldyIsInN0YXRfcHJlZml4Iiwic3RhdF9rZXkiLCJib29zdF9rZXkiLCJjdXJ2ZV9rZXkiLCJleHRyYV9rZXkiLCJwcmV2aW91c192YWx1ZSIsInRoaXNfZGppbm5pIiwiZmlyc3RfaW5kZXgiLCJBYmlsaXR5IiwicHJldmlld192YWx1ZSIsInByZXZpZXdfdmFsdWVfYXBwbGllZCIsImN1cnJlbnRfa2V5IiwiYW1vdW50IiwiaWdub3JlX2FiaWxpdHlfZWZmZWN0cyIsInByZXZpb3VzX3N0YXRzIiwicmVzaXN0IiwiRUxFTV9QT1dFUl9ERUxUQSIsIkVMRU1fUkVTSVNUX0RFTFRBIiwicG93ZXJfa2V5IiwicmVzaXN0X2tleSIsImZyb21FbnRyaWVzIiwicGFydHlfZGF0YSIsImhhc19wZXJtYW5lbnRfc3RhdHVzIiwiTUFYX0lURU1TX1BFUl9DSEFSIiwiYWRkX2l0ZW0iLCJhYmlsaXR5X3R5cGVzIiwiYWJpbGl0eV9tc2dfdHlwZXMiLCJhYmlsaXR5X3RhcmdldF90eXBlcyIsImFiaWxpdHlfY2F0ZWdvcmllcyIsImRpbWluaXNoaW5nX3JhdGlvcyIsIlNUQU5EQVJEIiwiMTEiLCI5IiwiNyIsIjUiLCIzIiwiU1VNTU9OIiwiRElNSU5JU0giLCJTVEFUVVMiLCJiYXR0bGVfdGFyZ2V0IiwicHBfY29zdCIsImFiaWxpdHlfcG93ZXIiLCJlZmZlY3RzX291dHNpZGVfYmF0dGxlIiwiaXNfYmF0dGxlX2FiaWxpdHkiLCJpc19maWVsZF9wc3luZXJneSIsImFiaWxpdHlfY2F0ZWdvcnkiLCJiYXR0bGVfYW5pbWF0aW9uX2tleSIsInByaW9yaXR5X21vdmUiLCJoYXNfY3JpdGljYWwiLCJjcml0X211bHRfZmFjdG9yIiwiY2FuX3N3aXRjaF90b191bmxlYXNoIiwiY2FuX2JlX2V2YWRlZCIsInVzZV9kaW1pbmlzaGluZ19yYXRpbyIsIm1zZ190eXBlIiwiYWZmZWN0c19wcCIsImhhc19hbmltYXRpb25fdmFyaWF0aW9uIiwiQ0FTVCIsImFiaWxpdHlfdHlwZSIsImZyYW1lX2NvdW50cyIsImZyYW1lX2NvdW50X2lzX2FycmF5IiwiZnJhbWVfY291bnQiLCJmcmFtZV9yYXRlIiwidGhpc19mcmFtZV9yYXRlIiwic3ByaXRlc2hlZXRfaW1hZ2VfdXJsIiwic3ByaXRlc2hlZXRfanNvbl91cmwiLCJzcHJpdGVzaGVldCIsImZvcmNlX2xvYWQiLCJvbl9sb2FkX2NvbXBsZXRlIiwibG9hZGVyIiwibG9hZCIsImF0bGFzSlNPTkhhc2giLCJvbkxvYWRDb21wbGV0ZSIsInN0b3AiLCJzdWZmaXgiLCJ6ZXJvUGFkIiwiQW5pbWF0aW9uIiwiZ2VuZXJhdGVGcmFtZU5hbWVzIiwiYW5pbV9rZXkiLCJ0b0xvY2FsZVN0cmluZyIsIm1pbmltdW1JbnRlZ2VyRGlnaXRzIiwidXNlR3JvdXBpbmciLCJDaGFyc01lbnVNb2RlcyIsIkFSUk9XX1RXRUVOX1RJTUUiLCJjaGFyX2dyb3VwIiwiQ0hBUl9HUk9VUF9YIiwiQ0hBUl9HUk9VUF9ZIiwiYXJyb3dfZ3JvdXAiLCJ1cF9hcnJvdyIsInJvdGF0aW9uIiwiZG93bl9hcnJvdyIsImFycm93X3R3ZWVucyIsImNoYXJfc3ByaXRlcyIsInNlbGVjdGVkX2luZGV4IiwiaXNfYWN0aXZlIiwiaXNfb3BlbiIsIlNIT1AiLCJ1cGRhdGVfc2l6ZSIsInVwZGF0ZV9wb3NpdGlvbiIsIkNIQVJfR1JPVVBfWDIiLCJDSEFSX0dST1VQX1kyIiwiZHJhd19zZXBhcmF0b3IiLCJTRVBBUkFUT1JfWCIsImluaXRfYXJyb3dfdHdlZW5zIiwidXBfdHdlZW4iLCJVUF9BUlJPV19ZIiwiZG93bl90d2VlbiIsIkRPV05fQVJST1dfWSIsImRlYWRfaWRsZSIsImFsaXZlIiwiSURMRSIsInBhcnR5X2xlbmd0aCIsImxpbmVfbnVtYmVyIiwiZm9yY2VfaW5kZXgiLCJub19jdXJzb3IiLCJjbGVhcl9hcnJvd190d2VlbnMiLCJ1bnNldF9jaGFyYWN0ZXIiLCJraWxsX2FsbF9zcHJpdGVzIiwic2V0X2NoYXJzIiwiY2hlY2tfYXJyb3dzIiwic2VsZWN0X2NoYXIiLCJjaGFuZ2VfbGluZSIsInNpbGVudCIsIm9uX21vdmUiLCJzZXRfY2hhcmFjdGVyIiwibW92ZV9jdXJzb3IiLCJuZXh0X2xpbmUiLCJwcmV2aW91c19saW5lIiwidGhpc19jaGFyIiwibmV3X2luZGV4IiwibmV3X2xpbmUiLCJtYWtlX2xpbmVzIiwib25fY2FuY2VsIiwib25fc2VsZWN0IiwiZW5hYmxlX3N3YXAiLCJjb250cm9scyIsImdhbWVwYWQiLCJMRUZUIiwib25fZG93biIsInByZXZpb3VzX2NoYXIiLCJSSUdIVCIsIm5leHRfY2hhciIsIlVQIiwiRE9XTiIsIkEiLCJyZXNldF9jb250cm9sIiwiQiIsIkwiLCJzd2FwX3ByZXZpb3VzIiwiUiIsInN3YXBfbmV4dCIsImNvbnRyb2xfbWFuYWdlciIsInNldF9jb250cm9sIiwibG9vcF9jb25maWdzIiwiaG9yaXpvbnRhbCIsImN1cnNvcl94IiwiY3Vyc29yX3kiLCJtb3ZlX3RvIiwic2VsZWN0X2luZGV4Iiwib3Blbl9jYWxsYmFjayIsImNoZWNrX21vZGUiLCJhY3RpdmF0ZSIsImRlYWN0aXZhdGUiLCJjbG9zZSIsIkp1bXBFdmVudCIsIkpVTVAiLCJzdG9wX2J5X2NvbGxpZGluZyIsImNoZWNrX3Bvc2l0aW9uIiwiaGVyb19tb3ZlbWVudF9hbGxvd2VkIiwianVtcF9kaXJlY3Rpb24iLCJqdW1wX29mZnNldCIsIm5leHRfcG9zaXRpb24iLCJzaWRlX3Bvc2l0aW9uIiwic2lkZV9wb3Nfa2V5IiwiZXZlbnQiLCJpbnRlcmFjdGFibGVfb2JqZWN0X2ZvdW5kIiwiaW50ZXJhY3RhYmxlX29iamVjdHMiLCJpbnRlcmFjdGFibGVfb2JqZWN0IiwiY29sbGlzaW9uX2xheWVyIiwiYmFzZV9jb2xsaXNpb25fbGF5ZXIiLCJjdXJyZW50X3giLCJjdXJyZW50X3kiLCJuZXh0X3Bvc19rZXkiLCJuZXh0X2ludGVyYWN0YWJsZV9vYmplY3QiLCJhY3RpdmVfanVtcF9ldmVudF9mb3VuZCIsImdldF9vcHBvc2l0ZV9kaXJlY3Rpb24iLCJzZXRfanVtcF9jb2xsaXNpb24iLCJ1bnNldF9zZXRfanVtcF9jb2xsaXNpb24iLCJqdW1waW5nIiwidGlsZV9ldmVudF9tYW5hZ2VyIiwib25fZXZlbnQiLCJ0d2Vlbl9vYmoiLCJoZXJvX3giLCJ0aWxlV2lkdGgiLCJoZXJvX3kiLCJ0aWxlSGVpZ2h0IiwicGh5c2ljcyIsInAyIiwiY3VycmVudEFuaW0iLCJib2R5IiwicmV2ZXJzZU9uY2UiLCJjdXJyZW50X3Bvc19rZXkiLCJjdXJyZW50X3BvcyIsImdldF9zdXJyb3VuZGluZ3MiLCJyaWdodF9kaXJlY3Rpb24iLCJjbGVhcl9ib2RpZXMiLCJjb2xsaWRlcyIsImNvbGxpc2lvbiIsIm1hcF9jb2xsaXNpb25fZ3JvdXAiLCJjb2xsaXNpb25fc3ByaXRlIiwiaGVyb19jb2xsaXNpb25fZ3JvdXAiLCJkeW5hbWljX2p1bXBfZXZlbnRzX2JvZGllcyIsImNvbmNhdF9rZXlzIiwiYm9kaWVzX3Bvc2l0aW9ucyIsImF0X2xlYXN0X29uZV9keW5hbWljX2FuZF9ub3RfZGlhZyIsInN1cnJvdW5kaW5nX2tleSIsInN1cnJvdW5kaW5nX2V2ZW50Iiwic2lkZV9ldmVudF9zdXJyb3VuZGluZ3MiLCJ3YWxraW5nX29uX3BpbGxhcnNfdGlsZXMiLCJib2RpZXNfcG9zaXRpb24iLCJyZW1vdmVDb2xsaXNpb25Hcm91cCIsInBvc19hcnJheSIsImNyZWF0ZUJvZHkiLCJjbGVhclNoYXBlcyIsInNldFJlY3RhbmdsZSIsInNldENvbGxpc2lvbkdyb3VwIiwiZHluYW1pY19ldmVudHNfY29sbGlzaW9uX2dyb3VwIiwiZGFtcGluZyIsImFuZ3VsYXJEYW1waW5nIiwic2V0WmVyb1JvdGF0aW9uIiwiZml4ZWRSb3RhdGlvbiIsInN0YXRpYyIsImRlYnVnIiwiZXZlbnRfa2V5IiwiZHluYW1pY19mb3VuZCIsInRoaXNfZXZlbnQiLCJ0YXJnZXRfbGF5ZXIiLCJzdXJyb3VuZGluZyIsInRoaXNfa2V5Iiwic3Vycl9ldmVudCIsImFjdGl2YXRlX2F0IiwiYmF0dGxlX3BoYXNlcyIsIkJhdHRsZSIsImJhY2tncm91bmRfa2V5IiwiZW5lbXlfcGFydHlfa2V5IiwiYWxsaWVzX2luZm8iLCJNQVhfQ0hBUlNfSU5fQkFUVExFIiwic3ByaXRlX2tleSIsImluc3RhbmNlIiwiZW50ZXJlZF9pbl9iYXR0bGUiLCJlbmVtaWVzX3BhcnR5X2RhdGEiLCJkYnMiLCJlbmVtaWVzX3BhcnRpZXNfZGIiLCJlbmVtaWVzX3BhcnR5X25hbWUiLCJlbmVtaWVzX2luZm8iLCJ0aGlzX2VuZW1pZXNfbGlzdCIsImJhdHRsZV9rZXlzX2NvdW50IiwiY291bnRlciIsIm1lbWJlcl9pbmZvIiwicXRkIiwiYmF0dGxlX2tleV9zdWZmaXgiLCJuYW1lX3N1ZmZpeCIsImdldF9lbmVteV9pbnN0YW5jZSIsImVuZW1pZXNfbGlzdCIsImJhdHRsZV9rZXkiLCJiYXR0bGVfc3RhZ2UiLCJCYXR0bGVTdGFnZSIsImJhdHRsZV9sb2ciLCJCYXR0bGVMb2ciLCJiYXR0bGVfbWVudSIsIk1haW5CYXR0bGVNZW51Iiwib25fYWJpbGl0aWVzX2Nob29zZSIsImNob29zZV90YXJnZXRzIiwidGFyZ2V0X3dpbmRvdyIsIkNob29zaW5nVGFyZ2V0V2luZG93IiwiYW5pbWF0aW9uX21hbmFnZXIiLCJCYXR0bGVBbmltYXRpb25NYW5hZ2VyIiwiYmF0dGxlX3BoYXNlIiwiTk9ORSIsIm9uX2dvaW5nX2VmZmVjdHMiLCJhbGxpZXNfZGVmZWF0ZWQiLCJlbmVtaWVzX2RlZmVhdGVkIiwiYmF0dGxlX2ZpbmlzaGluZyIsImNoZWNrX3BoYXNlcyIsImFsbGllc19hYmlsaXRpZXMiLCJjbG9zZV9tZW51IiwicmVzZXRfcG9zaXRpb25zIiwiY2hvb3NpbmdfYWN0aW9ucyIsIlJPVU5EX1NUQVJUIiwiYWJpbGl0eV9rZXkiLCJjYXN0ZXIiLCJ0aGlzX2FiaWxpdHkiLCJhYmlsaXRpZXNfbGlzdCIsInF1YW50aXRpZXMiLCJ0YXJnZXRzIiwid2luZG93X29wZW4iLCJFTkQiLCJjaGVja19wYXJ0aWVzIiwiYmF0dGxlX3BoYXNlX25vbmUiLCJTVEFSVCIsImJhdHRsZV9waGFzZV9tZW51IiwiYmF0dGxlX3BoYXNlX3JvdW5kX3N0YXJ0IiwiQ09NQkFUIiwiYmF0dGxlX3BoYXNlX2NvbWJhdCIsIlJPVU5EX0VORCIsImJhdHRsZV9waGFzZV9yb3VuZF9lbmQiLCJiYXR0bGVfcGhhc2VfZW5kIiwiaW5fYmF0dGxlIiwiYmF0dGxlX2luc3RhbmNlIiwiYWR2YW5jZV9sb2dfY29udHJvbF9rZXkiLCJzaW1wbGVfaW5wdXQiLCJhZHZhbmNlX2xvZ19yZXNvbHZlIiwicGVyc2lzdCIsImluaXRpYWxpemVfc3RhZ2UiLCJhbGxpZXNfbWFwX3Nwcml0ZSIsImVuZW1pZXNfbWFwX3Nwcml0ZSIsInNldF9jaG9vc2luZ19hY3Rpb25fcG9zaXRpb24iLCJvcGVuX21lbnUiLCJlbmVteV9tZW1iZXJzIiwiZW5lbWllc19hYmlsaXRpZXMiLCJlbmVteSIsIkVuZW15QUkiLCJyb2xsX2FjdGlvbiIsImNoYXJfa2V5IiwibWFpbl9jaGFyX2xpc3QiLCJzcGVlZCIsIkJhdHRsZUZvcm11bGFzIiwicGxheWVyX3R1cm5fc3BlZWQiLCJ0aGlzX2VuZW15IiwiZW5lbXlfdHVybl9zcGVlZCIsInR1cm5zX2FjdGlvbnMiLCJsb2FkX2FuaW1hdGlvbiIsImN1cnJlbnRfaHAiLCJ3YWl0X2Zvcl9rZXkiLCJpc19wYXJhbHl6ZWQiLCJFTkVNWSIsIml0ZW1fbmFtZSIsIml0ZW1fc2xvdCIsIndlYXBvbiIsImhhc190ZW1wb3Jhcnlfc3RhdHVzIiwiUFNZTkVSR1kiLCJjdXJyZW50X3BwIiwiZGppbm5fbmFtZSIsImFkZF9hYmlsaXR5IiwiREpJTk4iLCJTRVRfREpJTk4iLCJzdW1tb25zX2xpc3QiLCJEamlubiIsImdldF9zdGFuZGJ5X2RqaW5uaSIsImdldF9hY3RpdmVfcGxheWVycyIsInJlcXVpcmVtZW50Iiwic2V0X3RvX3JlY292ZXJ5IiwiY2hhcnNfc3RhdHVzX3dpbmRvdyIsInVwZGF0ZV9jaGFyc19pbmZvIiwiVVRJTElUWSIsImFuaW1hdGlvbl9hdmFpbGFibGUiLCJjYXN0ZXJfc3ByaXRlIiwidGFyZ2V0X3Nwcml0ZXMiLCJtYWduaXR1ZGUiLCJncm91cF9jYXN0ZXIiLCJncm91cF9hbGxpZXMiLCJncm91cF9lbmVtaWVzIiwiZ3JvdXBfdGFrZXIiLCJwcmV2ZW50X2NhbWVyYV9hbmdsZV9vdmVyZmxvdyIsIkVGRkVDVF9PTkxZIiwiYXBwbHlfZGFtYWdlIiwiT05fVVNFIiwiYXBwbHlfZWZmZWN0cyIsInNldF9zdGFnZV9kZWZhdWx0X3Bvc2l0aW9uIiwic3VtbW9uX3Bvd2VyIiwiU0lOR0xFX1VTRSIsIkJSRUFLU19XSEVOX1VTRSIsInBvaXNvbl9zdGF0dXMiLCJpc19wb2lzb25lZCIsImRhbWFnZSIsImJhdHRsZV9wb2lzb25fZGFtYWdlIiwicG9pc29uX25hbWUiLCJjaGVja19kb3duZWQiLCJ0aGlzX2VmZmVjdCIsImdldF9lZmZlY3RfdHVybnNfY291bnQiLCJpbmNyZWFzZWRfY3JpdCIsIkNSSVRJQ0FMUyIsImFjYyIsInRhcmdldF9pbmZvIiwidGFyZ2V0X2luc3RhbmNlIiwiRVZBU0lPTl9DSEFOQ0UiLCJERUxVU0lPTl9NSVNTX0NIQU5DRSIsIkNSSVRJQ0FMX0NIQU5DRSIsIm11bHRfbW9kIiwiYWRkX21vZCIsInBoeXNpY2FsX2F0dGFjayIsIkFEREVEX0RBTUFHRSIsIk1VTFRJUExJRVIiLCJCQVNFX0RBTUFHRSIsInBzeW5lcmd5X2RhbWFnZSIsIkhFQUxJTkciLCJoZWFsX2FiaWxpdHkiLCJkamlubl91c2VkIiwic3VtbW9uX2RhbWFnZSIsIkRJUkVDVF9EQU1BR0UiLCJyYXRpb3MiLCJnZXRfZGltaW5pc2hpbmdfcmF0aW9zIiwiYWRkX2RhbWFnZSIsImN1cnJlbnRfcHJvcGVydHkiLCJtYXhfcHJvcGVydHkiLCJkaV9lZmZlY3QiLCJlZmZlY3RfcmVzdWx0IiwiZWZmZWN0X2RhbWFnZSIsInZ1bG5lcmFiaWxpdHkiLCJ2dWxuZXJhYmlsaXRpZXMiLCJhaWxtZW50X3N1Y2Nlc3MiLCJzZXRfZWZmZWN0X3R1cm5zX2NvdW50IiwicG9pc29uX2VmZmVjdCIsInJlbW92ZWQiLCJhZGRfcmVjb3Zlcl9lZmZlY3QiLCJkaWZmIiwiZWxlbWVudF9pbmZvIiwiYWJzIiwiRU5EX1RIRV9ST1VORCIsIkNPVU5URVJfU1RSSUtFIiwiRkxFRSIsImVmZmVjdHNfdG9fcmVtb3ZlIiwiZWZmZWN0X2dyb3VwcyIsImF2b2lkX21zZyIsImdldF9lZmZlY3RfdHVybnNfa2V5IiwiY2hhcl9rZXlfbmFtZSIsImVmZmVjdF90dXJuX2tleSIsInRvdGFsX2V4cCIsImV4cF9yZXdhcmQiLCJjaGFuZ2UiLCJhZGRfZXhwIiwiZ2FpbmVkX2FiaWxpdGllcyIsInN0YXRfdGV4dCIsInRvdGFsX2NvaW5zIiwiY29pbnNfcmV3YXJkIiwiaXRlbV9yZXdhcmQiLCJpdGVtX3Jld2FyZF9jaGFuY2UiLCJhZGRfaXRlbV90b19wYXJ0eSIsInVuc2V0X2JhdHRsZSIsInVuc2V0X3N0YWdlIiwiZGV0YWNoX2JpbmRpbmdzIiwiZGVzdHJveV9tZW51IiwidXBkYXRlX3N0YWdlIiwicmVuZGVyIiwiQlVUVE9OX1kiLCJUSVRMRV9XSU5ET1dfSEVJR0hUIiwiYnV0dG9ucyIsInRpdGxlcyIsImNhbGxiYWNrcyIsInRpdGxlX3dpbmRvd193aWR0aCIsImRvY2tfcmlnaHQiLCJidXR0b25zX2tleXMiLCJvbl9wcmVzcyIsImJ1dHRvbnNfbnVtYmVyIiwibWF4X3RpdGxlX3dpZHRoIiwiZ2V0X3RleHRfd2lkdGgiLCJ0aXRsZSIsInRvdGFsX3dpZHRoIiwiY3VzdG9tX3NjYWxlIiwic2VsZWN0ZWRfYnV0dG9uX2luZGV4IiwibWVudV9vcGVuIiwibWVudV9hY3RpdmUiLCJzZWxlY3RlZF9idXR0b25fdHdlZW4iLCJ0aXRsZV93aW5kb3ciLCJtb3VudF9idXR0b25zIiwicHJldmlvdXNfYnV0dG9uIiwibmV4dF9idXR0b24iLCJmaWx0ZXJlZF9idXR0b25zIiwicmVzZXRfYnV0dG9uIiwic2V0X3RleHQiLCJzZXRfYnV0dG9uIiwiY2hhbmdlX2J1dHRvbiIsImFjdGl2ZV9kZWZhdWx0IiwibWF4X3NjYWxlIiwic3RhcnRfYWN0aXZlIiwid2luZG93X3Byb21pc2VfcmVzb2x2ZSIsImJ1dHRvbnNfcmVzb2x2ZSIsIndpbmRvd19wcm9taXNlIiwiYnV0dG9uc19wcm9taXNlIiwidHJhbnNpdGlvbl90aW1lIiwiR2FtZUV2ZW50IiwidGFyZ2V0X21heF9yYW5nZSIsImFjdGlvbl9rZXlfbmFtZSIsIm5lZWRfdGFyZ2V0IiwiYm9vdHN0cmFwX21ldGhvZCIsImNhc3RfZmluaXNoZXIiLCJjb250cm9sbGFibGVfY2hhciIsInRhcmdldF9mb3VuZCIsInRhcmdldF9vYmplY3QiLCJzdG9wX2Nhc3RpbmciLCJmaWVsZF9wc3luZXJneV93aW5kb3ciLCJGaWVsZFBzeW5lcmd5V2luZG93IiwiY2FzdF9kaXJlY3Rpb24iLCJtaW5feCIsIm1heF94IiwibWluX3kiLCJtYXhfeSIsImJvZHlfcmFkaXVzIiwic3FyX2Rpc3RhbmNlIiwiaW50ZXJhY3RhYmxlX29iamVjdHNfZGIiLCJwc3luZXJneV9rZXlzIiwiaXRlbV94X3B4IiwiaXRlbV95X3B4IiwieV9jb25kaXRpb24iLCJ0aGlzX3Nxcl9kaXN0YW5jZSIsImludGVyYWN0aW9uX3R5cGUiLCJpbnRlcmFjdGFibGVfb2JqZWN0X2ludGVyYWN0aW9uX3R5cGVzIiwiT05DRSIsImNhc3RlZF9wcm9wZXJ0eSIsImN1c3RvbV9kYXRhIiwiY2FzdGVyX2tleV9uYW1lIiwiY2FzdGluZ19wc3luZXJneSIsInJlc2V0X21hcCIsInNlbmRfdG9fZnJvbnQiLCJzdG9wX2NoYXIiLCJnZXRfY2FzdF9kaXJlY3Rpb24iLCJzZXRfZGlyZWN0aW9uIiwic2VhcmNoX2Zvcl90YXJnZXQiLCJzZXRfdGFyZ2V0X2Nhc3RlZCIsInNldF9oZXJvX2Nhc3RfYW5pbSIsImluaXRfY2FzdF9hdXJhIiwibnBjX2dyb3VwIiwiY29sb3JfZmlsdGVyIiwidGludF9tYXBfbGF5ZXJzIiwiQ29udHJvbGxhYmxlQ2hhciIsImluaXRpYWxfeSIsImluaXRpYWxfYWN0aW9uIiwiaW5pdGlhbF9kaXJlY3Rpb24iLCJlbmFibGVfZm9vdHN0ZXBzIiwieF9zcGVlZCIsInlfc3BlZWQiLCJleHRyYV9zcGVlZCIsImZvcmNlX2RpcmVjdGlvbiIsImRhc2hpbmciLCJjbGltYmluZyIsInB1c2hpbmciLCJzbGlkaW5nIiwidGVsZXBvcnRpbmciLCJpZGxlX2NsaW1iaW5nIiwic3ByaXRlX2luZm8iLCJjdXJyZW50X2FjdGlvbiIsInJlcXVpcmVkX2RpcmVjdGlvbiIsInRyeWluZ190b19wdXNoIiwidHJ5aW5nX3RvX3B1c2hfZGlyZWN0aW9uIiwicHVzaF90aW1lciIsImZvb3RzdGVwcyIsIkZvb3RzdGVwcyIsImNyb3BfdGV4dHVyZSIsInNoYWRvd19mb2xsb3dpbmciLCJhbGxvd19jbGltYmluZyIsIm1hcF9zcHJpdGUiLCJsYXllciIsImFuY2hvcl94IiwiYW5jaG9yX3kiLCJpc193b3JsZF9tYXAiLCJkZWZhdWx0X2FuY2hvciIsInJvdW5kUHgiLCJzY2FsZV94Iiwic2NhbGVfeSIsInNoYWRvd19hbmNob3JfeCIsInNoYWRvd19hbmNob3JfeSIsIkRFRkFVTFRfU0hBRE9XX0tFWU5BTUUiLCJERUZBVUxUX1NIQURPV19BTkNIT1JfWCIsIkRFRkFVTFRfU0hBRE9XX0FOQ0hPUl9ZIiwiTVVMVElQTFkiLCJkaXNhYmxlUm91bmRQeCIsImZvbGxvdyIsIkNhbWVyYSIsIkZPTExPV19MT0NLT04iLCJmb2N1c09uIiwiYW5pbWF0aW9uIiwiZ2V0U3ByaXRlQWN0aW9uIiwibG9hZFRleHR1cmUiLCJhbmltYXRpb25fa2V5IiwiZ2V0QW5pbWF0aW9uIiwiYW5pbWF0aW9uX29iaiIsImZyYW1lX2luZGV4IiwiZnJhbWVfbmFtZSIsImdldEZyYW1lTmFtZSIsImZyYW1lTmFtZSIsIm1hc2siLCJjcm9wIiwidGlsZXMiLCJnZXRfY3VycmVudF90aWxlIiwiaGFsZl9jcm9wIiwic2V0X2hhbGZfY3JvcF9tYXNrIiwicG9zdFVwZGF0ZSIsImNoZWNrX2hhbGZfY3JvcF90aWxlIiwiY2hhbmdlX3Nwcml0ZSIsInZlbG9jaXR5Iiwic2V0X2FjdGlvbiIsImNoZWNrX29uX2V2ZW50IiwidGlsZSIsImRpc2FibGVfZm9vdHByaW50Iiwic2hvd19mb290c3RlcHMiLCJ0aWxlX2FibGVfdG9fc2hvd19mb290cHJpbnQiLCJjYW5fbWFrZV9mb290cHJpbnQiLCJjcmVhdGVfc3RlcCIsIkRBU0giLCJXQUxLIiwiZGVsdGFfdGltZSIsImVsYXBzZWRNUyIsInNwZWVkX2ZhY3RvciIsInRlbXBfeCIsInRlbXBfeSIsIkNMSU1CIiwiY2FsY3VsYXRlX3NwZWVkIiwiYXBwbHlfc3BlZWQiLCJERUZBVUxUX1NQUklURV9BTkNIT1JfWCIsIkRFRkFVTFRfU1BSSVRFX0FOQ0hPUl9ZIiwiZmlyZV9wdXNoX21vdmVtZW50IiwicHVzaF9lbmQiLCJiZWZvcmVfbW92ZSIsInRhcmdldF9vbmx5IiwiZW5hYmxlX3BoeXNpY3NfYXRfZW5kIiwib25fcHVzaF91cGRhdGUiLCJleHBlY3RlZF9wb3NpdGlvbiIsInBvc2l0aXZlX2xpbWl0IiwibmVnYXRpdmVfbGltaXQiLCJQVVNIIiwidHdlZW5feCIsInR3ZWVuX3kiLCJldmVudF9zaGlmdF94IiwiZXZlbnRfc2hpZnRfeSIsInNoaWZ0X2V2ZW50cyIsInNwcml0ZXMiLCJwcmV2X3giLCJwcmV2X3kiLCJwcm9taXNlcyIsImJsb2NraW5nX3N0YWlyX2Jsb2NrIiwicHJvbWlzZV9yZXNvbHZlIiwiZGVzdF94IiwiZGVzdF95IiwidGhpc190d2VlbiIsIm9uVXBkYXRlQ2FsbGJhY2siLCJkcm9wX2ZvdW5kIiwib2JqZWN0X2Ryb3BfdGlsZXMiLCJkcm9wX3RpbGUiLCJkZXN0X3lfc2hpZnRfcHgiLCJjaGFuZ2VfY29sbGlkZXJfbGF5ZXIiLCJkZXN0aW5hdGlvbl9jb2xsaWRlcl9sYXllciIsImFuaW1hdGlvbl9kdXJhdGlvbiIsIlF1YWRyYXRpYyIsIkluIiwiZHVzdF9hbmltYXRpb24iLCJvYmplY3RfZXZlbnRzIiwiZ2V0X2V2ZW50cyIsIm9sZF94Iiwib2xkX3kiLCJuZXdfZXZlbnRfbG9jYXRpb25fa2V5IiwibmV3X3N1cnJvdW5kaW5ncyIsImFjdGl2ZV9qdW1wX3N1cnJvdW5kaW5ncyIsImNvbGxpZGVyX2xheWVyX3NoaWZ0Iiwib2xkX3N1cnJvdW5kaW5ncyIsIm9sZF9zdXJyb3VuZGluZyIsIm9sZF9rZXkiLCJvbGRfc3Vycl9ldmVudCIsImRlYWN0aXZhdGVfYXQiLCJvcmlnaW5feCIsIm9yaWdpbl95IiwiZHVzdF9zcHJpdGVfYmFzZSIsIm1pc2Nfc3ByaXRlX2Jhc2VfbGlzdCIsInRoaXNfYW5nbGUiLCJjb3MiLCJzaW4iLCJkdXN0X3Nwcml0ZSIsInNldENoaWxkSW5kZXgiLCJnZXRDaGlsZEluZGV4IiwicmVzb2x2ZV9mdW5jIiwiaXRhbGljX2ZvbnQiLCJwYXJ0cyIsImZpbmlzaGVkIiwiYXZhdGFyIiwiYXZhdGFyX3dpbmRvdyIsImhlcm9fZGlyZWN0aW9uIiwiZGlhbG9nX2NyeXN0YWxfc3ByaXRlX2Jhc2UiLCJkaWFsb2dfY3J5c3RhbCIsImRpYWxvZ19jcnlzdGFsX2FuaW1fa2V5IiwiZGlhbG9nX2NyeXN0YWxfdHdlZW4iLCJzaG93X2NyeXN0YWwiLCJ3aW5fcG9zIiwiY3VzdG9tX3BvcyIsImN1c3RvbV9hdmF0YXJfcG9zIiwibW91bnRfd2luZG93IiwiZ2V0X2RpYWxvZ193aW5kb3dfcG9zaXRpb24iLCJuZXh0X2NhbGxiYWNrIiwicmVhbF94IiwicmVhbF95IiwidHdlZW5fdG9feSIsImlzUnVubmluZyIsIkluT3V0IiwiYXZhdGFyX3BvcyIsImdldF9hdmF0YXJfcG9zaXRpb24iLCJ3aW5kb3dfc2l6ZSIsInNldF9hdmF0YXIiLCJzZXRfaGVyb19kaXJlY3Rpb24iLCJtYXhfZWZlY3RpdmVfd2lkdGgiLCJ3aW5kb3dzIiwibGluZV93aWR0aCIsIm1heF93aW5kb3dfd2lkdGgiLCJsaW5lX3RleHQiLCJzZXRfZGlhbG9nIiwiZGlhbG9nX29ubHkiLCJkZXN0cm95X2NyeXN0YWwiLCJucGNfbW92ZW1lbnRfdHlwZXMiLCJucGNfdHlwZXMiLCJOUEMiLCJucGNfdHlwZSIsIm1vdmVtZW50X3R5cGUiLCJ0aG91Z2h0X21lc3NhZ2UiLCJzaG9wX2tleSIsInRhbGtfcmFuZ2VfZmFjdG9yIiwiZXZlbnRzX2luZm8iLCJub19zaGFkb3ciLCJOUENfVEFMS19SQU5HRSIsInNldF9ldmVudHMiLCJpc19ucGMiLCJldmVudF9pbmZvIiwiQmF0dGxlRXZlbnQiLCJ1cGRhdGVfc2hhZG93IiwiY29sbGlzaW9uX29iaiIsImVuYWJsZSIsIm5wY19kYiIsInJlc2V0X2FuY2hvciIsInBvbHlnb24iLCJtb3VudF9jb2xsaXNpb25fcG9seWdvbiIsImNvbGxpc2lvbl9ib2R5X2JldmVsIiwiYWRkUG9seWdvbiIsIm9wdGltYWxEZWNvbXAiLCJza2lwU2ltcGxlQ2hlY2siLCJyZW1vdmVDb2xsaW5lYXJQb2ludHMiLCJucGNfY29sbGlzaW9uX2dyb3VwcyIsIkNFTlRFUl9YIiwiQ0VOVEVSX1kiLCJDQU1FUkFfU1BFRUQiLCJTRU1JX01BSk9SX0FYSVMiLCJTRU1JX01JTk9SX0FYSVMiLCJERUZBVUxUX1BPU19BTkdMRSIsIlJBTkdFUyIsIkJBVFRMRV9DVVJTT1JfU0NBTEVTIiwiY2FtZXJhX2FuZ2xlIiwicmFkIiwic3BpbmluZyIsInVwZGF0ZV9zcHJpdGVfcHJvcGVydGllcyIsIm9sZF9jYW1lcmFfYW5nbGUiLCJiYXR0bGVfZ3JvdXAiLCJjcm9wX2dyb3VwIiwiYWxsaWVzX2NvdW50IiwiZW5lbWllc19jb3VudCIsInNoaWZ0X2Zyb21fbWlkZGxlX2VuZW15Iiwic2hpZnRfZnJvbV9taWRkbGVfYWxseSIsInBhcnR5X2NvdW50IiwicGFydHlfaW5mbyIsInRhcmdldF90eXBlIiwiVVNFUiIsImFiaWxpdHlfY2FzdGVyIiwicmFuZ2VfY3Vyc29yX3Bvc2l0aW9uIiwiYWJpbGl0eV9yYW5nZSIsImNob29zaW5nX3RhcmdldHNfY2FsbGJhY2siLCJjaG9vc2luZ190YXJnZXRzX2ZpbmlzaGVkIiwiY2hhbmdlX3RhcmdldCIsInR3ZWVuX3RvX3BvcyIsImdyb3VwX2luZm8iLCJncm91cF9sZW5ndGgiLCJncm91cF9oYWxmX2xlbmd0aCIsInRhcmdldF9zcHJpdGVfaW5kZXgiLCJzZXRfYmF0dGxlX2N1cnNvcnNfcG9zaXRpb24iLCJibGFja19iZyIsImJhdHRsZV9iZyIsInRpbGVTcHJpdGUiLCJiYXR0bGVfYmcyIiwiYmdfaGVpZ2h0Iiwic2V0X3Nwcml0ZSIsImlzX2FsbHkiLCJlbGxpcHNlc19zZW1pX21ham9yIiwiZWxsaXBzZXNfc2VtaV9taW5vciIsImlzX0FsbHkiLCJmaXJzdF9hbGx5X2NoYXIiLCJsYXN0X2FsbHlfY2hhciIsImZpcnN0X2VuZW15X2NoYXIiLCJsYXN0X2VuZW15X2NoYXIiLCJ1cHBlcl9yZWN0IiwibG93ZXJfeSIsImxvd2VyX3JlY3QiLCJjaG9vc2luZ190YXJnZXRzIiwiaW5pdGlhbGl6ZV9zcHJpdGVzIiwiaW50aWFsaXplX2Nyb3BfcmVjdGFuZ2xlcyIsInByb21pc2UiLCJpbmRleF9zaGlmdGVkIiwicG9zX3giLCJwb3NfeSIsInRoaXNfc2NhbGVfeCIsInNpZ24iLCJ0aGlzX3NjYWxlX3kiLCJjZW50ZXJfc2hpZnQiLCJjdXJzb3JzIiwiY3Vyc29yX3Nwcml0ZSIsInRhcmdldF9pbmRleCIsInRhcmdldF9zcHJpdGUiLCJ0aGlzX3NjYWxlIiwiY3Vyc29yc190d2VlbnMiLCJzZXRfdGFyZ2V0cyIsImN1cnNvcl9jb3VudCIsIm5leHRfdGFyZ2V0IiwicHJldmlvdXNfdGFyZ2V0IiwidW5zZXRfYmF0dGxlX2N1cnNvcnMiLCJrZXlib2FyZCIsImlzRG93biIsIkRFQlVHX0NBTV9QTFVTIiwiREVCVUdfQ0FNX01JTlVTIiwiZGVsdGEiLCJzd2FwQ2hpbGRyZW4iLCJ6IiwicmVsYXRpdmVfYW5nbGUiLCJhbmdsZV9wb3NpdGlvbiIsImdldF9hbmdsZSIsImVsbGlwc2VfcG9zaXRpb24iLCJzaGlmdF9mcm9tX21pZGRsZSIsImdldF9zY2FsZSIsIm9uX2ZhZGVfY29tcGxldGUiLCJvbl9mbGFzaF9jb21wbGV0ZSIsImZhZGUiLCJvbkZhZGVDb21wbGV0ZSIsInJlc2V0RlgiLCJpc194IiwiZWxsaXBzZSIsImF0YW4iLCJ0YW4iLCJkZWZhdWx0X3NjYWxlIiwiU1RBVFVTX0JBUl9DT0xPUl9HT09EIiwiU1RBVFVTX0JBUl9DT0xPUl9CQUQiLCJTVEFSU19YIiwiU1RBUlNfWSIsIlNUQU5EQllfQ09VTlRfWCIsIlNUQU5EQllfQ09VTlRfU0hJRlRfWSIsImRqaW5uaV9pbmZvIiwibmFtZV95Iiwic3RhdHVzX3dpbl9oZWlnaHQiLCJjaGFyc19udW1iZXIiLCJzdGF0dXNfd2luX3dpZHRoIiwic3RhdHVzX3dpbl94Iiwic3RhdHVzX3dpbmRvdyIsImluZm9fc3ByaXRlcyIsInNldF9jaGFyc19pbmZvIiwic3RhbmRieV9jb3VudF90ZXh0Iiwic3RhcnNfZ3JvdXAiLCJjaGFyc19saXN0IiwiaW5mb19zcHJpdGVzX29iaiIsImhwX2Jhcl9ncmFwaGljcyIsImhwX2Jhcl9kYW1hZ2VfZ3JhcGhpY3MiLCJocF9oZWFkZXIiLCJocCIsInBwX2Jhcl9ncmFwaGljcyIsInBwX2Jhcl9kYW1hZ2VfZ3JhcGhpY3MiLCJwcF9oZWFkZXIiLCJwcCIsImJhc2VfeF9wb3MiLCJncm91cF9rZXkiLCJ5X3Bvc19iYXIiLCJkZWZhdWx0X3kiLCJ4X251bWJlcl9wb3MiLCJzaG93X2RqaW5uX2luZm8iLCJ1cGRhdGVfdGV4dCIsImN1cnJlbnRfY2hhcnMiLCJpbmZvX3Nwcml0ZSIsImhwX3dpZHRoIiwidGV4dFdpZHRoIiwicHBfd2lkdGgiLCJocF9kYW1hZ2VfYmFyX3dpZHRoIiwiaHBfZGFtYWdlX2Jhcl94IiwicHBfZGFtYWdlX2Jhcl93aWR0aCIsInBwX2RhbWFnZV9iYXJfeCIsInJlcXVpcmVkX3ZlbnVzX2xldmVsIiwicmVxdWlyZWRfbWVyY3VyeV9sZXZlbCIsInJlcXVpcmVkX21hcnNfbGV2ZWwiLCJyZXF1aXJlZF9qdXBpdGVyX2xldmVsIiwiY2xhc3NfdHlwZSIsInZlbnVzX2x2bCIsIm1lcmN1cnlfbHZsIiwibWFyc19sdmwiLCJqdXBpdGVyX2x2bCIsInNlY29uZGFyeV9hZmluaXR5Iiwic2Vjb25kYXJ5X2VsZW1lbnRzIiwiY2xhc3NlcyIsInRoaXNfY2xhc3MiLCJpbnRlcmFjdGFibGVfb2JqZWN0X2V2ZW50X3R5cGVzIiwiYWxsb3dlZF90aWxlcyIsIm5vdF9hbGxvd2VkX3RpbGVzIiwiaW50ZXJtZWRpYXRlX2NvbGxpZGVyX2xheWVyX3NoaWZ0IiwiY29sbGlzaW9uX3RpbGVzX2JvZGllcyIsImNvbGxpc2lvbl9jaGFuZ2VfZnVuY3Rpb25zIiwiaW50ZXJhY3RhYmxlX29ianNfY29sbGlzaW9uX2dyb3VwcyIsImdldF9ldmVudCIsImJsb2NrX3N0YWlyX2NvbGxpZGVyX2xheWVyX3NoaWZ0IiwiY3JlYXRlQ29sbGlzaW9uR3JvdXAiLCJpbnRlcmFjdGFibGVfb2JqZWN0X3Nwcml0ZSIsImlzX2ludGVyYWN0YWJsZV9vYmplY3QiLCJzZW5kX3RvX2JhY2siLCJzaGlmdF94Iiwic2hpZnRfeSIsImFuY2hvcl9zaGlmdCIsImluaXRpYWxfYW5pbWF0aW9uIiwibWFwX2V2ZW50cyIsImdldF9jdXJyZW50X3Bvc2l0aW9uIiwieF9zaGlmdCIsInlfc2hpZnQiLCJhY3RpdmVfZXZlbnQiLCJzZXRfanVtcF90eXBlX2V2ZW50IiwiSlVNUF9BUk9VTkQiLCJzZXRfanVtcF9hcm91bmRfZXZlbnQiLCJzZXRfc3RhaXJfZXZlbnQiLCJub3RfYWxsb3dlZF90aWxlIiwibm90X2FsbG93ZWRfdGlsZV90ZXN0IiwidGhpc19ldmVudF9sb2NhdGlvbl9rZXkiLCJuZXdfZXZlbnQiLCJpbnNlcnRfZXZlbnQiLCJjaGFuZ2VfdG9fY29sbGlzaW9uX2xheWVyIiwiY2xpbWJpbmdfb25seSIsImNvbGxpc2lvbl9jaGFuZ2VfZnVuY3Rpb24iLCJsYXN0X3lfc2hpZnQiLCJldmVudF9kYXRhIiwidGhpc19sb2NhdGlvbl9rZXkiLCJDbGltYkV2ZW50IiwiY29sbGlzaW9uX2dyb3VwcyIsImNyZWF0aW5nX2Jsb2NraW5nX3N0YWlyX2Jsb2NrIiwiYWN0aXZhdGlvbl9kaXJlY3Rpb24iLCJmaW5pc2hfY2xpbWJpbmciLCJzdGFydF9jbGltYmluZyIsImNoYW5nZV9tYXBfYm9keSIsInhfdHdlZW4iLCJ5X3R3ZWVuIiwiY3JlYXRlX2NsaW1iX2NvbGxpc2lvbl9ib2RpZXMiLCJvdXRfdGltZSIsImVuZF9hbmltYXRpb24iLCJmaW5hbF9zaGFkb3dfcG9zIiwicmVtb3ZlX2NsaW1iX2NvbGxpc2lvbl9ib2RpZXMiLCJwb3N0aW9ucyIsImNsaW1iIiwiY29sbGlzaW9uX3RpbGVzIiwidGlsZV9zaGlmdCIsImNvbGxpZGVfaW5kZXgiLCJjb2xsaWRlX3dpdGhfbWFwIiwiYm9kaWVzIiwiYmFzZV93aW5kb3ciLCJhdmF0YXJfZ3JvdXAiLCJ4X2F2YXRhciIsInlfYXZhdGFyIiwibmFtZV90ZXh0IiwibHZfdGV4dCIsImNsYXNzX3RleHQiLCJocF90ZXh0IiwicHBfdGV4dCIsIm1heF9ocF90ZXh0IiwibWF4X3BwX3RleHQiLCJleHBfdGV4dCIsImluaXRpYWxfY2hhciIsInNldF9jaGFyIiwiSElHSExJR0hUX0hFSUdIVCIsImlzX3BzeW5lcmd5X3dpbmRvdyIsImVsZW1lbnRfbGlzdCIsImVsZW1lbnRfc3ByaXRlX2tleSIsIndpbmRvd19hY3RpdmF0ZWQiLCJjaGFyX3NlbGVjdF9jb250cm9sc19zcHJpdGVzIiwic3ByaXRlX3BhaXIiLCJwYWdlX251bWJlciIsInRleHRfc3ByaXRlc19pbl93aW5kb3ciLCJpY29uX3Nwcml0ZXNfaW5fd2luZG93Iiwic2VsZWN0ZWRfZWxlbWVudF9pbmRleCIsInNlbGVjdGVkX2VsZW1lbnRfdHdlZW4iLCJoaWdobGlnaHRfYmFyIiwicGFnZV9jaGFuZ2UiLCJlbGVtZW50X2NoYW5nZSIsImxpc3RfbGVuZ3RoIiwiZWxlbV9rZXlfbmFtZSIsImNsZWFyX3Nwcml0ZXMiLCJpdGVtX29ianMiLCJnZXRfZWxlbWVudF9rZXlfbmFtZSIsImljb25feCIsImljb25feSIsInhfZWxlbV9uYW1lIiwiaWNvbl9ncm91cCIsIml0ZW1fY291bnQiLCJ4X2VsZW1fcHBfY29zdCIsInVuc2V0X2VsZW1lbnRfdHdlZW4iLCJzZXRfZWxlbWVudF90d2VlbiIsInNldF9oaWdobGlnaHRfYmFyIiwicGFnZSIsInNldF9lbGVtZW50cyIsInJlbW92ZV9mcm9tX2dyb3VwIiwicHJldmlvdXNfcGFnZSIsIm5leHRfcGFnZSIsInByZXZpb3VzX2VsZW1lbnQiLCJuZXh0X2VsZW1lbnQiLCJzaG91bGRlciIsImhvcml6b250YWxfdGltZSIsInNob3VsZGVyX3RpbWUiLCJjaGFyX2luZGV4Iiwic2V0X3BhZ2VfbnVtYmVyIiwidW5zZXRfaGlnaGxpZ2h0X2JhciIsIkNIQVJfTkFNRV9ZIiwiUkVNQUlOX1RFWFRfQ0hBUl9DT1VOVF9ZIiwid2luZG93X2FjdGl2ZSIsImNob29zZW5fcXVhbnRpdHkiLCJpdGVtX2NvdW50ZXIiLCJJdGVtQ291bnRlciIsInJlbWFpbmluZ193aXRoX2NoYXJfY291bnQiLCJuZXdfYW1vdW50X3dpdGhfZGVzdF9jaGFyX2NvdW50IiwidG9fcmVtb3ZlX2NvdW50IiwiZGVjcmVhc2VfYW1vdW50IiwiaW5jcmVhc2VfYW1vdW50IiwiYWR2YW5jZV9zdGVwIiwiZGVzdGluYXRpb25fY2hhciIsImRlc3RfaXRlbV9vYmoiLCJpY29uX3Nwcml0ZSIsImNoYXJfbmFtZSIsImRlc3RfY2hhcl9uYW1lIiwiZXF1aXBfc3ByaXRlIiwiSVRFTV9JQ09OX1giLCJJVEVNX0lDT05fWSIsIml0ZW1fY291bnRfc3ByaXRlIiwic2V0X2hlYWRlciIsInVuc2V0X2hlYWRlciIsImF2YWlsYWJsZV9pdGVtc19jb3VudCIsImRpc2FibGVkX2NvdW50IiwiY3VycmVudF9xdWFudGl0eSIsImFjdGl2ZV9iYXJfZ3JhcGhpY3MiLCJpbmFjdGl2ZV9iYXJfZ3JhcGhpY3MiLCJkaXNhYmxlZF9iYXJfZ3JhcGhpY3MiLCJjcmVhdGVfZ3JpZCIsIkdSSURfSEVJR0hUIiwiTUFYX0lURU1TIiwiR1JJRF9XSURUSCIsImluaXRpYWxfcXVhbnRpdHkiLCJjcmVhdGVfaW5hY3RpdmVfYmFyIiwiTWFpblN0YXR1c1N0YXRlcyIsIk1haW5TdGF0dXNNZW51IiwiY2hhcnNfbWVudSIsIkNoYXJzTWVudSIsIm9uX2NoYXJhY3Rlcl9jaGFuZ2UiLCJtYWluX3dpbmRvdyIsIk1BSU5fV0lOIiwiV0lEVEgiLCJIRUlHSFQiLCJndWlkZV93aW5kb3ciLCJHVUlERV9XSU4iLCJkZXNjX3dpbmRvdyIsIkRFU0NfV0lOIiwiZXF1aXBfd2luZG93IiwiRVFVSVBfV0lOIiwiREVTQ19HVUlERV9LRVkiLCJjb21wb25lbnRzIiwiTWFpblN0YXR1c1N0YXRpc3RpY3MiLCJNYWluU3RhdHVzUHN5bmVyZ3kiLCJNYWluU3RhdHVzRGppbm4iLCJNYWluU3RhdHVzSXRlbXMiLCJlcV9oaWdobGlnaHQiLCJjdXJyZW50X3N0YXRlIiwiY3VycmVudF9jb21wb25lbnQiLCJhY3RpdmVfc3ByaXRlcyIsImJhdHRsZV9lZmZlY3RzIiwic3RhdHVzX2VmZmVjdHMiLCJNQVhfRUZGRUNUU19ESVNQTEFZRUQiLCJ0ZXh0MiIsImRlc2Nfd2luX2dyb3VwIiwiZGVzY19ndWlkZV9zdGF0ZXMiLCJTVEFUSVNUSUNTIiwiSVRFTVMiLCJuZXh0X3N0YXRlIiwiQWR2YW5jZVN0YXRlIiwibmV4dF9zdGF0ZV9uYW1lIiwiZ3VpZGVfYV90eHQiLCJkZXNjX2d1aWRlX2FfdGV4dCIsImZvbnQiLCJGT05UUyIsIklUQUxJQyIsImRlc2NfbGluZTEiLCJkZXNjX2xpbmUyIiwibF9idXR0b24iLCJyX2J1dHRvbiIsImFfYnV0dG9uIiwiaGlmZW4iLCJscl90ZXh0IiwiYV90ZXh0Iiwic2VsZWN0X3RleHQiLCJsYWJlbF94IiwibGFiZWxfeSIsInZhbHVlX2VuZF94IiwidmFsdWVfeSIsImxhYmVsIiwiQ0hBUkFDVEVSUyIsIkxFVkVMIiwiTEFCRUxfWDEiLCJMQUJFTF9ZMSIsIlZBTFVFX0VORF9YMSIsIlZBTFVFX1kxIiwiTEFCRUxfWDIiLCJMQUJFTF9ZMiIsIlZBTFVFX0VORF9YMiIsIlZBTFVFX1kyIiwibGV2ZWxfbGFiZWwiLCJsZXZlbF92YWx1ZSIsIkRFU0NfR1VJREUiLCJISUZFTiIsIkxSX1RFWFQiLCJBX1RFWFQiLCJBVkFUQVIiLCJOQU1FIiwiQ0xBU1NfTkFNRSIsIkdVSURFIiwic2VsZWN0X2J1dHRvbiIsIlNFTEVDVCIsIlNFTEVDVF9URVhUIiwiREVTQyIsIkxJTkUxIiwiTElORTIiLCJFUVVJUF9URVhUIiwiTEFCRUwiLCJlcV93ZWFwb25fbmFtZSIsIlNISUZUIiwiZXFfaGVhZF9uYW1lIiwiZXFfc2hpZWxkX25hbWUiLCJlcV9jaGVzdF9uYW1lIiwiaW5pdF9kZXNjX2d1aWRlIiwic2V0X2JhdHRsZV9lZmZlY3RzIiwibmFtZXMiLCJjaGFuZ2Vfc3RhdGUiLCJzdGF0ZSIsInVwZGF0ZV9pbmZvIiwib25fbGVmdCIsIm9uX3JpZ2h0Iiwib25fdXAiLCJ0cmlnZ2VyX3N0YXRlX2NoYW5nZSIsInNlbGVjdGluZ19jaGFyIiwibmV3X3N0YXRlIiwicmVzZXRfcG9zIiwidG9nZ2xlX2d1aWRlX3dpbiIsIlN0YXRlQ29tcG9uZW50IiwiaW5uZXJfY29udHJvbCIsImNoZWNrX21haW5fY29tcG9uZW50cyIsImdyYW50X2NvbnRyb2wiLCJvcGVuX2RqaW5uX2NvbnRyb2wiLCJub19yZXNldCIsIkdvbGRlblN1biIsInBhcnRpY2xlX21hbmFnZXIiLCJzaG9wX29wZW4iLCJjcmVhdGVkIiwiZm9yY2Vfc3RvcF9tb3ZlbWVudCIsIm1haW5fbWVudSIsInNob3BfbWVudSIsImdhbWVfZXZlbnRfbWFuYWdlciIsImZ1bGxzY3JlZW4iLCJzY2FsZV9mYWN0b3IiLCJ1bmRlcmxheWVyX2dyb3VwIiwib3ZlcmxheWVyX2dyb3VwIiwiR2FtZSIsIldFQkdMIiwicHJlbG9hZCIsImxvYWRSZW5kZXIiLCJsb2FkX2FsbCIsImFkdmFuY2VkVGltaW5nIiwic3RhZ2UiLCJyZW5kZXJlciIsInJlbmRlclNlc3Npb24iLCJyb3VuZFBpeGVscyIsInJlbmRlcl9sb2FkaW5nIiwibG9hZF9kYXRhYmFzZXMiLCJHYW1lcGFkIiwiQ29udHJvbE1hbmFnZXIiLCJpbml0X2RiIiwiaW5pdGlhbF9zY2FsZV9mYWN0b3IiLCJwbHVnaW5zIiwiUGFydGljbGVTdG9ybSIsIkRlYnVnIiwiaW5pdGlhbGl6ZV9jb250cm9scyIsImluaXRpYWxpemVfZ2FtZV9kYXRhIiwibWFwc19saXN0IiwibWFwX2tleV9uYW1lIiwibW91bnRfbWFwIiwibWFwX3pfaW5kZXgiLCJoZXJvX2tleV9uYW1lIiwiSGVybyIsInhfdGlsZV9wb3NpdGlvbiIsInlfdGlsZV9wb3NpdGlvbiIsImhlcm9fc3ByaXRlX2Jhc2UiLCJzZXRfc2hhZG93IiwiY3JlYXRlX2hhbGZfY3JvcF9tYXNrIiwiY2FtZXJhX2ZvbGxvdyIsIkNvbGxpc2lvbiIsImNvbmZpZ19ib2R5IiwiY29uZmlnX2NvbGxpc2lvbl9ncm91cHMiLCJjb25maWdfYWxsX2JvZGllcyIsImNvbmZpZ19jb2xsaXNpb25zIiwidXBkYXRlQm91bmRzQ29sbGlzaW9uR3JvdXAiLCJUaWxlRXZlbnRNYW5hZ2VyIiwiR2FtZUV2ZW50TWFuYWdlciIsImluaXRpYWxpemVfdXRpbHNfY29udHJvbHMiLCJzZXR1cFNjYWxlIiwiZGlzcGF0Y2hFdmVudCIsIkV2ZW50IiwiZnVsbFNjcmVlblNjYWxlTW9kZSIsIlNjYWxlTWFuYWdlciIsIlNIT1dfQUxMIiwib25UYXAiLCJwb2ludGVyIiwiaXNfZG91YmxlX2NsaWNrIiwic3RhcnRGdWxsU2NyZWVuIiwib25GdWxsU2NyZWVuQ2hhbmdlIiwiU2hvcE1lbnUiLCJpbml0aWFsaXplX21lbnUiLCJaT09NMSIsIlpPT00yIiwiWk9PTTMiLCJQU1kxIiwiaW5fYWN0aW9uIiwiZmllbGRfYWJpbGl0aWVzX2xpc3QiLCJtb3ZlIiwiY2FzdCIsImluaXRpYWxfc2hvcnRjdXRzIiwiUFNZMiIsImZyb3N0IiwiUFNZMyIsImdyb3d0aCIsInVwZGF0ZV90aWxlX3Bvc2l0aW9uIiwiZmlyZV90cmlnZ2VyZWRfZXZlbnRzIiwiY2hlY2tfdGlsZV9ldmVudHMiLCJob3Jpem9udGFsX21lbnUiLCJzZXRfZGVidWdfaW5mbyIsImZyYW1lcyIsImZpbGxfa2V5X2RlYnVnX3RhYmxlIiwiZmlsbF9zdGF0c19kZWJ1Z190YWJsZSIsImdvbGRlbl9zdW4iLCJ3ZWJwYWNrUG9seWZpbGwiLCJkZXByZWNhdGUiLCJkZWJ1Z19waHlzaWNzIiwiZ3JpZCIsImRlYnVnX2tleXMiLCJkZWJ1Z19zdGF0cyIsInNob3dfZnBzIiwic2hvd19zbGlkZXJzIiwiZGVidWdfY29udHJvbHMiLCJERUJVR19QSFlTSUNTIiwidG9nZ2xlX2RlYnVnX3BoeXNpY3MiLCJERUJVR19HUklEIiwidG9nZ2xlX2dyaWQiLCJERUJVR19LRVlTIiwidG9nZ2xlX2tleXMiLCJERUJVR19TVEFUUyIsInRvZ2dsZV9zdGF0cyIsIkRFQlVHX0ZQUyIsInRvZ2dsZV9mcHMiLCJERUJVR19TTElERVJTIiwidG9nZ2xlX3NsaWRlcnMiLCJmbGFnIiwidXBkYXRlX2RlYnVnX3BoeXNpY3MiLCJ0b2dnbGVyIiwiaXNfZG93biIsImNsYXNzX2xpc3QiLCJrZXlDb2RlIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY2xhc3NMaXN0IiwiZ2V0RWxlbWVudEJ5SWQiLCJzdHlsZSIsImRpc3BsYXkiLCJvbmtleWRvd24iLCJvbmtleXVwIiwiaG9sZGVyIiwiY3JlYXRlRWxlbWVudCIsImlucHV0X3ZhcmlhYmxlIiwiaW5wdXRfc2xpZGVyIiwiZGlzYWJsZWQiLCJpbnB1dF9taW4iLCJpbnB1dF9tYXgiLCJpbnB1dF9zdGVwIiwiaW5wdXRfdmFsdWUiLCJvbmNoYW5nZSIsImlucHV0X3JlbW92ZSIsIm9uY2xpY2siLCJvbmlucHV0IiwiYXBwZW5kQ2hpbGQiLCJpbm5lckhUTUwiLCJ0b0ZpeGVkIiwiZnBzIiwidGlsZV93aWR0aCIsImdlb20iLCJMaW5lIiwidGlsZV9oZWlnaHQiLCJSZWN0YW5nbGUiLCJDaXJjbGUiLCJwb2ludCIsIm1vdXNlUG9pbnRlciIsIndpdGhpbkdhbWUiLCJtb3VzZV94IiwibW91c2VfeSIsImlubmVyVGV4dCIsIkpTT04iLCJzdHJpbmdpZnkiLCJzZWxlY3RfZWxlbWVudCIsImRlYnVnX3N0YXRzX2luZm8iLCJzZWxlY3RlZCIsImxpc3RlbmVyIiwib3B0aW9uIiwic2V0QXR0cmlidXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJidWZmX2h0bWwiLCJqc29uIiwibG9hZF9kYl9maWxlcyIsImltYWdlIiwibG9hZF9taXNjIiwibG9hZF9hc3NldHMiLCJsb2FkX2J1dHRvbnMiLCJiaXRtYXBGb250IiwibG9hZF9mb250cyIsInNjcmlwdCIsImxvYWRfZmlsdGVycyIsImxvYWRfcGx1Z2lucyIsImNvbmZpZ193b3JsZCIsIm1heF9sYXllcnNfY3JlYXRlZCIsInN0YXJ0U3lzdGVtIiwiUGh5c2ljcyIsIlAySlMiLCJzZXRJbXBhY3RFdmVudHMiLCJkZWZhdWx0Q29udGFjdE1hdGVyaWFsIiwicmVzdGl0dXRpb24iLCJyZWxheGF0aW9uIiwiZnJpY3Rpb24iLCJjb250YWN0U2tpblNpemUiLCJzZXRHbG9iYWxTdGlmZm5lc3MiLCJsYXllcl9pbmRleCIsImNvbGxpc2lvbl9sYXllcnNfbnVtYmVyIiwibmV3X2NvbGxpZGVyX2xheWVyX2luZGV4IiwibGF5ZXJzIiwiaXNfb3Zlcl9wcm9wIiwibGF5ZXJfeiIsImFkZEF0IiwiYXJyb3dfaW5wdXRzIiwiUk9UQVRJT05fS0VZIiwiU1BFRURTIiwiZ2V0X3RyYW5zaXRpb25fZGlyZWN0aW9ucyIsImNvbnRhY3QiLCJpbnRlcmFjdGFibGVfb2JqZWN0X2JvZHkiLCJib2R5QSIsImJvZHlCIiwiZXZlbnRzX2luX3BvcyIsImhhc19zdGFpciIsIml0ZW1fcG9zaXRpb24iLCJwb3NpdGlvbl9hbGxvd2VkIiwibm9ybWFsX3B1c2giLCJub3JtYWxzIiwibmFycm93cGhhc2UiLCJjb250YWN0RXF1YXRpb25zIiwibm9ybWFsQSIsImNoZWNrX2ludGVyYWN0YWJsZV9vYmplY3RzIiwic3BlZWRfbGltaXQiLCJTUEVFRF9MSU1JVF9UT19TVE9QX1dPUkxEX01BUCIsIlNQRUVEX0xJTUlUX1RPX1NUT1AiLCJjb250YWN0X3BvaW50X2RpcmVjdGlvbnMiLCJub3JtYWwiLCJNSU5JTUFMX1NMT1BFIiwid2FsbF9kaXJlY3Rpb24iLCJST1RBVElPTl9OT1JNQUwiLCJyZWxhdGl2ZV9kaXJlY3Rpb24iLCJjaGVja19jb250cm9sX2lucHV0cyIsInNldF9zcGVlZF9mYWN0b3JzIiwic2V0X2N1cnJlbnRfYWN0aW9uIiwiY29sbGlzaW9uX2RlYWxlciIsInVwZGF0ZV9oYWxmX2Nyb3AiLCJzZXRDaXJjbGUiLCJtYXNzIiwiaW5lcnRpYSIsIkZPT1RTVEVQU19UVEwiLCJTRUNPTkQiLCJXQUxLSU5HX1RJTUVfSU5URVJWQUwiLCJSVU5OSU5HX1RJTUVfSU5URVJWQUwiLCJJTklUSUFMX0FDVElPTiIsIklOSVRJQUxfRElSRUNUSU9OIiwiZm9vdF9mb3J3YXJkX3R5cGVzIiwiZGVhZF9zdGVwcyIsImRlYWRfaW5kZXgiLCJmb290X2ZvcndhcmQiLCJmb290c3RlcHNfdGltZV9pbnRlcnZhbCIsIm5ld19zdGVwX3RpbWVyIiwiZXhwaXJlX3RpbWVyIiwiZm9vdHN0ZXBzX3Nwcml0ZV9iYXNlIiwiZXhwaXJlZCIsImdldEluZGV4IiwidXBkYXRlX2Zvb3QiLCJmb290c3RlcHNfdHlwZSIsImFuaW1hdGlvbl9uYW1lIiwiZm9vdHN0ZXBzX3Nwcml0ZSIsInBvc2l0aW9uX2Zvb3RzdGVwcyIsImtpbGxfc3RlcCIsInNldF9leHBpcmVfdGltZXIiLCJzZXRfbmV3X3N0ZXBfdGltZXIiLCJmb3JjZV9kZXN0cm95IiwicmVtb3ZlQWxsIiwiY2xlYW5fYWxsIiwiRXZlbnRRdWV1ZSIsImNsaW1iX2V2ZW50IiwicXVldWUiLCJ0aGlzX2FjdGl2YXRpb25fZGlyZWN0aW9uIiwiZmlyZV9mdW5jdGlvbiIsImZpcmUiLCJldmVudF90aW1lcnMiLCJ0cmlnZ2VyZWRfZXZlbnRzIiwiU1BFRUQiLCJjdXJyZW50X2V2ZW50IiwiVEVMRVBPUlQiLCJTTElERVIiLCJldmVudF9xdWV1ZSIsImp1bXBfbmVhcl9jb2xsaXNpb24iLCJhZHZhbmNlX2VmZmVjdCIsIlNURVAiLCJDT0xMSVNJT04iLCJldmVudF90cmlnZ2VyZWQiLCJ0aW1lciIsIkVWRU5UX0lOSVRfREVMQVkiLCJmaXJlX2V2ZW50IiwicHJvY2Vzc19xdWV1ZSIsImludGVyYWN0aW9uX3BhdHRlcm5zIiwiY29udHJvbF9lbmFibGUiLCJmaXJlX25leHRfc3RlcCIsInNldF9jb250cm9scyIsInNlYXJjaF9mb3JfbnBjIiwibnBjcyIsIm5wYyIsIlNQUklURSIsImlzX2Nsb3NlIiwic2V0X25wY19ldmVudCIsIm1hbmFnZV9ucGNfZGlhbG9nIiwiZmlyZV9ucGNfZXZlbnRzIiwic2V0X25wY19hbmRfaGVyb19kaXJlY3Rpb25zIiwicmVzZXRfbnBjX2RpcmVjdGlvbiIsIm5wY194IiwibnBjX3kiLCJpbnRlcmFjdGlvbl9wYXR0ZXJuIiwiaW50ZXJhY3Rpb25fZGlyZWN0aW9ucyIsImdldF9pbnRlcmFjdGlvbl9kaXJlY3Rpb25zIiwidGFyZ2V0X2RpcmVjdGlvbiIsImRpYWxvZ19tYW5hZ2VyIiwiRGlhbG9nTWFuYWdlciIsInRhcmdldF9ib2R5X3JhZGl1cyIsIkNST1NTIiwiVElLX1RBS19UT0UiLCJiYXR0bGUiLCJzdGFydF9iYXR0bGUiLCJsb2dzIiwibG9nX3RleHQiLCJyZXNvbHZlX2FuaW0iLCJmb3JjZV91c2UiLCJVU0UiLCJVTkxFQVNIIiwiREVGRU5EIiwiSVRFTV9VTkxFQVNIIiwicHBfZGFtYWdlIiwic3RhdF9zdHIiLCJzdGFydF9idXR0b25zX2tleXMiLCJzdGFydF9ob3Jpem9udGFsX21lbnUiLCJIb3Jpem9udGFsTWVudSIsInN0YXJ0X2J1dHRvbl9wcmVzcyIsImlubmVyX2J1dHRvbnNfa2V5cyIsImlubmVyX2hvcml6b250YWxfbWVudSIsImlubmVyX2J1dHRvbl9wcmVzcyIsImlubmVyX21lbnVfY2FuY2VsIiwiQ2hhcnNTdGF0dXNXaW5kb3ciLCJkZXNjcmlwdGlvbl93aW5kb3ciLCJCYXR0bGVEZXNjcmlwdGlvbldpbmRvdyIsImRqaW5uX3dpbmRvdyIsIkJhdHRsZURqaW5uV2luZG93IiwicHN5bmVyZ3lfd2luZG93IiwiQmF0dGxlUHN5bmVyZ3lXaW5kb3ciLCJpdGVtX3dpbmRvdyIsIkJhdHRsZUl0ZW1XaW5kb3ciLCJzdW1tb25fd2luZG93IiwiQmF0dGxlU3VtbW9uV2luZG93IiwiQmF0dGxlU3RhdHVzV2luZG93IiwiYXZhdGFyX3Nwcml0ZSIsImN1cnJlbnRfYnV0dG9ucyIsImRqaW5uaV9hbHJlYWR5X3VzZWQiLCJjdXJyZW50X2NoYXJfaW5kZXgiLCJjaGFuZ2VfY2hhciIsIm9uX2FiaWxpdHlfY2hvb3NlIiwiZGVzY3JpcHRpb25fb25fdG9wIiwiYWN0aW9uX3R5cGUiLCJzdW1tb25fdXNlZF9kamlubiIsInNldF9kZXNjcmlwdGlvbiIsInBvcF9hYmlsaXR5IiwiYmVmb3JlX2NoYXIiLCJhYmlsaXRpZXNfY291bnQiLCJhYmlsaXR5X2luZm8iLCJoaWRlX2F2YXRhciIsIm9uX3RvcCIsIlBTWV9HQUlOX0NPTE9SIiwiUFNZX0xPU1RfQ09MT1IiLCJQU1lfSU5GT18yX1kiLCJQU1lfSU5GT18xX1kiLCJtaXNjX3Nwcml0ZXNfaW5fd2luZG93IiwiYnV0dG9uIiwiYWJpbGl0eV9pbmRleCIsImNoYW5nZV9hYmlsaXR5Iiwic2VsZWN0X2FiaWxpdHkiLCJjaGFuZ2VfcGFnZSIsImFsbF9hYmlsaXRpZXMiLCJzZXRfYWJpbGl0aWVzX2xpc3QiLCJwc3lfc2VhbGVkIiwicHN5bmVyZ3lfbmFtZV9zcHJpdGUiLCJwcF9zcHJpdGUiLCJwc3luZXJneV9jb3N0X3Nwcml0ZSIsImV4cGFuZGVkIiwidXBkYXRlX3RleHRfY29sb3IiLCJsb3N0X2FiaWxpdGllcyIsImN1cnJlbnRfYWJpbGl0aWVzIiwicHJldmlld192YWx1ZXMiLCJwcmV2aWV3X2RqaW5uX2NoYW5nZSIsIm5leHRfZGppbm5pX3N0YXR1cyIsIm5leHRfYWJpbGl0aWVzIiwiY3VycmVudF9zZXQiLCJuZXh0X3NldCIsImludGVyc2VjdGlvbl9hYmlsaXRpZXMiLCJwc3lfaW5mb18xX3RleHQiLCJwc3lfaW5mb18yX3RleHQiLCJzZXRfYWJpbGl0aWVzIiwiY2xlYXJfcHN5X2dhaW4iLCJwcmV2aW91c19hYmlsaXR5IiwibmV4dF9hYmlsaXR5IiwiY2hvb3Nlbl9hYmlsaXR5IiwibmV4dF9kamlubl9zdGF0dXMiLCJhYmlsaXR5X2Nob29zZSIsInN0YXRzX3dpbmRvdyIsIkRqaW5uU3RhdHNXaW5kb3ciLCJkamlubl9uYW1lcyIsInN0YXJzX3Nwcml0ZXMiLCJvcGVuX3BzeV9rZXkiLCJkamlubl9pbmRleCIsImNoYW5nZV9kamlubiIsInBzeW5lcmd5X3dpbmRvd19vcGVuIiwiY2hhbmdlX2RqaW5uaSIsInNlbGVjdF9kamlubiIsInRoaXNfZGppbm4iLCJjb25maWdfcGFnZSIsImNhbGxfc2V0X2Rlc2NyaXB0aW9uIiwidXBkYXRlX3N0YXRzIiwiYWxsX2RqaW5uaSIsInN0YXIiLCJyZWNfbnVtYmVyIiwibmV4dF9zdGF0dXMiLCJzZXRfZGppbm4iLCJnZXRfbmV4dF9zdGF0dXMiLCJwcmV2aW91c19kamlubiIsIm5leHRfZGppbm4iLCJkamlubl9jaG9vc2UiLCJjb250cm9sIiwic2hvd19wc3luZXJneSIsImhpZGVfcHN5bmVyZ3kiLCJsYWJlbHMiLCJiZWZvcmVfc3RhdHMiLCJhZnRlcl9zdGF0cyIsInVwX2Fycm93cyIsImRvd25fYXJyb3dzIiwiaGlkZV9hcnJvd3MiLCJiZWZvcmVfY2xhc3NfdGV4dCIsImFmdGVyX2NsYXNzX3RleHQiLCJTSElGVF9CVVRUT05fWCIsIlNISUZUX0JVVFRPTl9ZIiwiY3VycmVudF9zdGF0IiwibmV4dF9zdGF0Iiwic2V0X3N0YXRzIiwiaXRlbV9uYW1lcyIsIm90aGVyX3Nwcml0ZXMiLCJpdGVtX2luZGV4IiwiY2hhbmdlX2l0ZW0iLCJzZWxlY3RfaXRlbSIsImFsbF9pdGVtcyIsIml0ZW1feSIsIk5PX1VTRSIsInByZXZpb3VzX2l0ZW0iLCJuZXh0X2l0ZW0iLCJ0aGlzX2l0ZW0iLCJpdGVtX2Nob29zZSIsImRqaW5uX251bWJlcnNfd2luZG93IiwiU3VtbW9uRGppbm5TdGFuZGJ5V2luZG93Iiwic3VtbW9uX25hbWVzIiwic3VtbW9uX2luZGV4IiwiY2hhbmdlX3N1bW1vbiIsInN1bW1vbnMiLCJzZWxlY3Rfc3VtbW9uIiwic2V0X251bWJlcnMiLCJhbGxfc3VtbW9ucyIsInN1bW1vbl95IiwiY2FuX2JlX3N1bW1vbmVkIiwic3VtbW9uIiwiYXZhaWxhYmxlIiwicHJldmlvdXNfc3VtbW9uIiwibmV4dF9zdW1tb24iLCJzdW1tb25fY2hvb3NlIiwidGV4dHMiLCJ0aW1lcnMiLCJkamlubl9udW1iZXIiLCJibGluayIsIkJhdHRsZVN0YXR1c1N0YXRlcyIsImRlc2Nfc2hpZnRlZCIsImVmZmVjdF9zcHJpdGVzIiwiV0lORE9XIiwiQmF0dGxlU3RhdHVzU3RhdGlzdGljcyIsIkJhdHRsZVN0YXR1c1BzeW5lcmd5IiwiQmF0dGxlU3RhdHVzRGppbm4iLCJCYXR0bGVTdGF0dXNJdGVtcyIsImJhdHRsZV9zcHJpdGUiLCJpbml0X3RleHQiLCJMQUJFTF9YIiwiTEFCRUxfWSIsIlZBTFVFX0VORF9YIiwiVkFMVUVfWSIsIkVYUCIsImV4cF92YWx1ZSIsIm5vcm1hbF9zdGF0dXMiLCJOT1JNQUxfU1RBVFVTIiwiSFAiLCJNQVhfRU5EX1giLCJNQVhfWSIsImN1cnJfaHAiLCJDVVJSX0VORF9YIiwiQ1VSUl9ZIiwiUFAiLCJjdXJyX3BwIiwiU1RBVFMiLCJMSU5FX1NISUZUIiwiYXRrX3ZhbHVlIiwiZGVmX3ZhbHVlIiwiYWdpX3ZhbHVlIiwibHVrX3ZhbHVlIiwiaW5fdGhlX2JhY2siLCJJTl9USEVfQkFDSyIsIkRFU0NSSVBUSU9OIiwiTElORTFfWSIsIkxJTkUyX1kiLCJwYXJ0eSIsInVwZGF0ZV9lZmZlY3RzIiwiZ2V0X3N0YXR1c19lZmZlY3RzIiwiYnVmZnNfZGVidWZmcyIsImdldF9idWZmc19kZWJ1ZmZzIiwibWFpbl9jaGFyX2VmZmVjdCIsIm1vZGlmaWVyIiwic3RhdF9rZXlzIiwidmFsIiwicHJldmlld19zdGF0X3dpdGhvdXRfYWJpbGl0aWVzX2VmZmVjdCIsImVsZW1lbnRhbF9iYXNlIiwicHJldmlld19lbGVtZW50YWxfc3RhdHNfd2l0aG91dF9hYmlsaXRpZXNfZWZmZWN0IiwicG93ZXJfdmFsdWUiLCJyZXNpc3RfdmFsdWUiLCJtZW51IiwiQkFUVExFU1BSSVRFIiwiRU5EX1kiLCJFRkZFQ1RTIiwibmV3X2NoYXIiLCJzZXRfc3ByaXRlcyIsImNoYW5nZV9jaGFyYWN0ZXIiLCJjaGVja19zaGlmdCIsInNlcGFyYXRvcl94IiwiU0VQQVJBVE9SIiwic2VwYXJhdG9yX3kiLCJzZXBhcmF0b3Jfd2lkdGgiLCJjbGVhcl9jb21wb25lbnQiLCJTSEFET1dfWSIsIkJhdHRsZVN0YXRpc3RpY3MiLCJDVVJTT1IiLCJiYXR0bGVfc3RhdHVzX2VmZmVjdHMiLCJoaWdobGlnaHRfc2hpZnQiLCJFRkZFQ1QiLCJjdXJzb3Jfc2hpZnQiLCJ1cGRhdGVfaGlnaGxpZ2h0IiwiY3Vyc29yX3R3ZWVuIiwiU0hPUlQiLCJtc2dzIiwiQmF0dGxlRGVzY3JpcHRpb25zIiwiQmF0dGxlU3RhdHVzTXNncyIsImVmZmVjdF9uYW1lIiwiZWxlbXNfdG9fc2hvdyIsImVsZW1lbnRfbmFtZSIsIkJhdHRsZUJ1ZmZNc2dzIiwiZWZmZWN0c19jb3VudCIsIkxJTkVTIiwic3RhcnMiLCJTVEFSUyIsIlNUQVJTX1NISUZUIiwiTEFCRUxfU0hJRlQiLCJkamlubl9jb3VudHMiLCJnZXRfZGppbm5fY291bnRzIiwiZWxlbWVudGFsX3N0YXRzIiwiZ2V0X2VsZW1lbnRhbF9zdGF0cyIsIkVMRU1fTlVNQkVSUyIsIkVORF9YIiwiWV9TSElGVCIsIkNMQVNTIiwiRUxFTV9MRVZFTFMiLCJFTEVNX1BPV0VSIiwiRUxFTV9SRVNJU1QiLCJjaG9zZW5fYWJpbGl0eSIsImJhdHRsZV9hYmlsaXRpZXMiLCJwYWdlcyIsInBhZ2VfaW5kaWNhdG9yX2FuY2hvciIsIlBBR0VfSU5ESUNBVE9SX0FOQ0hPUiIsImljb25fa2V5Iiwic3Rhcl9rZXkiLCJJQ09OX1giLCJJQ09OX1kiLCJOQU1FX1giLCJOQU1FX1kiLCJQUF9MQUJFTF9YIiwiUFBfTEFCRUxfWSIsInBwX2xhYmVsIiwiUFBfVkFMVUVfRU5EX1giLCJQUF9WQUxVRV9ZIiwicHBfdmFsdWUiLCJTVEFSX1giLCJTVEFSX1kiLCJSQU5HRV9DRU5URVJfWCIsIlJBTkdFX1kiLCJyYW5nZV9pY29uIiwicGFnZV9hYmlsaXRpZXMiLCJNQVhfTElORVMiLCJjb25zb2xlIiwid2FybiIsIlNISUZUX1giLCJTSElGVF9ZIiwiY2hvc2VuX2RqaW5uIiwiY2hhcl9kamlubiIsIm1zZyIsInVwZGF0ZV9kamlubiIsImNvbF9pbmRleCIsImxpbmVfaW5kZXgiLCJyZWNvdmVyeSIsIlJFQ09WRVJZX0VORF9YIiwiUkVDT1ZFUllfWSIsInJlY292ZXJ5X3RleHQiLCJkamlubl9saXN0IiwiY29sX2RqaW5uIiwiY2hvc2VuX2l0ZW0iLCJjaGFyX2l0ZW1zIiwiaXRlbV9rZXkiLCJJVEVNIiwibWFrZV9pdGVtX29iaiIsInNvcnRlZF9pdGVtcyIsInBhZ2VfaXRlbXMiLCJFbmVteSIsImVuZW15X2RhdGEiLCJ2ZW51c19sZXZlbCIsIm1lcmN1cnlfbGV2ZWwiLCJtYXJzX2xldmVsIiwianVwaXRlcl9sZXZlbCIsInZlbnVzX3Bvd2VyIiwibWVyY3VyeV9wb3dlciIsIm1hcnNfcG93ZXIiLCJqdXBpdGVyX3Bvd2VyIiwidmVudXNfcmVzaXN0IiwibWVyY3VyeV9yZXNpc3QiLCJtYXJzX3Jlc2lzdCIsImp1cGl0ZXJfcmVzaXN0Iiwic2V0X2Jhc2VfYXR0cmlidXRlcyIsImN1cnJlbnRfaHBfcmVjb3ZlcnkiLCJjdXJyZW50X3BwX3JlY292ZXJ5IiwiZGlzcGxheV9uYW1lIiwiYWJpbGl0eV9uYW1lIiwiYWJpbGl0eV9uYW1lX3giLCJzdGFyX3giLCJ3aW5kb3dfc3ByaXRlcyIsImljb25fc3ByaXRlX3NoZWV0IiwicmVxcyIsInJlcSIsInJlcV90ZXh0Iiwic2V0X2luZm8iLCJhbGxpZXMiLCJlbmVtaWVzIiwiY2hhcl9jaG9zZW4iLCJhbGx5IiwiYXZhaWxhYmxlX3RhcmdldCIsImFnaWxpdHkiLCJtdWx0aV90dXJuIiwidHVybl9udW1iZXIiLCJ0dXJuX3F1YW50aXR5IiwicHJpb3JpdHkiLCJyZWxhdGl2ZV9hdGsiLCJiYXNlX2RhbWFnZSIsImlzX3BzeW5lcmd5IiwiY2FzdGVyX3Bvd2VyIiwidGFyZ2V0X3Jlc2lzdCIsInNwZWNpYWxfcGh5c2ljYWxfYXR0YWNrIiwicG93ZXJfbXVsdGlwbGllciIsImRqaW5uaV91c2VkIiwiYmFzZV9jaGFuY2UiLCJ2dWxuZXJhYml0eSIsImxldmVsX2tleSIsInBvaXNvbl90eXBlIiwicG9pc29uX2ZhY3RvciIsIm5vdF9hdmFpbGFibGUiLCJyZW5kZXJfZnVuY3Rpb24iLCJiYXR0bGVfYW5pbV9rZXkiLCJyZWNpcGVfa2V5Iiwic3ByaXRlX2xvYWRlciIsInJlY2lwZV9sb2FkZXIiLCJzcHJpdGVfbG9hZGVyX3Byb21pc2VfcmVzb2x2ZSIsImFsbF9zdWNjZWVkIiwic3ByaXRlX2xvYWRlcl9wcm9taXNlIiwicmVjaXBlX2xvYWRlcl9wcm9taXNlX3Jlc29sdmUiLCJvbkZpbGVDb21wbGV0ZSIsInByb2dyZXNzIiwiZmlsZWtleSIsInN1Y2Nlc3MiLCJyZWNpcGVfbG9hZGVyX3Byb21pc2UiLCJsb2FkX2NvbXBsZXRlX3Byb21pc2VfcmVzb2x2ZSIsImxvYWRfY29tcGxldGVfcHJvbWlzZSIsImFuaW1hdGlvbl9yZWNpcGUiLCJnZXRKU09OIiwiQmF0dGxlQW5pbWF0aW9uIiwieF9zZXF1ZW5jZSIsInlfc2VxdWVuY2UiLCJ4X2VsbGlwc2VfYXhpc19mYWN0b3Jfc2VxdWVuY2UiLCJ5X2VsbGlwc2VfYXhpc19mYWN0b3Jfc2VxdWVuY2UiLCJ4X3NjYWxlX3NlcXVlbmNlIiwieV9zY2FsZV9zZXF1ZW5jZSIsInhfYW5jaG9yX3NlcXVlbmNlIiwieV9hbmNob3Jfc2VxdWVuY2UiLCJhbHBoYV9zZXF1ZW5jZSIsInJvdGF0aW9uX3NlcXVlbmNlIiwic3RhZ2VfYW5nbGVfc2VxdWVuY2UiLCJodWVfYW5nbGVfc2VxdWVuY2UiLCJ0aW50X3NlcXVlbmNlIiwiZ3JheXNjYWxlX3NlcXVlbmNlIiwiY29sb3JpemVfc2VxdWVuY2UiLCJjdXN0b21fZmlsdGVyX3NlcXVlbmNlIiwicGxheV9zZXF1ZW5jZSIsInNldF9mcmFtZV9zZXF1ZW5jZSIsImJsZW5kX21vZGVfc2VxdWVuY2UiLCJwYXJ0aWNsZXNfc2VxdWVuY2UiLCJpc19wYXJ0eV9hbmltYXRpb24iLCJ0YXJnZXRzX3Nwcml0ZXMiLCJwbGF5X3Byb21pc2VfcmVzb2x2ZSIsInBsYXlfcHJvbWlzZSIsInJlbW92ZVRleHR1cmVBdGxhcyIsInJlbW92ZUpTT04iLCJab25lVHlwZXMiLCJzcHJpdGVzX2tleXMiLCJyZW5kZXJfY2FsbGJhY2tzIiwiZ3JvdXBfZW5lbXkiLCJzdXBlcl9ncm91cCIsInN0YWdlX2NhbWVyYSIsImJhY2tncm91bmRfc3ByaXRlcyIsInNwcml0ZXNfcHJldl9wcm9wZXJ0aWVzIiwic3RhZ2VfcHJldl92YWx1ZSIsIngwIiwieTAiLCJ0cmFpbHNfb2JqcyIsImJhY2tfZ3JvdXAiLCJmcm9udF9ncm91cCIsInRyYWlsc19pbmZvIiwidHJhaWxzIiwiaW5pdGlhbGl6ZV90cmFpbF90ZXh0dXJlcyIsInRyYWlsX2ZyYW1lX2RpZmYiLCJ0cmFpbHNfbW9kZSIsInBlcl90YXJnZXQiLCJwc3lfc3ByaXRlIiwiYWRkQ2hpbGQiLCJhZGRDaGlsZEF0IiwiZnJhbWVUb3RhbCIsImJhdHRsZV9pbmRleCIsInhfaGlzdG9yeSIsImZyYW1lX2RpZmYiLCJ5X2hpc3RvcnkiLCJzZXRfZmlsdGVycyIsImJsZW5kX21vZGUiLCJ0cmFpbF90ZXh0dXJlIiwicmVuZGVyVGV4dHVyZSIsInRyYWlsX3Nwcml0ZSIsInRyYWlsX3RleHR1cmVfMiIsInRyYWlsX3Nwcml0ZV8yIiwidGV4dHVyZV8xIiwidGV4dHVyZV8yIiwiY2FzdGVyX2ZpbHRlciIsInRhcmdldHNfZmlsdGVyIiwiYmFja2dyb3VuZF9maWx0ZXIiLCJzcHJpdGVzX2ZpbHRlcnMiLCJmaWx0ZXJzIiwiZmluaXNoX2NhbGxiYWNrIiwicGxheV9udW1iZXJfcHJvcGVydHlfc2VxdWVuY2UiLCJwbGF5X3Nwcml0ZV9zZXF1ZW5jZSIsInBsYXlfYmxlbmRfbW9kZXMiLCJwbGF5X2ZpbHRlcl9wcm9wZXJ0eSIsInBsYXlfc3RhZ2VfYW5nbGVfc2VxdWVuY2UiLCJwbGF5X3BhcnRpY2xlcyIsInVubW91bnRfYW5pbWF0aW9uIiwic2VxIiwiaW5uZXJfcHJvcGVydHkiLCJzcHJpdGVfaW5kZXgiLCJzZXF1ZW5jZSIsInRhcmdldF9wcm9wZXJ0eSIsImNoYWluZWRfdHdlZW5zIiwiYXV0b19zdGFydF90d2VlbiIsImdldF9zcHJpdGVzIiwicHJvbWlzZXNfc2V0IiwidGhpc19zcHJpdGUiLCJ1bmlxX2tleSIsInNlcV90byIsInRvX3ZhbHVlIiwiZ2V0X2FuZ2xlX2J5X2RpcmVjdGlvbiIsImlzX2Fic29sdXRlIiwic3RhcnRfZGVsYXkiLCJkdXJhdGlvbiIsInJlc29sdmVfZnVuY3Rpb24iLCJ0aGlzX3Byb21pc2UiLCJmb3JjZV9zdGFnZV91cGRhdGUiLCJ5b3lvIiwib25TdGFydCIsInBsYXlfc2VxIiwiYW5pbSIsInJldmVyc2VkIiwiaGlkZV9vbl9jb21wbGV0ZSIsImJsZW5kX21vZGVfc2VxIiwic2Vjb25kYXJ5X3Byb3BlcnRpZXMiLCJmaWx0ZXJfc2VxIiwidGhpc19wcm9wZXJ0eSIsInNlY29uZGFyeV9wcm9wZXJ0eSIsInN0YWdlX2FuZ2xlX3NlcSIsImFkdl9wYXJ0aWNsZXNfc2VxIiwiem9uZV9vYmpzIiwiem9uZXMiLCJ6b25lX2luZm8iLCJ6b25lIiwiQ0lSQ0xFIiwiY3JlYXRlQ2lyY2xlWm9uZSIsIkVMTElQU0UiLCJjcmVhdGVFbGxpcHNlWm9uZSIsIkxJTkUiLCJjcmVhdGVMaW5lWm9uZSIsInBvaW50cyIsImNyZWF0ZVBvaW50Wm9uZSIsIlJFQ1RBTkdMRSIsImNyZWF0ZVJlY3RhbmdsZVpvbmUiLCJ6b25lX2tleSIsImFkZERhdGEiLCJlbWl0dGVycyIsImVtaXR0ZXJfaW5mbyIsImVtaXR0ZXIiLCJjcmVhdGVFbWl0dGVyIiwicmVuZGVyX3R5cGUiLCJyZW5kZXJfd2hpdGVfY29yZSIsImF1dG9DbGVhciIsInNob3dfdHJhaWxzIiwicGl4ZWxfcmVkdWNpbmdfZmFjdG9yIiwidHJhaWxzX2NsZWFyX2ZhY3RvciIsIl9kZWxheSIsIndhaXRpbmciLCJwaXhlbFNpemUiLCJwaXhlbF9zaXplIiwidXNlUmVjdCIsInBpeGVsX2lzX3JlY3QiLCJwYXJ0aWNsZXNfZGlzcGxheV9ibGVuZF9tb2RlIiwicmVzaXplIiwiYWRkVG9Xb3JsZCIsImdyYXZpdHlfd2VsbCIsImNyZWF0ZUdyYXZpdHlXZWxsIiwiZXBzaWxvbiIsImdyYXZpdHkiLCJnZXRfc3ByaXRlX3h5X3BvcyIsImVtaXQiLCJlbWl0dGVyX2RhdGFfa2V5IiwiZnJlcXVlbmN5IiwieF9zdGVwIiwieFN0ZXAiLCJ5X3N0ZXAiLCJ5U3RlcCIsInJhbmRvbV9pbl96b25lIiwic3BhY2luZyIsInJhZGlhdGUiLCJyYWRpYXRlRnJvbSIsInBhcnRpY2xlX2tleSIsInBhcnRpY2xlX3Nwcml0ZV9iYXNlIiwicGFydGljbGUiLCJvbkVtaXQiLCJTaWduYWwiLCJlbWlzc2lvbl9maW5pc2giLCJyZW1vdmVFbWl0dGVyIiwiY2xlYXJEYXRhIiwidW5zaGlmdCIsInJlbmRlclhZIiwiY3VycmVudF9hbmdsZSIsImZvdXJ0aF9xdWFkcmFudCIsInRoaXNfZGlyZWN0aW9uIiwibmV3X3RhcmdldCIsInRhcmdldF9kZWx0YSIsIm5ld190YXJnZXRfZGVsdGEiLCJtaXNjX2FuaW1hdGlvbnNfZGIiLCJjbGFzc2VzX2RiIiwiYWJpbGl0aWVzX2RiIiwiaXRlbXNfZGIiLCJkamlubmlfZGIiLCJlbmVtaWVzX2RiIiwibWFwc19kYiIsIm1haW5fY2hhcnNfZGIiLCJzdW1tb25zX2RiIiwic2hvcGtlZXBfZGlhbG9nX2RiIiwic2hvcHNfZGIiLCJzaG9wa2VlcF9kaWFsb2ciLCJpbnRlcmFjdGFibGVfb2JqZWN0X2RhdGEiLCJlbmVteV9wYXJ0eV9kYXRhIiwibnBjX2RhdGEiLCJsb2FkX21hcHNfcHJvbWlzZV9yZXNvbHZlIiwibG9hZF9tYXBzX3Byb21pc2UiLCJsb2FkX2VuZW1pZXNfc3ByaXRlc19wcm9taXNlX3Jlc29sdmUiLCJpbml0aWFsaXplX21hcHMiLCJpbml0aWFsaXplX2NsYXNzZXMiLCJsb2FkX2VuZW1pZXNfc3ByaXRlc19wcm9taXNlIiwibG9hZF9kamlubmlfc3ByaXRlc19wcm9taXNlX3Jlc29sdmUiLCJpbml0aWFsaXplX2VuZW1pZXMiLCJpbml0aWFsaXplX2RqaW5uaSIsImxvYWRfZGppbm5pX3Nwcml0ZXNfcHJvbWlzZSIsImxvYWRfYWJpbGl0aWVzX3Byb21pc2VfcmVzb2x2ZSIsImluaXRpYWxpemVfZGppbm5pX3Nwcml0ZXMiLCJsb2FkX2FiaWxpdGllc19wcm9taXNlIiwibG9hZF9pdGVtc19wcm9taXNlX3Jlc29sdmUiLCJpbml0aWFsaXplX2FiaWxpdGllcyIsImxvYWRfaXRlbXNfcHJvbWlzZSIsImxvYWRfY2hhcnNfcHJvbWlzZV9yZXNvbHZlIiwiaW5pdGlhbGl6ZV9pdGVtcyIsImNvaW5zIiwiZ2FtZV90aWNrZXRzIiwiY29pbnNfcmVtYWluaW5nIiwidGlja2V0c19ib3VnaHQiLCJsb2FkX2NoYXJzX3Byb21pc2UiLCJsb2FkX21pc2NfcHJvbWlzZV9yZXNvbHZlIiwiaW5pdGlhbGl6ZV9tYWluX2NoYXJzIiwibG9hZF9taXNjX3Byb21pc2UiLCJsb2FkX2l0ZXJfb2Jqc19wcm9taXNlX3Jlc29sdmUiLCJpbml0aWFsaXplX21pc2NfZGF0YSIsImxvYWRfaXRlcl9vYmpzX3Byb21pc2UiLCJpdGVyX29ianNfc3ByaXRlX2Jhc2VfbGlzdCIsImluaXRpYWxpemVfaW50ZXJhY3RhYmxlX29ianNfZGF0YSIsInNob3BzX2xpc3QiLCJpbml0aWFsaXplX3Nob3BzIiwiaW5pdGlhbGl6ZV9zdW1tb25zIiwiaW5pdGlhbGl6ZV9maWVsZF9hYmlsaXRpZXMiLCJjbGFzc19kYXRhIiwiQ2xhc3NlcyIsImxvYWRfcHJvbWlzZV9yZXNvbHZlIiwibG9hZF9wcm9taXNlcyIsImNoYXJfZGF0YSIsIlNwcml0ZUJhc2UiLCJzZXRBY3Rpb25TcHJpdGVzaGVldCIsInNwcml0ZXNoZWV0X2ltZyIsInNldEFjdGlvbkRpcmVjdGlvbnMiLCJkaXJlY3Rpb25zX2ZyYW1lc19udW1iZXIiLCJzZXRBY3Rpb25GcmFtZVJhdGUiLCJzZXRBY3Rpb25Mb29wIiwibG9hZF9zcHJpdGVzaGVldF9wcm9taXNlX3Jlc29sdmUiLCJnZW5lcmF0ZUFsbEZyYW1lcyIsImxvYWRfc3ByaXRlc2hlZXRfcHJvbWlzZSIsImxvYWRTcHJpdGVzaGVldHMiLCJhYmlsaXR5X2RhdGEiLCJNb3ZlRmllbGRQc3luZXJneSIsIkZyb3N0RmllbGRQc3luZXJneSIsIkdyb3d0aEZpZWxkUHN5bmVyZ3kiLCJGaWVsZEFiaWxpdGllcyIsIkFCSUxJVFlfS0VZX05BTUUiLCJNT1ZFX01BWF9SQU5HRSIsIkFDVElPTl9LRVlfTkFNRSIsInNldF9ib290c3RyYXBfbWV0aG9kIiwiaW5pdF9tb3ZlIiwic2V0X2Nhc3RfZmluaXNoZXJfbWV0aG9kIiwidW5zZXRfaHVlX3NoaWZ0ZXIiLCJoYW5kX3Nwcml0ZV9iYXNlIiwiTU9WRV9IQU5EX0tFWV9OQU1FIiwiaGFuZF9zcHJpdGUiLCJmaW5hbF9lbWl0dGVyIiwiZmlyZV9wdXNoIiwiZmluaXNoX2hhbmQiLCJ1bnNldF9oZXJvX2Nhc3RfYW5pbSIsInRhcmdldF9vbmx5X3B1c2giLCJ4X3RhcmdldCIsInlfdGFyZ2V0IiwibmVlZF9jaGFuZ2UiLCJqb2luX2RpcmVjdGlvbnMiLCJkZXN0X2RpcmVjdGlvbiIsInNvcnRfc3ByaXRlcyIsInRyYW5zbGF0ZV94IiwidHJhbnNsYXRlX3kiLCJNQVhfSEFORF9UUkFOU0xBVEUiLCJ0YXJnZXRfaHVlc2hpZnRfdGltZXIiLCJodWVfYWRqdXN0IiwiZmxpcF90aW1lciIsImZha2VfaGFuZF9zY2FsZSIsInN0YXJ0X2ZpbmFsX2VtaXR0ZXIiLCJ1bnNldF9lbWl0dGVyIiwibWFrZVBhcnRpY2xlcyIsIm1pblBhcnRpY2xlU3BlZWQiLCJtYXhQYXJ0aWNsZVNwZWVkIiwic2V0RnJhbWUiLCJmaW5hbF9lbWl0dGVyX3BhcnRpY2xlc19jb3VudCIsImxpZmV0aW1lIiwidW5zZXRfZmluYWxfZW1pdHRlciIsInNldF9lbWl0dGVyIiwic2V0X2ZpbmFsX2VtaXR0ZXIiLCJzZXRfaGFuZCIsInRyYW5zbGF0ZV9oYW5kIiwic3RhcnRfZW1pdHRlciIsImFmdGVyX2luaXQiLCJhZnRlcl9kZXN0cm95IiwiYmVmb3JlX2Rlc3Ryb3kiLCJzdG9wX2Fza2VkIiwiYmFja19hdXJhIiwiZnJvbnRfYXVyYSIsInNvcnRfZnVuY3Rpb24iLCJzdGVwX2hlaWdodCIsImluaXRpYWxfZnJvbnRfeSIsImluaXRpYWxfYmFja195IiwiYXVyYXMiLCJ0d2Vlbl9hIiwidHdlZW5fYiIsInR3ZWVuX2MiLCJ0d2Vlbl9hYSIsInJpbmdfdXBfdGltZSIsIk91dCIsInR3ZWVuX2NjIiwiYmxpbmtfY291bnRlciIsImJsaW5rX3RpbWVyIiwiaHVlX3RpbWVyIiwiZ3JheSIsImNvbG9yaXplX2ludGVuc2l0eSIsImNvbG9yaXplIiwiUE9TX1giLCJQT1NfWSIsInNldF9zaW5nbGVfbGluZV90ZXh0IiwidmVydGljYWxfYWRqdXN0IiwiRlJPU1RfTUFYX1JBTkdFIiwiaW5pdF9zbm93Zmxha2VzIiwiU05PV0ZMQUtFU19DT1VOVCIsInNub3dmbGFrZV9zcHJpdGUiLCJyb3RhdGlvbl9mYWN0b3IiLCJ4X2Rlc3QiLCJ5X2Rlc3QiLCJzcGlyYWxfYW5nbGUiLCJUT1RBTF9UVVJOU19TTk9XRkxBS0VTIiwic2lnbl94Iiwic2lnbl95IiwiU05PV0ZMQUtFX0RVUkFUSU9OIiwiU1BJUkFMX0lOVEVOU0lUWSIsIlBPTEFSX1NMT1BFIiwiaW5pdF9waWxsYXIiLCJjb2xvcl9maWx0ZXJzIiwiZ3Jvd19waWxsYXIiLCJzZXRfcGVybWFuZW50X2JsaW5rIiwib25EZXN0cm95IiwiR1JPV1RIX01BWF9SQU5HRSIsImluaXRfYnViYmxlcyIsIm1heF94X3NwZWVkIiwibWF4X3lfc3BlZWQiLCJtaW5feF9zcGVlZCIsIm1pbl95X3NwZWVkIiwiZW1pdHRlcl93aWR0aCIsImVtaXR0ZXJfaGVpZ2h0IiwiaW5jcmVhc2VfZHVyYXRpb24iLCJNQVhfUEFSVElDTEVfU1BFRUQiLCJNSU5fUEFSVElDTEVfU1BFRUQiLCJYX1BBUlRJQ0xFX1NQRUVEIiwiWV9QQVJUSUNMRV9TUEVFRCIsInBhcnRpY2xlX2ZpbHRlciIsIm1heFBhcnRpY2xlU2NhbGUiLCJtaW5QYXJ0aWNsZVNjYWxlIiwiZ3Jvd19zcHJvdXQiLCJtaXNzX3RhcmdldCIsImdyb3dfY2VudGVyX3giLCJncm93X2NlbnRlcl95IiwiTk9fVEFSR0VUX1NQUk9VVF9DT1VOVCIsImZpcnN0X2ZyYW1lX25hbWUiLCJjZW50ZXJfeCIsImNlbnRlcl95IiwibWlzc190YXJnZXRfc3ByaXRlIiwiaXRlbV9kYXRhIiwiZGppbm5fZGF0YSIsInN0YW5kYnkiLCJmcmFtZXNfcmF0ZSIsImJhc2VfcGF0aCIsImJhdHRsZV9zcHJpdGVzaGVldCIsInBvc2l0aW9ucyIsImZyYW1lc19udW1iZXIiLCJtYXBzIiwibWFwX2RhdGEiLCJ0aWxlc2V0X2tleV9uYW1lIiwiY29sbGlzaW9uX2tleV9uYW1lcyIsInRpbGVzZXRfZmlsZXMiLCJjb2xsaXNpb25fZmlsZXMiLCJsYXp5X2xvYWQiLCJjb2xsaXNpb25fZW1iZWRkZWQiLCJsb2FkX21hcF9wcm9taXNlX3Jlc29sdmUiLCJsb2FkX21hcF9wcm9taXNlIiwibG9hZF9tYXBfYXNzZXRzIiwidGlsZXNldF9uYW1lIiwicGh5c2ljc19uYW1lcyIsInRpbGVzZXRfaW1hZ2VfdXJsIiwidGlsZXNldF9qc29uX3VybCIsInBoeXNpY3NfanNvbnNfdXJsIiwibW9kZTdfZmlsdGVyIiwiYXNzZXRzX2xvYWRlZCIsInNlbmRfdG9fYmFja19saXN0Iiwic2VuZF90b19mcm9udF9saXN0IiwiaGFzX3NvcnRfZnVuY3Rpb24iLCJ5X3NvcnQiLCJHcm91cCIsIlNPUlRfQVNDRU5ESU5HIiwic2hhZG93X2luZGV4Iiwic2VuZFRvQmFjayIsImZyZWV6ZV9ib2R5IiwidXBkYXRlX21hcF9yb3RhdGlvbiIsInZhbHVlX2NoZWNrIiwiTUFYX0NBTUVSQV9ST1RBVElPTiIsInNpZ25fY2hlY2siLCJDQU1FUkFfUk9UQVRJT05fU1RFUCIsImxvYWRfdGlsZW1hcF9wcm9taXNlX3Jlc29sdmUiLCJsb2FkX2ltYWdlX3Byb21pc2VfcmVzb2x2ZSIsImxvYWRfdGlsZW1hcF9wcm9taXNlIiwidGlsZW1hcCIsIlRpbGVtYXAiLCJUSUxFRF9KU09OIiwibG9hZF9pbWFnZV9wcm9taXNlIiwicGh5c2ljc19wcm9taXNlcyIsImxvYWRfcGh5c2ljc19wcm9taXNlX3Jlc29sdmUiLCJsb2FkX3BoeXNpY3NfcHJvbWlzZSIsIndpZHRoSW5QaXhlbHMiLCJoZWlnaHRJblBpeGVscyIsImNvbGxpc2lvbl9sYXllcl9vYmplY3RzIiwib2JqZWN0cyIsImNvbGxpc2lvbl9vYmplY3QiLCJuZXdfcG9seWdvbiIsImFkanVzdENlbnRlck9mTWFzcyIsInJlY3RhbmdsZSIsImFkZFJlY3RhbmdsZSIsImFkZENpcmNsZSIsImxvYWRQb2x5Z29uIiwiaW50ZXJhY3RhYmxlX29iaiIsImdldFRpbGUiLCJyYXdfcHJvcGVydHkiLCJwcm9wZXJ0eV9pbmZvIiwicGFyc2UiLCJtYXBfZGlyZWN0aW9ucyIsIlNwZWVkRXZlbnQiLCJUZWxlcG9ydEV2ZW50IiwiZGVzdF9jb2xsaXNpb25fbGF5ZXIiLCJTbGlkZXJFdmVudCIsInNob3dfZHVzdCIsImluaXRpYWxseV9hY3RpdmUiLCJTdGVwRXZlbnQiLCJzdGVwX2RpcmVjdGlvbiIsIkNvbGxpc2lvbkV2ZW50IiwiSW50ZXJhY3RhYmxlT2JqZWN0cyIsInBzeW5lcmd5X2tleSIsInB1c2hhYmxlIiwiaW5pdGlhbF9jb25maWciLCJpbml0aWFsaXplX3JlbGF0ZWRfZXZlbnRzIiwibnBjX3Nwcml0ZV9pbmZvIiwiZnJhbWVzX2NvdW50Iiwic2hhZG93X2tleSIsImlnbm9yZV93b3JsZF9tYXBfc2NhbGUiLCJzZXRfc3ByaXRlX2FzX25wYyIsImNyZWF0ZUxheWVyIiwicmVzaXplV29ybGQiLCJpc19vdmVyIiwibG9hZF9wcm9taXNlIiwid29ybGRfbWFwIiwiYWRkVGlsZXNldEltYWdlIiwiY29sbGlzaW9uX2luZGV4IiwidGlsZXNldHMiLCJ0aWxlc2V0IiwidGlsZV9pbmRleCIsInRpbGVQcm9wZXJ0aWVzIiwiY3JlYXRlX3RpbGVfZXZlbnRzIiwiY3JlYXRlX25wY3MiLCJjcmVhdGVfaW50ZXJhY3RhYmxlX29iamVjdHMiLCJjb25maWdfbGF5ZXJzIiwiY29uZmlnX2ludGVyYWN0YWJsZV9vYmplY3QiLCJjb25maWdfbnBjIiwiZm9vdHByaW50IiwiY29uZmlnX3dvcmxkX21hcCIsIm5leHRfYm9keV9yYWRpdXMiLCJib3VuZHMiLCJtb2RlNyIsImNvcHlGcm9tIiwic3ByaXRlc190b19yZW1vdmUiLCJvcGVuX2Rvb3IiLCJjYW1lcmFfZmFkZV9pbiIsImxlcnAiLCJjaGFuZ2VfbWFwIiwidW5zZXRfbWFwIiwibmV4dF9tYXBfa2V5X25hbWUiLCJ0YXJnZXRfY29sbGlzaW9uX2xheWVyIiwic2V0Qm91bmRzVG9Xb3JsZCIsImNhbWVyYV9mYWRlX291dCIsImZsYXNoIiwib25GbGFzaENvbXBsZXRlIiwiZG9vcl9sYXllciIsInNhbXBsZV90aWxlIiwiZG9vcl90eXBlX2luZGV4IiwiZG9vcl90eXBlIiwic291cmNlX2luZGV4IiwiY2xvc2VfZG9vcl9pbmRleCIsIm9mZnNldHMiLCJjbG9zZV9kb29yIiwiYmFzZV9vZmZzZXQiLCJuZXh0X3giLCJuZXh0X3kiLCJTVEVQX1NISUZUX0ZBQ1RPUiIsInNldF90cmlnZ2VyZWRfZXZlbnQiLCJ1bnNldF90cmlnZ2VyZWRfZXZlbnQiLCJqdW1wX3kiLCJsaXR0bGVfc3RlcCIsInNldF9mcmFtZSIsInNsaWRlX3RpbWUiLCJUSU1FX1BFUl9USUxFIiwiRFVTVF9LRVkiLCJEVVNUX0NPVU5UIiwic3RhcnRfeCIsInN0YXJ0X3kiLCJtaXNjX2RiIiwibWlzY19kYXRhIiwic2hvcF9kYXRhIiwiU2hvcCIsImRpYWxvZ19rZXkiLCJhdmF0YXJfa2V5IiwiaXRlbV9saXN0IiwiaXRlcl9vYmpfc3ByaXRlX2Jhc2VfbGlzdCIsImludGVyYWN0YWJsZV9vYmplY3RzX2tleSIsIml0ZXJfb2JqX2RhdGEiLCJzdW1tb25fZGF0YSIsIlN1bW1vbiIsIk1haW5NZW51IiwiY3VycmVudF9pbmRleCIsImJ1dHRvbl9wcmVzcyIsIlRJVExFX1dJTkRPV19XSURUSCIsInBzeW5lcmd5X21lbnUiLCJNYWluUHN5bmVyZ3lNZW51IiwiaXRlbV9tZW51IiwiTWFpbkl0ZW1NZW51IiwiZGppbm5fbWVudSIsIk1haW5Eamlubk1lbnUiLCJzdGF0dXNfbWVudSIsImJ1dHRvbl9wcmVzc19hY3Rpb24iLCJjbG9zZV90aGlzX21lbnUiLCJjbG9zZWQiLCJ0cmlnZ2VyX21lbnUiLCJUT1RBTF9CT1JERVIiLCJQU1lfT1ZFUlZJRVdfV0lOX1NQQUNFX0JFVFdOX0lDTyIsInNlbGVjdGVkX2NoYXJfaW5kZXgiLCJjaG9vc2luZ19wc3luZXJneSIsImd1aWRlX3dpbmRvd19tc2dzIiwiY2hvb3NpbmdfY2hhciIsInBzeW5lcmd5X2Nob29zZV93aW5kb3ciLCJJdGVtUHN5bmVyZ3lDaG9vc2VXaW5kb3ciLCJwc3luZXJneV9jaGFuZ2UiLCJjaGFyX2NoYW5nZSIsImJhc2ljX2luZm9fd2luZG93IiwiQmFzaWNJbmZvV2luZG93IiwicHN5bmVyZ3lfb3ZlcnZpZXdfd2luZG93Iiwic2hvcnRjdXRzX3dpbmRvdyIsImd1aWRlX3dpbmRvd190ZXh0IiwiZGVzY3JpcHRpb25fd2luZG93X3RleHQiLCJzZXRfcHN5bmVyZ3lfaWNvbnMiLCJzZXRfZ3VpZGVfd2luZG93X3RleHQiLCJzZXRfZGVzY3JpcHRpb25fd2luZG93X3RleHQiLCJvcGVuX2NoYXJfc2VsZWN0IiwicHN5X3dpbiIsInNlbGVjdGVkX3BzeSIsInBzeW5lcmd5X2Nob29zZSIsImNoYXJfY2hvb3NlIiwiY2xvc2VfbWVudV9iZWxvdyIsIklURU1fT1ZFUlZJRVdfV0lOX1NQQUNFX0JFVFdOX0lDTyIsIml0ZW1fY2hhbmdlX3N0YXRzX3dpbmRvdyIsIlN0YXRzQ2hlY2tXaXRoSXRlbVdpbmRvdyIsInNlbGVjdGVkX2l0ZW1fcG9zIiwiY2hvb3NpbmdfZ2l2ZV9kZXN0aW5hdGlvbiIsIm92ZXJ2aWV3X3NoaWZ0ZWQiLCJjaG9vc2luZ19pdGVtIiwiYXJyYW5nZV93aW5kb3ciLCJhcnJhbmdlX3dpbmRvd190ZXh0IiwiaXRlbV9vdmVydmlld193aW5kb3ciLCJpdGVtX2Nob29zZV93aW5kb3ciLCJpdGVtX2NoYW5nZSIsIml0ZW1fb3B0aW9uc193aW5kb3ciLCJJdGVtT3B0aW9uc1dpbmRvdyIsIml0ZW1fcXVhbnRfd2luIiwiSXRlbVF1YW50aXR5TWFuYWdlcldpbmRvdyIsImhpZGVfc3ViX21lbnVzIiwic2V0X2l0ZW1faWNvbnMiLCJjb21wYXJlX2l0ZW1zIiwib25faXRlbV9jaG9vc2VfY2xvc2UiLCJpdGVtX3dpbiIsInNlbGVjdGVkX2l0ZW0iLCJzZWxlY3RlZF9pdGVtX29iaiIsIml0ZW1fZ2l2ZW4iLCJzaGlmdF9pdGVtX292ZXJ2aWV3IiwiSVRFTV9OQU1FX1kiLCJDVVJTT1JfWF9QT1MiLCJDVVJTT1JfWV9QT1MiLCJ0ZXh0X3Nwcml0ZXMiLCJ1c2UiLCJPUFRJT05fVEVYVF9IT1JJWk9OVEFMX1BBRERJTkciLCJnaXZlIiwiaG9yaXpvbnRhbF9pbmRleCIsInZlcnRpY2FsX2luZGV4Iiwib3B0aW9uX2FjdGl2ZSIsImdpdmVfaXRlbV9vcHRpb25zX3dpbmRvdyIsIkdpdmVJdGVtV2luZG93IiwiaXRlbV9xdWFudGl0eV9tYW5hZ2VyX3dpbmRvdyIsImRyb3BfaXRlbV93aW5kb3ciLCJEcm9wSXRlbVdpbmRvdyIsImFjdGlvbl9tZXNzYWdlX3dpbmRvdyIsIk1BWF9WRVJUSUNBTCIsImNob29zZV9wb3NpdGlvbiIsIk1BWF9IT1JJWk9OVEFMIiwic2hvd190ZXh0Iiwic3RhdHNfdXBkYXRlX2NhbGxiYWNrIiwib3Blbl9vcHRpb25zIiwib3Blbl9hY3Rpb25fbWVzc2FnZV93aW5kb3ciLCJkcm9wcGVkIiwiaGlkZV90ZXh0IiwicHJldmlvdXNfaG9yaXpvbnRhbCIsIm5leHRfaG9yaXpvbnRhbCIsIm5leHRfdmVydGljYWwiLCJwcmV2aW91c192ZXJ0aWNhbCIsIm9uX2Nob29zZSIsInNldF9hdmFpbGFibGVfb3B0aW9ucyIsInF1YW50aXR5X3RvX3JlbW92ZSIsImFuc3dlcl9pbmRleCIsImljb25fbmFtZSIsInNldF9hbnN3ZXJfaW5kZXgiLCJJTkZPX1giLCJyZW1vdmVfaXRlbSIsImNoYW5nZV9hbnN3ZXIiLCJvbl9kcm9wIiwib25fcXVhbnRpdHlfc2VsZWN0Iiwib25faXRlbV9zZWxlY3QiLCJ1bnNldF9pbmZvIiwiQUNUSU9OX1RFWFRfWSIsImFza2luZ19mb3JfZXF1aXAiLCJhY3Rpb25fdGV4dCIsInllc190ZXh0Iiwibm9fdGV4dCIsImRlc3RfY2hhciIsIm9uX2dpdmUiLCJjaG9vc2luZ19jaGFyYWN0ZXIiLCJvbl9jaGFyYWN0ZXJfc2VsZWN0IiwicHJldmlld19zdGF0c190ZXh0cyIsImF0dGFja190ZXh0IiwiZGVmZW5zZV90ZXh0IiwiYWdpbGl0eV90ZXh0Iiwic2V0X2NvbXBhcmVfYXJyb3dzIiwiZXF1aXBfc2xvdF9wcm9wZXJ0eSIsImN1cnJlbnRfc3RhdHNfcHJvcGVydHkiLCJjb21wYXJlX3JlbW92aW5nIiwicHJldmlld19zdGF0cyIsImVxdWlwX3Nsb3Rfa2V5X25hbWUiLCJwcmV2aWV3X3N0YXRzX2J5X2VmZmVjdCIsInVwZGF0ZV9wcmV2aWV3X3RleHQiLCJjdXJyZW50X3N0YXRzIiwiY2hhcnNfcXVpY2tfaW5mb193aW5kb3ciLCJDaGFyc1F1aWNrSW5mb0RqaW5uV2luZG93IiwiZGppbm5fYWN0aW9uX3dpbmRvdyIsIkRqaW5uQWN0aW9uV2luZG93IiwiZGppbm5pX2xpc3Rfd2luZG93IiwiRGppbm5MaXN0V2luZG93IiwiQ0xBU1NfWSIsImNoYXJfY2xhc3MiLCJsZXZlbF9udW1iZXIiLCJWSUVXX1NUQVRFUyIsImNoYXJzX3Nwcml0ZXNfZ3JvdXAiLCJzZWxlY3RlZF9kamlubl9pbmRleCIsImFjdGlvbl90ZXh0X3NlbGVjdGVkIiwiY2hhcnNfc3ByaXRlcyIsImRqaW5uc19zcHJpdGVzIiwiZGppbm5fZGVzY3JpcHRpb24iLCJwYWdlX251bWJlcl9iYXJfaGlnaGxpZ2h0IiwiZ2V0X2hpZ2hsaWdodF9iYXIiLCJvbl9hY3Rpb25fYmFyX2hpZ2hsaWdodCIsInNpemVzIiwiYWN0aXZlX2RqaW5uX3Nwcml0ZSIsImRqaW5uX3N0YXR1c19jaGFuZ2VfaGVhZGVyX3dpbmRvdyIsIkRqaW5uTW9kZUhlYWRlcldpbmRvdyIsImRqaW5uX2NoYXJfc3RhdHNfd2luZG93X2xlZnQiLCJEamlubkNoYXJTdGF0c1dpbmRvdyIsImRqaW5uX2NoYXJfc3RhdHNfd2luZG93X3JpZ2h0IiwiZGppbm5fcHN5bmVyZ3lfd2luZG93IiwiRGppbm5Qc3luZXJneVdpbmRvdyIsImluaXRfZGppbm5fc3ByaXRlcyIsImluaXRfZGppbm5pX3N0YXR1c190ZXh0cyIsImJhcl9oaWdobGlnaHQiLCJzZXR0aW5nX2RqaW5uX3N0YXR1cyIsInNldHRpbmdfZGppbm5fc3RhdHVzX2NoYXJfaW5kZXgiLCJzZWxlY3RfYWN0aW9uX3RleHQiLCJvbl9jaGFyX2NoYW5nZSIsInNldF9kamlubl9zcHJpdGUiLCJmb3JjZV9jaGFuZ2UiLCJvbl9kamlubl9jaGFuZ2UiLCJkamlubmlfc3RhdHVzX3RleHRzIiwiU1RBUl9YX1BBRERJTkciLCJwYXJ0eV9pbmRleCIsInVwZGF0ZV9kamlubl9saXN0IiwiY2hhcl9kamlubmkiLCJ0aGlzX2RqaW5uX25hbWVzIiwiSElHSExJR0hUX1hfUEFERElORyIsInN0YXJfeSIsIkhJR0hMSUdIVF9ZX1BBRERJTkciLCJkamlubl94IiwiZGppbm5feSIsInNldHRpbmdfZGppbm5fc3RhdHVzX2RqaW5uX2luZGV4Iiwic2V0X2FjdGlvbl90ZXh0IiwidXBkYXRlX2RqaW5uX2Rlc2NyaXB0aW9uIiwib25fY2hhbmdlX2RqaW5uX3N0YXR1cyIsInByZXZpb3VzX2NoYXJhY3RlciIsIm5leHRfY2hhcmFjdGVyIiwicHJldmlvdXNfZGppbm5pIiwibmV4dF9kamlubmkiLCJkYXJrZW4iLCJ0aGlzX3N0YXR1c2VzIiwibmV4dF9zdGF0dXNlcyIsInZpZXdfc3RhdGUiLCJleGVjdXRlX29wZXJhdGlvbiIsInJlcGxhY2VfZGppbm4iLCJjYW5jZWxfZGppbm5fc3RhdHVzX3NldCIsInNldF9kamlubl9vcGVyYXRpb24iLCJzZXRfYWN0aW9uX2luZm9fdGV4dCIsImNoYW5nZV9kamlubl9zdGF0dXMiLCJyZXNldF9pbmRleCIsImRhcmtlbl9mb250X2NvbG9yIiwic3RhdHVzX3RleHQiLCJvdGhlcl9jaGFyIiwic2V0X2FjdGlvbl9mb3Jfc3BlY2lmaWNfZGppbm4iLCJsb2FkX3BhZ2UiLCJjaGFuZ2luZ19kamlubl9zdGF0dXMiLCJ1bnNldF9wYWdlIiwiREpJTk5fTVVMVF9YIiwiREpJTk5fTVVMVF9ZIiwiQ0hBUlNfWCIsIkNIQVJTX1kiLCJkamlubl9zcHJpdGVzIiwib2tfbXNnX3RleHQiLCJkamlubl9zdGF0dXNfdGV4dCIsImRqaW5uX25hbWVfYmVmb3JlX3RleHQiLCJkamlubl9uYW1lX2FmdGVyX3RleHQiLCJkamlubl9zdGF0dXNfYXJyb3ciLCJzcGFjZWJhcl9rZXkiLCJTUEFDRUJBUl9LRVlfWCIsIlNQQUNFQkFSX0tFWV9ZIiwiYWN0aW9uX2luZm9fdGV4dCIsImluaXRfYXJyb3dfYmxpbmtzIiwiZGppbm5fc3RhdHVzX2Fycm93X2JsaW5rX3RpbWVyIiwiU1RBUl9CRUZPUkVfWCIsIlNUQVJfQUZURVJfWCIsIkRKSU5OX05BTUVfQUZURVJfWCIsIkRKSU5OX05BTUVfQkVGT1JFX1giLCJzZXRfY2hhcl9hbmRfZGppbm5fc3ByaXRlIiwiY2hhcl9zcHJpdGUiLCJpZGxlIiwiZGppbm5fc3ByaXRlIiwicmVwZWF0RGVsYXkiLCJ1bm1vdW50X3dpbmRvdyIsImVsZW1lbnRzX2xpc3QiLCJ3aW5feCIsImRqaW5uX251bWJlcl90ZXh0cyIsInN0YXRzX2N1cnJlbnRfdGV4dHMiLCJzdGF0c19uZXh0X3RleHRzIiwiY2hhcl9uYW1lX3RleHQiLCJsZXZlbF9udW1iZXJfdGV4dCIsIm5ld19jbGFzc190ZXh0IiwiY2xhc3NfbmFtZV9hcnJvdyIsImNsYXNzX25hbWVfYXJyb3dfYmxpbmtfdGltZXIiLCJESklOTl9OVU1CRVJfWCIsInN0YXJfc3ByaXRlIiwiREpJTk5fTlVNQkVSX1kiLCJhcnJvd19zcHJpdGUiLCJuZXh0X3N0YXRlX2NhbGxiYWNrIiwicGFnZV9zaGlmdCIsImhpZGRlbiIsImFjdGlvbl9kZXNjcmlwdGlvbl90ZXh0IiwiZGppbm5fbmFtZV90ZXh0IiwiU0hJRlRfS0VZX1giLCJzaGlmdF9rZXkiLCJTSElGVF9LRVlfWSIsIkRKSU5OX05BTUVfWCIsIkRKSU5OX05BTUVfWSIsIk1haW5TdGF0aXN0aWNzIiwiZGppbm5fZ3JvdXAiLCJtc2dfb2JqIiwiTWVudVN0YXR1c01zZ3MiLCJNZW51RGVzY3JpcHRpb25zIiwiREpJTk5fR1JPVVBfWV9PRkZTRVQiLCJFTEVNIiwiRE9XTl9TSElGVCIsIk5VTUJFUlMiLCJkamlubmlfc3ByaXRlIiwiZ2V0X2RqaW5uaV9zcHJpdGUiLCJ0eHQiLCJpbml0X3N0YXR1c19lZmZlY3RzIiwiRUZGRUNUX0xBQkVMUyIsImRqaW5uX3BhZ2VzIiwiY3VycmVudF9wYWdlIiwibWFrZV9wYWdlcyIsImVsZW1fZGppbm4iLCJOQU1FUyIsIlNQUklURVMiLCJzZXBfeCIsInNlcF95Iiwic2VwX3dpZHRoIiwiQ1VSUkVOVF9ESklOTiIsImdldF9kamlubl9ieV9lbGVtZW50IiwibWF4X3Blcl9wYWdlIiwiREpJTk5fUEVSX0xJTkUiLCJoaWdoZXN0X2NvdW50IiwibGlzdCIsIm5fcGFnZXMiLCJkamlubmlfa2V5IiwiYWJpbGl0eV9wYWdlcyIsInVzZV90ZXh0IiwibGVuIiwiVVNFX1RFWFQiLCJiYXR0bGVfcHN5Iiwic29ydGVkX2FiaWxpdGllcyIsImVxX3Nsb3QiLCJlcV9oaWdobGlnaHRfc2hpZnQiLCJFUV9ISUdITElHSFQiLCJQT1MiLCJ1cGRhdGVfZXFfaGlnaGxpZ2h0IiwidXBkYXRlX2l0ZW1zIiwic2hvcCIsIm5vcm1hbF9pdGVtX2xpc3QiLCJhcnRpZmFjdF9saXN0Iiwid2luZG93c19tb2RlIiwibnBjX2RpYWxvZyIsIlNob3BrZWVwRGlhbG9nIiwieWVzbm9fYWN0aW9uIiwiWWVzTm9NZW51IiwiaW52X3dpbiIsIkludmVudG9yeVdpbmRvdyIsIm9uX2ludl93aW5fY2hhbmdlIiwiYnV5X3NlbGVjdCIsIkJ1eVNlbGVjdE1lbnUiLCJvbl9idXlfc2VsZWN0X2NoYW5nZSIsImVxX2NvbXBhcmUiLCJFcXVpcENvbXBhcmUiLCJxdWFudF93aW4iLCJTaG9wSXRlbVF1YW50aXR5V2luZG93IiwiY2hhcl9kaXNwbGF5Iiwib25fY2hhcl9kaXNwbGF5X2NoYW5nZSIsIml0ZW1fcHJpY2Vfd2luIiwieW91cl9jb2luc193aW4iLCJpdGVtX2Rlc2Nfd2luIiwiYnV5X21lbnUiLCJCdXlBcnRpZmFjdHNNZW51Iiwic2VsbF9tZW51IiwiU2VsbFJlcGFpck1lbnUiLCJ5b3VyX2NvaW5zX2xhYmVsIiwieW91cl9jb2luc190ZXh0IiwiaXRlbV9uYW1lX3RleHQiLCJpdGVtX3ByaWNlX2xhYmVsIiwiaXRlbV9wcmljZV92YWxfdGV4dCIsIml0ZW1fcHJpY2VfY29pbnNfbGFiZWwiLCJpdGVtX2Rlc2NfdGV4dCIsIm9wZW5faG9yaXpvbnRhbF9tZW51IiwiaXNfcmVwYWlyIiwiaXNfcmVwYWlyX21lbnUiLCJpdG0iLCJpdGVtX2dyaWQiLCJpdGVtX3ByaWNlIiwicHJpY2VfdmFsIiwiU0VMTF9NVUxUSVBMSUVSIiwidXBkYXRlX2l0ZW1faW5mbyIsIm5vcm1hbF9saXN0IiwiY3VzdG9tX3ByaWNlIiwiY3VzdG9tX21zZyIsImNhbnRfc2VsbCIsImNvaW5zX2xhYmVsIiwicHJpY2VfbGFiZWwiLCJwcmljZV90ZXh0IiwiYWx0ZXJuYXRlX3dpbmRvd19wb3MiLCJvbl9zdWJtZW51X2Nsb3NlIiwiY2xvc2VfZGlhbG9nIiwiYWN0aXZlX21lbnUiLCJzZXRfaXRlbV9saXN0cyIsImlzX2FydGlmYWN0c19tZW51IiwibWVzc2FnZV9rZXkiLCJ1cGRhdGVfZGlhbG9nIiwiZW5kX2RpYWxvZyIsIm1lc3NhZ2VzIiwiY3VycmVudF9tZXNzYWdlIiwiaXNfa2V5IiwicXVpY2tfbmV4dCIsIkZSQU1FX1NJWkUiLCJraWxsX2RpYWxvZyIsIldpbmRvd05hbWVzIiwiSVRFTV9ERVNDX1dJTiIsIklURU1fUFJJQ0VfV0lOIiwiWU9VUl9DT0lOU19XSU4iLCJDSEFSX0RJU1BMQVkiLCJJTlZfV0lOIiwiWUVTTk9fQUNUSU9OIiwiUVVBTlRfV0lOIiwiQlVZX1NFTEVDVCIsIkVRX0NPTVBBUkUiLCJidXlfc2VsZWN0X3BvcyIsImlzX2xhc3QiLCJzaG91bGRfY2hhbmdlIiwib2xkX2l0ZW0iLCJib3VnaHQiLCJnYW1lX3RpY2tldCIsInVwZGF0ZV9nYW1lX3RpY2tldF9zdGVwIiwib3Blbl9pbnZlbnRvcnlfdmlldyIsIm9wZW5fYnV5X3NlbGVjdCIsInNsb3QiLCJtc2dfa2V5Iiwic2hvcF9saXN0IiwiZXhpc3RzIiwic2VsbF9wcmljZSIsInVwZGF0ZV95b3VyX2NvaW5zIiwiY2hlY2tfZ2FtZV90aWNrZXQiLCJpdGVtX3R5cGUiLCJlcV9zbG90cyIsImVxX3R5cGVzIiwic2xvdF90eXBlcyIsImFmdGVyX2NvbXBsaW1lbnQiLCJnZXRfbWVzc2FnZSIsInJlcGxhY2VfdGV4dCIsInllcyIsInNlbGxfb2xkX2VxdWlwIiwibm8iLCJlcXVpcF9hc2siLCJpdGVtX3RvX2FkZCIsImNob3Nlbl9xdWFudGl0eSIsInByb2Nlc3NfcHVyY2hhc2UiLCJjdXJzb3JfYmFjayIsImVxdWlwX25vdyIsImVxdWlwX25ld19pdGVtIiwib25fY2FuY2VsX2NoYXJfc2VsZWN0Iiwib25fYnV5X2VxdWlwX3NlbGVjdCIsIm9uX3B1cmNoYXNlX3N1Y2Nlc3MiLCJvcGVuX2VxdWlwX2NvbXBhcmUiLCJoYXZlX3F1YW50Iiwib25fY2FuY2VsX2dhbWVfdGlja2V0Iiwib25fYnV5X2l0ZW1fc2VsZWN0IiwiZmluaXNoIiwic2hvcF9pdGVtX21hdGNoIiwic2hvcF9pdGVtIiwiY2hhcl9pdGVtX21hdGNoIiwiY2hhcl9pdGVtIiwiY2xvc2Vfd2luZG93cyIsIm9wZW5fd2luZG93cyIsInNob3dfd2luZG93cyIsIm9uX2NoYXJfZGlzcGxheV9vcGVuIiwiZ2l2ZV9jb250cm9sIiwicmVmcmVzaCIsIk1BWF9JVEVNU19QRVJfUEFHRSIsIm9uX2J1eV9zZWxlY3QiLCJyZXNldF9vbl9wcmVzcyIsIndpbmRvd19jb3VudCIsImlzX3dpbmRvdyIsIm9wZW5lZCIsIlJFUEFJUl9XQUlUX1RJTUUiLCJpbnZfd2luX3BvcyIsImtpbGxfaXRlbV9hdCIsImN1cnNvcl9wb3MiLCJvbl9pdGVtX3JlcGFpciIsIm9uX3NhbGVfc3VjY2VzcyIsImRlY2xpbmVfbXNnIiwicXVhbnRfY29udHJvbCIsInF1YW50IiwiaXRlbV9wb3MiLCJzZXRfY3Vyc29yIiwicHJldmlvdXNfY29sIiwib25fcmVwYWlyX2l0ZW1fc2VsZWN0Iiwib25fc2VsbF9pdGVtX3NlbGVjdCIsIm5leHRfc3RlcCIsInNwcml0ZV9ncm91cCIsIklURU1fWCIsIklURU1fWSIsImV4cGFuZCIsIml0ZW1fbWF0Y2giLCJtYWtlX2l0ZW1fZ3JpZCIsInRoaXNfbGluZSIsIml0ZW1faWNvbnMiLCJiZ19pY29ucyIsIm5leHRfY29sIiwiTUFYX1BFUl9MSU5FIiwiTE9ORyIsImRlYWRfaXRlbXMiLCJkZWFkX2JhY2tncm91bmRzIiwiZGVhZF9icm9rZW4iLCJkZWFkX2ljb25zIiwiZGVhZF90ZXh0IiwiY2hlY2tfZXhwYW5kIiwiU0VMRUNUX1RXRUVOX1RJTUUiLCJ0YWdfZ3JvdXAiLCJ0ZXh0X2dyb3VwIiwiYmdfZ3JvdXAiLCJURVhUX1giLCJURVhUX0VORF9ZIiwiZGVhZF90ZXh0cyIsImRlYWRfc2hhZG93cyIsImRlYWRfdGV4dF9iZ3MiLCJpdGVtc19sZW5ndGgiLCJmcm9tIiwid2FyZXMiLCJkZWFkX3RhZ3MiLCJzZXRfaXRlbSIsInVuc2V0X2l0ZW0iLCJpdG1fbGlzdCIsImJnX2xpc3QiLCJsaXN0cyIsInVwZGF0ZV9ncm91cF9wb3MiLCJjYW50X2VxdWlwX3RleHQiLCJhdGtfbGFiZWxfdGV4dCIsImluaXRfdGV4dF9zcHJpdGUiLCJkZWZfbGFiZWxfdGV4dCIsImFnaV9sYWJlbF90ZXh0IiwiY3Vycl9hdGtfdGV4dCIsImN1cnJfZGVmX3RleHQiLCJjdXJyX2FnaV90ZXh0IiwibmV3X2F0a190ZXh0IiwiQ1VSUl9TVEFUX0VORF9YIiwibmV3X2RlZl90ZXh0IiwibmV3X2FnaV90ZXh0IiwiYXJyb3dfeSIsImRlYWRfYXJyb3dzIiwibmV3X2l0ZW0iLCJjdXJyZW50X3ZhbCIsImVxX2VmZmVjdHMiLCJuaXRlbV9lZmZlY3RzIiwiZXFfc3RhdCIsIm5pdGVtX3N0YXQiLCJjdXJyX3ZhbCIsInN0YXRfZGlmZiIsIm5ld19zdGF0X3RleHQiLCJjdXJyX3N0YXRfdGV4dCIsIm1ha2VfYXJyb3ciLCJzaG93X3N0YXRfY29tcGFyZSIsInNob3dfY2FudF9lcXVpcCIsInNlbGVjdGVkX2l0ZW1fdHlwZSIsImNoYXJfY3VycmVudF9pdGVtIiwiZGlmZnMiLCJkaXNwbGF5X3N0YXQiLCJ5ZXNfY2FsbGJhY2siLCJub19jYWxsYmFjayIsImJhc2VfcHJpY2UiLCJxdWFudGl0eV90ZXh0IiwiY29pbnNfdmFsX3RleHQiLCJjb2luc19sYWJlbF90ZXh0Iiwic2hvcF9pdGVtX29iaiIsImNoYXJfaXRlbV9vYmoiLCJ1c2VfY29pbnMiLCJvd25lZCIsImF2YWlsYWJsZV9xdWFudGl0eSIsIkRFRkFVTFRfTE9PUF9USU1FIiwiYnVzeSIsImtleXNfbGlzdCIsImtleXNfdG9fbWFwIiwicHJlc3NlZCIsImxvb3BfdGltZSIsInNpZ25hbF9iaW5kaW5ncyIsInNpZ25hbF9iaW5kaW5nc19rZXkiLCJjb250cm9sX3F1ZXVlIiwiZ2xvYmFsX2JpbmRpbmdzIiwibG9vcF9zdGFydF90aW1lciIsImxvb3BfcmVwZWF0X3RpbWVyIiwiY29uZmlybV9vbmx5Iiwibm9faW5pdGlhbF9yZXNldCIsImNvbmZpZ3MiLCJsb2ciLCJnbG9iYWxfa2V5IiwibWFrZV9nbG9iYWxfa2V5IiwibmV3X2NvbmZpZ3MiLCJkaXNhYmxlX3Jlc2V0IiwiaW5pdGlhbGl6ZWQiLCJzZXRfY29uZmlncyIsImVuYWJsZV9rZXlzIiwidmVydGljYWxfdGltZSIsImVuYWJsZV9sb29wIiwiYmluZGluZ3MiLCJrZXlfb25fZG93biIsImtleV9vbl91cCIsImFkZEtleSIsIm9uVXAiLCJ0cmlnZ2VyX3Jlc2V0IiwiYjEiLCJvbkRvd24iLCJvcHBvc2l0ZV9rZXkiLCJzdG9wX3RpbWVycyIsInNldF9sb29wX3RpbWVycyIsImIyIiwiaGFzX25leHQiLCJTaWduYWxCaW5kaW5nIiwiZGV0YWNoIiwic2lnbmFsX2JpbmRpbmciLCJpbnB1dF9pZHMiLCJpbml0aWFsaXplX2dhbWVwYWQiLCJLZXlib2FyZCIsImRlZmF1bHRfaW5wdXRzIiwicHJvcGVydHlfbmFt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QUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQ2hELElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFDaEQsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUNoRCxJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQ2hELElBQVEsSUFBTSxJQUFRLElBQ3RCLElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUMxRSxJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFDMUUsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUNoRCxJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQ2hELElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUNuQyxJQUFRLEtBQU0sSUFBUSxLQUN0QixJQUFRLEtBQU0sSUFBUSxLQUN0QixJQUFRLEtBRVIsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUMxQixJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdEYsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3RGLElBQVUsSUFBTSxJQUFVLElBQzFCLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsS0FBTSxJQUFVLEtBQzFCLElBQVUsS0FBTSxJQUFVLEtBQzFCLElBQVUsS0FBTSxJQUFVLE1BdXRCeEJpQixHQUFpQmpCLEdB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NkksS0FBbUJ4a0osRUFBSyxPQUFPd2tKLEVBRTVDLE9BQU8sS0FHWCxhQUFheGtKLEdBQ1QsT0FBUUEsR0FDSixLQUFLa0ssS0FBSzJ0RCxLQUNOLE9BQU8zdEQsS0FBSzh0RCxNQUNoQixLQUFLOXRELEtBQUs4dEQsTUFDTixPQUFPOXRELEtBQUsydEQsS0FDaEIsS0FBSzN0RCxLQUFLZ3VELEdBQ04sT0FBT2h1RCxLQUFLaXVELEtBQ2hCLEtBQUtqdUQsS0FBS2l1RCxLQUNOLE9BQU9qdUQsS0FBS2d1RCxHQUVoQixLQUFLaHVELEtBQUtrdUQsRUFDTixPQUFPbHVELEtBQUtvdUQsRUFDaEIsS0FBS3B1RCxLQUFLb3VELEVBQ04sT0FBT3B1RCxLQUFLa3VELEVBQ2hCLEtBQUtsdUQsS0FBS3F1RCxFQUNOLE9BQU9ydUQsS0FBS3V1RCxFQUNoQixLQUFLdnVELEtBQUt1dUQsRUFDTixPQUFPdnVELEtBQUtxdUQsRUFFaEIsS0FBS3J1RCxLQUFLd3FGLE9BQ04sT0FBT3hxRixLQUFLNjNELE1BQ2hCLEtBQUs3M0QsS0FBSzYzRCxNQUNOLE9BQU83M0QsS0FBS3dxRixPQUVoQixRQUNJLE9BQU8sTUFJbkIsV0FDSSxJQUFJNXdGLEVBQWlCLEdBRXJCLElBQUssSUFBSTFELEtBQVk4SixLQUFNLENBQ3ZCLElBQUlzNkksRUFBZ0Jwa0osRUFDaEIsRUFBQWdrSixVQUFVLzVILFNBQVNtNkgsSUFBZ0IxZ0osRUFBSzBDLEtBQUswRCxLQUFLczZJLElBRzFELE9BQU8xZ0oiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvZGlzdC9cIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDM1KTtcbiIsImltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSBcIi4vbWFnaWNfbnVtYmVyc1wiO1xuaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XG5cbi8qRWxlbWVudCBrZXlzKi9cbmV4cG9ydCBlbnVtIGVsZW1lbnRzIHtcbiAgICBWRU5VUyA9IFwidmVudXNcIixcbiAgICBNRVJDVVJZID0gXCJtZXJjdXJ5XCIsXG4gICAgTUFSUyA9IFwibWFyc1wiLFxuICAgIEpVUElURVIgPSBcImp1cGl0ZXJcIixcbiAgICBOT19FTEVNRU5UID0gXCJub19lbGVtZW50XCIsXG59XG5cbi8qRGVmYXVsdCBlbGVtZW50cyBvcmRlciovXG5leHBvcnQgY29uc3Qgb3JkZXJlZF9lbGVtZW50cyA9IFtlbGVtZW50cy5WRU5VUywgZWxlbWVudHMuTUVSQ1VSWSwgZWxlbWVudHMuTUFSUywgZWxlbWVudHMuSlVQSVRFUl07XG5cbi8qRWxlbWVudCBuYW1lcyovXG5leHBvcnQgY29uc3QgZWxlbWVudF9uYW1lcyA9IHtcbiAgICBbZWxlbWVudHMuVkVOVVNdOiBcIkVhcnRoXCIsXG4gICAgW2VsZW1lbnRzLk1FUkNVUlldOiBcIldhdGVyXCIsXG4gICAgW2VsZW1lbnRzLk1BUlNdOiBcIkZpcmVcIixcbiAgICBbZWxlbWVudHMuSlVQSVRFUl06IFwiV2luZFwiLFxufTtcblxuLyo4LURpcmVjdGlvbmFsIGRpcmVjdGlvbiB2YWx1ZXMqL1xuZXhwb3J0IGNvbnN0IGRpcmVjdGlvbnMgPSB7XG4gICAgcmlnaHQ6IDAsXG4gICAgZG93bl9yaWdodDogMSxcbiAgICBkb3duOiAyLFxuICAgIGRvd25fbGVmdDogMyxcbiAgICBsZWZ0OiA0LFxuICAgIHVwX2xlZnQ6IDUsXG4gICAgdXA6IDYsXG4gICAgdXBfcmlnaHQ6IDcsXG59O1xuXG4vKlNpemUgb2YgXCJkaXJlY3Rpb25zXCIgb2JqZWN0Ki9cbmV4cG9ydCBjb25zdCBkaXJlY3Rpb25zX2NvdW50ID0gT2JqZWN0LmtleXMoZGlyZWN0aW9ucykubGVuZ3RoO1xuXG4vKjgtRGlyZWN0aW9uYWwgZGlyZWN0aW9uIGtleXMqL1xuZXhwb3J0IGNvbnN0IHJldmVyc2VfZGlyZWN0aW9ucyA9IHtcbiAgICBbZGlyZWN0aW9ucy5yaWdodF06IFwicmlnaHRcIixcbiAgICBbZGlyZWN0aW9ucy51cF9yaWdodF06IFwidXBfcmlnaHRcIixcbiAgICBbZGlyZWN0aW9ucy51cF06IFwidXBcIixcbiAgICBbZGlyZWN0aW9ucy51cF9sZWZ0XTogXCJ1cF9sZWZ0XCIsXG4gICAgW2RpcmVjdGlvbnMubGVmdF06IFwibGVmdFwiLFxuICAgIFtkaXJlY3Rpb25zLmRvd25fbGVmdF06IFwiZG93bl9sZWZ0XCIsXG4gICAgW2RpcmVjdGlvbnMuZG93bl06IFwiZG93blwiLFxuICAgIFtkaXJlY3Rpb25zLmRvd25fcmlnaHRdOiBcImRvd25fcmlnaHRcIixcbn07XG5cbmV4cG9ydCBlbnVtIGJhc2VfYWN0aW9ucyB7XG4gICAgSURMRSA9IFwiaWRsZVwiLFxuICAgIFdBTEsgPSBcIndhbGtcIixcbiAgICBEQVNIID0gXCJkYXNoXCIsXG4gICAgUFVTSCA9IFwicHVzaFwiLFxuICAgIENMSU1CID0gXCJjbGltYlwiLFxuICAgIENBU1QgPSBcImNhc3RcIixcbiAgICBKVU1QID0gXCJqdW1wXCIsXG4gICAgQkFUVExFID0gXCJiYXR0bGVcIixcbn1cblxuLypSZXR1cm5zIHRoZSBhbmdsZSBmb3IgYW4gOC1EaXJlY3Rpb25hbCB2YWx1ZVxuV29ya3MgY2xvY2t3aXNlIHN0YXJ0aW5nIHdpdGggXCJSaWdodFwiXG5cbklucHV0OiBkaXJlY3Rpb24gW251bWJlcl06IDAtNywgY2xvY2t3aXNlIHN0YXJ0aW5nIHdpdGggXCJSaWdodFwiXG5cbk91dHB1dDogW251bWJlcl0gLSBBbmdsZSBpbiByYWRpYW5zKi9cbmV4cG9ydCBmdW5jdGlvbiBkaXJlY3Rpb25zX2FuZ2xlcyhkaXJlY3Rpb24pIHtcbiAgICAvL2Nsb2Nrd2lzZSBmcm9tIFwicmlnaHRcIlxuICAgIHJldHVybiAoZGlyZWN0aW9uICogTWF0aC5QSSkgLyA0O1xufVxuXG4vKk1hcHMgZGlyZWN0aW9uIGtleXMgdG8gdGhlaXIgdmFsdWVzXG5cbklucHV0OiBhcnIgW2FycmF5XSAtIERpcmVjdGlvbiBrZXlzIChhcnJheSBvZiBzdHJpbmcpXG5cbk91dHB1dDogW2FycmF5XSAtIERpcmVjdGlvbiB2YWx1ZXMgKGFycmF5IG9mIG51bWJlcikqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hcF9kaXJlY3Rpb25zKGFycikge1xuICAgIGlmIChhcnIgPT09IHVuZGVmaW5lZCB8fCBhcnIgPT09IFwiYWxsXCIpIHJldHVybiBhcnI7XG4gICAgYXJyID0gQXJyYXkuaXNBcnJheShhcnIpID8gYXJyIDogW2Fycl07XG4gICAgcmV0dXJuIGFyci5tYXAoa2V5ID0+IGRpcmVjdGlvbnNba2V5XSk7XG59XG5cbi8qUmV0dXJucyB0aGUgZGlyZWN0aW9uIHZhbHVlcyBmb3IgZGlhZ29uYWwgZGlyZWN0aW9uc1xuRXhhbXBsZTogSW5wdXQ6IDcgKHVwX3JpZ2h0KSAvIE91dHB1dDogWzYsMF1cblxuSW5wdXQ6IGRpcmVjdGlvbiBbbnVtYmVyXSAtIERpYWdvbmFsIGRpcmVjdGlvbiB2YWx1ZVxuXG5PdXRwdXQ6IFthcnJheV0gLSBBcnJheSB3aXRoIHNwbGl0IGRpcmVjdGlvbiB2YWx1ZXMqL1xuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0X2RpcmVjdGlvbihkaXJlY3Rpb24pIHtcbiAgICBpZiAoZGlyZWN0aW9uICUgMiA9PT0gMCkgcmV0dXJuIFtkaXJlY3Rpb25dO1xuXG4gICAgbGV0IHZhbHMgPSBuZXcgQXJyYXkoMik7XG4gICAgdmFsc1swXSA9IGRpcmVjdGlvbiA9PT0gZGlyZWN0aW9ucy5yaWdodCA/IGRpcmVjdGlvbi51cF9yaWdodCA6IGRpcmVjdGlvbiAtIDE7XG4gICAgdmFsc1sxXSA9IGRpcmVjdGlvbiA9PT0gZGlyZWN0aW9ucy51cF9yaWdodCA/IGRpcmVjdGlvbnMucmlnaHQgOiBkaXJlY3Rpb24gKyAxO1xuICAgIHJldHVybiB2YWxzO1xufVxuXG4vKlJldHVybnMgdGhlIGRpYWdvbmFsIHZhbHVlIGZvciBpdHMgY29tcG9uZW50IGRpcmVjdGlvbnNcbkV4YW1wbGU6IElucHV0OiA2LCAwICh1cCwgcmlnaHQpIC8gT3V0cHV0OiA3ICh1cF9yaWdodClcblxuSW5wdXQ6IGRpcl8xLCBkaXJfMiBbbnVtYmVyXSAtIERpcmVjdGlvbiB2YWx1ZXNcblxuT3V0cHV0OiBbbnVtYmVyXSAtIERpYWdvbmFsIGRpcmVjdGlvbiB2YWx1ZVxuKi9cbmV4cG9ydCBmdW5jdGlvbiBqb2luX2RpcmVjdGlvbnMoZGlyXzEsIGRpcl8yKSB7XG4gICAgZGlyXzIgPSBkaXJfMSA9PT0gZGlyZWN0aW9ucy51cCAmJiBkaXJfMiA9PT0gZGlyZWN0aW9ucy5yaWdodCA/IGRpcmVjdGlvbnNfY291bnQgOiBkaXJfMjtcbiAgICByZXR1cm4gTWF0aC5taW4oZGlyXzEsIGRpcl8yKSArIDE7XG59XG5cbi8qUmV0dXJucyBhIHJhbmRvbSBudW1iZXIgKDAsNClcblxuT3V0cHV0OiBbbnVtYmVyXSAtIFJhbmRvbSBudW1iZXIgZnJvbSAwIHRvIDQqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhcmlhdGlvbigpIHtcbiAgICByZXR1cm4gXy5yYW5kb20oMCwgNCk7XG59XG5cbi8qUGxhY2VzIHRoZSBhbmdsZSAocmFkaWFucykgaW4gdGhlIFswLDIqUEldIHJhbmdlXG5cbklucHV0OiBhbmdsZSBbbnVtYmVyXSAtIEFuZ2xlIGluIHJhZGlhbnNcbk91dHB1dDogW251bWJlcl0gLSBBbmdsZSBpbiB0aGUgWzAsMipQSV0gcmFuZ2UqL1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmdlXzM2MChhbmdsZSkge1xuICAgIGFuZ2xlID0gYW5nbGUgJSBudW1iZXJzLmRlZ3JlZTM2MDtcbiAgICBhbmdsZSA9IGFuZ2xlIDwgMCA/IGFuZ2xlICsgbnVtYmVycy5kZWdyZWUzNjAgOiBhbmdsZTtcbiAgICByZXR1cm4gYW5nbGU7XG59XG5cbi8qQ2hlY2tzIHByb3hpbWl0eSBpbiBnaXZlbiBxdWFkcmFudHNcblxuSW5wdXQ6IHF1YWRyYW50cyBbYXJyYXldIC0gUXVhZHJhbnRzIHRvIGNoZWNrIChhcnJheSBvZiBudW1iZXIpXG4gICAgICAgcmFkaXVzIFtudW1iZXJdIC0gUmFkaXVzIG9mIHRoZSBib2R5XG4gICAgICAgcmFuZ2VfZmFjdG9yIFtudW1iZXJdIC0gQWRkaXRpb25hbCByYW5nZSBmYWN0b3JcbiAgICAgICB4LCB5IFtudW1iZXJdIC0gVGhlIGJvZHkncyBjb29yZGluYXRlc1xuICAgICAgIHRhcmdldF94LCB0YXJnZXRfeSBbbnVtYmVyXSAtIFRoZSB0YXJnZXQncyBjb29yZGluYXRlc1xuXG5PdXRwdXQ6IFtib29sZWFuXSovXG5leHBvcnQgZnVuY3Rpb24gaXNfaW5zaWRlX3NlY3RvcihxdWFkcmFudHMsIHJhZGl1cywgcmFuZ2VfZmFjdG9yLCB4LCB5LCB0YXJnZXRfeCwgdGFyZ2V0X3kpIHtcbiAgICBjb25zdCByYW5nZV9yYWRpdXNfc3F1YXJlZCA9IHJhZGl1cyAqIHJhbmdlX2ZhY3RvciAqIChyYWRpdXMgKiByYW5nZV9mYWN0b3IpO1xuICAgIGNvbnN0IHRhcmdldF9yYWRpdXNfc3F1YXJlZCA9IE1hdGgucG93KHRhcmdldF94IC0geCwgMikgKyBNYXRoLnBvdyh0YXJnZXRfeSAtIHksIDIpO1xuICAgIGNvbnN0IHRhcmdldF9hbmdsZSA9IHJhbmdlXzM2MChNYXRoLmF0YW4yKHkgLSB0YXJnZXRfeSwgdGFyZ2V0X3ggLSB4KSk7XG4gICAgY29uc3QgYW5nbGVzID0gWzAsIG51bWJlcnMuZGVncmVlOTAsIE1hdGguUEksIG51bWJlcnMuZGVncmVlMjcwLCBudW1iZXJzLmRlZ3JlZTM2MF07XG4gICAgbGV0IGJldHdlZW5fYW5nbGVzID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBxdWFkcmFudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgbGV0IHF1YWRyYW50ID0gcXVhZHJhbnRzW2ldO1xuICAgICAgICBsZXQgc3RhcnRfYW5nbGUgPSBhbmdsZXNbcXVhZHJhbnQgLSAxXTtcbiAgICAgICAgbGV0IGVuZF9hbmdsZSA9IGFuZ2xlc1txdWFkcmFudF07XG4gICAgICAgIGJldHdlZW5fYW5nbGVzID0gZW5kX2FuZ2xlID49IHRhcmdldF9hbmdsZSAmJiB0YXJnZXRfYW5nbGUgPj0gc3RhcnRfYW5nbGU7XG4gICAgICAgIGlmIChiZXR3ZWVuX2FuZ2xlcykgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldF9yYWRpdXNfc3F1YXJlZCA8PSByYW5nZV9yYWRpdXNfc3F1YXJlZCAmJiBiZXR3ZWVuX2FuZ2xlcztcbn1cblxuLypDaGVja3MgcHJveGltaXR5IGJhc2VkIG9uIGN1cnJlbnQgZGlyZWN0aW9uXG5cbklucHV0OiBjdXJyZW50X2RpcmVjdGlvbiBbbnVtYmVyXSAtIFRoZSBjdXJyZW50IGRpcmVjdGlvblxuICAgICAgIHgsIHkgW251bWJlcl0gLSBUaGUgYm9keSdzIGNvb3JkaW5hdGVzXG4gICAgICAgdGFyZ2V0X3gsIHRhcmdldF95IFtudW1iZXJdIC0gVGhlIHRhcmdldCdzIGNvb3JkaW5hdGVzXG4gICAgICAgcmFuZ2VfZmFjdG9yIFtudW1iZXJdIC0gQWRkaXRpb25hbCByYW5nZSBmYWN0b3JcblxuT3V0cHV0OiBbYm9vbGVhbl0qL1xuZXhwb3J0IGZ1bmN0aW9uIGlzX2Nsb3NlKGN1cnJlbnRfZGlyZWN0aW9uLCB4LCB5LCB0YXJnZXRfeCwgdGFyZ2V0X3ksIHJhbmdlX2ZhY3Rvcikge1xuICAgIHN3aXRjaCAoY3VycmVudF9kaXJlY3Rpb24pIHtcbiAgICAgICAgY2FzZSBkaXJlY3Rpb25zLnVwOlxuICAgICAgICAgICAgcmV0dXJuIGlzX2luc2lkZV9zZWN0b3IoWzEsIDJdLCBudW1iZXJzLkhFUk9fQk9EWV9SQURJVVMsIHJhbmdlX2ZhY3RvciwgeCwgeSwgdGFyZ2V0X3gsIHRhcmdldF95KTtcbiAgICAgICAgY2FzZSBkaXJlY3Rpb25zLnVwX3JpZ2h0OlxuICAgICAgICAgICAgcmV0dXJuIGlzX2luc2lkZV9zZWN0b3IoWzFdLCBudW1iZXJzLkhFUk9fQk9EWV9SQURJVVMsIHJhbmdlX2ZhY3RvciwgeCwgeSwgdGFyZ2V0X3gsIHRhcmdldF95KTtcbiAgICAgICAgY2FzZSBkaXJlY3Rpb25zLnJpZ2h0OlxuICAgICAgICAgICAgcmV0dXJuIGlzX2luc2lkZV9zZWN0b3IoWzEsIDRdLCBudW1iZXJzLkhFUk9fQk9EWV9SQURJVVMsIHJhbmdlX2ZhY3RvciwgeCwgeSwgdGFyZ2V0X3gsIHRhcmdldF95KTtcbiAgICAgICAgY2FzZSBkaXJlY3Rpb25zLmRvd25fcmlnaHQ6XG4gICAgICAgICAgICByZXR1cm4gaXNfaW5zaWRlX3NlY3RvcihbNF0sIG51bWJlcnMuSEVST19CT0RZX1JBRElVUywgcmFuZ2VfZmFjdG9yLCB4LCB5LCB0YXJnZXRfeCwgdGFyZ2V0X3kpO1xuICAgICAgICBjYXNlIGRpcmVjdGlvbnMuZG93bjpcbiAgICAgICAgICAgIHJldHVybiBpc19pbnNpZGVfc2VjdG9yKFszLCA0XSwgbnVtYmVycy5IRVJPX0JPRFlfUkFESVVTLCByYW5nZV9mYWN0b3IsIHgsIHksIHRhcmdldF94LCB0YXJnZXRfeSk7XG4gICAgICAgIGNhc2UgZGlyZWN0aW9ucy5kb3duX2xlZnQ6XG4gICAgICAgICAgICByZXR1cm4gaXNfaW5zaWRlX3NlY3RvcihbM10sIG51bWJlcnMuSEVST19CT0RZX1JBRElVUywgcmFuZ2VfZmFjdG9yLCB4LCB5LCB0YXJnZXRfeCwgdGFyZ2V0X3kpO1xuICAgICAgICBjYXNlIGRpcmVjdGlvbnMubGVmdDpcbiAgICAgICAgICAgIHJldHVybiBpc19pbnNpZGVfc2VjdG9yKFsyLCAzXSwgbnVtYmVycy5IRVJPX0JPRFlfUkFESVVTLCByYW5nZV9mYWN0b3IsIHgsIHksIHRhcmdldF94LCB0YXJnZXRfeSk7XG4gICAgICAgIGNhc2UgZGlyZWN0aW9ucy51cF9sZWZ0OlxuICAgICAgICAgICAgcmV0dXJuIGlzX2luc2lkZV9zZWN0b3IoWzJdLCBudW1iZXJzLkhFUk9fQk9EWV9SQURJVVMsIHJhbmdlX2ZhY3RvciwgeCwgeSwgdGFyZ2V0X3gsIHRhcmdldF95KTtcbiAgICB9XG59XG5cbi8qRGlyZWN0aW9uIHRyYW5zaXRpb25zXG5Vc2VkIGJlaW5nIGZvcmNlZCB0byBjaGFuZ2UgZGlyZWN0aW9ucyovXG5leHBvcnQgY29uc3QgdHJhbnNpdGlvbnMgPSB7XG4gICAgW2RpcmVjdGlvbnMudXBdOiB7XG4gICAgICAgIFtkaXJlY3Rpb25zLnVwXTogZGlyZWN0aW9ucy51cCxcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl06IGRpcmVjdGlvbnMuZG93bl9sZWZ0LFxuICAgICAgICBbZGlyZWN0aW9ucy5sZWZ0XTogZGlyZWN0aW9ucy51cF9sZWZ0LFxuICAgICAgICBbZGlyZWN0aW9ucy5yaWdodF06IGRpcmVjdGlvbnMudXBfcmlnaHQsXG4gICAgICAgIFtkaXJlY3Rpb25zLmRvd25fbGVmdF06IGRpcmVjdGlvbnMubGVmdCxcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl9yaWdodF06IGRpcmVjdGlvbnMucmlnaHQsXG4gICAgICAgIFtkaXJlY3Rpb25zLnVwX2xlZnRdOiBkaXJlY3Rpb25zLnVwLFxuICAgICAgICBbZGlyZWN0aW9ucy51cF9yaWdodF06IGRpcmVjdGlvbnMudXAsXG4gICAgfSxcbiAgICBbZGlyZWN0aW9ucy5kb3duXToge1xuICAgICAgICBbZGlyZWN0aW9ucy51cF06IGRpcmVjdGlvbnMudXBfbGVmdCxcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl06IGRpcmVjdGlvbnMuZG93bixcbiAgICAgICAgW2RpcmVjdGlvbnMubGVmdF06IGRpcmVjdGlvbnMuZG93bl9sZWZ0LFxuICAgICAgICBbZGlyZWN0aW9ucy5yaWdodF06IGRpcmVjdGlvbnMuZG93bl9yaWdodCxcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl9sZWZ0XTogZGlyZWN0aW9ucy5kb3duLFxuICAgICAgICBbZGlyZWN0aW9ucy5kb3duX3JpZ2h0XTogZGlyZWN0aW9ucy5kb3duLFxuICAgICAgICBbZGlyZWN0aW9ucy51cF9sZWZ0XTogZGlyZWN0aW9ucy5sZWZ0LFxuICAgICAgICBbZGlyZWN0aW9ucy51cF9yaWdodF06IGRpcmVjdGlvbnMucmlnaHQsXG4gICAgfSxcbiAgICBbZGlyZWN0aW9ucy5sZWZ0XToge1xuICAgICAgICBbZGlyZWN0aW9ucy51cF06IGRpcmVjdGlvbnMudXBfbGVmdCxcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl06IGRpcmVjdGlvbnMuZG93bl9sZWZ0LFxuICAgICAgICBbZGlyZWN0aW9ucy5sZWZ0XTogZGlyZWN0aW9ucy5sZWZ0LFxuICAgICAgICBbZGlyZWN0aW9ucy5yaWdodF06IGRpcmVjdGlvbnMudXBfcmlnaHQsXG4gICAgICAgIFtkaXJlY3Rpb25zLmRvd25fbGVmdF06IGRpcmVjdGlvbnMubGVmdCxcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl9yaWdodF06IGRpcmVjdGlvbnMuZG93bixcbiAgICAgICAgW2RpcmVjdGlvbnMudXBfbGVmdF06IGRpcmVjdGlvbnMubGVmdCxcbiAgICAgICAgW2RpcmVjdGlvbnMudXBfcmlnaHRdOiBkaXJlY3Rpb25zLnVwLFxuICAgIH0sXG4gICAgW2RpcmVjdGlvbnMucmlnaHRdOiB7XG4gICAgICAgIFtkaXJlY3Rpb25zLnVwXTogZGlyZWN0aW9ucy51cF9yaWdodCxcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl06IGRpcmVjdGlvbnMuZG93bl9yaWdodCxcbiAgICAgICAgW2RpcmVjdGlvbnMubGVmdF06IGRpcmVjdGlvbnMuZG93bl9sZWZ0LFxuICAgICAgICBbZGlyZWN0aW9ucy5yaWdodF06IGRpcmVjdGlvbnMucmlnaHQsXG4gICAgICAgIFtkaXJlY3Rpb25zLmRvd25fbGVmdF06IGRpcmVjdGlvbnMuZG93bixcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl9yaWdodF06IGRpcmVjdGlvbnMucmlnaHQsXG4gICAgICAgIFtkaXJlY3Rpb25zLnVwX2xlZnRdOiBkaXJlY3Rpb25zLnVwLFxuICAgICAgICBbZGlyZWN0aW9ucy51cF9yaWdodF06IGRpcmVjdGlvbnMucmlnaHQsXG4gICAgfSxcbiAgICBbZGlyZWN0aW9ucy5kb3duX2xlZnRdOiB7XG4gICAgICAgIFtkaXJlY3Rpb25zLnVwXTogZGlyZWN0aW9ucy51cF9sZWZ0LFxuICAgICAgICBbZGlyZWN0aW9ucy5kb3duXTogZGlyZWN0aW9ucy5kb3duX2xlZnQsXG4gICAgICAgIFtkaXJlY3Rpb25zLmxlZnRdOiBkaXJlY3Rpb25zLmRvd25fbGVmdCxcbiAgICAgICAgW2RpcmVjdGlvbnMucmlnaHRdOiBkaXJlY3Rpb25zLmRvd25fcmlnaHQsXG4gICAgICAgIFtkaXJlY3Rpb25zLmRvd25fbGVmdF06IGRpcmVjdGlvbnMuZG93bl9sZWZ0LFxuICAgICAgICBbZGlyZWN0aW9ucy5kb3duX3JpZ2h0XTogZGlyZWN0aW9ucy5kb3duLFxuICAgICAgICBbZGlyZWN0aW9ucy51cF9sZWZ0XTogZGlyZWN0aW9ucy5sZWZ0LFxuICAgICAgICBbZGlyZWN0aW9ucy51cF9yaWdodF06IGRpcmVjdGlvbnMudXAsXG4gICAgfSxcbiAgICBbZGlyZWN0aW9ucy5kb3duX3JpZ2h0XToge1xuICAgICAgICBbZGlyZWN0aW9ucy51cF06IGRpcmVjdGlvbnMudXBfcmlnaHQsXG4gICAgICAgIFtkaXJlY3Rpb25zLmRvd25dOiBkaXJlY3Rpb25zLmRvd25fcmlnaHQsXG4gICAgICAgIFtkaXJlY3Rpb25zLmxlZnRdOiBkaXJlY3Rpb25zLmRvd25fbGVmdCxcbiAgICAgICAgW2RpcmVjdGlvbnMucmlnaHRdOiBkaXJlY3Rpb25zLmRvd25fcmlnaHQsXG4gICAgICAgIFtkaXJlY3Rpb25zLmRvd25fbGVmdF06IGRpcmVjdGlvbnMuZG93bixcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl9yaWdodF06IGRpcmVjdGlvbnMuZG93bl9yaWdodCxcbiAgICAgICAgW2RpcmVjdGlvbnMudXBfbGVmdF06IGRpcmVjdGlvbnMubGVmdCxcbiAgICAgICAgW2RpcmVjdGlvbnMudXBfcmlnaHRdOiBkaXJlY3Rpb25zLnJpZ2h0LFxuICAgIH0sXG4gICAgW2RpcmVjdGlvbnMudXBfbGVmdF06IHtcbiAgICAgICAgW2RpcmVjdGlvbnMudXBdOiBkaXJlY3Rpb25zLnVwX2xlZnQsXG4gICAgICAgIFtkaXJlY3Rpb25zLmRvd25dOiBkaXJlY3Rpb25zLmRvd25fbGVmdCxcbiAgICAgICAgW2RpcmVjdGlvbnMubGVmdF06IGRpcmVjdGlvbnMudXBfbGVmdCxcbiAgICAgICAgW2RpcmVjdGlvbnMucmlnaHRdOiBkaXJlY3Rpb25zLnVwX3JpZ2h0LFxuICAgICAgICBbZGlyZWN0aW9ucy5kb3duX2xlZnRdOiBkaXJlY3Rpb25zLmxlZnQsXG4gICAgICAgIFtkaXJlY3Rpb25zLmRvd25fcmlnaHRdOiBkaXJlY3Rpb25zLnJpZ2h0LFxuICAgICAgICBbZGlyZWN0aW9ucy51cF9sZWZ0XTogZGlyZWN0aW9ucy51cF9sZWZ0LFxuICAgICAgICBbZGlyZWN0aW9ucy51cF9yaWdodF06IGRpcmVjdGlvbnMudXAsXG4gICAgfSxcbiAgICBbZGlyZWN0aW9ucy51cF9yaWdodF06IHtcbiAgICAgICAgW2RpcmVjdGlvbnMudXBdOiBkaXJlY3Rpb25zLnVwX3JpZ2h0LFxuICAgICAgICBbZGlyZWN0aW9ucy5kb3duXTogZGlyZWN0aW9ucy5kb3duX3JpZ2h0LFxuICAgICAgICBbZGlyZWN0aW9ucy5sZWZ0XTogZGlyZWN0aW9ucy51cF9sZWZ0LFxuICAgICAgICBbZGlyZWN0aW9ucy5yaWdodF06IGRpcmVjdGlvbnMudXBfcmlnaHQsXG4gICAgICAgIFtkaXJlY3Rpb25zLmRvd25fbGVmdF06IGRpcmVjdGlvbnMubGVmdCxcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl9yaWdodF06IGRpcmVjdGlvbnMucmlnaHQsXG4gICAgICAgIFtkaXJlY3Rpb25zLnVwX2xlZnRdOiBkaXJlY3Rpb25zLnVwLFxuICAgICAgICBbZGlyZWN0aW9ucy51cF9yaWdodF06IGRpcmVjdGlvbnMudXBfcmlnaHQsXG4gICAgfSxcbn07XG5cbi8qUmV0dXJucyB0aGUgb3Bwb3NpdGUgb2YgdGhlIGdpdmVuIGRpcmVjdGlvblxuXG5JbnB1dDogZGlyZWN0aW9uIFtudW1iZXJdIC0gRGlyZWN0aW9uIHZhbHVlXG5cbk91dHB1dDogW251bWJlcl0gLSBPcHBvc2l0ZSBkaXJlY3Rpb24gdmFsdWUqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldF9vcHBvc2l0ZV9kaXJlY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcbiAgICAgICAgY2FzZSBkaXJlY3Rpb25zLnVwOlxuICAgICAgICAgICAgcmV0dXJuIGRpcmVjdGlvbnMuZG93bjtcbiAgICAgICAgY2FzZSBkaXJlY3Rpb25zLmRvd246XG4gICAgICAgICAgICByZXR1cm4gZGlyZWN0aW9ucy51cDtcbiAgICAgICAgY2FzZSBkaXJlY3Rpb25zLmxlZnQ6XG4gICAgICAgICAgICByZXR1cm4gZGlyZWN0aW9ucy5yaWdodDtcbiAgICAgICAgY2FzZSBkaXJlY3Rpb25zLnJpZ2h0OlxuICAgICAgICAgICAgcmV0dXJuIGRpcmVjdGlvbnMubGVmdDtcbiAgICB9XG59XG5cbi8qQXBwbHkgdGhlIHRyYW5zaXRpb24gZGlyZWN0aW9uc1xuVXNlZCB3aGVuIGJlaW5nIGZvcmNlZCB0byBmYWNlIGEgZGlmZmVyZW50IGRpcmVjdGlvblxuXG5JbnB1dDogY3VycmVudF9kaXJlY3Rpb24gW251bWJlcl0gLSBDdXJyZW50IGRpcmVjdGlvbiB2YWx1ZVxuICAgICAgIGRlc2lyZWRfZGlyZWN0aW9uIFtudW1iZXJdIC0gRGVzaXJlZCBkaXJlY3Rpb24gdmFsdWVcblxuT3V0cHV0OiBbbnVtYmVyXSAtIFRoZSBkaXJlY3Rpb24gdmFsdWUgdG8gYXBwbHkqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldF90cmFuc2l0aW9uX2RpcmVjdGlvbnMoY3VycmVudF9kaXJlY3Rpb24sIGRlc2lyZWRfZGlyZWN0aW9uKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25zW2Rlc2lyZWRfZGlyZWN0aW9uXVtjdXJyZW50X2RpcmVjdGlvbl07XG59XG5cbi8qT2J0YWlucyB0aGUgdGV4dCB3aWR0aCBpbiBwaXhlbHMgKElORUZGSUNJRU5UKVxuXG5JbnB1dDogZ2FtZSBbUGhhc2VyOkdhbWVdIC0gUmVmZXJlbmNlIHRvIHRoZSBydW5uaW5nIGdhbWUgb2JqZWN0XG4gICAgICAgdGV4dCBbc3RyaW5nXSAtIFRleHQgc3RyaW5nKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRfdGV4dF93aWR0aChnYW1lLCB0ZXh0LCBpdGFsaWMgPSBmYWxzZSkge1xuICAgIC8vZ2V0IHRleHQgd2lkdGggaW4gcHggKGRpcnR5IHdheSlcbiAgICBjb25zdCBmb250X25hbWUgPSBpdGFsaWMgPyBcImdzLWl0YWxpYy1ibXAtZm9udFwiIDogXCJncy1ibXAtZm9udFwiO1xuICAgIGxldCB0ZXh0X3Nwcml0ZSA9IGdhbWUuYWRkLmJpdG1hcFRleHQoMCwgMCwgZm9udF9uYW1lLCB0ZXh0LCBudW1iZXJzLkZPTlRfU0laRSk7XG4gICAgY29uc3QgdGV4dF93aWR0aCA9IHRleHRfc3ByaXRlLndpZHRoO1xuICAgIHRleHRfc3ByaXRlLmRlc3Ryb3koKTtcbiAgICByZXR1cm4gdGV4dF93aWR0aDtcbn1cblxuLypFaXRoZXIga2lsbHMgb3IgZGVzdHJveXMgZWFjaCBzcHJpdGUgaW4gdGhlIGdyb3VwXG5cbklucHV0OiBncm91cCBbUGhhc2VyOkdyb3VwXSAtIFRoZSBwYXJlbnQgZ3JvdXBcbiAgICAgICBkZXN0cm95IFtib29sZWFuXSAtIElmIHRydWUsIGNoaWxkIGlzIGRlc3Ryb3llZCBpbnN0ZWFkLiovXG5leHBvcnQgZnVuY3Rpb24ga2lsbF9hbGxfc3ByaXRlcyhncm91cCwgZGVzdHJveSA9IGZhbHNlKSB7XG4gICAgZ3JvdXAuY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICAgIGlmIChkZXN0cm95KSBjaGlsZC5wYXJlbnQucmVtb3ZlKGNoaWxkLCB0cnVlKTtcbiAgICAgICAgZWxzZSBjaGlsZC5raWxsKCk7XG4gICAgfSk7XG59XG5cbi8qUmV0dXJucyB0aGUgc3Vycm91bmRpbmcgcG9zaXRpb25zXG5EaWFnb25hbHMgYXJlIG9wdGlvbmFsXG5cbklucHV0OiB4LHkgW251bWJlcl0gLSBUaGUgYm9keSdzIHBvc2l0aW9uXG4gICAgICAgd2l0aF9kaWFnb25hbHMgW2Jvb2xlYW5dIC0gSWYgdHJ1ZSwgaW5jbHVkZXMgZGlhZ29uYWxzXG4gICAgICAgc2hpZnQgW251bWJlcl0gLSBEaXN0YW5jZSB0byBjaGVjayovXG5leHBvcnQgZnVuY3Rpb24gZ2V0X3N1cnJvdW5kaW5ncyh4LCB5LCB3aXRoX2RpYWdvbmFscyA9IGZhbHNlLCBzaGlmdCA9IDEpIHtcbiAgICBsZXQgc3Vycm91bmRpbmdzID0gW1xuICAgICAgICB7eDogeCAtIHNoaWZ0LCB5OiB5LCBkaWFnOiBmYWxzZSwgZGlyZWN0aW9uOiBkaXJlY3Rpb25zLmxlZnR9LFxuICAgICAgICB7eDogeCArIHNoaWZ0LCB5OiB5LCBkaWFnOiBmYWxzZSwgZGlyZWN0aW9uOiBkaXJlY3Rpb25zLnJpZ2h0fSxcbiAgICAgICAge3g6IHgsIHk6IHkgLSBzaGlmdCwgZGlhZzogZmFsc2UsIGRpcmVjdGlvbjogZGlyZWN0aW9ucy51cH0sXG4gICAgICAgIHt4OiB4LCB5OiB5ICsgc2hpZnQsIGRpYWc6IGZhbHNlLCBkaXJlY3Rpb246IGRpcmVjdGlvbnMuZG93bn0sXG4gICAgXTtcbiAgICBpZiAod2l0aF9kaWFnb25hbHMpIHtcbiAgICAgICAgc3Vycm91bmRpbmdzID0gc3Vycm91bmRpbmdzLmNvbmNhdChbXG4gICAgICAgICAgICB7eDogeCAtIHNoaWZ0LCB5OiB5IC0gc2hpZnQsIGRpYWc6IHRydWUsIGRpcmVjdGlvbjogZGlyZWN0aW9ucy51cF9sZWZ0fSxcbiAgICAgICAgICAgIHt4OiB4ICsgc2hpZnQsIHk6IHkgLSBzaGlmdCwgZGlhZzogdHJ1ZSwgZGlyZWN0aW9uOiBkaXJlY3Rpb25zLnVwX3JpZ2h0fSxcbiAgICAgICAgICAgIHt4OiB4IC0gc2hpZnQsIHk6IHkgKyBzaGlmdCwgZGlhZzogdHJ1ZSwgZGlyZWN0aW9uOiBkaXJlY3Rpb25zLmRvd25fbGVmdH0sXG4gICAgICAgICAgICB7eDogeCArIHNoaWZ0LCB5OiB5ICsgc2hpZnQsIGRpYWc6IHRydWUsIGRpcmVjdGlvbjogZGlyZWN0aW9ucy5kb3duX3JpZ2h0fSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIHJldHVybiBzdXJyb3VuZGluZ3M7XG59XG5cbi8qTGlzdHMgYWxsIGRpcmVjdGlvbnMsIGRpYWdvbmFscyBvcHRpb25hbFxuXG5JbnB1dDogd2l0aF9kaWFnb25hbHMgW2Jvb2xlYW5dIC0gSWYgdHJ1ZSwgaW5jbHVkZXMgZGlhZ29uYWxzKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRfZGlyZWN0aW9ucyh3aXRoX2RpYWdvbmFscyA9IGZhbHNlKSB7XG4gICAgbGV0IGRpcnMgPSBbZGlyZWN0aW9ucy51cCwgZGlyZWN0aW9ucy5kb3duLCBkaXJlY3Rpb25zLmxlZnQsIGRpcmVjdGlvbnMucmlnaHRdO1xuICAgIGlmICh3aXRoX2RpYWdvbmFscykge1xuICAgICAgICBkaXJzLnB1c2goLi4uW2RpcmVjdGlvbnMudXBfbGVmdCwgZGlyZWN0aW9ucy51cF9yaWdodCwgZGlyZWN0aW9ucy5kb3duX2xlZnQsIGRpcmVjdGlvbnMuZG93bl9yaWdodF0pO1xuICAgIH1cbiAgICByZXR1cm4gZGlycztcbn1cblxuLypDYXBpdGFsaXplcyB0aGUgZ2l2ZW4gdGV4dFxuXG5JbnB1dDogdGV4dCBbc3RyaW5nXSAtIFRleHQgdG8gY2hhbmdlXG4gICAgICAgbG93ZXIgW2Jvb2xlYW5dIC0gV2hldGhlciB0aGUgZnVsbCB0ZXh0IHNob3VsZCBiZSBsb3dlcmNhc2VkXG5cbk91dHB1dDogW3N0cmluZ10gLSBDYXBpdGFsaXplZCB0ZXh0Ki9cbmV4cG9ydCBmdW5jdGlvbiBjYXBpdGFsaXplKHRleHQsIGxvd2VyID0gZmFsc2UpIHtcbiAgICByZXR1cm4gKGxvd2VyID8gdGV4dC50b0xvd2VyQ2FzZSgpIDogdGV4dCkucmVwbGFjZSgvKD86XnxcXHN8W1wiJyhbe10pK1xcUy9nLCBtYXRjaCA9PiBtYXRjaC50b1VwcGVyQ2FzZSgpKTtcbn1cblxuLypDaGFuZ2VzIHRoZSBicmlnaHRuZXNzIG9mIGEgZ2l2ZW4gY29sb3IgY29kZVxuXG5JbnB1dDogaGV4IFtudW1iZXJdIC0gSW5wdXQgY29sb3JcbiAgICAgICBwZXJjZW50IFtudW1iZXJdIC0gQnJpZ2h0bmVzcyBmYWN0b3JcblxuT3V0cHV0IFtudW1iZXJdIC0gT3V0cHV0IGNvbG9yKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGFuZ2VfYnJpZ2h0bmVzcyhoZXgsIHBlcmNlbnQpIHtcbiAgICBpZiAodHlwZW9mIGhleCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBoZXggPSBoZXgucmVwbGFjZSgvXlxccyojfFxccyokL2csIFwiXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGhleCA9IGhleC50b1N0cmluZygxNik7XG4gICAgfVxuICAgIGlmIChoZXgubGVuZ3RoID09IDMpIHtcbiAgICAgICAgaGV4ID0gaGV4LnJlcGxhY2UoLyguKS9nLCBcIiQxJDFcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaGV4ID0gKFwiMDAwMDAwXCIgKyBoZXgpLnNsaWNlKC02KTtcbiAgICB9XG4gICAgbGV0IHIgPSBwYXJzZUludChoZXguc3Vic3RyKDAsIDIpLCAxNik7XG4gICAgbGV0IGcgPSBwYXJzZUludChoZXguc3Vic3RyKDIsIDIpLCAxNik7XG4gICAgbGV0IGIgPSBwYXJzZUludChoZXguc3Vic3RyKDQsIDIpLCAxNik7XG5cbiAgICBsZXQgaCwgcywgdjtcbiAgICBbaCwgcywgdl0gPSByZ2IyaHN2KHIsIGcsIGIpO1xuICAgIHYgPSAodiAqIHBlcmNlbnQpIHwgMDtcbiAgICBbciwgZywgYl0gPSBoc3YycmdiKGgsIHMsIHYpO1xuXG4gICAgaGV4ID0gKCgxIDw8IDI0KSArIChyIDw8IDE2KSArIChnIDw8IDgpICsgYikudG9TdHJpbmcoMTYpLnNsaWNlKDEpO1xuICAgIHJldHVybiBwYXJzZUludChoZXgsIDE2KTtcbn1cblxuLypUcmFuc2Zvcm0gUkdCIGNvbG9yIGludG8gSFNWIGNvbG9yXG5cbklucHV0OiByLGcsYiBbbnVtYmVyXSAtIFJlZCwgR3JlZW4sIEJsdWUgY2hhbm5lbHNcblxuT3V0cHV0IFthcnJheV0gLSBIdWUsIFNhdHVyYXRpb24sIFZhbHVlIGNoYW5uZWxzIChhcnJheSBvZiBudW1iZXIpKi9cbmV4cG9ydCBmdW5jdGlvbiByZ2IyaHN2KHIsIGcsIGIpIHtcbiAgICBsZXQgdiA9IE1hdGgubWF4KHIsIGcsIGIpLFxuICAgICAgICBuID0gdiAtIE1hdGgubWluKHIsIGcsIGIpO1xuICAgIGxldCBoID0gbiAmJiAodiA9PT0gciA/IChnIC0gYikgLyBuIDogdiA9PT0gZyA/IDIgKyAoYiAtIHIpIC8gbiA6IDQgKyAociAtIGcpIC8gbik7XG4gICAgcmV0dXJuIFs2MCAqIChoIDwgMCA/IGggKyA2IDogaCksIHYgJiYgbiAvIHYsIHZdO1xufVxuXG4vKlRyYW5zZm9ybSBIU1YgY29sb3IgaW50byBSR0IgY29sb3JcblxuSW5wdXQ6IGgscyx2IFtudW1iZXJdIC0gSHVlLCBTYXR1cmF0aW9uLCBWYWx1ZSBjaGFubmVsc1xuXG5PdXRwdXQgW2FycmF5XSAtIFJlZCwgR3JlZW4sIEJsdWUgKGFycmF5IG9mIG51bWJlcikqL1xuZXhwb3J0IGZ1bmN0aW9uIGhzdjJyZ2IoaCwgcywgdikge1xuICAgIGxldCBmID0gKG4sIGsgPSAobiArIGggLyA2MCkgJSA2KSA9PiB2IC0gdiAqIHMgKiBNYXRoLm1heChNYXRoLm1pbihrLCA0IC0gaywgMSksIDApO1xuICAgIHJldHVybiBbZig1KSwgZigzKSwgZigxKV07XG59XG5cbi8qRGVmaW5lcyB0aGUgY29sbGlzaW9uIHBvbHlnb25cblxuSW5wdXQ6IHdpZHRoIFtudW1iZXJdIC0gV2lkdGggb2YgdGhlIGJvZHlcbiAgICAgICBzaGlmdCBbbnVtYmVyXSAtIFNoaWZ0IHZhbHVlXG4gICAgICAgYmV2ZWwgW251bWJlcl0gLSBCb2R5J3MgYmV2ZWwgdmFsdWVcblxuT3V0cHV0OiBbYXJyYXldIC0gTXVsdGlkaW1lbnNpb25hbCBhcnJheSB3aXRoIHBvaW50cyovXG5leHBvcnQgZnVuY3Rpb24gbW91bnRfY29sbGlzaW9uX3BvbHlnb24od2lkdGgsIHNoaWZ0LCBiZXZlbCkge1xuICAgIGlmIChiZXZlbCA9PT0gdW5kZWZpbmVkKSBiZXZlbCA9IDA7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgW2JldmVsICsgc2hpZnQsIHNoaWZ0XSxcbiAgICAgICAgLi4uKGJldmVsID09PSAwID8gW10gOiBbW3dpZHRoIC0gYmV2ZWwgKyBzaGlmdCwgc2hpZnRdXSksXG4gICAgICAgIFt3aWR0aCArIHNoaWZ0LCBiZXZlbCArIHNoaWZ0XSxcbiAgICAgICAgLi4uKGJldmVsID09PSAwID8gW10gOiBbW3dpZHRoICsgc2hpZnQsIHdpZHRoIC0gYmV2ZWwgKyBzaGlmdF1dKSxcbiAgICAgICAgW3dpZHRoIC0gYmV2ZWwgKyBzaGlmdCwgd2lkdGggKyBzaGlmdF0sXG4gICAgICAgIC4uLihiZXZlbCA9PT0gMCA/IFtdIDogW1tiZXZlbCArIHNoaWZ0LCB3aWR0aCArIHNoaWZ0XV0pLFxuICAgICAgICBbc2hpZnQsIHdpZHRoIC0gYmV2ZWwgKyBzaGlmdF0sXG4gICAgICAgIC4uLihiZXZlbCA9PT0gMCA/IFtdIDogW1tzaGlmdCwgYmV2ZWwgKyBzaGlmdF1dKSxcbiAgICBdO1xufVxuIiwiZXhwb3J0IGNvbnN0IEdBTUVfV0lEVEggPSAyNDA7XG5leHBvcnQgY29uc3QgR0FNRV9IRUlHSFQgPSAxNjA7XG5leHBvcnQgY29uc3QgVEFSR0VUX0ZQUyA9IDYwO1xuZXhwb3J0IGNvbnN0IEhFUk9fQk9EWV9SQURJVVMgPSA3LjA7XG5leHBvcnQgY29uc3QgSEVST19CT0RZX1JBRElVU19NNyA9IDYuNTtcbmV4cG9ydCBjb25zdCBJTlZfU1FSVDIgPSAxIC8gTWF0aC5zcXJ0KDIpO1xuZXhwb3J0IGNvbnN0IERFTFRBX1RJTUVfRkFDVE9SID0gNTAuMCAvIDMuMDtcbmV4cG9ydCBjb25zdCBNQVBfREFNUElORyA9IDE7XG5leHBvcnQgY29uc3QgREVGQVVMVF9XSU5ET1dfQ09MT1IgPSAweDAwNjA4MDtcbmV4cG9ydCBjb25zdCBERUZBVUxUX0ZPTlRfQ09MT1IgPSAweGY4ZjhmODtcbmV4cG9ydCBjb25zdCBJTkFDVElWRV9GT05UX0NPTE9SID0gMHgwODhkYmQ7XG5leHBvcnQgY29uc3QgWUVMTE9XX0ZPTlRfQ09MT1IgPSAweGY4Zjg0MDtcbmV4cG9ydCBjb25zdCBSRURfRk9OVF9DT0xPUiA9IDB4ZjgwMDAwO1xuZXhwb3J0IGNvbnN0IEJMVUVfRk9OVF9DT0xPUiA9IDB4MDAwMGY4O1xuZXhwb3J0IGNvbnN0IFBVUlBMRV9GT05UX0NPTE9SID0gMHhlMDcwYjA7XG5leHBvcnQgY29uc3QgRk9OVF9TSVpFID0gODtcbmV4cG9ydCBjb25zdCBJTlNJREVfQk9SREVSX1dJRFRIID0gMztcbmV4cG9ydCBjb25zdCBPVVRTSURFX0JPUkRFUl9XSURUSCA9IDE7XG5leHBvcnQgY29uc3QgV0lORE9XX1BBRERJTkdfSCA9IDQ7XG5leHBvcnQgY29uc3QgV0lORE9XX1BBRERJTkdfVE9QID0gODtcbmV4cG9ydCBjb25zdCBXSU5ET1dfUEFERElOR19CT1RUT00gPSA0O1xuZXhwb3J0IGNvbnN0IFNQQUNFX0JFVFdFRU5fTElORVMgPSA4O1xuZXhwb3J0IGNvbnN0IE1BWF9ESUFHX1dJTl9XSURUSCA9IDE4MDtcbmV4cG9ydCBjb25zdCBNQVhfTElORVNfUEVSX0RJQUdfV0lOID0gMztcbmV4cG9ydCBjb25zdCBNQVhfRElBR19XSU5fSEVJR0hUID1cbiAgICBGT05UX1NJWkUgKiBNQVhfTElORVNfUEVSX0RJQUdfV0lOICtcbiAgICBTUEFDRV9CRVRXRUVOX0xJTkVTICogKE1BWF9MSU5FU19QRVJfRElBR19XSU4gLSAxKSArXG4gICAgV0lORE9XX1BBRERJTkdfVE9QICtcbiAgICBXSU5ET1dfUEFERElOR19CT1RUT007XG5leHBvcnQgY29uc3QgUFVTSF9USU1FID0gODUwO1xuZXhwb3J0IGNvbnN0IElDT05fV0lEVEggPSAxNDtcbmV4cG9ydCBjb25zdCBJQ09OX0hFSUdIVCA9IDE0O1xuZXhwb3J0IGNvbnN0IGRlZ3JlZTE1ID0gKDE1ICogTWF0aC5QSSkgLyAxODA7XG5leHBvcnQgY29uc3QgZGVncmVlMzAgPSAoMzAgKiBNYXRoLlBJKSAvIDE4MDtcbmV4cG9ydCBjb25zdCBkZWdyZWU2MCA9ICg2MCAqIE1hdGguUEkpIC8gMTgwO1xuZXhwb3J0IGNvbnN0IGRlZ3JlZTkwID0gTWF0aC5QSSAvIDI7XG5leHBvcnQgY29uc3QgZGVncmVlMTgwID0gTWF0aC5QSTtcbmV4cG9ydCBjb25zdCBkZWdyZWUyNzAgPSAoMyAqIE1hdGguUEkpIC8gMjtcbmV4cG9ydCBjb25zdCBkZWdyZWUzNjAgPSAyICogTWF0aC5QSTtcbmV4cG9ydCBjb25zdCBkZWdyZWU1NDAgPSAzICogTWF0aC5QSTtcbmV4cG9ydCBjb25zdCBDQU1FUkFfTEVSUCA9IDAuMTU7XG5leHBvcnQgY29uc3QgRUxFTV9BVFRSX01JTiA9IC0yMDA7XG5leHBvcnQgY29uc3QgRUxFTV9BVFRSX01BWCA9IDIwMDtcbmV4cG9ydCBjb25zdCBBVkFUQVJfU0laRSA9IDMyO1xuZXhwb3J0IGNvbnN0IFdPUkxEX01BUF9TUEVFRF9EQVNIX1JFRFVDRSA9IC00NTtcbmV4cG9ydCBjb25zdCBXT1JMRF9NQVBfU1BFRURfV0FMS19SRURVQ0UgPSAtNDA7XG5leHBvcnQgY29uc3QgV09STERfTUFQX1NQUklURV9TQ0FMRV9ZID0gMC44NDtcbmV4cG9ydCBjb25zdCBXT1JMRF9NQVBfU1BSSVRFX1NDQUxFX1ggPSAwLjg0O1xuIiwiaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tIFwiLi9tYWdpY19udW1iZXJzXCI7XG5pbXBvcnQge1BhZ2VJbmRpY2F0b3J9IGZyb20gXCIuL3N1cHBvcnRfbWVudXMvUGFnZUluZGljYXRvclwiO1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSBcIi4vdXRpbHNcIjtcblxuZXhwb3J0IHR5cGUgVGV4dE9iaiA9IHtcbiAgICB0ZXh0OiBQaGFzZXIuQml0bWFwVGV4dDtcbiAgICBzaGFkb3c6IFBoYXNlci5CaXRtYXBUZXh0O1xuICAgIHJpZ2h0X2FsaWduOiBib29sZWFuO1xuICAgIGluaXRpYWxfeDogbnVtYmVyO1xuICAgIHRleHRfYmc/OiBQaGFzZXIuR3JhcGhpY3M7XG59O1xuXG5leHBvcnQgdHlwZSBJdGVtT2JqID0ge1xuICAgIGljb246IFBoYXNlci5TcHJpdGU7XG4gICAgYmFja2dyb3VuZD86IFBoYXNlci5TcHJpdGU7XG4gICAgZXF1aXBwZWQ/OiBQaGFzZXIuU3ByaXRlO1xuICAgIGJyb2tlbj86IFBoYXNlci5TcHJpdGU7XG4gICAgcXVhbnRpdHk/OiBQaGFzZXIuQml0bWFwVGV4dDtcbn07XG5cbi8qQSBiYXNpYyB3aW5kb3cgdGVtcGxhdGUgdXNlZCBpbiBtb3N0IG1lbnVzXG5DcmVhdGVzIHRoZSBiYWNrZ3JvdW5kIGFuZCBib3JkZXJzXG5TdXBwb3J0cyB0aGUgYWRkaXRpb24gb2Ygc3ByaXRlcyBhbmQgdGV4dFxuXG5JbnB1dDogZ2FtZSBbUGhhc2VyOkdhbWVdIC0gUmVmZXJlbmNlIHRvIHRoZSBydW5uaW5nIGdhbWUgb2JqZWN0XG4gICAgICAgeCx5IFtudW1iZXJdIC0gVGhlIHdpbmRvdydzIHBvc2l0aW9uXG4gICAgICAgd2lkdGgsIGhlaWdodCBbbnVtYmVyXSAtIFRoZSB3aW5kb3cncyB3aWR0aCAmIGhlaWdodFxuICAgICAgIG5lZWRfcG9zX3VwZGF0ZSBbYm9vbGVhbl0gLSBGbGFnIHRvIGVuYWJsZSBhbiBhdXRvbWF0aWMgcG9zaXRpb24gdXBkYXRlXG4gICAgICAgY29sb3IgW251bWJlcl0gLSBUaGUgd2luZG93J3MgYmFja2dyb3VuZCBjb2xvclxuICAgICAgIGZvbnRfY29sb3IgW251bWJlcl0gLSBUaGUgd2luZG93J3MgZGVmYXVsdCBmb250IGNvbG9yKi9cbmV4cG9ydCBjbGFzcyBXaW5kb3cge1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFRSQU5TSVRJT05fVElNRSA9IFBoYXNlci5UaW1lci5RVUFSVEVSID4+IDI7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgSVRFTV9PQkogPSB7XG4gICAgICAgIEVRVUlQUEVEX1g6IDcsXG4gICAgICAgIEVRVUlQUEVEX1k6IDgsXG4gICAgICAgIFFVQU5USVRZX0VORF9YOiAxNSxcbiAgICAgICAgUVVBTlRJVFlfWTogOCxcbiAgICB9O1xuXG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBncm91cDogUGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyB4OiBudW1iZXI7XG4gICAgcHVibGljIHk6IG51bWJlcjtcbiAgICBwdWJsaWMgd2lkdGg6IG51bWJlcjtcbiAgICBwdWJsaWMgaGVpZ2h0OiBudW1iZXI7XG4gICAgcHVibGljIGNvbG9yOiBudW1iZXI7XG4gICAgcHVibGljIGZvbnRfY29sb3I6IG51bWJlcjtcbiAgICBwdWJsaWMgZ3JhcGhpY3M6IFBoYXNlci5HcmFwaGljcztcbiAgICBwdWJsaWMgc2VwYXJhdG9yc19ncmFwaGljczogUGhhc2VyLkdyYXBoaWNzO1xuICAgIHB1YmxpYyBuZWVkX3Bvc191cGRhdGU6IGJvb2xlYW47XG4gICAgcHVibGljIG9wZW46IGJvb2xlYW47XG4gICAgcHVibGljIGxpbmVzX3Nwcml0ZXM6IHtcbiAgICAgICAgdGV4dDogUGhhc2VyLkJpdG1hcFRleHQ7XG4gICAgICAgIHNoYWRvdzogUGhhc2VyLkJpdG1hcFRleHQ7XG4gICAgfVtdO1xuICAgIHB1YmxpYyBleHRyYV9zcHJpdGVzOiBQaGFzZXIuU3ByaXRlW107XG4gICAgcHVibGljIGludGVybmFsX2dyb3Vwczoge1trZXk6IHN0cmluZ106IFBoYXNlci5Hcm91cH07XG4gICAgcHVibGljIGNsb3NlX2NhbGxiYWNrOiBGdW5jdGlvbjtcbiAgICBwdWJsaWMgcGFnZV9pbmRpY2F0b3I6IFBhZ2VJbmRpY2F0b3I7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgZ2FtZSxcbiAgICAgICAgeCxcbiAgICAgICAgeSxcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodCxcbiAgICAgICAgbmVlZF9wb3NfdXBkYXRlID0gdHJ1ZSxcbiAgICAgICAgY29sb3IgPSBudW1iZXJzLkRFRkFVTFRfV0lORE9XX0NPTE9SLFxuICAgICAgICBmb250X2NvbG9yID0gbnVtYmVycy5ERUZBVUxUX0ZPTlRfQ09MT1JcbiAgICApIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5ncm91cCA9IGdhbWUuYWRkLmdyb3VwKCk7XG5cbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcblxuICAgICAgICB0aGlzLmNvbG9yID0gY29sb3I7XG4gICAgICAgIHRoaXMuZm9udF9jb2xvciA9IGZvbnRfY29sb3I7XG5cbiAgICAgICAgdGhpcy5leHRyYV9zcHJpdGVzID0gW107XG4gICAgICAgIHRoaXMuaW50ZXJuYWxfZ3JvdXBzID0ge307XG5cbiAgICAgICAgdGhpcy5ncmFwaGljcyA9IHRoaXMuZ2FtZS5hZGQuZ3JhcGhpY3MoMCwgMCk7XG4gICAgICAgIHRoaXMuc2VwYXJhdG9yc19ncmFwaGljcyA9IHRoaXMuZ2FtZS5hZGQuZ3JhcGhpY3MoMCwgMCk7XG5cbiAgICAgICAgdGhpcy5kcmF3X2JhY2tncm91bmQoKTtcbiAgICAgICAgdGhpcy5kcmF3X2JvcmRlcnMoKTtcbiAgICAgICAgdGhpcy5ncm91cC5hZGQodGhpcy5ncmFwaGljcyk7XG4gICAgICAgIHRoaXMuZ3JvdXAuYWRkKHRoaXMuc2VwYXJhdG9yc19ncmFwaGljcyk7XG5cbiAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDA7XG4gICAgICAgIHRoaXMuZ3JvdXAud2lkdGggPSAwO1xuICAgICAgICB0aGlzLmdyb3VwLmhlaWdodCA9IDA7XG5cbiAgICAgICAgdGhpcy5uZWVkX3Bvc191cGRhdGUgPSBuZWVkX3Bvc191cGRhdGU7XG4gICAgICAgIHRoaXMub3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxpbmVzX3Nwcml0ZXMgPSBbXTtcbiAgICAgICAgdGhpcy5wYWdlX2luZGljYXRvciA9IG5ldyBQYWdlSW5kaWNhdG9yKHRoaXMuZ2FtZSwgdGhpcyk7XG4gICAgfVxuXG4gICAgZ2V0IHJlYWxfeCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JvdXAueDtcbiAgICB9XG5cbiAgICBnZXQgcmVhbF95KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ncm91cC55O1xuICAgIH1cblxuICAgIG1ha2VfaXRlbV9vYmooXG4gICAgICAgIGtleV9uYW1lOiBzdHJpbmcsXG4gICAgICAgIHBvcz86IHt4OiBudW1iZXI7IHk6IG51bWJlcn0sXG4gICAgICAgIHBhcmFtcz86IHtiZz86IGJvb2xlYW47IGVxdWlwcGVkPzogYm9vbGVhbjsgYnJva2VuPzogYm9vbGVhbjsgcXVhbnRpdHk/OiBudW1iZXI7IGludGVybmFsX2dyb3VwPzogc3RyaW5nfVxuICAgICkge1xuICAgICAgICBjb25zdCBvYmo6IEl0ZW1PYmogPSB7aWNvbjogbnVsbCwgYmFja2dyb3VuZDogbnVsbCwgZXF1aXBwZWQ6IG51bGwsIGJyb2tlbjogbnVsbCwgcXVhbnRpdHk6IG51bGx9O1xuICAgICAgICBjb25zdCBiYXNlX3ggPSBwb3MgPyBwb3MueCA6IDA7XG4gICAgICAgIGNvbnN0IGJhc2VfeSA9IHBvcyA/IHBvcy55IDogMDtcblxuICAgICAgICBpZiAocGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAocGFyYW1zLmJnKSB7XG4gICAgICAgICAgICAgICAgb2JqLmJhY2tncm91bmQgPSB0aGlzLmNyZWF0ZV9hdF9ncm91cChcbiAgICAgICAgICAgICAgICAgICAgYmFzZV94LFxuICAgICAgICAgICAgICAgICAgICBiYXNlX3ksXG4gICAgICAgICAgICAgICAgICAgIFwiaXRlbV9ib3JkZXJcIixcbiAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcy5pbnRlcm5hbF9ncm91cFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9iai5pY29uID0gdGhpcy5jcmVhdGVfYXRfZ3JvdXAoYmFzZV94LCBiYXNlX3ksIFwiaXRlbXNfaWNvbnNcIiwgdW5kZWZpbmVkLCBrZXlfbmFtZSwgcGFyYW1zLmludGVybmFsX2dyb3VwKTtcblxuICAgICAgICAgICAgaWYgKHBhcmFtcy5icm9rZW4pIHtcbiAgICAgICAgICAgICAgICBvYmouYnJva2VuID0gdGhpcy5jcmVhdGVfYXRfZ3JvdXAoXG4gICAgICAgICAgICAgICAgICAgIGJhc2VfeCxcbiAgICAgICAgICAgICAgICAgICAgYmFzZV95LFxuICAgICAgICAgICAgICAgICAgICBcImJyb2tlblwiLFxuICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmludGVybmFsX2dyb3VwXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXJhbXMuZXF1aXBwZWQpIHtcbiAgICAgICAgICAgICAgICBvYmouZXF1aXBwZWQgPSB0aGlzLmNyZWF0ZV9hdF9ncm91cChcbiAgICAgICAgICAgICAgICAgICAgYmFzZV94ICsgV2luZG93LklURU1fT0JKLkVRVUlQUEVEX1gsXG4gICAgICAgICAgICAgICAgICAgIGJhc2VfeSArIFdpbmRvdy5JVEVNX09CSi5FUVVJUFBFRF9ZLFxuICAgICAgICAgICAgICAgICAgICBcImVxdWlwcGVkXCIsXG4gICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbXMuaW50ZXJuYWxfZ3JvdXBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhcmFtcy5xdWFudGl0eSkge1xuICAgICAgICAgICAgICAgIG9iai5xdWFudGl0eSA9IHRoaXMuZ2FtZS5hZGQuYml0bWFwVGV4dChcbiAgICAgICAgICAgICAgICAgICAgYmFzZV94ICsgV2luZG93LklURU1fT0JKLlFVQU5USVRZX0VORF9YLFxuICAgICAgICAgICAgICAgICAgICBiYXNlX3kgKyBXaW5kb3cuSVRFTV9PQkouUVVBTlRJVFlfWSxcbiAgICAgICAgICAgICAgICAgICAgXCJncy1pdGVtLWJtcC1mb250XCIsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcy5xdWFudGl0eS50b1N0cmluZygpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBvYmoucXVhbnRpdHkueCAtPSBvYmoucXVhbnRpdHkud2lkdGg7XG5cbiAgICAgICAgICAgICAgICBpZiAocGFyYW1zLmludGVybmFsX2dyb3VwKSB0aGlzLmFkZF90b19pbnRlcm5hbF9ncm91cChwYXJhbXMuaW50ZXJuYWxfZ3JvdXAsIG9iai5xdWFudGl0eSk7XG4gICAgICAgICAgICAgICAgZWxzZSB0aGlzLmdyb3VwLmFkZChvYmoucXVhbnRpdHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2JqLmljb24gPSB0aGlzLmNyZWF0ZV9hdF9ncm91cChiYXNlX3gsIGJhc2VfeSwgXCJpdGVtc19pY29uc1wiLCB1bmRlZmluZWQsIGtleV9uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cblxuICAgIG1vdmVfaXRlbV9vYmooaXRlbV9vYmo6IEl0ZW1PYmosIG5ld19wb3M6IHt4OiBudW1iZXI7IHk6IG51bWJlcn0pIHtcbiAgICAgICAgZm9yIChsZXQgb2JqIGluIGl0ZW1fb2JqKSB7XG4gICAgICAgICAgICBpZiAoaXRlbV9vYmpbb2JqXSkge1xuICAgICAgICAgICAgICAgIGl0ZW1fb2JqW29ial0ueCA9IG5ld19wb3MueDtcbiAgICAgICAgICAgICAgICBpdGVtX29ialtvYmpdLnkgPSBuZXdfcG9zLnk7XG5cbiAgICAgICAgICAgICAgICBpZiAob2JqID09PSBcImVxdWlwcGVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbV9vYmpbb2JqXS54ICs9IFdpbmRvdy5JVEVNX09CSi5FUVVJUFBFRF9YO1xuICAgICAgICAgICAgICAgICAgICBpdGVtX29ialtvYmpdLnkgKz0gV2luZG93LklURU1fT0JKLkVRVUlQUEVEX1k7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvYmogPT09IFwicXVhbnRpdHlcIikge1xuICAgICAgICAgICAgICAgICAgICBpdGVtX29ialtvYmpdLnggKz0gV2luZG93LklURU1fT0JKLlFVQU5USVRZX0VORF9YIC0gaXRlbV9vYmpbb2JqXS53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgaXRlbV9vYmpbb2JqXS55ICs9IFdpbmRvdy5JVEVNX09CSi5RVUFOVElUWV9ZO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qUmVtb3ZlcyBleGlzdGluZyBzZXBhcmF0b3IgZ3JhcGhpY3MqL1xuICAgIGNsZWFyX3NlcGFyYXRvcnMoKSB7XG4gICAgICAgIHRoaXMuc2VwYXJhdG9yc19ncmFwaGljcy5jbGVhcigpO1xuICAgIH1cblxuICAgIC8qRHJhd3Mgc2VwYXJhdG9yIGdyYXBoaWNzXG4gICAgVGhlc2UgYXJlIGNyZWF0ZWQgYnkgY2hhbmdpbmcgdGhlIGJyaWdodG5lc3Mgb2YgdGhlIGJhY2tncm91bmQqL1xuICAgIGRyYXdfc2VwYXJhdG9yKHhfMCwgeV8wLCB4XzEsIHlfMSwgdmVydGljYWwgPSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IGxpZ2h0ZXIgPSB1dGlscy5jaGFuZ2VfYnJpZ2h0bmVzcyh0aGlzLmNvbG9yLCAxLjMpO1xuICAgICAgICBjb25zdCBkYXJrZXIgPSB1dGlscy5jaGFuZ2VfYnJpZ2h0bmVzcyh0aGlzLmNvbG9yLCAwLjgpO1xuICAgICAgICBjb25zdCBtZWRpdW0gPSB1dGlscy5jaGFuZ2VfYnJpZ2h0bmVzcyh0aGlzLmNvbG9yLCAwLjkpO1xuICAgICAgICBjb25zdCBjb2xvcnMgPSBbbWVkaXVtLCBkYXJrZXIsIGxpZ2h0ZXJdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbG9ycy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgY29sb3IgPSBjb2xvcnNbaV07XG4gICAgICAgICAgICBjb25zdCBzaGlmdCA9IGkgLSAxO1xuICAgICAgICAgICAgdGhpcy5zZXBhcmF0b3JzX2dyYXBoaWNzLmxpbmVTdHlsZSgxLCBjb2xvcik7XG4gICAgICAgICAgICB0aGlzLnNlcGFyYXRvcnNfZ3JhcGhpY3MubW92ZVRvKHhfMCArIHNoaWZ0ICogK3ZlcnRpY2FsLCB5XzAgKyBzaGlmdCAqICshdmVydGljYWwpO1xuICAgICAgICAgICAgdGhpcy5zZXBhcmF0b3JzX2dyYXBoaWNzLmxpbmVUbyh4XzEgKyBzaGlmdCAqICt2ZXJ0aWNhbCwgeV8xICsgc2hpZnQgKiArIXZlcnRpY2FsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qQ3JlYXRlcyB0aGUgYmFja2dyb3VuZFxuICAgIEZpbGxzIHRoZSB3aW5kb3cncyBzcGFjZSB3aXRoIHRoZSBkZWZhdWx0IHdpbmRvdyBjb2xvciovXG4gICAgZHJhd19iYWNrZ3JvdW5kKCkge1xuICAgICAgICB0aGlzLmdyYXBoaWNzLmJlZ2luRmlsbCh0aGlzLmNvbG9yLCAxKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5kcmF3UmVjdCgyLCAyLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MuZW5kRmlsbCgpO1xuICAgIH1cblxuICAgIC8qRHJhd3MgdGhlIHdpbmRvdyBib3JkZXJzXG4gICAgTGluZXMgYXJlIGRyYXduIHRvIGNyZWF0ZSB0aGUgYm9yZGVycywgaW5jbHVkaW5nIGNvcm5lcnNcbiAgICBcbiAgICBDb2xvcnMgdXNlZDpcbiAgICAweEZGRkZGRiA9IFdoaXRlXG4gICAgMHhBNUE1QTUgPSBHcmF5IChMaWdodGVyKVxuICAgIDB4NTI1MjUyID0gR3JheSAoRGFya2VyKVxuICAgIDB4MTExMTExID0gQmxhY2tcbiAgICAqL1xuICAgIGRyYXdfYm9yZGVycygpIHtcbiAgICAgICAgLy9MZWZ0XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIDB4NTI1MjUyKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8oMCwgMSk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKDAsIHRoaXMuaGVpZ2h0ICsgMSk7XG5cbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lU3R5bGUoMSwgMHhmZmZmZmYpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbygxLCAxKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8oMSwgdGhpcy5oZWlnaHQgKyAxKTtcblxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSgxLCAweGE1YTVhNSk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKDIsIDEpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVUbygyLCB0aGlzLmhlaWdodCk7XG5cbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lU3R5bGUoMSwgMHgxMTExMTEpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbygzLCAzKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8oMywgdGhpcy5oZWlnaHQgLSAxKTtcblxuICAgICAgICAvL1JpZ2h0XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIDB4NTI1MjUyKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8odGhpcy53aWR0aCwgMik7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcblxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSgxLCAweGE1YTVhNSk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKHRoaXMud2lkdGggKyAyLCAxKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8odGhpcy53aWR0aCArIDIsIHRoaXMuaGVpZ2h0ICsgMSk7XG5cbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lU3R5bGUoMSwgMHhmZmZmZmYpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbyh0aGlzLndpZHRoICsgMSwgMSk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKHRoaXMud2lkdGggKyAxLCB0aGlzLmhlaWdodCk7XG5cbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lU3R5bGUoMSwgMHgxMTExMTEpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbyh0aGlzLndpZHRoICsgMywgMSk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKHRoaXMud2lkdGggKyAzLCB0aGlzLmhlaWdodCArIDEpO1xuXG4gICAgICAgIC8vVXBcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lU3R5bGUoMSwgMHg1MjUyNTIpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbygyLCAwKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8odGhpcy53aWR0aCArIDIsIDApO1xuXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIDB4ZmZmZmZmKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8oMiwgMSk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKHRoaXMud2lkdGggKyAyLCAxKTtcblxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSgxLCAweGE1YTVhNSk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKDMsIDIpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVUbyh0aGlzLndpZHRoICsgMSwgMik7XG5cbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lU3R5bGUoMSwgMHgxMTExMTEpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbygzLCAzKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8odGhpcy53aWR0aCwgMyk7XG5cbiAgICAgICAgLy9Eb3duXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIDB4NTI1MjUyKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8oMywgdGhpcy5oZWlnaHQpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVUbyh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG5cbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lU3R5bGUoMSwgMHhmZmZmZmYpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbygyLCB0aGlzLmhlaWdodCArIDEpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVUbyh0aGlzLndpZHRoICsgMiwgdGhpcy5oZWlnaHQgKyAxKTtcblxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSgxLCAweGE1YTVhNSk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKDIsIHRoaXMuaGVpZ2h0ICsgMik7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKHRoaXMud2lkdGggKyAyLCB0aGlzLmhlaWdodCArIDIpO1xuXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIDB4MTExMTExKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8oMiwgdGhpcy5oZWlnaHQgKyAzKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8odGhpcy53aWR0aCArIDIsIHRoaXMuaGVpZ2h0ICsgMyk7XG5cbiAgICAgICAgLy9Db3JuZXJzXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIDB4NTI1MjUyKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8oMSwgMSk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKDIsIDIpO1xuXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIDB4NTI1MjUyKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8oMSwgdGhpcy5oZWlnaHQgKyAyKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8oMiwgdGhpcy5oZWlnaHQgKyAzKTtcblxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSgxLCAweDUyNTI1Mik7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKHRoaXMud2lkdGggKyAyLCB0aGlzLmhlaWdodCArIDIpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVUbyh0aGlzLndpZHRoICsgMywgdGhpcy5oZWlnaHQgKyAzKTtcblxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSgxLCAweDUyNTI1Mik7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKHRoaXMud2lkdGggKyAyLCAxKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8odGhpcy53aWR0aCArIDMsIDIpO1xuXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIDB4MTExMTExKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8oNCwgNCk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKDUsIDUpO1xuXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIDB4NTI1MjUyKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8oMywgMyk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKDQsIDQpO1xuXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIDB4NTI1MjUyKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8odGhpcy53aWR0aCAtIDEsIHRoaXMuaGVpZ2h0IC0gMSk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcblxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSgxLCAweDExMTExMSk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKHRoaXMud2lkdGggLSAxLCA0KTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8odGhpcy53aWR0aCwgNSk7XG5cbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lU3R5bGUoMSwgMHgxMTExMTEpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbyg0LCB0aGlzLmhlaWdodCAtIDEpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVUbyg1LCB0aGlzLmhlaWdodCk7XG4gICAgfVxuXG4gICAgLypDaGFuZ2VzIHRoZSB3aW5kb3cncyBzaXplIGFuZCByZWRyYXdzIGl0XG5cbiAgICBJbnB1dDogbmV3X3NpemUgW29iamVjdF0gLSBDb250YWlucyB0aGUgd2lkdGggYW5kIGhlaWdodCBwYXJhbWV0ZXJzXG4gICAgICAgICAgICAgICAgd2lkdGggW251bWJlcl0gLSBUaGUgbmV3IHdpZHRoXG4gICAgICAgICAgICAgICAgaGVpZ2h0IFtudW1iZXJdIC0gVGhlIG5ldyBoZWlnaHQqL1xuICAgIHVwZGF0ZV9zaXplKG5ld19zaXplKSB7XG4gICAgICAgIGlmIChuZXdfc2l6ZS53aWR0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLndpZHRoID0gbmV3X3NpemUud2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5ld19zaXplLmhlaWdodCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IG5ld19zaXplLmhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdyYXBoaWNzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuZHJhd19iYWNrZ3JvdW5kKCk7XG4gICAgICAgIHRoaXMuZHJhd19ib3JkZXJzKCk7XG4gICAgfVxuXG4gICAgLypDaGFuZ2VzIHRoZSB3aW5kb3cncyBwb3NpdGlvblxuXG4gICAgSW5wdXQ6IG5ld19wb3NpdGlvbiBbYXJyYXldIC0gQ29udGFpbnMgdGhlIHBvc2l0aW9uJ3MgcGFyYW1ldGVyc1xuICAgICAgICAgICAgICAgIHggW251bWJlcl0gLSBUaGUgbmV3IHggdmFsdWVcbiAgICAgICAgICAgICAgICB4IFtudW1iZXJdIC0gVGhlIG5ldyB5IHZhbHVlXG4gICAgICAgICAgIHJlbGF0aXZlIFtib29sZWFuXSAtIElmIHRydWUsIG1vdmVzIHRoZSB3aW5kb3cgYnkgdGhlIHggYW5kIHkgb2Zmc2V0IHZhbHVlcyovXG4gICAgdXBkYXRlX3Bvc2l0aW9uKG5ld19wb3NpdGlvbiwgcmVsYXRpdmUgPSB0cnVlKSB7XG4gICAgICAgIGlmIChuZXdfcG9zaXRpb24ueCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnggPSBuZXdfcG9zaXRpb24ueDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV3X3Bvc2l0aW9uLnkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy55ID0gbmV3X3Bvc2l0aW9uLnk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ncm91cC54ID0gKHJlbGF0aXZlID8gdGhpcy5nYW1lLmNhbWVyYS54IDogMCkgKyB0aGlzLng7XG4gICAgICAgIHRoaXMuZ3JvdXAueSA9IChyZWxhdGl2ZSA/IHRoaXMuZ2FtZS5jYW1lcmEueSA6IDApICsgdGhpcy55O1xuICAgIH1cblxuICAgIC8qQ3JlYXRlcyBhbiBpbnRlcm5hbCBncm91cFxuICAgIFRoaXMgaXMgdXNlZCB0byBhdHRhY2ggb3RoZXIgc3ByaXRlIGdyb3VwcyB0byB0aGUgd2luZG93XG4gICAgXG4gICAgSW5wdXQ6IGtleSBbc3RyaW5nXSAtIFRoZSBncm91cCdzIGtleVxuICAgICAgICAgICBwb3NpdGlvbiBbYXJyYXldIC0gQ29udGFpbnMgdGhlIG5ldyBncm91cCdzIHggYW5kIHkgKE9wdGlvbmFsKVxuICAgICAgICAgICAgICAgIHggW251bWJlcl0gLSBUaGUgbmV3IGdyb3VwJ3MgeFxuICAgICAgICAgICAgICAgIHkgW251bWJlcl0gLSBUaGUgbmV3IGdyb3VwJ3MgeVxuICAgIFxuICAgIE91dHB1dDogW1BoYXNlcjpHcm91cF0qL1xuICAgIGRlZmluZV9pbnRlcm5hbF9ncm91cChrZXksIHBvc2l0aW9uOiB7eD86IG51bWJlcjsgeT86IG51bWJlcn0gPSB7fSkge1xuICAgICAgICBsZXQgaW50ZXJuYWxfZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XG4gICAgICAgIHRoaXMuZGVzdHJveV9pbnRlcm5hbF9ncm91cChrZXkpO1xuICAgICAgICB0aGlzLmludGVybmFsX2dyb3Vwc1trZXldID0gaW50ZXJuYWxfZ3JvdXA7XG4gICAgICAgIGlmIChwb3NpdGlvbi54ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGludGVybmFsX2dyb3VwLnggPSBwb3NpdGlvbi54O1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbi55ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGludGVybmFsX2dyb3VwLnkgPSBwb3NpdGlvbi55O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZ3JvdXAuYWRkKGludGVybmFsX2dyb3VwKTtcbiAgICAgICAgcmV0dXJuIGludGVybmFsX2dyb3VwO1xuICAgIH1cblxuICAgIC8qUmV0dXJucyB0aGUgY2hvc2VuIGludGVybmFsIGdyb3VwXG5cbiAgICBJbnB1dDoga2V5IFtzdHJpbmddIC0gVGhlIGdyb3VwJ3Mga2V5XG4gICAgXG4gICAgT3V0cHV0OiBbUGhhc2VyOkdyb3VwXSovXG4gICAgZ2V0X2ludGVybmFsX2dyb3VwKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbF9ncm91cHNba2V5XTtcbiAgICB9XG5cbiAgICAvKkFkZHMgYSBzcHJpdGUgdG8gYW4gaW50ZXJuYWwgZ3JvdXBcblxuICAgIElucHV0OiBrZXkgW3N0cmluZ10gLSBUaGUgZ3JvdXAncyBrZXlcbiAgICAgICAgICAgc3ByaXRlIFtQaGFzZXI6U3ByaXRlXSAtIFRoZSBzcHJpdGUgdG8gYWRkXG4gICAgICAgICAgIFxuICAgIE91dHB1dDogW2Jvb2xlYW5dIC0gVHJ1ZSBpZiB0aGUgZ3JvdXAgZXhpc3RzLCBmYWxzZSBvdGhlcndpc2UqL1xuICAgIGFkZF90b19pbnRlcm5hbF9ncm91cChrZXksIHNwcml0ZSkge1xuICAgICAgICBpZiAoa2V5IGluIHRoaXMuaW50ZXJuYWxfZ3JvdXBzKSB7XG4gICAgICAgICAgICB0aGlzLmludGVybmFsX2dyb3Vwc1trZXldLmFkZChzcHJpdGUpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qRGVzdHJveXMgYW4gaW50ZXJuYWwgZ3JvdXAgYW5kIGl0cyBlbGVtZW50c1xuICAgIFxuICAgIElucHV0OiBrZXkgW3N0cmluZ10gLSBUaGUgZ3JvdXAncyBrZXlzKi9cbiAgICBkZXN0cm95X2ludGVybmFsX2dyb3VwKGtleSkge1xuICAgICAgICBpZiAoa2V5IGluIHRoaXMuaW50ZXJuYWxfZ3JvdXBzICYmIHRoaXMuaW50ZXJuYWxfZ3JvdXBzW2tleV0pIHtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJuYWxfZ3JvdXBzW2tleV0uZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypEaXNwbGF5cyB0aGlzIHdpbmRvd1xuXG4gICAgSW5wdXQ6IHNob3dfY2FsbGJhY2sgW2Z1bmN0aW9uXSAtIENhbGxiYWNrIGZ1bmN0aW9uIChPcHRpb25hbClcbiAgICAgICAgICAgYW5pbWF0ZSBbYm9vbGVhbl0gLSBJZiB0cnVlLCBwbGF5cyBhbiBhbmltYXRpb25cbiAgICAgICAgICAgY2xvc2VfY2FsbGJhY2sgW2Z1bmN0aW9uXSAtIENhbGxiYWNrIGZ1bmN0aW9uIChPcHRpb25hbCkqL1xuICAgIHNob3coc2hvd19jYWxsYmFjaz8sIGFuaW1hdGUgPSB0cnVlLCBjbG9zZV9jYWxsYmFjayA9IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMTtcbiAgICAgICAgdGhpcy5ncm91cC54ID0gdGhpcy5nYW1lLmNhbWVyYS54ICsgdGhpcy54O1xuICAgICAgICB0aGlzLmdyb3VwLnkgPSB0aGlzLmdhbWUuY2FtZXJhLnkgKyB0aGlzLnk7XG5cbiAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayA9IGNsb3NlX2NhbGxiYWNrO1xuXG4gICAgICAgIGlmIChhbmltYXRlKSB7XG4gICAgICAgICAgICB0aGlzLmdhbWUuYWRkXG4gICAgICAgICAgICAgICAgLnR3ZWVuKHRoaXMuZ3JvdXApXG4gICAgICAgICAgICAgICAgLnRvKFxuICAgICAgICAgICAgICAgICAgICB7d2lkdGg6IHRoaXMuZ3JhcGhpY3Mud2lkdGgsIGhlaWdodDogdGhpcy5ncmFwaGljcy5oZWlnaHR9LFxuICAgICAgICAgICAgICAgICAgICBXaW5kb3cuVFJBTlNJVElPTl9USU1FLFxuICAgICAgICAgICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLFxuICAgICAgICAgICAgICAgICAgICB0cnVlXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIC5vbkNvbXBsZXRlLmFkZE9uY2UoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2hvd19jYWxsYmFjayAhPT0gdW5kZWZpbmVkKSBzaG93X2NhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm9wZW4gPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5ncm91cC53aWR0aCA9IHRoaXMuZ3JhcGhpY3Mud2lkdGg7XG4gICAgICAgICAgICB0aGlzLmdyb3VwLmhlaWdodCA9IHRoaXMuZ3JhcGhpY3MuaGVpZ2h0O1xuICAgICAgICAgICAgaWYgKHNob3dfY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkgc2hvd19jYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypVcGRhdGVzIHRoZSB3aW5kb3cgcG9zaXRpb24gaWYgbmVjZXNzYXJ5XG4gICAgXG4gICAgSW5wdXQ6IGZvcmNlIFtib29sZWFuXSAtIElmIHRydWUsIGZvcmNlcyBhbiB1cGRhdGUqL1xuICAgIHVwZGF0ZShmb3JjZSA9IGZhbHNlKSB7XG4gICAgICAgIGlmICh0aGlzLm5lZWRfcG9zX3VwZGF0ZSB8fCBmb3JjZSkge1xuICAgICAgICAgICAgdGhpcy5ncm91cC54ID0gdGhpcy5nYW1lLmNhbWVyYS54ICsgdGhpcy54O1xuICAgICAgICAgICAgdGhpcy5ncm91cC55ID0gdGhpcy5nYW1lLmNhbWVyYS55ICsgdGhpcy55O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypBZGRzIGEgc3ByaXRlIHRvIHRoZSBncm91cFxuICAgIFxuICAgIElucHV0OiBzcHJpdGUgW1BoYXNlcjpTcHJpdGVdIC0gVGhlIHNwcml0ZSB0byBiZSBhZGRlZCovXG4gICAgYWRkX3Nwcml0ZV90b19ncm91cChzcHJpdGUsIGludGVybmFsX2dyb3VwX2tleT8pIHtcbiAgICAgICAgbGV0IGdyb3VwID0gdGhpcy5ncm91cDtcbiAgICAgICAgaWYgKGludGVybmFsX2dyb3VwX2tleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCBpbnRlcm5hbF9ncm91cCA9IHRoaXMuZ2V0X2ludGVybmFsX2dyb3VwKGludGVybmFsX2dyb3VwX2tleSk7XG4gICAgICAgICAgICBpZiAoaW50ZXJuYWxfZ3JvdXApIHtcbiAgICAgICAgICAgICAgICBncm91cCA9IGludGVybmFsX2dyb3VwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGdyb3VwLmFkZChzcHJpdGUpO1xuICAgICAgICB0aGlzLmV4dHJhX3Nwcml0ZXMucHVzaChzcHJpdGUpO1xuICAgIH1cblxuICAgIC8qQ3JlYXRlcyBhIG5ldyBzcHJpdGUgYXQgdGhlIGdyb3VwXG4gICAgXG4gICAgSW5wdXQ6IHgsIHkgW251bWJlcl0gPSBUaGUgc3ByaXRlJ3MgcG9zaXRpb25cbiAgICAgICAgICAga2V5IFtzdHJpbmddID0gVGhlIGtleSBmb3IgdGhlIHNwcml0ZVxuICAgICAgICAgICBjb2xvciBbbnVtYmVyXSA9IFRoZSBjb2xvciBwYWxldHRlIHRvIGJlIHVzZWRcbiAgICAgICAgICAgZnJhbWUgW3N0cmluZ3xudW1iZXJdID0gVGhlIGZyYW1lIHZhbHVlIChzcHJpdGVzaGVldHMgb25seSkqL1xuICAgIGNyZWF0ZV9hdF9ncm91cCh4LCB5LCBrZXksIGNvbG9yPywgZnJhbWU/LCBpbnRlcm5hbF9ncm91cF9rZXk/KSB7XG4gICAgICAgIGxldCBncm91cCA9IHRoaXMuZ3JvdXA7XG4gICAgICAgIGlmIChpbnRlcm5hbF9ncm91cF9rZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgaW50ZXJuYWxfZ3JvdXAgPSB0aGlzLmdldF9pbnRlcm5hbF9ncm91cChpbnRlcm5hbF9ncm91cF9rZXkpO1xuICAgICAgICAgICAgaWYgKGludGVybmFsX2dyb3VwKSB7XG4gICAgICAgICAgICAgICAgZ3JvdXAgPSBpbnRlcm5hbF9ncm91cDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgc3ByaXRlID0gZ3JvdXAuY3JlYXRlKHgsIHksIGtleSwgZnJhbWUpO1xuICAgICAgICBpZiAoY29sb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc3ByaXRlLnRpbnQgPSBjb2xvcjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmV4dHJhX3Nwcml0ZXMucHVzaChzcHJpdGUpO1xuICAgICAgICByZXR1cm4gc3ByaXRlO1xuICAgIH1cblxuICAgIC8qU2VuZHMgdGhpcyB3aW5kb3cgdG8gdGhlIGZyb250IG9mIHRoZSBzY3JlZW4qL1xuICAgIHNlbmRfdG9fZnJvbnQoKSB7XG4gICAgICAgICh0aGlzLmdyb3VwLnBhcmVudCBhcyBQaGFzZXIuR3JvdXApLmJyaW5nVG9Ub3AodGhpcy5ncm91cCk7XG4gICAgfVxuXG4gICAgLypSZW1vdmVzIGEgc3ByaXRlIGZyb20gdGhlIGdyb3VwXG4gICAgXG4gICAgSW5wdXQ6IHNwcml0ZSBbUGhhc2VyOlNwcml0ZV0gLSBUaGUgc3ByaXRlIHRvIGJlIHJlbW92ZWRcbiAgICAgICAgICAgZGVzdHJveSBbYm9vbGVhbl0gLSBJZiB0cnVlLCB0aGUgc3ByaXRlIGlzIGRlc3Ryb3llZCovXG4gICAgcmVtb3ZlX2Zyb21fZ3JvdXAoc3ByaXRlPywgZGVzdHJveSA9IHRydWUpIHtcbiAgICAgICAgaWYgKHNwcml0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmdyb3VwLnJlbW92ZShzcHJpdGUsIGRlc3Ryb3kpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmV4dHJhX3Nwcml0ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdyb3VwLnJlbW92ZSh0aGlzLmV4dHJhX3Nwcml0ZXNbaV0sIGRlc3Ryb3kpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypSZW1vdmVzIHNtb290aGluZyBlZmZlY3QgZnJvbSBhIHRleHQgc3ByaXRlXG5cbiAgICBJbnB1dDogdGV4dF9zcHJpdGUgW1BoYXNlcjpTcHJpdGVdIC0gVGV4dCBzcHJpdGUgdG8gcmVtb3ZlIHRoZSBlZmZlY3QgZnJvbSovXG4gICAgcmVtb3ZlX3Ntb290aCh0ZXh0X3Nwcml0ZSkge1xuICAgICAgICB0ZXh0X3Nwcml0ZS5zbW9vdGhlZCA9IGZhbHNlO1xuICAgICAgICB0ZXh0X3Nwcml0ZS5hdXRvUm91bmQgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qQ3JlYXRlcyBhIHNwcml0ZSB0byByZXByZXNlbnQgdGhlIGdpdmVuIGxpbmVzIG9mIHRleHRcblxuICAgIElucHV0OiBsaW5lcyBbYXJyYXldIC0gVGhlIHRleHQgbGluZXMgKGFycmF5IG9mIHN0cmluZylcbiAgICAgICAgICAgcGFkZGluZ194IFtudW1iZXJdIC0gUGFkZGluZyBvbiB0aGUgeCBheGlzXG4gICAgICAgICAgIHBhZGRpbmdfeSBbbnVtYmVyXSAtIFBhZGRpbmcgb24gdGhlIHkgYXhpc1xuICAgICAgICAgICBzcGFjZV9iZXd0ZWVuIGxpbmVzIFtudW1iZXJdIC0gT2Zmc2V0IGJldHdlZW4gbGluZXMqL1xuICAgIHNldF90ZXh0KGxpbmVzLCBwYWRkaW5nX3g/LCBwYWRkaW5nX3k/LCBzcGFjZV9iZXR3ZWVuX2xpbmVzPywgaXRhbGljID0gZmFsc2UsIGFuaW1hdGUgPSBmYWxzZSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGluZXNfc3ByaXRlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdGhpcy5saW5lc19zcHJpdGVzW2ldLnRleHQuZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5saW5lc19zcHJpdGVzW2ldLnNoYWRvdy5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5saW5lc19zcHJpdGVzID0gW107XG4gICAgICAgIGNvbnN0IHRvcF9zaGlmdCA9IGl0YWxpYyA/IC0yIDogMDtcbiAgICAgICAgY29uc3QgeF9wb3MgPSBwYWRkaW5nX3ggPT09IHVuZGVmaW5lZCA/IG51bWJlcnMuV0lORE9XX1BBRERJTkdfSCArIDQgOiBwYWRkaW5nX3g7XG4gICAgICAgIGxldCB5X3BvcyA9IHBhZGRpbmdfeSA9PT0gdW5kZWZpbmVkID8gbnVtYmVycy5XSU5ET1dfUEFERElOR19UT1AgKyB0b3Bfc2hpZnQgOiBwYWRkaW5nX3k7XG4gICAgICAgIGNvbnN0IGZvbnRfbmFtZSA9IGl0YWxpYyA/IFwiZ3MtaXRhbGljLWJtcC1mb250XCIgOiBcImdzLWJtcC1mb250XCI7XG5cbiAgICAgICAgbGV0IGxpbmVzX3Byb21pc2VzID0gW107XG4gICAgICAgIGxldCBhbmltX3Byb21pc2U7XG4gICAgICAgIGxldCBhbmltX3Byb21pc2VfcmVzb2x2ZTtcbiAgICAgICAgaWYgKGFuaW1hdGUpIHtcbiAgICAgICAgICAgIGFuaW1fcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gKGFuaW1fcHJvbWlzZV9yZXNvbHZlID0gcmVzb2x2ZSkpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGxldCBsaW5lID0gbGluZXNbaV07XG4gICAgICAgICAgICBsZXQgdGV4dF9zcHJpdGUgPSB0aGlzLmdhbWUuYWRkLmJpdG1hcFRleHQoeF9wb3MsIHlfcG9zLCBmb250X25hbWUsIGFuaW1hdGUgPyBcIlwiIDogbGluZSwgbnVtYmVycy5GT05UX1NJWkUpO1xuICAgICAgICAgICAgbGV0IHRleHRfc3ByaXRlX3NoYWRvdyA9IHRoaXMuZ2FtZS5hZGQuYml0bWFwVGV4dChcbiAgICAgICAgICAgICAgICB4X3BvcyArIDEsXG4gICAgICAgICAgICAgICAgeV9wb3MgKyAxLFxuICAgICAgICAgICAgICAgIGZvbnRfbmFtZSxcbiAgICAgICAgICAgICAgICBhbmltYXRlID8gXCJcIiA6IGxpbmUsXG4gICAgICAgICAgICAgICAgbnVtYmVycy5GT05UX1NJWkVcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHlfcG9zICs9XG4gICAgICAgICAgICAgICAgbnVtYmVycy5GT05UX1NJWkUgK1xuICAgICAgICAgICAgICAgIChzcGFjZV9iZXR3ZWVuX2xpbmVzID09PSB1bmRlZmluZWQgPyBudW1iZXJzLlNQQUNFX0JFVFdFRU5fTElORVMgOiBzcGFjZV9iZXR3ZWVuX2xpbmVzKTtcblxuICAgICAgICAgICAgdGhpcy5yZW1vdmVfc21vb3RoKHRleHRfc3ByaXRlKTtcbiAgICAgICAgICAgIHRleHRfc3ByaXRlLnRpbnQgPSB0aGlzLmZvbnRfY29sb3I7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZV9zbW9vdGgodGV4dF9zcHJpdGVfc2hhZG93KTtcbiAgICAgICAgICAgIHRleHRfc3ByaXRlX3NoYWRvdy50aW50ID0gMHgwO1xuXG4gICAgICAgICAgICBpZiAoYW5pbWF0ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHdvcmRzID0gbGluZS5zcGxpdChcIiBcIik7XG4gICAgICAgICAgICAgICAgbGV0IHdvcmRzX2luZGV4ID0gMDtcbiAgICAgICAgICAgICAgICBsZXQgbGluZV9wcm9taXNlX3Jlc29sdmU7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVwZWF0ZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5yZXBlYXQoMjUsIHdvcmRzLmxlbmd0aCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dF9zcHJpdGUudGV4dCArPSB3b3Jkc1t3b3Jkc19pbmRleF0gKyBcIiBcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRfc3ByaXRlX3NoYWRvdy50ZXh0ICs9IHdvcmRzW3dvcmRzX2luZGV4XSArIFwiIFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgKyt3b3Jkc19pbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3b3Jkc19pbmRleCA9PT0gd29yZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZV9wcm9taXNlX3Jlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoIWxpbmVzX3Byb21pc2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXBlYXRlcigpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmVzX3Byb21pc2VzLnBvcCgpLnRoZW4ocmVwZWF0ZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsaW5lc19wcm9taXNlcy5wdXNoKG5ldyBQcm9taXNlKHJlc29sdmUgPT4gKGxpbmVfcHJvbWlzZV9yZXNvbHZlID0gcmVzb2x2ZSkpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5ncm91cC5hZGQodGV4dF9zcHJpdGVfc2hhZG93KTtcbiAgICAgICAgICAgIHRoaXMuZ3JvdXAuYWRkKHRleHRfc3ByaXRlKTtcbiAgICAgICAgICAgIHRoaXMubGluZXNfc3ByaXRlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICB0ZXh0OiB0ZXh0X3Nwcml0ZSxcbiAgICAgICAgICAgICAgICBzaGFkb3c6IHRleHRfc3ByaXRlX3NoYWRvdyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgUHJvbWlzZS5hbGwobGluZXNfcHJvbWlzZXMpLnRoZW4oYW5pbV9wcm9taXNlX3Jlc29sdmUpO1xuICAgICAgICByZXR1cm4gYW5pbV9wcm9taXNlO1xuICAgIH1cblxuICAgIC8qQ3JlYXRlcyBhIHNwcml0ZSB0byByZXByZXNlbnQgdGhlIGdpdmVuIHRleHRcbiAgICBUaGlzIHRleHQgaXMgYWxpZ25lZCB0byB0aGUgbGVmdCBieSBkZWZhdWx0XG5cbiAgICBJbnB1dDogdGV4dCBbc3RyaW5nXSAtIFRoZSB0ZXh0IHRvIGRpc3BsYXlcbiAgICAgICAgICAgcmlnaHRfYWxpZ24gLSBJZiB0cnVlLCBhbGlnbiB0aGUgdGV4dCB0byB0aGUgcmlnaHQgaW5zdGVhZFxuICAgICAgICAgICBcbiAgICBPdXRwdXQ6IHRleHQgW1BoYXNlcjpTcHJpdGVdIC0gVGhlIHRleHQgc3ByaXRlXG4gICAgICAgICAgICBzaGFkb3cgW1BoYXNlcjpTcHJpdGVdIC0gVGhlIHRleHQncyBzaGFkb3dcbiAgICAgICAgICAgIHJpZ2h0X2FsaWduIFtib29sZWFuXSAtIFRoZSBpbnB1dCB2YWx1ZVxuICAgICAgICAgICAgaW5pdGlhbF94IFtudW1iZXJdIC0gVGhlIHRleHQncyB4IHZhbHVlKi9cbiAgICBzZXRfc2luZ2xlX2xpbmVfdGV4dCh0ZXh0LCByaWdodF9hbGlnbiA9IGZhbHNlLCBpdGFsaWMgPSBmYWxzZSk6IFRleHRPYmoge1xuICAgICAgICBjb25zdCB4X3BvcyA9IGl0YWxpYyA/IG51bWJlcnMuV0lORE9XX1BBRERJTkdfSCArIDIgOiBudW1iZXJzLldJTkRPV19QQURESU5HX0ggKyA0O1xuICAgICAgICBsZXQgeV9wb3MgPSBpdGFsaWMgPyBudW1iZXJzLldJTkRPV19QQURESU5HX1RPUCAtIDIgOiBudW1iZXJzLldJTkRPV19QQURESU5HX1RPUDtcbiAgICAgICAgY29uc3QgZm9udF9uYW1lID0gaXRhbGljID8gXCJncy1pdGFsaWMtYm1wLWZvbnRcIiA6IFwiZ3MtYm1wLWZvbnRcIjtcbiAgICAgICAgbGV0IHRleHRfc3ByaXRlID0gdGhpcy5nYW1lLmFkZC5iaXRtYXBUZXh0KHhfcG9zLCB5X3BvcywgZm9udF9uYW1lLCB0ZXh0LCBudW1iZXJzLkZPTlRfU0laRSk7XG4gICAgICAgIGxldCB0ZXh0X3Nwcml0ZV9zaGFkb3cgPSB0aGlzLmdhbWUuYWRkLmJpdG1hcFRleHQoeF9wb3MgKyAxLCB5X3BvcyArIDEsIGZvbnRfbmFtZSwgdGV4dCwgbnVtYmVycy5GT05UX1NJWkUpO1xuICAgICAgICBpZiAocmlnaHRfYWxpZ24pIHtcbiAgICAgICAgICAgIHRleHRfc3ByaXRlLnggLT0gdGV4dF9zcHJpdGUud2lkdGg7XG4gICAgICAgICAgICB0ZXh0X3Nwcml0ZV9zaGFkb3cueCAtPSB0ZXh0X3Nwcml0ZV9zaGFkb3cud2lkdGg7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlbW92ZV9zbW9vdGgodGV4dF9zcHJpdGUpO1xuICAgICAgICB0ZXh0X3Nwcml0ZS50aW50ID0gdGhpcy5mb250X2NvbG9yO1xuICAgICAgICB0aGlzLnJlbW92ZV9zbW9vdGgodGV4dF9zcHJpdGVfc2hhZG93KTtcbiAgICAgICAgdGV4dF9zcHJpdGVfc2hhZG93LnRpbnQgPSAweDA7XG5cbiAgICAgICAgdGhpcy5ncm91cC5hZGQodGV4dF9zcHJpdGVfc2hhZG93KTtcbiAgICAgICAgdGhpcy5ncm91cC5hZGQodGV4dF9zcHJpdGUpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0ZXh0OiB0ZXh0X3Nwcml0ZSxcbiAgICAgICAgICAgIHNoYWRvdzogdGV4dF9zcHJpdGVfc2hhZG93LFxuICAgICAgICAgICAgcmlnaHRfYWxpZ246IHJpZ2h0X2FsaWduLFxuICAgICAgICAgICAgaW5pdGlhbF94OiB4X3BvcyxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKkNyZWF0ZXMgYSBzcHJpdGUgdG8gcmVwcmVzZW50IGEgc2luZ2xlIGxpbmUgb2YgdGV4dCBhdCBhIGdpdmVuIGxvY2F0aW9uXG5cbiAgICBJbnB1dDogdGV4dCBbc3RyaW5nXSAtIFRoZSB0ZXh0IHRvIGRpc3BsYXlcbiAgICAgICAgICAgeF9wb3MsIHlfcG9zIFtudW1iZXJdIC0gVGhlIGRlc2lyZWQgcG9zaXRpb24ncyB4IGFuZCB5XG4gICAgICAgICAgIHJpZ2h0X2FsaWduIFtib29sZWFuXSAtIElmIHRydWUsIHRoZSB0ZXh0IHdpbGwgYmUgcmlnaHQtYWxpZ25lZFxuICAgICAgICAgICBpc19jZW50ZXJfcG9zIFtib29sZWFuXSAtIElmIHRydWUsIHRoZSB0ZXh0IHdpbGwgYmUgY2VudGVyZWRcbiAgICAgICAgICAgY29sb3IgW251bWJlcl0gLSBUaGUgdGV4dCdzIGRlc2lyZWQgY29sb3JcbiAgICAgICAgICAgd2l0aF9iZyBbYm9vbGVhbl0gLSBJZiB0cnVlLCBnaXZlcyB0aGUgdGV4dCBhIGJhY2tncm91bmRcbiAgICAgICAgICAgaW50ZXJuYWxfZ3JvdXBfa2V5IFtzdHJpbmddIC0gSWYgdGhpcyBleGlzdHMsIHRoZSB0ZXh0IHdpbGwgYmVsb25nIHRvIHRoYXQgZ3JvdXBcblxuICAgIE91dHB1dDogdGV4dCBbUGhhc2VyOlNwcml0ZV0gLSBUaGUgdGV4dCBzcHJpdGVcbiAgICAgICAgICAgIHNoYWRvdyBbUGhhc2VyOlNwcml0ZV0gLSBUaGUgdGV4dCdzIHNoYWRvd1xuICAgICAgICAgICAgcmlnaHRfYWxpZ24gW2Jvb2xlYW5dIC0gVGhlIGlucHV0IHZhbHVlXG4gICAgICAgICAgICBpbml0aWFsX3ggW251bWJlcl0gLSBUaGUgdGV4dCdzIHggdmFsdWVcbiAgICAgICAgICAgIHRleHRfYmcgW1BoYXNlcjpTcHJpdGVdIC0gVGhlIHRleHQncyBiYWNrZ3JvdW5kKi9cbiAgICBzZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgdGV4dCxcbiAgICAgICAgeF9wb3MsXG4gICAgICAgIHlfcG9zLFxuICAgICAgICByaWdodF9hbGlnbiA9IGZhbHNlLFxuICAgICAgICBpc19jZW50ZXJfcG9zID0gZmFsc2UsXG4gICAgICAgIGNvbG9yID0gdGhpcy5mb250X2NvbG9yLFxuICAgICAgICB3aXRoX2JnID0gZmFsc2UsXG4gICAgICAgIGludGVybmFsX2dyb3VwX2tleSA9IHVuZGVmaW5lZCxcbiAgICAgICAgaXRhbGljID0gZmFsc2VcbiAgICApOiBUZXh0T2JqIHtcbiAgICAgICAgY29uc3QgZm9udF9uYW1lID0gaXRhbGljID8gXCJncy1pdGFsaWMtYm1wLWZvbnRcIiA6IFwiZ3MtYm1wLWZvbnRcIjtcbiAgICAgICAgbGV0IHRleHRfc3ByaXRlID0gdGhpcy5nYW1lLmFkZC5iaXRtYXBUZXh0KHhfcG9zLCB5X3BvcywgZm9udF9uYW1lLCB0ZXh0LCBudW1iZXJzLkZPTlRfU0laRSk7XG4gICAgICAgIGxldCB0ZXh0X3Nwcml0ZV9zaGFkb3cgPSB0aGlzLmdhbWUuYWRkLmJpdG1hcFRleHQoeF9wb3MgKyAxLCB5X3BvcyArIDEsIGZvbnRfbmFtZSwgdGV4dCwgbnVtYmVycy5GT05UX1NJWkUpO1xuICAgICAgICBpZiAoaXNfY2VudGVyX3Bvcykge1xuICAgICAgICAgICAgdGV4dF9zcHJpdGUuY2VudGVyWCA9IHhfcG9zO1xuICAgICAgICAgICAgdGV4dF9zcHJpdGUuY2VudGVyWSA9IHlfcG9zO1xuICAgICAgICAgICAgdGV4dF9zcHJpdGVfc2hhZG93LmNlbnRlclggPSB4X3BvcyArIDE7XG4gICAgICAgICAgICB0ZXh0X3Nwcml0ZV9zaGFkb3cuY2VudGVyWSA9IHlfcG9zICsgMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmlnaHRfYWxpZ24pIHtcbiAgICAgICAgICAgIHRleHRfc3ByaXRlLnggLT0gdGV4dF9zcHJpdGUud2lkdGg7XG4gICAgICAgICAgICB0ZXh0X3Nwcml0ZV9zaGFkb3cueCAtPSB0ZXh0X3Nwcml0ZV9zaGFkb3cud2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRleHRfYmc7XG4gICAgICAgIGlmICh3aXRoX2JnKSB7XG4gICAgICAgICAgICB0ZXh0X2JnID0gdGhpcy5nYW1lLmFkZC5ncmFwaGljcyh0ZXh0X3Nwcml0ZS54IC0gMSwgdGV4dF9zcHJpdGUueSk7XG4gICAgICAgICAgICB0ZXh0X2JnLmJlZ2luRmlsbCh0aGlzLmNvbG9yLCAxKTtcbiAgICAgICAgICAgIHRleHRfYmcuZHJhd1JlY3QoMCwgMCwgdGV4dF9zcHJpdGUud2lkdGggKyAzLCBudW1iZXJzLkZPTlRfU0laRSk7XG4gICAgICAgICAgICB0ZXh0X2JnLmVuZEZpbGwoKTtcbiAgICAgICAgICAgIGlmIChpbnRlcm5hbF9ncm91cF9rZXkgPT09IHVuZGVmaW5lZCB8fCAhdGhpcy5hZGRfdG9faW50ZXJuYWxfZ3JvdXAoaW50ZXJuYWxfZ3JvdXBfa2V5LCB0ZXh0X2JnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ3JvdXAuYWRkKHRleHRfYmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZW1vdmVfc21vb3RoKHRleHRfc3ByaXRlKTtcbiAgICAgICAgdGV4dF9zcHJpdGUudGludCA9IGNvbG9yO1xuICAgICAgICB0aGlzLnJlbW92ZV9zbW9vdGgodGV4dF9zcHJpdGVfc2hhZG93KTtcbiAgICAgICAgdGV4dF9zcHJpdGVfc2hhZG93LnRpbnQgPSAweDA7XG5cbiAgICAgICAgbGV0IGFkZGVkX3RvX2ludGVybmFsID0gZmFsc2U7XG4gICAgICAgIGlmIChpbnRlcm5hbF9ncm91cF9rZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgYWRkZWRfdG9faW50ZXJuYWwgPVxuICAgICAgICAgICAgICAgIHRoaXMuYWRkX3RvX2ludGVybmFsX2dyb3VwKGludGVybmFsX2dyb3VwX2tleSwgdGV4dF9zcHJpdGVfc2hhZG93KSAmJlxuICAgICAgICAgICAgICAgIHRoaXMuYWRkX3RvX2ludGVybmFsX2dyb3VwKGludGVybmFsX2dyb3VwX2tleSwgdGV4dF9zcHJpdGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYWRkZWRfdG9faW50ZXJuYWwpIHtcbiAgICAgICAgICAgIHRoaXMuZ3JvdXAuYWRkKHRleHRfc3ByaXRlX3NoYWRvdyk7XG4gICAgICAgICAgICB0aGlzLmdyb3VwLmFkZCh0ZXh0X3Nwcml0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGV4dDogdGV4dF9zcHJpdGUsXG4gICAgICAgICAgICBzaGFkb3c6IHRleHRfc3ByaXRlX3NoYWRvdyxcbiAgICAgICAgICAgIHJpZ2h0X2FsaWduOiByaWdodF9hbGlnbixcbiAgICAgICAgICAgIGluaXRpYWxfeDogeF9wb3MsXG4gICAgICAgICAgICB0ZXh0X2JnOiB0ZXh0X2JnLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qQ2hhbmdlcyB0aGUgdGV4dCBhbmQgcmVwb3NpdGlvbnMgaXRcblxuICAgIElucHV0OiBuZXdfdGV4dCBbYXJyYXldIC0gVGhlIG5ldyB0ZXh0IHRvIHNob3cgKGFycmF5IG9mIHN0cmluZylcbiAgICAgICAgICAgdGV4dF9zaGFkb3dfcGFpciBbYXJyYXldIC0gQ29udGFpbnMgdGhlIHRleHQgYW5kIGl0cyBzaGFkb3dcbiAgICAgICAgICAgICAgICB0ZXh0IC0gVGhlIHRleHQgdG8gY2hhbmdlXG4gICAgICAgICAgICAgICAgc2hhZG93IC0gVGhlIHNoYWRvdyBvZiB0aGUgdGV4dFxuICAgICAgICAgICAgbmV3X3gsIG5ld195IFtudW1iZXJdIC0gVGhlIHggYW5kIHkgZm9yIHRoZSBuZXcgcG9zaXRpb24qL1xuICAgIHVwZGF0ZV90ZXh0KG5ld190ZXh0LCB0ZXh0X3NoYWRvd19wYWlyLCBuZXdfeD8sIG5ld195Pykge1xuICAgICAgICB0ZXh0X3NoYWRvd19wYWlyLnRleHQuc2V0VGV4dChuZXdfdGV4dCk7XG4gICAgICAgIHRleHRfc2hhZG93X3BhaXIuc2hhZG93LnNldFRleHQobmV3X3RleHQpO1xuICAgICAgICB0aGlzLnVwZGF0ZV90ZXh0X3Bvc2l0aW9uKHt4OiBuZXdfeCwgeTogbmV3X3l9LCB0ZXh0X3NoYWRvd19wYWlyKTtcbiAgICB9XG5cbiAgICAvKkNoYW5nZXMgdGhlIHBvc2l0aW9uIG9mIHRoZSBnaXZlbiB0ZXh0XG5cbiAgICBJbnB1dDogbmV3X3Bvc2l0aW9uIFthcnJheV0gLSBUaGUgZGVzaXJlZCBwb3NpdGlvblxuICAgICAgICAgICAgICAgIHggLSBUaGUgbmV3IHhcbiAgICAgICAgICAgICAgICB5IC0gVGhlIG5ldyB5XG4gICAgICAgICAgIHRleHRfc2hhZG93X3BhaXIgW2FycmF5XSAtIENvbnRhaW5zIHRoZSB0ZXh0IGFuZCBpdHMgc2hhZG93XG4gICAgICAgICAgICAgICAgdGV4dCAtIFRoZSB0ZXh0IHRvIGNoYW5nZVxuICAgICAgICAgICAgICAgIHNoYWRvdyAtIFRoZSBzaGFkb3cgb2YgdGhlIHRleHQqL1xuICAgIHVwZGF0ZV90ZXh0X3Bvc2l0aW9uKG5ld19wb3NpdGlvbiwgdGV4dF9zaGFkb3dfcGFpcikge1xuICAgICAgICBpZiAobmV3X3Bvc2l0aW9uLnggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGV4dF9zaGFkb3dfcGFpci50ZXh0LnggPSBuZXdfcG9zaXRpb24ueDtcbiAgICAgICAgICAgIHRleHRfc2hhZG93X3BhaXIuc2hhZG93LnggPSBuZXdfcG9zaXRpb24ueCArIDE7XG4gICAgICAgICAgICB0ZXh0X3NoYWRvd19wYWlyLmluaXRpYWxfeCA9IG5ld19wb3NpdGlvbi54O1xuICAgICAgICAgICAgaWYgKHRleHRfc2hhZG93X3BhaXIudGV4dF9iZykge1xuICAgICAgICAgICAgICAgIHRleHRfc2hhZG93X3BhaXIudGV4dF9iZy54ID0gdGV4dF9zaGFkb3dfcGFpci50ZXh0LnggLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChuZXdfcG9zaXRpb24ueSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0ZXh0X3NoYWRvd19wYWlyLnRleHQueSA9IG5ld19wb3NpdGlvbi55O1xuICAgICAgICAgICAgdGV4dF9zaGFkb3dfcGFpci5zaGFkb3cueSA9IG5ld19wb3NpdGlvbi55ICsgMTtcbiAgICAgICAgICAgIGlmICh0ZXh0X3NoYWRvd19wYWlyLnRleHRfYmcpIHtcbiAgICAgICAgICAgICAgICB0ZXh0X3NoYWRvd19wYWlyLnRleHRfYmcueSA9IHRleHRfc2hhZG93X3BhaXIudGV4dC55O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0ZXh0X3NoYWRvd19wYWlyLnJpZ2h0X2FsaWduKSB7XG4gICAgICAgICAgICB0ZXh0X3NoYWRvd19wYWlyLnRleHQueCA9IHRleHRfc2hhZG93X3BhaXIuaW5pdGlhbF94IC0gdGV4dF9zaGFkb3dfcGFpci50ZXh0LndpZHRoO1xuICAgICAgICAgICAgdGV4dF9zaGFkb3dfcGFpci5zaGFkb3cueCA9IHRleHRfc2hhZG93X3BhaXIuaW5pdGlhbF94IC0gdGV4dF9zaGFkb3dfcGFpci5zaGFkb3cud2lkdGggKyAxO1xuICAgICAgICAgICAgaWYgKHRleHRfc2hhZG93X3BhaXIudGV4dF9iZykge1xuICAgICAgICAgICAgICAgIHRleHRfc2hhZG93X3BhaXIudGV4dF9iZy54ID0gdGV4dF9zaGFkb3dfcGFpci50ZXh0LnggLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypDaGFuZ2VzIHRoZSBjb2xvciBvZiB0aGUgZ2l2ZW4gdGV4dFxuXG4gICAgSW5wdXQ6IGNvbG9yIFtudW1iZXJdIC0gVGhlIG5ldyBjb2xvciB0byBzZXRcbiAgICAgICAgICAgdGV4dF9zaGFkb3dfcGFpciBbYXJyYXldIC0gQ29udGFpbnMgdGhlIHRleHQgYW5kIGl0cyBzaGFkb3dcbiAgICAgICAgICAgICAgICB0ZXh0IC0gVGhlIHRleHQgdG8gY2hhbmdlXG4gICAgICAgICAgICAgICAgc2hhZG93IC0gVGhlIHNoYWRvdyBvZiB0aGUgdGV4dCovXG4gICAgdXBkYXRlX3RleHRfY29sb3IoY29sb3IsIHRleHRfc2hhZG93X3BhaXIpIHtcbiAgICAgICAgdGV4dF9zaGFkb3dfcGFpci50ZXh0LnRpbnQgPSBjb2xvcjtcbiAgICB9XG5cbiAgICAvKlJlbW92ZXMgYSB0ZXh0IGFuZCBpdHMgc2hhZG93XG5cbiAgICBJbnB1dDogdGV4dF9zaGFkb3dfcGFpciBbYXJyYXldIC0gQ29udGFpbnMgdGhlIHRleHQgYW5kIGl0cyBzaGFkb3dcbiAgICAgICAgICAgICAgICB0ZXh0IC0gVGhlIHRleHQgdG8gcmVtb3ZlXG4gICAgICAgICAgICAgICAgc2hhZG93IC0gVGhlIHNoYWRvdyBvZiB0aGUgdGV4dCovXG4gICAgcmVtb3ZlX3RleHQodGV4dF9zaGFkb3dfcGFpcikge1xuICAgICAgICB0ZXh0X3NoYWRvd19wYWlyLnRleHQuZGVzdHJveSgpO1xuICAgICAgICB0ZXh0X3NoYWRvd19wYWlyLnNoYWRvdy5kZXN0cm95KCk7XG4gICAgICAgIGlmICh0ZXh0X3NoYWRvd19wYWlyLnRleHRfYmcpIHtcbiAgICAgICAgICAgIHRleHRfc2hhZG93X3BhaXIudGV4dF9iZy5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKkNsb3NlcyB0aGUgd2luZG93XG5cbiAgICBJbnB1dDogY2FsbGJhY2sgW2Z1bmN0aW9uXSAtIENhbGxiYWNrIGZ1bmN0aW9uIChPcHRpb25hbClcbiAgICAgICAgICAgYW5pbWF0ZSBbYm9vbGVhbl0gLSBQbGF5cyBhIGZhZGluZyBhbmltYXRpb24gaWYgdHJ1ZSovXG4gICAgY2xvc2UoY2FsbGJhY2s/LCBhbmltYXRlID0gdHJ1ZSkge1xuICAgICAgICBpZiAoYW5pbWF0ZSkge1xuICAgICAgICAgICAgdGhpcy5nYW1lLmFkZFxuICAgICAgICAgICAgICAgIC50d2Vlbih0aGlzLmdyb3VwKVxuICAgICAgICAgICAgICAgIC50byh7d2lkdGg6IDAsIGhlaWdodDogMH0sIFdpbmRvdy5UUkFOU0lUSU9OX1RJTUUsIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsIHRydWUpXG4gICAgICAgICAgICAgICAgLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAwO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucGFnZV9pbmRpY2F0b3IuaXNfc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhZ2VfaW5kaWNhdG9yLnRlcm1pbmFudGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jbG9zZV9jYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAwO1xuICAgICAgICAgICAgdGhpcy5vcGVuID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAodGhpcy5wYWdlX2luZGljYXRvci5pc19zZXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhZ2VfaW5kaWNhdG9yLnRlcm1pbmFudGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZ3JvdXAud2lkdGggPSAwO1xuICAgICAgICAgICAgdGhpcy5ncm91cC5oZWlnaHQgPSAwO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuY2xvc2VfY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qRGVzdHJveXMgdGhlIG1haW4gZ3JvdXAgb2YgdGhlIHdpbmRvd1xuXG4gICAgSW5wdXQ6IGFuaW1hdGUgW2Jvb2xlYW5dIC0gUGxheXMgYSBmYWRpbmcgYW5pbWF0aW9uIGlmIHRydWVcbiAgICAgICAgICAgZGVzdHJveV9jYWxsYmNhayBbZnVuY3Rpb25dIC0gQ2FsbGJhY2sgZnVuY3Rpb24gKE9wdGlvbmFsKSovXG4gICAgZGVzdHJveShhbmltYXRlLCBkZXN0cm95X2NhbGxiYWNrPykge1xuICAgICAgICBsZXQgb25fZGVzdHJveSA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnBhZ2VfaW5kaWNhdG9yLmlzX3NldCkge1xuICAgICAgICAgICAgICAgIHRoaXMucGFnZV9pbmRpY2F0b3IudGVybWluYW50ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5ncm91cC5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLmludGVybmFsX2dyb3VwcyA9IHt9O1xuICAgICAgICAgICAgaWYgKGRlc3Ryb3lfY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkgZGVzdHJveV9jYWxsYmFjaygpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoYW5pbWF0ZSkge1xuICAgICAgICAgICAgdGhpcy5nYW1lLmFkZFxuICAgICAgICAgICAgICAgIC50d2Vlbih0aGlzLmdyb3VwKVxuICAgICAgICAgICAgICAgIC50byh7d2lkdGg6IDAsIGhlaWdodDogMH0sIFdpbmRvdy5UUkFOU0lUSU9OX1RJTUUsIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsIHRydWUpXG4gICAgICAgICAgICAgICAgLm9uQ29tcGxldGUuYWRkT25jZShvbl9kZXN0cm95KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9uX2Rlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIExvZGFzaCA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIENvcHlyaWdodCBPcGVuSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL29wZW5qc2Yub3JnLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuOyhmdW5jdGlvbigpIHtcblxuICAvKiogVXNlZCBhcyBhIHNhZmUgcmVmZXJlbmNlIGZvciBgdW5kZWZpbmVkYCBpbiBwcmUtRVM1IGVudmlyb25tZW50cy4gKi9cbiAgdmFyIHVuZGVmaW5lZDtcblxuICAvKiogVXNlZCBhcyB0aGUgc2VtYW50aWMgdmVyc2lvbiBudW1iZXIuICovXG4gIHZhciBWRVJTSU9OID0gJzQuMTcuMjAnO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xuICB2YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuICAvKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG4gIHZhciBDT1JFX0VSUk9SX1RFWFQgPSAnVW5zdXBwb3J0ZWQgY29yZS1qcyB1c2UuIFRyeSBodHRwczovL25wbXMuaW8vc2VhcmNoP3E9cG9ueWZpbGwuJyxcbiAgICAgIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuICAvKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG4gIHZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuICAvKiogVXNlZCBhcyB0aGUgbWF4aW11bSBtZW1vaXplIGNhY2hlIHNpemUuICovXG4gIHZhciBNQVhfTUVNT0laRV9TSVpFID0gNTAwO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBpbnRlcm5hbCBhcmd1bWVudCBwbGFjZWhvbGRlci4gKi9cbiAgdmFyIFBMQUNFSE9MREVSID0gJ19fbG9kYXNoX3BsYWNlaG9sZGVyX18nO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG4gIHZhciBDTE9ORV9ERUVQX0ZMQUcgPSAxLFxuICAgICAgQ0xPTkVfRkxBVF9GTEFHID0gMixcbiAgICAgIENMT05FX1NZTUJPTFNfRkxBRyA9IDQ7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG4gIHZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBmdW5jdGlvbiBtZXRhZGF0YS4gKi9cbiAgdmFyIFdSQVBfQklORF9GTEFHID0gMSxcbiAgICAgIFdSQVBfQklORF9LRVlfRkxBRyA9IDIsXG4gICAgICBXUkFQX0NVUlJZX0JPVU5EX0ZMQUcgPSA0LFxuICAgICAgV1JBUF9DVVJSWV9GTEFHID0gOCxcbiAgICAgIFdSQVBfQ1VSUllfUklHSFRfRkxBRyA9IDE2LFxuICAgICAgV1JBUF9QQVJUSUFMX0ZMQUcgPSAzMixcbiAgICAgIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHID0gNjQsXG4gICAgICBXUkFQX0FSWV9GTEFHID0gMTI4LFxuICAgICAgV1JBUF9SRUFSR19GTEFHID0gMjU2LFxuICAgICAgV1JBUF9GTElQX0ZMQUcgPSA1MTI7XG5cbiAgLyoqIFVzZWQgYXMgZGVmYXVsdCBvcHRpb25zIGZvciBgXy50cnVuY2F0ZWAuICovXG4gIHZhciBERUZBVUxUX1RSVU5DX0xFTkdUSCA9IDMwLFxuICAgICAgREVGQVVMVF9UUlVOQ19PTUlTU0lPTiA9ICcuLi4nO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBob3QgZnVuY3Rpb25zIGJ5IG51bWJlciBvZiBjYWxscyB3aXRoaW4gYSBzcGFuIG9mIG1pbGxpc2Vjb25kcy4gKi9cbiAgdmFyIEhPVF9DT1VOVCA9IDgwMCxcbiAgICAgIEhPVF9TUEFOID0gMTY7XG5cbiAgLyoqIFVzZWQgdG8gaW5kaWNhdGUgdGhlIHR5cGUgb2YgbGF6eSBpdGVyYXRlZXMuICovXG4gIHZhciBMQVpZX0ZJTFRFUl9GTEFHID0gMSxcbiAgICAgIExBWllfTUFQX0ZMQUcgPSAyLFxuICAgICAgTEFaWV9XSElMRV9GTEFHID0gMztcblxuICAvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbiAgdmFyIElORklOSVRZID0gMSAvIDAsXG4gICAgICBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MSxcbiAgICAgIE1BWF9JTlRFR0VSID0gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDgsXG4gICAgICBOQU4gPSAwIC8gMDtcblxuICAvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB0aGUgbWF4aW11bSBsZW5ndGggYW5kIGluZGV4IG9mIGFuIGFycmF5LiAqL1xuICB2YXIgTUFYX0FSUkFZX0xFTkdUSCA9IDQyOTQ5NjcyOTUsXG4gICAgICBNQVhfQVJSQVlfSU5ERVggPSBNQVhfQVJSQVlfTEVOR1RIIC0gMSxcbiAgICAgIEhBTEZfTUFYX0FSUkFZX0xFTkdUSCA9IE1BWF9BUlJBWV9MRU5HVEggPj4+IDE7XG5cbiAgLyoqIFVzZWQgdG8gYXNzb2NpYXRlIHdyYXAgbWV0aG9kcyB3aXRoIHRoZWlyIGJpdCBmbGFncy4gKi9cbiAgdmFyIHdyYXBGbGFncyA9IFtcbiAgICBbJ2FyeScsIFdSQVBfQVJZX0ZMQUddLFxuICAgIFsnYmluZCcsIFdSQVBfQklORF9GTEFHXSxcbiAgICBbJ2JpbmRLZXknLCBXUkFQX0JJTkRfS0VZX0ZMQUddLFxuICAgIFsnY3VycnknLCBXUkFQX0NVUlJZX0ZMQUddLFxuICAgIFsnY3VycnlSaWdodCcsIFdSQVBfQ1VSUllfUklHSFRfRkxBR10sXG4gICAgWydmbGlwJywgV1JBUF9GTElQX0ZMQUddLFxuICAgIFsncGFydGlhbCcsIFdSQVBfUEFSVElBTF9GTEFHXSxcbiAgICBbJ3BhcnRpYWxSaWdodCcsIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHXSxcbiAgICBbJ3JlYXJnJywgV1JBUF9SRUFSR19GTEFHXVxuICBdO1xuXG4gIC8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbiAgdmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICAgIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgICBkb21FeGNUYWcgPSAnW29iamVjdCBET01FeGNlcHRpb25dJyxcbiAgICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgICBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgICBwcm9taXNlVGFnID0gJ1tvYmplY3QgUHJvbWlzZV0nLFxuICAgICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nLFxuICAgICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXScsXG4gICAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJyxcbiAgICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXScsXG4gICAgICB3ZWFrU2V0VGFnID0gJ1tvYmplY3QgV2Vha1NldF0nO1xuXG4gIHZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggZW1wdHkgc3RyaW5nIGxpdGVyYWxzIGluIGNvbXBpbGVkIHRlbXBsYXRlIHNvdXJjZS4gKi9cbiAgdmFyIHJlRW1wdHlTdHJpbmdMZWFkaW5nID0gL1xcYl9fcCBcXCs9ICcnOy9nLFxuICAgICAgcmVFbXB0eVN0cmluZ01pZGRsZSA9IC9cXGIoX19wIFxcKz0pICcnIFxcKy9nLFxuICAgICAgcmVFbXB0eVN0cmluZ1RyYWlsaW5nID0gLyhfX2VcXCguKj9cXCl8XFxiX190XFwpKSBcXCtcXG4nJzsvZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBIVE1MIGVudGl0aWVzIGFuZCBIVE1MIGNoYXJhY3RlcnMuICovXG4gIHZhciByZUVzY2FwZWRIdG1sID0gLyYoPzphbXB8bHR8Z3R8cXVvdHwjMzkpOy9nLFxuICAgICAgcmVVbmVzY2FwZWRIdG1sID0gL1smPD5cIiddL2csXG4gICAgICByZUhhc0VzY2FwZWRIdG1sID0gUmVnRXhwKHJlRXNjYXBlZEh0bWwuc291cmNlKSxcbiAgICAgIHJlSGFzVW5lc2NhcGVkSHRtbCA9IFJlZ0V4cChyZVVuZXNjYXBlZEh0bWwuc291cmNlKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLiAqL1xuICB2YXIgcmVFc2NhcGUgPSAvPCUtKFtcXHNcXFNdKz8pJT4vZyxcbiAgICAgIHJlRXZhbHVhdGUgPSAvPCUoW1xcc1xcU10rPyklPi9nLFxuICAgICAgcmVJbnRlcnBvbGF0ZSA9IC88JT0oW1xcc1xcU10rPyklPi9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbiAgdmFyIHJlSXNEZWVwUHJvcCA9IC9cXC58XFxbKD86W15bXFxdXSp8KFtcIiddKSg/Oig/IVxcMSlbXlxcXFxdfFxcXFwuKSo/XFwxKVxcXS8sXG4gICAgICByZUlzUGxhaW5Qcm9wID0gL15cXHcqJC8sXG4gICAgICByZVByb3BOYW1lID0gL1teLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCQpKS9nO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gICAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICAgKi9cbiAgdmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZyxcbiAgICAgIHJlSGFzUmVnRXhwQ2hhciA9IFJlZ0V4cChyZVJlZ0V4cENoYXIuc291cmNlKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLiAqL1xuICB2YXIgcmVUcmltID0gL15cXHMrfFxccyskL2csXG4gICAgICByZVRyaW1TdGFydCA9IC9eXFxzKy8sXG4gICAgICByZVRyaW1FbmQgPSAvXFxzKyQvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHdyYXAgZGV0YWlsIGNvbW1lbnRzLiAqL1xuICB2YXIgcmVXcmFwQ29tbWVudCA9IC9cXHsoPzpcXG5cXC9cXCogXFxbd3JhcHBlZCB3aXRoIC4rXFxdIFxcKlxcLyk/XFxuPy8sXG4gICAgICByZVdyYXBEZXRhaWxzID0gL1xce1xcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggKC4rKVxcXSBcXCovLFxuICAgICAgcmVTcGxpdERldGFpbHMgPSAvLD8gJiAvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHdvcmRzIGNvbXBvc2VkIG9mIGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgcmVBc2NpaVdvcmQgPSAvW15cXHgwMC1cXHgyZlxceDNhLVxceDQwXFx4NWItXFx4NjBcXHg3Yi1cXHg3Zl0rL2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG4gIHZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaFxuICAgKiBbRVMgdGVtcGxhdGUgZGVsaW1pdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdGVtcGxhdGUtbGl0ZXJhbC1sZXhpY2FsLWNvbXBvbmVudHMpLlxuICAgKi9cbiAgdmFyIHJlRXNUZW1wbGF0ZSA9IC9cXCRcXHsoW15cXFxcfV0qKD86XFxcXC5bXlxcXFx9XSopKilcXH0vZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBgUmVnRXhwYCBmbGFncyBmcm9tIHRoZWlyIGNvZXJjZWQgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlRmxhZ3MgPSAvXFx3KiQvO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG4gIHZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG4gIHZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggTGF0aW4gVW5pY29kZSBsZXR0ZXJzIChleGNsdWRpbmcgbWF0aGVtYXRpY2FsIG9wZXJhdG9ycykuICovXG4gIHZhciByZUxhdGluID0gL1tcXHhjMC1cXHhkNlxceGQ4LVxceGY2XFx4ZjgtXFx4ZmZcXHUwMTAwLVxcdTAxN2ZdL2c7XG5cbiAgLyoqIFVzZWQgdG8gZW5zdXJlIGNhcHR1cmluZyBvcmRlciBvZiB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLiAqL1xuICB2YXIgcmVOb01hdGNoID0gLygkXikvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHVuZXNjYXBlZCBjaGFyYWN0ZXJzIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy4gKi9cbiAgdmFyIHJlVW5lc2NhcGVkU3RyaW5nID0gL1snXFxuXFxyXFx1MjAyOFxcdTIwMjlcXFxcXS9nO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjaGFyYWN0ZXIgY2xhc3Nlcy4gKi9cbiAgdmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsXG4gICAgICByc0NvbWJvTWFya3NSYW5nZSA9ICdcXFxcdTAzMDAtXFxcXHUwMzZmJyxcbiAgICAgIHJlQ29tYm9IYWxmTWFya3NSYW5nZSA9ICdcXFxcdWZlMjAtXFxcXHVmZTJmJyxcbiAgICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgICByc0NvbWJvUmFuZ2UgPSByc0NvbWJvTWFya3NSYW5nZSArIHJlQ29tYm9IYWxmTWFya3NSYW5nZSArIHJzQ29tYm9TeW1ib2xzUmFuZ2UsXG4gICAgICByc0RpbmdiYXRSYW5nZSA9ICdcXFxcdTI3MDAtXFxcXHUyN2JmJyxcbiAgICAgIHJzTG93ZXJSYW5nZSA9ICdhLXpcXFxceGRmLVxcXFx4ZjZcXFxceGY4LVxcXFx4ZmYnLFxuICAgICAgcnNNYXRoT3BSYW5nZSA9ICdcXFxceGFjXFxcXHhiMVxcXFx4ZDdcXFxceGY3JyxcbiAgICAgIHJzTm9uQ2hhclJhbmdlID0gJ1xcXFx4MDAtXFxcXHgyZlxcXFx4M2EtXFxcXHg0MFxcXFx4NWItXFxcXHg2MFxcXFx4N2ItXFxcXHhiZicsXG4gICAgICByc1B1bmN0dWF0aW9uUmFuZ2UgPSAnXFxcXHUyMDAwLVxcXFx1MjA2ZicsXG4gICAgICByc1NwYWNlUmFuZ2UgPSAnIFxcXFx0XFxcXHgwYlxcXFxmXFxcXHhhMFxcXFx1ZmVmZlxcXFxuXFxcXHJcXFxcdTIwMjhcXFxcdTIwMjlcXFxcdTE2ODBcXFxcdTE4MGVcXFxcdTIwMDBcXFxcdTIwMDFcXFxcdTIwMDJcXFxcdTIwMDNcXFxcdTIwMDRcXFxcdTIwMDVcXFxcdTIwMDZcXFxcdTIwMDdcXFxcdTIwMDhcXFxcdTIwMDlcXFxcdTIwMGFcXFxcdTIwMmZcXFxcdTIwNWZcXFxcdTMwMDAnLFxuICAgICAgcnNVcHBlclJhbmdlID0gJ0EtWlxcXFx4YzAtXFxcXHhkNlxcXFx4ZDgtXFxcXHhkZScsXG4gICAgICByc1ZhclJhbmdlID0gJ1xcXFx1ZmUwZVxcXFx1ZmUwZicsXG4gICAgICByc0JyZWFrUmFuZ2UgPSByc01hdGhPcFJhbmdlICsgcnNOb25DaGFyUmFuZ2UgKyByc1B1bmN0dWF0aW9uUmFuZ2UgKyByc1NwYWNlUmFuZ2U7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqL1xuICB2YXIgcnNBcG9zID0gXCJbJ1xcdTIwMTldXCIsXG4gICAgICByc0FzdHJhbCA9ICdbJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgICByc0JyZWFrID0gJ1snICsgcnNCcmVha1JhbmdlICsgJ10nLFxuICAgICAgcnNDb21ibyA9ICdbJyArIHJzQ29tYm9SYW5nZSArICddJyxcbiAgICAgIHJzRGlnaXRzID0gJ1xcXFxkKycsXG4gICAgICByc0RpbmdiYXQgPSAnWycgKyByc0RpbmdiYXRSYW5nZSArICddJyxcbiAgICAgIHJzTG93ZXIgPSAnWycgKyByc0xvd2VyUmFuZ2UgKyAnXScsXG4gICAgICByc01pc2MgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArIHJzQnJlYWtSYW5nZSArIHJzRGlnaXRzICsgcnNEaW5nYmF0UmFuZ2UgKyByc0xvd2VyUmFuZ2UgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgICByc0ZpdHogPSAnXFxcXHVkODNjW1xcXFx1ZGZmYi1cXFxcdWRmZmZdJyxcbiAgICAgIHJzTW9kaWZpZXIgPSAnKD86JyArIHJzQ29tYm8gKyAnfCcgKyByc0ZpdHogKyAnKScsXG4gICAgICByc05vbkFzdHJhbCA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgICAgcnNSZWdpb25hbCA9ICcoPzpcXFxcdWQ4M2NbXFxcXHVkZGU2LVxcXFx1ZGRmZl0pezJ9JyxcbiAgICAgIHJzU3VyclBhaXIgPSAnW1xcXFx1ZDgwMC1cXFxcdWRiZmZdW1xcXFx1ZGMwMC1cXFxcdWRmZmZdJyxcbiAgICAgIHJzVXBwZXIgPSAnWycgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgICByc1pXSiA9ICdcXFxcdTIwMGQnO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSByZWdleGVzLiAqL1xuICB2YXIgcnNNaXNjTG93ZXIgPSAnKD86JyArIHJzTG93ZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgICByc01pc2NVcHBlciA9ICcoPzonICsgcnNVcHBlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICAgIHJzT3B0Q29udHJMb3dlciA9ICcoPzonICsgcnNBcG9zICsgJyg/OmR8bGx8bXxyZXxzfHR8dmUpKT8nLFxuICAgICAgcnNPcHRDb250clVwcGVyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86RHxMTHxNfFJFfFN8VHxWRSkpPycsXG4gICAgICByZU9wdE1vZCA9IHJzTW9kaWZpZXIgKyAnPycsXG4gICAgICByc09wdFZhciA9ICdbJyArIHJzVmFyUmFuZ2UgKyAnXT8nLFxuICAgICAgcnNPcHRKb2luID0gJyg/OicgKyByc1pXSiArICcoPzonICsgW3JzTm9uQXN0cmFsLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc09wdFZhciArIHJlT3B0TW9kICsgJykqJyxcbiAgICAgIHJzT3JkTG93ZXIgPSAnXFxcXGQqKD86MXN0fDJuZHwzcmR8KD8hWzEyM10pXFxcXGR0aCkoPz1cXFxcYnxbQS1aX10pJyxcbiAgICAgIHJzT3JkVXBwZXIgPSAnXFxcXGQqKD86MVNUfDJORHwzUkR8KD8hWzEyM10pXFxcXGRUSCkoPz1cXFxcYnxbYS16X10pJyxcbiAgICAgIHJzU2VxID0gcnNPcHRWYXIgKyByZU9wdE1vZCArIHJzT3B0Sm9pbixcbiAgICAgIHJzRW1vamkgPSAnKD86JyArIFtyc0RpbmdiYXQsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzU2VxLFxuICAgICAgcnNTeW1ib2wgPSAnKD86JyArIFtyc05vbkFzdHJhbCArIHJzQ29tYm8gKyAnPycsIHJzQ29tYm8sIHJzUmVnaW9uYWwsIHJzU3VyclBhaXIsIHJzQXN0cmFsXS5qb2luKCd8JykgKyAnKSc7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYXBvc3Ryb3BoZXMuICovXG4gIHZhciByZUFwb3MgPSBSZWdFeHAocnNBcG9zLCAnZycpO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykgYW5kXG4gICAqIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3MgZm9yIHN5bWJvbHNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrc19mb3JfU3ltYm9scykuXG4gICAqL1xuICB2YXIgcmVDb21ib01hcmsgPSBSZWdFeHAocnNDb21ibywgJ2cnKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBbc3RyaW5nIHN5bWJvbHNdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LXVuaWNvZGUpLiAqL1xuICB2YXIgcmVVbmljb2RlID0gUmVnRXhwKHJzRml0eiArICcoPz0nICsgcnNGaXR6ICsgJyl8JyArIHJzU3ltYm9sICsgcnNTZXEsICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggY29tcGxleCBvciBjb21wb3VuZCB3b3Jkcy4gKi9cbiAgdmFyIHJlVW5pY29kZVdvcmQgPSBSZWdFeHAoW1xuICAgIHJzVXBwZXIgKyAnPycgKyByc0xvd2VyICsgJysnICsgcnNPcHRDb250ckxvd2VyICsgJyg/PScgKyBbcnNCcmVhaywgcnNVcHBlciwgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gICAgcnNNaXNjVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyICsgcnNNaXNjTG93ZXIsICckJ10uam9pbignfCcpICsgJyknLFxuICAgIHJzVXBwZXIgKyAnPycgKyByc01pc2NMb3dlciArICcrJyArIHJzT3B0Q29udHJMb3dlcixcbiAgICByc1VwcGVyICsgJysnICsgcnNPcHRDb250clVwcGVyLFxuICAgIHJzT3JkVXBwZXIsXG4gICAgcnNPcmRMb3dlcixcbiAgICByc0RpZ2l0cyxcbiAgICByc0Vtb2ppXG4gIF0uam9pbignfCcpLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHdpdGggW3plcm8td2lkdGggam9pbmVycyBvciBjb2RlIHBvaW50cyBmcm9tIHRoZSBhc3RyYWwgcGxhbmVzXShodHRwOi8vZWV2LmVlL2Jsb2cvMjAxNS8wOS8xMi9kYXJrLWNvcm5lcnMtb2YtdW5pY29kZS8pLiAqL1xuICB2YXIgcmVIYXNVbmljb2RlID0gUmVnRXhwKCdbJyArIHJzWldKICsgcnNBc3RyYWxSYW5nZSAgKyByc0NvbWJvUmFuZ2UgKyByc1ZhclJhbmdlICsgJ10nKTtcblxuICAvKiogVXNlZCB0byBkZXRlY3Qgc3RyaW5ncyB0aGF0IG5lZWQgYSBtb3JlIHJvYnVzdCByZWdleHAgdG8gbWF0Y2ggd29yZHMuICovXG4gIHZhciByZUhhc1VuaWNvZGVXb3JkID0gL1thLXpdW0EtWl18W0EtWl17Mn1bYS16XXxbMC05XVthLXpBLVpdfFthLXpBLVpdWzAtOV18W15hLXpBLVowLTkgXS87XG5cbiAgLyoqIFVzZWQgdG8gYXNzaWduIGRlZmF1bHQgYGNvbnRleHRgIG9iamVjdCBwcm9wZXJ0aWVzLiAqL1xuICB2YXIgY29udGV4dFByb3BzID0gW1xuICAgICdBcnJheScsICdCdWZmZXInLCAnRGF0YVZpZXcnLCAnRGF0ZScsICdFcnJvcicsICdGbG9hdDMyQXJyYXknLCAnRmxvYXQ2NEFycmF5JyxcbiAgICAnRnVuY3Rpb24nLCAnSW50OEFycmF5JywgJ0ludDE2QXJyYXknLCAnSW50MzJBcnJheScsICdNYXAnLCAnTWF0aCcsICdPYmplY3QnLFxuICAgICdQcm9taXNlJywgJ1JlZ0V4cCcsICdTZXQnLCAnU3RyaW5nJywgJ1N5bWJvbCcsICdUeXBlRXJyb3InLCAnVWludDhBcnJheScsXG4gICAgJ1VpbnQ4Q2xhbXBlZEFycmF5JywgJ1VpbnQxNkFycmF5JywgJ1VpbnQzMkFycmF5JywgJ1dlYWtNYXAnLFxuICAgICdfJywgJ2NsZWFyVGltZW91dCcsICdpc0Zpbml0ZScsICdwYXJzZUludCcsICdzZXRUaW1lb3V0J1xuICBdO1xuXG4gIC8qKiBVc2VkIHRvIG1ha2UgdGVtcGxhdGUgc291cmNlVVJMcyBlYXNpZXIgdG8gaWRlbnRpZnkuICovXG4gIHZhciB0ZW1wbGF0ZUNvdW50ZXIgPSAtMTtcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG4gIHZhciB0eXBlZEFycmF5VGFncyA9IHt9O1xuICB0eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tpbnQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50OFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICB0eXBlZEFycmF5VGFnc1thcmdzVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPSB0eXBlZEFycmF5VGFnc1tmdW5jVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tzZXRUYWddID0gdHlwZWRBcnJheVRhZ3Nbc3RyaW5nVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgc3VwcG9ydGVkIGJ5IGBfLmNsb25lYC4gKi9cbiAgdmFyIGNsb25lYWJsZVRhZ3MgPSB7fTtcbiAgY2xvbmVhYmxlVGFnc1thcmdzVGFnXSA9IGNsb25lYWJsZVRhZ3NbYXJyYXlUYWddID1cbiAgY2xvbmVhYmxlVGFnc1thcnJheUJ1ZmZlclRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGFWaWV3VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbYm9vbFRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGVUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tmbG9hdDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZmxvYXQ2NFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2ludDhUYWddID0gY2xvbmVhYmxlVGFnc1tpbnQxNlRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2ludDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbbWFwVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbbnVtYmVyVGFnXSA9IGNsb25lYWJsZVRhZ3Nbb2JqZWN0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbcmVnZXhwVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc2V0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3Nbc3RyaW5nVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc3ltYm9sVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbdWludDhUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50OENsYW1wZWRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t1aW50MTZUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbiAgY2xvbmVhYmxlVGFnc1tlcnJvclRhZ10gPSBjbG9uZWFibGVUYWdzW2Z1bmNUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBMYXRpbiBVbmljb2RlIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy4gKi9cbiAgdmFyIGRlYnVycmVkTGV0dGVycyA9IHtcbiAgICAvLyBMYXRpbi0xIFN1cHBsZW1lbnQgYmxvY2suXG4gICAgJ1xceGMwJzogJ0EnLCAgJ1xceGMxJzogJ0EnLCAnXFx4YzInOiAnQScsICdcXHhjMyc6ICdBJywgJ1xceGM0JzogJ0EnLCAnXFx4YzUnOiAnQScsXG4gICAgJ1xceGUwJzogJ2EnLCAgJ1xceGUxJzogJ2EnLCAnXFx4ZTInOiAnYScsICdcXHhlMyc6ICdhJywgJ1xceGU0JzogJ2EnLCAnXFx4ZTUnOiAnYScsXG4gICAgJ1xceGM3JzogJ0MnLCAgJ1xceGU3JzogJ2MnLFxuICAgICdcXHhkMCc6ICdEJywgICdcXHhmMCc6ICdkJyxcbiAgICAnXFx4YzgnOiAnRScsICAnXFx4YzknOiAnRScsICdcXHhjYSc6ICdFJywgJ1xceGNiJzogJ0UnLFxuICAgICdcXHhlOCc6ICdlJywgICdcXHhlOSc6ICdlJywgJ1xceGVhJzogJ2UnLCAnXFx4ZWInOiAnZScsXG4gICAgJ1xceGNjJzogJ0knLCAgJ1xceGNkJzogJ0knLCAnXFx4Y2UnOiAnSScsICdcXHhjZic6ICdJJyxcbiAgICAnXFx4ZWMnOiAnaScsICAnXFx4ZWQnOiAnaScsICdcXHhlZSc6ICdpJywgJ1xceGVmJzogJ2knLFxuICAgICdcXHhkMSc6ICdOJywgICdcXHhmMSc6ICduJyxcbiAgICAnXFx4ZDInOiAnTycsICAnXFx4ZDMnOiAnTycsICdcXHhkNCc6ICdPJywgJ1xceGQ1JzogJ08nLCAnXFx4ZDYnOiAnTycsICdcXHhkOCc6ICdPJyxcbiAgICAnXFx4ZjInOiAnbycsICAnXFx4ZjMnOiAnbycsICdcXHhmNCc6ICdvJywgJ1xceGY1JzogJ28nLCAnXFx4ZjYnOiAnbycsICdcXHhmOCc6ICdvJyxcbiAgICAnXFx4ZDknOiAnVScsICAnXFx4ZGEnOiAnVScsICdcXHhkYic6ICdVJywgJ1xceGRjJzogJ1UnLFxuICAgICdcXHhmOSc6ICd1JywgICdcXHhmYSc6ICd1JywgJ1xceGZiJzogJ3UnLCAnXFx4ZmMnOiAndScsXG4gICAgJ1xceGRkJzogJ1knLCAgJ1xceGZkJzogJ3knLCAnXFx4ZmYnOiAneScsXG4gICAgJ1xceGM2JzogJ0FlJywgJ1xceGU2JzogJ2FlJyxcbiAgICAnXFx4ZGUnOiAnVGgnLCAnXFx4ZmUnOiAndGgnLFxuICAgICdcXHhkZic6ICdzcycsXG4gICAgLy8gTGF0aW4gRXh0ZW5kZWQtQSBibG9jay5cbiAgICAnXFx1MDEwMCc6ICdBJywgICdcXHUwMTAyJzogJ0EnLCAnXFx1MDEwNCc6ICdBJyxcbiAgICAnXFx1MDEwMSc6ICdhJywgICdcXHUwMTAzJzogJ2EnLCAnXFx1MDEwNSc6ICdhJyxcbiAgICAnXFx1MDEwNic6ICdDJywgICdcXHUwMTA4JzogJ0MnLCAnXFx1MDEwYSc6ICdDJywgJ1xcdTAxMGMnOiAnQycsXG4gICAgJ1xcdTAxMDcnOiAnYycsICAnXFx1MDEwOSc6ICdjJywgJ1xcdTAxMGInOiAnYycsICdcXHUwMTBkJzogJ2MnLFxuICAgICdcXHUwMTBlJzogJ0QnLCAgJ1xcdTAxMTAnOiAnRCcsICdcXHUwMTBmJzogJ2QnLCAnXFx1MDExMSc6ICdkJyxcbiAgICAnXFx1MDExMic6ICdFJywgICdcXHUwMTE0JzogJ0UnLCAnXFx1MDExNic6ICdFJywgJ1xcdTAxMTgnOiAnRScsICdcXHUwMTFhJzogJ0UnLFxuICAgICdcXHUwMTEzJzogJ2UnLCAgJ1xcdTAxMTUnOiAnZScsICdcXHUwMTE3JzogJ2UnLCAnXFx1MDExOSc6ICdlJywgJ1xcdTAxMWInOiAnZScsXG4gICAgJ1xcdTAxMWMnOiAnRycsICAnXFx1MDExZSc6ICdHJywgJ1xcdTAxMjAnOiAnRycsICdcXHUwMTIyJzogJ0cnLFxuICAgICdcXHUwMTFkJzogJ2cnLCAgJ1xcdTAxMWYnOiAnZycsICdcXHUwMTIxJzogJ2cnLCAnXFx1MDEyMyc6ICdnJyxcbiAgICAnXFx1MDEyNCc6ICdIJywgICdcXHUwMTI2JzogJ0gnLCAnXFx1MDEyNSc6ICdoJywgJ1xcdTAxMjcnOiAnaCcsXG4gICAgJ1xcdTAxMjgnOiAnSScsICAnXFx1MDEyYSc6ICdJJywgJ1xcdTAxMmMnOiAnSScsICdcXHUwMTJlJzogJ0knLCAnXFx1MDEzMCc6ICdJJyxcbiAgICAnXFx1MDEyOSc6ICdpJywgICdcXHUwMTJiJzogJ2knLCAnXFx1MDEyZCc6ICdpJywgJ1xcdTAxMmYnOiAnaScsICdcXHUwMTMxJzogJ2knLFxuICAgICdcXHUwMTM0JzogJ0onLCAgJ1xcdTAxMzUnOiAnaicsXG4gICAgJ1xcdTAxMzYnOiAnSycsICAnXFx1MDEzNyc6ICdrJywgJ1xcdTAxMzgnOiAnaycsXG4gICAgJ1xcdTAxMzknOiAnTCcsICAnXFx1MDEzYic6ICdMJywgJ1xcdTAxM2QnOiAnTCcsICdcXHUwMTNmJzogJ0wnLCAnXFx1MDE0MSc6ICdMJyxcbiAgICAnXFx1MDEzYSc6ICdsJywgICdcXHUwMTNjJzogJ2wnLCAnXFx1MDEzZSc6ICdsJywgJ1xcdTAxNDAnOiAnbCcsICdcXHUwMTQyJzogJ2wnLFxuICAgICdcXHUwMTQzJzogJ04nLCAgJ1xcdTAxNDUnOiAnTicsICdcXHUwMTQ3JzogJ04nLCAnXFx1MDE0YSc6ICdOJyxcbiAgICAnXFx1MDE0NCc6ICduJywgICdcXHUwMTQ2JzogJ24nLCAnXFx1MDE0OCc6ICduJywgJ1xcdTAxNGInOiAnbicsXG4gICAgJ1xcdTAxNGMnOiAnTycsICAnXFx1MDE0ZSc6ICdPJywgJ1xcdTAxNTAnOiAnTycsXG4gICAgJ1xcdTAxNGQnOiAnbycsICAnXFx1MDE0Zic6ICdvJywgJ1xcdTAxNTEnOiAnbycsXG4gICAgJ1xcdTAxNTQnOiAnUicsICAnXFx1MDE1Nic6ICdSJywgJ1xcdTAxNTgnOiAnUicsXG4gICAgJ1xcdTAxNTUnOiAncicsICAnXFx1MDE1Nyc6ICdyJywgJ1xcdTAxNTknOiAncicsXG4gICAgJ1xcdTAxNWEnOiAnUycsICAnXFx1MDE1Yyc6ICdTJywgJ1xcdTAxNWUnOiAnUycsICdcXHUwMTYwJzogJ1MnLFxuICAgICdcXHUwMTViJzogJ3MnLCAgJ1xcdTAxNWQnOiAncycsICdcXHUwMTVmJzogJ3MnLCAnXFx1MDE2MSc6ICdzJyxcbiAgICAnXFx1MDE2Mic6ICdUJywgICdcXHUwMTY0JzogJ1QnLCAnXFx1MDE2Nic6ICdUJyxcbiAgICAnXFx1MDE2Myc6ICd0JywgICdcXHUwMTY1JzogJ3QnLCAnXFx1MDE2Nyc6ICd0JyxcbiAgICAnXFx1MDE2OCc6ICdVJywgICdcXHUwMTZhJzogJ1UnLCAnXFx1MDE2Yyc6ICdVJywgJ1xcdTAxNmUnOiAnVScsICdcXHUwMTcwJzogJ1UnLCAnXFx1MDE3Mic6ICdVJyxcbiAgICAnXFx1MDE2OSc6ICd1JywgICdcXHUwMTZiJzogJ3UnLCAnXFx1MDE2ZCc6ICd1JywgJ1xcdTAxNmYnOiAndScsICdcXHUwMTcxJzogJ3UnLCAnXFx1MDE3Myc6ICd1JyxcbiAgICAnXFx1MDE3NCc6ICdXJywgICdcXHUwMTc1JzogJ3cnLFxuICAgICdcXHUwMTc2JzogJ1knLCAgJ1xcdTAxNzcnOiAneScsICdcXHUwMTc4JzogJ1knLFxuICAgICdcXHUwMTc5JzogJ1onLCAgJ1xcdTAxN2InOiAnWicsICdcXHUwMTdkJzogJ1onLFxuICAgICdcXHUwMTdhJzogJ3onLCAgJ1xcdTAxN2MnOiAneicsICdcXHUwMTdlJzogJ3onLFxuICAgICdcXHUwMTMyJzogJ0lKJywgJ1xcdTAxMzMnOiAnaWonLFxuICAgICdcXHUwMTUyJzogJ09lJywgJ1xcdTAxNTMnOiAnb2UnLFxuICAgICdcXHUwMTQ5JzogXCInblwiLCAnXFx1MDE3Zic6ICdzJ1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXMuICovXG4gIHZhciBodG1sRXNjYXBlcyA9IHtcbiAgICAnJic6ICcmYW1wOycsXG4gICAgJzwnOiAnJmx0OycsXG4gICAgJz4nOiAnJmd0OycsXG4gICAgJ1wiJzogJyZxdW90OycsXG4gICAgXCInXCI6ICcmIzM5OydcbiAgfTtcblxuICAvKiogVXNlZCB0byBtYXAgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgaHRtbFVuZXNjYXBlcyA9IHtcbiAgICAnJmFtcDsnOiAnJicsXG4gICAgJyZsdDsnOiAnPCcsXG4gICAgJyZndDsnOiAnPicsXG4gICAgJyZxdW90Oyc6ICdcIicsXG4gICAgJyYjMzk7JzogXCInXCJcbiAgfTtcblxuICAvKiogVXNlZCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy4gKi9cbiAgdmFyIHN0cmluZ0VzY2FwZXMgPSB7XG4gICAgJ1xcXFwnOiAnXFxcXCcsXG4gICAgXCInXCI6IFwiJ1wiLFxuICAgICdcXG4nOiAnbicsXG4gICAgJ1xccic6ICdyJyxcbiAgICAnXFx1MjAyOCc6ICd1MjAyOCcsXG4gICAgJ1xcdTIwMjknOiAndTIwMjknXG4gIH07XG5cbiAgLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbiAgdmFyIGZyZWVQYXJzZUZsb2F0ID0gcGFyc2VGbG9hdCxcbiAgICAgIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG4gIHZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xuICB2YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuICAvKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbiAgdmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbiAgdmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbiAgdmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuICAvKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xuICB2YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbiAgdmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbiAgLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG4gIHZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgLy8gVXNlIGB1dGlsLnR5cGVzYCBmb3IgTm9kZS5qcyAxMCsuXG4gICAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgICAgaWYgKHR5cGVzKSB7XG4gICAgICAgIHJldHVybiB0eXBlcztcbiAgICAgIH1cblxuICAgICAgLy8gTGVnYWN5IGBwcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKWAgZm9yIE5vZGUuanMgPCAxMC5cbiAgICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9KCkpO1xuXG4gIC8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG4gIHZhciBub2RlSXNBcnJheUJ1ZmZlciA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzQXJyYXlCdWZmZXIsXG4gICAgICBub2RlSXNEYXRlID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNEYXRlLFxuICAgICAgbm9kZUlzTWFwID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNNYXAsXG4gICAgICBub2RlSXNSZWdFeHAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1JlZ0V4cCxcbiAgICAgIG5vZGVJc1NldCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzU2V0LFxuICAgICAgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvKipcbiAgICogQSBmYXN0ZXIgYWx0ZXJuYXRpdmUgdG8gYEZ1bmN0aW9uI2FwcGx5YCwgdGhpcyBmdW5jdGlvbiBpbnZva2VzIGBmdW5jYFxuICAgKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2AgYW5kIHRoZSBhcmd1bWVudHMgb2YgYGFyZ3NgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBmdW5jYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFwcGx5KGZ1bmMsIHRoaXNBcmcsIGFyZ3MpIHtcbiAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICBjYXNlIDA6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZyk7XG4gICAgICBjYXNlIDE6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSk7XG4gICAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICBjYXNlIDM6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUFnZ3JlZ2F0b3JgIGZvciBhcnJheXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGFnZ3JlZ2F0ZWQgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5QWdncmVnYXRvcihhcnJheSwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaXRlcmF0ZWUodmFsdWUpLCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUVhY2goYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZvckVhY2hSaWdodGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUVhY2hSaWdodChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGlmIChpdGVyYXRlZShhcnJheVtsZW5ndGhdLCBsZW5ndGgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZXZlcnlgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICogIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RXZlcnkoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoIXByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZmlsdGVyYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluY2x1ZGVzYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogc3BlY2lmeWluZyBhbiBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB0YXJnZXQgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlJbmNsdWRlcyhhcnJheSwgdmFsdWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgcmV0dXJuICEhbGVuZ3RoICYmIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgMCkgPiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFycmF5SW5jbHVkZXNgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYSBjb21wYXJhdG9yLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHRhcmdldGAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5SW5jbHVkZXNXaXRoKGFycmF5LCB2YWx1ZSwgY29tcGFyYXRvcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoY29tcGFyYXRvcih2YWx1ZSwgYXJyYXlbaW5kZXhdKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tYXBgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgKiBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5TWFwKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFwcGVuZC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5yZWR1Y2VgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbaW5pdEFjY3VtXSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAgICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVJlZHVjZShhcnJheSwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0pIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVsrK2luZGV4XTtcbiAgICB9XG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5yZWR1Y2VSaWdodGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgIGFzXG4gICAqICB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlSZWR1Y2VSaWdodChhcnJheSwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0pIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgaWYgKGluaXRBY2N1bSAmJiBsZW5ndGgpIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gYXJyYXlbLS1sZW5ndGhdO1xuICAgIH1cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2xlbmd0aF0sIGxlbmd0aCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNvbWVgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgKiBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAqICBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVNvbWUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHNpemUgb2YgYW4gQVNDSUkgYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAgICovXG4gIHZhciBhc2NpaVNpemUgPSBiYXNlUHJvcGVydHkoJ2xlbmd0aCcpO1xuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhbiBBU0NJSSBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXNjaWlUb0FycmF5KHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcuc3BsaXQoJycpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0cyBhbiBBU0NJSSBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFzY2lpV29yZHMoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZUFzY2lpV29yZCkgfHwgW107XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmZpbmRLZXlgIGFuZCBgXy5maW5kTGFzdEtleWAsXG4gICAqIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcywgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgY29sbGVjdGlvbmBcbiAgICogdXNpbmcgYGVhY2hGdW5jYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZm91bmQgZWxlbWVudCBvciBpdHMga2V5LCBlbHNlIGB1bmRlZmluZWRgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUZpbmRLZXkoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBlYWNoRnVuYykge1xuICAgIHZhciByZXN1bHQ7XG4gICAgZWFjaEZ1bmMoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSkge1xuICAgICAgICByZXN1bHQgPSBrZXk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbmRJbmRleGAgYW5kIGBfLmZpbmRMYXN0SW5kZXhgIHdpdGhvdXRcbiAgICogc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlRmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCwgZnJvbVJpZ2h0KSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgaW5kZXggPSBmcm9tSW5kZXggKyAoZnJvbVJpZ2h0ID8gMSA6IC0xKTtcblxuICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbmRleE9mYCB3aXRob3V0IGBmcm9tSW5kZXhgIGJvdW5kcyBjaGVja3MuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZVxuICAgICAgPyBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KVxuICAgICAgOiBiYXNlRmluZEluZGV4KGFycmF5LCBiYXNlSXNOYU4sIGZyb21JbmRleCk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBiYXNlSW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUluZGV4T2ZXaXRoKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4LCBjb21wYXJhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmFOYCB3aXRob3V0IHN1cHBvcnQgZm9yIG51bWJlciBvYmplY3RzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VJc05hTih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWVhbmAgYW5kIGBfLm1lYW5CeWAgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZU1lYW4oYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgIHJldHVybiBsZW5ndGggPyAoYmFzZVN1bShhcnJheSwgaXRlcmF0ZWUpIC8gbGVuZ3RoKSA6IE5BTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eWAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUHJvcGVydHkoa2V5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eU9mYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUHJvcGVydHlPZihvYmplY3QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlZHVjZWAgYW5kIGBfLnJlZHVjZVJpZ2h0YCwgd2l0aG91dCBzdXBwb3J0XG4gICAqIGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYCB1c2luZyBgZWFjaEZ1bmNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7Kn0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5pdEFjY3VtIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IG9yIGxhc3QgZWxlbWVudCBvZlxuICAgKiAgYGNvbGxlY3Rpb25gIGFzIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGBjb2xsZWN0aW9uYC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgZWFjaEZ1bmMpIHtcbiAgICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaW5pdEFjY3VtXG4gICAgICAgID8gKGluaXRBY2N1bSA9IGZhbHNlLCB2YWx1ZSlcbiAgICAgICAgOiBpdGVyYXRlZShhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydEJ5YCB3aGljaCB1c2VzIGBjb21wYXJlcmAgdG8gZGVmaW5lIHRoZVxuICAgKiBzb3J0IG9yZGVyIG9mIGBhcnJheWAgYW5kIHJlcGxhY2VzIGNyaXRlcmlhIG9iamVjdHMgd2l0aCB0aGVpciBjb3JyZXNwb25kaW5nXG4gICAqIHZhbHVlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNvcnQuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmVyIFRoZSBmdW5jdGlvbiB0byBkZWZpbmUgc29ydCBvcmRlci5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlU29ydEJ5KGFycmF5LCBjb21wYXJlcikge1xuICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICBhcnJheS5zb3J0KGNvbXBhcmVyKTtcbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGFycmF5W2xlbmd0aF0gPSBhcnJheVtsZW5ndGhdLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc3VtYCBhbmQgYF8uc3VtQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVN1bShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgcmVzdWx0LFxuICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIGN1cnJlbnQgPSBpdGVyYXRlZShhcnJheVtpbmRleF0pO1xuICAgICAgaWYgKGN1cnJlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGN1cnJlbnQgOiAocmVzdWx0ICsgY3VycmVudCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICAgKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvUGFpcnNgIGFuZCBgXy50b1BhaXJzSW5gIHdoaWNoIGNyZWF0ZXMgYW4gYXJyYXlcbiAgICogb2Yga2V5LXZhbHVlIHBhaXJzIGZvciBgb2JqZWN0YCBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lcyBvZiBgcHJvcHNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBnZXQgdmFsdWVzIGZvci5cbiAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVRvUGFpcnMob2JqZWN0LCBwcm9wcykge1xuICAgIHJldHVybiBhcnJheU1hcChwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gW2tleSwgb2JqZWN0W2tleV1dO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udmFsdWVzYCBhbmQgYF8udmFsdWVzSW5gIHdoaWNoIGNyZWF0ZXMgYW5cbiAgICogYXJyYXkgb2YgYG9iamVjdGAgcHJvcGVydHkgdmFsdWVzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzXG4gICAqIG9mIGBwcm9wc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVmFsdWVzKG9iamVjdCwgcHJvcHMpIHtcbiAgICByZXR1cm4gYXJyYXlNYXAocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdFtrZXldO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBhIGBjYWNoZWAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGNhY2hlSGFzKGNhY2hlLCBrZXkpIHtcbiAgICByZXR1cm4gY2FjaGUuaGFzKGtleSk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbVN0YXJ0YCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBzdHJpbmcgc3ltYm9sXG4gICAqIHRoYXQgaXMgbm90IGZvdW5kIGluIHRoZSBjaGFyYWN0ZXIgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gc3RyU3ltYm9scyBUaGUgc3RyaW5nIHN5bWJvbHMgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtBcnJheX0gY2hyU3ltYm9scyBUaGUgY2hhcmFjdGVyIHN5bWJvbHMgdG8gZmluZC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IHVubWF0Y2hlZCBzdHJpbmcgc3ltYm9sLlxuICAgKi9cbiAgZnVuY3Rpb24gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gc3RyU3ltYm9scy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCAmJiBiYXNlSW5kZXhPZihjaHJTeW1ib2xzLCBzdHJTeW1ib2xzW2luZGV4XSwgMCkgPiAtMSkge31cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbUVuZGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzdHJpbmcgc3ltYm9sXG4gICAqIHRoYXQgaXMgbm90IGZvdW5kIGluIHRoZSBjaGFyYWN0ZXIgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gc3RyU3ltYm9scyBUaGUgc3RyaW5nIHN5bWJvbHMgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtBcnJheX0gY2hyU3ltYm9scyBUaGUgY2hhcmFjdGVyIHN5bWJvbHMgdG8gZmluZC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGxhc3QgdW5tYXRjaGVkIHN0cmluZyBzeW1ib2wuXG4gICAqL1xuICBmdW5jdGlvbiBjaGFyc0VuZEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpIHtcbiAgICB2YXIgaW5kZXggPSBzdHJTeW1ib2xzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpbmRleC0tICYmIGJhc2VJbmRleE9mKGNoclN5bWJvbHMsIHN0clN5bWJvbHNbaW5kZXhdLCAwKSA+IC0xKSB7fVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBudW1iZXIgb2YgYHBsYWNlaG9sZGVyYCBvY2N1cnJlbmNlcyBpbiBgYXJyYXlgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdG8gc2VhcmNoIGZvci5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcGxhY2Vob2xkZXIgY291bnQuXG4gICAqL1xuICBmdW5jdGlvbiBjb3VudEhvbGRlcnMoYXJyYXksIHBsYWNlaG9sZGVyKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzdWx0ID0gMDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgaWYgKGFycmF5W2xlbmd0aF0gPT09IHBsYWNlaG9sZGVyKSB7XG4gICAgICAgICsrcmVzdWx0O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8uZGVidXJyYCB0byBjb252ZXJ0IExhdGluLTEgU3VwcGxlbWVudCBhbmQgTGF0aW4gRXh0ZW5kZWQtQVxuICAgKiBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsZXR0ZXIgVGhlIG1hdGNoZWQgbGV0dGVyIHRvIGRlYnVyci5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZGVidXJyZWQgbGV0dGVyLlxuICAgKi9cbiAgdmFyIGRlYnVyckxldHRlciA9IGJhc2VQcm9wZXJ0eU9mKGRlYnVycmVkTGV0dGVycyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8uZXNjYXBlYCB0byBjb252ZXJ0IGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIHZhciBlc2NhcGVIdG1sQ2hhciA9IGJhc2VQcm9wZXJ0eU9mKGh0bWxFc2NhcGVzKTtcblxuICAvKipcbiAgICogVXNlZCBieSBgXy50ZW1wbGF0ZWAgdG8gZXNjYXBlIGNoYXJhY3RlcnMgZm9yIGluY2x1c2lvbiBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIGVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL1xuICBmdW5jdGlvbiBlc2NhcGVTdHJpbmdDaGFyKGNocikge1xuICAgIHJldHVybiAnXFxcXCcgKyBzdHJpbmdFc2NhcGVzW2Nocl07XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgY29udGFpbnMgVW5pY29kZSBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGEgc3ltYm9sIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBoYXNVbmljb2RlKHN0cmluZykge1xuICAgIHJldHVybiByZUhhc1VuaWNvZGUudGVzdChzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBhIHdvcmQgY29tcG9zZWQgb2YgVW5pY29kZSBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGEgd29yZCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHJlSGFzVW5pY29kZVdvcmQudGVzdChzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBpdGVyYXRvcmAgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBpdGVyYXRvciBUaGUgaXRlcmF0b3IgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBpdGVyYXRvclRvQXJyYXkoaXRlcmF0b3IpIHtcbiAgICB2YXIgZGF0YSxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoIShkYXRhID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICByZXN1bHQucHVzaChkYXRhLnZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgbWFwYCB0byBpdHMga2V5LXZhbHVlIHBhaXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBtYXBUb0FycmF5KG1hcCkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShtYXAuc2l6ZSk7XG5cbiAgICBtYXAuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSBba2V5LCB2YWx1ZV07XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhbGwgYHBsYWNlaG9sZGVyYCBlbGVtZW50cyBpbiBgYXJyYXlgIHdpdGggYW4gaW50ZXJuYWwgcGxhY2Vob2xkZXJcbiAgICogYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlaXIgaW5kZXhlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdG8gcmVwbGFjZS5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICovXG4gIGZ1bmN0aW9uIHJlcGxhY2VIb2xkZXJzKGFycmF5LCBwbGFjZWhvbGRlcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgaWYgKHZhbHVlID09PSBwbGFjZWhvbGRlciB8fCB2YWx1ZSA9PT0gUExBQ0VIT0xERVIpIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gUExBQ0VIT0xERVI7XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlcy5cbiAgICovXG4gIGZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICAgIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSB2YWx1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBzZXRgIHRvIGl0cyB2YWx1ZS12YWx1ZSBwYWlycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWUtdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBzZXRUb1BhaXJzKHNldCkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmVzdWx0WysraW5kZXhdID0gW3ZhbHVlLCB2YWx1ZV07XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5kZXhPZmAgd2hpY2ggcGVyZm9ybXMgc3RyaWN0IGVxdWFsaXR5XG4gICAqIGNvbXBhcmlzb25zIG9mIHZhbHVlcywgaS5lLiBgPT09YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaWN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgIHZhciBpbmRleCA9IGZyb21JbmRleCAtIDEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubGFzdEluZGV4T2ZgIHdoaWNoIHBlcmZvcm1zIHN0cmljdCBlcXVhbGl0eVxuICAgKiBjb21wYXJpc29ucyBvZiB2YWx1ZXMsIGkuZS4gYD09PWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmljdExhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4ICsgMTtcbiAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgaWYgKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbnVtYmVyIG9mIHN5bWJvbHMgaW4gYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmluZ1NpemUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgPyB1bmljb2RlU2l6ZShzdHJpbmcpXG4gICAgICA6IGFzY2lpU2l6ZShzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpbmdUb0FycmF5KHN0cmluZykge1xuICAgIHJldHVybiBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgID8gdW5pY29kZVRvQXJyYXkoc3RyaW5nKVxuICAgICAgOiBhc2NpaVRvQXJyYXkoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnVuZXNjYXBlYCB0byBjb252ZXJ0IEhUTUwgZW50aXRpZXMgdG8gY2hhcmFjdGVycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gdW5lc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL1xuICB2YXIgdW5lc2NhcGVIdG1sQ2hhciA9IGJhc2VQcm9wZXJ0eU9mKGh0bWxVbmVzY2FwZXMpO1xuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBzaXplIG9mIGEgVW5pY29kZSBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVNpemUoc3RyaW5nKSB7XG4gICAgdmFyIHJlc3VsdCA9IHJlVW5pY29kZS5sYXN0SW5kZXggPSAwO1xuICAgIHdoaWxlIChyZVVuaWNvZGUudGVzdChzdHJpbmcpKSB7XG4gICAgICArK3Jlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhIFVuaWNvZGUgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIHVuaWNvZGVUb0FycmF5KHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcubWF0Y2gocmVVbmljb2RlKSB8fCBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTcGxpdHMgYSBVbmljb2RlIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVdvcmRzKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcubWF0Y2gocmVVbmljb2RlV29yZCkgfHwgW107XG4gIH1cblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IHByaXN0aW5lIGBsb2Rhc2hgIGZ1bmN0aW9uIHVzaW5nIHRoZSBgY29udGV4dGAgb2JqZWN0LlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBfXG4gICAqIEBzaW5jZSAxLjEuMFxuICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbnRleHQ9cm9vdF0gVGhlIGNvbnRleHQgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYSBuZXcgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIF8ubWl4aW4oeyAnZm9vJzogXy5jb25zdGFudCgnZm9vJykgfSk7XG4gICAqXG4gICAqIHZhciBsb2Rhc2ggPSBfLnJ1bkluQ29udGV4dCgpO1xuICAgKiBsb2Rhc2gubWl4aW4oeyAnYmFyJzogbG9kYXNoLmNvbnN0YW50KCdiYXInKSB9KTtcbiAgICpcbiAgICogXy5pc0Z1bmN0aW9uKF8uZm9vKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKiBfLmlzRnVuY3Rpb24oXy5iYXIpO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKlxuICAgKiBsb2Rhc2guaXNGdW5jdGlvbihsb2Rhc2guZm9vKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICogbG9kYXNoLmlzRnVuY3Rpb24obG9kYXNoLmJhcik7XG4gICAqIC8vID0+IHRydWVcbiAgICpcbiAgICogLy8gQ3JlYXRlIGEgc3VwZWQtdXAgYGRlZmVyYCBpbiBOb2RlLmpzLlxuICAgKiB2YXIgZGVmZXIgPSBfLnJ1bkluQ29udGV4dCh7ICdzZXRUaW1lb3V0Jzogc2V0SW1tZWRpYXRlIH0pLmRlZmVyO1xuICAgKi9cbiAgdmFyIHJ1bkluQ29udGV4dCA9IChmdW5jdGlvbiBydW5JbkNvbnRleHQoY29udGV4dCkge1xuICAgIGNvbnRleHQgPSBjb250ZXh0ID09IG51bGwgPyByb290IDogXy5kZWZhdWx0cyhyb290Lk9iamVjdCgpLCBjb250ZXh0LCBfLnBpY2socm9vdCwgY29udGV4dFByb3BzKSk7XG5cbiAgICAvKiogQnVpbHQtaW4gY29uc3RydWN0b3IgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgQXJyYXkgPSBjb250ZXh0LkFycmF5LFxuICAgICAgICBEYXRlID0gY29udGV4dC5EYXRlLFxuICAgICAgICBFcnJvciA9IGNvbnRleHQuRXJyb3IsXG4gICAgICAgIEZ1bmN0aW9uID0gY29udGV4dC5GdW5jdGlvbixcbiAgICAgICAgTWF0aCA9IGNvbnRleHQuTWF0aCxcbiAgICAgICAgT2JqZWN0ID0gY29udGV4dC5PYmplY3QsXG4gICAgICAgIFJlZ0V4cCA9IGNvbnRleHQuUmVnRXhwLFxuICAgICAgICBTdHJpbmcgPSBjb250ZXh0LlN0cmluZyxcbiAgICAgICAgVHlwZUVycm9yID0gY29udGV4dC5UeXBlRXJyb3I7XG5cbiAgICAvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsXG4gICAgICAgIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICAgICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xuICAgIHZhciBjb3JlSnNEYXRhID0gY29udGV4dFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbiAgICAvKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG4gICAgdmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuICAgIC8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xuICAgIHZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4gICAgLyoqIFVzZWQgdG8gZ2VuZXJhdGUgdW5pcXVlIElEcy4gKi9cbiAgICB2YXIgaWRDb3VudGVyID0gMDtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG4gICAgdmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICAgICAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xuICAgIH0oKSk7XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gICAgICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gICAgICogb2YgdmFsdWVzLlxuICAgICAqL1xuICAgIHZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4gICAgLyoqIFVzZWQgdG8gaW5mZXIgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLiAqL1xuICAgIHZhciBvYmplY3RDdG9yU3RyaW5nID0gZnVuY1RvU3RyaW5nLmNhbGwoT2JqZWN0KTtcblxuICAgIC8qKiBVc2VkIHRvIHJlc3RvcmUgdGhlIG9yaWdpbmFsIGBfYCByZWZlcmVuY2UgaW4gYF8ubm9Db25mbGljdGAuICovXG4gICAgdmFyIG9sZERhc2ggPSByb290Ll87XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xuICAgIHZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gICAgICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAgICAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4gICAgKTtcblxuICAgIC8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gY29udGV4dC5CdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgICAgIFN5bWJvbCA9IGNvbnRleHQuU3ltYm9sLFxuICAgICAgICBVaW50OEFycmF5ID0gY29udGV4dC5VaW50OEFycmF5LFxuICAgICAgICBhbGxvY1Vuc2FmZSA9IEJ1ZmZlciA/IEJ1ZmZlci5hbGxvY1Vuc2FmZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCksXG4gICAgICAgIG9iamVjdENyZWF0ZSA9IE9iamVjdC5jcmVhdGUsXG4gICAgICAgIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGUsXG4gICAgICAgIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlLFxuICAgICAgICBzcHJlYWRhYmxlU3ltYm9sID0gU3ltYm9sID8gU3ltYm9sLmlzQ29uY2F0U3ByZWFkYWJsZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltSXRlcmF0b3IgPSBTeW1ib2wgPyBTeW1ib2wuaXRlcmF0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4gICAgdmFyIGRlZmluZVByb3BlcnR5ID0gKGZ1bmN0aW9uKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIGZ1bmMgPSBnZXROYXRpdmUoT2JqZWN0LCAnZGVmaW5lUHJvcGVydHknKTtcbiAgICAgICAgZnVuYyh7fSwgJycsIHt9KTtcbiAgICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH0oKSk7XG5cbiAgICAvKiogTW9ja2VkIGJ1aWx0LWlucy4gKi9cbiAgICB2YXIgY3R4Q2xlYXJUaW1lb3V0ID0gY29udGV4dC5jbGVhclRpbWVvdXQgIT09IHJvb3QuY2xlYXJUaW1lb3V0ICYmIGNvbnRleHQuY2xlYXJUaW1lb3V0LFxuICAgICAgICBjdHhOb3cgPSBEYXRlICYmIERhdGUubm93ICE9PSByb290LkRhdGUubm93ICYmIERhdGUubm93LFxuICAgICAgICBjdHhTZXRUaW1lb3V0ID0gY29udGV4dC5zZXRUaW1lb3V0ICE9PSByb290LnNldFRpbWVvdXQgJiYgY29udGV4dC5zZXRUaW1lb3V0O1xuXG4gICAgLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xuICAgIHZhciBuYXRpdmVDZWlsID0gTWF0aC5jZWlsLFxuICAgICAgICBuYXRpdmVGbG9vciA9IE1hdGguZmxvb3IsXG4gICAgICAgIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLFxuICAgICAgICBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICAgICAgbmF0aXZlSXNGaW5pdGUgPSBjb250ZXh0LmlzRmluaXRlLFxuICAgICAgICBuYXRpdmVKb2luID0gYXJyYXlQcm90by5qb2luLFxuICAgICAgICBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KSxcbiAgICAgICAgbmF0aXZlTWF4ID0gTWF0aC5tYXgsXG4gICAgICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluLFxuICAgICAgICBuYXRpdmVOb3cgPSBEYXRlLm5vdyxcbiAgICAgICAgbmF0aXZlUGFyc2VJbnQgPSBjb250ZXh0LnBhcnNlSW50LFxuICAgICAgICBuYXRpdmVSYW5kb20gPSBNYXRoLnJhbmRvbSxcbiAgICAgICAgbmF0aXZlUmV2ZXJzZSA9IGFycmF5UHJvdG8ucmV2ZXJzZTtcblxuICAgIC8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbiAgICB2YXIgRGF0YVZpZXcgPSBnZXROYXRpdmUoY29udGV4dCwgJ0RhdGFWaWV3JyksXG4gICAgICAgIE1hcCA9IGdldE5hdGl2ZShjb250ZXh0LCAnTWFwJyksXG4gICAgICAgIFByb21pc2UgPSBnZXROYXRpdmUoY29udGV4dCwgJ1Byb21pc2UnKSxcbiAgICAgICAgU2V0ID0gZ2V0TmF0aXZlKGNvbnRleHQsICdTZXQnKSxcbiAgICAgICAgV2Vha01hcCA9IGdldE5hdGl2ZShjb250ZXh0LCAnV2Vha01hcCcpLFxuICAgICAgICBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbiAgICAvKiogVXNlZCB0byBzdG9yZSBmdW5jdGlvbiBtZXRhZGF0YS4gKi9cbiAgICB2YXIgbWV0YU1hcCA9IFdlYWtNYXAgJiYgbmV3IFdlYWtNYXA7XG5cbiAgICAvKiogVXNlZCB0byBsb29rdXAgdW5taW5pZmllZCBmdW5jdGlvbiBuYW1lcy4gKi9cbiAgICB2YXIgcmVhbE5hbWVzID0ge307XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xuICAgIHZhciBkYXRhVmlld0N0b3JTdHJpbmcgPSB0b1NvdXJjZShEYXRhVmlldyksXG4gICAgICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgICAgICBwcm9taXNlQ3RvclN0cmluZyA9IHRvU291cmNlKFByb21pc2UpLFxuICAgICAgICBzZXRDdG9yU3RyaW5nID0gdG9Tb3VyY2UoU2V0KSxcbiAgICAgICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuICAgIC8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xuICAgIHZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by50b1N0cmluZyA6IHVuZGVmaW5lZDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCBvYmplY3Qgd2hpY2ggd3JhcHMgYHZhbHVlYCB0byBlbmFibGUgaW1wbGljaXQgbWV0aG9kXG4gICAgICogY2hhaW4gc2VxdWVuY2VzLiBNZXRob2RzIHRoYXQgb3BlcmF0ZSBvbiBhbmQgcmV0dXJuIGFycmF5cywgY29sbGVjdGlvbnMsXG4gICAgICogYW5kIGZ1bmN0aW9ucyBjYW4gYmUgY2hhaW5lZCB0b2dldGhlci4gTWV0aG9kcyB0aGF0IHJldHJpZXZlIGEgc2luZ2xlIHZhbHVlXG4gICAgICogb3IgbWF5IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZSB3aWxsIGF1dG9tYXRpY2FsbHkgZW5kIHRoZSBjaGFpbiBzZXF1ZW5jZVxuICAgICAqIGFuZCByZXR1cm4gdGhlIHVud3JhcHBlZCB2YWx1ZS4gT3RoZXJ3aXNlLCB0aGUgdmFsdWUgbXVzdCBiZSB1bndyYXBwZWRcbiAgICAgKiB3aXRoIGBfI3ZhbHVlYC5cbiAgICAgKlxuICAgICAqIEV4cGxpY2l0IGNoYWluIHNlcXVlbmNlcywgd2hpY2ggbXVzdCBiZSB1bndyYXBwZWQgd2l0aCBgXyN2YWx1ZWAsIG1heSBiZVxuICAgICAqIGVuYWJsZWQgdXNpbmcgYF8uY2hhaW5gLlxuICAgICAqXG4gICAgICogVGhlIGV4ZWN1dGlvbiBvZiBjaGFpbmVkIG1ldGhvZHMgaXMgbGF6eSwgdGhhdCBpcywgaXQncyBkZWZlcnJlZCB1bnRpbFxuICAgICAqIGBfI3ZhbHVlYCBpcyBpbXBsaWNpdGx5IG9yIGV4cGxpY2l0bHkgY2FsbGVkLlxuICAgICAqXG4gICAgICogTGF6eSBldmFsdWF0aW9uIGFsbG93cyBzZXZlcmFsIG1ldGhvZHMgdG8gc3VwcG9ydCBzaG9ydGN1dCBmdXNpb24uXG4gICAgICogU2hvcnRjdXQgZnVzaW9uIGlzIGFuIG9wdGltaXphdGlvbiB0byBtZXJnZSBpdGVyYXRlZSBjYWxsczsgdGhpcyBhdm9pZHNcbiAgICAgKiB0aGUgY3JlYXRpb24gb2YgaW50ZXJtZWRpYXRlIGFycmF5cyBhbmQgY2FuIGdyZWF0bHkgcmVkdWNlIHRoZSBudW1iZXIgb2ZcbiAgICAgKiBpdGVyYXRlZSBleGVjdXRpb25zLiBTZWN0aW9ucyBvZiBhIGNoYWluIHNlcXVlbmNlIHF1YWxpZnkgZm9yIHNob3J0Y3V0XG4gICAgICogZnVzaW9uIGlmIHRoZSBzZWN0aW9uIGlzIGFwcGxpZWQgdG8gYW4gYXJyYXkgYW5kIGl0ZXJhdGVlcyBhY2NlcHQgb25seVxuICAgICAqIG9uZSBhcmd1bWVudC4gVGhlIGhldXJpc3RpYyBmb3Igd2hldGhlciBhIHNlY3Rpb24gcXVhbGlmaWVzIGZvciBzaG9ydGN1dFxuICAgICAqIGZ1c2lvbiBpcyBzdWJqZWN0IHRvIGNoYW5nZS5cbiAgICAgKlxuICAgICAqIENoYWluaW5nIGlzIHN1cHBvcnRlZCBpbiBjdXN0b20gYnVpbGRzIGFzIGxvbmcgYXMgdGhlIGBfI3ZhbHVlYCBtZXRob2QgaXNcbiAgICAgKiBkaXJlY3RseSBvciBpbmRpcmVjdGx5IGluY2x1ZGVkIGluIHRoZSBidWlsZC5cbiAgICAgKlxuICAgICAqIEluIGFkZGl0aW9uIHRvIGxvZGFzaCBtZXRob2RzLCB3cmFwcGVycyBoYXZlIGBBcnJheWAgYW5kIGBTdHJpbmdgIG1ldGhvZHMuXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBgQXJyYXlgIG1ldGhvZHMgYXJlOlxuICAgICAqIGBjb25jYXRgLCBgam9pbmAsIGBwb3BgLCBgcHVzaGAsIGBzaGlmdGAsIGBzb3J0YCwgYHNwbGljZWAsIGFuZCBgdW5zaGlmdGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIGBTdHJpbmdgIG1ldGhvZHMgYXJlOlxuICAgICAqIGByZXBsYWNlYCBhbmQgYHNwbGl0YFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgbWV0aG9kcyB0aGF0IHN1cHBvcnQgc2hvcnRjdXQgZnVzaW9uIGFyZTpcbiAgICAgKiBgYXRgLCBgY29tcGFjdGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBkcm9wV2hpbGVgLCBgZmlsdGVyYCwgYGZpbmRgLFxuICAgICAqIGBmaW5kTGFzdGAsIGBoZWFkYCwgYGluaXRpYWxgLCBgbGFzdGAsIGBtYXBgLCBgcmVqZWN0YCwgYHJldmVyc2VgLCBgc2xpY2VgLFxuICAgICAqIGB0YWlsYCwgYHRha2VgLCBgdGFrZVJpZ2h0YCwgYHRha2VSaWdodFdoaWxlYCwgYHRha2VXaGlsZWAsIGFuZCBgdG9BcnJheWBcbiAgICAgKlxuICAgICAqIFRoZSBjaGFpbmFibGUgd3JhcHBlciBtZXRob2RzIGFyZTpcbiAgICAgKiBgYWZ0ZXJgLCBgYXJ5YCwgYGFzc2lnbmAsIGBhc3NpZ25JbmAsIGBhc3NpZ25JbldpdGhgLCBgYXNzaWduV2l0aGAsIGBhdGAsXG4gICAgICogYGJlZm9yZWAsIGBiaW5kYCwgYGJpbmRBbGxgLCBgYmluZEtleWAsIGBjYXN0QXJyYXlgLCBgY2hhaW5gLCBgY2h1bmtgLFxuICAgICAqIGBjb21taXRgLCBgY29tcGFjdGAsIGBjb25jYXRgLCBgY29uZm9ybXNgLCBgY29uc3RhbnRgLCBgY291bnRCeWAsIGBjcmVhdGVgLFxuICAgICAqIGBjdXJyeWAsIGBkZWJvdW5jZWAsIGBkZWZhdWx0c2AsIGBkZWZhdWx0c0RlZXBgLCBgZGVmZXJgLCBgZGVsYXlgLFxuICAgICAqIGBkaWZmZXJlbmNlYCwgYGRpZmZlcmVuY2VCeWAsIGBkaWZmZXJlbmNlV2l0aGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsXG4gICAgICogYGRyb3BSaWdodFdoaWxlYCwgYGRyb3BXaGlsZWAsIGBleHRlbmRgLCBgZXh0ZW5kV2l0aGAsIGBmaWxsYCwgYGZpbHRlcmAsXG4gICAgICogYGZsYXRNYXBgLCBgZmxhdE1hcERlZXBgLCBgZmxhdE1hcERlcHRoYCwgYGZsYXR0ZW5gLCBgZmxhdHRlbkRlZXBgLFxuICAgICAqIGBmbGF0dGVuRGVwdGhgLCBgZmxpcGAsIGBmbG93YCwgYGZsb3dSaWdodGAsIGBmcm9tUGFpcnNgLCBgZnVuY3Rpb25zYCxcbiAgICAgKiBgZnVuY3Rpb25zSW5gLCBgZ3JvdXBCeWAsIGBpbml0aWFsYCwgYGludGVyc2VjdGlvbmAsIGBpbnRlcnNlY3Rpb25CeWAsXG4gICAgICogYGludGVyc2VjdGlvbldpdGhgLCBgaW52ZXJ0YCwgYGludmVydEJ5YCwgYGludm9rZU1hcGAsIGBpdGVyYXRlZWAsIGBrZXlCeWAsXG4gICAgICogYGtleXNgLCBga2V5c0luYCwgYG1hcGAsIGBtYXBLZXlzYCwgYG1hcFZhbHVlc2AsIGBtYXRjaGVzYCwgYG1hdGNoZXNQcm9wZXJ0eWAsXG4gICAgICogYG1lbW9pemVgLCBgbWVyZ2VgLCBgbWVyZ2VXaXRoYCwgYG1ldGhvZGAsIGBtZXRob2RPZmAsIGBtaXhpbmAsIGBuZWdhdGVgLFxuICAgICAqIGBudGhBcmdgLCBgb21pdGAsIGBvbWl0QnlgLCBgb25jZWAsIGBvcmRlckJ5YCwgYG92ZXJgLCBgb3ZlckFyZ3NgLFxuICAgICAqIGBvdmVyRXZlcnlgLCBgb3ZlclNvbWVgLCBgcGFydGlhbGAsIGBwYXJ0aWFsUmlnaHRgLCBgcGFydGl0aW9uYCwgYHBpY2tgLFxuICAgICAqIGBwaWNrQnlgLCBgcGxhbnRgLCBgcHJvcGVydHlgLCBgcHJvcGVydHlPZmAsIGBwdWxsYCwgYHB1bGxBbGxgLCBgcHVsbEFsbEJ5YCxcbiAgICAgKiBgcHVsbEFsbFdpdGhgLCBgcHVsbEF0YCwgYHB1c2hgLCBgcmFuZ2VgLCBgcmFuZ2VSaWdodGAsIGByZWFyZ2AsIGByZWplY3RgLFxuICAgICAqIGByZW1vdmVgLCBgcmVzdGAsIGByZXZlcnNlYCwgYHNhbXBsZVNpemVgLCBgc2V0YCwgYHNldFdpdGhgLCBgc2h1ZmZsZWAsXG4gICAgICogYHNsaWNlYCwgYHNvcnRgLCBgc29ydEJ5YCwgYHNwbGljZWAsIGBzcHJlYWRgLCBgdGFpbGAsIGB0YWtlYCwgYHRha2VSaWdodGAsXG4gICAgICogYHRha2VSaWdodFdoaWxlYCwgYHRha2VXaGlsZWAsIGB0YXBgLCBgdGhyb3R0bGVgLCBgdGhydWAsIGB0b0FycmF5YCxcbiAgICAgKiBgdG9QYWlyc2AsIGB0b1BhaXJzSW5gLCBgdG9QYXRoYCwgYHRvUGxhaW5PYmplY3RgLCBgdHJhbnNmb3JtYCwgYHVuYXJ5YCxcbiAgICAgKiBgdW5pb25gLCBgdW5pb25CeWAsIGB1bmlvbldpdGhgLCBgdW5pcWAsIGB1bmlxQnlgLCBgdW5pcVdpdGhgLCBgdW5zZXRgLFxuICAgICAqIGB1bnNoaWZ0YCwgYHVuemlwYCwgYHVuemlwV2l0aGAsIGB1cGRhdGVgLCBgdXBkYXRlV2l0aGAsIGB2YWx1ZXNgLFxuICAgICAqIGB2YWx1ZXNJbmAsIGB3aXRob3V0YCwgYHdyYXBgLCBgeG9yYCwgYHhvckJ5YCwgYHhvcldpdGhgLCBgemlwYCxcbiAgICAgKiBgemlwT2JqZWN0YCwgYHppcE9iamVjdERlZXBgLCBhbmQgYHppcFdpdGhgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBtZXRob2RzIHRoYXQgYXJlICoqbm90KiogY2hhaW5hYmxlIGJ5IGRlZmF1bHQgYXJlOlxuICAgICAqIGBhZGRgLCBgYXR0ZW1wdGAsIGBjYW1lbENhc2VgLCBgY2FwaXRhbGl6ZWAsIGBjZWlsYCwgYGNsYW1wYCwgYGNsb25lYCxcbiAgICAgKiBgY2xvbmVEZWVwYCwgYGNsb25lRGVlcFdpdGhgLCBgY2xvbmVXaXRoYCwgYGNvbmZvcm1zVG9gLCBgZGVidXJyYCxcbiAgICAgKiBgZGVmYXVsdFRvYCwgYGRpdmlkZWAsIGBlYWNoYCwgYGVhY2hSaWdodGAsIGBlbmRzV2l0aGAsIGBlcWAsIGBlc2NhcGVgLFxuICAgICAqIGBlc2NhcGVSZWdFeHBgLCBgZXZlcnlgLCBgZmluZGAsIGBmaW5kSW5kZXhgLCBgZmluZEtleWAsIGBmaW5kTGFzdGAsXG4gICAgICogYGZpbmRMYXN0SW5kZXhgLCBgZmluZExhc3RLZXlgLCBgZmlyc3RgLCBgZmxvb3JgLCBgZm9yRWFjaGAsIGBmb3JFYWNoUmlnaHRgLFxuICAgICAqIGBmb3JJbmAsIGBmb3JJblJpZ2h0YCwgYGZvck93bmAsIGBmb3JPd25SaWdodGAsIGBnZXRgLCBgZ3RgLCBgZ3RlYCwgYGhhc2AsXG4gICAgICogYGhhc0luYCwgYGhlYWRgLCBgaWRlbnRpdHlgLCBgaW5jbHVkZXNgLCBgaW5kZXhPZmAsIGBpblJhbmdlYCwgYGludm9rZWAsXG4gICAgICogYGlzQXJndW1lbnRzYCwgYGlzQXJyYXlgLCBgaXNBcnJheUJ1ZmZlcmAsIGBpc0FycmF5TGlrZWAsIGBpc0FycmF5TGlrZU9iamVjdGAsXG4gICAgICogYGlzQm9vbGVhbmAsIGBpc0J1ZmZlcmAsIGBpc0RhdGVgLCBgaXNFbGVtZW50YCwgYGlzRW1wdHlgLCBgaXNFcXVhbGAsXG4gICAgICogYGlzRXF1YWxXaXRoYCwgYGlzRXJyb3JgLCBgaXNGaW5pdGVgLCBgaXNGdW5jdGlvbmAsIGBpc0ludGVnZXJgLCBgaXNMZW5ndGhgLFxuICAgICAqIGBpc01hcGAsIGBpc01hdGNoYCwgYGlzTWF0Y2hXaXRoYCwgYGlzTmFOYCwgYGlzTmF0aXZlYCwgYGlzTmlsYCwgYGlzTnVsbGAsXG4gICAgICogYGlzTnVtYmVyYCwgYGlzT2JqZWN0YCwgYGlzT2JqZWN0TGlrZWAsIGBpc1BsYWluT2JqZWN0YCwgYGlzUmVnRXhwYCxcbiAgICAgKiBgaXNTYWZlSW50ZWdlcmAsIGBpc1NldGAsIGBpc1N0cmluZ2AsIGBpc1VuZGVmaW5lZGAsIGBpc1R5cGVkQXJyYXlgLFxuICAgICAqIGBpc1dlYWtNYXBgLCBgaXNXZWFrU2V0YCwgYGpvaW5gLCBga2ViYWJDYXNlYCwgYGxhc3RgLCBgbGFzdEluZGV4T2ZgLFxuICAgICAqIGBsb3dlckNhc2VgLCBgbG93ZXJGaXJzdGAsIGBsdGAsIGBsdGVgLCBgbWF4YCwgYG1heEJ5YCwgYG1lYW5gLCBgbWVhbkJ5YCxcbiAgICAgKiBgbWluYCwgYG1pbkJ5YCwgYG11bHRpcGx5YCwgYG5vQ29uZmxpY3RgLCBgbm9vcGAsIGBub3dgLCBgbnRoYCwgYHBhZGAsXG4gICAgICogYHBhZEVuZGAsIGBwYWRTdGFydGAsIGBwYXJzZUludGAsIGBwb3BgLCBgcmFuZG9tYCwgYHJlZHVjZWAsIGByZWR1Y2VSaWdodGAsXG4gICAgICogYHJlcGVhdGAsIGByZXN1bHRgLCBgcm91bmRgLCBgcnVuSW5Db250ZXh0YCwgYHNhbXBsZWAsIGBzaGlmdGAsIGBzaXplYCxcbiAgICAgKiBgc25ha2VDYXNlYCwgYHNvbWVgLCBgc29ydGVkSW5kZXhgLCBgc29ydGVkSW5kZXhCeWAsIGBzb3J0ZWRMYXN0SW5kZXhgLFxuICAgICAqIGBzb3J0ZWRMYXN0SW5kZXhCeWAsIGBzdGFydENhc2VgLCBgc3RhcnRzV2l0aGAsIGBzdHViQXJyYXlgLCBgc3R1YkZhbHNlYCxcbiAgICAgKiBgc3R1Yk9iamVjdGAsIGBzdHViU3RyaW5nYCwgYHN0dWJUcnVlYCwgYHN1YnRyYWN0YCwgYHN1bWAsIGBzdW1CeWAsXG4gICAgICogYHRlbXBsYXRlYCwgYHRpbWVzYCwgYHRvRmluaXRlYCwgYHRvSW50ZWdlcmAsIGB0b0pTT05gLCBgdG9MZW5ndGhgLFxuICAgICAqIGB0b0xvd2VyYCwgYHRvTnVtYmVyYCwgYHRvU2FmZUludGVnZXJgLCBgdG9TdHJpbmdgLCBgdG9VcHBlcmAsIGB0cmltYCxcbiAgICAgKiBgdHJpbUVuZGAsIGB0cmltU3RhcnRgLCBgdHJ1bmNhdGVgLCBgdW5lc2NhcGVgLCBgdW5pcXVlSWRgLCBgdXBwZXJDYXNlYCxcbiAgICAgKiBgdXBwZXJGaXJzdGAsIGB2YWx1ZWAsIGFuZCBgd29yZHNgXG4gICAgICpcbiAgICAgKiBAbmFtZSBfXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAgaW4gYSBgbG9kYXNoYCBpbnN0YW5jZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDIsIDNdKTtcbiAgICAgKlxuICAgICAqIC8vIFJldHVybnMgYW4gdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIHdyYXBwZWQucmVkdWNlKF8uYWRkKTtcbiAgICAgKiAvLyA9PiA2XG4gICAgICpcbiAgICAgKiAvLyBSZXR1cm5zIGEgd3JhcHBlZCB2YWx1ZS5cbiAgICAgKiB2YXIgc3F1YXJlcyA9IHdyYXBwZWQubWFwKHNxdWFyZSk7XG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoc3F1YXJlcyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShzcXVhcmVzLnZhbHVlKCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsb2Rhc2godmFsdWUpIHtcbiAgICAgIGlmIChpc09iamVjdExpa2UodmFsdWUpICYmICFpc0FycmF5KHZhbHVlKSAmJiAhKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpKSB7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIExvZGFzaFdyYXBwZXIpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdfX3dyYXBwZWRfXycpKSB7XG4gICAgICAgICAgcmV0dXJuIHdyYXBwZXJDbG9uZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY3JlYXRlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGFzc2lnbmluZ1xuICAgICAqIHByb3BlcnRpZXMgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvdG8gVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUNyZWF0ZSA9IChmdW5jdGlvbigpIHtcbiAgICAgIGZ1bmN0aW9uIG9iamVjdCgpIHt9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocHJvdG8pIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChwcm90bykpIHtcbiAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9iamVjdENyZWF0ZSkge1xuICAgICAgICAgIHJldHVybiBvYmplY3RDcmVhdGUocHJvdG8pO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdC5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBvYmplY3Q7XG4gICAgICAgIG9iamVjdC5wcm90b3R5cGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH0oKSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZnVuY3Rpb24gd2hvc2UgcHJvdG90eXBlIGNoYWluIHNlcXVlbmNlIHdyYXBwZXJzIGluaGVyaXQgZnJvbS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUxvZGFzaCgpIHtcbiAgICAgIC8vIE5vIG9wZXJhdGlvbiBwZXJmb3JtZWQuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgY29uc3RydWN0b3IgZm9yIGNyZWF0aW5nIGBsb2Rhc2hgIHdyYXBwZXIgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtjaGFpbkFsbF0gRW5hYmxlIGV4cGxpY2l0IG1ldGhvZCBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTG9kYXNoV3JhcHBlcih2YWx1ZSwgY2hhaW5BbGwpIHtcbiAgICAgIHRoaXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHRoaXMuX19hY3Rpb25zX18gPSBbXTtcbiAgICAgIHRoaXMuX19jaGFpbl9fID0gISFjaGFpbkFsbDtcbiAgICAgIHRoaXMuX19pbmRleF9fID0gMDtcbiAgICAgIHRoaXMuX192YWx1ZXNfXyA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCeSBkZWZhdWx0LCB0aGUgdGVtcGxhdGUgZGVsaW1pdGVycyB1c2VkIGJ5IGxvZGFzaCBhcmUgbGlrZSB0aG9zZSBpblxuICAgICAqIGVtYmVkZGVkIFJ1YnkgKEVSQikgYXMgd2VsbCBhcyBFUzIwMTUgdGVtcGxhdGUgc3RyaW5ncy4gQ2hhbmdlIHRoZVxuICAgICAqIGZvbGxvd2luZyB0ZW1wbGF0ZSBzZXR0aW5ncyB0byB1c2UgYWx0ZXJuYXRpdmUgZGVsaW1pdGVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgbG9kYXNoLnRlbXBsYXRlU2V0dGluZ3MgPSB7XG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgYGRhdGFgIHByb3BlcnR5IHZhbHVlcyB0byBiZSBIVE1MLWVzY2FwZWQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2VzY2FwZSc6IHJlRXNjYXBlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGNvZGUgdG8gYmUgZXZhbHVhdGVkLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICAgKi9cbiAgICAgICdldmFsdWF0ZSc6IHJlRXZhbHVhdGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgYGRhdGFgIHByb3BlcnR5IHZhbHVlcyB0byBpbmplY3QuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2ludGVycG9sYXRlJzogcmVJbnRlcnBvbGF0ZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIHJlZmVyZW5jZSB0aGUgZGF0YSBvYmplY3QgaW4gdGhlIHRlbXBsYXRlIHRleHQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAqL1xuICAgICAgJ3ZhcmlhYmxlJzogJycsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBpbXBvcnQgdmFyaWFibGVzIGludG8gdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICAgKi9cbiAgICAgICdpbXBvcnRzJzoge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3MuaW1wb3J0c1xuICAgICAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICAgICAqL1xuICAgICAgICAnXyc6IGxvZGFzaFxuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBFbnN1cmUgd3JhcHBlcnMgYXJlIGluc3RhbmNlcyBvZiBgYmFzZUxvZGFzaGAuXG4gICAgbG9kYXNoLnByb3RvdHlwZSA9IGJhc2VMb2Rhc2gucHJvdG90eXBlO1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBsb2Rhc2g7XG5cbiAgICBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZSA9IGJhc2VDcmVhdGUoYmFzZUxvZGFzaC5wcm90b3R5cGUpO1xuICAgIExvZGFzaFdyYXBwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTG9kYXNoV3JhcHBlcjtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBsYXp5IHdyYXBwZXIgb2JqZWN0IHdoaWNoIHdyYXBzIGB2YWx1ZWAgdG8gZW5hYmxlIGxhenkgZXZhbHVhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMYXp5V3JhcHBlcih2YWx1ZSkge1xuICAgICAgdGhpcy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgdGhpcy5fX2FjdGlvbnNfXyA9IFtdO1xuICAgICAgdGhpcy5fX2Rpcl9fID0gMTtcbiAgICAgIHRoaXMuX19maWx0ZXJlZF9fID0gZmFsc2U7XG4gICAgICB0aGlzLl9faXRlcmF0ZWVzX18gPSBbXTtcbiAgICAgIHRoaXMuX190YWtlQ291bnRfXyA9IE1BWF9BUlJBWV9MRU5HVEg7XG4gICAgICB0aGlzLl9fdmlld3NfXyA9IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgbGF6eSB3cmFwcGVyIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xvbmVcbiAgICAgKiBAbWVtYmVyT2YgTGF6eVdyYXBwZXJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgYExhenlXcmFwcGVyYCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eUNsb25lKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzLl9fd3JhcHBlZF9fKTtcbiAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh0aGlzLl9fYWN0aW9uc19fKTtcbiAgICAgIHJlc3VsdC5fX2Rpcl9fID0gdGhpcy5fX2Rpcl9fO1xuICAgICAgcmVzdWx0Ll9fZmlsdGVyZWRfXyA9IHRoaXMuX19maWx0ZXJlZF9fO1xuICAgICAgcmVzdWx0Ll9faXRlcmF0ZWVzX18gPSBjb3B5QXJyYXkodGhpcy5fX2l0ZXJhdGVlc19fKTtcbiAgICAgIHJlc3VsdC5fX3Rha2VDb3VudF9fID0gdGhpcy5fX3Rha2VDb3VudF9fO1xuICAgICAgcmVzdWx0Ll9fdmlld3NfXyA9IGNvcHlBcnJheSh0aGlzLl9fdmlld3NfXyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVyc2VzIHRoZSBkaXJlY3Rpb24gb2YgbGF6eSBpdGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHJldmVyc2VcbiAgICAgKiBAbWVtYmVyT2YgTGF6eVdyYXBwZXJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgcmV2ZXJzZWQgYExhenlXcmFwcGVyYCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eVJldmVyc2UoKSB7XG4gICAgICBpZiAodGhpcy5fX2ZpbHRlcmVkX18pIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgcmVzdWx0Ll9fZGlyX18gPSAtMTtcbiAgICAgICAgcmVzdWx0Ll9fZmlsdGVyZWRfXyA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHJlc3VsdC5fX2Rpcl9fICo9IC0xO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyB0aGUgdW53cmFwcGVkIHZhbHVlIGZyb20gaXRzIGxhenkgd3JhcHBlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgdmFsdWVcbiAgICAgKiBAbWVtYmVyT2YgTGF6eVdyYXBwZXJcbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlWYWx1ZSgpIHtcbiAgICAgIHZhciBhcnJheSA9IHRoaXMuX193cmFwcGVkX18udmFsdWUoKSxcbiAgICAgICAgICBkaXIgPSB0aGlzLl9fZGlyX18sXG4gICAgICAgICAgaXNBcnIgPSBpc0FycmF5KGFycmF5KSxcbiAgICAgICAgICBpc1JpZ2h0ID0gZGlyIDwgMCxcbiAgICAgICAgICBhcnJMZW5ndGggPSBpc0FyciA/IGFycmF5Lmxlbmd0aCA6IDAsXG4gICAgICAgICAgdmlldyA9IGdldFZpZXcoMCwgYXJyTGVuZ3RoLCB0aGlzLl9fdmlld3NfXyksXG4gICAgICAgICAgc3RhcnQgPSB2aWV3LnN0YXJ0LFxuICAgICAgICAgIGVuZCA9IHZpZXcuZW5kLFxuICAgICAgICAgIGxlbmd0aCA9IGVuZCAtIHN0YXJ0LFxuICAgICAgICAgIGluZGV4ID0gaXNSaWdodCA/IGVuZCA6IChzdGFydCAtIDEpLFxuICAgICAgICAgIGl0ZXJhdGVlcyA9IHRoaXMuX19pdGVyYXRlZXNfXyxcbiAgICAgICAgICBpdGVyTGVuZ3RoID0gaXRlcmF0ZWVzLmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgdGFrZUNvdW50ID0gbmF0aXZlTWluKGxlbmd0aCwgdGhpcy5fX3Rha2VDb3VudF9fKTtcblxuICAgICAgaWYgKCFpc0FyciB8fCAoIWlzUmlnaHQgJiYgYXJyTGVuZ3RoID09IGxlbmd0aCAmJiB0YWtlQ291bnQgPT0gbGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gYmFzZVdyYXBwZXJWYWx1ZShhcnJheSwgdGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKGxlbmd0aC0tICYmIHJlc0luZGV4IDwgdGFrZUNvdW50KSB7XG4gICAgICAgIGluZGV4ICs9IGRpcjtcblxuICAgICAgICB2YXIgaXRlckluZGV4ID0gLTEsXG4gICAgICAgICAgICB2YWx1ZSA9IGFycmF5W2luZGV4XTtcblxuICAgICAgICB3aGlsZSAoKytpdGVySW5kZXggPCBpdGVyTGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSBpdGVyYXRlZXNbaXRlckluZGV4XSxcbiAgICAgICAgICAgICAgaXRlcmF0ZWUgPSBkYXRhLml0ZXJhdGVlLFxuICAgICAgICAgICAgICB0eXBlID0gZGF0YS50eXBlLFxuICAgICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICAgIGlmICh0eXBlID09IExBWllfTUFQX0ZMQUcpIHtcbiAgICAgICAgICAgIHZhbHVlID0gY29tcHV0ZWQ7XG4gICAgICAgICAgfSBlbHNlIGlmICghY29tcHV0ZWQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlID09IExBWllfRklMVEVSX0ZMQUcpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBicmVhayBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8vIEVuc3VyZSBgTGF6eVdyYXBwZXJgIGlzIGFuIGluc3RhbmNlIG9mIGBiYXNlTG9kYXNoYC5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUgPSBiYXNlQ3JlYXRlKGJhc2VMb2Rhc2gucHJvdG90eXBlKTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMYXp5V3JhcHBlcjtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG4gICAgICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoR2V0KGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gZGF0YVtrZXldO1xuICAgICAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkgPyBkYXRhW2tleV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgdGhpcy5zaXplICs9IHRoaXMuaGFzKGtleSkgPyAwIDogMTtcbiAgICAgIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuICAgIEhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuICAgIEhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG4gICAgSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbiAgICBIYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuICAgIEhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgICAgIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgZGF0YS5wb3AoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICAgIC0tdGhpcy5zaXplO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICAgICAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgICsrdGhpcy5zaXplO1xuICAgICAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbWFwIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAgICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAgICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICAgICAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gICAgICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgICAgIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuICAgIE1hcENhY2hlLnByb3RvdHlwZS5jbGVhciA9IG1hcENhY2hlQ2xlYXI7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuaGFzID0gbWFwQ2FjaGVIYXM7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IGNhY2hlIG9iamVjdCB0byBzdG9yZSB1bmlxdWUgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFNldENhY2hlKHZhbHVlcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdmFsdWVzID09IG51bGwgPyAwIDogdmFsdWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuYWRkKHZhbHVlc1tpbmRleF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGFkZFxuICAgICAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICAgICAqIEBhbGlhcyBwdXNoXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0Q2FjaGVBZGQodmFsdWUpIHtcbiAgICAgIHRoaXMuX19kYXRhX18uc2V0KHZhbHVlLCBIQVNIX1VOREVGSU5FRCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiB0aGUgYXJyYXkgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldENhY2hlSGFzKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXModmFsdWUpO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBTZXRDYWNoZWAuXG4gICAgU2V0Q2FjaGUucHJvdG90eXBlLmFkZCA9IFNldENhY2hlLnByb3RvdHlwZS5wdXNoID0gc2V0Q2FjaGVBZGQ7XG4gICAgU2V0Q2FjaGUucHJvdG90eXBlLmhhcyA9IHNldENhY2hlSGFzO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHN0YWNrIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFN0YWNrKGVudHJpZXMpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG4gICAgICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgc3RhY2suXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICByZXN1bHQgPSBkYXRhWydkZWxldGUnXShrZXkpO1xuXG4gICAgICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgc3RhY2sgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHN0YWNrIGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgICAgIHZhciBwYWlycyA9IGRhdGEuX19kYXRhX187XG4gICAgICAgIGlmICghTWFwIHx8IChwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkpIHtcbiAgICAgICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICAgICAgdGhpcy5zaXplID0gKytkYXRhLnNpemU7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGUocGFpcnMpO1xuICAgICAgfVxuICAgICAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgU3RhY2tgLlxuICAgIFN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG4gICAgU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0YWNrRGVsZXRlO1xuICAgIFN0YWNrLnByb3RvdHlwZS5nZXQgPSBzdGFja0dldDtcbiAgICBTdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG4gICAgU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgICAgIGlzQXJnID0gIWlzQXJyICYmIGlzQXJndW1lbnRzKHZhbHVlKSxcbiAgICAgICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgICAgICBza2lwSW5kZXhlcyA9IGlzQXJyIHx8IGlzQXJnIHx8IGlzQnVmZiB8fCBpc1R5cGUsXG4gICAgICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgICAgIC8vIFNhZmFyaSA5IGhhcyBlbnVtZXJhYmxlIGBhcmd1bWVudHMubGVuZ3RoYCBpbiBzdHJpY3QgbW9kZS5cbiAgICAgICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgICAgICAoaXNCdWZmICYmIChrZXkgPT0gJ29mZnNldCcgfHwga2V5ID09ICdwYXJlbnQnKSkgfHxcbiAgICAgICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAgICAgLy8gU2tpcCBpbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgICAgICkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2FtcGxlYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheVNhbXBsZShhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBhcnJheVtiYXNlUmFuZG9tKDAsIGxlbmd0aCAtIDEpXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2FtcGxlU2l6ZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheVNhbXBsZVNpemUoYXJyYXksIG4pIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihjb3B5QXJyYXkoYXJyYXkpLCBiYXNlQ2xhbXAobiwgMCwgYXJyYXkubGVuZ3RoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNodWZmbGVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzaHVmZmxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNodWZmbGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2h1ZmZsZShhcnJheSkge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGNvcHlBcnJheShhcnJheSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXNzaWduVmFsdWVgIGV4Y2VwdCB0aGF0IGl0IGRvZXNuJ3QgYXNzaWduXG4gICAgICogYHVuZGVmaW5lZGAgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmICFlcShvYmplY3Rba2V5XSwgdmFsdWUpKSB8fFxuICAgICAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgYHZhbHVlYCB0byBga2V5YCBvZiBgb2JqZWN0YCBpZiB0aGUgZXhpc3RpbmcgdmFsdWUgaXMgbm90IGVxdWl2YWxlbnRcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgICAgIGlmICghKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGVxKG9ialZhbHVlLCB2YWx1ZSkpIHx8XG4gICAgICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZ2dyZWdhdGVzIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCBvbiBgYWNjdW11bGF0b3JgIHdpdGgga2V5cyB0cmFuc2Zvcm1lZFxuICAgICAqIGJ5IGBpdGVyYXRlZWAgYW5kIHZhbHVlcyBzZXQgYnkgYHNldHRlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGFnZ3JlZ2F0ZWQgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBZ2dyZWdhdG9yKGNvbGxlY3Rpb24sIHNldHRlciwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHNldHRlcihhY2N1bXVsYXRvciwgdmFsdWUsIGl0ZXJhdGVlKHZhbHVlKSwgY29sbGVjdGlvbik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICAgICAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbkluYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAgICAgKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBc3NpZ25JbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGFzc2lnblZhbHVlYCBhbmQgYGFzc2lnbk1lcmdlVmFsdWVgIHdpdGhvdXRcbiAgICAgKiB2YWx1ZSBjaGVja3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIGlmIChrZXkgPT0gJ19fcHJvdG9fXycgJiYgZGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgZGVmaW5lUHJvcGVydHkob2JqZWN0LCBrZXksIHtcbiAgICAgICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAnZW51bWVyYWJsZSc6IHRydWUsXG4gICAgICAgICAgJ3ZhbHVlJzogdmFsdWUsXG4gICAgICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHBpY2tlZCBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXQob2JqZWN0LCBwYXRocykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgc2tpcCA9IG9iamVjdCA9PSBudWxsO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gc2tpcCA/IHVuZGVmaW5lZCA6IGdldChvYmplY3QsIHBhdGhzW2luZGV4XSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsYW1wYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjbGFtcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjbGFtcGVkIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ2xhbXAobnVtYmVyLCBsb3dlciwgdXBwZXIpIHtcbiAgICAgIGlmIChudW1iZXIgPT09IG51bWJlcikge1xuICAgICAgICBpZiAodXBwZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG51bWJlciA9IG51bWJlciA8PSB1cHBlciA/IG51bWJlciA6IHVwcGVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsb3dlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbnVtYmVyID0gbnVtYmVyID49IGxvd2VyID8gbnVtYmVyIDogbG93ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudW1iZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xvbmVgIGFuZCBgXy5jbG9uZURlZXBgIHdoaWNoIHRyYWNrc1xuICAgICAqIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gICAgICogIDEgLSBEZWVwIGNsb25lXG4gICAgICogIDIgLSBGbGF0dGVuIGluaGVyaXRlZCBwcm9wZXJ0aWVzXG4gICAgICogIDQgLSBDbG9uZSBzeW1ib2xzXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2tleV0gVGhlIGtleSBvZiBgdmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgcGFyZW50IG9iamVjdCBvZiBgdmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBhbmQgdGhlaXIgY2xvbmUgY291bnRlcnBhcnRzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNsb25lKHZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIG9iamVjdCwgc3RhY2spIHtcbiAgICAgIHZhciByZXN1bHQsXG4gICAgICAgICAgaXNEZWVwID0gYml0bWFzayAmIENMT05FX0RFRVBfRkxBRyxcbiAgICAgICAgICBpc0ZsYXQgPSBiaXRtYXNrICYgQ0xPTkVfRkxBVF9GTEFHLFxuICAgICAgICAgIGlzRnVsbCA9IGJpdG1hc2sgJiBDTE9ORV9TWU1CT0xTX0ZMQUc7XG5cbiAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgIHJlc3VsdCA9IG9iamVjdCA/IGN1c3RvbWl6ZXIodmFsdWUsIGtleSwgb2JqZWN0LCBzdGFjaykgOiBjdXN0b21pemVyKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSk7XG4gICAgICBpZiAoaXNBcnIpIHtcbiAgICAgICAgcmVzdWx0ID0gaW5pdENsb25lQXJyYXkodmFsdWUpO1xuICAgICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICAgIHJldHVybiBjb3B5QXJyYXkodmFsdWUsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgICAgICAgaXNGdW5jID0gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZztcblxuICAgICAgICBpZiAoaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGNsb25lQnVmZmVyKHZhbHVlLCBpc0RlZXApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YWcgPT0gb2JqZWN0VGFnIHx8IHRhZyA9PSBhcmdzVGFnIHx8IChpc0Z1bmMgJiYgIW9iamVjdCkpIHtcbiAgICAgICAgICByZXN1bHQgPSAoaXNGbGF0IHx8IGlzRnVuYykgPyB7fSA6IGluaXRDbG9uZU9iamVjdCh2YWx1ZSk7XG4gICAgICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgICAgIHJldHVybiBpc0ZsYXRcbiAgICAgICAgICAgICAgPyBjb3B5U3ltYm9sc0luKHZhbHVlLCBiYXNlQXNzaWduSW4ocmVzdWx0LCB2YWx1ZSkpXG4gICAgICAgICAgICAgIDogY29weVN5bWJvbHModmFsdWUsIGJhc2VBc3NpZ24ocmVzdWx0LCB2YWx1ZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIWNsb25lYWJsZVRhZ3NbdGFnXSkge1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdCA/IHZhbHVlIDoge307XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUJ5VGFnKHZhbHVlLCB0YWcsIGlzRGVlcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIENoZWNrIGZvciBjaXJjdWxhciByZWZlcmVuY2VzIGFuZCByZXR1cm4gaXRzIGNvcnJlc3BvbmRpbmcgY2xvbmUuXG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQodmFsdWUpO1xuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQ7XG4gICAgICB9XG4gICAgICBzdGFjay5zZXQodmFsdWUsIHJlc3VsdCk7XG5cbiAgICAgIGlmIChpc1NldCh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSkge1xuICAgICAgICAgIHJlc3VsdC5hZGQoYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdWJWYWx1ZSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChpc01hcCh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICAgICAgcmVzdWx0LnNldChrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBrZXlzRnVuYyA9IGlzRnVsbFxuICAgICAgICA/IChpc0ZsYXQgPyBnZXRBbGxLZXlzSW4gOiBnZXRBbGxLZXlzKVxuICAgICAgICA6IChpc0ZsYXQgPyBrZXlzSW4gOiBrZXlzKTtcblxuICAgICAgdmFyIHByb3BzID0gaXNBcnIgPyB1bmRlZmluZWQgOiBrZXlzRnVuYyh2YWx1ZSk7XG4gICAgICBhcnJheUVhY2gocHJvcHMgfHwgdmFsdWUsIGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKHByb3BzKSB7XG4gICAgICAgICAga2V5ID0gc3ViVmFsdWU7XG4gICAgICAgICAgc3ViVmFsdWUgPSB2YWx1ZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IHBvcHVsYXRlIGNsb25lIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY29uZm9ybXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ29uZm9ybXMoc291cmNlKSB7XG4gICAgICB2YXIgcHJvcHMgPSBrZXlzKHNvdXJjZSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwgcHJvcHMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jb25mb3Jtc1RvYCB3aGljaCBhY2NlcHRzIGBwcm9wc2AgdG8gY2hlY2suXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGNvbmZvcm1zLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIHByb3BzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAhbGVuZ3RoO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3BzW2xlbmd0aF0sXG4gICAgICAgICAgICBwcmVkaWNhdGUgPSBzb3VyY2Vba2V5XSxcbiAgICAgICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgaWYgKCh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHx8ICFwcmVkaWNhdGUodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5kZWxheWAgYW5kIGBfLmRlZmVyYCB3aGljaCBhY2NlcHRzIGBhcmdzYFxuICAgICAqIHRvIHByb3ZpZGUgdG8gYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBwcm92aWRlIHRvIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfE9iamVjdH0gUmV0dXJucyB0aGUgdGltZXIgaWQgb3IgdGltZW91dCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZURlbGF5KGZ1bmMsIHdhaXQsIGFyZ3MpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7IH0sIHdhaXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5kaWZmZXJlbmNlYCB3aXRob3V0IHN1cHBvcnRcbiAgICAgKiBmb3IgZXhjbHVkaW5nIG11bHRpcGxlIGFycmF5cyBvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VEaWZmZXJlbmNlKGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgaXNDb21tb24gPSB0cnVlLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBbXSxcbiAgICAgICAgICB2YWx1ZXNMZW5ndGggPSB2YWx1ZXMubGVuZ3RoO1xuXG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhbHVlcyA9IGFycmF5TWFwKHZhbHVlcywgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICB9XG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodmFsdWVzLmxlbmd0aCA+PSBMQVJHRV9BUlJBWV9TSVpFKSB7XG4gICAgICAgIGluY2x1ZGVzID0gY2FjaGVIYXM7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcyA9IG5ldyBTZXRDYWNoZSh2YWx1ZXMpO1xuICAgICAgfVxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID09IG51bGwgPyB2YWx1ZSA6IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKGlzQ29tbW9uICYmIGNvbXB1dGVkID09PSBjb21wdXRlZCkge1xuICAgICAgICAgIHZhciB2YWx1ZXNJbmRleCA9IHZhbHVlc0xlbmd0aDtcbiAgICAgICAgICB3aGlsZSAodmFsdWVzSW5kZXgtLSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlc1t2YWx1ZXNJbmRleF0gPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWluY2x1ZGVzKHZhbHVlcywgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICovXG4gICAgdmFyIGJhc2VFYWNoID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93bik7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoUmlnaHRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICovXG4gICAgdmFyIGJhc2VFYWNoUmlnaHQgPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duUmlnaHQsIHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZXZlcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRXZlcnkoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHQgPSAhIXByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5tYXhgIGFuZCBgXy5taW5gIHdoaWNoIGFjY2VwdHMgYVxuICAgICAqIGBjb21wYXJhdG9yYCB0byBkZXRlcm1pbmUgdGhlIGV4dHJlbXVtIHZhbHVlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciB1c2VkIHRvIGNvbXBhcmUgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBleHRyZW11bSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRXh0cmVtdW0oYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGN1cnJlbnQgPSBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgaWYgKGN1cnJlbnQgIT0gbnVsbCAmJiAoY29tcHV0ZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IChjdXJyZW50ID09PSBjdXJyZW50ICYmICFpc1N5bWJvbChjdXJyZW50KSlcbiAgICAgICAgICAgICAgOiBjb21wYXJhdG9yKGN1cnJlbnQsIGNvbXB1dGVkKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHZhciBjb21wdXRlZCA9IGN1cnJlbnQsXG4gICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbGxgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZpbGwuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZmlsbCBgYXJyYXlgIHdpdGguXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgc3RhcnQgPSB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICBzdGFydCA9IC1zdGFydCA+IGxlbmd0aCA/IDAgOiAobGVuZ3RoICsgc3RhcnQpO1xuICAgICAgfVxuICAgICAgZW5kID0gKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IGxlbmd0aCkgPyBsZW5ndGggOiB0b0ludGVnZXIoZW5kKTtcbiAgICAgIGlmIChlbmQgPCAwKSB7XG4gICAgICAgIGVuZCArPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBlbmQgPSBzdGFydCA+IGVuZCA/IDAgOiB0b0xlbmd0aChlbmQpO1xuICAgICAgd2hpbGUgKHN0YXJ0IDwgZW5kKSB7XG4gICAgICAgIGFycmF5W3N0YXJ0KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmlsdGVyYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmlsdGVyKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZsYXR0ZW5gIHdpdGggc3VwcG9ydCBmb3IgcmVzdHJpY3RpbmcgZmxhdHRlbmluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRlcHRoIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtwcmVkaWNhdGU9aXNGbGF0dGVuYWJsZV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1N0cmljdF0gUmVzdHJpY3QgdG8gdmFsdWVzIHRoYXQgcGFzcyBgcHJlZGljYXRlYCBjaGVja3MuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdD1bXV0gVGhlIGluaXRpYWwgcmVzdWx0IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBwcmVkaWNhdGUgfHwgKHByZWRpY2F0ZSA9IGlzRmxhdHRlbmFibGUpO1xuICAgICAgcmVzdWx0IHx8IChyZXN1bHQgPSBbXSk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKGRlcHRoID4gMCAmJiBwcmVkaWNhdGUodmFsdWUpKSB7XG4gICAgICAgICAgaWYgKGRlcHRoID4gMSkge1xuICAgICAgICAgICAgLy8gUmVjdXJzaXZlbHkgZmxhdHRlbiBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgICAgIGJhc2VGbGF0dGVuKHZhbHVlLCBkZXB0aCAtIDEsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFycmF5UHVzaChyZXN1bHQsIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzU3RyaWN0KSB7XG4gICAgICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGJhc2VGb3JPd25gIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYG9iamVjdGBcbiAgICAgKiBwcm9wZXJ0aWVzIHJldHVybmVkIGJ5IGBrZXlzRnVuY2AgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAgICAgKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgdmFyIGJhc2VGb3IgPSBjcmVhdGVCYXNlRm9yKCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGJhc2VGb3JgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllc1xuICAgICAqIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUZvclJpZ2h0ID0gY3JlYXRlQmFzZUZvcih0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93bmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvcihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25SaWdodGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRm9yT3duUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yUmlnaHQob2JqZWN0LCBpdGVyYXRlZSwga2V5cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZnVuY3Rpb25zYCB3aGljaCBjcmVhdGVzIGFuIGFycmF5IG9mXG4gICAgICogYG9iamVjdGAgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZmlsdGVyZWQgZnJvbSBgcHJvcHNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZmlsdGVyLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZ1bmN0aW9ucyhvYmplY3QsIHByb3BzKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaWx0ZXIocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihvYmplY3Rba2V5XSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5nZXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVmYXVsdCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChvYmplY3QgIT0gbnVsbCAmJiBpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBvYmplY3QgPSBvYmplY3RbdG9LZXkocGF0aFtpbmRleCsrXSldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChpbmRleCAmJiBpbmRleCA9PSBsZW5ndGgpID8gb2JqZWN0IDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRBbGxLZXlzYCBhbmQgYGdldEFsbEtleXNJbmAgd2hpY2ggdXNlc1xuICAgICAqIGBrZXlzRnVuY2AgYW5kIGBzeW1ib2xzRnVuY2AgdG8gZ2V0IHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICAgICAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN5bWJvbHNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNGdW5jLCBzeW1ib2xzRnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IGtleXNGdW5jKG9iamVjdCk7XG4gICAgICByZXR1cm4gaXNBcnJheShvYmplY3QpID8gcmVzdWx0IDogYXJyYXlQdXNoKHJlc3VsdCwgc3ltYm9sc0Z1bmMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gICAgICB9XG4gICAgICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgICAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5ndGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR3QodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPiBvdGhlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSGFzKG9iamVjdCwga2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSGFzSW4ob2JqZWN0LCBrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBrZXkgaW4gT2JqZWN0KG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW5SYW5nZWAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG51bWJlcmAgaXMgaW4gdGhlIHJhbmdlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKSB7XG4gICAgICByZXR1cm4gbnVtYmVyID49IG5hdGl2ZU1pbihzdGFydCwgZW5kKSAmJiBudW1iZXIgPCBuYXRpdmVNYXgoc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmludGVyc2VjdGlvbmAsIHdpdGhvdXQgc3VwcG9ydFxuICAgICAqIGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB0aGF0IGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5cyBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBzaGFyZWQgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnRlcnNlY3Rpb24oYXJyYXlzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluY2x1ZGVzID0gY29tcGFyYXRvciA/IGFycmF5SW5jbHVkZXNXaXRoIDogYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheXNbMF0ubGVuZ3RoLFxuICAgICAgICAgIG90aExlbmd0aCA9IGFycmF5cy5sZW5ndGgsXG4gICAgICAgICAgb3RoSW5kZXggPSBvdGhMZW5ndGgsXG4gICAgICAgICAgY2FjaGVzID0gQXJyYXkob3RoTGVuZ3RoKSxcbiAgICAgICAgICBtYXhMZW5ndGggPSBJbmZpbml0eSxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKG90aEluZGV4LS0pIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJyYXlzW290aEluZGV4XTtcbiAgICAgICAgaWYgKG90aEluZGV4ICYmIGl0ZXJhdGVlKSB7XG4gICAgICAgICAgYXJyYXkgPSBhcnJheU1hcChhcnJheSwgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgbWF4TGVuZ3RoID0gbmF0aXZlTWluKGFycmF5Lmxlbmd0aCwgbWF4TGVuZ3RoKTtcbiAgICAgICAgY2FjaGVzW290aEluZGV4XSA9ICFjb21wYXJhdG9yICYmIChpdGVyYXRlZSB8fCAobGVuZ3RoID49IDEyMCAmJiBhcnJheS5sZW5ndGggPj0gMTIwKSlcbiAgICAgICAgICA/IG5ldyBTZXRDYWNoZShvdGhJbmRleCAmJiBhcnJheSlcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGFycmF5ID0gYXJyYXlzWzBdO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBzZWVuID0gY2FjaGVzWzBdO1xuXG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIHJlc3VsdC5sZW5ndGggPCBtYXhMZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoIShzZWVuXG4gICAgICAgICAgICAgID8gY2FjaGVIYXMoc2VlbiwgY29tcHV0ZWQpXG4gICAgICAgICAgICAgIDogaW5jbHVkZXMocmVzdWx0LCBjb21wdXRlZCwgY29tcGFyYXRvcilcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICBvdGhJbmRleCA9IG90aExlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoLS1vdGhJbmRleCkge1xuICAgICAgICAgICAgdmFyIGNhY2hlID0gY2FjaGVzW290aEluZGV4XTtcbiAgICAgICAgICAgIGlmICghKGNhY2hlXG4gICAgICAgICAgICAgICAgICA/IGNhY2hlSGFzKGNhY2hlLCBjb21wdXRlZClcbiAgICAgICAgICAgICAgICAgIDogaW5jbHVkZXMoYXJyYXlzW290aEluZGV4XSwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNlZW4pIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbnZlcnRgIGFuZCBgXy5pbnZlcnRCeWAgd2hpY2ggaW52ZXJ0c1xuICAgICAqIGBvYmplY3RgIHdpdGggdmFsdWVzIHRyYW5zZm9ybWVkIGJ5IGBpdGVyYXRlZWAgYW5kIHNldCBieSBgc2V0dGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnZlcnRlcihvYmplY3QsIHNldHRlciwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIHNldHRlcihhY2N1bXVsYXRvciwgaXRlcmF0ZWUodmFsdWUpLCBrZXksIG9iamVjdCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbnZva2VgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIG1ldGhvZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW52b2tlKG9iamVjdCwgcGF0aCwgYXJncykge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICBvYmplY3QgPSBwYXJlbnQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHZhciBmdW5jID0gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBvYmplY3RbdG9LZXkobGFzdChwYXRoKSldO1xuICAgICAgcmV0dXJuIGZ1bmMgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFwcGx5KGZ1bmMsIG9iamVjdCwgYXJncyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJyYXlCdWZmZXJgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNBcnJheUJ1ZmZlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJyYXlCdWZmZXJUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNEYXRlYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBkYXRlIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0RhdGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGRhdGVUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAgd2hpY2ggc3VwcG9ydHMgcGFydGlhbCBjb21wYXJpc29uc1xuICAgICAqIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gICAgICogIDEgLSBVbm9yZGVyZWQgY29tcGFyaXNvblxuICAgICAqICAyIC0gUGFydGlhbCBjb21wYXJpc29uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgdmFsdWVgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICBpZiAodmFsdWUgPT09IG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlID09IG51bGwgfHwgb3RoZXIgPT0gbnVsbCB8fCAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzT2JqZWN0TGlrZShvdGhlcikpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJc0VxdWFsRGVlcCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGJhc2VJc0VxdWFsLCBzdGFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbGAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICAgICAqIGRlZXAgY29tcGFyaXNvbnMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAgICAgKiByZWZlcmVuY2VzIHRvIGJlIGNvbXBhcmVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgb2JqSXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICAgICAgb3RoSXNBcnIgPSBpc0FycmF5KG90aGVyKSxcbiAgICAgICAgICBvYmpUYWcgPSBvYmpJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG9iamVjdCksXG4gICAgICAgICAgb3RoVGFnID0gb3RoSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvdGhlcik7XG5cbiAgICAgIG9ialRhZyA9IG9ialRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb2JqVGFnO1xuICAgICAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvdGhUYWc7XG5cbiAgICAgIHZhciBvYmpJc09iaiA9IG9ialRhZyA9PSBvYmplY3RUYWcsXG4gICAgICAgICAgb3RoSXNPYmogPSBvdGhUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgICAgIGlmIChpc1NhbWVUYWcgJiYgaXNCdWZmZXIob2JqZWN0KSkge1xuICAgICAgICBpZiAoIWlzQnVmZmVyKG90aGVyKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBvYmpJc0FyciA9IHRydWU7XG4gICAgICAgIG9iaklzT2JqID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoaXNTYW1lVGFnICYmICFvYmpJc09iaikge1xuICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgICByZXR1cm4gKG9iaklzQXJyIHx8IGlzVHlwZWRBcnJheShvYmplY3QpKVxuICAgICAgICAgID8gZXF1YWxBcnJheXMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaylcbiAgICAgICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghKGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRykpIHtcbiAgICAgICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgICAgIG90aElzV3JhcHBlZCA9IG90aElzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsICdfX3dyYXBwZWRfXycpO1xuXG4gICAgICAgIGlmIChvYmpJc1dyYXBwZWQgfHwgb3RoSXNXcmFwcGVkKSB7XG4gICAgICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgICAgICBvdGhVbndyYXBwZWQgPSBvdGhJc1dyYXBwZWQgPyBvdGhlci52YWx1ZSgpIDogb3RoZXI7XG5cbiAgICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHJldHVybiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXBgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc01hcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBtYXBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXRjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG1hdGNoRGF0YSBUaGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3MgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhLCBjdXN0b21pemVyKSB7XG4gICAgICB2YXIgaW5kZXggPSBtYXRjaERhdGEubGVuZ3RoLFxuICAgICAgICAgIGxlbmd0aCA9IGluZGV4LFxuICAgICAgICAgIG5vQ3VzdG9taXplciA9ICFjdXN0b21pemVyO1xuXG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICFsZW5ndGg7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIHZhciBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICAgICAgaWYgKChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSlcbiAgICAgICAgICAgICAgPyBkYXRhWzFdICE9PSBvYmplY3RbZGF0YVswXV1cbiAgICAgICAgICAgICAgOiAhKGRhdGFbMF0gaW4gb2JqZWN0KVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICAgICAgdmFyIGtleSA9IGRhdGFbMF0sXG4gICAgICAgICAgICBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICAgICAgc3JjVmFsdWUgPSBkYXRhWzFdO1xuXG4gICAgICAgIGlmIChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSkge1xuICAgICAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHN0YWNrID0gbmV3IFN0YWNrO1xuICAgICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCEocmVzdWx0ID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgICAgICAgICA6IHJlc3VsdFxuICAgICAgICAgICAgICApKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNSZWdFeHBgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHJlZ2V4cCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1JlZ0V4cCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gcmVnZXhwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzU2V0YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNTZXQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gc2V0VGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzVHlwZWRBcnJheWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgICAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLml0ZXJhdGVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBbdmFsdWU9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBpdGVyYXRlZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXRlcmF0ZWUodmFsdWUpIHtcbiAgICAgIC8vIERvbid0IHN0b3JlIHRoZSBgdHlwZW9mYCByZXN1bHQgaW4gYSB2YXJpYWJsZSB0byBhdm9pZCBhIEpJVCBidWcgaW4gU2FmYXJpIDkuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1NjAzNCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpXG4gICAgICAgICAgPyBiYXNlTWF0Y2hlc1Byb3BlcnR5KHZhbHVlWzBdLCB2YWx1ZVsxXSlcbiAgICAgICAgICA6IGJhc2VNYXRjaGVzKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9wZXJ0eSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgICAgIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c0luYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VLZXlzSW4ob2JqZWN0KSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUtleXNJbihvYmplY3QpO1xuICAgICAgfVxuICAgICAgdmFyIGlzUHJvdG8gPSBpc1Byb3RvdHlwZShvYmplY3QpLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgIGlmICghKGtleSA9PSAnY29uc3RydWN0b3InICYmIChpc1Byb3RvIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5sdGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTHQodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPCBvdGhlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXBgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gQXJyYXkoY29sbGVjdGlvbi5sZW5ndGgpIDogW107XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0WysraW5kZXhdID0gaXRlcmF0ZWUodmFsdWUsIGtleSwgY29sbGVjdGlvbik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXRjaGVzKHNvdXJjZSkge1xuICAgICAgdmFyIG1hdGNoRGF0YSA9IGdldE1hdGNoRGF0YShzb3VyY2UpO1xuICAgICAgaWYgKG1hdGNoRGF0YS5sZW5ndGggPT0gMSAmJiBtYXRjaERhdGFbMF1bMl0pIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKG1hdGNoRGF0YVswXVswXSwgbWF0Y2hEYXRhWzBdWzFdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdCA9PT0gc291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzUHJvcGVydHlgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNyY1ZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgICAgIGlmIChpc0tleShwYXRoKSAmJiBpc1N0cmljdENvbXBhcmFibGUoc3JjVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSh0b0tleShwYXRoKSwgc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICB2YXIgb2JqVmFsdWUgPSBnZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgICAgcmV0dXJuIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmIG9ialZhbHVlID09PSBzcmNWYWx1ZSlcbiAgICAgICAgICA/IGhhc0luKG9iamVjdCwgcGF0aClcbiAgICAgICAgICA6IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWVyZ2VgIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBtZXJnZWQgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgaWYgKG9iamVjdCA9PT0gc291cmNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGJhc2VGb3Ioc291cmNlLCBmdW5jdGlvbihzcmNWYWx1ZSwga2V5KSB7XG4gICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgIGlmIChpc09iamVjdChzcmNWYWx1ZSkpIHtcbiAgICAgICAgICBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBiYXNlTWVyZ2UsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIoc2FmZUdldChvYmplY3QsIGtleSksIHNyY1ZhbHVlLCAoa2V5ICsgJycpLCBvYmplY3QsIHNvdXJjZSwgc3RhY2spXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHNyY1ZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlTWVyZ2VgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAgICAgKiBkZWVwIG1lcmdlcyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICAgICAqIHJlZmVyZW5jZXMgdG8gYmUgbWVyZ2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIG1lcmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzcmNJbmRleCBUaGUgaW5kZXggb2YgYHNvdXJjZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbWVyZ2VGdW5jIFRoZSBmdW5jdGlvbiB0byBtZXJnZSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBtZXJnZUZ1bmMsIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICB2YXIgb2JqVmFsdWUgPSBzYWZlR2V0KG9iamVjdCwga2V5KSxcbiAgICAgICAgICBzcmNWYWx1ZSA9IHNhZmVHZXQoc291cmNlLCBrZXkpLFxuICAgICAgICAgIHN0YWNrZWQgPSBzdGFjay5nZXQoc3JjVmFsdWUpO1xuXG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBzdGFja2VkKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICA/IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCAoa2V5ICsgJycpLCBvYmplY3QsIHNvdXJjZSwgc3RhY2spXG4gICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICB2YXIgaXNDb21tb24gPSBuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoaXNDb21tb24pIHtcbiAgICAgICAgdmFyIGlzQXJyID0gaXNBcnJheShzcmNWYWx1ZSksXG4gICAgICAgICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgaXNCdWZmZXIoc3JjVmFsdWUpLFxuICAgICAgICAgICAgaXNUeXBlZCA9ICFpc0FyciAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheShzcmNWYWx1ZSk7XG5cbiAgICAgICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICAgICAgaWYgKGlzQXJyIHx8IGlzQnVmZiB8fCBpc1R5cGVkKSB7XG4gICAgICAgICAgaWYgKGlzQXJyYXkob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc0FycmF5TGlrZU9iamVjdChvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY29weUFycmF5KG9ialZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNCdWZmKSB7XG4gICAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjbG9uZUJ1ZmZlcihzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzVHlwZWQpIHtcbiAgICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNsb25lVHlwZWRBcnJheShzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBbXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNQbGFpbk9iamVjdChzcmNWYWx1ZSkgfHwgaXNBcmd1bWVudHMoc3JjVmFsdWUpKSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgICAgICBpZiAoaXNBcmd1bWVudHMob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHRvUGxhaW5PYmplY3Qob2JqVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmICghaXNPYmplY3Qob2JqVmFsdWUpIHx8IGlzRnVuY3Rpb24ob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGluaXRDbG9uZU9iamVjdChzcmNWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc0NvbW1vbikge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgc3RhY2suc2V0KHNyY1ZhbHVlLCBuZXdWYWx1ZSk7XG4gICAgICAgIG1lcmdlRnVuYyhuZXdWYWx1ZSwgc3JjVmFsdWUsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgICAgIHN0YWNrWydkZWxldGUnXShzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubnRoYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgaW5kZXggb2YgdGhlIGVsZW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBudGggZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VOdGgoYXJyYXksIG4pIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBuICs9IG4gPCAwID8gbGVuZ3RoIDogMDtcbiAgICAgIHJldHVybiBpc0luZGV4KG4sIGxlbmd0aCkgPyBhcnJheVtuXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5vcmRlckJ5YCB3aXRob3V0IHBhcmFtIGd1YXJkcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb25bXXxPYmplY3RbXXxzdHJpbmdbXX0gaXRlcmF0ZWVzIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBvcmRlcnMgVGhlIHNvcnQgb3JkZXJzIG9mIGBpdGVyYXRlZXNgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycykge1xuICAgICAgaWYgKGl0ZXJhdGVlcy5sZW5ndGgpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICAgIGlmIChpc0FycmF5KGl0ZXJhdGVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBiYXNlR2V0KHZhbHVlLCBpdGVyYXRlZS5sZW5ndGggPT09IDEgPyBpdGVyYXRlZVswXSA6IGl0ZXJhdGVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGl0ZXJhdGVlO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IFtpZGVudGl0eV07XG4gICAgICB9XG5cbiAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgaXRlcmF0ZWVzID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZU1hcChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHZhciBjcml0ZXJpYSA9IGFycmF5TWFwKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0ZWUodmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHsgJ2NyaXRlcmlhJzogY3JpdGVyaWEsICdpbmRleCc6ICsraW5kZXgsICd2YWx1ZSc6IHZhbHVlIH07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGJhc2VTb3J0QnkocmVzdWx0LCBmdW5jdGlvbihvYmplY3QsIG90aGVyKSB7XG4gICAgICAgIHJldHVybiBjb21wYXJlTXVsdGlwbGUob2JqZWN0LCBvdGhlciwgb3JkZXJzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnBpY2tgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVBpY2sob2JqZWN0LCBwYXRocykge1xuICAgICAgcmV0dXJuIGJhc2VQaWNrQnkob2JqZWN0LCBwYXRocywgZnVuY3Rpb24odmFsdWUsIHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGhhc0luKG9iamVjdCwgcGF0aCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiAgYF8ucGlja0J5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQaWNrQnkob2JqZWN0LCBwYXRocywgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBwYXRoID0gcGF0aHNbaW5kZXhdLFxuICAgICAgICAgICAgdmFsdWUgPSBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG5cbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgcGF0aCkpIHtcbiAgICAgICAgICBiYXNlU2V0KHJlc3VsdCwgY2FzdFBhdGgocGF0aCwgb2JqZWN0KSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVByb3BlcnR5YCB3aGljaCBzdXBwb3J0cyBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eURlZXAocGF0aCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wdWxsQWxsQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAgICAgKiBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXhPZiA9IGNvbXBhcmF0b3IgPyBiYXNlSW5kZXhPZldpdGggOiBiYXNlSW5kZXhPZixcbiAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgICAgc2VlbiA9IGFycmF5O1xuXG4gICAgICBpZiAoYXJyYXkgPT09IHZhbHVlcykge1xuICAgICAgICB2YWx1ZXMgPSBjb3B5QXJyYXkodmFsdWVzKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICBzZWVuID0gYXJyYXlNYXAoYXJyYXksIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGZyb21JbmRleCA9IDAsXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlc1tpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgd2hpbGUgKChmcm9tSW5kZXggPSBpbmRleE9mKHNlZW4sIGNvbXB1dGVkLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpKSA+IC0xKSB7XG4gICAgICAgICAgaWYgKHNlZW4gIT09IGFycmF5KSB7XG4gICAgICAgICAgICBzcGxpY2UuY2FsbChzZWVuLCBmcm9tSW5kZXgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzcGxpY2UuY2FsbChhcnJheSwgZnJvbUluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnB1bGxBdGAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogaW5kZXhlcyBvciBjYXB0dXJpbmcgdGhlIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJbXX0gaW5kZXhlcyBUaGUgaW5kZXhlcyBvZiBlbGVtZW50cyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVB1bGxBdChhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID8gaW5kZXhlcy5sZW5ndGggOiAwLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgaW5kZXggPSBpbmRleGVzW2xlbmd0aF07XG4gICAgICAgIGlmIChsZW5ndGggPT0gbGFzdEluZGV4IHx8IGluZGV4ICE9PSBwcmV2aW91cykge1xuICAgICAgICAgIHZhciBwcmV2aW91cyA9IGluZGV4O1xuICAgICAgICAgIGlmIChpc0luZGV4KGluZGV4KSkge1xuICAgICAgICAgICAgc3BsaWNlLmNhbGwoYXJyYXksIGluZGV4LCAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYmFzZVVuc2V0KGFycmF5LCBpbmRleCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmFuZG9tYCB3aXRob3V0IHN1cHBvcnQgZm9yIHJldHVybmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsb3dlciBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByYW5kb20gbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSYW5kb20obG93ZXIsIHVwcGVyKSB7XG4gICAgICByZXR1cm4gbG93ZXIgKyBuYXRpdmVGbG9vcihuYXRpdmVSYW5kb20oKSAqICh1cHBlciAtIGxvd2VyICsgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJhbmdlYCBhbmQgYF8ucmFuZ2VSaWdodGAgd2hpY2ggZG9lc24ndFxuICAgICAqIGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0ZXAgVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChuYXRpdmVDZWlsKChlbmQgLSBzdGFydCkgLyAoc3RlcCB8fCAxKSksIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICByZXN1bHRbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF0gPSBzdGFydDtcbiAgICAgICAgc3RhcnQgKz0gc3RlcDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVwZWF0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byByZXBlYXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgdGhlIHN0cmluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByZXBlYXRlZCBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJlcGVhdChzdHJpbmcsIG4pIHtcbiAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgIGlmICghc3RyaW5nIHx8IG4gPCAxIHx8IG4gPiBNQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICAvLyBMZXZlcmFnZSB0aGUgZXhwb25lbnRpYXRpb24gYnkgc3F1YXJpbmcgYWxnb3JpdGhtIGZvciBhIGZhc3RlciByZXBlYXQuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRXhwb25lbnRpYXRpb25fYnlfc3F1YXJpbmcgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKG4gJSAyKSB7XG4gICAgICAgICAgcmVzdWx0ICs9IHN0cmluZztcbiAgICAgICAgfVxuICAgICAgICBuID0gbmF0aXZlRmxvb3IobiAvIDIpO1xuICAgICAgICBpZiAobikge1xuICAgICAgICAgIHN0cmluZyArPSBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgIH0gd2hpbGUgKG4pO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlc3RgIHdoaWNoIGRvZXNuJ3QgdmFsaWRhdGUgb3IgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJlc3QoZnVuYywgc3RhcnQpIHtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCBzdGFydCwgaWRlbnRpdHkpLCBmdW5jICsgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNhbXBsZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNhbXBsZShjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gYXJyYXlTYW1wbGUodmFsdWVzKGNvbGxlY3Rpb24pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zYW1wbGVTaXplYCB3aXRob3V0IHBhcmFtIGd1YXJkcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTYW1wbGVTaXplKGNvbGxlY3Rpb24sIG4pIHtcbiAgICAgIHZhciBhcnJheSA9IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihhcnJheSwgYmFzZUNsYW1wKG4sIDAsIGFycmF5Lmxlbmd0aCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNldGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgcGF0aCBjcmVhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMSxcbiAgICAgICAgICBuZXN0ZWQgPSBvYmplY3Q7XG5cbiAgICAgIHdoaWxlIChuZXN0ZWQgIT0gbnVsbCAmJiArK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSksXG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHZhbHVlO1xuXG4gICAgICAgIGlmIChrZXkgPT09ICdfX3Byb3RvX18nIHx8IGtleSA9PT0gJ2NvbnN0cnVjdG9yJyB8fCBrZXkgPT09ICdwcm90b3R5cGUnKSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbmRleCAhPSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICB2YXIgb2JqVmFsdWUgPSBuZXN0ZWRba2V5XTtcbiAgICAgICAgICBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKG9ialZhbHVlLCBrZXksIG5lc3RlZCkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gaXNPYmplY3Qob2JqVmFsdWUpXG4gICAgICAgICAgICAgID8gb2JqVmFsdWVcbiAgICAgICAgICAgICAgOiAoaXNJbmRleChwYXRoW2luZGV4ICsgMV0pID8gW10gOiB7fSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFzc2lnblZhbHVlKG5lc3RlZCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIG5lc3RlZCA9IG5lc3RlZFtrZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0RGF0YWAgd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzb2NpYXRlIG1ldGFkYXRhIHdpdGguXG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFRoZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBiYXNlU2V0RGF0YSA9ICFtZXRhTWFwID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBkYXRhKSB7XG4gICAgICBtZXRhTWFwLnNldChmdW5jLCBkYXRhKTtcbiAgICAgIHJldHVybiBmdW5jO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0VG9TdHJpbmdgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGJhc2VTZXRUb1N0cmluZyA9ICFkZWZpbmVQcm9wZXJ0eSA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgc3RyaW5nKSB7XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoZnVuYywgJ3RvU3RyaW5nJywge1xuICAgICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgJ2VudW1lcmFibGUnOiBmYWxzZSxcbiAgICAgICAgJ3ZhbHVlJzogY29uc3RhbnQoc3RyaW5nKSxcbiAgICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNodWZmbGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzaHVmZmxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNodWZmbGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTaHVmZmxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZih2YWx1ZXMoY29sbGVjdGlvbikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNsaWNlYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gICAgICB9XG4gICAgICBlbmQgPSBlbmQgPiBsZW5ndGggPyBsZW5ndGggOiBlbmQ7XG4gICAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgICBlbmQgKz0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgbGVuZ3RoID0gc3RhcnQgPiBlbmQgPyAwIDogKChlbmQgLSBzdGFydCkgPj4+IDApO1xuICAgICAgc3RhcnQgPj4+PSAwO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBhcnJheVtpbmRleCArIHN0YXJ0XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29tZWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0ID0gcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIHJldHVybiAhcmVzdWx0O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gISFyZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkSW5kZXhgIGFuZCBgXy5zb3J0ZWRMYXN0SW5kZXhgIHdoaWNoXG4gICAgICogcGVyZm9ybXMgYSBiaW5hcnkgc2VhcmNoIG9mIGBhcnJheWAgdG8gZGV0ZXJtaW5lIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgXG4gICAgICogc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0byBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgcmV0SGlnaGVzdCkge1xuICAgICAgdmFyIGxvdyA9IDAsXG4gICAgICAgICAgaGlnaCA9IGFycmF5ID09IG51bGwgPyBsb3cgOiBhcnJheS5sZW5ndGg7XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgdmFsdWUgPT09IHZhbHVlICYmIGhpZ2ggPD0gSEFMRl9NQVhfQVJSQVlfTEVOR1RIKSB7XG4gICAgICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICAgICAgdmFyIG1pZCA9IChsb3cgKyBoaWdoKSA+Pj4gMSxcbiAgICAgICAgICAgICAgY29tcHV0ZWQgPSBhcnJheVttaWRdO1xuXG4gICAgICAgICAgaWYgKGNvbXB1dGVkICE9PSBudWxsICYmICFpc1N5bWJvbChjb21wdXRlZCkgJiZcbiAgICAgICAgICAgICAgKHJldEhpZ2hlc3QgPyAoY29tcHV0ZWQgPD0gdmFsdWUpIDogKGNvbXB1dGVkIDwgdmFsdWUpKSkge1xuICAgICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhpZ2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpZGVudGl0eSwgcmV0SGlnaGVzdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkSW5kZXhCeWAgYW5kIGBfLnNvcnRlZExhc3RJbmRleEJ5YFxuICAgICAqIHdoaWNoIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZVxuICAgICAqIHRoZWlyIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXRIaWdoZXN0XSBTcGVjaWZ5IHJldHVybmluZyB0aGUgaGlnaGVzdCBxdWFsaWZpZWQgaW5kZXguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUsIHJldEhpZ2hlc3QpIHtcbiAgICAgIHZhciBsb3cgPSAwLFxuICAgICAgICAgIGhpZ2ggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChoaWdoID09PSAwKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuXG4gICAgICB2YWx1ZSA9IGl0ZXJhdGVlKHZhbHVlKTtcbiAgICAgIHZhciB2YWxJc05hTiA9IHZhbHVlICE9PSB2YWx1ZSxcbiAgICAgICAgICB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbCxcbiAgICAgICAgICB2YWxJc1N5bWJvbCA9IGlzU3ltYm9sKHZhbHVlKSxcbiAgICAgICAgICB2YWxJc1VuZGVmaW5lZCA9IHZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICAgIHZhciBtaWQgPSBuYXRpdmVGbG9vcigobG93ICsgaGlnaCkgLyAyKSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUoYXJyYXlbbWlkXSksXG4gICAgICAgICAgICBvdGhJc0RlZmluZWQgPSBjb21wdXRlZCAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgb3RoSXNOdWxsID0gY29tcHV0ZWQgPT09IG51bGwsXG4gICAgICAgICAgICBvdGhJc1JlZmxleGl2ZSA9IGNvbXB1dGVkID09PSBjb21wdXRlZCxcbiAgICAgICAgICAgIG90aElzU3ltYm9sID0gaXNTeW1ib2woY29tcHV0ZWQpO1xuXG4gICAgICAgIGlmICh2YWxJc05hTikge1xuICAgICAgICAgIHZhciBzZXRMb3cgPSByZXRIaWdoZXN0IHx8IG90aElzUmVmbGV4aXZlO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzVW5kZWZpbmVkKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgKHJldEhpZ2hlc3QgfHwgb3RoSXNEZWZpbmVkKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc051bGwpIHtcbiAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiBvdGhJc0RlZmluZWQgJiYgKHJldEhpZ2hlc3QgfHwgIW90aElzTnVsbCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNTeW1ib2wpIHtcbiAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiBvdGhJc0RlZmluZWQgJiYgIW90aElzTnVsbCAmJiAocmV0SGlnaGVzdCB8fCAhb3RoSXNTeW1ib2wpO1xuICAgICAgICB9IGVsc2UgaWYgKG90aElzTnVsbCB8fCBvdGhJc1N5bWJvbCkge1xuICAgICAgICAgIHNldExvdyA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNldExvdyA9IHJldEhpZ2hlc3QgPyAoY29tcHV0ZWQgPD0gdmFsdWUpIDogKGNvbXB1dGVkIDwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXRMb3cpIHtcbiAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuYXRpdmVNaW4oaGlnaCwgTUFYX0FSUkFZX0lOREVYKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRVbmlxYCBhbmQgYF8uc29ydGVkVW5pcUJ5YCB3aXRob3V0XG4gICAgICogc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkVW5pcShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICBpZiAoIWluZGV4IHx8ICFlcShjb21wdXRlZCwgc2VlbikpIHtcbiAgICAgICAgICB2YXIgc2VlbiA9IGNvbXB1dGVkO1xuICAgICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvTnVtYmVyYCB3aGljaCBkb2Vzbid0IGVuc3VyZSBjb3JyZWN0XG4gICAgICogY29udmVyc2lvbnMgb2YgYmluYXJ5LCBoZXhhZGVjaW1hbCwgb3Igb2N0YWwgc3RyaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVRvTnVtYmVyKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE5BTjtcbiAgICAgIH1cbiAgICAgIHJldHVybiArdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gICAgICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAgICAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgdmFsdWVzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgYmFzZVRvU3RyaW5nKSArICcnO1xuICAgICAgfVxuICAgICAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgICAgIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmlxQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVW5pcShhcnJheSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgaXNDb21tb24gPSB0cnVlLFxuICAgICAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgICAgIHNlZW4gPSByZXN1bHQ7XG5cbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlc1dpdGg7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChsZW5ndGggPj0gTEFSR0VfQVJSQVlfU0laRSkge1xuICAgICAgICB2YXIgc2V0ID0gaXRlcmF0ZWUgPyBudWxsIDogY3JlYXRlU2V0KGFycmF5KTtcbiAgICAgICAgaWYgKHNldCkge1xuICAgICAgICAgIHJldHVybiBzZXRUb0FycmF5KHNldCk7XG4gICAgICAgIH1cbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgaW5jbHVkZXMgPSBjYWNoZUhhcztcbiAgICAgICAgc2VlbiA9IG5ldyBTZXRDYWNoZTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzZWVuID0gaXRlcmF0ZWUgPyBbXSA6IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgdmFyIHNlZW5JbmRleCA9IHNlZW4ubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlIChzZWVuSW5kZXgtLSkge1xuICAgICAgICAgICAgaWYgKHNlZW5bc2VlbkluZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFpbmNsdWRlcyhzZWVuLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgICAgICBpZiAoc2VlbiAhPT0gcmVzdWx0KSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5zZXRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwcm9wZXJ0eSBwYXRoIHRvIHVuc2V0LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcHJvcGVydHkgaXMgZGVsZXRlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVbnNldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgb2JqZWN0ID0gcGFyZW50KG9iamVjdCwgcGF0aCk7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgfHwgZGVsZXRlIG9iamVjdFt0b0tleShsYXN0KHBhdGgpKV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udXBkYXRlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gdXBkYXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgcGF0aCBjcmVhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCB1cGRhdGVyLCBjdXN0b21pemVyKSB7XG4gICAgICByZXR1cm4gYmFzZVNldChvYmplY3QsIHBhdGgsIHVwZGF0ZXIoYmFzZUdldChvYmplY3QsIHBhdGgpKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmRyb3BXaGlsZWAgYW5kIGBfLnRha2VXaGlsZWBcbiAgICAgKiB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0Ryb3BdIFNwZWNpZnkgZHJvcHBpbmcgZWxlbWVudHMgaW5zdGVhZCBvZiB0YWtpbmcgdGhlbS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVdoaWxlKGFycmF5LCBwcmVkaWNhdGUsIGlzRHJvcCwgZnJvbVJpZ2h0KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTE7XG5cbiAgICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpICYmXG4gICAgICAgIHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHt9XG5cbiAgICAgIHJldHVybiBpc0Ryb3BcbiAgICAgICAgPyBiYXNlU2xpY2UoYXJyYXksIChmcm9tUmlnaHQgPyAwIDogaW5kZXgpLCAoZnJvbVJpZ2h0ID8gaW5kZXggKyAxIDogbGVuZ3RoKSlcbiAgICAgICAgOiBiYXNlU2xpY2UoYXJyYXksIChmcm9tUmlnaHQgPyBpbmRleCArIDEgOiAwKSwgKGZyb21SaWdodCA/IGxlbmd0aCA6IGluZGV4KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHdyYXBwZXJWYWx1ZWAgd2hpY2ggcmV0dXJucyB0aGUgcmVzdWx0IG9mXG4gICAgICogcGVyZm9ybWluZyBhIHNlcXVlbmNlIG9mIGFjdGlvbnMgb24gdGhlIHVud3JhcHBlZCBgdmFsdWVgLCB3aGVyZSBlYWNoXG4gICAgICogc3VjY2Vzc2l2ZSBhY3Rpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhY3Rpb25zIEFjdGlvbnMgdG8gcGVyZm9ybSB0byByZXNvbHZlIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VXcmFwcGVyVmFsdWUodmFsdWUsIGFjdGlvbnMpIHtcbiAgICAgIHZhciByZXN1bHQgPSB2YWx1ZTtcbiAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQudmFsdWUoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheVJlZHVjZShhY3Rpb25zLCBmdW5jdGlvbihyZXN1bHQsIGFjdGlvbikge1xuICAgICAgICByZXR1cm4gYWN0aW9uLmZ1bmMuYXBwbHkoYWN0aW9uLnRoaXNBcmcsIGFycmF5UHVzaChbcmVzdWx0XSwgYWN0aW9uLmFyZ3MpKTtcbiAgICAgIH0sIHJlc3VsdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLnhvcmAsIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLCB0aGF0IGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5cyBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVhvcihhcnJheXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXlzLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlVW5pcShhcnJheXNbMF0pIDogW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcnJheXNbaW5kZXhdLFxuICAgICAgICAgICAgb3RoSW5kZXggPSAtMTtcblxuICAgICAgICB3aGlsZSAoKytvdGhJbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGlmIChvdGhJbmRleCAhPSBpbmRleCkge1xuICAgICAgICAgICAgcmVzdWx0W2luZGV4XSA9IGJhc2VEaWZmZXJlbmNlKHJlc3VsdFtpbmRleF0gfHwgYXJyYXksIGFycmF5c1tvdGhJbmRleF0sIGl0ZXJhdGVlLCBjb21wYXJhdG9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihyZXN1bHQsIDEpLCBpdGVyYXRlZSwgY29tcGFyYXRvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnppcE9iamVjdGAgd2hpY2ggYXNzaWducyB2YWx1ZXMgdXNpbmcgYGFzc2lnbkZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXNzaWduRnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzaWduIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VaaXBPYmplY3QocHJvcHMsIHZhbHVlcywgYXNzaWduRnVuYykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoLFxuICAgICAgICAgIHZhbHNMZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBpbmRleCA8IHZhbHNMZW5ndGggPyB2YWx1ZXNbaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgICBhc3NpZ25GdW5jKHJlc3VsdCwgcHJvcHNbaW5kZXhdLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYW4gZW1wdHkgYXJyYXkgaWYgaXQncyBub3QgYW4gYXJyYXkgbGlrZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyB0aGUgY2FzdCBhcnJheS1saWtlIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0QXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpID8gdmFsdWUgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGBpZGVudGl0eWAgaWYgaXQncyBub3QgYSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgY2FzdCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0RnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlIDogaWRlbnRpdHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBhIHBhdGggYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdFBhdGgodmFsdWUsIG9iamVjdCkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0tleSh2YWx1ZSwgb2JqZWN0KSA/IFt2YWx1ZV0gOiBzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIGBiYXNlUmVzdGAgYWxpYXMgd2hpY2ggY2FuIGJlIHJlcGxhY2VkIHdpdGggYGlkZW50aXR5YCBieSBtb2R1bGVcbiAgICAgKiByZXBsYWNlbWVudCBwbHVnaW5zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICB2YXIgY2FzdFJlc3QgPSBiYXNlUmVzdDtcblxuICAgIC8qKlxuICAgICAqIENhc3RzIGBhcnJheWAgdG8gYSBzbGljZSBpZiBpdCdzIG5lZWRlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHNsaWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kO1xuICAgICAgcmV0dXJuICghc3RhcnQgJiYgZW5kID49IGxlbmd0aCkgPyBhcnJheSA6IGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzaW1wbGUgd3JhcHBlciBhcm91bmQgdGhlIGdsb2JhbCBbYGNsZWFyVGltZW91dGBdKGh0dHBzOi8vbWRuLmlvL2NsZWFyVGltZW91dCkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfE9iamVjdH0gaWQgVGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0IG9mIHRoZSB0aW1lciB0byBjbGVhci5cbiAgICAgKi9cbiAgICB2YXIgY2xlYXJUaW1lb3V0ID0gY3R4Q2xlYXJUaW1lb3V0IHx8IGZ1bmN0aW9uKGlkKSB7XG4gICAgICByZXR1cm4gcm9vdC5jbGVhclRpbWVvdXQoaWQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgIGBidWZmZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIFRoZSBidWZmZXIgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYnVmZmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lQnVmZmVyKGJ1ZmZlciwgaXNEZWVwKSB7XG4gICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgIHJldHVybiBidWZmZXIuc2xpY2UoKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBidWZmZXIubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IGFsbG9jVW5zYWZlID8gYWxsb2NVbnNhZmUobGVuZ3RoKSA6IG5ldyBidWZmZXIuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAgICAgYnVmZmVyLmNvcHkocmVzdWx0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGBhcnJheUJ1ZmZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGFycmF5QnVmZmVyIFRoZSBhcnJheSBidWZmZXIgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lQXJyYXlCdWZmZXIoYXJyYXlCdWZmZXIpIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgYXJyYXlCdWZmZXIuY29uc3RydWN0b3IoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICBuZXcgVWludDhBcnJheShyZXN1bHQpLnNldChuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcikpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGRhdGFWaWV3YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFWaWV3IFRoZSBkYXRhIHZpZXcgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgZGF0YSB2aWV3LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGF0YVZpZXcoZGF0YVZpZXcsIGlzRGVlcCkge1xuICAgICAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIoZGF0YVZpZXcuYnVmZmVyKSA6IGRhdGFWaWV3LmJ1ZmZlcjtcbiAgICAgIHJldHVybiBuZXcgZGF0YVZpZXcuY29uc3RydWN0b3IoYnVmZmVyLCBkYXRhVmlldy5ieXRlT2Zmc2V0LCBkYXRhVmlldy5ieXRlTGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHJlZ2V4cGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWdleHAgVGhlIHJlZ2V4cCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgcmVnZXhwLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lUmVnRXhwKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyByZWdleHAuY29uc3RydWN0b3IocmVnZXhwLnNvdXJjZSwgcmVGbGFncy5leGVjKHJlZ2V4cCkpO1xuICAgICAgcmVzdWx0Lmxhc3RJbmRleCA9IHJlZ2V4cC5sYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgYHN5bWJvbGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3ltYm9sIFRoZSBzeW1ib2wgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBzeW1ib2wgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lU3ltYm9sKHN5bWJvbCkge1xuICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YgPyBPYmplY3Qoc3ltYm9sVmFsdWVPZi5jYWxsKHN5bWJvbCkpIDoge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGB0eXBlZEFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHR5cGVkQXJyYXkgVGhlIHR5cGVkIGFycmF5IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHR5cGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lVHlwZWRBcnJheSh0eXBlZEFycmF5LCBpc0RlZXApIHtcbiAgICAgIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKHR5cGVkQXJyYXkuYnVmZmVyKSA6IHR5cGVkQXJyYXkuYnVmZmVyO1xuICAgICAgcmV0dXJuIG5ldyB0eXBlZEFycmF5LmNvbnN0cnVjdG9yKGJ1ZmZlciwgdHlwZWRBcnJheS5ieXRlT2Zmc2V0LCB0eXBlZEFycmF5Lmxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcGFyZXMgdmFsdWVzIHRvIHNvcnQgdGhlbSBpbiBhc2NlbmRpbmcgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzb3J0IG9yZGVyIGluZGljYXRvciBmb3IgYHZhbHVlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYXJlQXNjZW5kaW5nKHZhbHVlLCBvdGhlcikge1xuICAgICAgaWYgKHZhbHVlICE9PSBvdGhlcikge1xuICAgICAgICB2YXIgdmFsSXNEZWZpbmVkID0gdmFsdWUgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHZhbElzTnVsbCA9IHZhbHVlID09PSBudWxsLFxuICAgICAgICAgICAgdmFsSXNSZWZsZXhpdmUgPSB2YWx1ZSA9PT0gdmFsdWUsXG4gICAgICAgICAgICB2YWxJc1N5bWJvbCA9IGlzU3ltYm9sKHZhbHVlKTtcblxuICAgICAgICB2YXIgb3RoSXNEZWZpbmVkID0gb3RoZXIgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG90aElzTnVsbCA9IG90aGVyID09PSBudWxsLFxuICAgICAgICAgICAgb3RoSXNSZWZsZXhpdmUgPSBvdGhlciA9PT0gb3RoZXIsXG4gICAgICAgICAgICBvdGhJc1N5bWJvbCA9IGlzU3ltYm9sKG90aGVyKTtcblxuICAgICAgICBpZiAoKCFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sICYmICF2YWxJc1N5bWJvbCAmJiB2YWx1ZSA+IG90aGVyKSB8fFxuICAgICAgICAgICAgKHZhbElzU3ltYm9sICYmIG90aElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSAmJiAhb3RoSXNOdWxsICYmICFvdGhJc1N5bWJvbCkgfHxcbiAgICAgICAgICAgICh2YWxJc051bGwgJiYgb3RoSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgKCF2YWxJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAhdmFsSXNSZWZsZXhpdmUpIHtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKCF2YWxJc051bGwgJiYgIXZhbElzU3ltYm9sICYmICFvdGhJc1N5bWJvbCAmJiB2YWx1ZSA8IG90aGVyKSB8fFxuICAgICAgICAgICAgKG90aElzU3ltYm9sICYmIHZhbElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSAmJiAhdmFsSXNOdWxsICYmICF2YWxJc1N5bWJvbCkgfHxcbiAgICAgICAgICAgIChvdGhJc051bGwgJiYgdmFsSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgKCFvdGhJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAhb3RoSXNSZWZsZXhpdmUpIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8ub3JkZXJCeWAgdG8gY29tcGFyZSBtdWx0aXBsZSBwcm9wZXJ0aWVzIG9mIGEgdmFsdWUgdG8gYW5vdGhlclxuICAgICAqIGFuZCBzdGFibGUgc29ydCB0aGVtLlxuICAgICAqXG4gICAgICogSWYgYG9yZGVyc2AgaXMgdW5zcGVjaWZpZWQsIGFsbCB2YWx1ZXMgYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSxcbiAgICAgKiBzcGVjaWZ5IGFuIG9yZGVyIG9mIFwiZGVzY1wiIGZvciBkZXNjZW5kaW5nIG9yIFwiYXNjXCIgZm9yIGFzY2VuZGluZyBzb3J0IG9yZGVyXG4gICAgICogb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtib29sZWFuW118c3RyaW5nW119IG9yZGVycyBUaGUgb3JkZXIgdG8gc29ydCBieSBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzb3J0IG9yZGVyIGluZGljYXRvciBmb3IgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFyZU11bHRpcGxlKG9iamVjdCwgb3RoZXIsIG9yZGVycykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgb2JqQ3JpdGVyaWEgPSBvYmplY3QuY3JpdGVyaWEsXG4gICAgICAgICAgb3RoQ3JpdGVyaWEgPSBvdGhlci5jcml0ZXJpYSxcbiAgICAgICAgICBsZW5ndGggPSBvYmpDcml0ZXJpYS5sZW5ndGgsXG4gICAgICAgICAgb3JkZXJzTGVuZ3RoID0gb3JkZXJzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNvbXBhcmVBc2NlbmRpbmcob2JqQ3JpdGVyaWFbaW5kZXhdLCBvdGhDcml0ZXJpYVtpbmRleF0pO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgaWYgKGluZGV4ID49IG9yZGVyc0xlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIG9yZGVyID0gb3JkZXJzW2luZGV4XTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0ICogKG9yZGVyID09ICdkZXNjJyA/IC0xIDogMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIEZpeGVzIGFuIGBBcnJheSNzb3J0YCBidWcgaW4gdGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBhcHBsaWNhdGlvbnNcbiAgICAgIC8vIHRoYXQgY2F1c2VzIGl0LCB1bmRlciBjZXJ0YWluIGNpcmN1bXN0YW5jZXMsIHRvIHByb3ZpZGUgdGhlIHNhbWUgdmFsdWUgZm9yXG4gICAgICAvLyBgb2JqZWN0YCBhbmQgYG90aGVyYC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qYXNoa2VuYXMvdW5kZXJzY29yZS9wdWxsLzEyNDdcbiAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBhbHNvIGVuc3VyZXMgYSBzdGFibGUgc29ydCBpbiBWOCBhbmQgb3RoZXIgZW5naW5lcy5cbiAgICAgIC8vIFNlZSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD05MCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgcmV0dXJuIG9iamVjdC5pbmRleCAtIG90aGVyLmluZGV4O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgdGhhdCBpcyB0aGUgY29tcG9zaXRpb24gb2YgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLFxuICAgICAqIHBsYWNlaG9sZGVycywgYW5kIHByb3ZpZGVkIGFyZ3VtZW50cyBpbnRvIGEgc2luZ2xlIGFycmF5IG9mIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBob2xkZXJzIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtcyB7Ym9vbGVhbn0gW2lzQ3VycmllZF0gU3BlY2lmeSBjb21wb3NpbmcgZm9yIGEgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21wb3NlZCBhcmd1bWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcG9zZUFyZ3MoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCkge1xuICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCxcbiAgICAgICAgICBob2xkZXJzTGVuZ3RoID0gaG9sZGVycy5sZW5ndGgsXG4gICAgICAgICAgbGVmdEluZGV4ID0gLTEsXG4gICAgICAgICAgbGVmdExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICByYW5nZUxlbmd0aCA9IG5hdGl2ZU1heChhcmdzTGVuZ3RoIC0gaG9sZGVyc0xlbmd0aCwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVmdExlbmd0aCArIHJhbmdlTGVuZ3RoKSxcbiAgICAgICAgICBpc1VuY3VycmllZCA9ICFpc0N1cnJpZWQ7XG5cbiAgICAgIHdoaWxlICgrK2xlZnRJbmRleCA8IGxlZnRMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2xlZnRJbmRleF0gPSBwYXJ0aWFsc1tsZWZ0SW5kZXhdO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsrYXJnc0luZGV4IDwgaG9sZGVyc0xlbmd0aCkge1xuICAgICAgICBpZiAoaXNVbmN1cnJpZWQgfHwgYXJnc0luZGV4IDwgYXJnc0xlbmd0aCkge1xuICAgICAgICAgIHJlc3VsdFtob2xkZXJzW2FyZ3NJbmRleF1dID0gYXJnc1thcmdzSW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3aGlsZSAocmFuZ2VMZW5ndGgtLSkge1xuICAgICAgICByZXN1bHRbbGVmdEluZGV4KytdID0gYXJnc1thcmdzSW5kZXgrK107XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgY29tcG9zZUFyZ3NgIGV4Y2VwdCB0aGF0IHRoZSBhcmd1bWVudHMgY29tcG9zaXRpb25cbiAgICAgKiBpcyB0YWlsb3JlZCBmb3IgYF8ucGFydGlhbFJpZ2h0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gYXBwZW5kIHRvIHRob3NlIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGhvbGRlcnMgVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW1zIHtib29sZWFufSBbaXNDdXJyaWVkXSBTcGVjaWZ5IGNvbXBvc2luZyBmb3IgYSBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbXBvc2VkIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wb3NlQXJnc1JpZ2h0KGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpIHtcbiAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGgsXG4gICAgICAgICAgaG9sZGVyc0luZGV4ID0gLTEsXG4gICAgICAgICAgaG9sZGVyc0xlbmd0aCA9IGhvbGRlcnMubGVuZ3RoLFxuICAgICAgICAgIHJpZ2h0SW5kZXggPSAtMSxcbiAgICAgICAgICByaWdodExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICByYW5nZUxlbmd0aCA9IG5hdGl2ZU1heChhcmdzTGVuZ3RoIC0gaG9sZGVyc0xlbmd0aCwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkocmFuZ2VMZW5ndGggKyByaWdodExlbmd0aCksXG4gICAgICAgICAgaXNVbmN1cnJpZWQgPSAhaXNDdXJyaWVkO1xuXG4gICAgICB3aGlsZSAoKythcmdzSW5kZXggPCByYW5nZUxlbmd0aCkge1xuICAgICAgICByZXN1bHRbYXJnc0luZGV4XSA9IGFyZ3NbYXJnc0luZGV4XTtcbiAgICAgIH1cbiAgICAgIHZhciBvZmZzZXQgPSBhcmdzSW5kZXg7XG4gICAgICB3aGlsZSAoKytyaWdodEluZGV4IDwgcmlnaHRMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W29mZnNldCArIHJpZ2h0SW5kZXhdID0gcGFydGlhbHNbcmlnaHRJbmRleF07XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytob2xkZXJzSW5kZXggPCBob2xkZXJzTGVuZ3RoKSB7XG4gICAgICAgIGlmIChpc1VuY3VycmllZCB8fCBhcmdzSW5kZXggPCBhcmdzTGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdWx0W29mZnNldCArIGhvbGRlcnNbaG9sZGVyc0luZGV4XV0gPSBhcmdzW2FyZ3NJbmRleCsrXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiBgc291cmNlYCB0byBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIGZyb20uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5PVtdXSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgdG8uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weUFycmF5KHNvdXJjZSwgYXJyYXkpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG5cbiAgICAgIGFycmF5IHx8IChhcnJheSA9IEFycmF5KGxlbmd0aCkpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gc291cmNlW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycyB0byBjb3B5LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0by5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBpc05ldyA9ICFvYmplY3Q7XG4gICAgICBvYmplY3QgfHwgKG9iamVjdCA9IHt9KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgICA/IGN1c3RvbWl6ZXIob2JqZWN0W2tleV0sIHNvdXJjZVtrZXldLCBrZXksIG9iamVjdCwgc291cmNlKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOZXcpIHtcbiAgICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBvd24gc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlTeW1ib2xzKHNvdXJjZSwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHMoc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgb3duIGFuZCBpbmhlcml0ZWQgc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlTeW1ib2xzSW4oc291cmNlLCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9sc0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uZ3JvdXBCeWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGFjY3VtdWxhdG9yIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaW5pdGlhbGl6ZXJdIFRoZSBhY2N1bXVsYXRvciBvYmplY3QgaW5pdGlhbGl6ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWdncmVnYXRvciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVBZ2dyZWdhdG9yKHNldHRlciwgaW5pdGlhbGl6ZXIpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUFnZ3JlZ2F0b3IgOiBiYXNlQWdncmVnYXRvcixcbiAgICAgICAgICAgIGFjY3VtdWxhdG9yID0gaW5pdGlhbGl6ZXIgPyBpbml0aWFsaXplcigpIDoge307XG5cbiAgICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgc2V0dGVyLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIGFjY3VtdWxhdG9yKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uYXNzaWduYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXNzaWduZXIgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYXNzaWduZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQXNzaWduZXIoYXNzaWduZXIpIHtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aCxcbiAgICAgICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPiAxID8gc291cmNlc1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgY3VzdG9taXplciA9IChhc3NpZ25lci5sZW5ndGggPiAzICYmIHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicpXG4gICAgICAgICAgPyAobGVuZ3RoLS0sIGN1c3RvbWl6ZXIpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPCAzID8gdW5kZWZpbmVkIDogY3VzdG9taXplcjtcbiAgICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgICAgICBhc3NpZ25lcihvYmplY3QsIHNvdXJjZSwgaW5kZXgsIGN1c3RvbWl6ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBiYXNlRWFjaGAgb3IgYGJhc2VFYWNoUmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGEgY29sbGVjdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJhc2VFYWNoKGVhY2hGdW5jLCBmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHJldHVybiBlYWNoRnVuYyhjb2xsZWN0aW9uLCBpdGVyYXRlZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuICAgICAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMSxcbiAgICAgICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuXG4gICAgICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2luZGV4XSwgaW5kZXgsIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGJhc2UgZnVuY3Rpb24gZm9yIG1ldGhvZHMgbGlrZSBgXy5mb3JJbmAgYW5kIGBfLmZvck93bmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmFzZUZvcihmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzRnVuYykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KG9iamVjdCksXG4gICAgICAgICAgICBwcm9wcyA9IGtleXNGdW5jKG9iamVjdCksXG4gICAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHByb3BzW2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdO1xuICAgICAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggdGhlIG9wdGlvbmFsIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgYHRoaXNBcmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJpbmQoZnVuYywgYml0bWFzaywgdGhpc0FyZykge1xuICAgICAgdmFyIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ubG93ZXJGaXJzdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSBgU3RyaW5nYCBjYXNlIG1ldGhvZCB0byB1c2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDYXNlRmlyc3QobWV0aG9kTmFtZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gICAgICAgIHZhciBzdHJTeW1ib2xzID0gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICAgICAgPyBzdHJpbmdUb0FycmF5KHN0cmluZylcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICB2YXIgY2hyID0gc3RyU3ltYm9sc1xuICAgICAgICAgID8gc3RyU3ltYm9sc1swXVxuICAgICAgICAgIDogc3RyaW5nLmNoYXJBdCgwKTtcblxuICAgICAgICB2YXIgdHJhaWxpbmcgPSBzdHJTeW1ib2xzXG4gICAgICAgICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMSkuam9pbignJylcbiAgICAgICAgICA6IHN0cmluZy5zbGljZSgxKTtcblxuICAgICAgICByZXR1cm4gY2hyW21ldGhvZE5hbWVdKCkgKyB0cmFpbGluZztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uY2FtZWxDYXNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmUgZWFjaCB3b3JkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvdW5kZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ29tcG91bmRlcihjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgICByZXR1cm4gYXJyYXlSZWR1Y2Uod29yZHMoZGVidXJyKHN0cmluZykucmVwbGFjZShyZUFwb3MsICcnKSksIGNhbGxiYWNrLCAnJyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHByb2R1Y2VzIGFuIGluc3RhbmNlIG9mIGBDdG9yYCByZWdhcmRsZXNzIG9mXG4gICAgICogd2hldGhlciBpdCB3YXMgaW52b2tlZCBhcyBwYXJ0IG9mIGEgYG5ld2AgZXhwcmVzc2lvbiBvciBieSBgY2FsbGAgb3IgYGFwcGx5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gQ3RvciBUaGUgY29uc3RydWN0b3IgdG8gd3JhcC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUN0b3IoQ3Rvcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBVc2UgYSBgc3dpdGNoYCBzdGF0ZW1lbnQgdG8gd29yayB3aXRoIGNsYXNzIGNvbnN0cnVjdG9ycy4gU2VlXG4gICAgICAgIC8vIGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtZnVuY3Rpb24tb2JqZWN0cy1jYWxsLXRoaXNhcmd1bWVudC1hcmd1bWVudHNsaXN0XG4gICAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEN0b3I7XG4gICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSk7XG4gICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSk7XG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSwgYXJnc1s1XSk7XG4gICAgICAgICAgY2FzZSA3OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSwgYXJnc1s1XSwgYXJnc1s2XSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRoaXNCaW5kaW5nID0gYmFzZUNyZWF0ZShDdG9yLnByb3RvdHlwZSksXG4gICAgICAgICAgICByZXN1bHQgPSBDdG9yLmFwcGx5KHRoaXNCaW5kaW5nLCBhcmdzKTtcblxuICAgICAgICAvLyBNaW1pYyB0aGUgY29uc3RydWN0b3IncyBgcmV0dXJuYCBiZWhhdmlvci5cbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDEzLjIuMiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IHRoaXNCaW5kaW5nO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gZW5hYmxlIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFyaXR5IFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDdXJyeShmdW5jLCBiaXRtYXNrLCBhcml0eSkge1xuICAgICAgdmFyIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGgsXG4gICAgICAgICAgICBwbGFjZWhvbGRlciA9IGdldEhvbGRlcih3cmFwcGVyKTtcblxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaG9sZGVycyA9IChsZW5ndGggPCAzICYmIGFyZ3NbMF0gIT09IHBsYWNlaG9sZGVyICYmIGFyZ3NbbGVuZ3RoIC0gMV0gIT09IHBsYWNlaG9sZGVyKVxuICAgICAgICAgID8gW11cbiAgICAgICAgICA6IHJlcGxhY2VIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcblxuICAgICAgICBsZW5ndGggLT0gaG9sZGVycy5sZW5ndGg7XG4gICAgICAgIGlmIChsZW5ndGggPCBhcml0eSkge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVSZWN1cnJ5KFxuICAgICAgICAgICAgZnVuYywgYml0bWFzaywgY3JlYXRlSHlicmlkLCB3cmFwcGVyLnBsYWNlaG9sZGVyLCB1bmRlZmluZWQsXG4gICAgICAgICAgICBhcmdzLCBob2xkZXJzLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYXJpdHkgLSBsZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG4gICAgICAgIHJldHVybiBhcHBseShmbiwgdGhpcywgYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8uZmluZGAgb3IgYF8uZmluZExhc3RgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmaW5kSW5kZXhGdW5jIFRoZSBmdW5jdGlvbiB0byBmaW5kIHRoZSBjb2xsZWN0aW9uIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZpbmQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRmluZChmaW5kSW5kZXhGdW5jKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgICAgdmFyIGl0ZXJhYmxlID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuICAgICAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgdmFyIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKTtcbiAgICAgICAgICBjb2xsZWN0aW9uID0ga2V5cyhjb2xsZWN0aW9uKTtcbiAgICAgICAgICBwcmVkaWNhdGUgPSBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpOyB9O1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbmRleCA9IGZpbmRJbmRleEZ1bmMoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBmcm9tSW5kZXgpO1xuICAgICAgICByZXR1cm4gaW5kZXggPiAtMSA/IGl0ZXJhYmxlW2l0ZXJhdGVlID8gY29sbGVjdGlvbltpbmRleF0gOiBpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5mbG93YCBvciBgXy5mbG93UmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmbG93IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUZsb3coZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZmxhdFJlc3QoZnVuY3Rpb24oZnVuY3MpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGZ1bmNzLmxlbmd0aCxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoLFxuICAgICAgICAgICAgcHJlcmVxID0gTG9kYXNoV3JhcHBlci5wcm90b3R5cGUudGhydTtcblxuICAgICAgICBpZiAoZnJvbVJpZ2h0KSB7XG4gICAgICAgICAgZnVuY3MucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgdmFyIGZ1bmMgPSBmdW5jc1tpbmRleF07XG4gICAgICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHByZXJlcSAmJiAhd3JhcHBlciAmJiBnZXRGdW5jTmFtZShmdW5jKSA9PSAnd3JhcHBlcicpIHtcbiAgICAgICAgICAgIHZhciB3cmFwcGVyID0gbmV3IExvZGFzaFdyYXBwZXIoW10sIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IHdyYXBwZXIgPyBpbmRleCA6IGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBmdW5jID0gZnVuY3NbaW5kZXhdO1xuXG4gICAgICAgICAgdmFyIGZ1bmNOYW1lID0gZ2V0RnVuY05hbWUoZnVuYyksXG4gICAgICAgICAgICAgIGRhdGEgPSBmdW5jTmFtZSA9PSAnd3JhcHBlcicgPyBnZXREYXRhKGZ1bmMpIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKGRhdGEgJiYgaXNMYXppYWJsZShkYXRhWzBdKSAmJlxuICAgICAgICAgICAgICAgIGRhdGFbMV0gPT0gKFdSQVBfQVJZX0ZMQUcgfCBXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX1BBUlRJQUxfRkxBRyB8IFdSQVBfUkVBUkdfRkxBRykgJiZcbiAgICAgICAgICAgICAgICAhZGF0YVs0XS5sZW5ndGggJiYgZGF0YVs5XSA9PSAxXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgd3JhcHBlciA9IHdyYXBwZXJbZ2V0RnVuY05hbWUoZGF0YVswXSldLmFwcGx5KHdyYXBwZXIsIGRhdGFbM10pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3cmFwcGVyID0gKGZ1bmMubGVuZ3RoID09IDEgJiYgaXNMYXppYWJsZShmdW5jKSlcbiAgICAgICAgICAgICAgPyB3cmFwcGVyW2Z1bmNOYW1lXSgpXG4gICAgICAgICAgICAgIDogd3JhcHBlci50aHJ1KGZ1bmMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgIHZhbHVlID0gYXJnc1swXTtcblxuICAgICAgICAgIGlmICh3cmFwcGVyICYmIGFyZ3MubGVuZ3RoID09IDEgJiYgaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB3cmFwcGVyLnBsYW50KHZhbHVlKS52YWx1ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgICAgICByZXN1bHQgPSBsZW5ndGggPyBmdW5jc1tpbmRleF0uYXBwbHkodGhpcywgYXJncykgOiB2YWx1ZTtcblxuICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBmdW5jc1tpbmRleF0uY2FsbCh0aGlzLCByZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIG9wdGlvbmFsIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgYHRoaXNBcmdgLCBwYXJ0aWFsIGFwcGxpY2F0aW9uLCBhbmQgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSBmdW5jIFRoZSBmdW5jdGlvbiBvciBtZXRob2QgbmFtZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc1JpZ2h0XSBUaGUgYXJndW1lbnRzIHRvIGFwcGVuZCB0byB0aG9zZSBwcm92aWRlZFxuICAgICAqICB0byB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzUmlnaHRdIFRoZSBgcGFydGlhbHNSaWdodGAgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVIeWJyaWQoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCwgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNBcnkgPSBiaXRtYXNrICYgV1JBUF9BUllfRkxBRyxcbiAgICAgICAgICBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgaXNCaW5kS2V5ID0gYml0bWFzayAmIFdSQVBfQklORF9LRVlfRkxBRyxcbiAgICAgICAgICBpc0N1cnJpZWQgPSBiaXRtYXNrICYgKFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfQ1VSUllfUklHSFRfRkxBRyksXG4gICAgICAgICAgaXNGbGlwID0gYml0bWFzayAmIFdSQVBfRkxJUF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBpc0JpbmRLZXkgPyB1bmRlZmluZWQgOiBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQ3VycmllZCkge1xuICAgICAgICAgIHZhciBwbGFjZWhvbGRlciA9IGdldEhvbGRlcih3cmFwcGVyKSxcbiAgICAgICAgICAgICAgaG9sZGVyc0NvdW50ID0gY291bnRIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydGlhbHMpIHtcbiAgICAgICAgICBhcmdzID0gY29tcG9zZUFyZ3MoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRpYWxzUmlnaHQpIHtcbiAgICAgICAgICBhcmdzID0gY29tcG9zZUFyZ3NSaWdodChhcmdzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsIGlzQ3VycmllZCk7XG4gICAgICAgIH1cbiAgICAgICAgbGVuZ3RoIC09IGhvbGRlcnNDb3VudDtcbiAgICAgICAgaWYgKGlzQ3VycmllZCAmJiBsZW5ndGggPCBhcml0eSkge1xuICAgICAgICAgIHZhciBuZXdIb2xkZXJzID0gcmVwbGFjZUhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuICAgICAgICAgIHJldHVybiBjcmVhdGVSZWN1cnJ5KFxuICAgICAgICAgICAgZnVuYywgYml0bWFzaywgY3JlYXRlSHlicmlkLCB3cmFwcGVyLnBsYWNlaG9sZGVyLCB0aGlzQXJnLFxuICAgICAgICAgICAgYXJncywgbmV3SG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5IC0gbGVuZ3RoXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGhpc0JpbmRpbmcgPSBpc0JpbmQgPyB0aGlzQXJnIDogdGhpcyxcbiAgICAgICAgICAgIGZuID0gaXNCaW5kS2V5ID8gdGhpc0JpbmRpbmdbZnVuY10gOiBmdW5jO1xuXG4gICAgICAgIGxlbmd0aCA9IGFyZ3MubGVuZ3RoO1xuICAgICAgICBpZiAoYXJnUG9zKSB7XG4gICAgICAgICAgYXJncyA9IHJlb3JkZXIoYXJncywgYXJnUG9zKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0ZsaXAgJiYgbGVuZ3RoID4gMSkge1xuICAgICAgICAgIGFyZ3MucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FyeSAmJiBhcnkgPCBsZW5ndGgpIHtcbiAgICAgICAgICBhcmdzLmxlbmd0aCA9IGFyeTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSB7XG4gICAgICAgICAgZm4gPSBDdG9yIHx8IGNyZWF0ZUN0b3IoZm4pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzQmluZGluZywgYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5pbnZlcnRCeWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGFjY3VtdWxhdG9yIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0b0l0ZXJhdGVlIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIGl0ZXJhdGVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVJbnZlcnRlcihzZXR0ZXIsIHRvSXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52ZXJ0ZXIob2JqZWN0LCBzZXR0ZXIsIHRvSXRlcmF0ZWUoaXRlcmF0ZWUpLCB7fSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgbWF0aGVtYXRpY2FsIG9wZXJhdGlvbiBvbiB0d28gdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcGVyYXRvciBUaGUgZnVuY3Rpb24gdG8gcGVyZm9ybSB0aGUgb3BlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgdXNlZCBmb3IgYHVuZGVmaW5lZGAgYXJndW1lbnRzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1hdGhlbWF0aWNhbCBvcGVyYXRpb24gZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlTWF0aE9wZXJhdGlvbihvcGVyYXRvciwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIG90aGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG90aGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBvdGhlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3RoZXIgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZVRvU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgIG90aGVyID0gYmFzZVRvU3RyaW5nKG90aGVyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgPSBiYXNlVG9OdW1iZXIodmFsdWUpO1xuICAgICAgICAgICAgb3RoZXIgPSBiYXNlVG9OdW1iZXIob3RoZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBvcGVyYXRvcih2YWx1ZSwgb3RoZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLm92ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhcnJheUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBpdGVyYXRlZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgb3ZlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVPdmVyKGFycmF5RnVuYykge1xuICAgICAgcmV0dXJuIGZsYXRSZXN0KGZ1bmN0aW9uKGl0ZXJhdGVlcykge1xuICAgICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMsIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG4gICAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgdmFyIHRoaXNBcmcgPSB0aGlzO1xuICAgICAgICAgIHJldHVybiBhcnJheUZ1bmMoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICAgICAgcmV0dXJuIGFwcGx5KGl0ZXJhdGVlLCB0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIHRoZSBwYWRkaW5nIGZvciBgc3RyaW5nYCBiYXNlZCBvbiBgbGVuZ3RoYC4gVGhlIGBjaGFyc2Agc3RyaW5nXG4gICAgICogaXMgdHJ1bmNhdGVkIGlmIHRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyBleGNlZWRzIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGluZyBmb3IgYHN0cmluZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUGFkZGluZyhsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBjaGFycyA9IGNoYXJzID09PSB1bmRlZmluZWQgPyAnICcgOiBiYXNlVG9TdHJpbmcoY2hhcnMpO1xuXG4gICAgICB2YXIgY2hhcnNMZW5ndGggPSBjaGFycy5sZW5ndGg7XG4gICAgICBpZiAoY2hhcnNMZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiBjaGFyc0xlbmd0aCA/IGJhc2VSZXBlYXQoY2hhcnMsIGxlbmd0aCkgOiBjaGFycztcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlUmVwZWF0KGNoYXJzLCBuYXRpdmVDZWlsKGxlbmd0aCAvIHN0cmluZ1NpemUoY2hhcnMpKSk7XG4gICAgICByZXR1cm4gaGFzVW5pY29kZShjaGFycylcbiAgICAgICAgPyBjYXN0U2xpY2Uoc3RyaW5nVG9BcnJheShyZXN1bHQpLCAwLCBsZW5ndGgpLmpvaW4oJycpXG4gICAgICAgIDogcmVzdWx0LnNsaWNlKDAsIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZ1xuICAgICAqIG9mIGB0aGlzQXJnYCBhbmQgYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUGFydGlhbChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBsZWZ0SW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlZnRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVmdExlbmd0aCArIGFyZ3NMZW5ndGgpLFxuICAgICAgICAgICAgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuXG4gICAgICAgIHdoaWxlICgrK2xlZnRJbmRleCA8IGxlZnRMZW5ndGgpIHtcbiAgICAgICAgICBhcmdzW2xlZnRJbmRleF0gPSBwYXJ0aWFsc1tsZWZ0SW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChhcmdzTGVuZ3RoLS0pIHtcbiAgICAgICAgICBhcmdzW2xlZnRJbmRleCsrXSA9IGFyZ3VtZW50c1srK2FyZ3NJbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZuLCBpc0JpbmQgPyB0aGlzQXJnIDogdGhpcywgYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8ucmFuZ2VgIG9yIGBfLnJhbmdlUmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByYW5nZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSYW5nZShmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdGFydCwgZW5kLCBzdGVwKSB7XG4gICAgICAgIGlmIChzdGVwICYmIHR5cGVvZiBzdGVwICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKHN0YXJ0LCBlbmQsIHN0ZXApKSB7XG4gICAgICAgICAgZW5kID0gc3RlcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBFbnN1cmUgdGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gICAgICAgIHN0YXJ0ID0gdG9GaW5pdGUoc3RhcnQpO1xuICAgICAgICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBlbmQgPSBzdGFydDtcbiAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZW5kID0gdG9GaW5pdGUoZW5kKTtcbiAgICAgICAgfVxuICAgICAgICBzdGVwID0gc3RlcCA9PT0gdW5kZWZpbmVkID8gKHN0YXJ0IDwgZW5kID8gMSA6IC0xKSA6IHRvRmluaXRlKHN0ZXApO1xuICAgICAgICByZXR1cm4gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcmVsYXRpb25hbCBvcGVyYXRpb24gb24gdHdvIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3BlcmF0b3IgVGhlIGZ1bmN0aW9uIHRvIHBlcmZvcm0gdGhlIG9wZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZWxhdGlvbmFsIG9wZXJhdGlvbiBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKG9wZXJhdG9yKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICAgIGlmICghKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyAmJiB0eXBlb2Ygb3RoZXIgPT0gJ3N0cmluZycpKSB7XG4gICAgICAgICAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gICAgICAgICAgb3RoZXIgPSB0b051bWJlcihvdGhlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9wZXJhdG9yKHZhbHVlLCBvdGhlcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBjb250aW51ZSBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHdyYXBGdW5jIFRoZSBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIGBmdW5jYCB3cmFwcGVyLlxuICAgICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSZWN1cnJ5KGZ1bmMsIGJpdG1hc2ssIHdyYXBGdW5jLCBwbGFjZWhvbGRlciwgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQ3VycnkgPSBiaXRtYXNrICYgV1JBUF9DVVJSWV9GTEFHLFxuICAgICAgICAgIG5ld0hvbGRlcnMgPSBpc0N1cnJ5ID8gaG9sZGVycyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBuZXdIb2xkZXJzUmlnaHQgPSBpc0N1cnJ5ID8gdW5kZWZpbmVkIDogaG9sZGVycyxcbiAgICAgICAgICBuZXdQYXJ0aWFscyA9IGlzQ3VycnkgPyBwYXJ0aWFscyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBuZXdQYXJ0aWFsc1JpZ2h0ID0gaXNDdXJyeSA/IHVuZGVmaW5lZCA6IHBhcnRpYWxzO1xuXG4gICAgICBiaXRtYXNrIHw9IChpc0N1cnJ5ID8gV1JBUF9QQVJUSUFMX0ZMQUcgOiBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyk7XG4gICAgICBiaXRtYXNrICY9IH4oaXNDdXJyeSA/IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHIDogV1JBUF9QQVJUSUFMX0ZMQUcpO1xuXG4gICAgICBpZiAoIShiaXRtYXNrICYgV1JBUF9DVVJSWV9CT1VORF9GTEFHKSkge1xuICAgICAgICBiaXRtYXNrICY9IH4oV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUcpO1xuICAgICAgfVxuICAgICAgdmFyIG5ld0RhdGEgPSBbXG4gICAgICAgIGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIG5ld1BhcnRpYWxzLCBuZXdIb2xkZXJzLCBuZXdQYXJ0aWFsc1JpZ2h0LFxuICAgICAgICBuZXdIb2xkZXJzUmlnaHQsIGFyZ1BvcywgYXJ5LCBhcml0eVxuICAgICAgXTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHdyYXBGdW5jLmFwcGx5KHVuZGVmaW5lZCwgbmV3RGF0YSk7XG4gICAgICBpZiAoaXNMYXppYWJsZShmdW5jKSkge1xuICAgICAgICBzZXREYXRhKHJlc3VsdCwgbmV3RGF0YSk7XG4gICAgICB9XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlcjtcbiAgICAgIHJldHVybiBzZXRXcmFwVG9TdHJpbmcocmVzdWx0LCBmdW5jLCBiaXRtYXNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5yb3VuZGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSBgTWF0aGAgbWV0aG9kIHRvIHVzZSB3aGVuIHJvdW5kaW5nLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJvdW5kIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJvdW5kKG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gTWF0aFttZXRob2ROYW1lXTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihudW1iZXIsIHByZWNpc2lvbikge1xuICAgICAgICBudW1iZXIgPSB0b051bWJlcihudW1iZXIpO1xuICAgICAgICBwcmVjaXNpb24gPSBwcmVjaXNpb24gPT0gbnVsbCA/IDAgOiBuYXRpdmVNaW4odG9JbnRlZ2VyKHByZWNpc2lvbiksIDI5Mik7XG4gICAgICAgIGlmIChwcmVjaXNpb24gJiYgbmF0aXZlSXNGaW5pdGUobnVtYmVyKSkge1xuICAgICAgICAgIC8vIFNoaWZ0IHdpdGggZXhwb25lbnRpYWwgbm90YXRpb24gdG8gYXZvaWQgZmxvYXRpbmctcG9pbnQgaXNzdWVzLlxuICAgICAgICAgIC8vIFNlZSBbTUROXShodHRwczovL21kbi5pby9yb3VuZCNFeGFtcGxlcykgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgICB2YXIgcGFpciA9ICh0b1N0cmluZyhudW1iZXIpICsgJ2UnKS5zcGxpdCgnZScpLFxuICAgICAgICAgICAgICB2YWx1ZSA9IGZ1bmMocGFpclswXSArICdlJyArICgrcGFpclsxXSArIHByZWNpc2lvbikpO1xuXG4gICAgICAgICAgcGFpciA9ICh0b1N0cmluZyh2YWx1ZSkgKyAnZScpLnNwbGl0KCdlJyk7XG4gICAgICAgICAgcmV0dXJuICsocGFpclswXSArICdlJyArICgrcGFpclsxXSAtIHByZWNpc2lvbikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jKG51bWJlcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzZXQgb2JqZWN0IG9mIGB2YWx1ZXNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhZGQgdG8gdGhlIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgc2V0LlxuICAgICAqL1xuICAgIHZhciBjcmVhdGVTZXQgPSAhKFNldCAmJiAoMSAvIHNldFRvQXJyYXkobmV3IFNldChbLC0wXSkpWzFdKSA9PSBJTkZJTklUWSkgPyBub29wIDogZnVuY3Rpb24odmFsdWVzKSB7XG4gICAgICByZXR1cm4gbmV3IFNldCh2YWx1ZXMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8udG9QYWlyc2Agb3IgYF8udG9QYWlyc0luYCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYWlycyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVUb1BhaXJzKGtleXNGdW5jKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHZhciB0YWcgPSBnZXRUYWcob2JqZWN0KTtcbiAgICAgICAgaWYgKHRhZyA9PSBtYXBUYWcpIHtcbiAgICAgICAgICByZXR1cm4gbWFwVG9BcnJheShvYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YWcgPT0gc2V0VGFnKSB7XG4gICAgICAgICAgcmV0dXJuIHNldFRvUGFpcnMob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmFzZVRvUGFpcnMob2JqZWN0LCBrZXlzRnVuYyhvYmplY3QpKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgZWl0aGVyIGN1cnJpZXMgb3IgaW52b2tlcyBgZnVuY2Agd2l0aCBvcHRpb25hbFxuICAgICAqIGB0aGlzYCBiaW5kaW5nIGFuZCBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSBmdW5jIFRoZSBmdW5jdGlvbiBvciBtZXRob2QgbmFtZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICAgICAqICAgIDEgLSBgXy5iaW5kYFxuICAgICAqICAgIDIgLSBgXy5iaW5kS2V5YFxuICAgICAqICAgIDQgLSBgXy5jdXJyeWAgb3IgYF8uY3VycnlSaWdodGAgb2YgYSBib3VuZCBmdW5jdGlvblxuICAgICAqICAgIDggLSBgXy5jdXJyeWBcbiAgICAgKiAgIDE2IC0gYF8uY3VycnlSaWdodGBcbiAgICAgKiAgIDMyIC0gYF8ucGFydGlhbGBcbiAgICAgKiAgIDY0IC0gYF8ucGFydGlhbFJpZ2h0YFxuICAgICAqICAxMjggLSBgXy5yZWFyZ2BcbiAgICAgKiAgMjU2IC0gYF8uYXJ5YFxuICAgICAqICA1MTIgLSBgXy5mbGlwYFxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVdyYXAoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQmluZEtleSA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfS0VZX0ZMQUc7XG4gICAgICBpZiAoIWlzQmluZEtleSAmJiB0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBwYXJ0aWFscyA/IHBhcnRpYWxzLmxlbmd0aCA6IDA7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICBiaXRtYXNrICY9IH4oV1JBUF9QQVJUSUFMX0ZMQUcgfCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyk7XG4gICAgICAgIHBhcnRpYWxzID0gaG9sZGVycyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGFyeSA9IGFyeSA9PT0gdW5kZWZpbmVkID8gYXJ5IDogbmF0aXZlTWF4KHRvSW50ZWdlcihhcnkpLCAwKTtcbiAgICAgIGFyaXR5ID0gYXJpdHkgPT09IHVuZGVmaW5lZCA/IGFyaXR5IDogdG9JbnRlZ2VyKGFyaXR5KTtcbiAgICAgIGxlbmd0aCAtPSBob2xkZXJzID8gaG9sZGVycy5sZW5ndGggOiAwO1xuXG4gICAgICBpZiAoYml0bWFzayAmIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsc1JpZ2h0ID0gcGFydGlhbHMsXG4gICAgICAgICAgICBob2xkZXJzUmlnaHQgPSBob2xkZXJzO1xuXG4gICAgICAgIHBhcnRpYWxzID0gaG9sZGVycyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHZhciBkYXRhID0gaXNCaW5kS2V5ID8gdW5kZWZpbmVkIDogZ2V0RGF0YShmdW5jKTtcblxuICAgICAgdmFyIG5ld0RhdGEgPSBbXG4gICAgICAgIGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsXG4gICAgICAgIGFyZ1BvcywgYXJ5LCBhcml0eVxuICAgICAgXTtcblxuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgbWVyZ2VEYXRhKG5ld0RhdGEsIGRhdGEpO1xuICAgICAgfVxuICAgICAgZnVuYyA9IG5ld0RhdGFbMF07XG4gICAgICBiaXRtYXNrID0gbmV3RGF0YVsxXTtcbiAgICAgIHRoaXNBcmcgPSBuZXdEYXRhWzJdO1xuICAgICAgcGFydGlhbHMgPSBuZXdEYXRhWzNdO1xuICAgICAgaG9sZGVycyA9IG5ld0RhdGFbNF07XG4gICAgICBhcml0eSA9IG5ld0RhdGFbOV0gPSBuZXdEYXRhWzldID09PSB1bmRlZmluZWRcbiAgICAgICAgPyAoaXNCaW5kS2V5ID8gMCA6IGZ1bmMubGVuZ3RoKVxuICAgICAgICA6IG5hdGl2ZU1heChuZXdEYXRhWzldIC0gbGVuZ3RoLCAwKTtcblxuICAgICAgaWYgKCFhcml0eSAmJiBiaXRtYXNrICYgKFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfQ1VSUllfUklHSFRfRkxBRykpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfQ1VSUllfUklHSFRfRkxBRyk7XG4gICAgICB9XG4gICAgICBpZiAoIWJpdG1hc2sgfHwgYml0bWFzayA9PSBXUkFQX0JJTkRfRkxBRykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlQmluZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnKTtcbiAgICAgIH0gZWxzZSBpZiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcgfHwgYml0bWFzayA9PSBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpIHtcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlQ3VycnkoZnVuYywgYml0bWFzaywgYXJpdHkpO1xuICAgICAgfSBlbHNlIGlmICgoYml0bWFzayA9PSBXUkFQX1BBUlRJQUxfRkxBRyB8fCBiaXRtYXNrID09IChXUkFQX0JJTkRfRkxBRyB8IFdSQVBfUEFSVElBTF9GTEFHKSkgJiYgIWhvbGRlcnMubGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZVBhcnRpYWwoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlSHlicmlkLmFwcGx5KHVuZGVmaW5lZCwgbmV3RGF0YSk7XG4gICAgICB9XG4gICAgICB2YXIgc2V0dGVyID0gZGF0YSA/IGJhc2VTZXREYXRhIDogc2V0RGF0YTtcbiAgICAgIHJldHVybiBzZXRXcmFwVG9TdHJpbmcoc2V0dGVyKHJlc3VsdCwgbmV3RGF0YSksIGZ1bmMsIGJpdG1hc2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8uZGVmYXVsdHNgIHRvIGN1c3RvbWl6ZSBpdHMgYF8uYXNzaWduSW5gIHVzZSB0byBhc3NpZ24gcHJvcGVydGllc1xuICAgICAqIG9mIHNvdXJjZSBvYmplY3RzIHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgZm9yIGFsbCBkZXN0aW5hdGlvbiBwcm9wZXJ0aWVzXG4gICAgICogdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IG9ialZhbHVlIFRoZSBkZXN0aW5hdGlvbiB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSBzb3VyY2UgdmFsdWUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgcGFyZW50IG9iamVjdCBvZiBgb2JqVmFsdWVgLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tRGVmYXVsdHNBc3NpZ25JbihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgIChlcShvYmpWYWx1ZSwgb2JqZWN0UHJvdG9ba2V5XSkgJiYgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICByZXR1cm4gc3JjVmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqVmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5kZWZhdWx0c0RlZXBgIHRvIGN1c3RvbWl6ZSBpdHMgYF8ubWVyZ2VgIHVzZSB0byBtZXJnZSBzb3VyY2VcbiAgICAgKiBvYmplY3RzIGludG8gZGVzdGluYXRpb24gb2JqZWN0cyB0aGF0IGFyZSBwYXNzZWQgdGhydS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBvYmpWYWx1ZSBUaGUgZGVzdGluYXRpb24gdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgc291cmNlIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gbWVyZ2UuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgcGFyZW50IG9iamVjdCBvZiBgb2JqVmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHBhcmVudCBvYmplY3Qgb2YgYHNyY1ZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICAgICAqICBjb3VudGVycGFydHMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21EZWZhdWx0c01lcmdlKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spIHtcbiAgICAgIGlmIChpc09iamVjdChvYmpWYWx1ZSkgJiYgaXNPYmplY3Qoc3JjVmFsdWUpKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBzdGFjay5zZXQoc3JjVmFsdWUsIG9ialZhbHVlKTtcbiAgICAgICAgYmFzZU1lcmdlKG9ialZhbHVlLCBzcmNWYWx1ZSwgdW5kZWZpbmVkLCBjdXN0b21EZWZhdWx0c01lcmdlLCBzdGFjayk7XG4gICAgICAgIHN0YWNrWydkZWxldGUnXShzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqVmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5vbWl0YCB0byBjdXN0b21pemUgaXRzIGBfLmNsb25lRGVlcGAgdXNlIHRvIG9ubHkgY2xvbmUgcGxhaW5cbiAgICAgKiBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdW5jbG9uZWQgdmFsdWUgb3IgYHVuZGVmaW5lZGAgdG8gZGVmZXIgY2xvbmluZyB0byBgXy5jbG9uZURlZXBgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbU9taXRDbG9uZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzUGxhaW5PYmplY3QodmFsdWUpID8gdW5kZWZpbmVkIDogdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBhcnJheXMgd2l0aCBzdXBwb3J0IGZvclxuICAgICAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtBcnJheX0gb3RoZXIgVGhlIG90aGVyIGFycmF5IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgYXJyYXlgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcnJheXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbEFycmF5cyhhcnJheSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICAgICAgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIG90aExlbmd0aCA9IG90aGVyLmxlbmd0aDtcblxuICAgICAgaWYgKGFyckxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIShpc1BhcnRpYWwgJiYgb3RoTGVuZ3RoID4gYXJyTGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBDaGVjayB0aGF0IGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIGFyclN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICAgICAgdmFyIG90aFN0YWNrZWQgPSBzdGFjay5nZXQob3RoZXIpO1xuICAgICAgaWYgKGFyclN0YWNrZWQgJiYgb3RoU3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gYXJyU3RhY2tlZCA9PSBvdGhlciAmJiBvdGhTdGFja2VkID09IGFycmF5O1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gdHJ1ZSxcbiAgICAgICAgICBzZWVuID0gKGJpdG1hc2sgJiBDT01QQVJFX1VOT1JERVJFRF9GTEFHKSA/IG5ldyBTZXRDYWNoZSA6IHVuZGVmaW5lZDtcblxuICAgICAgc3RhY2suc2V0KGFycmF5LCBvdGhlcik7XG4gICAgICBzdGFjay5zZXQob3RoZXIsIGFycmF5KTtcblxuICAgICAgLy8gSWdub3JlIG5vbi1pbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBhcnJMZW5ndGgpIHtcbiAgICAgICAgdmFyIGFyclZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltpbmRleF07XG5cbiAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgYXJyVmFsdWUsIGluZGV4LCBvdGhlciwgYXJyYXksIHN0YWNrKVxuICAgICAgICAgICAgOiBjdXN0b21pemVyKGFyclZhbHVlLCBvdGhWYWx1ZSwgaW5kZXgsIGFycmF5LCBvdGhlciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb21wYXJlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKGNvbXBhcmVkKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgaWYgKHNlZW4pIHtcbiAgICAgICAgICBpZiAoIWFycmF5U29tZShvdGhlciwgZnVuY3Rpb24ob3RoVmFsdWUsIG90aEluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjYWNoZUhhcyhzZWVuLCBvdGhJbmRleCkgJiZcbiAgICAgICAgICAgICAgICAgICAgKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gc2Vlbi5wdXNoKG90aEluZGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghKFxuICAgICAgICAgICAgICBhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHxcbiAgICAgICAgICAgICAgICBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3RhY2tbJ2RlbGV0ZSddKGFycmF5KTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgY29tcGFyaW5nIG9iamVjdHMgb2ZcbiAgICAgKiB0aGUgc2FtZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjb21wYXJpbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICAgICAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIG9yIGBTdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdHMgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCB0YWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICAgICAob2JqZWN0LmJ5dGVPZmZzZXQgIT0gb3RoZXIuYnl0ZU9mZnNldCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb2JqZWN0ID0gb2JqZWN0LmJ1ZmZlcjtcbiAgICAgICAgICBvdGhlciA9IG90aGVyLmJ1ZmZlcjtcblxuICAgICAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAgICAgIWVxdWFsRnVuYyhuZXcgVWludDhBcnJheShvYmplY3QpLCBuZXcgVWludDhBcnJheShvdGhlcikpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgIGNhc2UgYm9vbFRhZzpcbiAgICAgICAgY2FzZSBkYXRlVGFnOlxuICAgICAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgICAgICAvLyBDb2VyY2UgYm9vbGVhbnMgdG8gYDFgIG9yIGAwYCBhbmQgZGF0ZXMgdG8gbWlsbGlzZWNvbmRzLlxuICAgICAgICAgIC8vIEludmFsaWQgZGF0ZXMgYXJlIGNvZXJjZWQgdG8gYE5hTmAuXG4gICAgICAgICAgcmV0dXJuIGVxKCtvYmplY3QsICtvdGhlcik7XG5cbiAgICAgICAgY2FzZSBlcnJvclRhZzpcbiAgICAgICAgICByZXR1cm4gb2JqZWN0Lm5hbWUgPT0gb3RoZXIubmFtZSAmJiBvYmplY3QubWVzc2FnZSA9PSBvdGhlci5tZXNzYWdlO1xuXG4gICAgICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgICAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgICAgICAvLyBDb2VyY2UgcmVnZXhlcyB0byBzdHJpbmdzIGFuZCB0cmVhdCBzdHJpbmdzLCBwcmltaXRpdmVzIGFuZCBvYmplY3RzLFxuICAgICAgICAgIC8vIGFzIGVxdWFsLiBTZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbiAgICAgICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICAgIHJldHVybiBvYmplY3QgPT0gKG90aGVyICsgJycpO1xuXG4gICAgICAgIGNhc2UgbWFwVGFnOlxuICAgICAgICAgIHZhciBjb252ZXJ0ID0gbWFwVG9BcnJheTtcblxuICAgICAgICBjYXNlIHNldFRhZzpcbiAgICAgICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHO1xuICAgICAgICAgIGNvbnZlcnQgfHwgKGNvbnZlcnQgPSBzZXRUb0FycmF5KTtcblxuICAgICAgICAgIGlmIChvYmplY3Quc2l6ZSAhPSBvdGhlci5zaXplICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBiaXRtYXNrIHw9IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUc7XG5cbiAgICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGVxdWFsQXJyYXlzKGNvbnZlcnQob2JqZWN0KSwgY29udmVydChvdGhlciksIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICAgICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICAgICAgaWYgKHN5bWJvbFZhbHVlT2YpIHtcbiAgICAgICAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mLmNhbGwob2JqZWN0KSA9PSBzeW1ib2xWYWx1ZU9mLmNhbGwob3RoZXIpO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIG9iamVjdHMgd2l0aCBzdXBwb3J0IGZvclxuICAgICAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICAgICAgb2JqUHJvcHMgPSBnZXRBbGxLZXlzKG9iamVjdCksXG4gICAgICAgICAgb2JqTGVuZ3RoID0gb2JqUHJvcHMubGVuZ3RoLFxuICAgICAgICAgIG90aFByb3BzID0gZ2V0QWxsS2V5cyhvdGhlciksXG4gICAgICAgICAgb3RoTGVuZ3RoID0gb3RoUHJvcHMubGVuZ3RoO1xuXG4gICAgICBpZiAob2JqTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IG9iakxlbmd0aDtcbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgICAgIGlmICghKGlzUGFydGlhbCA/IGtleSBpbiBvdGhlciA6IGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsIGtleSkpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBDaGVjayB0aGF0IGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIG9ialN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgIHZhciBvdGhTdGFja2VkID0gc3RhY2suZ2V0KG90aGVyKTtcbiAgICAgIGlmIChvYmpTdGFja2VkICYmIG90aFN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIG9ialN0YWNrZWQgPT0gb3RoZXIgJiYgb3RoU3RhY2tlZCA9PSBvYmplY3Q7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTtcblxuICAgICAgdmFyIHNraXBDdG9yID0gaXNQYXJ0aWFsO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHtcbiAgICAgICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgICAgIG90aFZhbHVlID0gb3RoZXJba2V5XTtcblxuICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBvYmpWYWx1ZSwga2V5LCBvdGhlciwgb2JqZWN0LCBzdGFjaylcbiAgICAgICAgICAgIDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gKG9ialZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMob2JqVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpXG4gICAgICAgICAgICAgIDogY29tcGFyZWRcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBza2lwQ3RvciB8fCAoc2tpcEN0b3IgPSBrZXkgPT0gJ2NvbnN0cnVjdG9yJyk7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ICYmICFza2lwQ3Rvcikge1xuICAgICAgICB2YXIgb2JqQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcixcbiAgICAgICAgICAgIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcblxuICAgICAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICAgICAgaWYgKG9iakN0b3IgIT0gb3RoQ3RvciAmJlxuICAgICAgICAgICAgKCdjb25zdHJ1Y3RvcicgaW4gb2JqZWN0ICYmICdjb25zdHJ1Y3RvcicgaW4gb3RoZXIpICYmXG4gICAgICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICAgICAgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCBmbGF0dGVucyB0aGUgcmVzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0UmVzdChmdW5jKSB7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgdW5kZWZpbmVkLCBmbGF0dGVuKSwgZnVuYyArICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5cywgZ2V0U3ltYm9scyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICAgICAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEFsbEtleXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNJbiwgZ2V0U3ltYm9sc0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBnZXREYXRhID0gIW1ldGFNYXAgPyBub29wIDogZnVuY3Rpb24oZnVuYykge1xuICAgICAgcmV0dXJuIG1ldGFNYXAuZ2V0KGZ1bmMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuYW1lIG9mIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRGdW5jTmFtZShmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gKGZ1bmMubmFtZSArICcnKSxcbiAgICAgICAgICBhcnJheSA9IHJlYWxOYW1lc1tyZXN1bHRdLFxuICAgICAgICAgIGxlbmd0aCA9IGhhc093blByb3BlcnR5LmNhbGwocmVhbE5hbWVzLCByZXN1bHQpID8gYXJyYXkubGVuZ3RoIDogMDtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBkYXRhID0gYXJyYXlbbGVuZ3RoXSxcbiAgICAgICAgICAgIG90aGVyRnVuYyA9IGRhdGEuZnVuYztcbiAgICAgICAgaWYgKG90aGVyRnVuYyA9PSBudWxsIHx8IG90aGVyRnVuYyA9PSBmdW5jKSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGEubmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhcmd1bWVudCBwbGFjZWhvbGRlciB2YWx1ZSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRIb2xkZXIoZnVuYykge1xuICAgICAgdmFyIG9iamVjdCA9IGhhc093blByb3BlcnR5LmNhbGwobG9kYXNoLCAncGxhY2Vob2xkZXInKSA/IGxvZGFzaCA6IGZ1bmM7XG4gICAgICByZXR1cm4gb2JqZWN0LnBsYWNlaG9sZGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFwcHJvcHJpYXRlIFwiaXRlcmF0ZWVcIiBmdW5jdGlvbi4gSWYgYF8uaXRlcmF0ZWVgIGlzIGN1c3RvbWl6ZWQsXG4gICAgICogdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBjdXN0b20gbWV0aG9kLCBvdGhlcndpc2UgaXQgcmV0dXJucyBgYmFzZUl0ZXJhdGVlYC5cbiAgICAgKiBJZiBhcmd1bWVudHMgYXJlIHByb3ZpZGVkLCB0aGUgY2hvc2VuIGZ1bmN0aW9uIGlzIGludm9rZWQgd2l0aCB0aGVtIGFuZFxuICAgICAqIGl0cyByZXN1bHQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gW3ZhbHVlXSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgdGhlIGNyZWF0ZWQgaXRlcmF0ZWUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjaG9zZW4gZnVuY3Rpb24gb3IgaXRzIHJlc3VsdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRJdGVyYXRlZSgpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2guaXRlcmF0ZWUgfHwgaXRlcmF0ZWU7XG4gICAgICByZXN1bHQgPSByZXN1bHQgPT09IGl0ZXJhdGVlID8gYmFzZUl0ZXJhdGVlIDogcmVzdWx0O1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyByZXN1bHQoYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0pIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICAgICAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gICAgICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICAgICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICAgICAgOiBkYXRhLm1hcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbWF0Y2ggZGF0YSBvZiBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRNYXRjaERhdGEob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0ga2V5cyhvYmplY3QpLFxuICAgICAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIga2V5ID0gcmVzdWx0W2xlbmd0aF0sXG4gICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgIHJlc3VsdFtsZW5ndGhdID0gW2tleSwgdmFsdWUsIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICAgICAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgICAgIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICAgIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIGlmICh1bm1hc2tlZCkge1xuICAgICAgICBpZiAoaXNPd24pIHtcbiAgICAgICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICAgICAqL1xuICAgIHZhciBnZXRTeW1ib2xzID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgICAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICAgICAqL1xuICAgIHZhciBnZXRTeW1ib2xzSW4gPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgd2hpbGUgKG9iamVjdCkge1xuICAgICAgICBhcnJheVB1c2gocmVzdWx0LCBnZXRTeW1ib2xzKG9iamVjdCkpO1xuICAgICAgICBvYmplY3QgPSBnZXRQcm90b3R5cGUob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICB2YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuICAgIC8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbiAgICBpZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAgICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgICAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgICAgIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICAgICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2aWV3LCBhcHBseWluZyBhbnkgYHRyYW5zZm9ybXNgIHRvIHRoZSBgc3RhcnRgIGFuZCBgZW5kYCBwb3NpdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHZpZXcuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSB2aWV3LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHRyYW5zZm9ybXMgVGhlIHRyYW5zZm9ybWF0aW9ucyB0byBhcHBseSB0byB0aGUgdmlldy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBgc3RhcnRgIGFuZCBgZW5kYFxuICAgICAqICBwb3NpdGlvbnMgb2YgdGhlIHZpZXcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0VmlldyhzdGFydCwgZW5kLCB0cmFuc2Zvcm1zKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB0cmFuc2Zvcm1zLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSB0cmFuc2Zvcm1zW2luZGV4XSxcbiAgICAgICAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgICAgICAgc3dpdGNoIChkYXRhLnR5cGUpIHtcbiAgICAgICAgICBjYXNlICdkcm9wJzogICAgICBzdGFydCArPSBzaXplOyBicmVhaztcbiAgICAgICAgICBjYXNlICdkcm9wUmlnaHQnOiBlbmQgLT0gc2l6ZTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndGFrZSc6ICAgICAgZW5kID0gbmF0aXZlTWluKGVuZCwgc3RhcnQgKyBzaXplKTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndGFrZVJpZ2h0Jzogc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQsIGVuZCAtIHNpemUpOyBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHsgJ3N0YXJ0Jzogc3RhcnQsICdlbmQnOiBlbmQgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyB3cmFwcGVyIGRldGFpbHMgZnJvbSB0aGUgYHNvdXJjZWAgYm9keSBjb21tZW50LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFRoZSBzb3VyY2UgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdyYXBwZXIgZGV0YWlscy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRXcmFwRGV0YWlscyhzb3VyY2UpIHtcbiAgICAgIHZhciBtYXRjaCA9IHNvdXJjZS5tYXRjaChyZVdyYXBEZXRhaWxzKTtcbiAgICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdLnNwbGl0KHJlU3BsaXREZXRhaWxzKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgZXhpc3RzIG9uIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFzRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2sgcHJvcGVydGllcy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBoYXNGdW5jKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSk7XG4gICAgICAgIGlmICghKHJlc3VsdCA9IG9iamVjdCAhPSBudWxsICYmIGhhc0Z1bmMob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IG9iamVjdFtrZXldO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCB8fCArK2luZGV4ICE9IGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgbGVuZ3RoID0gb2JqZWN0ID09IG51bGwgPyAwIDogb2JqZWN0Lmxlbmd0aDtcbiAgICAgIHJldHVybiAhIWxlbmd0aCAmJiBpc0xlbmd0aChsZW5ndGgpICYmIGlzSW5kZXgoa2V5LCBsZW5ndGgpICYmXG4gICAgICAgIChpc0FycmF5KG9iamVjdCkgfHwgaXNBcmd1bWVudHMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gYXJyYXkgY2xvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZUFycmF5KGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IG5ldyBhcnJheS5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gICAgICAvLyBBZGQgcHJvcGVydGllcyBhc3NpZ25lZCBieSBgUmVnRXhwI2V4ZWNgLlxuICAgICAgaWYgKGxlbmd0aCAmJiB0eXBlb2YgYXJyYXlbMF0gPT0gJ3N0cmluZycgJiYgaGFzT3duUHJvcGVydHkuY2FsbChhcnJheSwgJ2luZGV4JykpIHtcbiAgICAgICAgcmVzdWx0LmluZGV4ID0gYXJyYXkuaW5kZXg7XG4gICAgICAgIHJlc3VsdC5pbnB1dCA9IGFycmF5LmlucHV0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gICAgICByZXR1cm4gKHR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNQcm90b3R5cGUob2JqZWN0KSlcbiAgICAgICAgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKVxuICAgICAgICA6IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZSBiYXNlZCBvbiBpdHMgYHRvU3RyaW5nVGFnYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY2xvbmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gICAgICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBNYXBgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIGBTZXRgLCBvciBgU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZUJ5VGFnKG9iamVjdCwgdGFnLCBpc0RlZXApIHtcbiAgICAgIHZhciBDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVBcnJheUJ1ZmZlcihvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgYm9vbFRhZzpcbiAgICAgICAgY2FzZSBkYXRlVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3Rvcigrb2JqZWN0KTtcblxuICAgICAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZURhdGFWaWV3KG9iamVjdCwgaXNEZWVwKTtcblxuICAgICAgICBjYXNlIGZsb2F0MzJUYWc6IGNhc2UgZmxvYXQ2NFRhZzpcbiAgICAgICAgY2FzZSBpbnQ4VGFnOiBjYXNlIGludDE2VGFnOiBjYXNlIGludDMyVGFnOlxuICAgICAgICBjYXNlIHVpbnQ4VGFnOiBjYXNlIHVpbnQ4Q2xhbXBlZFRhZzogY2FzZSB1aW50MTZUYWc6IGNhc2UgdWludDMyVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVR5cGVkQXJyYXkob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgICAgIGNhc2UgbWFwVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgICAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSByZWdleHBUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lUmVnRXhwKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSBzZXRUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVN5bWJvbChvYmplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluc2VydHMgd3JhcHBlciBgZGV0YWlsc2AgaW4gYSBjb21tZW50IGF0IHRoZSB0b3Agb2YgdGhlIGBzb3VyY2VgIGJvZHkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgVGhlIHNvdXJjZSB0byBtb2RpZnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBkZXRhaWxzIFRoZSBkZXRhaWxzIHRvIGluc2VydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBtb2RpZmllZCBzb3VyY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5zZXJ0V3JhcERldGFpbHMoc291cmNlLCBkZXRhaWxzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gZGV0YWlscy5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgICAgfVxuICAgICAgdmFyIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgICBkZXRhaWxzW2xhc3RJbmRleF0gPSAobGVuZ3RoID4gMSA/ICcmICcgOiAnJykgKyBkZXRhaWxzW2xhc3RJbmRleF07XG4gICAgICBkZXRhaWxzID0gZGV0YWlscy5qb2luKGxlbmd0aCA+IDIgPyAnLCAnIDogJyAnKTtcbiAgICAgIHJldHVybiBzb3VyY2UucmVwbGFjZShyZVdyYXBDb21tZW50LCAne1xcbi8qIFt3cmFwcGVkIHdpdGggJyArIGRldGFpbHMgKyAnXSAqL1xcbicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmxhdHRlbmFibGUgYGFyZ3VtZW50c2Agb2JqZWN0IG9yIGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmbGF0dGVuYWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRmxhdHRlbmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkgfHxcbiAgICAgICAgISEoc3ByZWFkYWJsZVN5bWJvbCAmJiB2YWx1ZSAmJiB2YWx1ZVtzcHJlYWRhYmxlU3ltYm9sXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG5cbiAgICAgIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgICAgICh0eXBlICE9ICdzeW1ib2wnICYmIHJlSXNVaW50LnRlc3QodmFsdWUpKSkgJiZcbiAgICAgICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGdpdmVuIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgdmFsdWUgYXJndW1lbnQuXG4gICAgICogQHBhcmFtIHsqfSBpbmRleCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIGluZGV4IG9yIGtleSBhcmd1bWVudC5cbiAgICAgKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIG9iamVjdCBhcmd1bWVudC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJdGVyYXRlZUNhbGwodmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiBpbmRleDtcbiAgICAgIGlmICh0eXBlID09ICdudW1iZXInXG4gICAgICAgICAgICA/IChpc0FycmF5TGlrZShvYmplY3QpICYmIGlzSW5kZXgoaW5kZXgsIG9iamVjdC5sZW5ndGgpKVxuICAgICAgICAgICAgOiAodHlwZSA9PSAnc3RyaW5nJyAmJiBpbmRleCBpbiBvYmplY3QpXG4gICAgICAgICAgKSB7XG4gICAgICAgIHJldHVybiBlcShvYmplY3RbaW5kZXhdLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lIGFuZCBub3QgYSBwcm9wZXJ0eSBwYXRoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzS2V5KHZhbHVlLCBvYmplY3QpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGlmICh0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicgfHxcbiAgICAgICAgICB2YWx1ZSA9PSBudWxsIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZUlzUGxhaW5Qcm9wLnRlc3QodmFsdWUpIHx8ICFyZUlzRGVlcFByb3AudGVzdCh2YWx1ZSkgfHxcbiAgICAgICAgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIE9iamVjdChvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgICAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgICAgIDogKHZhbHVlID09PSBudWxsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBhIGxhenkgY291bnRlcnBhcnQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaGFzIGEgbGF6eSBjb3VudGVycGFydCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTGF6aWFibGUoZnVuYykge1xuICAgICAgdmFyIGZ1bmNOYW1lID0gZ2V0RnVuY05hbWUoZnVuYyksXG4gICAgICAgICAgb3RoZXIgPSBsb2Rhc2hbZnVuY05hbWVdO1xuXG4gICAgICBpZiAodHlwZW9mIG90aGVyICE9ICdmdW5jdGlvbicgfHwgIShmdW5jTmFtZSBpbiBMYXp5V3JhcHBlci5wcm90b3R5cGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChmdW5jID09PSBvdGhlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBkYXRhID0gZ2V0RGF0YShvdGhlcik7XG4gICAgICByZXR1cm4gISFkYXRhICYmIGZ1bmMgPT09IGRhdGFbMF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICAgICAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGlzIGNhcGFibGUgb2YgYmVpbmcgbWFza2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2thYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgdmFyIGlzTWFza2FibGUgPSBjb3JlSnNEYXRhID8gaXNGdW5jdGlvbiA6IHN0dWJGYWxzZTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgICAgIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaWYgc3VpdGFibGUgZm9yIHN0cmljdFxuICAgICAqICBlcXVhbGl0eSBjb21wYXJpc29ucywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSAmJiAhaXNPYmplY3QodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgbWF0Y2hlc1Byb3BlcnR5YCBmb3Igc291cmNlIHZhbHVlcyBzdWl0YWJsZVxuICAgICAqIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUoa2V5LCBzcmNWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdFtrZXldID09PSBzcmNWYWx1ZSAmJlxuICAgICAgICAgIChzcmNWYWx1ZSAhPT0gdW5kZWZpbmVkIHx8IChrZXkgaW4gT2JqZWN0KG9iamVjdCkpKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1lbW9pemVgIHdoaWNoIGNsZWFycyB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24nc1xuICAgICAqIGNhY2hlIHdoZW4gaXQgZXhjZWVkcyBgTUFYX01FTU9JWkVfU0laRWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZW1vaXplQ2FwcGVkKGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBtZW1vaXplKGZ1bmMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBpZiAoY2FjaGUuc2l6ZSA9PT0gTUFYX01FTU9JWkVfU0laRSkge1xuICAgICAgICAgIGNhY2hlLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgY2FjaGUgPSByZXN1bHQuY2FjaGU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1lcmdlcyB0aGUgZnVuY3Rpb24gbWV0YWRhdGEgb2YgYHNvdXJjZWAgaW50byBgZGF0YWAuXG4gICAgICpcbiAgICAgKiBNZXJnaW5nIG1ldGFkYXRhIHJlZHVjZXMgdGhlIG51bWJlciBvZiB3cmFwcGVycyB1c2VkIHRvIGludm9rZSBhIGZ1bmN0aW9uLlxuICAgICAqIFRoaXMgaXMgcG9zc2libGUgYmVjYXVzZSBtZXRob2RzIGxpa2UgYF8uYmluZGAsIGBfLmN1cnJ5YCwgYW5kIGBfLnBhcnRpYWxgXG4gICAgICogbWF5IGJlIGFwcGxpZWQgcmVnYXJkbGVzcyBvZiBleGVjdXRpb24gb3JkZXIuIE1ldGhvZHMgbGlrZSBgXy5hcnlgIGFuZFxuICAgICAqIGBfLnJlYXJnYCBtb2RpZnkgZnVuY3Rpb24gYXJndW1lbnRzLCBtYWtpbmcgdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgYXJlXG4gICAgICogZXhlY3V0ZWQgaW1wb3J0YW50LCBwcmV2ZW50aW5nIHRoZSBtZXJnaW5nIG9mIG1ldGFkYXRhLiBIb3dldmVyLCB3ZSBtYWtlXG4gICAgICogYW4gZXhjZXB0aW9uIGZvciBhIHNhZmUgY29tYmluZWQgY2FzZSB3aGVyZSBjdXJyaWVkIGZ1bmN0aW9ucyBoYXZlIGBfLmFyeWBcbiAgICAgKiBhbmQgb3IgYF8ucmVhcmdgIGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgVGhlIGRlc3RpbmF0aW9uIG1ldGFkYXRhLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgc291cmNlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgZGF0YWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVyZ2VEYXRhKGRhdGEsIHNvdXJjZSkge1xuICAgICAgdmFyIGJpdG1hc2sgPSBkYXRhWzFdLFxuICAgICAgICAgIHNyY0JpdG1hc2sgPSBzb3VyY2VbMV0sXG4gICAgICAgICAgbmV3Qml0bWFzayA9IGJpdG1hc2sgfCBzcmNCaXRtYXNrLFxuICAgICAgICAgIGlzQ29tbW9uID0gbmV3Qml0bWFzayA8IChXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRyB8IFdSQVBfQVJZX0ZMQUcpO1xuXG4gICAgICB2YXIgaXNDb21ibyA9XG4gICAgICAgICgoc3JjQml0bWFzayA9PSBXUkFQX0FSWV9GTEFHKSAmJiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcpKSB8fFxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gV1JBUF9BUllfRkxBRykgJiYgKGJpdG1hc2sgPT0gV1JBUF9SRUFSR19GTEFHKSAmJiAoZGF0YVs3XS5sZW5ndGggPD0gc291cmNlWzhdKSkgfHxcbiAgICAgICAgKChzcmNCaXRtYXNrID09IChXUkFQX0FSWV9GTEFHIHwgV1JBUF9SRUFSR19GTEFHKSkgJiYgKHNvdXJjZVs3XS5sZW5ndGggPD0gc291cmNlWzhdKSAmJiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcpKTtcblxuICAgICAgLy8gRXhpdCBlYXJseSBpZiBtZXRhZGF0YSBjYW4ndCBiZSBtZXJnZWQuXG4gICAgICBpZiAoIShpc0NvbW1vbiB8fCBpc0NvbWJvKSkge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYHRoaXNBcmdgIGlmIGF2YWlsYWJsZS5cbiAgICAgIGlmIChzcmNCaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICAgICAgZGF0YVsyXSA9IHNvdXJjZVsyXTtcbiAgICAgICAgLy8gU2V0IHdoZW4gY3VycnlpbmcgYSBib3VuZCBmdW5jdGlvbi5cbiAgICAgICAgbmV3Qml0bWFzayB8PSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcgPyAwIDogV1JBUF9DVVJSWV9CT1VORF9GTEFHO1xuICAgICAgfVxuICAgICAgLy8gQ29tcG9zZSBwYXJ0aWFsIGFyZ3VtZW50cy5cbiAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVszXTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB2YXIgcGFydGlhbHMgPSBkYXRhWzNdO1xuICAgICAgICBkYXRhWzNdID0gcGFydGlhbHMgPyBjb21wb3NlQXJncyhwYXJ0aWFscywgdmFsdWUsIHNvdXJjZVs0XSkgOiB2YWx1ZTtcbiAgICAgICAgZGF0YVs0XSA9IHBhcnRpYWxzID8gcmVwbGFjZUhvbGRlcnMoZGF0YVszXSwgUExBQ0VIT0xERVIpIDogc291cmNlWzRdO1xuICAgICAgfVxuICAgICAgLy8gQ29tcG9zZSBwYXJ0aWFsIHJpZ2h0IGFyZ3VtZW50cy5cbiAgICAgIHZhbHVlID0gc291cmNlWzVdO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHBhcnRpYWxzID0gZGF0YVs1XTtcbiAgICAgICAgZGF0YVs1XSA9IHBhcnRpYWxzID8gY29tcG9zZUFyZ3NSaWdodChwYXJ0aWFscywgdmFsdWUsIHNvdXJjZVs2XSkgOiB2YWx1ZTtcbiAgICAgICAgZGF0YVs2XSA9IHBhcnRpYWxzID8gcmVwbGFjZUhvbGRlcnMoZGF0YVs1XSwgUExBQ0VIT0xERVIpIDogc291cmNlWzZdO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJnUG9zYCBpZiBhdmFpbGFibGUuXG4gICAgICB2YWx1ZSA9IHNvdXJjZVs3XTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBkYXRhWzddID0gdmFsdWU7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcnlgIGlmIGl0J3Mgc21hbGxlci5cbiAgICAgIGlmIChzcmNCaXRtYXNrICYgV1JBUF9BUllfRkxBRykge1xuICAgICAgICBkYXRhWzhdID0gZGF0YVs4XSA9PSBudWxsID8gc291cmNlWzhdIDogbmF0aXZlTWluKGRhdGFbOF0sIHNvdXJjZVs4XSk7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcml0eWAgaWYgb25lIGlzIG5vdCBwcm92aWRlZC5cbiAgICAgIGlmIChkYXRhWzldID09IG51bGwpIHtcbiAgICAgICAgZGF0YVs5XSA9IHNvdXJjZVs5XTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGZ1bmNgIGFuZCBtZXJnZSBiaXRtYXNrcy5cbiAgICAgIGRhdGFbMF0gPSBzb3VyY2VbMF07XG4gICAgICBkYXRhWzFdID0gbmV3Qml0bWFzaztcblxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlXG4gICAgICogW2BPYmplY3Qua2V5c2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICAgICAqIGV4Y2VwdCB0aGF0IGl0IGluY2x1ZGVzIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5hdGl2ZUtleXNJbihvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmIChvYmplY3QgIT0gbnVsbCkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCB0cmFuc2Zvcm1zIHRoZSByZXN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIHJlc3QgYXJyYXkgdHJhbnNmb3JtLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCB0cmFuc2Zvcm0pIHtcbiAgICAgIHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0ID09PSB1bmRlZmluZWQgPyAoZnVuYy5sZW5ndGggLSAxKSA6IHN0YXJ0LCAwKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3MubGVuZ3RoIC0gc3RhcnQsIDApLFxuICAgICAgICAgICAgYXJyYXkgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJyYXlbaW5kZXhdID0gYXJnc1tzdGFydCArIGluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IC0xO1xuICAgICAgICB2YXIgb3RoZXJBcmdzID0gQXJyYXkoc3RhcnQgKyAxKTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBzdGFydCkge1xuICAgICAgICAgIG90aGVyQXJnc1tpbmRleF0gPSBhcmdzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBvdGhlckFyZ3Nbc3RhcnRdID0gdHJhbnNmb3JtKGFycmF5KTtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHBhcmVudCB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXRoIFRoZSBwYXRoIHRvIGdldCB0aGUgcGFyZW50IHZhbHVlIG9mLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwYXJlbnQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFyZW50KG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGgubGVuZ3RoIDwgMiA/IG9iamVjdCA6IGJhc2VHZXQob2JqZWN0LCBiYXNlU2xpY2UocGF0aCwgMCwgLTEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW9yZGVyIGBhcnJheWAgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgaW5kZXhlcyB3aGVyZSB0aGUgZWxlbWVudCBhdFxuICAgICAqIHRoZSBmaXJzdCBpbmRleCBpcyBhc3NpZ25lZCBhcyB0aGUgZmlyc3QgZWxlbWVudCwgdGhlIGVsZW1lbnQgYXRcbiAgICAgKiB0aGUgc2Vjb25kIGluZGV4IGlzIGFzc2lnbmVkIGFzIHRoZSBzZWNvbmQgZWxlbWVudCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcmVvcmRlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBpbmRleGVzIFRoZSBhcnJhbmdlZCBhcnJheSBpbmRleGVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlb3JkZXIoYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKGluZGV4ZXMubGVuZ3RoLCBhcnJMZW5ndGgpLFxuICAgICAgICAgIG9sZEFycmF5ID0gY29weUFycmF5KGFycmF5KTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGluZGV4ZXNbbGVuZ3RoXTtcbiAgICAgICAgYXJyYXlbbGVuZ3RoXSA9IGlzSW5kZXgoaW5kZXgsIGFyckxlbmd0aCkgPyBvbGRBcnJheVtpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAsIHVubGVzcyBga2V5YCBpcyBcIl9fcHJvdG9fX1wiIG9yIFwiY29uc3RydWN0b3JcIi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYWZlR2V0KG9iamVjdCwga2V5KSB7XG4gICAgICBpZiAoa2V5ID09PSAnY29uc3RydWN0b3InICYmIHR5cGVvZiBvYmplY3Rba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChrZXkgPT0gJ19fcHJvdG9fXycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIHRoaXMgZnVuY3Rpb24gYmVjb21lcyBob3QsIGkuZS4gaXMgaW52b2tlZCBhIGxvdCBpbiBhIHNob3J0XG4gICAgICogcGVyaW9kIG9mIHRpbWUsIGl0IHdpbGwgdHJpcCBpdHMgYnJlYWtlciBhbmQgdHJhbnNpdGlvbiB0byBhbiBpZGVudGl0eVxuICAgICAqIGZ1bmN0aW9uIHRvIGF2b2lkIGdhcmJhZ2UgY29sbGVjdGlvbiBwYXVzZXMgaW4gVjguIFNlZVxuICAgICAqIFtWOCBpc3N1ZSAyMDcwXShodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0yMDcwKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc29jaWF0ZSBtZXRhZGF0YSB3aXRoLlxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgc2V0RGF0YSA9IHNob3J0T3V0KGJhc2VTZXREYXRhKTtcblxuICAgIC8qKlxuICAgICAqIEEgc2ltcGxlIHdyYXBwZXIgYXJvdW5kIHRoZSBnbG9iYWwgW2BzZXRUaW1lb3V0YF0oaHR0cHM6Ly9tZG4uaW8vc2V0VGltZW91dCkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcnxPYmplY3R9IFJldHVybnMgdGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0LlxuICAgICAqL1xuICAgIHZhciBzZXRUaW1lb3V0ID0gY3R4U2V0VGltZW91dCB8fCBmdW5jdGlvbihmdW5jLCB3YWl0KSB7XG4gICAgICByZXR1cm4gcm9vdC5zZXRUaW1lb3V0KGZ1bmMsIHdhaXQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgZnVuY2AgdG8gcmV0dXJuIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBzZXRUb1N0cmluZyA9IHNob3J0T3V0KGJhc2VTZXRUb1N0cmluZyk7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgd3JhcHBlcmAgdG8gbWltaWMgdGhlIHNvdXJjZSBvZiBgcmVmZXJlbmNlYFxuICAgICAqIHdpdGggd3JhcHBlciBkZXRhaWxzIGluIGEgY29tbWVudCBhdCB0aGUgdG9wIG9mIHRoZSBzb3VyY2UgYm9keS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcHBlciBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZmVyZW5jZSBUaGUgcmVmZXJlbmNlIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGB3cmFwcGVyYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRXcmFwVG9TdHJpbmcod3JhcHBlciwgcmVmZXJlbmNlLCBiaXRtYXNrKSB7XG4gICAgICB2YXIgc291cmNlID0gKHJlZmVyZW5jZSArICcnKTtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyh3cmFwcGVyLCBpbnNlcnRXcmFwRGV0YWlscyhzb3VyY2UsIHVwZGF0ZVdyYXBEZXRhaWxzKGdldFdyYXBEZXRhaWxzKHNvdXJjZSksIGJpdG1hc2spKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQnbGwgc2hvcnQgb3V0IGFuZCBpbnZva2UgYGlkZW50aXR5YCBpbnN0ZWFkXG4gICAgICogb2YgYGZ1bmNgIHdoZW4gaXQncyBjYWxsZWQgYEhPVF9DT1VOVGAgb3IgbW9yZSB0aW1lcyBpbiBgSE9UX1NQQU5gXG4gICAgICogbWlsbGlzZWNvbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzaG9ydGFibGUgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2hvcnRPdXQoZnVuYykge1xuICAgICAgdmFyIGNvdW50ID0gMCxcbiAgICAgICAgICBsYXN0Q2FsbGVkID0gMDtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc3RhbXAgPSBuYXRpdmVOb3coKSxcbiAgICAgICAgICAgIHJlbWFpbmluZyA9IEhPVF9TUEFOIC0gKHN0YW1wIC0gbGFzdENhbGxlZCk7XG5cbiAgICAgICAgbGFzdENhbGxlZCA9IHN0YW1wO1xuICAgICAgICBpZiAocmVtYWluaW5nID4gMCkge1xuICAgICAgICAgIGlmICgrK2NvdW50ID49IEhPVF9DT1VOVCkge1xuICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50c1swXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY291bnQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNodWZmbGVgIHdoaWNoIG11dGF0ZXMgYW5kIHNldHMgdGhlIHNpemUgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzaXplPWFycmF5Lmxlbmd0aF0gVGhlIHNpemUgb2YgYGFycmF5YC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaHVmZmxlU2VsZihhcnJheSwgc2l6ZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG5cbiAgICAgIHNpemUgPSBzaXplID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBzaXplO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBzaXplKSB7XG4gICAgICAgIHZhciByYW5kID0gYmFzZVJhbmRvbShpbmRleCwgbGFzdEluZGV4KSxcbiAgICAgICAgICAgIHZhbHVlID0gYXJyYXlbcmFuZF07XG5cbiAgICAgICAgYXJyYXlbcmFuZF0gPSBhcnJheVtpbmRleF07XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgYXJyYXkubGVuZ3RoID0gc2l6ZTtcbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKi9cbiAgICB2YXIgc3RyaW5nVG9QYXRoID0gbWVtb2l6ZUNhcHBlZChmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmIChzdHJpbmcuY2hhckNvZGVBdCgwKSA9PT0gNDYgLyogLiAqLykge1xuICAgICAgICByZXN1bHQucHVzaCgnJyk7XG4gICAgICB9XG4gICAgICBzdHJpbmcucmVwbGFjZShyZVByb3BOYW1lLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHF1b3RlID8gc3ViU3RyaW5nLnJlcGxhY2UocmVFc2NhcGVDaGFyLCAnJDEnKSA6IChudW1iZXIgfHwgbWF0Y2gpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHN5bWJvbH0gUmV0dXJucyB0aGUga2V5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICAgICAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICAgICAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB3cmFwcGVyIGBkZXRhaWxzYCBiYXNlZCBvbiBgYml0bWFza2AgZmxhZ3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gZGV0YWlscyBUaGUgZGV0YWlscyB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGRldGFpbHNgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVdyYXBEZXRhaWxzKGRldGFpbHMsIGJpdG1hc2spIHtcbiAgICAgIGFycmF5RWFjaCh3cmFwRmxhZ3MsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gJ18uJyArIHBhaXJbMF07XG4gICAgICAgIGlmICgoYml0bWFzayAmIHBhaXJbMV0pICYmICFhcnJheUluY2x1ZGVzKGRldGFpbHMsIHZhbHVlKSkge1xuICAgICAgICAgIGRldGFpbHMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGRldGFpbHMuc29ydCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgd3JhcHBlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB3cmFwcGVyIFRoZSB3cmFwcGVyIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB3cmFwcGVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDbG9uZSh3cmFwcGVyKSB7XG4gICAgICBpZiAod3JhcHBlciBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGVyLmNsb25lKCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IExvZGFzaFdyYXBwZXIod3JhcHBlci5fX3dyYXBwZWRfXywgd3JhcHBlci5fX2NoYWluX18pO1xuICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHdyYXBwZXIuX19hY3Rpb25zX18pO1xuICAgICAgcmVzdWx0Ll9faW5kZXhfXyAgPSB3cmFwcGVyLl9faW5kZXhfXztcbiAgICAgIHJlc3VsdC5fX3ZhbHVlc19fID0gd3JhcHBlci5fX3ZhbHVlc19fO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHNwbGl0IGludG8gZ3JvdXBzIHRoZSBsZW5ndGggb2YgYHNpemVgLlxuICAgICAqIElmIGBhcnJheWAgY2FuJ3QgYmUgc3BsaXQgZXZlbmx5LCB0aGUgZmluYWwgY2h1bmsgd2lsbCBiZSB0aGUgcmVtYWluaW5nXG4gICAgICogZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NpemU9MV0gVGhlIGxlbmd0aCBvZiBlYWNoIGNodW5rXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjaHVua3MuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2h1bmsoWydhJywgJ2InLCAnYycsICdkJ10sIDIpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYiddLCBbJ2MnLCAnZCddXVxuICAgICAqXG4gICAgICogXy5jaHVuayhbJ2EnLCAnYicsICdjJywgJ2QnXSwgMyk7XG4gICAgICogLy8gPT4gW1snYScsICdiJywgJ2MnXSwgWydkJ11dXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2h1bmsoYXJyYXksIHNpemUsIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoYXJyYXksIHNpemUsIGd1YXJkKSA6IHNpemUgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgc2l6ZSA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaXplID0gbmF0aXZlTWF4KHRvSW50ZWdlcihzaXplKSwgMCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCB8fCBzaXplIDwgMSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShuYXRpdmVDZWlsKGxlbmd0aCAvIHNpemUpKTtcblxuICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IGJhc2VTbGljZShhcnJheSwgaW5kZXgsIChpbmRleCArPSBzaXplKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgZmFsc2V5IHZhbHVlcyByZW1vdmVkLiBUaGUgdmFsdWVzIGBmYWxzZWAsIGBudWxsYCxcbiAgICAgKiBgMGAsIGBcIlwiYCwgYHVuZGVmaW5lZGAsIGFuZCBgTmFOYCBhcmUgZmFsc2V5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvbXBhY3QoWzAsIDEsIGZhbHNlLCAyLCAnJywgM10pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhY3QoYXJyYXkpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGFycmF5IGNvbmNhdGVuYXRpbmcgYGFycmF5YCB3aXRoIGFueSBhZGRpdGlvbmFsIGFycmF5c1xuICAgICAqIGFuZC9vciB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29uY2F0ZW5hdGUuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNvbmNhdGVuYXRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGNvbmNhdGVuYXRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzFdO1xuICAgICAqIHZhciBvdGhlciA9IF8uY29uY2F0KGFycmF5LCAyLCBbM10sIFtbNF1dKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG90aGVyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgWzRdXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmNhdCgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGFyZ3MgPSBBcnJheShsZW5ndGggLSAxKSxcbiAgICAgICAgICBhcnJheSA9IGFyZ3VtZW50c1swXSxcbiAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcblxuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgYXJnc1tpbmRleCAtIDFdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheVB1c2goaXNBcnJheShhcnJheSkgPyBjb3B5QXJyYXkoYXJyYXkpIDogW2FycmF5XSwgYmFzZUZsYXR0ZW4oYXJncywgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgYGFycmF5YCB2YWx1ZXMgbm90IGluY2x1ZGVkIGluIHRoZSBvdGhlciBnaXZlbiBhcnJheXNcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8ud2l0aG91dCwgXy54b3JcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSkpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRpZmZlcmVuY2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIGFuZCBgdmFsdWVzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxCeWAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZGlmZmVyZW5jZUJ5KFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgW3sgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KHZhbHVlcyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kaWZmZXJlbmNlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgIHRvIGB2YWx1ZXNgLiBUaGUgb3JkZXIgYW5kXG4gICAgICogcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGNvbXBhcmF0b3JcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbFdpdGhgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlV2l0aChvYmplY3RzLCBbeyAneCc6IDEsICd5JzogMiB9XSwgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdCh2YWx1ZXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGNvbXBhcmF0b3IpKSB7XG4gICAgICAgIGNvbXBhcmF0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBkcm9wLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3AoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgbiA8IDAgPyAwIDogbiwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGVuZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBkcm9wLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFJpZ2h0KGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIG4gPSBsZW5ndGggLSBuO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZXhjbHVkaW5nIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgZW5kLlxuICAgICAqIEVsZW1lbnRzIGFyZSBkcm9wcGVkIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BSaWdodFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgdHJ1ZSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBleGNsdWRpbmcgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICogRWxlbWVudHMgYXJlIGRyb3BwZWQgdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaWxscyBlbGVtZW50cyBvZiBgYXJyYXlgIHdpdGggYHZhbHVlYCBmcm9tIGBzdGFydGAgdXAgdG8sIGJ1dCBub3RcbiAgICAgKiBpbmNsdWRpbmcsIGBlbmRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmaWxsLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGZpbGwgYGFycmF5YCB3aXRoLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXy5maWxsKGFycmF5LCAnYScpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYScsICdhJ11cbiAgICAgKlxuICAgICAqIF8uZmlsbChBcnJheSgzKSwgMik7XG4gICAgICogLy8gPT4gWzIsIDIsIDJdXG4gICAgICpcbiAgICAgKiBfLmZpbGwoWzQsIDYsIDgsIDEwXSwgJyonLCAxLCAzKTtcbiAgICAgKiAvLyA9PiBbNCwgJyonLCAnKicsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoc3RhcnQgJiYgdHlwZW9mIHN0YXJ0ICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlciA9PSAnYmFybmV5JzsgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgeyAndXNlcic6ICdmcmVkJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGZyb21JbmRleCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEluZGV4YCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzXG4gICAgICogb2YgYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1hcnJheS5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmb3VuZCBlbGVtZW50LCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyID09ICdwZWJibGVzJzsgfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kTGFzdEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICAgIGlmIChmcm9tSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpbmRleCA9IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgICBpbmRleCA9IGZyb21JbmRleCA8IDBcbiAgICAgICAgICA/IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMClcbiAgICAgICAgICA6IG5hdGl2ZU1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgaW5kZXgsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZsYXR0ZW5zIGBhcnJheWAgYSBzaW5nbGUgbGV2ZWwgZGVlcC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuKFsxLCBbMiwgWzMsIFs0XV0sIDVdXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIFszLCBbNF1dLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW4oYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgMSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBmbGF0dGVucyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZWVwKFsxLCBbMiwgWzMsIFs0XV0sIDVdXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDQsIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbkRlZXAoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgSU5GSU5JVFkpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgZmxhdHRlbiBgYXJyYXlgIHVwIHRvIGBkZXB0aGAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlcHRoPTFdIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCBbMiwgWzMsIFs0XV0sIDVdXTtcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlcHRoKGFycmF5LCAxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgWzMsIFs0XV0sIDVdXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZXB0aChhcnJheSwgMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIFs0XSwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuRGVwdGgoYXJyYXksIGRlcHRoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBkZXB0aCA9IGRlcHRoID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoKTtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBpbnZlcnNlIG9mIGBfLnRvUGFpcnNgOyB0aGlzIG1ldGhvZCByZXR1cm5zIGFuIG9iamVjdCBjb21wb3NlZFxuICAgICAqIGZyb20ga2V5LXZhbHVlIGBwYWlyc2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWlycyBUaGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZnJvbVBhaXJzKFtbJ2EnLCAxXSwgWydiJywgMl1dKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tUGFpcnMocGFpcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhaXJzID09IG51bGwgPyAwIDogcGFpcnMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgcmVzdWx0W3BhaXJbMF1dID0gcGFpclsxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIGZpcnN0XG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaGVhZChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIF8uaGVhZChbXSk7XG4gICAgICogLy8gPT4gdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGVhZChhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYXJyYXlbMF0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYHZhbHVlYCBpcyBmb3VuZCBpbiBgYXJyYXlgXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCdzIHVzZWQgYXMgdGhlXG4gICAgICogb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbmRleE9mKFsxLCAyLCAxLCAyXSwgMik7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gU2VhcmNoIGZyb20gdGhlIGBmcm9tSW5kZXhgLlxuICAgICAqIF8uaW5kZXhPZihbMSwgMiwgMSwgMl0sIDIsIDIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGJ1dCB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluaXRpYWwoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0aWFsKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVNsaWNlKGFycmF5LCAwLCAtMSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBhcmUgaW5jbHVkZWQgaW4gYWxsIGdpdmVuIGFycmF5c1xuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbihbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzJdXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludGVyc2VjdGlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbkJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjFdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmludGVyc2VjdGlvbkJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9XVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb25CeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpLFxuICAgICAgICAgIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG5cbiAgICAgIGlmIChpdGVyYXRlZSA9PT0gbGFzdChtYXBwZWQpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWFwcGVkLnBvcCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludGVyc2VjdGlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlc1xuICAgICAqIG9mIHJlc3VsdCB2YWx1ZXMgYXJlIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgY29tcGFyYXRvciBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyksXG4gICAgICAgICAgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcblxuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgbWFwcGVkLnBvcCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhbGwgZWxlbWVudHMgaW4gYGFycmF5YCBpbnRvIGEgc3RyaW5nIHNlcGFyYXRlZCBieSBgc2VwYXJhdG9yYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb252ZXJ0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc2VwYXJhdG9yPScsJ10gVGhlIGVsZW1lbnQgc2VwYXJhdG9yLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGpvaW5lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uam9pbihbJ2EnLCAnYicsICdjJ10sICd+Jyk7XG4gICAgICogLy8gPT4gJ2F+Yn5jJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGpvaW4oYXJyYXksIHNlcGFyYXRvcikge1xuICAgICAgcmV0dXJuIGFycmF5ID09IG51bGwgPyAnJyA6IG5hdGl2ZUpvaW4uY2FsbChhcnJheSwgc2VwYXJhdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubGFzdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXN0KGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYXJyYXlbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbmRleE9mYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGFycmF5YCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWFycmF5Lmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMSwgMl0sIDIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIC8vIFNlYXJjaCBmcm9tIHRoZSBgZnJvbUluZGV4YC5cbiAgICAgKiBfLmxhc3RJbmRleE9mKFsxLCAyLCAxLCAyXSwgMiwgMik7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBsZW5ndGg7XG4gICAgICBpZiAoZnJvbUluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5kZXggPSB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgICAgaW5kZXggPSBpbmRleCA8IDAgPyBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApIDogbmF0aXZlTWluKGluZGV4LCBsZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWVcbiAgICAgICAgPyBzdHJpY3RMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGluZGV4KVxuICAgICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgaW5kZXgsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGVsZW1lbnQgYXQgaW5kZXggYG5gIG9mIGBhcnJheWAuIElmIGBuYCBpcyBuZWdhdGl2ZSwgdGhlIG50aFxuICAgICAqIGVsZW1lbnQgZnJvbSB0aGUgZW5kIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MF0gVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbnRoIGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdkJ107XG4gICAgICpcbiAgICAgKiBfLm50aChhcnJheSwgMSk7XG4gICAgICogLy8gPT4gJ2InXG4gICAgICpcbiAgICAgKiBfLm50aChhcnJheSwgLTIpO1xuICAgICAqIC8vID0+ICdjJztcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBudGgoYXJyYXksIG4pIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VOdGgoYXJyYXksIHRvSW50ZWdlcihuKSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgZ2l2ZW4gdmFsdWVzIGZyb20gYGFycmF5YCB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy53aXRob3V0YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLiBVc2UgYF8ucmVtb3ZlYFxuICAgICAqIHRvIHJlbW92ZSBlbGVtZW50cyBmcm9tIGFuIGFycmF5IGJ5IHByZWRpY2F0ZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdhJywgJ2InLCAnYyddO1xuICAgICAqXG4gICAgICogXy5wdWxsKGFycmF5LCAnYScsICdjJyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYicsICdiJ11cbiAgICAgKi9cbiAgICB2YXIgcHVsbCA9IGJhc2VSZXN0KHB1bGxBbGwpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdhJywgJ2InLCAnYyddO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsKGFycmF5LCBbJ2EnLCAnYyddKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydiJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGwoYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcylcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxBbGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIGFuZCBgdmFsdWVzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VCeWAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH0sIHsgJ3gnOiAzIH0sIHsgJ3gnOiAxIH1dO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsQnkoYXJyYXksIFt7ICd4JzogMSB9LCB7ICd4JzogMyB9XSwgJ3gnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbEJ5KGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsQWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgIHRvIGB2YWx1ZXNgLiBUaGUgY29tcGFyYXRvciBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlV2l0aGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMywgJ3knOiA0IH0sIHsgJ3gnOiA1LCAneSc6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGxXaXRoKGFycmF5LCBbeyAneCc6IDMsICd5JzogNCB9XSwgXy5pc0VxdWFsKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDUsICd5JzogNiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGxXaXRoKGFycmF5LCB2YWx1ZXMsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGVsZW1lbnRzIGZyb20gYGFycmF5YCBjb3JyZXNwb25kaW5nIHRvIGBpbmRleGVzYCBhbmQgcmV0dXJucyBhblxuICAgICAqIGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmF0YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0gey4uLihudW1iZXJ8bnVtYmVyW10pfSBbaW5kZXhlc10gVGhlIGluZGV4ZXMgb2YgZWxlbWVudHMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnZCddO1xuICAgICAqIHZhciBwdWxsZWQgPSBfLnB1bGxBdChhcnJheSwgWzEsIDNdKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYyddXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhwdWxsZWQpO1xuICAgICAqIC8vID0+IFsnYicsICdkJ11cbiAgICAgKi9cbiAgICB2YXIgcHVsbEF0ID0gZmxhdFJlc3QoZnVuY3Rpb24oYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBiYXNlQXQoYXJyYXksIGluZGV4ZXMpO1xuXG4gICAgICBiYXNlUHVsbEF0KGFycmF5LCBhcnJheU1hcChpbmRleGVzLCBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICByZXR1cm4gaXNJbmRleChpbmRleCwgbGVuZ3RoKSA/ICtpbmRleCA6IGluZGV4O1xuICAgICAgfSkuc29ydChjb21wYXJlQXNjZW5kaW5nKSk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBlbGVtZW50cyBmcm9tIGBhcnJheWAgdGhhdCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3JcbiAgICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGUgcmVtb3ZlZCBlbGVtZW50cy4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZmlsdGVyYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLiBVc2UgYF8ucHVsbGBcbiAgICAgKiB0byBwdWxsIGVsZW1lbnRzIGZyb20gYW4gYXJyYXkgYnkgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgMywgNF07XG4gICAgICogdmFyIGV2ZW5zID0gXy5yZW1vdmUoYXJyYXksIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAzXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZXZlbnMpO1xuICAgICAqIC8vID0+IFsyLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmRleGVzID0gW10sXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBwcmVkaWNhdGUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICAgIGluZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJhc2VQdWxsQXQoYXJyYXksIGluZGV4ZXMpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnNlcyBgYXJyYXlgIHNvIHRoYXQgdGhlIGZpcnN0IGVsZW1lbnQgYmVjb21lcyB0aGUgbGFzdCwgdGhlIHNlY29uZFxuICAgICAqIGVsZW1lbnQgYmVjb21lcyB0aGUgc2Vjb25kIHRvIGxhc3QsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAgYW5kIGlzIGJhc2VkIG9uXG4gICAgICogW2BBcnJheSNyZXZlcnNlYF0oaHR0cHM6Ly9tZG4uaW8vQXJyYXkvcmV2ZXJzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfLnJldmVyc2UoYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJldmVyc2UoYXJyYXkpIHtcbiAgICAgIHJldHVybiBhcnJheSA9PSBudWxsID8gYXJyYXkgOiBuYXRpdmVSZXZlcnNlLmNhbGwoYXJyYXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGZyb20gYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIHVzZWQgaW5zdGVhZCBvZlxuICAgICAqIFtgQXJyYXkjc2xpY2VgXShodHRwczovL21kbi5pby9BcnJheS9zbGljZSkgdG8gZW5zdXJlIGRlbnNlIGFycmF5cyBhcmVcbiAgICAgKiByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoZW5kICYmIHR5cGVvZiBlbmQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoYXJyYXksIHN0YXJ0LCBlbmQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHN0YXJ0ID0gc3RhcnQgPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvSW50ZWdlcihlbmQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlcyBhIGJpbmFyeSBzZWFyY2ggdG8gZGV0ZXJtaW5lIHRoZSBsb3dlc3QgaW5kZXggYXQgd2hpY2ggYHZhbHVlYFxuICAgICAqIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG8gbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4KFszMCwgNTBdLCA0MCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGUgdGhlaXJcbiAgICAgKiBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiA0IH0sIHsgJ3gnOiA1IH1dO1xuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ueDsgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb3J0ZWRJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sICd4Jyk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IHBlcmZvcm1zIGEgYmluYXJ5XG4gICAgICogc2VhcmNoIG9uIGEgc29ydGVkIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXhPZihbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICB2YXIgaW5kZXggPSBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKTtcbiAgICAgICAgaWYgKGluZGV4IDwgbGVuZ3RoICYmIGVxKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRJbmRleGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaGlnaGVzdFxuICAgICAqIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0b1xuICAgICAqIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXgoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkTGFzdEluZGV4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlIHRoZWlyXG4gICAgICogc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogNCB9LCB7ICd4JzogNSB9XTtcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgZnVuY3Rpb24obykgeyByZXR1cm4gby54OyB9KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sICd4Jyk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5sYXN0SW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgcGVyZm9ybXMgYSBiaW5hcnlcbiAgICAgKiBzZWFyY2ggb24gYSBzb3J0ZWQgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhPZihbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgdHJ1ZSkgLSAxO1xuICAgICAgICBpZiAoZXEoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0J3MgZGVzaWduZWQgYW5kIG9wdGltaXplZFxuICAgICAqIGZvciBzb3J0ZWQgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkVW5pcShbMSwgMSwgMl0pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZFVuaXEoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTb3J0ZWRVbmlxKGFycmF5KVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcUJ5YCBleGNlcHQgdGhhdCBpdCdzIGRlc2lnbmVkIGFuZCBvcHRpbWl6ZWRcbiAgICAgKiBmb3Igc29ydGVkIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkVW5pcUJ5KFsxLjEsIDEuMiwgMi4zLCAyLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4xLCAyLjNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkVW5pcUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVNvcnRlZFVuaXEoYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBidXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFpbChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRhaWwoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlU2xpY2UoYXJyYXksIDEsIGxlbmd0aCkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gdGFrZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlKGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgZW5kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHRha2UuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlUmlnaHQoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgbiA9IGxlbmd0aCAtIG47XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBuIDwgMCA/IDAgOiBuLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgZW5kLiBFbGVtZW50cyBhcmVcbiAgICAgKiB0YWtlbiB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VSaWdodFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgZmFsc2UsIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBiZWdpbm5pbmcuIEVsZW1lbnRzXG4gICAgICogYXJlIHRha2VuIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMsIGluIG9yZGVyLCBmcm9tIGFsbCBnaXZlbiBhcnJheXMgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb24oWzJdLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIHZhciB1bmlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnlcbiAgICAgKiB3aGljaCB1bmlxdWVuZXNzIGlzIGNvbXB1dGVkLiBSZXN1bHQgdmFsdWVzIGFyZSBjaG9zZW4gZnJvbSB0aGUgZmlyc3RcbiAgICAgKiBhcnJheSBpbiB3aGljaCB0aGUgdmFsdWUgb2NjdXJzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb25CeShbMi4xXSwgWzEuMiwgMi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMSwgMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy51bmlvbkJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciB1bmlvbkJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFJlc3VsdCB2YWx1ZXMgYXJlIGNob3NlbiBmcm9tXG4gICAgICogdGhlIGZpcnN0IGFycmF5IGluIHdoaWNoIHRoZSB2YWx1ZSBvY2N1cnMuIFRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnVuaW9uV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIHVuaW9uV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyk7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIHVuZGVmaW5lZCwgY29tcGFyYXRvcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZHVwbGljYXRlLWZyZWUgdmVyc2lvbiBvZiBhbiBhcnJheSwgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucywgaW4gd2hpY2ggb25seSB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBlYWNoIGVsZW1lbnRcbiAgICAgKiBpcyBrZXB0LiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyXG4gICAgICogaW4gdGhlIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcShbMiwgMSwgMl0pO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXEoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5KSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHVuaXF1ZW5lc3MgaXMgY29tcHV0ZWQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlXG4gICAgICogb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcUJ5KFsyLjEsIDEuMiwgMi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMSwgMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy51bmlxQnkoW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXFCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpc1xuICAgICAqIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5LlRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnVuaXFXaXRoKG9iamVjdHMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXFXaXRoKGFycmF5LCBjb21wYXJhdG9yKSB7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIGdyb3VwZWRcbiAgICAgKiBlbGVtZW50cyBhbmQgY3JlYXRlcyBhbiBhcnJheSByZWdyb3VwaW5nIHRoZSBlbGVtZW50cyB0byB0aGVpciBwcmUtemlwXG4gICAgICogY29uZmlndXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjIuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgemlwcGVkID0gXy56aXAoWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMSwgdHJ1ZV0sIFsnYicsIDIsIGZhbHNlXV1cbiAgICAgKlxuICAgICAqIF8udW56aXAoemlwcGVkKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuemlwKGFycmF5KSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSAwO1xuICAgICAgYXJyYXkgPSBhcnJheUZpbHRlcihhcnJheSwgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGdyb3VwKSkge1xuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChncm91cC5sZW5ndGgsIGxlbmd0aCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGJhc2VUaW1lcyhsZW5ndGgsIGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIHJldHVybiBhcnJheU1hcChhcnJheSwgYmFzZVByb3BlcnR5KGluZGV4KSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgdG8gc3BlY2lmeVxuICAgICAqIGhvdyByZWdyb3VwZWQgdmFsdWVzIHNob3VsZCBiZSBjb21iaW5lZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aGVcbiAgICAgKiBlbGVtZW50cyBvZiBlYWNoIGdyb3VwOiAoLi4uZ3JvdXApLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmVcbiAgICAgKiAgcmVncm91cGVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZWdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB6aXBwZWQgPSBfLnppcChbMSwgMl0sIFsxMCwgMjBdLCBbMTAwLCAyMDBdKTtcbiAgICAgKiAvLyA9PiBbWzEsIDEwLCAxMDBdLCBbMiwgMjAsIDIwMF1dXG4gICAgICpcbiAgICAgKiBfLnVuemlwV2l0aCh6aXBwZWQsIF8uYWRkKTtcbiAgICAgKiAvLyA9PiBbMywgMzAsIDMwMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnppcFdpdGgoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSB1bnppcChhcnJheSk7XG4gICAgICBpZiAoaXRlcmF0ZWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5TWFwKHJlc3VsdCwgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGl0ZXJhdGVlLCB1bmRlZmluZWQsIGdyb3VwKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgZXhjbHVkaW5nIGFsbCBnaXZlbiB2YWx1ZXMgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLmRpZmZlcmVuY2UsIF8ueG9yXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ud2l0aG91dChbMiwgMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqL1xuICAgIHZhciB3aXRob3V0ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCB2YWx1ZXMpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBpcyB0aGVcbiAgICAgKiBbc3ltbWV0cmljIGRpZmZlcmVuY2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1N5bW1ldHJpY19kaWZmZXJlbmNlKVxuICAgICAqIG9mIHRoZSBnaXZlbiBhcnJheXMuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyXG4gICAgICogdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8uZGlmZmVyZW5jZSwgXy53aXRob3V0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ueG9yKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgM11cbiAgICAgKi9cbiAgICB2YXIgeG9yID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnhvcmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieVxuICAgICAqIHdoaWNoIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWRcbiAgICAgKiBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZVxuICAgICAqIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ueG9yQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMiwgMy40XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy54b3JCeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgeG9yQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ueG9yYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXNcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuIFRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnhvcldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgeG9yV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyk7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cywgdGhlIGZpcnN0IG9mIHdoaWNoIGNvbnRhaW5zIHRoZVxuICAgICAqIGZpcnN0IGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheXMsIHRoZSBzZWNvbmQgb2Ygd2hpY2ggY29udGFpbnMgdGhlXG4gICAgICogc2Vjb25kIGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheXMsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcChbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxLCB0cnVlXSwgWydiJywgMiwgZmFsc2VdXVxuICAgICAqL1xuICAgIHZhciB6aXAgPSBiYXNlUmVzdCh1bnppcCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZyb21QYWlyc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyB0d28gYXJyYXlzLFxuICAgICAqIG9uZSBvZiBwcm9wZXJ0eSBpZGVudGlmaWVycyBhbmQgb25lIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BzPVtdXSBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlcz1bXV0gVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcE9iamVjdChbJ2EnLCAnYiddLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdChwcm9wcywgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gYmFzZVppcE9iamVjdChwcm9wcyB8fCBbXSwgdmFsdWVzIHx8IFtdLCBhc3NpZ25WYWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBPYmplY3RgIGV4Y2VwdCB0aGF0IGl0IHN1cHBvcnRzIHByb3BlcnR5IHBhdGhzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BzPVtdXSBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlcz1bXV0gVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcE9iamVjdERlZXAoWydhLmJbMF0uYycsICdhLmJbMV0uZCddLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdiJzogW3sgJ2MnOiAxIH0sIHsgJ2QnOiAyIH1dIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdERlZXAocHJvcHMsIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGJhc2VaaXBPYmplY3QocHJvcHMgfHwgW10sIHZhbHVlcyB8fCBbXSwgYmFzZVNldCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB0byBzcGVjaWZ5XG4gICAgICogaG93IGdyb3VwZWQgdmFsdWVzIHNob3VsZCBiZSBjb21iaW5lZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aGVcbiAgICAgKiBlbGVtZW50cyBvZiBlYWNoIGdyb3VwOiAoLi4uZ3JvdXApLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gdG8gY29tYmluZVxuICAgICAqICBncm91cGVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcFdpdGgoWzEsIDJdLCBbMTAsIDIwXSwgWzEwMCwgMjAwXSwgZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIGEgKyBiICsgYztcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBbMTExLCAyMjJdXG4gICAgICovXG4gICAgdmFyIHppcFdpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheXMubGVuZ3RoLFxuICAgICAgICAgIGl0ZXJhdGVlID0gbGVuZ3RoID4gMSA/IGFycmF5c1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcblxuICAgICAgaXRlcmF0ZWUgPSB0eXBlb2YgaXRlcmF0ZWUgPT0gJ2Z1bmN0aW9uJyA/IChhcnJheXMucG9wKCksIGl0ZXJhdGVlKSA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiB1bnppcFdpdGgoYXJyYXlzLCBpdGVyYXRlZSk7XG4gICAgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZSB0aGF0IHdyYXBzIGB2YWx1ZWAgd2l0aCBleHBsaWNpdCBtZXRob2RcbiAgICAgKiBjaGFpbiBzZXF1ZW5jZXMgZW5hYmxlZC4gVGhlIHJlc3VsdCBvZiBzdWNoIHNlcXVlbmNlcyBtdXN0IGJlIHVud3JhcHBlZFxuICAgICAqIHdpdGggYF8jdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMy4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIHZhciB5b3VuZ2VzdCA9IF9cbiAgICAgKiAgIC5jaGFpbih1c2VycylcbiAgICAgKiAgIC5zb3J0QnkoJ2FnZScpXG4gICAgICogICAubWFwKGZ1bmN0aW9uKG8pIHtcbiAgICAgKiAgICAgcmV0dXJuIG8udXNlciArICcgaXMgJyArIG8uYWdlO1xuICAgICAqICAgfSlcbiAgICAgKiAgIC5oZWFkKClcbiAgICAgKiAgIC52YWx1ZSgpO1xuICAgICAqIC8vID0+ICdwZWJibGVzIGlzIDEnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2hhaW4odmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2godmFsdWUpO1xuICAgICAgcmVzdWx0Ll9fY2hhaW5fXyA9IHRydWU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGludm9rZXMgYGludGVyY2VwdG9yYCBhbmQgcmV0dXJucyBgdmFsdWVgLiBUaGUgaW50ZXJjZXB0b3JcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAodmFsdWUpLiBUaGUgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0b1xuICAgICAqIFwidGFwIGludG9cIiBhIG1ldGhvZCBjaGFpbiBzZXF1ZW5jZSBpbiBvcmRlciB0byBtb2RpZnkgaW50ZXJtZWRpYXRlIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvdmlkZSB0byBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGludGVyY2VwdG9yIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pXG4gICAgICogIC50YXAoZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgKiAgICAvLyBNdXRhdGUgaW5wdXQgYXJyYXkuXG4gICAgICogICAgYXJyYXkucG9wKCk7XG4gICAgICogIH0pXG4gICAgICogIC5yZXZlcnNlKClcbiAgICAgKiAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFwKHZhbHVlLCBpbnRlcmNlcHRvcikge1xuICAgICAgaW50ZXJjZXB0b3IodmFsdWUpO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udGFwYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSByZXN1bHQgb2YgYGludGVyY2VwdG9yYC5cbiAgICAgKiBUaGUgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byBcInBhc3MgdGhydVwiIHZhbHVlcyByZXBsYWNpbmcgaW50ZXJtZWRpYXRlXG4gICAgICogcmVzdWx0cyBpbiBhIG1ldGhvZCBjaGFpbiBzZXF1ZW5jZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm92aWRlIHRvIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaW50ZXJjZXB0b3IgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oJyAgYWJjICAnKVxuICAgICAqICAuY2hhaW4oKVxuICAgICAqICAudHJpbSgpXG4gICAgICogIC50aHJ1KGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICAgcmV0dXJuIFt2YWx1ZV07XG4gICAgICogIH0pXG4gICAgICogIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsnYWJjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aHJ1KHZhbHVlLCBpbnRlcmNlcHRvcikge1xuICAgICAgcmV0dXJuIGludGVyY2VwdG9yKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB0aGUgd3JhcHBlciB2ZXJzaW9uIG9mIGBfLmF0YC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGF0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfSwgNF0gfTtcbiAgICAgKlxuICAgICAqIF8ob2JqZWN0KS5hdChbJ2FbMF0uYi5jJywgJ2FbMV0nXSkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKi9cbiAgICB2YXIgd3JhcHBlckF0ID0gZmxhdFJlc3QoZnVuY3Rpb24ocGF0aHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgc3RhcnQgPSBsZW5ndGggPyBwYXRoc1swXSA6IDAsXG4gICAgICAgICAgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fLFxuICAgICAgICAgIGludGVyY2VwdG9yID0gZnVuY3Rpb24ob2JqZWN0KSB7IHJldHVybiBiYXNlQXQob2JqZWN0LCBwYXRocyk7IH07XG5cbiAgICAgIGlmIChsZW5ndGggPiAxIHx8IHRoaXMuX19hY3Rpb25zX18ubGVuZ3RoIHx8XG4gICAgICAgICAgISh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB8fCAhaXNJbmRleChzdGFydCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhydShpbnRlcmNlcHRvcik7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKHN0YXJ0LCArc3RhcnQgKyAobGVuZ3RoID8gMSA6IDApKTtcbiAgICAgIHZhbHVlLl9fYWN0aW9uc19fLnB1c2goe1xuICAgICAgICAnZnVuYyc6IHRocnUsXG4gICAgICAgICdhcmdzJzogW2ludGVyY2VwdG9yXSxcbiAgICAgICAgJ3RoaXNBcmcnOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlLCB0aGlzLl9fY2hhaW5fXykudGhydShmdW5jdGlvbihhcnJheSkge1xuICAgICAgICBpZiAobGVuZ3RoICYmICFhcnJheS5sZW5ndGgpIHtcbiAgICAgICAgICBhcnJheS5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZSB3aXRoIGV4cGxpY2l0IG1ldGhvZCBjaGFpbiBzZXF1ZW5jZXMgZW5hYmxlZC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGNoYWluXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIEEgc2VxdWVuY2Ugd2l0aG91dCBleHBsaWNpdCBjaGFpbmluZy5cbiAgICAgKiBfKHVzZXJzKS5oZWFkKCk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICAgICAqXG4gICAgICogLy8gQSBzZXF1ZW5jZSB3aXRoIGV4cGxpY2l0IGNoYWluaW5nLlxuICAgICAqIF8odXNlcnMpXG4gICAgICogICAuY2hhaW4oKVxuICAgICAqICAgLmhlYWQoKVxuICAgICAqICAgLnBpY2soJ3VzZXInKVxuICAgICAqICAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ2hhaW4oKSB7XG4gICAgICByZXR1cm4gY2hhaW4odGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGNoYWluIHNlcXVlbmNlIGFuZCByZXR1cm5zIHRoZSB3cmFwcGVkIHJlc3VsdC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGNvbW1pdFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMl07XG4gICAgICogdmFyIHdyYXBwZWQgPSBfKGFycmF5KS5wdXNoKDMpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogd3JhcHBlZCA9IHdyYXBwZWQuY29tbWl0KCk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogd3JhcHBlZC5sYXN0KCk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDb21taXQoKSB7XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodGhpcy52YWx1ZSgpLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmV4dCB2YWx1ZSBvbiBhIHdyYXBwZWQgb2JqZWN0IGZvbGxvd2luZyB0aGVcbiAgICAgKiBbaXRlcmF0b3IgcHJvdG9jb2xdKGh0dHBzOi8vbWRuLmlvL2l0ZXJhdGlvbl9wcm90b2NvbHMjaXRlcmF0b3IpLlxuICAgICAqXG4gICAgICogQG5hbWUgbmV4dFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5leHQgaXRlcmF0b3IgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pO1xuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IGZhbHNlLCAndmFsdWUnOiAxIH1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiBmYWxzZSwgJ3ZhbHVlJzogMiB9XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogdHJ1ZSwgJ3ZhbHVlJzogdW5kZWZpbmVkIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyTmV4dCgpIHtcbiAgICAgIGlmICh0aGlzLl9fdmFsdWVzX18gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9fdmFsdWVzX18gPSB0b0FycmF5KHRoaXMudmFsdWUoKSk7XG4gICAgICB9XG4gICAgICB2YXIgZG9uZSA9IHRoaXMuX19pbmRleF9fID49IHRoaXMuX192YWx1ZXNfXy5sZW5ndGgsXG4gICAgICAgICAgdmFsdWUgPSBkb25lID8gdW5kZWZpbmVkIDogdGhpcy5fX3ZhbHVlc19fW3RoaXMuX19pbmRleF9fKytdO1xuXG4gICAgICByZXR1cm4geyAnZG9uZSc6IGRvbmUsICd2YWx1ZSc6IHZhbHVlIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlcyB0aGUgd3JhcHBlciB0byBiZSBpdGVyYWJsZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIFN5bWJvbC5pdGVyYXRvclxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHdyYXBwZXIgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKTtcbiAgICAgKlxuICAgICAqIHdyYXBwZWRbU3ltYm9sLml0ZXJhdG9yXSgpID09PSB3cmFwcGVkO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIEFycmF5LmZyb20od3JhcHBlZCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclRvSXRlcmF0b3IoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGNoYWluIHNlcXVlbmNlIHBsYW50aW5nIGB2YWx1ZWAgYXMgdGhlIHdyYXBwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbmFtZSBwbGFudFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBsYW50LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pLm1hcChzcXVhcmUpO1xuICAgICAqIHZhciBvdGhlciA9IHdyYXBwZWQucGxhbnQoWzMsIDRdKTtcbiAgICAgKlxuICAgICAqIG90aGVyLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzksIDE2XVxuICAgICAqXG4gICAgICogd3JhcHBlZC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsxLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJQbGFudCh2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICBwYXJlbnQgPSB0aGlzO1xuXG4gICAgICB3aGlsZSAocGFyZW50IGluc3RhbmNlb2YgYmFzZUxvZGFzaCkge1xuICAgICAgICB2YXIgY2xvbmUgPSB3cmFwcGVyQ2xvbmUocGFyZW50KTtcbiAgICAgICAgY2xvbmUuX19pbmRleF9fID0gMDtcbiAgICAgICAgY2xvbmUuX192YWx1ZXNfXyA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIHByZXZpb3VzLl9fd3JhcHBlZF9fID0gY2xvbmU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ID0gY2xvbmU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZXZpb3VzID0gY2xvbmU7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5fX3dyYXBwZWRfXztcbiAgICAgIH1cbiAgICAgIHByZXZpb3VzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHRoZSB3cmFwcGVyIHZlcnNpb24gb2YgYF8ucmV2ZXJzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyB0aGUgd3JhcHBlZCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHJldmVyc2VcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXyhhcnJheSkucmV2ZXJzZSgpLnZhbHVlKClcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyUmV2ZXJzZSgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX187XG4gICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICB2YXIgd3JhcHBlZCA9IHZhbHVlO1xuICAgICAgICBpZiAodGhpcy5fX2FjdGlvbnNfXy5sZW5ndGgpIHtcbiAgICAgICAgICB3cmFwcGVkID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHdyYXBwZWQgPSB3cmFwcGVkLnJldmVyc2UoKTtcbiAgICAgICAgd3JhcHBlZC5fX2FjdGlvbnNfXy5wdXNoKHtcbiAgICAgICAgICAnZnVuYyc6IHRocnUsXG4gICAgICAgICAgJ2FyZ3MnOiBbcmV2ZXJzZV0sXG4gICAgICAgICAgJ3RoaXNBcmcnOiB1bmRlZmluZWRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih3cmFwcGVkLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy50aHJ1KHJldmVyc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBjaGFpbiBzZXF1ZW5jZSB0byByZXNvbHZlIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbmFtZSB2YWx1ZVxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIHRvSlNPTiwgdmFsdWVPZlxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyLCAzXSkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyVmFsdWUoKSB7XG4gICAgICByZXR1cm4gYmFzZVdyYXBwZXJWYWx1ZSh0aGlzLl9fd3JhcHBlZF9fLCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUgb2ZcbiAgICAgKiBlYWNoIGtleSBpcyB0aGUgbnVtYmVyIG9mIHRpbWVzIHRoZSBrZXkgd2FzIHJldHVybmVkIGJ5IGBpdGVyYXRlZWAuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY291bnRCeShbNi4xLCA0LjIsIDYuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IHsgJzQnOiAxLCAnNic6IDIgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5jb3VudEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IDIsICc1JzogMSB9XG4gICAgICovXG4gICAgdmFyIGNvdW50QnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgICsrcmVzdWx0W2tleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIDEpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciAqKmFsbCoqIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBJdGVyYXRpb24gaXMgc3RvcHBlZCBvbmNlIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIHJldHVybnMgYHRydWVgIGZvclxuICAgICAqIFtlbXB0eSBjb2xsZWN0aW9uc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRW1wdHlfc2V0KSBiZWNhdXNlXG4gICAgICogW2V2ZXJ5dGhpbmcgaXMgdHJ1ZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVmFjdW91c190cnV0aCkgb2ZcbiAgICAgKiBlbGVtZW50cyBvZiBlbXB0eSBjb2xsZWN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXZlcnkoW3RydWUsIDEsIG51bGwsICd5ZXMnXSwgQm9vbGVhbik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGV2ZXJ5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RXZlcnkgOiBiYXNlRXZlcnk7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAsIHJldHVybmluZyBhbiBhcnJheSBvZiBhbGwgZWxlbWVudHNcbiAgICAgKiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnJlbW92ZWAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQHNlZSBfLnJlamVjdFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIENvbWJpbmluZyBzZXZlcmFsIHByZWRpY2F0ZXMgdXNpbmcgYF8ub3ZlckV2ZXJ5YCBvciBgXy5vdmVyU29tZWAuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIF8ub3ZlclNvbWUoW3sgJ2FnZSc6IDM2IH0sIFsnYWdlJywgNDBdXSkpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdiYXJuZXknXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbHRlcihjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RmlsdGVyIDogYmFzZUZpbHRlcjtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLCByZXR1cm5pbmcgdGhlIGZpcnN0IGVsZW1lbnRcbiAgICAgKiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF0Y2hlZCBlbGVtZW50LCBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ3BlYmJsZXMnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2Jhcm5leSdcbiAgICAgKi9cbiAgICB2YXIgZmluZCA9IGNyZWF0ZUZpbmQoZmluZEluZGV4KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWNvbGxlY3Rpb24ubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF0Y2hlZCBlbGVtZW50LCBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0KFsxLCAyLCAzLCA0XSwgZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDE7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIHZhciBmaW5kTGFzdCA9IGNyZWF0ZUZpbmQoZmluZExhc3RJbmRleCk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZmxhdHRlbmVkIGFycmF5IG9mIHZhbHVlcyBieSBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmBcbiAgICAgKiB0aHJ1IGBpdGVyYXRlZWAgYW5kIGZsYXR0ZW5pbmcgdGhlIG1hcHBlZCByZXN1bHRzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGR1cGxpY2F0ZShuKSB7XG4gICAgICogICByZXR1cm4gW24sIG5dO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmxhdE1hcChbMSwgMl0sIGR1cGxpY2F0ZSk7XG4gICAgICogLy8gPT4gWzEsIDEsIDIsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VGbGF0dGVuKG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSksIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxhdE1hcGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgZmxhdHRlbnMgdGhlXG4gICAgICogbWFwcGVkIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGR1cGxpY2F0ZShuKSB7XG4gICAgICogICByZXR1cm4gW1tbbiwgbl1dXTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZsYXRNYXBEZWVwKFsxLCAyXSwgZHVwbGljYXRlKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMiwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwRGVlcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VGbGF0dGVuKG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSksIElORklOSVRZKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZsYXRNYXBgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIHRoZVxuICAgICAqIG1hcHBlZCByZXN1bHRzIHVwIHRvIGBkZXB0aGAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlcHRoPTFdIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGR1cGxpY2F0ZShuKSB7XG4gICAgICogICByZXR1cm4gW1tbbiwgbl1dXTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZsYXRNYXBEZXB0aChbMSwgMl0sIGR1cGxpY2F0ZSwgMik7XG4gICAgICogLy8gPT4gW1sxLCAxXSwgWzIsIDJdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXBEZXB0aChjb2xsZWN0aW9uLCBpdGVyYXRlZSwgZGVwdGgpIHtcbiAgICAgIGRlcHRoID0gZGVwdGggPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGgpO1xuICAgICAgcmV0dXJuIGJhc2VGbGF0dGVuKG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSksIGRlcHRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIGVsZW1lbnQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogQXMgd2l0aCBvdGhlciBcIkNvbGxlY3Rpb25zXCIgbWV0aG9kcywgb2JqZWN0cyB3aXRoIGEgXCJsZW5ndGhcIlxuICAgICAqIHByb3BlcnR5IGFyZSBpdGVyYXRlZCBsaWtlIGFycmF5cy4gVG8gYXZvaWQgdGhpcyBiZWhhdmlvciB1c2UgYF8uZm9ySW5gXG4gICAgICogb3IgYF8uZm9yT3duYCBmb3Igb2JqZWN0IGl0ZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBhbGlhcyBlYWNoXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICogQHNlZSBfLmZvckVhY2hSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goWzEsIDJdLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgY29uc29sZS5sb2codmFsdWUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgYDFgIHRoZW4gYDJgLlxuICAgICAqXG4gICAgICogXy5mb3JFYWNoKHsgJ2EnOiAxLCAnYic6IDIgfSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdhJyB0aGVuICdiJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JFYWNoKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUVhY2ggOiBiYXNlRWFjaDtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JFYWNoYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBhbGlhcyBlYWNoUmlnaHRcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBAc2VlIF8uZm9yRWFjaFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZvckVhY2hSaWdodChbMSwgMl0sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyBgMmAgdGhlbiBgMWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yRWFjaFJpZ2h0KGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUVhY2hSaWdodCA6IGJhc2VFYWNoUmlnaHQ7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgb3JkZXIgb2YgZ3JvdXBlZCB2YWx1ZXNcbiAgICAgKiBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIGBjb2xsZWN0aW9uYC4gVGhlIGNvcnJlc3BvbmRpbmdcbiAgICAgKiB2YWx1ZSBvZiBlYWNoIGtleSBpcyBhbiBhcnJheSBvZiBlbGVtZW50cyByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGVcbiAgICAgKiBrZXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmdyb3VwQnkoWzYuMSwgNC4yLCA2LjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiB7ICc0JzogWzQuMl0sICc2JzogWzYuMSwgNi4zXSB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmdyb3VwQnkoWydvbmUnLCAndHdvJywgJ3RocmVlJ10sICdsZW5ndGgnKTtcbiAgICAgKiAvLyA9PiB7ICczJzogWydvbmUnLCAndHdvJ10sICc1JzogWyd0aHJlZSddIH1cbiAgICAgKi9cbiAgICB2YXIgZ3JvdXBCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIGtleSkpIHtcbiAgICAgICAgcmVzdWx0W2tleV0ucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIFt2YWx1ZV0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gYGNvbGxlY3Rpb25gLiBJZiBgY29sbGVjdGlvbmAgaXMgYSBzdHJpbmcsIGl0J3NcbiAgICAgKiBjaGVja2VkIGZvciBhIHN1YnN0cmluZyBvZiBgdmFsdWVgLCBvdGhlcndpc2VcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGlzIHVzZWQgZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBJZiBgZnJvbUluZGV4YCBpcyBuZWdhdGl2ZSwgaXQncyB1c2VkIGFzXG4gICAgICogdGhlIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5yZWR1Y2VgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoWzEsIDIsIDNdLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKFsxLCAyLCAzXSwgMSwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoeyAnYSc6IDEsICdiJzogMiB9LCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKCdhYmNkJywgJ2JjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluY2x1ZGVzKGNvbGxlY3Rpb24sIHZhbHVlLCBmcm9tSW5kZXgsIGd1YXJkKSB7XG4gICAgICBjb2xsZWN0aW9uID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBjb2xsZWN0aW9uIDogdmFsdWVzKGNvbGxlY3Rpb24pO1xuICAgICAgZnJvbUluZGV4ID0gKGZyb21JbmRleCAmJiAhZ3VhcmQpID8gdG9JbnRlZ2VyKGZyb21JbmRleCkgOiAwO1xuXG4gICAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgICBpZiAoZnJvbUluZGV4IDwgMCkge1xuICAgICAgICBmcm9tSW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgZnJvbUluZGV4LCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc1N0cmluZyhjb2xsZWN0aW9uKVxuICAgICAgICA/IChmcm9tSW5kZXggPD0gbGVuZ3RoICYmIGNvbGxlY3Rpb24uaW5kZXhPZih2YWx1ZSwgZnJvbUluZGV4KSA+IC0xKVxuICAgICAgICA6ICghIWxlbmd0aCAmJiBiYXNlSW5kZXhPZihjb2xsZWN0aW9uLCB2YWx1ZSwgZnJvbUluZGV4KSA+IC0xKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBtZXRob2QgYXQgYHBhdGhgIG9mIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAsIHJldHVybmluZ1xuICAgICAqIGFuIGFycmF5IG9mIHRoZSByZXN1bHRzIG9mIGVhY2ggaW52b2tlZCBtZXRob2QuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50c1xuICAgICAqIGFyZSBwcm92aWRlZCB0byBlYWNoIGludm9rZWQgbWV0aG9kLiBJZiBgcGF0aGAgaXMgYSBmdW5jdGlvbiwgaXQncyBpbnZva2VkXG4gICAgICogZm9yLCBhbmQgYHRoaXNgIGJvdW5kIHRvLCBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbnxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2Ugb3JcbiAgICAgKiAgdGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBlYWNoIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnZva2VNYXAoW1s1LCAxLCA3XSwgWzMsIDIsIDFdXSwgJ3NvcnQnKTtcbiAgICAgKiAvLyA9PiBbWzEsIDUsIDddLCBbMSwgMiwgM11dXG4gICAgICpcbiAgICAgKiBfLmludm9rZU1hcChbMTIzLCA0NTZdLCBTdHJpbmcucHJvdG90eXBlLnNwbGl0LCAnJyk7XG4gICAgICogLy8gPT4gW1snMScsICcyJywgJzMnXSwgWyc0JywgJzUnLCAnNiddXVxuICAgICAqL1xuICAgIHZhciBpbnZva2VNYXAgPSBiYXNlUmVzdChmdW5jdGlvbihjb2xsZWN0aW9uLCBwYXRoLCBhcmdzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpc0Z1bmMgPSB0eXBlb2YgcGF0aCA9PSAnZnVuY3Rpb24nLFxuICAgICAgICAgIHJlc3VsdCA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gQXJyYXkoY29sbGVjdGlvbi5sZW5ndGgpIDogW107XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJlc3VsdFsrK2luZGV4XSA9IGlzRnVuYyA/IGFwcGx5KHBhdGgsIHZhbHVlLCBhcmdzKSA6IGJhc2VJbnZva2UodmFsdWUsIHBhdGgsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBjb3JyZXNwb25kaW5nIHZhbHVlIG9mXG4gICAgICogZWFjaCBrZXkgaXMgdGhlIGxhc3QgZWxlbWVudCByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGUga2V5LiBUaGVcbiAgICAgKiBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbXG4gICAgICogICB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSxcbiAgICAgKiAgIHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5rZXlCeShhcnJheSwgZnVuY3Rpb24obykge1xuICAgICAqICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoby5jb2RlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sICdkJzogeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfSB9XG4gICAgICpcbiAgICAgKiBfLmtleUJ5KGFycmF5LCAnZGlyJyk7XG4gICAgICogLy8gPT4geyAnbGVmdCc6IHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LCAncmlnaHQnOiB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9IH1cbiAgICAgKi9cbiAgICB2YXIga2V5QnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCB2YWx1ZSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHZhbHVlcyBieSBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAgdGhydVxuICAgICAqIGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICAgICAqICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICAgICAqIGBfLmV2ZXJ5YCwgYF8uZmlsdGVyYCwgYF8ubWFwYCwgYF8ubWFwVmFsdWVzYCwgYF8ucmVqZWN0YCwgYW5kIGBfLnNvbWVgLlxuICAgICAqXG4gICAgICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gICAgICogYGFyeWAsIGBjaHVua2AsIGBjdXJyeWAsIGBjdXJyeVJpZ2h0YCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCwgYGV2ZXJ5YCxcbiAgICAgKiBgZmlsbGAsIGBpbnZlcnRgLCBgcGFyc2VJbnRgLCBgcmFuZG9tYCwgYHJhbmdlYCwgYHJhbmdlUmlnaHRgLCBgcmVwZWF0YCxcbiAgICAgKiBgc2FtcGxlU2l6ZWAsIGBzbGljZWAsIGBzb21lYCwgYHNvcnRCeWAsIGBzcGxpdGAsIGB0YWtlYCwgYHRha2VSaWdodGAsXG4gICAgICogYHRlbXBsYXRlYCwgYHRyaW1gLCBgdHJpbUVuZGAsIGB0cmltU3RhcnRgLCBhbmQgYHdvcmRzYFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8ubWFwKFs0LCA4XSwgc3F1YXJlKTtcbiAgICAgKiAvLyA9PiBbMTYsIDY0XVxuICAgICAqXG4gICAgICogXy5tYXAoeyAnYSc6IDQsICdiJzogOCB9LCBzcXVhcmUpO1xuICAgICAqIC8vID0+IFsxNiwgNjRdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1hcCh1c2VycywgJ3VzZXInKTtcbiAgICAgKiAvLyA9PiBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5TWFwIDogYmFzZU1hcDtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0QnlgIGV4Y2VwdCB0aGF0IGl0IGFsbG93cyBzcGVjaWZ5aW5nIHRoZSBzb3J0XG4gICAgICogb3JkZXJzIG9mIHRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS4gSWYgYG9yZGVyc2AgaXMgdW5zcGVjaWZpZWQsIGFsbCB2YWx1ZXNcbiAgICAgKiBhcmUgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlci4gT3RoZXJ3aXNlLCBzcGVjaWZ5IGFuIG9yZGVyIG9mIFwiZGVzY1wiIGZvclxuICAgICAqIGRlc2NlbmRpbmcgb3IgXCJhc2NcIiBmb3IgYXNjZW5kaW5nIHNvcnQgb3JkZXIgb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5W118RnVuY3Rpb25bXXxPYmplY3RbXXxzdHJpbmdbXX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBbb3JkZXJzXSBUaGUgc29ydCBvcmRlcnMgb2YgYGl0ZXJhdGVlc2AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ucmVkdWNlYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQ4IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNCB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gU29ydCBieSBgdXNlcmAgaW4gYXNjZW5kaW5nIG9yZGVyIGFuZCBieSBgYWdlYCBpbiBkZXNjZW5kaW5nIG9yZGVyLlxuICAgICAqIF8ub3JkZXJCeSh1c2VycywgWyd1c2VyJywgJ2FnZSddLCBbJ2FzYycsICdkZXNjJ10pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM2XSwgWydiYXJuZXknLCAzNF0sIFsnZnJlZCcsIDQ4XSwgWydmcmVkJywgNDBdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMsIGd1YXJkKSB7XG4gICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNBcnJheShpdGVyYXRlZXMpKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IGl0ZXJhdGVlcyA9PSBudWxsID8gW10gOiBbaXRlcmF0ZWVzXTtcbiAgICAgIH1cbiAgICAgIG9yZGVycyA9IGd1YXJkID8gdW5kZWZpbmVkIDogb3JkZXJzO1xuICAgICAgaWYgKCFpc0FycmF5KG9yZGVycykpIHtcbiAgICAgICAgb3JkZXJzID0gb3JkZXJzID09IG51bGwgPyBbXSA6IFtvcmRlcnNdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHNwbGl0IGludG8gdHdvIGdyb3VwcywgdGhlIGZpcnN0IG9mIHdoaWNoXG4gICAgICogY29udGFpbnMgZWxlbWVudHMgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLCB0aGUgc2Vjb25kIG9mIHdoaWNoXG4gICAgICogY29udGFpbnMgZWxlbWVudHMgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkgZm9yLiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snZnJlZCddLCBbJ2Jhcm5leScsICdwZWJibGVzJ11dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1sncGViYmxlcyddLCBbJ2Jhcm5leScsICdmcmVkJ11dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAncGViYmxlcyddLCBbJ2ZyZWQnXV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snZnJlZCddLCBbJ2Jhcm5leScsICdwZWJibGVzJ11dXG4gICAgICovXG4gICAgdmFyIHBhcnRpdGlvbiA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHRba2V5ID8gMCA6IDFdLnB1c2godmFsdWUpO1xuICAgIH0sIGZ1bmN0aW9uKCkgeyByZXR1cm4gW1tdLCBbXV07IH0pO1xuXG4gICAgLyoqXG4gICAgICogUmVkdWNlcyBgY29sbGVjdGlvbmAgdG8gYSB2YWx1ZSB3aGljaCBpcyB0aGUgYWNjdW11bGF0ZWQgcmVzdWx0IG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYCwgd2hlcmUgZWFjaCBzdWNjZXNzaXZlXG4gICAgICogaW52b2NhdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy4gSWYgYGFjY3VtdWxhdG9yYFxuICAgICAqIGlzIG5vdCBnaXZlbiwgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIGlzIHVzZWQgYXMgdGhlIGluaXRpYWxcbiAgICAgKiB2YWx1ZS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBmb3VyIGFyZ3VtZW50czpcbiAgICAgKiAoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogTWFueSBsb2Rhc2ggbWV0aG9kcyBhcmUgZ3VhcmRlZCB0byB3b3JrIGFzIGl0ZXJhdGVlcyBmb3IgbWV0aG9kcyBsaWtlXG4gICAgICogYF8ucmVkdWNlYCwgYF8ucmVkdWNlUmlnaHRgLCBhbmQgYF8udHJhbnNmb3JtYC5cbiAgICAgKlxuICAgICAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhc3NpZ25gLCBgZGVmYXVsdHNgLCBgZGVmYXVsdHNEZWVwYCwgYGluY2x1ZGVzYCwgYG1lcmdlYCwgYG9yZGVyQnlgLFxuICAgICAqIGFuZCBgc29ydEJ5YFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8ucmVkdWNlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZWR1Y2UoWzEsIDJdLCBmdW5jdGlvbihzdW0sIG4pIHtcbiAgICAgKiAgIHJldHVybiBzdW0gKyBuO1xuICAgICAqIH0sIDApO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlKHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9LCBmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIChyZXN1bHRbdmFsdWVdIHx8IChyZXN1bHRbdmFsdWVdID0gW10pKS5wdXNoKGtleSk7XG4gICAgICogICByZXR1cm4gcmVzdWx0O1xuICAgICAqIH0sIHt9KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlSZWR1Y2UgOiBiYXNlUmVkdWNlLFxuICAgICAgICAgIGluaXRBY2N1bSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzO1xuXG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgNCksIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0sIGJhc2VFYWNoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnJlZHVjZWAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5yZWR1Y2VcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW1swLCAxXSwgWzIsIDNdLCBbNCwgNV1dO1xuICAgICAqXG4gICAgICogXy5yZWR1Y2VSaWdodChhcnJheSwgZnVuY3Rpb24oZmxhdHRlbmVkLCBvdGhlcikge1xuICAgICAqICAgcmV0dXJuIGZsYXR0ZW5lZC5jb25jYXQob3RoZXIpO1xuICAgICAqIH0sIFtdKTtcbiAgICAgKiAvLyA9PiBbNCwgNSwgMiwgMywgMCwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWR1Y2VSaWdodChjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5UmVkdWNlUmlnaHQgOiBiYXNlUmVkdWNlLFxuICAgICAgICAgIGluaXRBY2N1bSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzO1xuXG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgNCksIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0sIGJhc2VFYWNoUmlnaHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5maWx0ZXJgOyB0aGlzIG1ldGhvZCByZXR1cm5zIHRoZSBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmBcbiAgICAgKiB0aGF0IGBwcmVkaWNhdGVgIGRvZXMgKipub3QqKiByZXR1cm4gdHJ1dGh5IGZvci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICAgKiBAc2VlIF8uZmlsdGVyXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ucmVqZWN0KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucmVqZWN0KHVzZXJzLCB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucmVqZWN0KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucmVqZWN0KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlamVjdChjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RmlsdGVyIDogYmFzZUZpbHRlcjtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIHJhbmRvbSBlbGVtZW50IGZyb20gYGNvbGxlY3Rpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZShbMSwgMiwgMywgNF0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYW1wbGUoY29sbGVjdGlvbikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTYW1wbGUgOiBiYXNlU2FtcGxlO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBgbmAgcmFuZG9tIGVsZW1lbnRzIGF0IHVuaXF1ZSBrZXlzIGZyb20gYGNvbGxlY3Rpb25gIHVwIHRvIHRoZVxuICAgICAqIHNpemUgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2FtcGxlU2l6ZShbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFszLCAxXVxuICAgICAqXG4gICAgICogXy5zYW1wbGVTaXplKFsxLCAyLCAzXSwgNCk7XG4gICAgICogLy8gPT4gWzIsIDMsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FtcGxlU2l6ZShjb2xsZWN0aW9uLCBuLCBndWFyZCkge1xuICAgICAgaWYgKChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIG4sIGd1YXJkKSA6IG4gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgbiA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgfVxuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTYW1wbGVTaXplIDogYmFzZVNhbXBsZVNpemU7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHNodWZmbGVkIHZhbHVlcywgdXNpbmcgYSB2ZXJzaW9uIG9mIHRoZVxuICAgICAqIFtGaXNoZXItWWF0ZXMgc2h1ZmZsZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmlzaGVyLVlhdGVzX3NodWZmbGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzaHVmZmxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNodWZmbGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNodWZmbGUoWzEsIDIsIDMsIDRdKTtcbiAgICAgKiAvLyA9PiBbNCwgMSwgMywgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaHVmZmxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2h1ZmZsZSA6IGJhc2VTaHVmZmxlO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc2l6ZSBvZiBgY29sbGVjdGlvbmAgYnkgcmV0dXJuaW5nIGl0cyBsZW5ndGggZm9yIGFycmF5LWxpa2VcbiAgICAgKiB2YWx1ZXMgb3IgdGhlIG51bWJlciBvZiBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBmb3Igb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29sbGVjdGlvbiBzaXplLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNpemUoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnNpemUoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiBfLnNpemUoJ3BlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiA3XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2l6ZShjb2xsZWN0aW9uKSB7XG4gICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHJldHVybiBpc1N0cmluZyhjb2xsZWN0aW9uKSA/IHN0cmluZ1NpemUoY29sbGVjdGlvbikgOiBjb2xsZWN0aW9uLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcoY29sbGVjdGlvbik7XG4gICAgICBpZiAodGFnID09IG1hcFRhZyB8fCB0YWcgPT0gc2V0VGFnKSB7XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uLnNpemU7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUtleXMoY29sbGVjdGlvbikubGVuZ3RoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgKiphbnkqKiBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBJdGVyYXRpb24gaXMgc3RvcHBlZCBvbmNlIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29tZShbbnVsbCwgMCwgJ3llcycsIGZhbHNlXSwgQm9vbGVhbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29tZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvbWUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvbWUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29tZShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNvbWUgOiBiYXNlU29tZTtcbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSkge1xuICAgICAgICBwcmVkaWNhdGUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzLCBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyIGJ5IHRoZSByZXN1bHRzIG9mXG4gICAgICogcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYSBjb2xsZWN0aW9uIHRocnUgZWFjaCBpdGVyYXRlZS4gVGhpcyBtZXRob2RcbiAgICAgKiBwZXJmb3JtcyBhIHN0YWJsZSBzb3J0LCB0aGF0IGlzLCBpdCBwcmVzZXJ2ZXMgdGhlIG9yaWdpbmFsIHNvcnQgb3JkZXIgb2ZcbiAgICAgKiBlcXVhbCBlbGVtZW50cy4gVGhlIGl0ZXJhdGVlcyBhcmUgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbaXRlcmF0ZWVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDggfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiAzMCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzQgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnNvcnRCeSh1c2VycywgW2Z1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlcjsgfV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM2XSwgWydiYXJuZXknLCAzNF0sIFsnZnJlZCcsIDQ4XSwgWydmcmVkJywgMzBdXVxuICAgICAqXG4gICAgICogXy5zb3J0QnkodXNlcnMsIFsndXNlcicsICdhZ2UnXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzRdLCBbJ2Jhcm5leScsIDM2XSwgWydmcmVkJywgMzBdLCBbJ2ZyZWQnLCA0OF1dXG4gICAgICovXG4gICAgdmFyIHNvcnRCeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlcykge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gaXRlcmF0ZWVzLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggPiAxICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIGl0ZXJhdGVlc1swXSwgaXRlcmF0ZWVzWzFdKSkge1xuICAgICAgICBpdGVyYXRlZXMgPSBbXTtcbiAgICAgIH0gZWxzZSBpZiAobGVuZ3RoID4gMiAmJiBpc0l0ZXJhdGVlQ2FsbChpdGVyYXRlZXNbMF0sIGl0ZXJhdGVlc1sxXSwgaXRlcmF0ZWVzWzJdKSkge1xuICAgICAgICBpdGVyYXRlZXMgPSBbaXRlcmF0ZWVzWzBdXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBiYXNlRmxhdHRlbihpdGVyYXRlZXMsIDEpLCBbXSk7XG4gICAgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB0aW1lc3RhbXAgb2YgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2VcbiAgICAgKiB0aGUgVW5peCBlcG9jaCAoMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBEYXRlXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXN0YW1wLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmVyKGZ1bmN0aW9uKHN0YW1wKSB7XG4gICAgICogICBjb25zb2xlLmxvZyhfLm5vdygpIC0gc3RhbXApO1xuICAgICAqIH0sIF8ubm93KCkpO1xuICAgICAqIC8vID0+IExvZ3MgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaXQgdG9vayBmb3IgdGhlIGRlZmVycmVkIGludm9jYXRpb24uXG4gICAgICovXG4gICAgdmFyIG5vdyA9IGN0eE5vdyB8fCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByb290LkRhdGUubm93KCk7XG4gICAgfTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5iZWZvcmVgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzXG4gICAgICogYGZ1bmNgIG9uY2UgaXQncyBjYWxsZWQgYG5gIG9yIG1vcmUgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGNhbGxzIGJlZm9yZSBgZnVuY2AgaXMgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F2ZXMgPSBbJ3Byb2ZpbGUnLCAnc2V0dGluZ3MnXTtcbiAgICAgKlxuICAgICAqIHZhciBkb25lID0gXy5hZnRlcihzYXZlcy5sZW5ndGgsIGZ1bmN0aW9uKCkge1xuICAgICAqICAgY29uc29sZS5sb2coJ2RvbmUgc2F2aW5nIScpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogXy5mb3JFYWNoKHNhdmVzLCBmdW5jdGlvbih0eXBlKSB7XG4gICAgICogICBhc3luY1NhdmUoeyAndHlwZSc6IHR5cGUsICdjb21wbGV0ZSc6IGRvbmUgfSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnZG9uZSBzYXZpbmchJyBhZnRlciB0aGUgdHdvIGFzeW5jIHNhdmVzIGhhdmUgY29tcGxldGVkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFmdGVyKG4sIGZ1bmMpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgtLW4gPCAxKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCwgd2l0aCB1cCB0byBgbmAgYXJndW1lbnRzLFxuICAgICAqIGlnbm9yaW5nIGFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IGNhcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzgnLCAnMTAnXSwgXy5hcnkocGFyc2VJbnQsIDEpKTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJ5KGZ1bmMsIG4sIGd1YXJkKSB7XG4gICAgICBuID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBuO1xuICAgICAgbiA9IChmdW5jICYmIG4gPT0gbnVsbCkgPyBmdW5jLmxlbmd0aCA6IG47XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0FSWV9GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgLCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzXG4gICAgICogb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24sIHdoaWxlIGl0J3MgY2FsbGVkIGxlc3MgdGhhbiBgbmAgdGltZXMuIFN1YnNlcXVlbnRcbiAgICAgKiBjYWxscyB0byB0aGUgY3JlYXRlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgY2FsbHMgYXQgd2hpY2ggYGZ1bmNgIGlzIG5vIGxvbmdlciBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmJlZm9yZSg1LCBhZGRDb250YWN0VG9MaXN0KSk7XG4gICAgICogLy8gPT4gQWxsb3dzIGFkZGluZyB1cCB0byA0IGNvbnRhY3RzIHRvIHRoZSBsaXN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJlZm9yZShuLCBmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKC0tbiA+IDApIHtcbiAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG4gPD0gMSkge1xuICAgICAgICAgIGZ1bmMgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgYHRoaXNBcmdgXG4gICAgICogYW5kIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uYmluZC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljIGJ1aWxkcyxcbiAgICAgKiBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIG5hdGl2ZSBgRnVuY3Rpb24jYmluZGAsIHRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiXG4gICAgICogcHJvcGVydHkgb2YgYm91bmQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYmluZC5cbiAgICAgKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBib3VuZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZ3JlZXQoZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAndXNlcic6ICdmcmVkJyB9O1xuICAgICAqXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kKGdyZWV0LCBvYmplY3QsICdoaScpO1xuICAgICAqIGJvdW5kKCchJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQhJ1xuICAgICAqXG4gICAgICogLy8gQm91bmQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kKGdyZWV0LCBvYmplY3QsIF8sICchJyk7XG4gICAgICogYm91bmQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQhJ1xuICAgICAqL1xuICAgIHZhciBiaW5kID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgdGhpc0FyZywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gV1JBUF9CSU5EX0ZMQUc7XG4gICAgICBpZiAocGFydGlhbHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihiaW5kKSk7XG4gICAgICAgIGJpdG1hc2sgfD0gV1JBUF9QQVJUSUFMX0ZMQUc7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBtZXRob2QgYXQgYG9iamVjdFtrZXldYCB3aXRoIGBwYXJ0aWFsc2BcbiAgICAgKiBwcmVwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGRpZmZlcnMgZnJvbSBgXy5iaW5kYCBieSBhbGxvd2luZyBib3VuZCBmdW5jdGlvbnMgdG8gcmVmZXJlbmNlXG4gICAgICogbWV0aG9kcyB0aGF0IG1heSBiZSByZWRlZmluZWQgb3IgZG9uJ3QgeWV0IGV4aXN0LiBTZWVcbiAgICAgKiBbUGV0ZXIgTWljaGF1eCdzIGFydGljbGVdKGh0dHA6Ly9wZXRlci5taWNoYXV4LmNhL2FydGljbGVzL2xhenktZnVuY3Rpb24tZGVmaW5pdGlvbi1wYXR0ZXJuKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uYmluZEtleS5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludm9rZSB0aGUgbWV0aG9kIG9uLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJvdW5kIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge1xuICAgICAqICAgJ3VzZXInOiAnZnJlZCcsXG4gICAgICogICAnZ3JlZXQnOiBmdW5jdGlvbihncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogICB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZEtleShvYmplY3QsICdncmVldCcsICdoaScpO1xuICAgICAqIGJvdW5kKCchJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQhJ1xuICAgICAqXG4gICAgICogb2JqZWN0LmdyZWV0ID0gZnVuY3Rpb24oZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAneWEgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaXlhIGZyZWQhJ1xuICAgICAqXG4gICAgICogLy8gQm91bmQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kS2V5KG9iamVjdCwgJ2dyZWV0JywgXywgJyEnKTtcbiAgICAgKiBib3VuZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGl5YSBmcmVkISdcbiAgICAgKi9cbiAgICB2YXIgYmluZEtleSA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwga2V5LCBwYXJ0aWFscykge1xuICAgICAgdmFyIGJpdG1hc2sgPSBXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRztcbiAgICAgIGlmIChwYXJ0aWFscy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKGJpbmRLZXkpKTtcbiAgICAgICAgYml0bWFzayB8PSBXUkFQX1BBUlRJQUxfRkxBRztcbiAgICAgIH1cbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGtleSwgYml0bWFzaywgb2JqZWN0LCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIGFyZ3VtZW50cyBvZiBgZnVuY2AgYW5kIGVpdGhlciBpbnZva2VzXG4gICAgICogYGZ1bmNgIHJldHVybmluZyBpdHMgcmVzdWx0LCBpZiBhdCBsZWFzdCBgYXJpdHlgIG51bWJlciBvZiBhcmd1bWVudHMgaGF2ZVxuICAgICAqIGJlZW4gcHJvdmlkZWQsIG9yIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdGhlIHJlbWFpbmluZyBgZnVuY2BcbiAgICAgKiBhcmd1bWVudHMsIGFuZCBzbyBvbi4gVGhlIGFyaXR5IG9mIGBmdW5jYCBtYXkgYmUgc3BlY2lmaWVkIGlmIGBmdW5jLmxlbmd0aGBcbiAgICAgKiBpcyBub3Qgc3VmZmljaWVudC5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5jdXJyeS5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljIGJ1aWxkcyxcbiAgICAgKiBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgY3VycmllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5PWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFiYyA9IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBjdXJyaWVkID0gXy5jdXJyeShhYmMpO1xuICAgICAqXG4gICAgICogY3VycmllZCgxKSgyKSgzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMikoMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIsIDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogLy8gQ3VycmllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiBjdXJyaWVkKDEpKF8sIDMpKDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1cnJ5KGZ1bmMsIGFyaXR5LCBndWFyZCkge1xuICAgICAgYXJpdHkgPSBndWFyZCA/IHVuZGVmaW5lZCA6IGFyaXR5O1xuICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9DVVJSWV9GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYXJpdHkpO1xuICAgICAgcmVzdWx0LnBsYWNlaG9sZGVyID0gY3VycnkucGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY3VycnlgIGV4Y2VwdCB0aGF0IGFyZ3VtZW50cyBhcmUgYXBwbGllZCB0byBgZnVuY2BcbiAgICAgKiBpbiB0aGUgbWFubmVyIG9mIGBfLnBhcnRpYWxSaWdodGAgaW5zdGVhZCBvZiBgXy5wYXJ0aWFsYC5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5jdXJyeVJpZ2h0LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBjdXJyaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGN1cnJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHk9ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYWJjID0gZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGN1cnJpZWQgPSBfLmN1cnJ5UmlnaHQoYWJjKTtcbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMykoMikoMSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDIsIDMpKDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyLCAzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIC8vIEN1cnJpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogY3VycmllZCgzKSgxLCBfKSgyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXJyeVJpZ2h0KGZ1bmMsIGFyaXR5LCBndWFyZCkge1xuICAgICAgYXJpdHkgPSBndWFyZCA/IHVuZGVmaW5lZCA6IGFyaXR5O1xuICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9DVVJSWV9SSUdIVF9GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYXJpdHkpO1xuICAgICAgcmVzdWx0LnBsYWNlaG9sZGVyID0gY3VycnlSaWdodC5wbGFjZWhvbGRlcjtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGRlYm91bmNlZCBmdW5jdGlvbiB0aGF0IGRlbGF5cyBpbnZva2luZyBgZnVuY2AgdW50aWwgYWZ0ZXIgYHdhaXRgXG4gICAgICogbWlsbGlzZWNvbmRzIGhhdmUgZWxhcHNlZCBzaW5jZSB0aGUgbGFzdCB0aW1lIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gd2FzXG4gICAgICogaW52b2tlZC4gVGhlIGRlYm91bmNlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGAgbWV0aG9kIHRvIGNhbmNlbFxuICAgICAqIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLlxuICAgICAqIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZVxuICAgICAqIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YCB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50XG4gICAgICogY2FsbHMgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2BcbiAgICAgKiBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICAgICAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uXG4gICAgICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICAgICAqXG4gICAgICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gICAgICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICAgICAqXG4gICAgICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gICAgICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy5kZWJvdW5jZWAgYW5kIGBfLnRocm90dGxlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlYm91bmNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9ZmFsc2VdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4V2FpdF1cbiAgICAgKiAgVGhlIG1heGltdW0gdGltZSBgZnVuY2AgaXMgYWxsb3dlZCB0byBiZSBkZWxheWVkIGJlZm9yZSBpdCdzIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGRlYm91bmNlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gQXZvaWQgY29zdGx5IGNhbGN1bGF0aW9ucyB3aGlsZSB0aGUgd2luZG93IHNpemUgaXMgaW4gZmx1eC5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncmVzaXplJywgXy5kZWJvdW5jZShjYWxjdWxhdGVMYXlvdXQsIDE1MCkpO1xuICAgICAqXG4gICAgICogLy8gSW52b2tlIGBzZW5kTWFpbGAgd2hlbiBjbGlja2VkLCBkZWJvdW5jaW5nIHN1YnNlcXVlbnQgY2FsbHMuXG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uZGVib3VuY2Uoc2VuZE1haWwsIDMwMCwge1xuICAgICAqICAgJ2xlYWRpbmcnOiB0cnVlLFxuICAgICAqICAgJ3RyYWlsaW5nJzogZmFsc2VcbiAgICAgKiB9KSk7XG4gICAgICpcbiAgICAgKiAvLyBFbnN1cmUgYGJhdGNoTG9nYCBpcyBpbnZva2VkIG9uY2UgYWZ0ZXIgMSBzZWNvbmQgb2YgZGVib3VuY2VkIGNhbGxzLlxuICAgICAqIHZhciBkZWJvdW5jZWQgPSBfLmRlYm91bmNlKGJhdGNoTG9nLCAyNTAsIHsgJ21heFdhaXQnOiAxMDAwIH0pO1xuICAgICAqIHZhciBzb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9zdHJlYW0nKTtcbiAgICAgKiBqUXVlcnkoc291cmNlKS5vbignbWVzc2FnZScsIGRlYm91bmNlZCk7XG4gICAgICpcbiAgICAgKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIGRlYm91bmNlZCBpbnZvY2F0aW9uLlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIGRlYm91bmNlZC5jYW5jZWwpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsYXN0QXJncyxcbiAgICAgICAgICBsYXN0VGhpcyxcbiAgICAgICAgICBtYXhXYWl0LFxuICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICB0aW1lcklkLFxuICAgICAgICAgIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICBsYXN0SW52b2tlVGltZSA9IDAsXG4gICAgICAgICAgbGVhZGluZyA9IGZhbHNlLFxuICAgICAgICAgIG1heGluZyA9IGZhbHNlLFxuICAgICAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgd2FpdCA9IHRvTnVtYmVyKHdhaXQpIHx8IDA7XG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgbGVhZGluZyA9ICEhb3B0aW9ucy5sZWFkaW5nO1xuICAgICAgICBtYXhpbmcgPSAnbWF4V2FpdCcgaW4gb3B0aW9ucztcbiAgICAgICAgbWF4V2FpdCA9IG1heGluZyA/IG5hdGl2ZU1heCh0b051bWJlcihvcHRpb25zLm1heFdhaXQpIHx8IDAsIHdhaXQpIDogbWF4V2FpdDtcbiAgICAgICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gaW52b2tlRnVuYyh0aW1lKSB7XG4gICAgICAgIHZhciBhcmdzID0gbGFzdEFyZ3MsXG4gICAgICAgICAgICB0aGlzQXJnID0gbGFzdFRoaXM7XG5cbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBsZWFkaW5nRWRnZSh0aW1lKSB7XG4gICAgICAgIC8vIFJlc2V0IGFueSBgbWF4V2FpdGAgdGltZXIuXG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAgICAgLy8gU3RhcnQgdGhlIHRpbWVyIGZvciB0aGUgdHJhaWxpbmcgZWRnZS5cbiAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgLy8gSW52b2tlIHRoZSBsZWFkaW5nIGVkZ2UuXG4gICAgICAgIHJldHVybiBsZWFkaW5nID8gaW52b2tlRnVuYyh0aW1lKSA6IHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmVtYWluaW5nV2FpdCh0aW1lKSB7XG4gICAgICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lLFxuICAgICAgICAgICAgdGltZVdhaXRpbmcgPSB3YWl0IC0gdGltZVNpbmNlTGFzdENhbGw7XG5cbiAgICAgICAgcmV0dXJuIG1heGluZ1xuICAgICAgICAgID8gbmF0aXZlTWluKHRpbWVXYWl0aW5nLCBtYXhXYWl0IC0gdGltZVNpbmNlTGFzdEludm9rZSlcbiAgICAgICAgICA6IHRpbWVXYWl0aW5nO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzaG91bGRJbnZva2UodGltZSkge1xuICAgICAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZTtcblxuICAgICAgICAvLyBFaXRoZXIgdGhpcyBpcyB0aGUgZmlyc3QgY2FsbCwgYWN0aXZpdHkgaGFzIHN0b3BwZWQgYW5kIHdlJ3JlIGF0IHRoZVxuICAgICAgICAvLyB0cmFpbGluZyBlZGdlLCB0aGUgc3lzdGVtIHRpbWUgaGFzIGdvbmUgYmFja3dhcmRzIGFuZCB3ZSdyZSB0cmVhdGluZ1xuICAgICAgICAvLyBpdCBhcyB0aGUgdHJhaWxpbmcgZWRnZSwgb3Igd2UndmUgaGl0IHRoZSBgbWF4V2FpdGAgbGltaXQuXG4gICAgICAgIHJldHVybiAobGFzdENhbGxUaW1lID09PSB1bmRlZmluZWQgfHwgKHRpbWVTaW5jZUxhc3RDYWxsID49IHdhaXQpIHx8XG4gICAgICAgICAgKHRpbWVTaW5jZUxhc3RDYWxsIDwgMCkgfHwgKG1heGluZyAmJiB0aW1lU2luY2VMYXN0SW52b2tlID49IG1heFdhaXQpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdGltZXJFeHBpcmVkKCkge1xuICAgICAgICB2YXIgdGltZSA9IG5vdygpO1xuICAgICAgICBpZiAoc2hvdWxkSW52b2tlKHRpbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHRyYWlsaW5nRWRnZSh0aW1lKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZXN0YXJ0IHRoZSB0aW1lci5cbiAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCByZW1haW5pbmdXYWl0KHRpbWUpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdHJhaWxpbmdFZGdlKHRpbWUpIHtcbiAgICAgICAgdGltZXJJZCA9IHVuZGVmaW5lZDtcblxuICAgICAgICAvLyBPbmx5IGludm9rZSBpZiB3ZSBoYXZlIGBsYXN0QXJnc2Agd2hpY2ggbWVhbnMgYGZ1bmNgIGhhcyBiZWVuXG4gICAgICAgIC8vIGRlYm91bmNlZCBhdCBsZWFzdCBvbmNlLlxuICAgICAgICBpZiAodHJhaWxpbmcgJiYgbGFzdEFyZ3MpIHtcbiAgICAgICAgICByZXR1cm4gaW52b2tlRnVuYyh0aW1lKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgICAgIGlmICh0aW1lcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdEludm9rZVRpbWUgPSAwO1xuICAgICAgICBsYXN0QXJncyA9IGxhc3RDYWxsVGltZSA9IGxhc3RUaGlzID0gdGltZXJJZCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgICAgIHJldHVybiB0aW1lcklkID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiB0cmFpbGluZ0VkZ2Uobm93KCkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XG4gICAgICAgIHZhciB0aW1lID0gbm93KCksXG4gICAgICAgICAgICBpc0ludm9raW5nID0gc2hvdWxkSW52b2tlKHRpbWUpO1xuXG4gICAgICAgIGxhc3RBcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBsYXN0VGhpcyA9IHRoaXM7XG4gICAgICAgIGxhc3RDYWxsVGltZSA9IHRpbWU7XG5cbiAgICAgICAgaWYgKGlzSW52b2tpbmcpIHtcbiAgICAgICAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbGVhZGluZ0VkZ2UobGFzdENhbGxUaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG1heGluZykge1xuICAgICAgICAgICAgLy8gSGFuZGxlIGludm9jYXRpb25zIGluIGEgdGlnaHQgbG9vcC5cbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICAgICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgICAgICByZXR1cm4gaW52b2tlRnVuYyhsYXN0Q2FsbFRpbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcbiAgICAgIGRlYm91bmNlZC5mbHVzaCA9IGZsdXNoO1xuICAgICAgcmV0dXJuIGRlYm91bmNlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWZlcnMgaW52b2tpbmcgdGhlIGBmdW5jYCB1bnRpbCB0aGUgY3VycmVudCBjYWxsIHN0YWNrIGhhcyBjbGVhcmVkLiBBbnlcbiAgICAgKiBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgdG8gYGZ1bmNgIHdoZW4gaXQncyBpbnZva2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVmZXIuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXIgaWQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmZXIoZnVuY3Rpb24odGV4dCkge1xuICAgICAqICAgY29uc29sZS5sb2codGV4dCk7XG4gICAgICogfSwgJ2RlZmVycmVkJyk7XG4gICAgICogLy8gPT4gTG9ncyAnZGVmZXJyZWQnIGFmdGVyIG9uZSBtaWxsaXNlY29uZC5cbiAgICAgKi9cbiAgICB2YXIgZGVmZXIgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBhcmdzKSB7XG4gICAgICByZXR1cm4gYmFzZURlbGF5KGZ1bmMsIDEsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyBgZnVuY2AgYWZ0ZXIgYHdhaXRgIG1pbGxpc2Vjb25kcy4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZVxuICAgICAqIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXIgaWQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVsYXkoZnVuY3Rpb24odGV4dCkge1xuICAgICAqICAgY29uc29sZS5sb2codGV4dCk7XG4gICAgICogfSwgMTAwMCwgJ2xhdGVyJyk7XG4gICAgICogLy8gPT4gTG9ncyAnbGF0ZXInIGFmdGVyIG9uZSBzZWNvbmQuXG4gICAgICovXG4gICAgdmFyIGRlbGF5ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgd2FpdCwgYXJncykge1xuICAgICAgcmV0dXJuIGJhc2VEZWxheShmdW5jLCB0b051bWJlcih3YWl0KSB8fCAwLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYXJndW1lbnRzIHJldmVyc2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZmxpcCBhcmd1bWVudHMgZm9yLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZsaXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmbGlwcGVkID0gXy5mbGlwKGZ1bmN0aW9uKCkge1xuICAgICAqICAgcmV0dXJuIF8udG9BcnJheShhcmd1bWVudHMpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogZmxpcHBlZCgnYScsICdiJywgJ2MnLCAnZCcpO1xuICAgICAqIC8vID0+IFsnZCcsICdjJywgJ2InLCAnYSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxpcChmdW5jKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0ZMSVBfRkxBRyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAgICAgKiBwcm92aWRlZCwgaXQgZGV0ZXJtaW5lcyB0aGUgY2FjaGUga2V5IGZvciBzdG9yaW5nIHRoZSByZXN1bHQgYmFzZWQgb24gdGhlXG4gICAgICogYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbi4gQnkgZGVmYXVsdCwgdGhlIGZpcnN0IGFyZ3VtZW50XG4gICAgICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAgICAgKiBmdW5jdGlvbi4gSXRzIGNyZWF0aW9uIG1heSBiZSBjdXN0b21pemVkIGJ5IHJlcGxhY2luZyB0aGUgYF8ubWVtb2l6ZS5DYWNoZWBcbiAgICAgKiBjb25zdHJ1Y3RvciB3aXRoIG9uZSB3aG9zZSBpbnN0YW5jZXMgaW1wbGVtZW50IHRoZVxuICAgICAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gICAgICogbWV0aG9kIGludGVyZmFjZSBvZiBgY2xlYXJgLCBgZGVsZXRlYCwgYGdldGAsIGBoYXNgLCBhbmQgYHNldGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jlc29sdmVyXSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSB0aGUgY2FjaGUga2V5LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2MnOiAzLCAnZCc6IDQgfTtcbiAgICAgKlxuICAgICAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogdmFsdWVzKG90aGVyKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKlxuICAgICAqIG9iamVjdC5hID0gMjtcbiAgICAgKiB2YWx1ZXMob2JqZWN0KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIC8vIE1vZGlmeSB0aGUgcmVzdWx0IGNhY2hlLlxuICAgICAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiB2YWx1ZXMob2JqZWN0KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICpcbiAgICAgKiAvLyBSZXBsYWNlIGBfLm1lbW9pemUuQ2FjaGVgLlxuICAgICAqIF8ubWVtb2l6ZS5DYWNoZSA9IFdlYWtNYXA7XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVtb2l6ZShmdW5jLCByZXNvbHZlcikge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicgfHwgKHJlc29sdmVyICE9IG51bGwgJiYgdHlwZW9mIHJlc29sdmVyICE9ICdmdW5jdGlvbicpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGtleSA9IHJlc29sdmVyID8gcmVzb2x2ZXIuYXBwbHkodGhpcywgYXJncykgOiBhcmdzWzBdLFxuICAgICAgICAgICAgY2FjaGUgPSBtZW1vaXplZC5jYWNoZTtcblxuICAgICAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gY2FjaGUuZ2V0KGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIG1lbW9pemVkLmNhY2hlID0gY2FjaGUuc2V0KGtleSwgcmVzdWx0KSB8fCBjYWNoZTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgICBtZW1vaXplZC5jYWNoZSA9IG5ldyAobWVtb2l6ZS5DYWNoZSB8fCBNYXBDYWNoZSk7XG4gICAgICByZXR1cm4gbWVtb2l6ZWQ7XG4gICAgfVxuXG4gICAgLy8gRXhwb3NlIGBNYXBDYWNoZWAuXG4gICAgbWVtb2l6ZS5DYWNoZSA9IE1hcENhY2hlO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbmVnYXRlcyB0aGUgcmVzdWx0IG9mIHRoZSBwcmVkaWNhdGUgYGZ1bmNgLiBUaGVcbiAgICAgKiBgZnVuY2AgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGVcbiAgICAgKiBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBwcmVkaWNhdGUgdG8gbmVnYXRlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG5lZ2F0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGlzRXZlbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihbMSwgMiwgMywgNCwgNSwgNl0sIF8ubmVnYXRlKGlzRXZlbikpO1xuICAgICAqIC8vID0+IFsxLCAzLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5lZ2F0ZShwcmVkaWNhdGUpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJlZGljYXRlICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICAgIGNhc2UgMDogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzKTtcbiAgICAgICAgICBjYXNlIDE6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSk7XG4gICAgICAgICAgY2FzZSAyOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gIXByZWRpY2F0ZS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaXMgcmVzdHJpY3RlZCB0byBpbnZva2luZyBgZnVuY2Agb25jZS4gUmVwZWF0IGNhbGxzXG4gICAgICogdG8gdGhlIGZ1bmN0aW9uIHJldHVybiB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGludm9jYXRpb24uIFRoZSBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgaW5pdGlhbGl6ZSA9IF8ub25jZShjcmVhdGVBcHBsaWNhdGlvbik7XG4gICAgICogaW5pdGlhbGl6ZSgpO1xuICAgICAqIGluaXRpYWxpemUoKTtcbiAgICAgKiAvLyA9PiBgY3JlYXRlQXBwbGljYXRpb25gIGlzIGludm9rZWQgb25jZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uY2UoZnVuYykge1xuICAgICAgcmV0dXJuIGJlZm9yZSgyLCBmdW5jKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudHMgdHJhbnNmb3JtZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbdHJhbnNmb3Jtcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm1zLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkb3VibGVkKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyQXJncyhmdW5jdGlvbih4LCB5KSB7XG4gICAgICogICByZXR1cm4gW3gsIHldO1xuICAgICAqIH0sIFtzcXVhcmUsIGRvdWJsZWRdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoOSwgMyk7XG4gICAgICogLy8gPT4gWzgxLCA2XVxuICAgICAqXG4gICAgICogZnVuYygxMCwgNSk7XG4gICAgICogLy8gPT4gWzEwMCwgMTBdXG4gICAgICovXG4gICAgdmFyIG92ZXJBcmdzID0gY2FzdFJlc3QoZnVuY3Rpb24oZnVuYywgdHJhbnNmb3Jtcykge1xuICAgICAgdHJhbnNmb3JtcyA9ICh0cmFuc2Zvcm1zLmxlbmd0aCA9PSAxICYmIGlzQXJyYXkodHJhbnNmb3Jtc1swXSkpXG4gICAgICAgID8gYXJyYXlNYXAodHJhbnNmb3Jtc1swXSwgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKVxuICAgICAgICA6IGFycmF5TWFwKGJhc2VGbGF0dGVuKHRyYW5zZm9ybXMsIDEpLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuXG4gICAgICB2YXIgZnVuY3NMZW5ndGggPSB0cmFuc2Zvcm1zLmxlbmd0aDtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKGFyZ3MubGVuZ3RoLCBmdW5jc0xlbmd0aCk7XG5cbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IHRyYW5zZm9ybXNbaW5kZXhdLmNhbGwodGhpcywgYXJnc1tpbmRleF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGVcbiAgICAgKiBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYmluZGAgZXhjZXB0IGl0IGRvZXMgKipub3QqKlxuICAgICAqIGFsdGVyIHRoZSBgdGhpc2AgYmluZGluZy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5wYXJ0aWFsLnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBwYXJ0aWFsbHlcbiAgICAgKiBhcHBsaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHBhcnRpYWxseSBhcHBseSBhcmd1bWVudHMgdG8uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFydGlhbGx5IGFwcGxpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBuYW1lKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyBuYW1lO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBzYXlIZWxsb1RvID0gXy5wYXJ0aWFsKGdyZWV0LCAnaGVsbG8nKTtcbiAgICAgKiBzYXlIZWxsb1RvKCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBQYXJ0aWFsbHkgYXBwbGllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgZ3JlZXRGcmVkID0gXy5wYXJ0aWFsKGdyZWV0LCBfLCAnZnJlZCcpO1xuICAgICAqIGdyZWV0RnJlZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCdcbiAgICAgKi9cbiAgICB2YXIgcGFydGlhbCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIocGFydGlhbCkpO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9QQVJUSUFMX0ZMQUcsIHVuZGVmaW5lZCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wYXJ0aWFsYCBleGNlcHQgdGhhdCBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHNcbiAgICAgKiBhcmUgYXBwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5wYXJ0aWFsUmlnaHQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIHBhcnRpYWxseVxuICAgICAqIGFwcGxpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcGFydGlhbGx5IGFwcGx5IGFyZ3VtZW50cyB0by5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXJ0aWFsbHkgYXBwbGllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZ3JlZXQoZ3JlZXRpbmcsIG5hbWUpIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIG5hbWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGdyZWV0RnJlZCA9IF8ucGFydGlhbFJpZ2h0KGdyZWV0LCAnZnJlZCcpO1xuICAgICAqIGdyZWV0RnJlZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFBhcnRpYWxseSBhcHBsaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBzYXlIZWxsb1RvID0gXy5wYXJ0aWFsUmlnaHQoZ3JlZXQsICdoZWxsbycsIF8pO1xuICAgICAqIHNheUhlbGxvVG8oJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCdcbiAgICAgKi9cbiAgICB2YXIgcGFydGlhbFJpZ2h0ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihwYXJ0aWFsUmlnaHQpKTtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHLCB1bmRlZmluZWQsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYXJndW1lbnRzIGFycmFuZ2VkIGFjY29yZGluZ1xuICAgICAqIHRvIHRoZSBzcGVjaWZpZWQgYGluZGV4ZXNgIHdoZXJlIHRoZSBhcmd1bWVudCB2YWx1ZSBhdCB0aGUgZmlyc3QgaW5kZXggaXNcbiAgICAgKiBwcm92aWRlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQsIHRoZSBhcmd1bWVudCB2YWx1ZSBhdCB0aGUgc2Vjb25kIGluZGV4IGlzXG4gICAgICogcHJvdmlkZWQgYXMgdGhlIHNlY29uZCBhcmd1bWVudCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVhcnJhbmdlIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHBhcmFtIHsuLi4obnVtYmVyfG51bWJlcltdKX0gaW5kZXhlcyBUaGUgYXJyYW5nZWQgYXJndW1lbnQgaW5kZXhlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHJlYXJnZWQgPSBfLnJlYXJnKGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfSwgWzIsIDAsIDFdKTtcbiAgICAgKlxuICAgICAqIHJlYXJnZWQoJ2InLCAnYycsICdhJylcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKi9cbiAgICB2YXIgcmVhcmcgPSBmbGF0UmVzdChmdW5jdGlvbihmdW5jLCBpbmRleGVzKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1JFQVJHX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGluZGV4ZXMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbiBhbmQgYXJndW1lbnRzIGZyb20gYHN0YXJ0YCBhbmQgYmV5b25kIHByb3ZpZGVkIGFzXG4gICAgICogYW4gYXJyYXkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb24gdGhlXG4gICAgICogW3Jlc3QgcGFyYW1ldGVyXShodHRwczovL21kbi5pby9yZXN0X3BhcmFtZXRlcnMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzYXkgPSBfLnJlc3QoZnVuY3Rpb24od2hhdCwgbmFtZXMpIHtcbiAgICAgKiAgIHJldHVybiB3aGF0ICsgJyAnICsgXy5pbml0aWFsKG5hbWVzKS5qb2luKCcsICcpICtcbiAgICAgKiAgICAgKF8uc2l6ZShuYW1lcykgPiAxID8gJywgJiAnIDogJycpICsgXy5sYXN0KG5hbWVzKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHNheSgnaGVsbG8nLCAnZnJlZCcsICdiYXJuZXknLCAncGViYmxlcycpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkLCBiYXJuZXksICYgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXN0KGZ1bmMsIHN0YXJ0KSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBzdGFydCA9IHN0YXJ0ID09PSB1bmRlZmluZWQgPyBzdGFydCA6IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuYywgc3RhcnQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZVxuICAgICAqIGNyZWF0ZSBmdW5jdGlvbiBhbmQgYW4gYXJyYXkgb2YgYXJndW1lbnRzIG11Y2ggbGlrZVxuICAgICAqIFtgRnVuY3Rpb24jYXBwbHlgXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvbiB0aGVcbiAgICAgKiBbc3ByZWFkIG9wZXJhdG9yXShodHRwczovL21kbi5pby9zcHJlYWRfb3BlcmF0b3IpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gc3ByZWFkIGFyZ3VtZW50cyBvdmVyLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSBzcHJlYWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzYXkgPSBfLnNwcmVhZChmdW5jdGlvbih3aG8sIHdoYXQpIHtcbiAgICAgKiAgIHJldHVybiB3aG8gKyAnIHNheXMgJyArIHdoYXQ7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBzYXkoWydmcmVkJywgJ2hlbGxvJ10pO1xuICAgICAqIC8vID0+ICdmcmVkIHNheXMgaGVsbG8nXG4gICAgICpcbiAgICAgKiB2YXIgbnVtYmVycyA9IFByb21pc2UuYWxsKFtcbiAgICAgKiAgIFByb21pc2UucmVzb2x2ZSg0MCksXG4gICAgICogICBQcm9taXNlLnJlc29sdmUoMzYpXG4gICAgICogXSk7XG4gICAgICpcbiAgICAgKiBudW1iZXJzLnRoZW4oXy5zcHJlYWQoZnVuY3Rpb24oeCwgeSkge1xuICAgICAqICAgcmV0dXJuIHggKyB5O1xuICAgICAqIH0pKTtcbiAgICAgKiAvLyA9PiBhIFByb21pc2Ugb2YgNzZcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzcHJlYWQoZnVuYywgc3RhcnQpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gc3RhcnQgPT0gbnVsbCA/IDAgOiBuYXRpdmVNYXgodG9JbnRlZ2VyKHN0YXJ0KSwgMCk7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcmdzW3N0YXJ0XSxcbiAgICAgICAgICAgIG90aGVyQXJncyA9IGNhc3RTbGljZShhcmdzLCAwLCBzdGFydCk7XG5cbiAgICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgICAgYXJyYXlQdXNoKG90aGVyQXJncywgYXJyYXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHRocm90dGxlZCBmdW5jdGlvbiB0aGF0IG9ubHkgaW52b2tlcyBgZnVuY2AgYXQgbW9zdCBvbmNlIHBlclxuICAgICAqIGV2ZXJ5IGB3YWl0YCBtaWxsaXNlY29uZHMuIFRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgXG4gICAgICogbWV0aG9kIHRvIGNhbmNlbCBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0b1xuICAgICAqIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYFxuICAgICAqIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGBcbiAgICAgKiB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWQgd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlXG4gICAgICogdGhyb3R0bGVkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50IGNhbGxzIHRvIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gcmV0dXJuIHRoZVxuICAgICAqIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIHRocm90dGxlZCBmdW5jdGlvblxuICAgICAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAgICAgKlxuICAgICAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICAgICAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAgICAgKlxuICAgICAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICAgICAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8udGhyb3R0bGVgIGFuZCBgXy5kZWJvdW5jZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB0aHJvdHRsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhyb3R0bGUgaW52b2NhdGlvbnMgdG8uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPXRydWVdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgdGhyb3R0bGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCBleGNlc3NpdmVseSB1cGRhdGluZyB0aGUgcG9zaXRpb24gd2hpbGUgc2Nyb2xsaW5nLlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdzY3JvbGwnLCBfLnRocm90dGxlKHVwZGF0ZVBvc2l0aW9uLCAxMDApKTtcbiAgICAgKlxuICAgICAqIC8vIEludm9rZSBgcmVuZXdUb2tlbmAgd2hlbiB0aGUgY2xpY2sgZXZlbnQgaXMgZmlyZWQsIGJ1dCBub3QgbW9yZSB0aGFuIG9uY2UgZXZlcnkgNSBtaW51dGVzLlxuICAgICAqIHZhciB0aHJvdHRsZWQgPSBfLnRocm90dGxlKHJlbmV3VG9rZW4sIDMwMDAwMCwgeyAndHJhaWxpbmcnOiBmYWxzZSB9KTtcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdGhyb3R0bGVkKTtcbiAgICAgKlxuICAgICAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgdGhyb3R0bGVkIGludm9jYXRpb24uXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgdGhyb3R0bGVkLmNhbmNlbCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gdGhyb3R0bGUoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgICAgdmFyIGxlYWRpbmcgPSB0cnVlLFxuICAgICAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIGxlYWRpbmcgPSAnbGVhZGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy5sZWFkaW5nIDogbGVhZGluZztcbiAgICAgICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWJvdW5jZShmdW5jLCB3YWl0LCB7XG4gICAgICAgICdsZWFkaW5nJzogbGVhZGluZyxcbiAgICAgICAgJ21heFdhaXQnOiB3YWl0LFxuICAgICAgICAndHJhaWxpbmcnOiB0cmFpbGluZ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB1cCB0byBvbmUgYXJndW1lbnQsIGlnbm9yaW5nIGFueVxuICAgICAqIGFkZGl0aW9uYWwgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnOCcsICcxMCddLCBfLnVuYXJ5KHBhcnNlSW50KSk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuYXJ5KGZ1bmMpIHtcbiAgICAgIHJldHVybiBhcnkoZnVuYywgMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcHJvdmlkZXMgYHZhbHVlYCB0byBgd3JhcHBlcmAgYXMgaXRzIGZpcnN0XG4gICAgICogYXJndW1lbnQuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgZnVuY3Rpb24gYXJlIGFwcGVuZGVkXG4gICAgICogdG8gdGhvc2UgcHJvdmlkZWQgdG8gdGhlIGB3cmFwcGVyYC4gVGhlIHdyYXBwZXIgaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbd3JhcHBlcj1pZGVudGl0eV0gVGhlIHdyYXBwZXIgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBwID0gXy53cmFwKF8uZXNjYXBlLCBmdW5jdGlvbihmdW5jLCB0ZXh0KSB7XG4gICAgICogICByZXR1cm4gJzxwPicgKyBmdW5jKHRleHQpICsgJzwvcD4nO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogcCgnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnPHA+ZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzPC9wPidcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwKHZhbHVlLCB3cmFwcGVyKSB7XG4gICAgICByZXR1cm4gcGFydGlhbChjYXN0RnVuY3Rpb24od3JhcHBlciksIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIGFzIGFuIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjQuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KDEpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoeyAnYSc6IDEgfSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxIH1dXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSgnYWJjJyk7XG4gICAgICogLy8gPT4gWydhYmMnXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkobnVsbCk7XG4gICAgICogLy8gPT4gW251bGxdXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSh1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IFt1bmRlZmluZWRdXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSgpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICogY29uc29sZS5sb2coXy5jYXN0QXJyYXkoYXJyYXkpID09PSBhcnJheSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RBcnJheSgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWUgPSBhcmd1bWVudHNbMF07XG4gICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNoYWxsb3cgY2xvbmUgb2YgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uIHRoZVxuICAgICAqIFtzdHJ1Y3R1cmVkIGNsb25lIGFsZ29yaXRobV0oaHR0cHM6Ly9tZG4uaW8vU3RydWN0dXJlZF9jbG9uZV9hbGdvcml0aG0pXG4gICAgICogYW5kIHN1cHBvcnRzIGNsb25pbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucywgZGF0ZSBvYmplY3RzLCBtYXBzLFxuICAgICAqIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZFxuICAgICAqIGFycmF5cy4gVGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgYGFyZ3VtZW50c2Agb2JqZWN0cyBhcmUgY2xvbmVkXG4gICAgICogYXMgcGxhaW4gb2JqZWN0cy4gQW4gZW1wdHkgb2JqZWN0IGlzIHJldHVybmVkIGZvciB1bmNsb25lYWJsZSB2YWx1ZXMgc3VjaFxuICAgICAqIGFzIGVycm9yIG9iamVjdHMsIGZ1bmN0aW9ucywgRE9NIG5vZGVzLCBhbmQgV2Vha01hcHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lRGVlcFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICdhJzogMSB9LCB7ICdiJzogMiB9XTtcbiAgICAgKlxuICAgICAqIHZhciBzaGFsbG93ID0gXy5jbG9uZShvYmplY3RzKTtcbiAgICAgKiBjb25zb2xlLmxvZyhzaGFsbG93WzBdID09PSBvYmplY3RzWzBdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmUodmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGNsb25lZCB2YWx1ZS4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsXG4gICAgICogY2xvbmluZyBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB1cCB0byBmb3VyIGFyZ3VtZW50czsgKHZhbHVlIFssIGluZGV4fGtleSwgb2JqZWN0LCBzdGFja10pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lRGVlcFdpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcih2YWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNFbGVtZW50KHZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdmFsdWUuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZWwgPSBfLmNsb25lV2l0aChkb2N1bWVudC5ib2R5LCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGVsID09PSBkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqIGNvbnNvbGUubG9nKGVsLm5vZGVOYW1lKTtcbiAgICAgKiAvLyA9PiAnQk9EWSdcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5jaGlsZE5vZGVzLmxlbmd0aCk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lV2l0aCh2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfU1lNQk9MU19GTEFHLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBjbG9uZXMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmVjdXJzaXZlbHkgY2xvbmUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGRlZXAgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICdhJzogMSB9LCB7ICdiJzogMiB9XTtcbiAgICAgKlxuICAgICAqIHZhciBkZWVwID0gXy5jbG9uZURlZXAob2JqZWN0cyk7XG4gICAgICogY29uc29sZS5sb2coZGVlcFswXSA9PT0gb2JqZWN0c1swXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURlZXAodmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZVdpdGhgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVXaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIodmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzRWxlbWVudCh2YWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZWwgPSBfLmNsb25lRGVlcFdpdGgoZG9jdW1lbnQuYm9keSwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhlbCA9PT0gZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5ub2RlTmFtZSk7XG4gICAgICogLy8gPT4gJ0JPRFknXG4gICAgICogY29uc29sZS5sb2coZWwuY2hpbGROb2Rlcy5sZW5ndGgpO1xuICAgICAqIC8vID0+IDIwXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEZWVwV2l0aCh2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYG9iamVjdGAgY29uZm9ybXMgdG8gYHNvdXJjZWAgYnkgaW52b2tpbmcgdGhlIHByZWRpY2F0ZVxuICAgICAqIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgd2l0aCB0aGUgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgZXF1aXZhbGVudCB0byBgXy5jb25mb3Jtc2Agd2hlbiBgc291cmNlYCBpc1xuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTQuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgY29uZm9ybXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKlxuICAgICAqIF8uY29uZm9ybXNUbyhvYmplY3QsIHsgJ2InOiBmdW5jdGlvbihuKSB7IHJldHVybiBuID4gMTsgfSB9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmNvbmZvcm1zVG8ob2JqZWN0LCB7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDI7IH0gfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25mb3Jtc1RvKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gc291cmNlID09IG51bGwgfHwgYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIGtleXMoc291cmNlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYVxuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICAgICAqXG4gICAgICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5lcSgnYScsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5lcShOYU4sIE5hTik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5sdFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmd0KDMsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3QoMywgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZ3QoMSwgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgZ3QgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGJhc2VHdCk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0b1xuICAgICAqICBgb3RoZXJgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmx0ZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmd0ZSgzLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0ZSgzLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0ZSgxLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBndGUgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlID49IG90aGVyO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICAgICAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheSgnYWJjJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlCdWZmZXJgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXkgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUJ1ZmZlcihuZXcgQXJyYXlCdWZmZXIoMikpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUJ1ZmZlcihuZXcgQXJyYXkoMikpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQXJyYXlCdWZmZXIgPSBub2RlSXNBcnJheUJ1ZmZlciA/IGJhc2VVbmFyeShub2RlSXNBcnJheUJ1ZmZlcikgOiBiYXNlSXNBcnJheUJ1ZmZlcjtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAgICAgKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gICAgICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc0FycmF5TGlrZWAgZXhjZXB0IHRoYXQgaXQgYWxzbyBjaGVja3MgaWYgYHZhbHVlYFxuICAgICAqIGlzIGFuIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXktbGlrZSBvYmplY3QsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdCgnYWJjJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBpc0FycmF5TGlrZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGJvb2xlYW4gcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBib29sZWFuLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNCb29sZWFuKGZhbHNlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQm9vbGVhbihudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQm9vbGVhbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09PSBmYWxzZSB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBib29sVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRGF0ZWAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGRhdGUgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNEYXRlKG5ldyBEYXRlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRGF0ZSgnTW9uIEFwcmlsIDIzIDIwMTInKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0RhdGUgPSBub2RlSXNEYXRlID8gYmFzZVVuYXJ5KG5vZGVJc0RhdGUpIDogYmFzZUlzRGF0ZTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIERPTSBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIERPTSBlbGVtZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFbGVtZW50KGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbGVtZW50KCc8Ym9keT4nKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRWxlbWVudCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgdmFsdWUubm9kZVR5cGUgPT09IDEgJiYgIWlzUGxhaW5PYmplY3QodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGVtcHR5IG9iamVjdCwgY29sbGVjdGlvbiwgbWFwLCBvciBzZXQuXG4gICAgICpcbiAgICAgKiBPYmplY3RzIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBubyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWRcbiAgICAgKiBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQXJyYXktbGlrZSB2YWx1ZXMgc3VjaCBhcyBgYXJndW1lbnRzYCBvYmplY3RzLCBhcnJheXMsIGJ1ZmZlcnMsIHN0cmluZ3MsIG9yXG4gICAgICogalF1ZXJ5LWxpa2UgY29sbGVjdGlvbnMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIGEgYGxlbmd0aGAgb2YgYDBgLlxuICAgICAqIFNpbWlsYXJseSwgbWFwcyBhbmQgc2V0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgYSBgc2l6ZWAgb2YgYDBgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBlbXB0eSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KHRydWUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSgxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KHsgJ2EnOiAxIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUxpa2UodmFsdWUpICYmXG4gICAgICAgICAgKGlzQXJyYXkodmFsdWUpIHx8IHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUuc3BsaWNlID09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICAgIGlzQnVmZmVyKHZhbHVlKSB8fCBpc1R5cGVkQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSkpIHtcbiAgICAgICAgcmV0dXJuICF2YWx1ZS5sZW5ndGg7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKTtcbiAgICAgIGlmICh0YWcgPT0gbWFwVGFnIHx8IHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgcmV0dXJuICF2YWx1ZS5zaXplO1xuICAgICAgfVxuICAgICAgaWYgKGlzUHJvdG90eXBlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gIWJhc2VLZXlzKHZhbHVlKS5sZW5ndGg7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmVcbiAgICAgKiBlcXVpdmFsZW50LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIHN1cHBvcnRzIGNvbXBhcmluZyBhcnJheXMsIGFycmF5IGJ1ZmZlcnMsIGJvb2xlYW5zLFxuICAgICAqIGRhdGUgb2JqZWN0cywgZXJyb3Igb2JqZWN0cywgbWFwcywgbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcyxcbiAgICAgKiBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWQgYXJyYXlzLiBgT2JqZWN0YCBvYmplY3RzIGFyZSBjb21wYXJlZFxuICAgICAqIGJ5IHRoZWlyIG93biwgbm90IGluaGVyaXRlZCwgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLiBGdW5jdGlvbnMgYW5kIERPTVxuICAgICAqIG5vZGVzIGFyZSBjb21wYXJlZCBieSBzdHJpY3QgZXF1YWxpdHksIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICAgICAqXG4gICAgICogXy5pc0VxdWFsKG9iamVjdCwgb3RoZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIG9iamVjdCA9PT0gb3RoZXI7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VxdWFsKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc0VxdWFsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBjb21wYXJpc29uc1xuICAgICAqIGFyZSBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggdXAgdG9cbiAgICAgKiBzaXggYXJndW1lbnRzOiAob2JqVmFsdWUsIG90aFZhbHVlIFssIGluZGV4fGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2tdKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGlzR3JlZXRpbmcodmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiAvXmgoPzppfGVsbG8pJC8udGVzdCh2YWx1ZSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUpIHtcbiAgICAgKiAgIGlmIChpc0dyZWV0aW5nKG9ialZhbHVlKSAmJiBpc0dyZWV0aW5nKG90aFZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2hlbGxvJywgJ2dvb2RieWUnXTtcbiAgICAgKiB2YXIgb3RoZXIgPSBbJ2hpJywgJ2dvb2RieWUnXTtcbiAgICAgKlxuICAgICAqIF8uaXNFcXVhbFdpdGgoYXJyYXksIG90aGVyLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcXVhbFdpdGgodmFsdWUsIG90aGVyLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplciA/IGN1c3RvbWl6ZXIodmFsdWUsIG90aGVyKSA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgdW5kZWZpbmVkLCBjdXN0b21pemVyKSA6ICEhcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGBFcnJvcmAsIGBFdmFsRXJyb3JgLCBgUmFuZ2VFcnJvcmAsIGBSZWZlcmVuY2VFcnJvcmAsXG4gICAgICogYFN5bnRheEVycm9yYCwgYFR5cGVFcnJvcmAsIG9yIGBVUklFcnJvcmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBlcnJvciBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Vycm9yKG5ldyBFcnJvcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Vycm9yKEVycm9yKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXJyb3IodmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gICAgICByZXR1cm4gdGFnID09IGVycm9yVGFnIHx8IHRhZyA9PSBkb21FeGNUYWcgfHxcbiAgICAgICAgKHR5cGVvZiB2YWx1ZS5tZXNzYWdlID09ICdzdHJpbmcnICYmIHR5cGVvZiB2YWx1ZS5uYW1lID09ICdzdHJpbmcnICYmICFpc1BsYWluT2JqZWN0KHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBmaW5pdGUgcHJpbWl0aXZlIG51bWJlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzRmluaXRlYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzRmluaXRlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmaW5pdGUgbnVtYmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZShOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZSgnMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGaW5pdGUodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgbmF0aXZlSXNGaW5pdGUodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRnVuY3Rpb24oXyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAgICAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gICAgICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gICAgICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc0ludGVnZXJgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNJbnRlZ2VyKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gaW50ZWdlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcigzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIHZhbHVlID09IHRvSW50ZWdlcih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gICAgICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aCgzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aCgnMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICAgICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICAgICAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAgICAgKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KHt9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChfLm5vb3ApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICAgICAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2Uoe30pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYE1hcGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTWFwKG5ldyBNYXApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNNYXAobmV3IFdlYWtNYXApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzTWFwID0gbm9kZUlzTWFwID8gYmFzZVVuYXJ5KG5vZGVJc01hcCkgOiBiYXNlSXNNYXA7XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gYG9iamVjdGAgYW5kIGBzb3VyY2VgIHRvXG4gICAgICogZGV0ZXJtaW5lIGlmIGBvYmplY3RgIGNvbnRhaW5zIGVxdWl2YWxlbnQgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGVxdWl2YWxlbnQgdG8gYF8ubWF0Y2hlc2Agd2hlbiBgc291cmNlYCBpc1xuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3QgYHNvdXJjZWBcbiAgICAgKiB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZSBgXy5pc0VxdWFsYFxuICAgICAqIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICpcbiAgICAgKiBfLmlzTWF0Y2gob2JqZWN0LCB7ICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTWF0Y2gob2JqZWN0LCB7ICdiJzogMSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWF0Y2gob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgZ2V0TWF0Y2hEYXRhKHNvdXJjZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNNYXRjaGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgY29tcGFyaXNvbnNcbiAgICAgKiBhcmUgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIGZpdmVcbiAgICAgKiBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGluZGV4fGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGlzR3JlZXRpbmcodmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiAvXmgoPzppfGVsbG8pJC8udGVzdCh2YWx1ZSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIGlmIChpc0dyZWV0aW5nKG9ialZhbHVlKSAmJiBpc0dyZWV0aW5nKHNyY1ZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnZ3JlZXRpbmcnOiAnaGVsbG8nIH07XG4gICAgICogdmFyIHNvdXJjZSA9IHsgJ2dyZWV0aW5nJzogJ2hpJyB9O1xuICAgICAqXG4gICAgICogXy5pc01hdGNoV2l0aChvYmplY3QsIHNvdXJjZSwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWF0Y2hXaXRoKG9iamVjdCwgc291cmNlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIGdldE1hdGNoRGF0YShzb3VyY2UpLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgTmFOYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzTmFOYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzTmFOKSBhbmQgaXMgbm90IHRoZSBzYW1lIGFzXG4gICAgICogZ2xvYmFsIFtgaXNOYU5gXShodHRwczovL21kbi5pby9pc05hTikgd2hpY2ggcmV0dXJucyBgdHJ1ZWAgZm9yXG4gICAgICogYHVuZGVmaW5lZGAgYW5kIG90aGVyIG5vbi1udW1iZXIgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKE5hTik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05hTihuZXcgTnVtYmVyKE5hTikpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGlzTmFOKHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05hTih1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOYU4odmFsdWUpIHtcbiAgICAgIC8vIEFuIGBOYU5gIHByaW1pdGl2ZSBpcyB0aGUgb25seSB2YWx1ZSB0aGF0IGlzIG5vdCBlcXVhbCB0byBpdHNlbGYuXG4gICAgICAvLyBQZXJmb3JtIHRoZSBgdG9TdHJpbmdUYWdgIGNoZWNrIGZpcnN0IHRvIGF2b2lkIGVycm9ycyB3aXRoIHNvbWVcbiAgICAgIC8vIEFjdGl2ZVggb2JqZWN0cyBpbiBJRS5cbiAgICAgIHJldHVybiBpc051bWJlcih2YWx1ZSkgJiYgdmFsdWUgIT0gK3ZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJpc3RpbmUgbmF0aXZlIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGNhbid0IHJlbGlhYmx5IGRldGVjdCBuYXRpdmUgZnVuY3Rpb25zIGluIHRoZSBwcmVzZW5jZVxuICAgICAqIG9mIHRoZSBjb3JlLWpzIHBhY2thZ2UgYmVjYXVzZSBjb3JlLWpzIGNpcmN1bXZlbnRzIHRoaXMga2luZCBvZiBkZXRlY3Rpb24uXG4gICAgICogRGVzcGl0ZSBtdWx0aXBsZSByZXF1ZXN0cywgdGhlIGNvcmUtanMgbWFpbnRhaW5lciBoYXMgbWFkZSBpdCBjbGVhcjogYW55XG4gICAgICogYXR0ZW1wdCB0byBmaXggdGhlIGRldGVjdGlvbiB3aWxsIGJlIG9ic3RydWN0ZWQuIEFzIGEgcmVzdWx0LCB3ZSdyZSBsZWZ0XG4gICAgICogd2l0aCBsaXR0bGUgY2hvaWNlIGJ1dCB0byB0aHJvdyBhbiBlcnJvci4gVW5mb3J0dW5hdGVseSwgdGhpcyBhbHNvIGFmZmVjdHNcbiAgICAgKiBwYWNrYWdlcywgbGlrZSBbYmFiZWwtcG9seWZpbGxdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2JhYmVsLXBvbHlmaWxsKSxcbiAgICAgKiB3aGljaCByZWx5IG9uIGNvcmUtanMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOYXRpdmUoQXJyYXkucHJvdG90eXBlLnB1c2gpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYXRpdmUoXyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc05hdGl2ZSh2YWx1ZSkge1xuICAgICAgaWYgKGlzTWFza2FibGUodmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihDT1JFX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYG51bGxgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgbnVsbGAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc051bGwobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bGwodm9pZCAwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTnVsbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBudWxsYCBvciBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbnVsbGlzaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmlsKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwodm9pZCAwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmlsKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc05pbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBOdW1iZXJgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVG8gZXhjbHVkZSBgSW5maW5pdHlgLCBgLUluZmluaXR5YCwgYW5kIGBOYU5gLCB3aGljaCBhcmVcbiAgICAgKiBjbGFzc2lmaWVkIGFzIG51bWJlcnMsIHVzZSB0aGUgYF8uaXNGaW5pdGVgIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBudW1iZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcigzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInIHx8XG4gICAgICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IG51bWJlclRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICAgICAqIGBPYmplY3RgIGNvbnN0cnVjdG9yIG9yIG9uZSB3aXRoIGEgYFtbUHJvdG90eXBlXV1gIG9mIGBudWxsYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjguMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSB8fCBiYXNlR2V0VGFnKHZhbHVlKSAhPSBvYmplY3RUYWcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlKHZhbHVlKTtcbiAgICAgIGlmIChwcm90byA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBDdG9yID0gaGFzT3duUHJvcGVydHkuY2FsbChwcm90bywgJ2NvbnN0cnVjdG9yJykgJiYgcHJvdG8uY29uc3RydWN0b3I7XG4gICAgICByZXR1cm4gdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJlxuICAgICAgICBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgUmVnRXhwYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcmVnZXhwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNSZWdFeHAoL2FiYy8pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNSZWdFeHAoJy9hYmMvJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNSZWdFeHAgPSBub2RlSXNSZWdFeHAgPyBiYXNlVW5hcnkobm9kZUlzUmVnRXhwKSA6IGJhc2VJc1JlZ0V4cDtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgc2FmZSBpbnRlZ2VyLiBBbiBpbnRlZ2VyIGlzIHNhZmUgaWYgaXQncyBhbiBJRUVFLTc1NFxuICAgICAqIGRvdWJsZSBwcmVjaXNpb24gbnVtYmVyIHdoaWNoIGlzbid0IHRoZSByZXN1bHQgb2YgYSByb3VuZGVkIHVuc2FmZSBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNTYWZlSW50ZWdlcmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc1NhZmVJbnRlZ2VyKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzYWZlIGludGVnZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNJbnRlZ2VyKHZhbHVlKSAmJiB2YWx1ZSA+PSAtTUFYX1NBRkVfSU5URUdFUiAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU2V0YCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTZXQobmV3IFNldCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1NldChuZXcgV2Vha1NldCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNTZXQgPSBub2RlSXNTZXQgPyBiYXNlVW5hcnkobm9kZUlzU2V0KSA6IGJhc2VJc1NldDtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3RyaW5nYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN0cmluZywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU3RyaW5nKCdhYmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU3RyaW5nKDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHxcbiAgICAgICAgKCFpc0FycmF5KHZhbHVlKSAmJiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN0cmluZ1RhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNUeXBlZEFycmF5ID0gbm9kZUlzVHlwZWRBcnJheSA/IGJhc2VVbmFyeShub2RlSXNUeXBlZEFycmF5KSA6IGJhc2VJc1R5cGVkQXJyYXk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1VuZGVmaW5lZCh2b2lkIDApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNVbmRlZmluZWQobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBXZWFrTWFwYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgd2VhayBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtNYXAobmV3IFdlYWtNYXApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrTWFwKG5ldyBNYXApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNXZWFrTWFwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IHdlYWtNYXBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBXZWFrU2V0YCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgd2VhayBzZXQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtTZXQobmV3IFdlYWtTZXQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrU2V0KG5ldyBTZXQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNXZWFrU2V0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSB3ZWFrU2V0VGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8uZ3RcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sdCgxLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0KDMsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmx0KDMsIDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGx0ID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihiYXNlTHQpO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG9cbiAgICAgKiAgYG90aGVyYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5ndGVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sdGUoMSwgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdGUoMywgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdGUoMywgMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgbHRlID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA8PSBvdGhlcjtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9BcnJheSh7ICdhJzogMSwgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy50b0FycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKlxuICAgICAqIF8udG9BcnJheSgxKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogXy50b0FycmF5KG51bGwpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9BcnJheSh2YWx1ZSkge1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUxpa2UodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBpc1N0cmluZyh2YWx1ZSkgPyBzdHJpbmdUb0FycmF5KHZhbHVlKSA6IGNvcHlBcnJheSh2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoc3ltSXRlcmF0b3IgJiYgdmFsdWVbc3ltSXRlcmF0b3JdKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvclRvQXJyYXkodmFsdWVbc3ltSXRlcmF0b3JdKCkpO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgZnVuYyA9IHRhZyA9PSBtYXBUYWcgPyBtYXBUb0FycmF5IDogKHRhZyA9PSBzZXRUYWcgPyBzZXRUb0FycmF5IDogdmFsdWVzKTtcblxuICAgICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBmaW5pdGUgbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTIuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKDMuMik7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDVlLTMyNFxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZShJbmZpbml0eSk7XG4gICAgICogLy8gPT4gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDhcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoJzMuMicpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvRmluaXRlKHZhbHVlKSB7XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogMDtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpO1xuICAgICAgaWYgKHZhbHVlID09PSBJTkZJTklUWSB8fCB2YWx1ZSA9PT0gLUlORklOSVRZKSB7XG4gICAgICAgIHZhciBzaWduID0gKHZhbHVlIDwgMCA/IC0xIDogMSk7XG4gICAgICAgIHJldHVybiBzaWduICogTUFYX0lOVEVHRVI7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gdmFsdWUgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gICAgICogW2BUb0ludGVnZXJgXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9pbnRlZ2VyKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDhcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9JbnRlZ2VyKHZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdG9GaW5pdGUodmFsdWUpLFxuICAgICAgICAgIHJlbWFpbmRlciA9IHJlc3VsdCAlIDE7XG5cbiAgICAgIHJldHVybiByZXN1bHQgPT09IHJlc3VsdCA/IChyZW1haW5kZXIgPyByZXN1bHQgLSByZW1haW5kZXIgOiByZXN1bHQpIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGludGVnZXIgc3VpdGFibGUgZm9yIHVzZSBhcyB0aGUgbGVuZ3RoIG9mIGFuXG4gICAgICogYXJyYXktbGlrZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiA0Mjk0OTY3Mjk1XG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKCczLjInKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9MZW5ndGgodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA/IGJhc2VDbGFtcCh0b0ludGVnZXIodmFsdWUpLCAwLCBNQVhfQVJSQVlfTEVOR1RIKSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoMy4yKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gNWUtMzI0XG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBJbmZpbml0eVxuICAgICAqXG4gICAgICogXy50b051bWJlcignMy4yJyk7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gTkFOO1xuICAgICAgfVxuICAgICAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICB2YXIgb3RoZXIgPSB0eXBlb2YgdmFsdWUudmFsdWVPZiA9PSAnZnVuY3Rpb24nID8gdmFsdWUudmFsdWVPZigpIDogdmFsdWU7XG4gICAgICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKHJlVHJpbSwgJycpO1xuICAgICAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgICAgIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgICAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICAgICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHBsYWluIG9iamVjdCBmbGF0dGVuaW5nIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZ1xuICAgICAqIGtleWVkIHByb3BlcnRpZXMgb2YgYHZhbHVlYCB0byBvd24gcHJvcGVydGllcyBvZiB0aGUgcGxhaW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBwbGFpbiBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIG5ldyBGb28pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgXy50b1BsYWluT2JqZWN0KG5ldyBGb28pKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHZhbHVlLCBrZXlzSW4odmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc2FmZSBpbnRlZ2VyLiBBIHNhZmUgaW50ZWdlciBjYW4gYmUgY29tcGFyZWQgYW5kXG4gICAgICogcmVwcmVzZW50ZWQgY29ycmVjdGx5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiA5MDA3MTk5MjU0NzQwOTkxXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1NhZmVJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgPyBiYXNlQ2xhbXAodG9JbnRlZ2VyKHZhbHVlKSwgLU1BWF9TQUZFX0lOVEVHRVIsIE1BWF9TQUZFX0lOVEVHRVIpXG4gICAgICAgIDogKHZhbHVlID09PSAwID8gdmFsdWUgOiAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICAgICAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcobnVsbCk7XG4gICAgICogLy8gPT4gJydcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcoLTApO1xuICAgICAqIC8vID0+ICctMCdcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAnMSwyLDMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgdG8gdGhlXG4gICAgICogZGVzdGluYXRpb24gb2JqZWN0LiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gICAgICogU3Vic2VxdWVudCBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAgYW5kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYE9iamVjdC5hc3NpZ25gXShodHRwczovL21kbi5pby9PYmplY3QvYXNzaWduKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbkluXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQmFyKCkge1xuICAgICAqICAgdGhpcy5jID0gMztcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmIgPSAyO1xuICAgICAqIEJhci5wcm90b3R5cGUuZCA9IDQ7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMCB9LCBuZXcgRm9vLCBuZXcgQmFyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIGlmIChpc1Byb3RvdHlwZShzb3VyY2UpIHx8IGlzQXJyYXlMaWtlKHNvdXJjZSkpIHtcbiAgICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBvd24gYW5kXG4gICAgICogaW5oZXJpdGVkIHNvdXJjZSBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZXh0ZW5kXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBCYXIoKSB7XG4gICAgICogICB0aGlzLmMgPSAzO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYiA9IDI7XG4gICAgICogQmFyLnByb3RvdHlwZS5kID0gNDtcbiAgICAgKlxuICAgICAqIF8uYXNzaWduSW4oeyAnYSc6IDAgfSwgbmV3IEZvbywgbmV3IEJhcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzLCAnZCc6IDQgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25JbiA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbkluYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgYXNzaWduZWQgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJuc1xuICAgICAqIGB1bmRlZmluZWRgLCBhc3NpZ25tZW50IGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIGZpdmUgYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGV4dGVuZFdpdGhcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgcmV0dXJuIF8uaXNVbmRlZmluZWQob2JqVmFsdWUpID8gc3JjVmFsdWUgOiBvYmpWYWx1ZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZGVmYXVsdHMgPSBfLnBhcnRpYWxSaWdodChfLmFzc2lnbkluV2l0aCwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBkZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduSW5XaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGFzc2lnbmVkIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnNcbiAgICAgKiBgdW5kZWZpbmVkYCwgYXNzaWdubWVudCBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBmaXZlIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25JbldpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiBfLmlzVW5kZWZpbmVkKG9ialZhbHVlKSA/IHNyY1ZhbHVlIDogb2JqVmFsdWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGRlZmF1bHRzID0gXy5wYXJ0aWFsUmlnaHQoXy5hc3NpZ25XaXRoLCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25XaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byBgcGF0aHNgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHBpY2tlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH0sIDRdIH07XG4gICAgICpcbiAgICAgKiBfLmF0KG9iamVjdCwgWydhWzBdLmIuYycsICdhWzFdJ10pO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqL1xuICAgIHZhciBhdCA9IGZsYXRSZXN0KGJhc2VBdCk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gdGhlIGBwcm90b3R5cGVgIG9iamVjdC4gSWYgYVxuICAgICAqIGBwcm9wZXJ0aWVzYCBvYmplY3QgaXMgZ2l2ZW4sIGl0cyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllc1xuICAgICAqIGFyZSBhc3NpZ25lZCB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvdHlwZSBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXNdIFRoZSBwcm9wZXJ0aWVzIHRvIGFzc2lnbiB0byB0aGUgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIFNoYXBlKCkge1xuICAgICAqICAgdGhpcy54ID0gMDtcbiAgICAgKiAgIHRoaXMueSA9IDA7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQ2lyY2xlKCkge1xuICAgICAqICAgU2hhcGUuY2FsbCh0aGlzKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBDaXJjbGUucHJvdG90eXBlID0gXy5jcmVhdGUoU2hhcGUucHJvdG90eXBlLCB7XG4gICAgICogICAnY29uc3RydWN0b3InOiBDaXJjbGVcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHZhciBjaXJjbGUgPSBuZXcgQ2lyY2xlO1xuICAgICAqIGNpcmNsZSBpbnN0YW5jZW9mIENpcmNsZTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjaXJjbGUgaW5zdGFuY2VvZiBTaGFwZTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHByb3RvdHlwZSwgcHJvcGVydGllcykge1xuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VDcmVhdGUocHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBwcm9wZXJ0aWVzID09IG51bGwgPyByZXN1bHQgOiBiYXNlQXNzaWduKHJlc3VsdCwgcHJvcGVydGllcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZVxuICAgICAqIG9iamVjdHMgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBmb3IgYWxsIGRlc3RpbmF0aW9uIHByb3BlcnRpZXMgdGhhdFxuICAgICAqIHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC5cbiAgICAgKiBPbmNlIGEgcHJvcGVydHkgaXMgc2V0LCBhZGRpdGlvbmFsIHZhbHVlcyBvZiB0aGUgc2FtZSBwcm9wZXJ0eSBhcmUgaWdub3JlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5kZWZhdWx0c0RlZXBcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgZGVmYXVsdHMgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgIHZhciBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aDtcbiAgICAgIHZhciBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc291cmNlc1swXSwgc291cmNlc1sxXSwgZ3VhcmQpKSB7XG4gICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgICAgdmFyIHByb3BzID0ga2V5c0luKHNvdXJjZSk7XG4gICAgICAgIHZhciBwcm9wc0luZGV4ID0gLTE7XG4gICAgICAgIHZhciBwcm9wc0xlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoKytwcm9wc0luZGV4IDwgcHJvcHNMZW5ndGgpIHtcbiAgICAgICAgICB2YXIga2V5ID0gcHJvcHNbcHJvcHNJbmRleF07XG4gICAgICAgICAgdmFyIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAoZXEodmFsdWUsIG9iamVjdFByb3RvW2tleV0pICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgICAgIG9iamVjdFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRlZmF1bHRzYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBhc3NpZ25zXG4gICAgICogZGVmYXVsdCBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5kZWZhdWx0c1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRzRGVlcCh7ICdhJzogeyAnYic6IDIgfSB9LCB7ICdhJzogeyAnYic6IDEsICdjJzogMyB9IH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdiJzogMiwgJ2MnOiAzIH0gfVxuICAgICAqL1xuICAgIHZhciBkZWZhdWx0c0RlZXAgPSBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICBhcmdzLnB1c2godW5kZWZpbmVkLCBjdXN0b21EZWZhdWx0c01lcmdlKTtcbiAgICAgIHJldHVybiBhcHBseShtZXJnZVdpdGgsIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGtleSBvZiB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IFJldHVybnMgdGhlIGtleSBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50LFxuICAgICAqICBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnYmFybmV5JzogIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgJ2ZyZWQnOiAgICB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uZmluZEtleSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gICAgICogLy8gPT4gJ2Jhcm5leScgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAncGViYmxlcydcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+ICdiYXJuZXknXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIGJhc2VGaW5kS2V5KG9iamVjdCwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgYmFzZUZvck93bik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kS2V5YCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYSBjb2xsZWN0aW9uIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IFJldHVybnMgdGhlIGtleSBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50LFxuICAgICAqICBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnYmFybmV5JzogIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgJ2ZyZWQnOiAgICB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+IHJldHVybnMgJ3BlYmJsZXMnIGFzc3VtaW5nIGBfLmZpbmRLZXlgIHJldHVybnMgJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+ICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+ICdwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRMYXN0S2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gYmFzZUZpbmRLZXkob2JqZWN0LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBiYXNlRm9yT3duUmlnaHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBhblxuICAgICAqIG9iamVjdCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS4gSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0XG4gICAgICogaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JJblJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvckluKG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScsICdiJywgdGhlbiAnYycgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9ySW4ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsXG4gICAgICAgID8gb2JqZWN0XG4gICAgICAgIDogYmFzZUZvcihvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvckluYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXMgb2ZcbiAgICAgKiBgb2JqZWN0YCBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JJblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JJblJpZ2h0KG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYycsICdiJywgdGhlbiAnYScgYXNzdW1pbmcgYF8uZm9ySW5gIGxvZ3MgJ2EnLCAnYicsIHRoZW4gJ2MnLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckluUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsXG4gICAgICAgID8gb2JqZWN0XG4gICAgICAgIDogYmFzZUZvclJpZ2h0KG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpLCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IGFuZFxuICAgICAqIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb25cbiAgICAgKiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9yT3duUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9yT3duKG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvck93bihvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JPd25gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllcyBvZlxuICAgICAqIGBvYmplY3RgIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvck93blxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JPd25SaWdodChuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2InIHRoZW4gJ2EnIGFzc3VtaW5nIGBfLmZvck93bmAgbG9ncyAnYScgdGhlbiAnYicuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yT3duUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yT3duUmlnaHQob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZnJvbSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzXG4gICAgICogb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKiBAc2VlIF8uZnVuY3Rpb25zSW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gXy5jb25zdGFudCgnYScpO1xuICAgICAqICAgdGhpcy5iID0gXy5jb25zdGFudCgnYicpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IF8uY29uc3RhbnQoJ2MnKTtcbiAgICAgKlxuICAgICAqIF8uZnVuY3Rpb25zKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmdW5jdGlvbnMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VGdW5jdGlvbnMob2JqZWN0LCBrZXlzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZnJvbSBvd24gYW5kIGluaGVyaXRlZFxuICAgICAqIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqIEBzZWUgXy5mdW5jdGlvbnNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gXy5jb25zdGFudCgnYScpO1xuICAgICAqICAgdGhpcy5iID0gXy5jb25zdGFudCgnYicpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IF8uY29uc3RhbnQoJ2MnKTtcbiAgICAgKlxuICAgICAqIF8uZnVuY3Rpb25zSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnVuY3Rpb25zSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VGdW5jdGlvbnMob2JqZWN0LCBrZXlzSW4ob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXNcbiAgICAgKiBgdW5kZWZpbmVkYCwgdGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGluIGl0cyBwbGFjZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCAnYS5iLmMnLCAnZGVmYXVsdCcpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZhbHVlIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3QgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogeyAnYic6IDIgfSB9O1xuICAgICAqIHZhciBvdGhlciA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsICdhLmInKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG90aGVyLCAnYScpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzKG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYS5iJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzSW4ob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIGludmVydGVkIGtleXMgYW5kIHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKiBJZiBgb2JqZWN0YCBjb250YWlucyBkdXBsaWNhdGUgdmFsdWVzLCBzdWJzZXF1ZW50IHZhbHVlcyBvdmVyd3JpdGVcbiAgICAgKiBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludmVydC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmludmVydChvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzEnOiAnYycsICcyJzogJ2InIH1cbiAgICAgKi9cbiAgICB2YXIgaW52ZXJ0ID0gY3JlYXRlSW52ZXJ0ZXIoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJlxuICAgICAgICAgIHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbHVlID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdFt2YWx1ZV0gPSBrZXk7XG4gICAgfSwgY29uc3RhbnQoaWRlbnRpdHkpKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW52ZXJ0YCBleGNlcHQgdGhhdCB0aGUgaW52ZXJ0ZWQgb2JqZWN0IGlzIGdlbmVyYXRlZFxuICAgICAqIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZyBlYWNoIGVsZW1lbnQgb2YgYG9iamVjdGAgdGhydSBgaXRlcmF0ZWVgLiBUaGVcbiAgICAgKiBjb3JyZXNwb25kaW5nIGludmVydGVkIHZhbHVlIG9mIGVhY2ggaW52ZXJ0ZWQga2V5IGlzIGFuIGFycmF5IG9mIGtleXNcbiAgICAgKiByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGUgaW52ZXJ0ZWQgdmFsdWUuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludmVydC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9O1xuICAgICAqXG4gICAgICogXy5pbnZlcnRCeShvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH1cbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0Qnkob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuICdncm91cCcgKyB2YWx1ZTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdncm91cDEnOiBbJ2EnLCAnYyddLCAnZ3JvdXAyJzogWydiJ10gfVxuICAgICAqL1xuICAgIHZhciBpbnZlcnRCeSA9IGNyZWF0ZUludmVydGVyKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiZcbiAgICAgICAgICB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIHZhbHVlKSkge1xuICAgICAgICByZXN1bHRbdmFsdWVdLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdFt2YWx1ZV0gPSBba2V5XTtcbiAgICAgIH1cbiAgICB9LCBnZXRJdGVyYXRlZSk7XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBtZXRob2QgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogWzEsIDIsIDMsIDRdIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uaW52b2tlKG9iamVjdCwgJ2FbMF0uYi5jLnNsaWNlJywgMSwgMyk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICovXG4gICAgdmFyIGludm9rZSA9IGJhc2VSZXN0KGJhc2VJbnZva2UpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICAgICAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5rZXlzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIF8ua2V5cygnaGknKTtcbiAgICAgKiAvLyA9PiBbJzAnLCAnMSddXG4gICAgICovXG4gICAgZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmtleXNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBrZXlzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0LCB0cnVlKSA6IGJhc2VLZXlzSW4ob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ubWFwVmFsdWVzYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3Qgd2l0aCB0aGVcbiAgICAgKiBzYW1lIHZhbHVlcyBhcyBgb2JqZWN0YCBhbmQga2V5cyBnZW5lcmF0ZWQgYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlXG4gICAgICogc3RyaW5nIGtleWVkIHByb3BlcnR5IG9mIGBvYmplY3RgIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy44LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIG9iamVjdC5cbiAgICAgKiBAc2VlIF8ubWFwVmFsdWVzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwS2V5cyh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIHJldHVybiBrZXkgKyB2YWx1ZTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdhMSc6IDEsICdiMic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcEtleXMob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyk7XG5cbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwgaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqZWN0KSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUga2V5cyBhcyBgb2JqZWN0YCBhbmQgdmFsdWVzIGdlbmVyYXRlZFxuICAgICAqIGJ5IHJ1bm5pbmcgZWFjaCBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAgdGhydVxuICAgICAqIGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICAgICAqICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBvYmplY3QuXG4gICAgICogQHNlZSBfLm1hcEtleXNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2ZyZWQnOiAgICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLm1hcFZhbHVlcyh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2U7IH0pO1xuICAgICAqIC8vID0+IHsgJ2ZyZWQnOiA0MCwgJ3BlYmJsZXMnOiAxIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwVmFsdWVzKHVzZXJzLCAnYWdlJyk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDQwLCAncGViYmxlcyc6IDEgfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcFZhbHVlcyhvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKTtcblxuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iamVjdCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBtZXJnZXMgb3duIGFuZFxuICAgICAqIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIGludG8gdGhlXG4gICAgICogZGVzdGluYXRpb24gb2JqZWN0LiBTb3VyY2UgcHJvcGVydGllcyB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAgYXJlXG4gICAgICogc2tpcHBlZCBpZiBhIGRlc3RpbmF0aW9uIHZhbHVlIGV4aXN0cy4gQXJyYXkgYW5kIHBsYWluIG9iamVjdCBwcm9wZXJ0aWVzXG4gICAgICogYXJlIG1lcmdlZCByZWN1cnNpdmVseS4gT3RoZXIgb2JqZWN0cyBhbmQgdmFsdWUgdHlwZXMgYXJlIG92ZXJyaWRkZW4gYnlcbiAgICAgKiBhc3NpZ25tZW50LiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuIFN1YnNlcXVlbnRcbiAgICAgKiBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7XG4gICAgICogICAnYSc6IFt7ICdiJzogMiB9LCB7ICdkJzogNCB9XVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgb3RoZXIgPSB7XG4gICAgICogICAnYSc6IFt7ICdjJzogMyB9LCB7ICdlJzogNSB9XVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLm1lcmdlKG9iamVjdCwgb3RoZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IDIsICdjJzogMyB9LCB7ICdkJzogNCwgJ2UnOiA1IH1dIH1cbiAgICAgKi9cbiAgICB2YXIgbWVyZ2UgPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpIHtcbiAgICAgIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tZXJnZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG1lcmdlZCB2YWx1ZXMgb2YgdGhlIGRlc3RpbmF0aW9uIGFuZCBzb3VyY2VcbiAgICAgKiBwcm9wZXJ0aWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgbWVyZ2luZyBpcyBoYW5kbGVkIGJ5IHRoZVxuICAgICAqIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCBzaXggYXJndW1lbnRzOlxuICAgICAqIChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIG9ialZhbHVlLmNvbmNhdChzcmNWYWx1ZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbMV0sICdiJzogWzJdIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IFszXSwgJ2InOiBbNF0gfTtcbiAgICAgKlxuICAgICAqIF8ubWVyZ2VXaXRoKG9iamVjdCwgb3RoZXIsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbMSwgM10sICdiJzogWzIsIDRdIH1cbiAgICAgKi9cbiAgICB2YXIgbWVyZ2VXaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5waWNrYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlXG4gICAgICogb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBwYXRocyBvZiBgb2JqZWN0YCB0aGF0IGFyZSBub3Qgb21pdHRlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBjb25zaWRlcmFibHkgc2xvd2VyIHRoYW4gYF8ucGlja2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBvbWl0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5vbWl0KG9iamVjdCwgWydhJywgJ2MnXSk7XG4gICAgICogLy8gPT4geyAnYic6ICcyJyB9XG4gICAgICovXG4gICAgdmFyIG9taXQgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIHBhdGhzKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHZhciBpc0RlZXAgPSBmYWxzZTtcbiAgICAgIHBhdGhzID0gYXJyYXlNYXAocGF0aHMsIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICAgIGlzRGVlcCB8fCAoaXNEZWVwID0gcGF0aC5sZW5ndGggPiAxKTtcbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICB9KTtcbiAgICAgIGNvcHlPYmplY3Qob2JqZWN0LCBnZXRBbGxLZXlzSW4ob2JqZWN0KSwgcmVzdWx0KTtcbiAgICAgIGlmIChpc0RlZXApIHtcbiAgICAgICAgcmVzdWx0ID0gYmFzZUNsb25lKHJlc3VsdCwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfRkxBVF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHLCBjdXN0b21PbWl0Q2xvbmUpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IHBhdGhzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBiYXNlVW5zZXQocmVzdWx0LCBwYXRoc1tsZW5ndGhdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucGlja0J5YDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2ZcbiAgICAgKiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBgb2JqZWN0YCB0aGF0XG4gICAgICogYHByZWRpY2F0ZWAgZG9lc24ndCByZXR1cm4gdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdHdvXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGtleSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ub21pdEJ5KG9iamVjdCwgXy5pc051bWJlcik7XG4gICAgICogLy8gPT4geyAnYic6ICcyJyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gb21pdEJ5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gcGlja0J5KG9iamVjdCwgbmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgcGlja2VkIGBvYmplY3RgIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5waWNrKG9iamVjdCwgWydhJywgJ2MnXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgdmFyIHBpY2sgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIHBhdGhzKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB7fSA6IGJhc2VQaWNrKG9iamVjdCwgcGF0aHMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIGBvYmplY3RgIHByb3BlcnRpZXMgYHByZWRpY2F0ZWAgcmV0dXJuc1xuICAgICAqIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6ICh2YWx1ZSwga2V5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5waWNrQnkob2JqZWN0LCBfLmlzTnVtYmVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwaWNrQnkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgICB2YXIgcHJvcHMgPSBhcnJheU1hcChnZXRBbGxLZXlzSW4ob2JqZWN0KSwgZnVuY3Rpb24ocHJvcCkge1xuICAgICAgICByZXR1cm4gW3Byb3BdO1xuICAgICAgfSk7XG4gICAgICBwcmVkaWNhdGUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUpO1xuICAgICAgcmV0dXJuIGJhc2VQaWNrQnkob2JqZWN0LCBwcm9wcywgZnVuY3Rpb24odmFsdWUsIHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIHByZWRpY2F0ZSh2YWx1ZSwgcGF0aFswXSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmdldGAgZXhjZXB0IHRoYXQgaWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzIGFcbiAgICAgKiBmdW5jdGlvbiBpdCdzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgaXRzIHBhcmVudCBvYmplY3QgYW5kXG4gICAgICogaXRzIHJlc3VsdCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHJlc29sdmUuXG4gICAgICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjMSc6IDMsICdjMic6IF8uY29uc3RhbnQoNCkgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMxJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMyJyk7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMzJywgJ2RlZmF1bHQnKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMycsIF8uY29uc3RhbnQoJ2RlZmF1bHQnKSk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzdWx0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgICAgIC8vIEVuc3VyZSB0aGUgbG9vcCBpcyBlbnRlcmVkIHdoZW4gcGF0aCBpcyBlbXB0eS5cbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICAgIG9iamVjdCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXhdKV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG4gICAgICAgICAgdmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZS5jYWxsKG9iamVjdCkgOiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiBhIHBvcnRpb24gb2YgYHBhdGhgIGRvZXNuJ3QgZXhpc3QsXG4gICAgICogaXQncyBjcmVhdGVkLiBBcnJheXMgYXJlIGNyZWF0ZWQgZm9yIG1pc3NpbmcgaW5kZXggcHJvcGVydGllcyB3aGlsZSBvYmplY3RzXG4gICAgICogYXJlIGNyZWF0ZWQgZm9yIGFsbCBvdGhlciBtaXNzaW5nIHByb3BlcnRpZXMuIFVzZSBgXy5zZXRXaXRoYCB0byBjdXN0b21pemVcbiAgICAgKiBgcGF0aGAgY3JlYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnNldChvYmplY3QsICdhWzBdLmIuYycsIDQpO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC5hWzBdLmIuYyk7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5zZXQob2JqZWN0LCBbJ3gnLCAnMCcsICd5JywgJ3onXSwgNSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LnhbMF0ueS56KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0KG9iamVjdCwgcGF0aCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zZXRgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBwcm9kdWNlIHRoZSBvYmplY3RzIG9mIGBwYXRoYC4gIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgXG4gICAgICogcGF0aCBjcmVhdGlvbiBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6IChuc1ZhbHVlLCBrZXksIG5zT2JqZWN0KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7fTtcbiAgICAgKlxuICAgICAqIF8uc2V0V2l0aChvYmplY3QsICdbMF1bMV0nLCAnYScsIE9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMCc6IHsgJzEnOiAnYScgfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0V2l0aChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkLXZhbHVlIHBhaXJzIGZvciBgb2JqZWN0YFxuICAgICAqIHdoaWNoIGNhbiBiZSBjb25zdW1lZCBieSBgXy5mcm9tUGFpcnNgLiBJZiBgb2JqZWN0YCBpcyBhIG1hcCBvciBzZXQsIGl0c1xuICAgICAqIGVudHJpZXMgYXJlIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGVudHJpZXNcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy50b1BhaXJzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxXSwgWydiJywgMl1dIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgdmFyIHRvUGFpcnMgPSBjcmVhdGVUb1BhaXJzKGtleXMpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZC12YWx1ZSBwYWlyc1xuICAgICAqIGZvciBgb2JqZWN0YCB3aGljaCBjYW4gYmUgY29uc3VtZWQgYnkgYF8uZnJvbVBhaXJzYC4gSWYgYG9iamVjdGAgaXMgYSBtYXBcbiAgICAgKiBvciBzZXQsIGl0cyBlbnRyaWVzIGFyZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBlbnRyaWVzSW5cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy50b1BhaXJzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gW1snYScsIDFdLCBbJ2InLCAyXSwgWydjJywgM11dIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgdmFyIHRvUGFpcnNJbiA9IGNyZWF0ZVRvUGFpcnMoa2V5c0luKTtcblxuICAgIC8qKlxuICAgICAqIEFuIGFsdGVybmF0aXZlIHRvIGBfLnJlZHVjZWA7IHRoaXMgbWV0aG9kIHRyYW5zZm9ybXMgYG9iamVjdGAgdG8gYSBuZXdcbiAgICAgKiBgYWNjdW11bGF0b3JgIG9iamVjdCB3aGljaCBpcyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgZWFjaCBvZiBpdHMgb3duXG4gICAgICogZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyB0aHJ1IGBpdGVyYXRlZWAsIHdpdGggZWFjaCBpbnZvY2F0aW9uXG4gICAgICogcG90ZW50aWFsbHkgbXV0YXRpbmcgdGhlIGBhY2N1bXVsYXRvcmAgb2JqZWN0LiBJZiBgYWNjdW11bGF0b3JgIGlzIG5vdFxuICAgICAqIHByb3ZpZGVkLCBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgc2FtZSBgW1tQcm90b3R5cGVdXWAgd2lsbCBiZSB1c2VkLiBUaGVcbiAgICAgKiBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM6IChhY2N1bXVsYXRvciwgdmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGN1c3RvbSBhY2N1bXVsYXRvciB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJhbnNmb3JtKFsyLCAzLCA0XSwgZnVuY3Rpb24ocmVzdWx0LCBuKSB7XG4gICAgICogICByZXN1bHQucHVzaChuICo9IG4pO1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfSwgW10pO1xuICAgICAqIC8vID0+IFs0LCA5XVxuICAgICAqXG4gICAgICogXy50cmFuc2Zvcm0oeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH0sIGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAqICAgKHJlc3VsdFt2YWx1ZV0gfHwgKHJlc3VsdFt2YWx1ZV0gPSBbXSkpLnB1c2goa2V5KTtcbiAgICAgKiB9LCB7fSk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybShvYmplY3QsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgICAgIGlzQXJyTGlrZSA9IGlzQXJyIHx8IGlzQnVmZmVyKG9iamVjdCkgfHwgaXNUeXBlZEFycmF5KG9iamVjdCk7XG5cbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpO1xuICAgICAgaWYgKGFjY3VtdWxhdG9yID09IG51bGwpIHtcbiAgICAgICAgdmFyIEN0b3IgPSBvYmplY3QgJiYgb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgICAgICBpZiAoaXNBcnJMaWtlKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBpc0FyciA/IG5ldyBDdG9yIDogW107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0gaXNGdW5jdGlvbihDdG9yKSA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpIDoge307XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgKGlzQXJyTGlrZSA/IGFycmF5RWFjaCA6IGJhc2VGb3JPd24pKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIG9iamVjdCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBwcm9wZXJ0eSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byB1bnNldC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHByb3BlcnR5IGlzIGRlbGV0ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiA3IH0gfV0gfTtcbiAgICAgKiBfLnVuc2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiB7fSB9XSB9O1xuICAgICAqXG4gICAgICogXy51bnNldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IHt9IH1dIH07XG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5zZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB0cnVlIDogYmFzZVVuc2V0KG9iamVjdCwgcGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zZXRgIGV4Y2VwdCB0aGF0IGFjY2VwdHMgYHVwZGF0ZXJgIHRvIHByb2R1Y2UgdGhlXG4gICAgICogdmFsdWUgdG8gc2V0LiBVc2UgYF8udXBkYXRlV2l0aGAgdG8gY3VzdG9taXplIGBwYXRoYCBjcmVhdGlvbi4gVGhlIGB1cGRhdGVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy51cGRhdGUob2JqZWN0LCAnYVswXS5iLmMnLCBmdW5jdGlvbihuKSB7IHJldHVybiBuICogbjsgfSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LmFbMF0uYi5jKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZShvYmplY3QsICd4WzBdLnkueicsIGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPyBuICsgMSA6IDA7IH0pO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC54WzBdLnkueik7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZShvYmplY3QsIHBhdGgsIHVwZGF0ZXIpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCBjYXN0RnVuY3Rpb24odXBkYXRlcikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udXBkYXRlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgb2JqZWN0cyBvZiBgcGF0aGAuICBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYFxuICAgICAqIHBhdGggY3JlYXRpb24gaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAobnNWYWx1ZSwga2V5LCBuc09iamVjdCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHt9O1xuICAgICAqXG4gICAgICogXy51cGRhdGVXaXRoKG9iamVjdCwgJ1swXVsxXScsIF8uY29uc3RhbnQoJ2EnKSwgT2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcwJzogeyAnMSc6ICdhJyB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGVXaXRoKG9iamVjdCwgcGF0aCwgdXBkYXRlciwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIGNhc3RGdW5jdGlvbih1cGRhdGVyKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5IHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udmFsdWVzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsxLCAyXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogXy52YWx1ZXMoJ2hpJyk7XG4gICAgICogLy8gPT4gWydoJywgJ2knXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbHVlcyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZVZhbHVlcyhvYmplY3QsIGtleXMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHlcbiAgICAgKiB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnZhbHVlc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbHVlc0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlVmFsdWVzKG9iamVjdCwga2V5c0luKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENsYW1wcyBgbnVtYmVyYCB3aXRoaW4gdGhlIGluY2x1c2l2ZSBgbG93ZXJgIGFuZCBgdXBwZXJgIGJvdW5kcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2xhbXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcl0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY2xhbXBlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2xhbXAoLTEwLCAtNSwgNSk7XG4gICAgICogLy8gPT4gLTVcbiAgICAgKlxuICAgICAqIF8uY2xhbXAoMTAsIC01LCA1KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xhbXAobnVtYmVyLCBsb3dlciwgdXBwZXIpIHtcbiAgICAgIGlmICh1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVwcGVyID0gbG93ZXI7XG4gICAgICAgIGxvd2VyID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKHVwcGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdXBwZXIgPSB0b051bWJlcih1cHBlcik7XG4gICAgICAgIHVwcGVyID0gdXBwZXIgPT09IHVwcGVyID8gdXBwZXIgOiAwO1xuICAgICAgfVxuICAgICAgaWYgKGxvd2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbG93ZXIgPSB0b051bWJlcihsb3dlcik7XG4gICAgICAgIGxvd2VyID0gbG93ZXIgPT09IGxvd2VyID8gbG93ZXIgOiAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VDbGFtcCh0b051bWJlcihudW1iZXIpLCBsb3dlciwgdXBwZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgbmAgaXMgYmV0d2VlbiBgc3RhcnRgIGFuZCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLiBJZlxuICAgICAqIGBlbmRgIGlzIG5vdCBzcGVjaWZpZWQsIGl0J3Mgc2V0IHRvIGBzdGFydGAgd2l0aCBgc3RhcnRgIHRoZW4gc2V0IHRvIGAwYC5cbiAgICAgKiBJZiBgc3RhcnRgIGlzIGdyZWF0ZXIgdGhhbiBgZW5kYCB0aGUgcGFyYW1zIGFyZSBzd2FwcGVkIHRvIHN1cHBvcnRcbiAgICAgKiBuZWdhdGl2ZSByYW5nZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgbnVtYmVyYCBpcyBpbiB0aGUgcmFuZ2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ucmFuZ2UsIF8ucmFuZ2VSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMywgMiwgNCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDQsIDgpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg0LCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDIsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMS4yLCAyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNS4yLCA0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKC0zLCAtMiwgLTYpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCkge1xuICAgICAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7XG4gICAgICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVuZCA9IHRvRmluaXRlKGVuZCk7XG4gICAgICB9XG4gICAgICBudW1iZXIgPSB0b051bWJlcihudW1iZXIpO1xuICAgICAgcmV0dXJuIGJhc2VJblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvZHVjZXMgYSByYW5kb20gbnVtYmVyIGJldHdlZW4gdGhlIGluY2x1c2l2ZSBgbG93ZXJgIGFuZCBgdXBwZXJgIGJvdW5kcy5cbiAgICAgKiBJZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwcm92aWRlZCBhIG51bWJlciBiZXR3ZWVuIGAwYCBhbmQgdGhlIGdpdmVuIG51bWJlclxuICAgICAqIGlzIHJldHVybmVkLiBJZiBgZmxvYXRpbmdgIGlzIGB0cnVlYCwgb3IgZWl0aGVyIGBsb3dlcmAgb3IgYHVwcGVyYCBhcmVcbiAgICAgKiBmbG9hdHMsIGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGlzIHJldHVybmVkIGluc3RlYWQgb2YgYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBKYXZhU2NyaXB0IGZvbGxvd3MgdGhlIElFRUUtNzU0IHN0YW5kYXJkIGZvciByZXNvbHZpbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCB2YWx1ZXMgd2hpY2ggY2FuIHByb2R1Y2UgdW5leHBlY3RlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNy4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXI9MF0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbdXBwZXI9MV0gVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zsb2F0aW5nXSBTcGVjaWZ5IHJldHVybmluZyBhIGZsb2F0aW5nLXBvaW50IG51bWJlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByYW5kb20gbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSgwLCA1KTtcbiAgICAgKiAvLyA9PiBhbiBpbnRlZ2VyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oNSk7XG4gICAgICogLy8gPT4gYWxzbyBhbiBpbnRlZ2VyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oNSwgdHJ1ZSk7XG4gICAgICogLy8gPT4gYSBmbG9hdGluZy1wb2ludCBudW1iZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSgxLjIsIDUuMik7XG4gICAgICogLy8gPT4gYSBmbG9hdGluZy1wb2ludCBudW1iZXIgYmV0d2VlbiAxLjIgYW5kIDUuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJhbmRvbShsb3dlciwgdXBwZXIsIGZsb2F0aW5nKSB7XG4gICAgICBpZiAoZmxvYXRpbmcgJiYgdHlwZW9mIGZsb2F0aW5nICE9ICdib29sZWFuJyAmJiBpc0l0ZXJhdGVlQ2FsbChsb3dlciwgdXBwZXIsIGZsb2F0aW5nKSkge1xuICAgICAgICB1cHBlciA9IGZsb2F0aW5nID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKGZsb2F0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB1cHBlciA9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICBmbG9hdGluZyA9IHVwcGVyO1xuICAgICAgICAgIHVwcGVyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBsb3dlciA9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICBmbG9hdGluZyA9IGxvd2VyO1xuICAgICAgICAgIGxvd2VyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgPT09IHVuZGVmaW5lZCAmJiB1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxvd2VyID0gMDtcbiAgICAgICAgdXBwZXIgPSAxO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGxvd2VyID0gdG9GaW5pdGUobG93ZXIpO1xuICAgICAgICBpZiAodXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHVwcGVyID0gbG93ZXI7XG4gICAgICAgICAgbG93ZXIgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVwcGVyID0gdG9GaW5pdGUodXBwZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgPiB1cHBlcikge1xuICAgICAgICB2YXIgdGVtcCA9IGxvd2VyO1xuICAgICAgICBsb3dlciA9IHVwcGVyO1xuICAgICAgICB1cHBlciA9IHRlbXA7XG4gICAgICB9XG4gICAgICBpZiAoZmxvYXRpbmcgfHwgbG93ZXIgJSAxIHx8IHVwcGVyICUgMSkge1xuICAgICAgICB2YXIgcmFuZCA9IG5hdGl2ZVJhbmRvbSgpO1xuICAgICAgICByZXR1cm4gbmF0aXZlTWluKGxvd2VyICsgKHJhbmQgKiAodXBwZXIgLSBsb3dlciArIGZyZWVQYXJzZUZsb2F0KCcxZS0nICsgKChyYW5kICsgJycpLmxlbmd0aCAtIDEpKSkpLCB1cHBlcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVJhbmRvbShsb3dlciwgdXBwZXIpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIFtjYW1lbCBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DYW1lbENhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY2FtZWwgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnLS1mb28tYmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKi9cbiAgICB2YXIgY2FtZWxDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICB3b3JkID0gd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/IGNhcGl0YWxpemUod29yZCkgOiB3b3JkKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gdXBwZXIgY2FzZSBhbmQgdGhlIHJlbWFpbmluZ1xuICAgICAqIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY2FwaXRhbGl6ZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjYXBpdGFsaXplZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FwaXRhbGl6ZSgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdGcmVkJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyaW5nKSB7XG4gICAgICByZXR1cm4gdXBwZXJGaXJzdCh0b1N0cmluZyhzdHJpbmcpLnRvTG93ZXJDYXNlKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlYnVycnMgYHN0cmluZ2AgYnkgY29udmVydGluZ1xuICAgICAqIFtMYXRpbi0xIFN1cHBsZW1lbnRdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluLTFfU3VwcGxlbWVudF8oVW5pY29kZV9ibG9jaykjQ2hhcmFjdGVyX3RhYmxlKVxuICAgICAqIGFuZCBbTGF0aW4gRXh0ZW5kZWQtQV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGF0aW5fRXh0ZW5kZWQtQSlcbiAgICAgKiBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMgYW5kIHJlbW92aW5nXG4gICAgICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBkZWJ1cnIuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZGVidXJyZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlYnVycignZMOpasOgIHZ1Jyk7XG4gICAgICogLy8gPT4gJ2RlamEgdnUnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVidXJyKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiBzdHJpbmcgJiYgc3RyaW5nLnJlcGxhY2UocmVMYXRpbiwgZGVidXJyTGV0dGVyKS5yZXBsYWNlKHJlQ29tYm9NYXJrLCAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGVuZHMgd2l0aCB0aGUgZ2l2ZW4gdGFyZ2V0IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGFyZ2V0XSBUaGUgc3RyaW5nIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwb3NpdGlvbj1zdHJpbmcubGVuZ3RoXSBUaGUgcG9zaXRpb24gdG8gc2VhcmNoIHVwIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgc3RyaW5nYCBlbmRzIHdpdGggYHRhcmdldGAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2MnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYicsIDIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlbmRzV2l0aChzdHJpbmcsIHRhcmdldCwgcG9zaXRpb24pIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICB0YXJnZXQgPSBiYXNlVG9TdHJpbmcodGFyZ2V0KTtcblxuICAgICAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uID09PSB1bmRlZmluZWRcbiAgICAgICAgPyBsZW5ndGhcbiAgICAgICAgOiBiYXNlQ2xhbXAodG9JbnRlZ2VyKHBvc2l0aW9uKSwgMCwgbGVuZ3RoKTtcblxuICAgICAgdmFyIGVuZCA9IHBvc2l0aW9uO1xuICAgICAgcG9zaXRpb24gLT0gdGFyZ2V0Lmxlbmd0aDtcbiAgICAgIHJldHVybiBwb3NpdGlvbiA+PSAwICYmIHN0cmluZy5zbGljZShwb3NpdGlvbiwgZW5kKSA9PSB0YXJnZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGNoYXJhY3RlcnMgXCImXCIsIFwiPFwiLCBcIj5cIiwgJ1wiJywgYW5kIFwiJ1wiIGluIGBzdHJpbmdgIHRvIHRoZWlyXG4gICAgICogY29ycmVzcG9uZGluZyBIVE1MIGVudGl0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vIG90aGVyIGNoYXJhY3RlcnMgYXJlIGVzY2FwZWQuIFRvIGVzY2FwZSBhZGRpdGlvbmFsXG4gICAgICogY2hhcmFjdGVycyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gICAgICpcbiAgICAgKiBUaG91Z2ggdGhlIFwiPlwiIGNoYXJhY3RlciBpcyBlc2NhcGVkIGZvciBzeW1tZXRyeSwgY2hhcmFjdGVycyBsaWtlXG4gICAgICogXCI+XCIgYW5kIFwiL1wiIGRvbid0IG5lZWQgZXNjYXBpbmcgaW4gSFRNTCBhbmQgaGF2ZSBubyBzcGVjaWFsIG1lYW5pbmdcbiAgICAgKiB1bmxlc3MgdGhleSdyZSBwYXJ0IG9mIGEgdGFnIG9yIHVucXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZS4gU2VlXG4gICAgICogW01hdGhpYXMgQnluZW5zJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2FtYmlndW91cy1hbXBlcnNhbmRzKVxuICAgICAqICh1bmRlciBcInNlbWktcmVsYXRlZCBmdW4gZmFjdFwiKSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogV2hlbiB3b3JraW5nIHdpdGggSFRNTCB5b3Ugc2hvdWxkIGFsd2F5c1xuICAgICAqIFtxdW90ZSBhdHRyaWJ1dGUgdmFsdWVzXShodHRwOi8vd29ua28uY29tL3Bvc3QvaHRtbC1lc2NhcGluZykgdG8gcmVkdWNlXG4gICAgICogWFNTIHZlY3RvcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVzY2FwZShzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc1VuZXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlVW5lc2NhcGVkSHRtbCwgZXNjYXBlSHRtbENoYXIpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVzY2FwZXMgdGhlIGBSZWdFeHBgIHNwZWNpYWwgY2hhcmFjdGVycyBcIl5cIiwgXCIkXCIsIFwiXFxcIiwgXCIuXCIsIFwiKlwiLCBcIitcIixcbiAgICAgKiBcIj9cIiwgXCIoXCIsIFwiKVwiLCBcIltcIiwgXCJdXCIsIFwie1wiLCBcIn1cIiwgYW5kIFwifFwiIGluIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lc2NhcGVSZWdFeHAoJ1tsb2Rhc2hdKGh0dHBzOi8vbG9kYXNoLmNvbS8pJyk7XG4gICAgICogLy8gPT4gJ1xcW2xvZGFzaFxcXVxcKGh0dHBzOi8vbG9kYXNoXFwuY29tL1xcKSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlc2NhcGVSZWdFeHAoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNSZWdFeHBDaGFyLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtrZWJhYiBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MZXR0ZXJfY2FzZSNTcGVjaWFsX2Nhc2Vfc3R5bGVzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGtlYmFiIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqL1xuICAgIHZhciBrZWJhYkNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnLScgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgc3BhY2Ugc2VwYXJhdGVkIHdvcmRzLCB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbG93ZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnLS1Gb28tQmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqL1xuICAgIHZhciBsb3dlckNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxvd2VyRmlyc3QoJ0ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIF8ubG93ZXJGaXJzdCgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdmUkVEJ1xuICAgICAqL1xuICAgIHZhciBsb3dlckZpcnN0ID0gY3JlYXRlQ2FzZUZpcnN0KCd0b0xvd2VyQ2FzZScpO1xuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgbGVmdCBhbmQgcmlnaHQgc2lkZXMgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuXG4gICAgICogUGFkZGluZyBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBjYW4ndCBiZSBldmVubHkgZGl2aWRlZCBieSBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgOCk7XG4gICAgICogLy8gPT4gJyAgYWJjICAgJ1xuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDgsICdfLScpO1xuICAgICAqIC8vID0+ICdfLWFiY18tXydcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICBpZiAoIWxlbmd0aCB8fCBzdHJMZW5ndGggPj0gbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgbWlkID0gKGxlbmd0aCAtIHN0ckxlbmd0aCkgLyAyO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgY3JlYXRlUGFkZGluZyhuYXRpdmVGbG9vcihtaWQpLCBjaGFycykgK1xuICAgICAgICBzdHJpbmcgK1xuICAgICAgICBjcmVhdGVQYWRkaW5nKG5hdGl2ZUNlaWwobWlkKSwgY2hhcnMpXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIHJpZ2h0IHNpZGUgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuIFBhZGRpbmdcbiAgICAgKiBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBleGNlZWQgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDYpO1xuICAgICAqIC8vID0+ICdhYmMgICAnXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgNiwgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiY18tXydcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZEVuZChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICByZXR1cm4gKGxlbmd0aCAmJiBzdHJMZW5ndGggPCBsZW5ndGgpXG4gICAgICAgID8gKHN0cmluZyArIGNyZWF0ZVBhZGRpbmcobGVuZ3RoIC0gc3RyTGVuZ3RoLCBjaGFycykpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIGxlZnQgc2lkZSBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC4gUGFkZGluZ1xuICAgICAqIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGV4Y2VlZCBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCA2KTtcbiAgICAgKiAvLyA9PiAnICAgYWJjJ1xuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgNiwgJ18tJyk7XG4gICAgICogLy8gPT4gJ18tX2FiYydcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkU3RhcnQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgcmV0dXJuIChsZW5ndGggJiYgc3RyTGVuZ3RoIDwgbGVuZ3RoKVxuICAgICAgICA/IChjcmVhdGVQYWRkaW5nKGxlbmd0aCAtIHN0ckxlbmd0aCwgY2hhcnMpICsgc3RyaW5nKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhbiBpbnRlZ2VyIG9mIHRoZSBzcGVjaWZpZWQgcmFkaXguIElmIGByYWRpeGAgaXNcbiAgICAgKiBgdW5kZWZpbmVkYCBvciBgMGAsIGEgYHJhZGl4YCBvZiBgMTBgIGlzIHVzZWQgdW5sZXNzIGB2YWx1ZWAgaXMgYVxuICAgICAqIGhleGFkZWNpbWFsLCBpbiB3aGljaCBjYXNlIGEgYHJhZGl4YCBvZiBgMTZgIGlzIHVzZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgYWxpZ25zIHdpdGggdGhlXG4gICAgICogW0VTNSBpbXBsZW1lbnRhdGlvbl0oaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTUuMS4yLjIpIG9mIGBwYXJzZUludGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtyYWRpeD0xMF0gVGhlIHJhZGl4IHRvIGludGVycHJldCBgdmFsdWVgIGJ5LlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFyc2VJbnQoJzA4Jyk7XG4gICAgICogLy8gPT4gOFxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzA4JywgJzEwJ10sIF8ucGFyc2VJbnQpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYXJzZUludChzdHJpbmcsIHJhZGl4LCBndWFyZCkge1xuICAgICAgaWYgKGd1YXJkIHx8IHJhZGl4ID09IG51bGwpIHtcbiAgICAgICAgcmFkaXggPSAwO1xuICAgICAgfSBlbHNlIGlmIChyYWRpeCkge1xuICAgICAgICByYWRpeCA9ICtyYWRpeDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuYXRpdmVQYXJzZUludCh0b1N0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKSwgcmFkaXggfHwgMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwZWF0cyB0aGUgZ2l2ZW4gc3RyaW5nIGBuYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byByZXBlYXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0IHRoZSBzdHJpbmcuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByZXBlYXRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCcqJywgMyk7XG4gICAgICogLy8gPT4gJyoqKidcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCdhYmMnLCAyKTtcbiAgICAgKiAvLyA9PiAnYWJjYWJjJ1xuICAgICAqXG4gICAgICogXy5yZXBlYXQoJ2FiYycsIDApO1xuICAgICAqIC8vID0+ICcnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwZWF0KHN0cmluZywgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIG4sIGd1YXJkKSA6IG4gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgbiA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VSZXBlYXQodG9TdHJpbmcoc3RyaW5nKSwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZXMgbWF0Y2hlcyBmb3IgYHBhdHRlcm5gIGluIGBzdHJpbmdgIHdpdGggYHJlcGxhY2VtZW50YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgU3RyaW5nI3JlcGxhY2VgXShodHRwczovL21kbi5pby9TdHJpbmcvcmVwbGFjZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gcGF0dGVybiBUaGUgcGF0dGVybiB0byByZXBsYWNlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSByZXBsYWNlbWVudCBUaGUgbWF0Y2ggcmVwbGFjZW1lbnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbW9kaWZpZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlcGxhY2UoJ0hpIEZyZWQnLCAnRnJlZCcsICdCYXJuZXknKTtcbiAgICAgKiAvLyA9PiAnSGkgQmFybmV5J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGxhY2UoKSB7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICBzdHJpbmcgPSB0b1N0cmluZyhhcmdzWzBdKTtcblxuICAgICAgcmV0dXJuIGFyZ3MubGVuZ3RoIDwgMyA/IHN0cmluZyA6IHN0cmluZy5yZXBsYWNlKGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW3NuYWtlIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NuYWtlX2Nhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc25ha2UgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJy0tRk9PLUJBUi0tJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICovXG4gICAgdmFyIHNuYWtlQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICdfJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFNwbGl0cyBgc3RyaW5nYCBieSBgc2VwYXJhdG9yYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgU3RyaW5nI3NwbGl0YF0oaHR0cHM6Ly9tZG4uaW8vU3RyaW5nL3NwbGl0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBzcGxpdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IHNlcGFyYXRvciBUaGUgc2VwYXJhdG9yIHBhdHRlcm4gdG8gc3BsaXQgYnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsaW1pdF0gVGhlIGxlbmd0aCB0byB0cnVuY2F0ZSByZXN1bHRzIHRvLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc3RyaW5nIHNlZ21lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNwbGl0KCdhLWItYycsICctJywgMik7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNwbGl0KHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgaWYgKGxpbWl0ICYmIHR5cGVvZiBsaW1pdCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpKSB7XG4gICAgICAgIHNlcGFyYXRvciA9IGxpbWl0ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgbGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX0FSUkFZX0xFTkdUSCA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKCFsaW1pdCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoXG4gICAgICAgICAgICB0eXBlb2Ygc2VwYXJhdG9yID09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICAoc2VwYXJhdG9yICE9IG51bGwgJiYgIWlzUmVnRXhwKHNlcGFyYXRvcikpXG4gICAgICAgICAgKSkge1xuICAgICAgICBzZXBhcmF0b3IgPSBiYXNlVG9TdHJpbmcoc2VwYXJhdG9yKTtcbiAgICAgICAgaWYgKCFzZXBhcmF0b3IgJiYgaGFzVW5pY29kZShzdHJpbmcpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJpbmdUb0FycmF5KHN0cmluZyksIDAsIGxpbWl0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmluZy5zcGxpdChzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtzdGFydCBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MZXR0ZXJfY2FzZSNTdHlsaXN0aWNfb3Jfc3BlY2lhbGlzZWRfdXNhZ2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMS4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RhcnQgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnLS1mb28tYmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnRm9vIEJhcidcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRm9vIEJhcidcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqL1xuICAgIHZhciBzdGFydENhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB1cHBlckZpcnN0KHdvcmQpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIHN0YXJ0cyB3aXRoIHRoZSBnaXZlbiB0YXJnZXQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt0YXJnZXRdIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Bvc2l0aW9uPTBdIFRoZSBwb3NpdGlvbiB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHN0cmluZ2Agc3RhcnRzIHdpdGggYHRhcmdldGAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYicsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFydHNXaXRoKHN0cmluZywgdGFyZ2V0LCBwb3NpdGlvbikge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPT0gbnVsbFxuICAgICAgICA/IDBcbiAgICAgICAgOiBiYXNlQ2xhbXAodG9JbnRlZ2VyKHBvc2l0aW9uKSwgMCwgc3RyaW5nLmxlbmd0aCk7XG5cbiAgICAgIHRhcmdldCA9IGJhc2VUb1N0cmluZyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHN0cmluZy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyB0YXJnZXQubGVuZ3RoKSA9PSB0YXJnZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNvbXBpbGVkIHRlbXBsYXRlIGZ1bmN0aW9uIHRoYXQgY2FuIGludGVycG9sYXRlIGRhdGEgcHJvcGVydGllc1xuICAgICAqIGluIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXJzLCBIVE1MLWVzY2FwZSBpbnRlcnBvbGF0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluXG4gICAgICogXCJlc2NhcGVcIiBkZWxpbWl0ZXJzLCBhbmQgZXhlY3V0ZSBKYXZhU2NyaXB0IGluIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXJzLiBEYXRhXG4gICAgICogcHJvcGVydGllcyBtYXkgYmUgYWNjZXNzZWQgYXMgZnJlZSB2YXJpYWJsZXMgaW4gdGhlIHRlbXBsYXRlLiBJZiBhIHNldHRpbmdcbiAgICAgKiBvYmplY3QgaXMgZ2l2ZW4sIGl0IHRha2VzIHByZWNlZGVuY2Ugb3ZlciBgXy50ZW1wbGF0ZVNldHRpbmdzYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSW4gdGhlIGRldmVsb3BtZW50IGJ1aWxkIGBfLnRlbXBsYXRlYCB1dGlsaXplc1xuICAgICAqIFtzb3VyY2VVUkxzXShodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy9kZXZlbG9wZXJ0b29scy9zb3VyY2VtYXBzLyN0b2Mtc291cmNldXJsKVxuICAgICAqIGZvciBlYXNpZXIgZGVidWdnaW5nLlxuICAgICAqXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gcHJlY29tcGlsaW5nIHRlbXBsYXRlcyBzZWVcbiAgICAgKiBbbG9kYXNoJ3MgY3VzdG9tIGJ1aWxkcyBkb2N1bWVudGF0aW9uXShodHRwczovL2xvZGFzaC5jb20vY3VzdG9tLWJ1aWxkcykuXG4gICAgICpcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBDaHJvbWUgZXh0ZW5zaW9uIHNhbmRib3hlcyBzZWVcbiAgICAgKiBbQ2hyb21lJ3MgZXh0ZW5zaW9ucyBkb2N1bWVudGF0aW9uXShodHRwczovL2RldmVsb3Blci5jaHJvbWUuY29tL2V4dGVuc2lvbnMvc2FuZGJveGluZ0V2YWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgdGVtcGxhdGUgc3RyaW5nLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5lc2NhcGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmVzY2FwZV1cbiAgICAgKiAgVGhlIEhUTUwgXCJlc2NhcGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmV2YWx1YXRlPV8udGVtcGxhdGVTZXR0aW5ncy5ldmFsdWF0ZV1cbiAgICAgKiAgVGhlIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmltcG9ydHM9Xy50ZW1wbGF0ZVNldHRpbmdzLmltcG9ydHNdXG4gICAgICogIEFuIG9iamVjdCB0byBpbXBvcnQgaW50byB0aGUgdGVtcGxhdGUgYXMgZnJlZSB2YXJpYWJsZXMuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmludGVycG9sYXRlPV8udGVtcGxhdGVTZXR0aW5ncy5pbnRlcnBvbGF0ZV1cbiAgICAgKiAgVGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnNvdXJjZVVSTD0nbG9kYXNoLnRlbXBsYXRlU291cmNlc1tuXSddXG4gICAgICogIFRoZSBzb3VyY2VVUkwgb2YgdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy52YXJpYWJsZT0nb2JqJ11cbiAgICAgKiAgVGhlIGRhdGEgb2JqZWN0IHZhcmlhYmxlIG5hbWUuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNvbXBpbGVkIHRlbXBsYXRlIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIgdG8gY3JlYXRlIGEgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IHVzZXIgJT4hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdmcmVkJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIEhUTUwgXCJlc2NhcGVcIiBkZWxpbWl0ZXIgdG8gZXNjYXBlIGRhdGEgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzxiPjwlLSB2YWx1ZSAlPjwvYj4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd2YWx1ZSc6ICc8c2NyaXB0PicgfSk7XG4gICAgICogLy8gPT4gJzxiPiZsdDtzY3JpcHQmZ3Q7PC9iPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlciB0byBleGVjdXRlIEphdmFTY3JpcHQgYW5kIGdlbmVyYXRlIEhUTUwuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCUgXy5mb3JFYWNoKHVzZXJzLCBmdW5jdGlvbih1c2VyKSB7ICU+PGxpPjwlLSB1c2VyICU+PC9saT48JSB9KTsgJT4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2Vycyc6IFsnZnJlZCcsICdiYXJuZXknXSB9KTtcbiAgICAgKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgaW50ZXJuYWwgYHByaW50YCBmdW5jdGlvbiBpbiBcImV2YWx1YXRlXCIgZGVsaW1pdGVycy5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JSBwcmludChcImhlbGxvIFwiICsgdXNlcik7ICU+IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnYmFybmV5JyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gYmFybmV5ISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgRVMgdGVtcGxhdGUgbGl0ZXJhbCBkZWxpbWl0ZXIgYXMgYW4gXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiAvLyBEaXNhYmxlIHN1cHBvcnQgYnkgcmVwbGFjaW5nIHRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvICR7IHVzZXIgfSEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ3BlYmJsZXMnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBwZWJibGVzISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSBiYWNrc2xhc2hlcyB0byB0cmVhdCBkZWxpbWl0ZXJzIGFzIHBsYWluIHRleHQuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCU9IFwiXFxcXDwlLSB2YWx1ZSAlXFxcXD5cIiAlPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3ZhbHVlJzogJ2lnbm9yZWQnIH0pO1xuICAgICAqIC8vID0+ICc8JS0gdmFsdWUgJT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBpbXBvcnRzYCBvcHRpb24gdG8gaW1wb3J0IGBqUXVlcnlgIGFzIGBqcWAuXG4gICAgICogdmFyIHRleHQgPSAnPCUganEuZWFjaCh1c2VycywgZnVuY3Rpb24odXNlcikgeyAlPjxsaT48JS0gdXNlciAlPjwvbGk+PCUgfSk7ICU+JztcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKHRleHQsIHsgJ2ltcG9ydHMnOiB7ICdqcSc6IGpRdWVyeSB9IH0pO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXJzJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICAgICAqIC8vID0+ICc8bGk+ZnJlZDwvbGk+PGxpPmJhcm5leTwvbGk+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgc291cmNlVVJMYCBvcHRpb24gdG8gc3BlY2lmeSBhIGN1c3RvbSBzb3VyY2VVUkwgZm9yIHRoZSB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyA8JT0gdXNlciAlPiEnLCB7ICdzb3VyY2VVUkwnOiAnL2Jhc2ljL2dyZWV0aW5nLmpzdCcgfSk7XG4gICAgICogY29tcGlsZWQoZGF0YSk7XG4gICAgICogLy8gPT4gRmluZCB0aGUgc291cmNlIG9mIFwiZ3JlZXRpbmcuanN0XCIgdW5kZXIgdGhlIFNvdXJjZXMgdGFiIG9yIFJlc291cmNlcyBwYW5lbCBvZiB0aGUgd2ViIGluc3BlY3Rvci5cbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHZhcmlhYmxlYCBvcHRpb24gdG8gZW5zdXJlIGEgd2l0aC1zdGF0ZW1lbnQgaXNuJ3QgdXNlZCBpbiB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGkgPCU9IGRhdGEudXNlciAlPiEnLCB7ICd2YXJpYWJsZSc6ICdkYXRhJyB9KTtcbiAgICAgKiBjb21waWxlZC5zb3VyY2U7XG4gICAgICogLy8gPT4gZnVuY3Rpb24oZGF0YSkge1xuICAgICAqIC8vICAgdmFyIF9fdCwgX19wID0gJyc7XG4gICAgICogLy8gICBfX3AgKz0gJ2hpICcgKyAoKF9fdCA9ICggZGF0YS51c2VyICkpID09IG51bGwgPyAnJyA6IF9fdCkgKyAnISc7XG4gICAgICogLy8gICByZXR1cm4gX19wO1xuICAgICAqIC8vIH1cbiAgICAgKlxuICAgICAqIC8vIFVzZSBjdXN0b20gdGVtcGxhdGUgZGVsaW1pdGVycy5cbiAgICAgKiBfLnRlbXBsYXRlU2V0dGluZ3MuaW50ZXJwb2xhdGUgPSAve3soW1xcc1xcU10rPyl9fS9nO1xuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIHt7IHVzZXIgfX0hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdtdXN0YWNoZScgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIG11c3RhY2hlISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHNvdXJjZWAgcHJvcGVydHkgdG8gaW5saW5lIGNvbXBpbGVkIHRlbXBsYXRlcyBmb3IgbWVhbmluZ2Z1bFxuICAgICAqIC8vIGxpbmUgbnVtYmVycyBpbiBlcnJvciBtZXNzYWdlcyBhbmQgc3RhY2sgdHJhY2VzLlxuICAgICAqIGZzLndyaXRlRmlsZVN5bmMocGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICdqc3QuanMnKSwgJ1xcXG4gICAgICogICB2YXIgSlNUID0ge1xcXG4gICAgICogICAgIFwibWFpblwiOiAnICsgXy50ZW1wbGF0ZShtYWluVGV4dCkuc291cmNlICsgJ1xcXG4gICAgICogICB9O1xcXG4gICAgICogJyk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gdGVtcGxhdGUoc3RyaW5nLCBvcHRpb25zLCBndWFyZCkge1xuICAgICAgLy8gQmFzZWQgb24gSm9obiBSZXNpZydzIGB0bXBsYCBpbXBsZW1lbnRhdGlvblxuICAgICAgLy8gKGh0dHA6Ly9lam9obi5vcmcvYmxvZy9qYXZhc2NyaXB0LW1pY3JvLXRlbXBsYXRpbmcvKVxuICAgICAgLy8gYW5kIExhdXJhIERva3Rvcm92YSdzIGRvVC5qcyAoaHR0cHM6Ly9naXRodWIuY29tL29sYWRvL2RvVCkuXG4gICAgICB2YXIgc2V0dGluZ3MgPSBsb2Rhc2gudGVtcGxhdGVTZXR0aW5ncztcblxuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgb3B0aW9ucywgZ3VhcmQpKSB7XG4gICAgICAgIG9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgb3B0aW9ucyA9IGFzc2lnbkluV2l0aCh7fSwgb3B0aW9ucywgc2V0dGluZ3MsIGN1c3RvbURlZmF1bHRzQXNzaWduSW4pO1xuXG4gICAgICB2YXIgaW1wb3J0cyA9IGFzc2lnbkluV2l0aCh7fSwgb3B0aW9ucy5pbXBvcnRzLCBzZXR0aW5ncy5pbXBvcnRzLCBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKSxcbiAgICAgICAgICBpbXBvcnRzS2V5cyA9IGtleXMoaW1wb3J0cyksXG4gICAgICAgICAgaW1wb3J0c1ZhbHVlcyA9IGJhc2VWYWx1ZXMoaW1wb3J0cywgaW1wb3J0c0tleXMpO1xuXG4gICAgICB2YXIgaXNFc2NhcGluZyxcbiAgICAgICAgICBpc0V2YWx1YXRpbmcsXG4gICAgICAgICAgaW5kZXggPSAwLFxuICAgICAgICAgIGludGVycG9sYXRlID0gb3B0aW9ucy5pbnRlcnBvbGF0ZSB8fCByZU5vTWF0Y2gsXG4gICAgICAgICAgc291cmNlID0gXCJfX3AgKz0gJ1wiO1xuXG4gICAgICAvLyBDb21waWxlIHRoZSByZWdleHAgdG8gbWF0Y2ggZWFjaCBkZWxpbWl0ZXIuXG4gICAgICB2YXIgcmVEZWxpbWl0ZXJzID0gUmVnRXhwKFxuICAgICAgICAob3B0aW9ucy5lc2NhcGUgfHwgcmVOb01hdGNoKS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICBpbnRlcnBvbGF0ZS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICAoaW50ZXJwb2xhdGUgPT09IHJlSW50ZXJwb2xhdGUgPyByZUVzVGVtcGxhdGUgOiByZU5vTWF0Y2gpLnNvdXJjZSArICd8JyArXG4gICAgICAgIChvcHRpb25zLmV2YWx1YXRlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgJ3wkJ1xuICAgICAgLCAnZycpO1xuXG4gICAgICAvLyBVc2UgYSBzb3VyY2VVUkwgZm9yIGVhc2llciBkZWJ1Z2dpbmcuXG4gICAgICAvLyBUaGUgc291cmNlVVJMIGdldHMgaW5qZWN0ZWQgaW50byB0aGUgc291cmNlIHRoYXQncyBldmFsLWVkLCBzbyBiZSBjYXJlZnVsXG4gICAgICAvLyB0byBub3JtYWxpemUgYWxsIGtpbmRzIG9mIHdoaXRlc3BhY2UsIHNvIGUuZy4gbmV3bGluZXMgKGFuZCB1bmljb2RlIHZlcnNpb25zIG9mIGl0KSBjYW4ndCBzbmVhayBpblxuICAgICAgLy8gYW5kIGVzY2FwZSB0aGUgY29tbWVudCwgdGh1cyBpbmplY3RpbmcgY29kZSB0aGF0IGdldHMgZXZhbGVkLlxuICAgICAgdmFyIHNvdXJjZVVSTCA9ICcvLyMgc291cmNlVVJMPScgK1xuICAgICAgICAoaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLCAnc291cmNlVVJMJylcbiAgICAgICAgICA/IChvcHRpb25zLnNvdXJjZVVSTCArICcnKS5yZXBsYWNlKC9cXHMvZywgJyAnKVxuICAgICAgICAgIDogKCdsb2Rhc2gudGVtcGxhdGVTb3VyY2VzWycgKyAoKyt0ZW1wbGF0ZUNvdW50ZXIpICsgJ10nKVxuICAgICAgICApICsgJ1xcbic7XG5cbiAgICAgIHN0cmluZy5yZXBsYWNlKHJlRGVsaW1pdGVycywgZnVuY3Rpb24obWF0Y2gsIGVzY2FwZVZhbHVlLCBpbnRlcnBvbGF0ZVZhbHVlLCBlc1RlbXBsYXRlVmFsdWUsIGV2YWx1YXRlVmFsdWUsIG9mZnNldCkge1xuICAgICAgICBpbnRlcnBvbGF0ZVZhbHVlIHx8IChpbnRlcnBvbGF0ZVZhbHVlID0gZXNUZW1wbGF0ZVZhbHVlKTtcblxuICAgICAgICAvLyBFc2NhcGUgY2hhcmFjdGVycyB0aGF0IGNhbid0IGJlIGluY2x1ZGVkIGluIHN0cmluZyBsaXRlcmFscy5cbiAgICAgICAgc291cmNlICs9IHN0cmluZy5zbGljZShpbmRleCwgb2Zmc2V0KS5yZXBsYWNlKHJlVW5lc2NhcGVkU3RyaW5nLCBlc2NhcGVTdHJpbmdDaGFyKTtcblxuICAgICAgICAvLyBSZXBsYWNlIGRlbGltaXRlcnMgd2l0aCBzbmlwcGV0cy5cbiAgICAgICAgaWYgKGVzY2FwZVZhbHVlKSB7XG4gICAgICAgICAgaXNFc2NhcGluZyA9IHRydWU7XG4gICAgICAgICAgc291cmNlICs9IFwiJyArXFxuX19lKFwiICsgZXNjYXBlVmFsdWUgKyBcIikgK1xcbidcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZhbHVhdGVWYWx1ZSkge1xuICAgICAgICAgIGlzRXZhbHVhdGluZyA9IHRydWU7XG4gICAgICAgICAgc291cmNlICs9IFwiJztcXG5cIiArIGV2YWx1YXRlVmFsdWUgKyBcIjtcXG5fX3AgKz0gJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRlcnBvbGF0ZVZhbHVlKSB7XG4gICAgICAgICAgc291cmNlICs9IFwiJyArXFxuKChfX3QgPSAoXCIgKyBpbnRlcnBvbGF0ZVZhbHVlICsgXCIpKSA9PSBudWxsID8gJycgOiBfX3QpICtcXG4nXCI7XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSBvZmZzZXQgKyBtYXRjaC5sZW5ndGg7XG5cbiAgICAgICAgLy8gVGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBwcm9kdWN0cyBuZWVkcyBgbWF0Y2hgIHJldHVybmVkIGluXG4gICAgICAgIC8vIG9yZGVyIHRvIHByb2R1Y2UgdGhlIGNvcnJlY3QgYG9mZnNldGAgdmFsdWUuXG4gICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgIH0pO1xuXG4gICAgICBzb3VyY2UgKz0gXCInO1xcblwiO1xuXG4gICAgICAvLyBJZiBgdmFyaWFibGVgIGlzIG5vdCBzcGVjaWZpZWQgd3JhcCBhIHdpdGgtc3RhdGVtZW50IGFyb3VuZCB0aGUgZ2VuZXJhdGVkXG4gICAgICAvLyBjb2RlIHRvIGFkZCB0aGUgZGF0YSBvYmplY3QgdG8gdGhlIHRvcCBvZiB0aGUgc2NvcGUgY2hhaW4uXG4gICAgICB2YXIgdmFyaWFibGUgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsICd2YXJpYWJsZScpICYmIG9wdGlvbnMudmFyaWFibGU7XG4gICAgICBpZiAoIXZhcmlhYmxlKSB7XG4gICAgICAgIHNvdXJjZSA9ICd3aXRoIChvYmopIHtcXG4nICsgc291cmNlICsgJ1xcbn1cXG4nO1xuICAgICAgfVxuICAgICAgLy8gQ2xlYW51cCBjb2RlIGJ5IHN0cmlwcGluZyBlbXB0eSBzdHJpbmdzLlxuICAgICAgc291cmNlID0gKGlzRXZhbHVhdGluZyA/IHNvdXJjZS5yZXBsYWNlKHJlRW1wdHlTdHJpbmdMZWFkaW5nLCAnJykgOiBzb3VyY2UpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdNaWRkbGUsICckMScpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdUcmFpbGluZywgJyQxOycpO1xuXG4gICAgICAvLyBGcmFtZSBjb2RlIGFzIHRoZSBmdW5jdGlvbiBib2R5LlxuICAgICAgc291cmNlID0gJ2Z1bmN0aW9uKCcgKyAodmFyaWFibGUgfHwgJ29iaicpICsgJykge1xcbicgK1xuICAgICAgICAodmFyaWFibGVcbiAgICAgICAgICA/ICcnXG4gICAgICAgICAgOiAnb2JqIHx8IChvYmogPSB7fSk7XFxuJ1xuICAgICAgICApICtcbiAgICAgICAgXCJ2YXIgX190LCBfX3AgPSAnJ1wiICtcbiAgICAgICAgKGlzRXNjYXBpbmdcbiAgICAgICAgICAgPyAnLCBfX2UgPSBfLmVzY2FwZSdcbiAgICAgICAgICAgOiAnJ1xuICAgICAgICApICtcbiAgICAgICAgKGlzRXZhbHVhdGluZ1xuICAgICAgICAgID8gJywgX19qID0gQXJyYXkucHJvdG90eXBlLmpvaW47XFxuJyArXG4gICAgICAgICAgICBcImZ1bmN0aW9uIHByaW50KCkgeyBfX3AgKz0gX19qLmNhbGwoYXJndW1lbnRzLCAnJykgfVxcblwiXG4gICAgICAgICAgOiAnO1xcbidcbiAgICAgICAgKSArXG4gICAgICAgIHNvdXJjZSArXG4gICAgICAgICdyZXR1cm4gX19wXFxufSc7XG5cbiAgICAgIHZhciByZXN1bHQgPSBhdHRlbXB0KGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb24oaW1wb3J0c0tleXMsIHNvdXJjZVVSTCArICdyZXR1cm4gJyArIHNvdXJjZSlcbiAgICAgICAgICAuYXBwbHkodW5kZWZpbmVkLCBpbXBvcnRzVmFsdWVzKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBQcm92aWRlIHRoZSBjb21waWxlZCBmdW5jdGlvbidzIHNvdXJjZSBieSBpdHMgYHRvU3RyaW5nYCBtZXRob2Qgb3JcbiAgICAgIC8vIHRoZSBgc291cmNlYCBwcm9wZXJ0eSBhcyBhIGNvbnZlbmllbmNlIGZvciBpbmxpbmluZyBjb21waWxlZCB0ZW1wbGF0ZXMuXG4gICAgICByZXN1bHQuc291cmNlID0gc291cmNlO1xuICAgICAgaWYgKGlzRXJyb3IocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byBsb3dlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9Mb3dlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvTG93ZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGxvd2VyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0xvd2VyKCctLUZvby1CYXItLScpO1xuICAgICAqIC8vID0+ICctLWZvby1iYXItLSdcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb2JhcidcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnX19mb29fYmFyX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Mb3dlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byB1cHBlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9VcHBlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvVXBwZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVwcGVyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1VwcGVyKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICctLUZPTy1CQVItLSdcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPT0JBUidcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignX19mb29fYmFyX18nKTtcbiAgICAgKiAvLyA9PiAnX19GT09fQkFSX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9VcHBlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b1VwcGVyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbSgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLnRyaW0oJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLm1hcChbJyAgZm9vICAnLCAnICBiYXIgICddLCBfLnRyaW0pO1xuICAgICAqIC8vID0+IFsnZm9vJywgJ2JhciddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbShzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKGd1YXJkIHx8IGNoYXJzID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgY2hyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoY2hhcnMpLFxuICAgICAgICAgIHN0YXJ0ID0gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpLFxuICAgICAgICAgIGVuZCA9IGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykgKyAxO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIHN0YXJ0LCBlbmQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdHJhaWxpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbUVuZCgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICcgIGFiYydcbiAgICAgKlxuICAgICAqIF8udHJpbUVuZCgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJy1fLWFiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltRW5kKHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbUVuZCwgJycpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBlbmQgPSBjaGFyc0VuZEluZGV4KHN0clN5bWJvbHMsIHN0cmluZ1RvQXJyYXkoY2hhcnMpKSArIDE7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMCwgZW5kKS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGxlYWRpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbVN0YXJ0KCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJ2FiYyAgJ1xuICAgICAqXG4gICAgICogXy50cmltU3RhcnQoJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmMtXy0nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbVN0YXJ0KHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIHN0YXJ0ID0gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIHN0cmluZ1RvQXJyYXkoY2hhcnMpKTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCBzdGFydCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJ1bmNhdGVzIGBzdHJpbmdgIGlmIGl0J3MgbG9uZ2VyIHRoYW4gdGhlIGdpdmVuIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAgICAgKiBUaGUgbGFzdCBjaGFyYWN0ZXJzIG9mIHRoZSB0cnVuY2F0ZWQgc3RyaW5nIGFyZSByZXBsYWNlZCB3aXRoIHRoZSBvbWlzc2lvblxuICAgICAqIHN0cmluZyB3aGljaCBkZWZhdWx0cyB0byBcIi4uLlwiLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRydW5jYXRlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5sZW5ndGg9MzBdIFRoZSBtYXhpbXVtIHN0cmluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm9taXNzaW9uPScuLi4nXSBUaGUgc3RyaW5nIHRvIGluZGljYXRlIHRleHQgaXMgb21pdHRlZC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IFtvcHRpb25zLnNlcGFyYXRvcl0gVGhlIHNlcGFyYXRvciBwYXR0ZXJuIHRvIHRydW5jYXRlIHRvLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRydW5jYXRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nKTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdsZW5ndGgnOiAyNCxcbiAgICAgKiAgICdzZXBhcmF0b3InOiAnICdcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLC4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnbGVuZ3RoJzogMjQsXG4gICAgICogICAnc2VwYXJhdG9yJzogLyw/ICsvXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZS4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnb21pc3Npb24nOiAnIFsuLi5dJ1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWcgWy4uLl0nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJ1bmNhdGUoc3RyaW5nLCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gREVGQVVMVF9UUlVOQ19MRU5HVEgsXG4gICAgICAgICAgb21pc3Npb24gPSBERUZBVUxUX1RSVU5DX09NSVNTSU9OO1xuXG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgdmFyIHNlcGFyYXRvciA9ICdzZXBhcmF0b3InIGluIG9wdGlvbnMgPyBvcHRpb25zLnNlcGFyYXRvciA6IHNlcGFyYXRvcjtcbiAgICAgICAgbGVuZ3RoID0gJ2xlbmd0aCcgaW4gb3B0aW9ucyA/IHRvSW50ZWdlcihvcHRpb25zLmxlbmd0aCkgOiBsZW5ndGg7XG4gICAgICAgIG9taXNzaW9uID0gJ29taXNzaW9uJyBpbiBvcHRpb25zID8gYmFzZVRvU3RyaW5nKG9wdGlvbnMub21pc3Npb24pIDogb21pc3Npb247XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgICAgIGlmIChoYXNVbmljb2RlKHN0cmluZykpIHtcbiAgICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyk7XG4gICAgICAgIHN0ckxlbmd0aCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuICAgICAgfVxuICAgICAgaWYgKGxlbmd0aCA+PSBzdHJMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBlbmQgPSBsZW5ndGggLSBzdHJpbmdTaXplKG9taXNzaW9uKTtcbiAgICAgIGlmIChlbmQgPCAxKSB7XG4gICAgICAgIHJldHVybiBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBzdHJTeW1ib2xzXG4gICAgICAgID8gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDAsIGVuZCkuam9pbignJylcbiAgICAgICAgOiBzdHJpbmcuc2xpY2UoMCwgZW5kKTtcblxuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIGlmIChzdHJTeW1ib2xzKSB7XG4gICAgICAgIGVuZCArPSAocmVzdWx0Lmxlbmd0aCAtIGVuZCk7XG4gICAgICB9XG4gICAgICBpZiAoaXNSZWdFeHAoc2VwYXJhdG9yKSkge1xuICAgICAgICBpZiAoc3RyaW5nLnNsaWNlKGVuZCkuc2VhcmNoKHNlcGFyYXRvcikpIHtcbiAgICAgICAgICB2YXIgbWF0Y2gsXG4gICAgICAgICAgICAgIHN1YnN0cmluZyA9IHJlc3VsdDtcblxuICAgICAgICAgIGlmICghc2VwYXJhdG9yLmdsb2JhbCkge1xuICAgICAgICAgICAgc2VwYXJhdG9yID0gUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIHRvU3RyaW5nKHJlRmxhZ3MuZXhlYyhzZXBhcmF0b3IpKSArICdnJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlcGFyYXRvci5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgIHdoaWxlICgobWF0Y2ggPSBzZXBhcmF0b3IuZXhlYyhzdWJzdHJpbmcpKSkge1xuICAgICAgICAgICAgdmFyIG5ld0VuZCA9IG1hdGNoLmluZGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgbmV3RW5kID09PSB1bmRlZmluZWQgPyBlbmQgOiBuZXdFbmQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHN0cmluZy5pbmRleE9mKGJhc2VUb1N0cmluZyhzZXBhcmF0b3IpLCBlbmQpICE9IGVuZCkge1xuICAgICAgICB2YXIgaW5kZXggPSByZXN1bHQubGFzdEluZGV4T2Yoc2VwYXJhdG9yKTtcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0ICsgb21pc3Npb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGludmVyc2Ugb2YgYF8uZXNjYXBlYDsgdGhpcyBtZXRob2QgY29udmVydHMgdGhlIEhUTUwgZW50aXRpZXNcbiAgICAgKiBgJmFtcDtgLCBgJmx0O2AsIGAmZ3Q7YCwgYCZxdW90O2AsIGFuZCBgJiMzOTtgIGluIGBzdHJpbmdgIHRvXG4gICAgICogdGhlaXIgY29ycmVzcG9uZGluZyBjaGFyYWN0ZXJzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vIG90aGVyIEhUTUwgZW50aXRpZXMgYXJlIHVuZXNjYXBlZC4gVG8gdW5lc2NhcGUgYWRkaXRpb25hbFxuICAgICAqIEhUTUwgZW50aXRpZXMgdXNlIGEgdGhpcmQtcGFydHkgbGlicmFyeSBsaWtlIFtfaGVfXShodHRwczovL210aHMuYmUvaGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNi4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHVuZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5lc2NhcGUoJ2ZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICdmcmVkLCBiYXJuZXksICYgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmVzY2FwZShzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc0VzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZUVzY2FwZWRIdG1sLCB1bmVzY2FwZUh0bWxDaGFyKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgc3BhY2Ugc2VwYXJhdGVkIHdvcmRzLCB0byB1cHBlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdXBwZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnLS1mb28tYmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnX19mb29fYmFyX18nKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKi9cbiAgICB2YXIgdXBwZXJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgd29yZC50b1VwcGVyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byB1cHBlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51cHBlckZpcnN0KCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ0ZyZWQnXG4gICAgICpcbiAgICAgKiBfLnVwcGVyRmlyc3QoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnRlJFRCdcbiAgICAgKi9cbiAgICB2YXIgdXBwZXJGaXJzdCA9IGNyZWF0ZUNhc2VGaXJzdCgndG9VcHBlckNhc2UnKTtcblxuICAgIC8qKlxuICAgICAqIFNwbGl0cyBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW3BhdHRlcm5dIFRoZSBwYXR0ZXJuIHRvIG1hdGNoIHdvcmRzLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy53b3JkcygnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogXy53b3JkcygnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnLCAvW14sIF0rL2cpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAnJicsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3b3JkcyhzdHJpbmcsIHBhdHRlcm4sIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcGF0dGVybiA9IGd1YXJkID8gdW5kZWZpbmVkIDogcGF0dGVybjtcblxuICAgICAgaWYgKHBhdHRlcm4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSA/IHVuaWNvZGVXb3JkcyhzdHJpbmcpIDogYXNjaWlXb3JkcyhzdHJpbmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmluZy5tYXRjaChwYXR0ZXJuKSB8fCBbXTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBdHRlbXB0cyB0byBpbnZva2UgYGZ1bmNgLCByZXR1cm5pbmcgZWl0aGVyIHRoZSByZXN1bHQgb3IgdGhlIGNhdWdodCBlcnJvclxuICAgICAqIG9iamVjdC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGF0dGVtcHQuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGBmdW5jYCByZXN1bHQgb3IgZXJyb3Igb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCB0aHJvd2luZyBlcnJvcnMgZm9yIGludmFsaWQgc2VsZWN0b3JzLlxuICAgICAqIHZhciBlbGVtZW50cyA9IF8uYXR0ZW1wdChmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgICAqICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAqIH0sICc+Xz4nKTtcbiAgICAgKlxuICAgICAqIGlmIChfLmlzRXJyb3IoZWxlbWVudHMpKSB7XG4gICAgICogICBlbGVtZW50cyA9IFtdO1xuICAgICAqIH1cbiAgICAgKi9cbiAgICB2YXIgYXR0ZW1wdCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIGFyZ3MpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gaXNFcnJvcihlKSA/IGUgOiBuZXcgRXJyb3IoZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBCaW5kcyBtZXRob2RzIG9mIGFuIG9iamVjdCB0byB0aGUgb2JqZWN0IGl0c2VsZiwgb3ZlcndyaXRpbmcgdGhlIGV4aXN0aW5nXG4gICAgICogbWV0aG9kLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGJvdW5kIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGJpbmQgYW5kIGFzc2lnbiB0aGUgYm91bmQgbWV0aG9kcyB0by5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBtZXRob2ROYW1lcyBUaGUgb2JqZWN0IG1ldGhvZCBuYW1lcyB0byBiaW5kLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB2aWV3ID0ge1xuICAgICAqICAgJ2xhYmVsJzogJ2RvY3MnLFxuICAgICAqICAgJ2NsaWNrJzogZnVuY3Rpb24oKSB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKCdjbGlja2VkICcgKyB0aGlzLmxhYmVsKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5iaW5kQWxsKHZpZXcsIFsnY2xpY2snXSk7XG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHZpZXcuY2xpY2spO1xuICAgICAqIC8vID0+IExvZ3MgJ2NsaWNrZWQgZG9jcycgd2hlbiBjbGlja2VkLlxuICAgICAqL1xuICAgIHZhciBiaW5kQWxsID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBtZXRob2ROYW1lcykge1xuICAgICAgYXJyYXlFYWNoKG1ldGhvZE5hbWVzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAga2V5ID0gdG9LZXkoa2V5KTtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBiaW5kKG9iamVjdFtrZXldLCBvYmplY3QpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGl0ZXJhdGVzIG92ZXIgYHBhaXJzYCBhbmQgaW52b2tlcyB0aGUgY29ycmVzcG9uZGluZ1xuICAgICAqIGZ1bmN0aW9uIG9mIHRoZSBmaXJzdCBwcmVkaWNhdGUgdG8gcmV0dXJuIHRydXRoeS4gVGhlIHByZWRpY2F0ZS1mdW5jdGlvblxuICAgICAqIHBhaXJzIGFyZSBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlIGNyZWF0ZWRcbiAgICAgKiBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFpcnMgVGhlIHByZWRpY2F0ZS1mdW5jdGlvbiBwYWlycy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5jb25kKFtcbiAgICAgKiAgIFtfLm1hdGNoZXMoeyAnYSc6IDEgfSksICAgICAgICAgICBfLmNvbnN0YW50KCdtYXRjaGVzIEEnKV0sXG4gICAgICogICBbXy5jb25mb3Jtcyh7ICdiJzogXy5pc051bWJlciB9KSwgXy5jb25zdGFudCgnbWF0Y2hlcyBCJyldLFxuICAgICAqICAgW18uc3R1YlRydWUsICAgICAgICAgICAgICAgICAgICAgIF8uY29uc3RhbnQoJ25vIG1hdGNoJyldXG4gICAgICogXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gJ21hdGNoZXMgQSdcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6IDAsICdiJzogMSB9KTtcbiAgICAgKiAvLyA9PiAnbWF0Y2hlcyBCJ1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogJzEnLCAnYic6ICcyJyB9KTtcbiAgICAgKiAvLyA9PiAnbm8gbWF0Y2gnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZChwYWlycykge1xuICAgICAgdmFyIGxlbmd0aCA9IHBhaXJzID09IG51bGwgPyAwIDogcGFpcnMubGVuZ3RoLFxuICAgICAgICAgIHRvSXRlcmF0ZWUgPSBnZXRJdGVyYXRlZSgpO1xuXG4gICAgICBwYWlycyA9ICFsZW5ndGggPyBbXSA6IGFycmF5TWFwKHBhaXJzLCBmdW5jdGlvbihwYWlyKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGFpclsxXSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbdG9JdGVyYXRlZShwYWlyWzBdKSwgcGFpclsxXV07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpbmRleF07XG4gICAgICAgICAgaWYgKGFwcGx5KHBhaXJbMF0sIHRoaXMsIGFyZ3MpKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwbHkocGFpclsxXSwgdGhpcywgYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBwcmVkaWNhdGUgcHJvcGVydGllcyBvZiBgc291cmNlYCB3aXRoXG4gICAgICogdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdmFsdWVzIG9mIGEgZ2l2ZW4gb2JqZWN0LCByZXR1cm5pbmcgYHRydWVgIGlmXG4gICAgICogYWxsIHByZWRpY2F0ZXMgcmV0dXJuIHRydXRoeSwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjcmVhdGVkIGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnQgdG8gYF8uY29uZm9ybXNUb2Agd2l0aFxuICAgICAqIGBzb3VyY2VgIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDIsICdiJzogMSB9LFxuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8uY29uZm9ybXMoeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAxOyB9IH0pKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEsICdiJzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmZvcm1zKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGJhc2VDb25mb3JtcyhiYXNlQ2xvbmUoc291cmNlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybiBmcm9tIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29uc3RhbnQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gXy50aW1lcygyLCBfLmNvbnN0YW50KHsgJ2EnOiAxIH0pKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSB9LCB7ICdhJzogMSB9XVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGB2YWx1ZWAgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYSBkZWZhdWx0IHZhbHVlIHNob3VsZCBiZSByZXR1cm5lZCBpblxuICAgICAqIGl0cyBwbGFjZS4gVGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGBudWxsYCxcbiAgICAgKiBvciBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjE0LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7Kn0gZGVmYXVsdFZhbHVlIFRoZSBkZWZhdWx0IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0VG8oMSwgMTApO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdFRvKHVuZGVmaW5lZCwgMTApO1xuICAgICAqIC8vID0+IDEwXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVmYXVsdFRvKHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHJldHVybiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUpID8gZGVmYXVsdFZhbHVlIDogdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGludm9raW5nIHRoZSBnaXZlbiBmdW5jdGlvbnNcbiAgICAgKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbiwgd2hlcmUgZWFjaCBzdWNjZXNzaXZlXG4gICAgICogaW52b2NhdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtmdW5jc10gVGhlIGZ1bmN0aW9ucyB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICAgICAqIEBzZWUgXy5mbG93UmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYWRkU3F1YXJlID0gXy5mbG93KFtfLmFkZCwgc3F1YXJlXSk7XG4gICAgICogYWRkU3F1YXJlKDEsIDIpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKi9cbiAgICB2YXIgZmxvdyA9IGNyZWF0ZUZsb3coKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxvd2AgZXhjZXB0IHRoYXQgaXQgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXRcbiAgICAgKiBpbnZva2VzIHRoZSBnaXZlbiBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2Z1bmNzXSBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQHNlZSBfLmZsb3dcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYWRkU3F1YXJlID0gXy5mbG93UmlnaHQoW3NxdWFyZSwgXy5hZGRdKTtcbiAgICAgKiBhZGRTcXVhcmUoMSwgMik7XG4gICAgICogLy8gPT4gOVxuICAgICAqL1xuICAgIHZhciBmbG93UmlnaHQgPSBjcmVhdGVGbG93KHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3QpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZFxuICAgICAqIGZ1bmN0aW9uLiBJZiBgZnVuY2AgaXMgYSBwcm9wZXJ0eSBuYW1lLCB0aGUgY3JlYXRlZCBmdW5jdGlvbiByZXR1cm5zIHRoZVxuICAgICAqIHByb3BlcnR5IHZhbHVlIGZvciBhIGdpdmVuIGVsZW1lbnQuIElmIGBmdW5jYCBpcyBhbiBhcnJheSBvciBvYmplY3QsIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgY29udGFpbiB0aGUgZXF1aXZhbGVudFxuICAgICAqIHNvdXJjZSBwcm9wZXJ0aWVzLCBvdGhlcndpc2UgaXQgcmV0dXJucyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IFtmdW5jPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGEgY2FsbGJhY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjYWxsYmFjay5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5pdGVyYXRlZSh7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0pKTtcbiAgICAgKiAvLyA9PiBbeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH1dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIF8uaXRlcmF0ZWUoWyd1c2VyJywgJ2ZyZWQnXSkpO1xuICAgICAqIC8vID0+IFt7ICd1c2VyJzogJ2ZyZWQnLCAnYWdlJzogNDAgfV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwKHVzZXJzLCBfLml0ZXJhdGVlKCd1c2VyJykpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gQ3JlYXRlIGN1c3RvbSBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqIF8uaXRlcmF0ZWUgPSBfLndyYXAoXy5pdGVyYXRlZSwgZnVuY3Rpb24oaXRlcmF0ZWUsIGZ1bmMpIHtcbiAgICAgKiAgIHJldHVybiAhXy5pc1JlZ0V4cChmdW5jKSA/IGl0ZXJhdGVlKGZ1bmMpIDogZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICogICAgIHJldHVybiBmdW5jLnRlc3Qoc3RyaW5nKTtcbiAgICAgKiAgIH07XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihbJ2FiYycsICdkZWYnXSwgL2VmLyk7XG4gICAgICogLy8gPT4gWydkZWYnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGl0ZXJhdGVlKGZ1bmMpIHtcbiAgICAgIHJldHVybiBiYXNlSXRlcmF0ZWUodHlwZW9mIGZ1bmMgPT0gJ2Z1bmN0aW9uJyA/IGZ1bmMgOiBiYXNlQ2xvbmUoZnVuYywgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGEgZ2l2ZW5cbiAgICAgKiBvYmplY3QgYW5kIGBzb3VyY2VgLCByZXR1cm5pbmcgYHRydWVgIGlmIHRoZSBnaXZlbiBvYmplY3QgaGFzIGVxdWl2YWxlbnRcbiAgICAgKiBwcm9wZXJ0eSB2YWx1ZXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGUgY3JlYXRlZCBmdW5jdGlvbiBpcyBlcXVpdmFsZW50IHRvIGBfLmlzTWF0Y2hgIHdpdGggYHNvdXJjZWBcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0IGBzb3VyY2VgXG4gICAgICogdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWUgYF8uaXNFcXVhbGBcbiAgICAgKiBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBNdWx0aXBsZSB2YWx1ZXMgY2FuIGJlIGNoZWNrZWQgYnkgY29tYmluaW5nIHNldmVyYWwgbWF0Y2hlcnNcbiAgICAgKiB1c2luZyBgXy5vdmVyU29tZWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LFxuICAgICAqICAgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5tYXRjaGVzKHsgJ2EnOiA0LCAnYyc6IDYgfSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfV1cbiAgICAgKlxuICAgICAqIC8vIENoZWNraW5nIGZvciBzZXZlcmFsIHBvc3NpYmxlIHZhbHVlc1xuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8ub3ZlclNvbWUoW18ubWF0Y2hlcyh7ICdhJzogMSB9KSwgXy5tYXRjaGVzKHsgJ2EnOiA0IH0pXSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfSwgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlcyhzb3VyY2UpIHtcbiAgICAgIHJldHVybiBiYXNlTWF0Y2hlcyhiYXNlQ2xvbmUoc291cmNlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gdGhlXG4gICAgICogdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0IHRvIGBzcmNWYWx1ZWAsIHJldHVybmluZyBgdHJ1ZWAgaWYgdGhlXG4gICAgICogb2JqZWN0IHZhbHVlIGlzIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBQYXJ0aWFsIGNvbXBhcmlzb25zIHdpbGwgbWF0Y2ggZW1wdHkgYXJyYXkgYW5kIGVtcHR5IG9iamVjdFxuICAgICAqIGBzcmNWYWx1ZWAgdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWVcbiAgICAgKiBgXy5pc0VxdWFsYCBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBNdWx0aXBsZSB2YWx1ZXMgY2FuIGJlIGNoZWNrZWQgYnkgY29tYmluaW5nIHNldmVyYWwgbWF0Y2hlcnNcbiAgICAgKiB1c2luZyBgXy5vdmVyU29tZWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LFxuICAgICAqICAgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kKG9iamVjdHMsIF8ubWF0Y2hlc1Byb3BlcnR5KCdhJywgNCkpO1xuICAgICAqIC8vID0+IHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XG4gICAgICpcbiAgICAgKiAvLyBDaGVja2luZyBmb3Igc2V2ZXJhbCBwb3NzaWJsZSB2YWx1ZXNcbiAgICAgKiBfLmZpbHRlcihvYmplY3RzLCBfLm92ZXJTb21lKFtfLm1hdGNoZXNQcm9wZXJ0eSgnYScsIDEpLCBfLm1hdGNoZXNQcm9wZXJ0eSgnYScsIDQpXSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfSwgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBiYXNlQ2xvbmUoc3JjVmFsdWUsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICogQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbnZva2VyIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogXy5jb25zdGFudCgyKSB9IH0sXG4gICAgICogICB7ICdhJzogeyAnYic6IF8uY29uc3RhbnQoMSkgfSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ubWV0aG9kKCdhLmInKSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICpcbiAgICAgKiBfLm1hcChvYmplY3RzLCBfLm1ldGhvZChbJ2EnLCAnYiddKSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgdmFyIG1ldGhvZCA9IGJhc2VSZXN0KGZ1bmN0aW9uKHBhdGgsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ubWV0aG9kYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlc1xuICAgICAqIHRoZSBtZXRob2QgYXQgYSBnaXZlbiBwYXRoIG9mIGBvYmplY3RgLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlXG4gICAgICogcHJvdmlkZWQgdG8gdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludm9rZXIgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IF8udGltZXMoMywgXy5jb25zdGFudCksXG4gICAgICogICAgIG9iamVjdCA9IHsgJ2EnOiBhcnJheSwgJ2InOiBhcnJheSwgJ2MnOiBhcnJheSB9O1xuICAgICAqXG4gICAgICogXy5tYXAoWydhWzJdJywgJ2NbMF0nXSwgXy5tZXRob2RPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKlxuICAgICAqIF8ubWFwKFtbJ2EnLCAnMiddLCBbJ2MnLCAnMCddXSwgXy5tZXRob2RPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKi9cbiAgICB2YXIgbWV0aG9kT2YgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKG9iamVjdCwgcGF0aCwgYXJncyk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBhbGwgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIGZ1bmN0aW9uIHByb3BlcnRpZXMgb2YgYSBzb3VyY2VcbiAgICAgKiBvYmplY3QgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdC4gSWYgYG9iamVjdGAgaXMgYSBmdW5jdGlvbiwgdGhlbiBtZXRob2RzXG4gICAgICogYXJlIGFkZGVkIHRvIGl0cyBwcm90b3R5cGUgYXMgd2VsbC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVc2UgYF8ucnVuSW5Db250ZXh0YCB0byBjcmVhdGUgYSBwcmlzdGluZSBgbG9kYXNoYCBmdW5jdGlvbiB0b1xuICAgICAqIGF2b2lkIGNvbmZsaWN0cyBjYXVzZWQgYnkgbW9kaWZ5aW5nIHRoZSBvcmlnaW5hbC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IFtvYmplY3Q9bG9kYXNoXSBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBmdW5jdGlvbnMgdG8gYWRkLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY2hhaW49dHJ1ZV0gU3BlY2lmeSB3aGV0aGVyIG1peGlucyBhcmUgY2hhaW5hYmxlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHZvd2VscyhzdHJpbmcpIHtcbiAgICAgKiAgIHJldHVybiBfLmZpbHRlcihzdHJpbmcsIGZ1bmN0aW9uKHYpIHtcbiAgICAgKiAgICAgcmV0dXJuIC9bYWVpb3VdL2kudGVzdCh2KTtcbiAgICAgKiAgIH0pO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8ubWl4aW4oeyAndm93ZWxzJzogdm93ZWxzIH0pO1xuICAgICAqIF8udm93ZWxzKCdmcmVkJyk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKlxuICAgICAqIF8oJ2ZyZWQnKS52b3dlbHMoKS52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICpcbiAgICAgKiBfLm1peGluKHsgJ3Zvd2Vscyc6IHZvd2VscyB9LCB7ICdjaGFpbic6IGZhbHNlIH0pO1xuICAgICAqIF8oJ2ZyZWQnKS52b3dlbHMoKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1peGluKG9iamVjdCwgc291cmNlLCBvcHRpb25zKSB7XG4gICAgICB2YXIgcHJvcHMgPSBrZXlzKHNvdXJjZSksXG4gICAgICAgICAgbWV0aG9kTmFtZXMgPSBiYXNlRnVuY3Rpb25zKHNvdXJjZSwgcHJvcHMpO1xuXG4gICAgICBpZiAob3B0aW9ucyA9PSBudWxsICYmXG4gICAgICAgICAgIShpc09iamVjdChzb3VyY2UpICYmIChtZXRob2ROYW1lcy5sZW5ndGggfHwgIXByb3BzLmxlbmd0aCkpKSB7XG4gICAgICAgIG9wdGlvbnMgPSBzb3VyY2U7XG4gICAgICAgIHNvdXJjZSA9IG9iamVjdDtcbiAgICAgICAgb2JqZWN0ID0gdGhpcztcbiAgICAgICAgbWV0aG9kTmFtZXMgPSBiYXNlRnVuY3Rpb25zKHNvdXJjZSwga2V5cyhzb3VyY2UpKTtcbiAgICAgIH1cbiAgICAgIHZhciBjaGFpbiA9ICEoaXNPYmplY3Qob3B0aW9ucykgJiYgJ2NoYWluJyBpbiBvcHRpb25zKSB8fCAhIW9wdGlvbnMuY2hhaW4sXG4gICAgICAgICAgaXNGdW5jID0gaXNGdW5jdGlvbihvYmplY3QpO1xuXG4gICAgICBhcnJheUVhY2gobWV0aG9kTmFtZXMsIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBzb3VyY2VbbWV0aG9kTmFtZV07XG4gICAgICAgIG9iamVjdFttZXRob2ROYW1lXSA9IGZ1bmM7XG4gICAgICAgIGlmIChpc0Z1bmMpIHtcbiAgICAgICAgICBvYmplY3QucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgY2hhaW5BbGwgPSB0aGlzLl9fY2hhaW5fXztcbiAgICAgICAgICAgIGlmIChjaGFpbiB8fCBjaGFpbkFsbCkge1xuICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gb2JqZWN0KHRoaXMuX193cmFwcGVkX18pLFxuICAgICAgICAgICAgICAgICAgYWN0aW9ucyA9IHJlc3VsdC5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh0aGlzLl9fYWN0aW9uc19fKTtcblxuICAgICAgICAgICAgICBhY3Rpb25zLnB1c2goeyAnZnVuYyc6IGZ1bmMsICdhcmdzJzogYXJndW1lbnRzLCAndGhpc0FyZyc6IG9iamVjdCB9KTtcbiAgICAgICAgICAgICAgcmVzdWx0Ll9fY2hhaW5fXyA9IGNoYWluQWxsO1xuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkob2JqZWN0LCBhcnJheVB1c2goW3RoaXMudmFsdWUoKV0sIGFyZ3VtZW50cykpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVydHMgdGhlIGBfYCB2YXJpYWJsZSB0byBpdHMgcHJldmlvdXMgdmFsdWUgYW5kIHJldHVybnMgYSByZWZlcmVuY2UgdG9cbiAgICAgKiB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBsb2Rhc2ggPSBfLm5vQ29uZmxpY3QoKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBub0NvbmZsaWN0KCkge1xuICAgICAgaWYgKHJvb3QuXyA9PT0gdGhpcykge1xuICAgICAgICByb290Ll8gPSBvbGREYXNoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5ub29wKTtcbiAgICAgKiAvLyA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9vcCgpIHtcbiAgICAgIC8vIE5vIG9wZXJhdGlvbiBwZXJmb3JtZWQuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgZ2V0cyB0aGUgYXJndW1lbnQgYXQgaW5kZXggYG5gLiBJZiBgbmAgaXMgbmVnYXRpdmUsXG4gICAgICogdGhlIG50aCBhcmd1bWVudCBmcm9tIHRoZSBlbmQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0wXSBUaGUgaW5kZXggb2YgdGhlIGFyZ3VtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXNzLXRocnUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5udGhBcmcoMSk7XG4gICAgICogZnVuYygnYScsICdiJywgJ2MnLCAnZCcpO1xuICAgICAqIC8vID0+ICdiJ1xuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm50aEFyZygtMik7XG4gICAgICogZnVuYygnYScsICdiJywgJ2MnLCAnZCcpO1xuICAgICAqIC8vID0+ICdjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG50aEFyZyhuKSB7XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VOdGgoYXJncywgbik7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBpdGVyYXRlZXNgIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlc1xuICAgICAqIGFuZCByZXR1cm5zIHRoZWlyIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbaXRlcmF0ZWVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGl0ZXJhdGVlcyB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyKFtNYXRoLm1heCwgTWF0aC5taW5dKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoMSwgMiwgMywgNCk7XG4gICAgICogLy8gPT4gWzQsIDFdXG4gICAgICovXG4gICAgdmFyIG92ZXIgPSBjcmVhdGVPdmVyKGFycmF5TWFwKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiAqKmFsbCoqIG9mIHRoZSBgcHJlZGljYXRlc2AgcmV0dXJuXG4gICAgICogdHJ1dGh5IHdoZW4gaW52b2tlZCB3aXRoIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBGb2xsb3dpbmcgc2hvcnRoYW5kcyBhcmUgcG9zc2libGUgZm9yIHByb3ZpZGluZyBwcmVkaWNhdGVzLlxuICAgICAqIFBhc3MgYW4gYE9iamVjdGAgYW5kIGl0IHdpbGwgYmUgdXNlZCBhcyBhbiBwYXJhbWV0ZXIgZm9yIGBfLm1hdGNoZXNgIHRvIGNyZWF0ZSB0aGUgcHJlZGljYXRlLlxuICAgICAqIFBhc3MgYW4gYEFycmF5YCBvZiBwYXJhbWV0ZXJzIGZvciBgXy5tYXRjaGVzUHJvcGVydHlgIGFuZCB0aGUgcHJlZGljYXRlIHdpbGwgYmUgY3JlYXRlZCB1c2luZyB0aGVtLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3ByZWRpY2F0ZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgcHJlZGljYXRlcyB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJFdmVyeShbQm9vbGVhbiwgaXNGaW5pdGVdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoJzEnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBmdW5jKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgb3ZlckV2ZXJ5ID0gY3JlYXRlT3ZlcihhcnJheUV2ZXJ5KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiAqKmFueSoqIG9mIHRoZSBgcHJlZGljYXRlc2AgcmV0dXJuXG4gICAgICogdHJ1dGh5IHdoZW4gaW52b2tlZCB3aXRoIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBGb2xsb3dpbmcgc2hvcnRoYW5kcyBhcmUgcG9zc2libGUgZm9yIHByb3ZpZGluZyBwcmVkaWNhdGVzLlxuICAgICAqIFBhc3MgYW4gYE9iamVjdGAgYW5kIGl0IHdpbGwgYmUgdXNlZCBhcyBhbiBwYXJhbWV0ZXIgZm9yIGBfLm1hdGNoZXNgIHRvIGNyZWF0ZSB0aGUgcHJlZGljYXRlLlxuICAgICAqIFBhc3MgYW4gYEFycmF5YCBvZiBwYXJhbWV0ZXJzIGZvciBgXy5tYXRjaGVzUHJvcGVydHlgIGFuZCB0aGUgcHJlZGljYXRlIHdpbGwgYmUgY3JlYXRlZCB1c2luZyB0aGVtLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3ByZWRpY2F0ZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgcHJlZGljYXRlcyB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJTb21lKFtCb29sZWFuLCBpc0Zpbml0ZV0pO1xuICAgICAqXG4gICAgICogZnVuYygnMScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiB2YXIgbWF0Y2hlc0Z1bmMgPSBfLm92ZXJTb21lKFt7ICdhJzogMSB9LCB7ICdhJzogMiB9XSlcbiAgICAgKiB2YXIgbWF0Y2hlc1Byb3BlcnR5RnVuYyA9IF8ub3ZlclNvbWUoW1snYScsIDFdLCBbJ2EnLCAyXV0pXG4gICAgICovXG4gICAgdmFyIG92ZXJTb21lID0gY3JlYXRlT3ZlcihhcnJheVNvbWUpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogMiB9IH0sXG4gICAgICogICB7ICdhJzogeyAnYic6IDEgfSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ucHJvcGVydHkoJ2EuYicpKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKlxuICAgICAqIF8ubWFwKF8uc29ydEJ5KG9iamVjdHMsIF8ucHJvcGVydHkoWydhJywgJ2InXSkpLCAnYS5iJyk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvcGVydHkocGF0aCkge1xuICAgICAgcmV0dXJuIGlzS2V5KHBhdGgpID8gYmFzZVByb3BlcnR5KHRvS2V5KHBhdGgpKSA6IGJhc2VQcm9wZXJ0eURlZXAocGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnByb3BlcnR5YDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJuc1xuICAgICAqIHRoZSB2YWx1ZSBhdCBhIGdpdmVuIHBhdGggb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzAsIDEsIDJdLFxuICAgICAqICAgICBvYmplY3QgPSB7ICdhJzogYXJyYXksICdiJzogYXJyYXksICdjJzogYXJyYXkgfTtcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnYVsyXScsICdjWzBdJ10sIF8ucHJvcGVydHlPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKlxuICAgICAqIF8ubWFwKFtbJ2EnLCAnMiddLCBbJ2MnLCAnMCddXSwgXy5wcm9wZXJ0eU9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHByb3BlcnR5T2Yob2JqZWN0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgbnVtYmVycyAocG9zaXRpdmUgYW5kL29yIG5lZ2F0aXZlKSBwcm9ncmVzc2luZyBmcm9tXG4gICAgICogYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLiBBIHN0ZXAgb2YgYC0xYCBpcyB1c2VkIGlmIGEgbmVnYXRpdmVcbiAgICAgKiBgc3RhcnRgIGlzIHNwZWNpZmllZCB3aXRob3V0IGFuIGBlbmRgIG9yIGBzdGVwYC4gSWYgYGVuZGAgaXMgbm90IHNwZWNpZmllZCxcbiAgICAgKiBpdCdzIHNldCB0byBgc3RhcnRgIHdpdGggYHN0YXJ0YCB0aGVuIHNldCB0byBgMGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSmF2YVNjcmlwdCBmb2xsb3dzIHRoZSBJRUVFLTc1NCBzdGFuZGFyZCBmb3IgcmVzb2x2aW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgdmFsdWVzIHdoaWNoIGNhbiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwPTFdIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKiBAc2VlIF8uaW5SYW5nZSwgXy5yYW5nZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoNCk7XG4gICAgICogLy8gPT4gWzAsIDEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKC00KTtcbiAgICAgKiAvLyA9PiBbMCwgLTEsIC0yLCAtM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDRdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDAsIDIwLCA1KTtcbiAgICAgKiAvLyA9PiBbMCwgNSwgMTAsIDE1XVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwLCAtNCwgLTEpO1xuICAgICAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgxLCA0LCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICB2YXIgcmFuZ2UgPSBjcmVhdGVSYW5nZSgpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5yYW5nZWAgZXhjZXB0IHRoYXQgaXQgcG9wdWxhdGVzIHZhbHVlcyBpblxuICAgICAqIGRlc2NlbmRpbmcgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RlcD0xXSBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICogQHNlZSBfLmluUmFuZ2UsIF8ucmFuZ2VcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDQpO1xuICAgICAqIC8vID0+IFszLCAyLCAxLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KC00KTtcbiAgICAgKiAvLyA9PiBbLTMsIC0yLCAtMSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgxLCA1KTtcbiAgICAgKiAvLyA9PiBbNCwgMywgMiwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwLCAyMCwgNSk7XG4gICAgICogLy8gPT4gWzE1LCAxMCwgNSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwLCAtNCwgLTEpO1xuICAgICAqIC8vID0+IFstMywgLTIsIC0xLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDEsIDQsIDApO1xuICAgICAqIC8vID0+IFsxLCAxLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgdmFyIHJhbmdlUmlnaHQgPSBjcmVhdGVSYW5nZSh0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5cyA9IF8udGltZXMoMiwgXy5zdHViQXJyYXkpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAgICAgKiAvLyA9PiBbW10sIFtdXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICAgICAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uc3R1Yk9iamVjdCk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzKTtcbiAgICAgKiAvLyA9PiBbe30sIHt9XVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViT2JqZWN0KCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYW4gZW1wdHkgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZW1wdHkgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YlN0cmluZyk7XG4gICAgICogLy8gPT4gWycnLCAnJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViU3RyaW5nKCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYHRydWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YlRydWUpO1xuICAgICAqIC8vID0+IFt0cnVlLCB0cnVlXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJUcnVlKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgaXRlcmF0ZWUgYG5gIHRpbWVzLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2ZcbiAgICAgKiBlYWNoIGludm9jYXRpb24uIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAoaW5kZXgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygzLCBTdHJpbmcpO1xuICAgICAqIC8vID0+IFsnMCcsICcxJywgJzInXVxuICAgICAqXG4gICAgICogIF8udGltZXMoNCwgXy5jb25zdGFudCgwKSk7XG4gICAgICogLy8gPT4gWzAsIDAsIDAsIDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICBpZiAobiA8IDEgfHwgbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gTUFYX0FSUkFZX0xFTkdUSCxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4obiwgTUFYX0FSUkFZX0xFTkdUSCk7XG5cbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUpO1xuICAgICAgbiAtPSBNQVhfQVJSQVlfTEVOR1RIO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZVRpbWVzKGxlbmd0aCwgaXRlcmF0ZWUpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgICAgIGl0ZXJhdGVlKGluZGV4KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1BhdGgoJ2EuYi5jJyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICpcbiAgICAgKiBfLnRvUGF0aCgnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnMCcsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvUGF0aCh2YWx1ZSkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgdG9LZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU3ltYm9sKHZhbHVlKSA/IFt2YWx1ZV0gOiBjb3B5QXJyYXkoc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIHVuaXF1ZSBJRC4gSWYgYHByZWZpeGAgaXMgZ2l2ZW4sIHRoZSBJRCBpcyBhcHBlbmRlZCB0byBpdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtwcmVmaXg9JyddIFRoZSB2YWx1ZSB0byBwcmVmaXggdGhlIElEIHdpdGguXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5pcXVlIElELlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXF1ZUlkKCdjb250YWN0XycpO1xuICAgICAqIC8vID0+ICdjb250YWN0XzEwNCdcbiAgICAgKlxuICAgICAqIF8udW5pcXVlSWQoKTtcbiAgICAgKiAvLyA9PiAnMTA1J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXF1ZUlkKHByZWZpeCkge1xuICAgICAgdmFyIGlkID0gKytpZENvdW50ZXI7XG4gICAgICByZXR1cm4gdG9TdHJpbmcocHJlZml4KSArIGlkO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEFkZHMgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhdWdlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhbiBhZGRpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYWRkZW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGFuIGFkZGl0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRvdGFsLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmFkZCg2LCA0KTtcbiAgICAgKiAvLyA9PiAxMFxuICAgICAqL1xuICAgIHZhciBhZGQgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKGF1Z2VuZCwgYWRkZW5kKSB7XG4gICAgICByZXR1cm4gYXVnZW5kICsgYWRkZW5kO1xuICAgIH0sIDApO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCB1cCB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZCB1cC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIHVwIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgdXAgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNlaWwoNC4wMDYpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKlxuICAgICAqIF8uY2VpbCg2LjAwNCwgMik7XG4gICAgICogLy8gPT4gNi4wMVxuICAgICAqXG4gICAgICogXy5jZWlsKDYwNDAsIC0yKTtcbiAgICAgKiAvLyA9PiA2MTAwXG4gICAgICovXG4gICAgdmFyIGNlaWwgPSBjcmVhdGVSb3VuZCgnY2VpbCcpO1xuXG4gICAgLyoqXG4gICAgICogRGl2aWRlIHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGl2aWRlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhIGRpdmlzaW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaXZpc29yIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgZGl2aXNpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcXVvdGllbnQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGl2aWRlKDYsIDQpO1xuICAgICAqIC8vID0+IDEuNVxuICAgICAqL1xuICAgIHZhciBkaXZpZGUgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKGRpdmlkZW5kLCBkaXZpc29yKSB7XG4gICAgICByZXR1cm4gZGl2aWRlbmQgLyBkaXZpc29yO1xuICAgIH0sIDEpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCBkb3duIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kIGRvd24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249MF0gVGhlIHByZWNpc2lvbiB0byByb3VuZCBkb3duIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgZG93biBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoNC4wMDYpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoMC4wNDYsIDIpO1xuICAgICAqIC8vID0+IDAuMDRcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoNDA2MCwgLTIpO1xuICAgICAqIC8vID0+IDQwMDBcbiAgICAgKi9cbiAgICB2YXIgZmxvb3IgPSBjcmVhdGVSb3VuZCgnZmxvb3InKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtYXhpbXVtIHZhbHVlIG9mIGBhcnJheWAuIElmIGBhcnJheWAgaXMgZW1wdHkgb3IgZmFsc2V5LFxuICAgICAqIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXhpbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1heChbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDhcbiAgICAgKlxuICAgICAqIF8ubWF4KFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXgoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgaWRlbnRpdHksIGJhc2VHdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tYXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB0aGUgdmFsdWUgaXMgcmFua2VkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiAxIH0sIHsgJ24nOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5tYXhCeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IHsgJ24nOiAyIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWF4Qnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiB7ICduJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF4QnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYmFzZUd0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbWVhbiBvZiB0aGUgdmFsdWVzIGluIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbWVhbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tZWFuKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lYW4oYXJyYXkpIHtcbiAgICAgIHJldHVybiBiYXNlTWVhbihhcnJheSwgaWRlbnRpdHkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWVhbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIHZhbHVlIHRvIGJlIGF2ZXJhZ2VkLlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogNCB9LCB7ICduJzogMiB9LCB7ICduJzogOCB9LCB7ICduJzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8ubWVhbkJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tZWFuQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVhbkJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VNZWFuKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtaW5pbXVtIHZhbHVlIG9mIGBhcnJheWAuIElmIGBhcnJheWAgaXMgZW1wdHkgb3IgZmFsc2V5LFxuICAgICAqIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtaW5pbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1pbihbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIF8ubWluKFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaW4oYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgaWRlbnRpdHksIGJhc2VMdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5taW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB0aGUgdmFsdWUgaXMgcmFua2VkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiAxIH0sIHsgJ24nOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5taW5CeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IHsgJ24nOiAxIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWluQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiB7ICduJzogMSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWluQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYmFzZUx0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNdWx0aXBseSB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG11bHRpcGxpZXIgVGhlIGZpcnN0IG51bWJlciBpbiBhIG11bHRpcGxpY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtdWx0aXBsaWNhbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBtdWx0aXBsaWNhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBwcm9kdWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm11bHRpcGx5KDYsIDQpO1xuICAgICAqIC8vID0+IDI0XG4gICAgICovXG4gICAgdmFyIG11bHRpcGx5ID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihtdWx0aXBsaWVyLCBtdWx0aXBsaWNhbmQpIHtcbiAgICAgIHJldHVybiBtdWx0aXBsaWVyICogbXVsdGlwbGljYW5kO1xuICAgIH0sIDEpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQuMDA2LCAyKTtcbiAgICAgKiAvLyA9PiA0LjAxXG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQwNjAsIC0yKTtcbiAgICAgKiAvLyA9PiA0MTAwXG4gICAgICovXG4gICAgdmFyIHJvdW5kID0gY3JlYXRlUm91bmQoJ3JvdW5kJyk7XG5cbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdCB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1pbnVlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhIHN1YnRyYWN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdWJ0cmFoZW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgc3VidHJhY3Rpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgZGlmZmVyZW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdWJ0cmFjdCg2LCA0KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgdmFyIHN1YnRyYWN0ID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihtaW51ZW5kLCBzdWJ0cmFoZW5kKSB7XG4gICAgICByZXR1cm4gbWludWVuZCAtIHN1YnRyYWhlbmQ7XG4gICAgfSwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgc3VtIG9mIHRoZSB2YWx1ZXMgaW4gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjQuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3VtKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdW0oYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTdW0oYXJyYXksIGlkZW50aXR5KVxuICAgICAgICA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zdW1gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSB2YWx1ZSB0byBiZSBzdW1tZWQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDQgfSwgeyAnbic6IDIgfSwgeyAnbic6IDggfSwgeyAnbic6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLnN1bUJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc3VtQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1bUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVN1bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IDA7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdGhhdCByZXR1cm4gd3JhcHBlZCB2YWx1ZXMgaW4gY2hhaW4gc2VxdWVuY2VzLlxuICAgIGxvZGFzaC5hZnRlciA9IGFmdGVyO1xuICAgIGxvZGFzaC5hcnkgPSBhcnk7XG4gICAgbG9kYXNoLmFzc2lnbiA9IGFzc2lnbjtcbiAgICBsb2Rhc2guYXNzaWduSW4gPSBhc3NpZ25JbjtcbiAgICBsb2Rhc2guYXNzaWduSW5XaXRoID0gYXNzaWduSW5XaXRoO1xuICAgIGxvZGFzaC5hc3NpZ25XaXRoID0gYXNzaWduV2l0aDtcbiAgICBsb2Rhc2guYXQgPSBhdDtcbiAgICBsb2Rhc2guYmVmb3JlID0gYmVmb3JlO1xuICAgIGxvZGFzaC5iaW5kID0gYmluZDtcbiAgICBsb2Rhc2guYmluZEFsbCA9IGJpbmRBbGw7XG4gICAgbG9kYXNoLmJpbmRLZXkgPSBiaW5kS2V5O1xuICAgIGxvZGFzaC5jYXN0QXJyYXkgPSBjYXN0QXJyYXk7XG4gICAgbG9kYXNoLmNoYWluID0gY2hhaW47XG4gICAgbG9kYXNoLmNodW5rID0gY2h1bms7XG4gICAgbG9kYXNoLmNvbXBhY3QgPSBjb21wYWN0O1xuICAgIGxvZGFzaC5jb25jYXQgPSBjb25jYXQ7XG4gICAgbG9kYXNoLmNvbmQgPSBjb25kO1xuICAgIGxvZGFzaC5jb25mb3JtcyA9IGNvbmZvcm1zO1xuICAgIGxvZGFzaC5jb25zdGFudCA9IGNvbnN0YW50O1xuICAgIGxvZGFzaC5jb3VudEJ5ID0gY291bnRCeTtcbiAgICBsb2Rhc2guY3JlYXRlID0gY3JlYXRlO1xuICAgIGxvZGFzaC5jdXJyeSA9IGN1cnJ5O1xuICAgIGxvZGFzaC5jdXJyeVJpZ2h0ID0gY3VycnlSaWdodDtcbiAgICBsb2Rhc2guZGVib3VuY2UgPSBkZWJvdW5jZTtcbiAgICBsb2Rhc2guZGVmYXVsdHMgPSBkZWZhdWx0cztcbiAgICBsb2Rhc2guZGVmYXVsdHNEZWVwID0gZGVmYXVsdHNEZWVwO1xuICAgIGxvZGFzaC5kZWZlciA9IGRlZmVyO1xuICAgIGxvZGFzaC5kZWxheSA9IGRlbGF5O1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlID0gZGlmZmVyZW5jZTtcbiAgICBsb2Rhc2guZGlmZmVyZW5jZUJ5ID0gZGlmZmVyZW5jZUJ5O1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlV2l0aCA9IGRpZmZlcmVuY2VXaXRoO1xuICAgIGxvZGFzaC5kcm9wID0gZHJvcDtcbiAgICBsb2Rhc2guZHJvcFJpZ2h0ID0gZHJvcFJpZ2h0O1xuICAgIGxvZGFzaC5kcm9wUmlnaHRXaGlsZSA9IGRyb3BSaWdodFdoaWxlO1xuICAgIGxvZGFzaC5kcm9wV2hpbGUgPSBkcm9wV2hpbGU7XG4gICAgbG9kYXNoLmZpbGwgPSBmaWxsO1xuICAgIGxvZGFzaC5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgbG9kYXNoLmZsYXRNYXAgPSBmbGF0TWFwO1xuICAgIGxvZGFzaC5mbGF0TWFwRGVlcCA9IGZsYXRNYXBEZWVwO1xuICAgIGxvZGFzaC5mbGF0TWFwRGVwdGggPSBmbGF0TWFwRGVwdGg7XG4gICAgbG9kYXNoLmZsYXR0ZW4gPSBmbGF0dGVuO1xuICAgIGxvZGFzaC5mbGF0dGVuRGVlcCA9IGZsYXR0ZW5EZWVwO1xuICAgIGxvZGFzaC5mbGF0dGVuRGVwdGggPSBmbGF0dGVuRGVwdGg7XG4gICAgbG9kYXNoLmZsaXAgPSBmbGlwO1xuICAgIGxvZGFzaC5mbG93ID0gZmxvdztcbiAgICBsb2Rhc2guZmxvd1JpZ2h0ID0gZmxvd1JpZ2h0O1xuICAgIGxvZGFzaC5mcm9tUGFpcnMgPSBmcm9tUGFpcnM7XG4gICAgbG9kYXNoLmZ1bmN0aW9ucyA9IGZ1bmN0aW9ucztcbiAgICBsb2Rhc2guZnVuY3Rpb25zSW4gPSBmdW5jdGlvbnNJbjtcbiAgICBsb2Rhc2guZ3JvdXBCeSA9IGdyb3VwQnk7XG4gICAgbG9kYXNoLmluaXRpYWwgPSBpbml0aWFsO1xuICAgIGxvZGFzaC5pbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3Rpb247XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbkJ5ID0gaW50ZXJzZWN0aW9uQnk7XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbldpdGggPSBpbnRlcnNlY3Rpb25XaXRoO1xuICAgIGxvZGFzaC5pbnZlcnQgPSBpbnZlcnQ7XG4gICAgbG9kYXNoLmludmVydEJ5ID0gaW52ZXJ0Qnk7XG4gICAgbG9kYXNoLmludm9rZU1hcCA9IGludm9rZU1hcDtcbiAgICBsb2Rhc2guaXRlcmF0ZWUgPSBpdGVyYXRlZTtcbiAgICBsb2Rhc2gua2V5QnkgPSBrZXlCeTtcbiAgICBsb2Rhc2gua2V5cyA9IGtleXM7XG4gICAgbG9kYXNoLmtleXNJbiA9IGtleXNJbjtcbiAgICBsb2Rhc2gubWFwID0gbWFwO1xuICAgIGxvZGFzaC5tYXBLZXlzID0gbWFwS2V5cztcbiAgICBsb2Rhc2gubWFwVmFsdWVzID0gbWFwVmFsdWVzO1xuICAgIGxvZGFzaC5tYXRjaGVzID0gbWF0Y2hlcztcbiAgICBsb2Rhc2gubWF0Y2hlc1Byb3BlcnR5ID0gbWF0Y2hlc1Byb3BlcnR5O1xuICAgIGxvZGFzaC5tZW1vaXplID0gbWVtb2l6ZTtcbiAgICBsb2Rhc2gubWVyZ2UgPSBtZXJnZTtcbiAgICBsb2Rhc2gubWVyZ2VXaXRoID0gbWVyZ2VXaXRoO1xuICAgIGxvZGFzaC5tZXRob2QgPSBtZXRob2Q7XG4gICAgbG9kYXNoLm1ldGhvZE9mID0gbWV0aG9kT2Y7XG4gICAgbG9kYXNoLm1peGluID0gbWl4aW47XG4gICAgbG9kYXNoLm5lZ2F0ZSA9IG5lZ2F0ZTtcbiAgICBsb2Rhc2gubnRoQXJnID0gbnRoQXJnO1xuICAgIGxvZGFzaC5vbWl0ID0gb21pdDtcbiAgICBsb2Rhc2gub21pdEJ5ID0gb21pdEJ5O1xuICAgIGxvZGFzaC5vbmNlID0gb25jZTtcbiAgICBsb2Rhc2gub3JkZXJCeSA9IG9yZGVyQnk7XG4gICAgbG9kYXNoLm92ZXIgPSBvdmVyO1xuICAgIGxvZGFzaC5vdmVyQXJncyA9IG92ZXJBcmdzO1xuICAgIGxvZGFzaC5vdmVyRXZlcnkgPSBvdmVyRXZlcnk7XG4gICAgbG9kYXNoLm92ZXJTb21lID0gb3ZlclNvbWU7XG4gICAgbG9kYXNoLnBhcnRpYWwgPSBwYXJ0aWFsO1xuICAgIGxvZGFzaC5wYXJ0aWFsUmlnaHQgPSBwYXJ0aWFsUmlnaHQ7XG4gICAgbG9kYXNoLnBhcnRpdGlvbiA9IHBhcnRpdGlvbjtcbiAgICBsb2Rhc2gucGljayA9IHBpY2s7XG4gICAgbG9kYXNoLnBpY2tCeSA9IHBpY2tCeTtcbiAgICBsb2Rhc2gucHJvcGVydHkgPSBwcm9wZXJ0eTtcbiAgICBsb2Rhc2gucHJvcGVydHlPZiA9IHByb3BlcnR5T2Y7XG4gICAgbG9kYXNoLnB1bGwgPSBwdWxsO1xuICAgIGxvZGFzaC5wdWxsQWxsID0gcHVsbEFsbDtcbiAgICBsb2Rhc2gucHVsbEFsbEJ5ID0gcHVsbEFsbEJ5O1xuICAgIGxvZGFzaC5wdWxsQWxsV2l0aCA9IHB1bGxBbGxXaXRoO1xuICAgIGxvZGFzaC5wdWxsQXQgPSBwdWxsQXQ7XG4gICAgbG9kYXNoLnJhbmdlID0gcmFuZ2U7XG4gICAgbG9kYXNoLnJhbmdlUmlnaHQgPSByYW5nZVJpZ2h0O1xuICAgIGxvZGFzaC5yZWFyZyA9IHJlYXJnO1xuICAgIGxvZGFzaC5yZWplY3QgPSByZWplY3Q7XG4gICAgbG9kYXNoLnJlbW92ZSA9IHJlbW92ZTtcbiAgICBsb2Rhc2gucmVzdCA9IHJlc3Q7XG4gICAgbG9kYXNoLnJldmVyc2UgPSByZXZlcnNlO1xuICAgIGxvZGFzaC5zYW1wbGVTaXplID0gc2FtcGxlU2l6ZTtcbiAgICBsb2Rhc2guc2V0ID0gc2V0O1xuICAgIGxvZGFzaC5zZXRXaXRoID0gc2V0V2l0aDtcbiAgICBsb2Rhc2guc2h1ZmZsZSA9IHNodWZmbGU7XG4gICAgbG9kYXNoLnNsaWNlID0gc2xpY2U7XG4gICAgbG9kYXNoLnNvcnRCeSA9IHNvcnRCeTtcbiAgICBsb2Rhc2guc29ydGVkVW5pcSA9IHNvcnRlZFVuaXE7XG4gICAgbG9kYXNoLnNvcnRlZFVuaXFCeSA9IHNvcnRlZFVuaXFCeTtcbiAgICBsb2Rhc2guc3BsaXQgPSBzcGxpdDtcbiAgICBsb2Rhc2guc3ByZWFkID0gc3ByZWFkO1xuICAgIGxvZGFzaC50YWlsID0gdGFpbDtcbiAgICBsb2Rhc2gudGFrZSA9IHRha2U7XG4gICAgbG9kYXNoLnRha2VSaWdodCA9IHRha2VSaWdodDtcbiAgICBsb2Rhc2gudGFrZVJpZ2h0V2hpbGUgPSB0YWtlUmlnaHRXaGlsZTtcbiAgICBsb2Rhc2gudGFrZVdoaWxlID0gdGFrZVdoaWxlO1xuICAgIGxvZGFzaC50YXAgPSB0YXA7XG4gICAgbG9kYXNoLnRocm90dGxlID0gdGhyb3R0bGU7XG4gICAgbG9kYXNoLnRocnUgPSB0aHJ1O1xuICAgIGxvZGFzaC50b0FycmF5ID0gdG9BcnJheTtcbiAgICBsb2Rhc2gudG9QYWlycyA9IHRvUGFpcnM7XG4gICAgbG9kYXNoLnRvUGFpcnNJbiA9IHRvUGFpcnNJbjtcbiAgICBsb2Rhc2gudG9QYXRoID0gdG9QYXRoO1xuICAgIGxvZGFzaC50b1BsYWluT2JqZWN0ID0gdG9QbGFpbk9iamVjdDtcbiAgICBsb2Rhc2gudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgIGxvZGFzaC51bmFyeSA9IHVuYXJ5O1xuICAgIGxvZGFzaC51bmlvbiA9IHVuaW9uO1xuICAgIGxvZGFzaC51bmlvbkJ5ID0gdW5pb25CeTtcbiAgICBsb2Rhc2gudW5pb25XaXRoID0gdW5pb25XaXRoO1xuICAgIGxvZGFzaC51bmlxID0gdW5pcTtcbiAgICBsb2Rhc2gudW5pcUJ5ID0gdW5pcUJ5O1xuICAgIGxvZGFzaC51bmlxV2l0aCA9IHVuaXFXaXRoO1xuICAgIGxvZGFzaC51bnNldCA9IHVuc2V0O1xuICAgIGxvZGFzaC51bnppcCA9IHVuemlwO1xuICAgIGxvZGFzaC51bnppcFdpdGggPSB1bnppcFdpdGg7XG4gICAgbG9kYXNoLnVwZGF0ZSA9IHVwZGF0ZTtcbiAgICBsb2Rhc2gudXBkYXRlV2l0aCA9IHVwZGF0ZVdpdGg7XG4gICAgbG9kYXNoLnZhbHVlcyA9IHZhbHVlcztcbiAgICBsb2Rhc2gudmFsdWVzSW4gPSB2YWx1ZXNJbjtcbiAgICBsb2Rhc2gud2l0aG91dCA9IHdpdGhvdXQ7XG4gICAgbG9kYXNoLndvcmRzID0gd29yZHM7XG4gICAgbG9kYXNoLndyYXAgPSB3cmFwO1xuICAgIGxvZGFzaC54b3IgPSB4b3I7XG4gICAgbG9kYXNoLnhvckJ5ID0geG9yQnk7XG4gICAgbG9kYXNoLnhvcldpdGggPSB4b3JXaXRoO1xuICAgIGxvZGFzaC56aXAgPSB6aXA7XG4gICAgbG9kYXNoLnppcE9iamVjdCA9IHppcE9iamVjdDtcbiAgICBsb2Rhc2guemlwT2JqZWN0RGVlcCA9IHppcE9iamVjdERlZXA7XG4gICAgbG9kYXNoLnppcFdpdGggPSB6aXBXaXRoO1xuXG4gICAgLy8gQWRkIGFsaWFzZXMuXG4gICAgbG9kYXNoLmVudHJpZXMgPSB0b1BhaXJzO1xuICAgIGxvZGFzaC5lbnRyaWVzSW4gPSB0b1BhaXJzSW47XG4gICAgbG9kYXNoLmV4dGVuZCA9IGFzc2lnbkluO1xuICAgIGxvZGFzaC5leHRlbmRXaXRoID0gYXNzaWduSW5XaXRoO1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIG1peGluKGxvZGFzaCwgbG9kYXNoKTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8vIEFkZCBtZXRob2RzIHRoYXQgcmV0dXJuIHVud3JhcHBlZCB2YWx1ZXMgaW4gY2hhaW4gc2VxdWVuY2VzLlxuICAgIGxvZGFzaC5hZGQgPSBhZGQ7XG4gICAgbG9kYXNoLmF0dGVtcHQgPSBhdHRlbXB0O1xuICAgIGxvZGFzaC5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG4gICAgbG9kYXNoLmNhcGl0YWxpemUgPSBjYXBpdGFsaXplO1xuICAgIGxvZGFzaC5jZWlsID0gY2VpbDtcbiAgICBsb2Rhc2guY2xhbXAgPSBjbGFtcDtcbiAgICBsb2Rhc2guY2xvbmUgPSBjbG9uZTtcbiAgICBsb2Rhc2guY2xvbmVEZWVwID0gY2xvbmVEZWVwO1xuICAgIGxvZGFzaC5jbG9uZURlZXBXaXRoID0gY2xvbmVEZWVwV2l0aDtcbiAgICBsb2Rhc2guY2xvbmVXaXRoID0gY2xvbmVXaXRoO1xuICAgIGxvZGFzaC5jb25mb3Jtc1RvID0gY29uZm9ybXNUbztcbiAgICBsb2Rhc2guZGVidXJyID0gZGVidXJyO1xuICAgIGxvZGFzaC5kZWZhdWx0VG8gPSBkZWZhdWx0VG87XG4gICAgbG9kYXNoLmRpdmlkZSA9IGRpdmlkZTtcbiAgICBsb2Rhc2guZW5kc1dpdGggPSBlbmRzV2l0aDtcbiAgICBsb2Rhc2guZXEgPSBlcTtcbiAgICBsb2Rhc2guZXNjYXBlID0gZXNjYXBlO1xuICAgIGxvZGFzaC5lc2NhcGVSZWdFeHAgPSBlc2NhcGVSZWdFeHA7XG4gICAgbG9kYXNoLmV2ZXJ5ID0gZXZlcnk7XG4gICAgbG9kYXNoLmZpbmQgPSBmaW5kO1xuICAgIGxvZGFzaC5maW5kSW5kZXggPSBmaW5kSW5kZXg7XG4gICAgbG9kYXNoLmZpbmRLZXkgPSBmaW5kS2V5O1xuICAgIGxvZGFzaC5maW5kTGFzdCA9IGZpbmRMYXN0O1xuICAgIGxvZGFzaC5maW5kTGFzdEluZGV4ID0gZmluZExhc3RJbmRleDtcbiAgICBsb2Rhc2guZmluZExhc3RLZXkgPSBmaW5kTGFzdEtleTtcbiAgICBsb2Rhc2guZmxvb3IgPSBmbG9vcjtcbiAgICBsb2Rhc2guZm9yRWFjaCA9IGZvckVhY2g7XG4gICAgbG9kYXNoLmZvckVhY2hSaWdodCA9IGZvckVhY2hSaWdodDtcbiAgICBsb2Rhc2guZm9ySW4gPSBmb3JJbjtcbiAgICBsb2Rhc2guZm9ySW5SaWdodCA9IGZvckluUmlnaHQ7XG4gICAgbG9kYXNoLmZvck93biA9IGZvck93bjtcbiAgICBsb2Rhc2guZm9yT3duUmlnaHQgPSBmb3JPd25SaWdodDtcbiAgICBsb2Rhc2guZ2V0ID0gZ2V0O1xuICAgIGxvZGFzaC5ndCA9IGd0O1xuICAgIGxvZGFzaC5ndGUgPSBndGU7XG4gICAgbG9kYXNoLmhhcyA9IGhhcztcbiAgICBsb2Rhc2guaGFzSW4gPSBoYXNJbjtcbiAgICBsb2Rhc2guaGVhZCA9IGhlYWQ7XG4gICAgbG9kYXNoLmlkZW50aXR5ID0gaWRlbnRpdHk7XG4gICAgbG9kYXNoLmluY2x1ZGVzID0gaW5jbHVkZXM7XG4gICAgbG9kYXNoLmluZGV4T2YgPSBpbmRleE9mO1xuICAgIGxvZGFzaC5pblJhbmdlID0gaW5SYW5nZTtcbiAgICBsb2Rhc2guaW52b2tlID0gaW52b2tlO1xuICAgIGxvZGFzaC5pc0FyZ3VtZW50cyA9IGlzQXJndW1lbnRzO1xuICAgIGxvZGFzaC5pc0FycmF5ID0gaXNBcnJheTtcbiAgICBsb2Rhc2guaXNBcnJheUJ1ZmZlciA9IGlzQXJyYXlCdWZmZXI7XG4gICAgbG9kYXNoLmlzQXJyYXlMaWtlID0gaXNBcnJheUxpa2U7XG4gICAgbG9kYXNoLmlzQXJyYXlMaWtlT2JqZWN0ID0gaXNBcnJheUxpa2VPYmplY3Q7XG4gICAgbG9kYXNoLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcbiAgICBsb2Rhc2guaXNCdWZmZXIgPSBpc0J1ZmZlcjtcbiAgICBsb2Rhc2guaXNEYXRlID0gaXNEYXRlO1xuICAgIGxvZGFzaC5pc0VsZW1lbnQgPSBpc0VsZW1lbnQ7XG4gICAgbG9kYXNoLmlzRW1wdHkgPSBpc0VtcHR5O1xuICAgIGxvZGFzaC5pc0VxdWFsID0gaXNFcXVhbDtcbiAgICBsb2Rhc2guaXNFcXVhbFdpdGggPSBpc0VxdWFsV2l0aDtcbiAgICBsb2Rhc2guaXNFcnJvciA9IGlzRXJyb3I7XG4gICAgbG9kYXNoLmlzRmluaXRlID0gaXNGaW5pdGU7XG4gICAgbG9kYXNoLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuICAgIGxvZGFzaC5pc0ludGVnZXIgPSBpc0ludGVnZXI7XG4gICAgbG9kYXNoLmlzTGVuZ3RoID0gaXNMZW5ndGg7XG4gICAgbG9kYXNoLmlzTWFwID0gaXNNYXA7XG4gICAgbG9kYXNoLmlzTWF0Y2ggPSBpc01hdGNoO1xuICAgIGxvZGFzaC5pc01hdGNoV2l0aCA9IGlzTWF0Y2hXaXRoO1xuICAgIGxvZGFzaC5pc05hTiA9IGlzTmFOO1xuICAgIGxvZGFzaC5pc05hdGl2ZSA9IGlzTmF0aXZlO1xuICAgIGxvZGFzaC5pc05pbCA9IGlzTmlsO1xuICAgIGxvZGFzaC5pc051bGwgPSBpc051bGw7XG4gICAgbG9kYXNoLmlzTnVtYmVyID0gaXNOdW1iZXI7XG4gICAgbG9kYXNoLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG4gICAgbG9kYXNoLmlzT2JqZWN0TGlrZSA9IGlzT2JqZWN0TGlrZTtcbiAgICBsb2Rhc2guaXNQbGFpbk9iamVjdCA9IGlzUGxhaW5PYmplY3Q7XG4gICAgbG9kYXNoLmlzUmVnRXhwID0gaXNSZWdFeHA7XG4gICAgbG9kYXNoLmlzU2FmZUludGVnZXIgPSBpc1NhZmVJbnRlZ2VyO1xuICAgIGxvZGFzaC5pc1NldCA9IGlzU2V0O1xuICAgIGxvZGFzaC5pc1N0cmluZyA9IGlzU3RyaW5nO1xuICAgIGxvZGFzaC5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuICAgIGxvZGFzaC5pc1R5cGVkQXJyYXkgPSBpc1R5cGVkQXJyYXk7XG4gICAgbG9kYXNoLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG4gICAgbG9kYXNoLmlzV2Vha01hcCA9IGlzV2Vha01hcDtcbiAgICBsb2Rhc2guaXNXZWFrU2V0ID0gaXNXZWFrU2V0O1xuICAgIGxvZGFzaC5qb2luID0gam9pbjtcbiAgICBsb2Rhc2gua2ViYWJDYXNlID0ga2ViYWJDYXNlO1xuICAgIGxvZGFzaC5sYXN0ID0gbGFzdDtcbiAgICBsb2Rhc2gubGFzdEluZGV4T2YgPSBsYXN0SW5kZXhPZjtcbiAgICBsb2Rhc2gubG93ZXJDYXNlID0gbG93ZXJDYXNlO1xuICAgIGxvZGFzaC5sb3dlckZpcnN0ID0gbG93ZXJGaXJzdDtcbiAgICBsb2Rhc2gubHQgPSBsdDtcbiAgICBsb2Rhc2gubHRlID0gbHRlO1xuICAgIGxvZGFzaC5tYXggPSBtYXg7XG4gICAgbG9kYXNoLm1heEJ5ID0gbWF4Qnk7XG4gICAgbG9kYXNoLm1lYW4gPSBtZWFuO1xuICAgIGxvZGFzaC5tZWFuQnkgPSBtZWFuQnk7XG4gICAgbG9kYXNoLm1pbiA9IG1pbjtcbiAgICBsb2Rhc2gubWluQnkgPSBtaW5CeTtcbiAgICBsb2Rhc2guc3R1YkFycmF5ID0gc3R1YkFycmF5O1xuICAgIGxvZGFzaC5zdHViRmFsc2UgPSBzdHViRmFsc2U7XG4gICAgbG9kYXNoLnN0dWJPYmplY3QgPSBzdHViT2JqZWN0O1xuICAgIGxvZGFzaC5zdHViU3RyaW5nID0gc3R1YlN0cmluZztcbiAgICBsb2Rhc2guc3R1YlRydWUgPSBzdHViVHJ1ZTtcbiAgICBsb2Rhc2gubXVsdGlwbHkgPSBtdWx0aXBseTtcbiAgICBsb2Rhc2gubnRoID0gbnRoO1xuICAgIGxvZGFzaC5ub0NvbmZsaWN0ID0gbm9Db25mbGljdDtcbiAgICBsb2Rhc2gubm9vcCA9IG5vb3A7XG4gICAgbG9kYXNoLm5vdyA9IG5vdztcbiAgICBsb2Rhc2gucGFkID0gcGFkO1xuICAgIGxvZGFzaC5wYWRFbmQgPSBwYWRFbmQ7XG4gICAgbG9kYXNoLnBhZFN0YXJ0ID0gcGFkU3RhcnQ7XG4gICAgbG9kYXNoLnBhcnNlSW50ID0gcGFyc2VJbnQ7XG4gICAgbG9kYXNoLnJhbmRvbSA9IHJhbmRvbTtcbiAgICBsb2Rhc2gucmVkdWNlID0gcmVkdWNlO1xuICAgIGxvZGFzaC5yZWR1Y2VSaWdodCA9IHJlZHVjZVJpZ2h0O1xuICAgIGxvZGFzaC5yZXBlYXQgPSByZXBlYXQ7XG4gICAgbG9kYXNoLnJlcGxhY2UgPSByZXBsYWNlO1xuICAgIGxvZGFzaC5yZXN1bHQgPSByZXN1bHQ7XG4gICAgbG9kYXNoLnJvdW5kID0gcm91bmQ7XG4gICAgbG9kYXNoLnJ1bkluQ29udGV4dCA9IHJ1bkluQ29udGV4dDtcbiAgICBsb2Rhc2guc2FtcGxlID0gc2FtcGxlO1xuICAgIGxvZGFzaC5zaXplID0gc2l6ZTtcbiAgICBsb2Rhc2guc25ha2VDYXNlID0gc25ha2VDYXNlO1xuICAgIGxvZGFzaC5zb21lID0gc29tZTtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXggPSBzb3J0ZWRJbmRleDtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXhCeSA9IHNvcnRlZEluZGV4Qnk7XG4gICAgbG9kYXNoLnNvcnRlZEluZGV4T2YgPSBzb3J0ZWRJbmRleE9mO1xuICAgIGxvZGFzaC5zb3J0ZWRMYXN0SW5kZXggPSBzb3J0ZWRMYXN0SW5kZXg7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleEJ5ID0gc29ydGVkTGFzdEluZGV4Qnk7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleE9mID0gc29ydGVkTGFzdEluZGV4T2Y7XG4gICAgbG9kYXNoLnN0YXJ0Q2FzZSA9IHN0YXJ0Q2FzZTtcbiAgICBsb2Rhc2guc3RhcnRzV2l0aCA9IHN0YXJ0c1dpdGg7XG4gICAgbG9kYXNoLnN1YnRyYWN0ID0gc3VidHJhY3Q7XG4gICAgbG9kYXNoLnN1bSA9IHN1bTtcbiAgICBsb2Rhc2guc3VtQnkgPSBzdW1CeTtcbiAgICBsb2Rhc2gudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgICBsb2Rhc2gudGltZXMgPSB0aW1lcztcbiAgICBsb2Rhc2gudG9GaW5pdGUgPSB0b0Zpbml0ZTtcbiAgICBsb2Rhc2gudG9JbnRlZ2VyID0gdG9JbnRlZ2VyO1xuICAgIGxvZGFzaC50b0xlbmd0aCA9IHRvTGVuZ3RoO1xuICAgIGxvZGFzaC50b0xvd2VyID0gdG9Mb3dlcjtcbiAgICBsb2Rhc2gudG9OdW1iZXIgPSB0b051bWJlcjtcbiAgICBsb2Rhc2gudG9TYWZlSW50ZWdlciA9IHRvU2FmZUludGVnZXI7XG4gICAgbG9kYXNoLnRvU3RyaW5nID0gdG9TdHJpbmc7XG4gICAgbG9kYXNoLnRvVXBwZXIgPSB0b1VwcGVyO1xuICAgIGxvZGFzaC50cmltID0gdHJpbTtcbiAgICBsb2Rhc2gudHJpbUVuZCA9IHRyaW1FbmQ7XG4gICAgbG9kYXNoLnRyaW1TdGFydCA9IHRyaW1TdGFydDtcbiAgICBsb2Rhc2gudHJ1bmNhdGUgPSB0cnVuY2F0ZTtcbiAgICBsb2Rhc2gudW5lc2NhcGUgPSB1bmVzY2FwZTtcbiAgICBsb2Rhc2gudW5pcXVlSWQgPSB1bmlxdWVJZDtcbiAgICBsb2Rhc2gudXBwZXJDYXNlID0gdXBwZXJDYXNlO1xuICAgIGxvZGFzaC51cHBlckZpcnN0ID0gdXBwZXJGaXJzdDtcblxuICAgIC8vIEFkZCBhbGlhc2VzLlxuICAgIGxvZGFzaC5lYWNoID0gZm9yRWFjaDtcbiAgICBsb2Rhc2guZWFjaFJpZ2h0ID0gZm9yRWFjaFJpZ2h0O1xuICAgIGxvZGFzaC5maXJzdCA9IGhlYWQ7XG5cbiAgICBtaXhpbihsb2Rhc2gsIChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzb3VyY2UgPSB7fTtcbiAgICAgIGJhc2VGb3JPd24obG9kYXNoLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChsb2Rhc2gucHJvdG90eXBlLCBtZXRob2ROYW1lKSkge1xuICAgICAgICAgIHNvdXJjZVttZXRob2ROYW1lXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9KCkpLCB7ICdjaGFpbic6IGZhbHNlIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNlbWFudGljIHZlcnNpb24gbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBsb2Rhc2guVkVSU0lPTiA9IFZFUlNJT047XG5cbiAgICAvLyBBc3NpZ24gZGVmYXVsdCBwbGFjZWhvbGRlcnMuXG4gICAgYXJyYXlFYWNoKFsnYmluZCcsICdiaW5kS2V5JywgJ2N1cnJ5JywgJ2N1cnJ5UmlnaHQnLCAncGFydGlhbCcsICdwYXJ0aWFsUmlnaHQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgbG9kYXNoW21ldGhvZE5hbWVdLnBsYWNlaG9sZGVyID0gbG9kYXNoO1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uZHJvcGAgYW5kIGBfLnRha2VgIHZhcmlhbnRzLlxuICAgIGFycmF5RWFjaChbJ2Ryb3AnLCAndGFrZSddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24obikge1xuICAgICAgICBuID0gbiA9PT0gdW5kZWZpbmVkID8gMSA6IG5hdGl2ZU1heCh0b0ludGVnZXIobiksIDApO1xuXG4gICAgICAgIHZhciByZXN1bHQgPSAodGhpcy5fX2ZpbHRlcmVkX18gJiYgIWluZGV4KVxuICAgICAgICAgID8gbmV3IExhenlXcmFwcGVyKHRoaXMpXG4gICAgICAgICAgOiB0aGlzLmNsb25lKCk7XG5cbiAgICAgICAgaWYgKHJlc3VsdC5fX2ZpbHRlcmVkX18pIHtcbiAgICAgICAgICByZXN1bHQuX190YWtlQ291bnRfXyA9IG5hdGl2ZU1pbihuLCByZXN1bHQuX190YWtlQ291bnRfXyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0Ll9fdmlld3NfXy5wdXNoKHtcbiAgICAgICAgICAgICdzaXplJzogbmF0aXZlTWluKG4sIE1BWF9BUlJBWV9MRU5HVEgpLFxuICAgICAgICAgICAgJ3R5cGUnOiBtZXRob2ROYW1lICsgKHJlc3VsdC5fX2Rpcl9fIDwgMCA/ICdSaWdodCcgOiAnJylcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWUgKyAnUmlnaHQnXSA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpW21ldGhvZE5hbWVdKG4pLnJldmVyc2UoKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIHRoYXQgYWNjZXB0IGFuIGBpdGVyYXRlZWAgdmFsdWUuXG4gICAgYXJyYXlFYWNoKFsnZmlsdGVyJywgJ21hcCcsICd0YWtlV2hpbGUnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciB0eXBlID0gaW5kZXggKyAxLFxuICAgICAgICAgIGlzRmlsdGVyID0gdHlwZSA9PSBMQVpZX0ZJTFRFUl9GTEFHIHx8IHR5cGUgPT0gTEFaWV9XSElMRV9GTEFHO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICByZXN1bHQuX19pdGVyYXRlZXNfXy5wdXNoKHtcbiAgICAgICAgICAnaXRlcmF0ZWUnOiBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksXG4gICAgICAgICAgJ3R5cGUnOiB0eXBlXG4gICAgICAgIH0pO1xuICAgICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gcmVzdWx0Ll9fZmlsdGVyZWRfXyB8fCBpc0ZpbHRlcjtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5oZWFkYCBhbmQgYF8ubGFzdGAuXG4gICAgYXJyYXlFYWNoKFsnaGVhZCcsICdsYXN0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgdGFrZU5hbWUgPSAndGFrZScgKyAoaW5kZXggPyAnUmlnaHQnIDogJycpO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbdGFrZU5hbWVdKDEpLnZhbHVlKClbMF07XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uaW5pdGlhbGAgYW5kIGBfLnRhaWxgLlxuICAgIGFycmF5RWFjaChbJ2luaXRpYWwnLCAndGFpbCddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIGRyb3BOYW1lID0gJ2Ryb3AnICsgKGluZGV4ID8gJycgOiAnUmlnaHQnKTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9fZmlsdGVyZWRfXyA/IG5ldyBMYXp5V3JhcHBlcih0aGlzKSA6IHRoaXNbZHJvcE5hbWVdKDEpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jb21wYWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIoaWRlbnRpdHkpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKHByZWRpY2F0ZSkuaGVhZCgpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuZmluZExhc3QgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKS5maW5kKHByZWRpY2F0ZSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5pbnZva2VNYXAgPSBiYXNlUmVzdChmdW5jdGlvbihwYXRoLCBhcmdzKSB7XG4gICAgICBpZiAodHlwZW9mIHBhdGggPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKHZhbHVlLCBwYXRoLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnJlamVjdCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUpKSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHN0YXJ0ID0gdG9JbnRlZ2VyKHN0YXJ0KTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHRoaXM7XG4gICAgICBpZiAocmVzdWx0Ll9fZmlsdGVyZWRfXyAmJiAoc3RhcnQgPiAwIHx8IGVuZCA8IDApKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGF6eVdyYXBwZXIocmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnRha2VSaWdodCgtc3RhcnQpO1xuICAgICAgfSBlbHNlIGlmIChzdGFydCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQuZHJvcChzdGFydCk7XG4gICAgICB9XG4gICAgICBpZiAoZW5kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW5kID0gdG9JbnRlZ2VyKGVuZCk7XG4gICAgICAgIHJlc3VsdCA9IGVuZCA8IDAgPyByZXN1bHQuZHJvcFJpZ2h0KC1lbmQpIDogcmVzdWx0LnRha2UoZW5kIC0gc3RhcnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnRha2VSaWdodFdoaWxlID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKCkudGFrZVdoaWxlKHByZWRpY2F0ZSkucmV2ZXJzZSgpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGFrZShNQVhfQVJSQVlfTEVOR1RIKTtcbiAgICB9O1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgYmFzZUZvck93bihMYXp5V3JhcHBlci5wcm90b3R5cGUsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBjaGVja0l0ZXJhdGVlID0gL14oPzpmaWx0ZXJ8ZmluZHxtYXB8cmVqZWN0KXxXaGlsZSQvLnRlc3QobWV0aG9kTmFtZSksXG4gICAgICAgICAgaXNUYWtlciA9IC9eKD86aGVhZHxsYXN0KSQvLnRlc3QobWV0aG9kTmFtZSksXG4gICAgICAgICAgbG9kYXNoRnVuYyA9IGxvZGFzaFtpc1Rha2VyID8gKCd0YWtlJyArIChtZXRob2ROYW1lID09ICdsYXN0JyA/ICdSaWdodCcgOiAnJykpIDogbWV0aG9kTmFtZV0sXG4gICAgICAgICAgcmV0VW53cmFwcGVkID0gaXNUYWtlciB8fCAvXmZpbmQvLnRlc3QobWV0aG9kTmFtZSk7XG5cbiAgICAgIGlmICghbG9kYXNoRnVuYykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX18sXG4gICAgICAgICAgICBhcmdzID0gaXNUYWtlciA/IFsxXSA6IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGlzTGF6eSA9IHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIsXG4gICAgICAgICAgICBpdGVyYXRlZSA9IGFyZ3NbMF0sXG4gICAgICAgICAgICB1c2VMYXp5ID0gaXNMYXp5IHx8IGlzQXJyYXkodmFsdWUpO1xuXG4gICAgICAgIHZhciBpbnRlcmNlcHRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaEZ1bmMuYXBwbHkobG9kYXNoLCBhcnJheVB1c2goW3ZhbHVlXSwgYXJncykpO1xuICAgICAgICAgIHJldHVybiAoaXNUYWtlciAmJiBjaGFpbkFsbCkgPyByZXN1bHRbMF0gOiByZXN1bHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHVzZUxhenkgJiYgY2hlY2tJdGVyYXRlZSAmJiB0eXBlb2YgaXRlcmF0ZWUgPT0gJ2Z1bmN0aW9uJyAmJiBpdGVyYXRlZS5sZW5ndGggIT0gMSkge1xuICAgICAgICAgIC8vIEF2b2lkIGxhenkgdXNlIGlmIHRoZSBpdGVyYXRlZSBoYXMgYSBcImxlbmd0aFwiIHZhbHVlIG90aGVyIHRoYW4gYDFgLlxuICAgICAgICAgIGlzTGF6eSA9IHVzZUxhenkgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hhaW5BbGwgPSB0aGlzLl9fY2hhaW5fXyxcbiAgICAgICAgICAgIGlzSHlicmlkID0gISF0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCxcbiAgICAgICAgICAgIGlzVW53cmFwcGVkID0gcmV0VW53cmFwcGVkICYmICFjaGFpbkFsbCxcbiAgICAgICAgICAgIG9ubHlMYXp5ID0gaXNMYXp5ICYmICFpc0h5YnJpZDtcblxuICAgICAgICBpZiAoIXJldFVud3JhcHBlZCAmJiB1c2VMYXp5KSB7XG4gICAgICAgICAgdmFsdWUgPSBvbmx5TGF6eSA/IHZhbHVlIDogbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHZhbHVlLCBhcmdzKTtcbiAgICAgICAgICByZXN1bHQuX19hY3Rpb25zX18ucHVzaCh7ICdmdW5jJzogdGhydSwgJ2FyZ3MnOiBbaW50ZXJjZXB0b3JdLCAndGhpc0FyZyc6IHVuZGVmaW5lZCB9KTtcbiAgICAgICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIocmVzdWx0LCBjaGFpbkFsbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW53cmFwcGVkICYmIG9ubHlMYXp5KSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gdGhpcy50aHJ1KGludGVyY2VwdG9yKTtcbiAgICAgICAgcmV0dXJuIGlzVW53cmFwcGVkID8gKGlzVGFrZXIgPyByZXN1bHQudmFsdWUoKVswXSA6IHJlc3VsdC52YWx1ZSgpKSA6IHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYEFycmF5YCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBhcnJheUVhY2goWydwb3AnLCAncHVzaCcsICdzaGlmdCcsICdzb3J0JywgJ3NwbGljZScsICd1bnNoaWZ0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gYXJyYXlQcm90b1ttZXRob2ROYW1lXSxcbiAgICAgICAgICBjaGFpbk5hbWUgPSAvXig/OnB1c2h8c29ydHx1bnNoaWZ0KSQvLnRlc3QobWV0aG9kTmFtZSkgPyAndGFwJyA6ICd0aHJ1JyxcbiAgICAgICAgICByZXRVbndyYXBwZWQgPSAvXig/OnBvcHxzaGlmdCkkLy50ZXN0KG1ldGhvZE5hbWUpO1xuXG4gICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBpZiAocmV0VW53cmFwcGVkICYmICF0aGlzLl9fY2hhaW5fXykge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmFsdWUoKTtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW10sIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzW2NoYWluTmFtZV0oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW10sIGFyZ3MpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBNYXAgbWluaWZpZWQgbWV0aG9kIG5hbWVzIHRvIHRoZWlyIHJlYWwgbmFtZXMuXG4gICAgYmFzZUZvck93bihMYXp5V3JhcHBlci5wcm90b3R5cGUsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBsb2Rhc2hGdW5jID0gbG9kYXNoW21ldGhvZE5hbWVdO1xuICAgICAgaWYgKGxvZGFzaEZ1bmMpIHtcbiAgICAgICAgdmFyIGtleSA9IGxvZGFzaEZ1bmMubmFtZSArICcnO1xuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwocmVhbE5hbWVzLCBrZXkpKSB7XG4gICAgICAgICAgcmVhbE5hbWVzW2tleV0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZWFsTmFtZXNba2V5XS5wdXNoKHsgJ25hbWUnOiBtZXRob2ROYW1lLCAnZnVuYyc6IGxvZGFzaEZ1bmMgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZWFsTmFtZXNbY3JlYXRlSHlicmlkKHVuZGVmaW5lZCwgV1JBUF9CSU5EX0tFWV9GTEFHKS5uYW1lXSA9IFt7XG4gICAgICAnbmFtZSc6ICd3cmFwcGVyJyxcbiAgICAgICdmdW5jJzogdW5kZWZpbmVkXG4gICAgfV07XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgTGF6eVdyYXBwZXJgLlxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jbG9uZSA9IGxhenlDbG9uZTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUucmV2ZXJzZSA9IGxhenlSZXZlcnNlO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS52YWx1ZSA9IGxhenlWYWx1ZTtcblxuICAgIC8vIEFkZCBjaGFpbiBzZXF1ZW5jZSBtZXRob2RzIHRvIHRoZSBgbG9kYXNoYCB3cmFwcGVyLlxuICAgIGxvZGFzaC5wcm90b3R5cGUuYXQgPSB3cmFwcGVyQXQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jaGFpbiA9IHdyYXBwZXJDaGFpbjtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNvbW1pdCA9IHdyYXBwZXJDb21taXQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5uZXh0ID0gd3JhcHBlck5leHQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5wbGFudCA9IHdyYXBwZXJQbGFudDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnJldmVyc2UgPSB3cmFwcGVyUmV2ZXJzZTtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnRvSlNPTiA9IGxvZGFzaC5wcm90b3R5cGUudmFsdWVPZiA9IGxvZGFzaC5wcm90b3R5cGUudmFsdWUgPSB3cmFwcGVyVmFsdWU7XG5cbiAgICAvLyBBZGQgbGF6eSBhbGlhc2VzLlxuICAgIGxvZGFzaC5wcm90b3R5cGUuZmlyc3QgPSBsb2Rhc2gucHJvdG90eXBlLmhlYWQ7XG5cbiAgICBpZiAoc3ltSXRlcmF0b3IpIHtcbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbc3ltSXRlcmF0b3JdID0gd3JhcHBlclRvSXRlcmF0b3I7XG4gICAgfVxuICAgIHJldHVybiBsb2Rhc2g7XG4gIH0pO1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8vIEV4cG9ydCBsb2Rhc2guXG4gIHZhciBfID0gcnVuSW5Db250ZXh0KCk7XG5cbiAgLy8gU29tZSBBTUQgYnVpbGQgb3B0aW1pemVycywgbGlrZSByLmpzLCBjaGVjayBmb3IgY29uZGl0aW9uIHBhdHRlcm5zIGxpa2U6XG4gIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIEV4cG9zZSBMb2Rhc2ggb24gdGhlIGdsb2JhbCBvYmplY3QgdG8gcHJldmVudCBlcnJvcnMgd2hlbiBMb2Rhc2ggaXNcbiAgICAvLyBsb2FkZWQgYnkgYSBzY3JpcHQgdGFnIGluIHRoZSBwcmVzZW5jZSBvZiBhbiBBTUQgbG9hZGVyLlxuICAgIC8vIFNlZSBodHRwOi8vcmVxdWlyZWpzLm9yZy9kb2NzL2Vycm9ycy5odG1sI21pc21hdGNoIGZvciBtb3JlIGRldGFpbHMuXG4gICAgLy8gVXNlIGBfLm5vQ29uZmxpY3RgIHRvIHJlbW92ZSBMb2Rhc2ggZnJvbSB0aGUgZ2xvYmFsIG9iamVjdC5cbiAgICByb290Ll8gPSBfO1xuXG4gICAgLy8gRGVmaW5lIGFzIGFuIGFub255bW91cyBtb2R1bGUgc28sIHRocm91Z2ggcGF0aCBtYXBwaW5nLCBpdCBjYW4gYmVcbiAgICAvLyByZWZlcmVuY2VkIGFzIHRoZSBcInVuZGVyc2NvcmVcIiBtb2R1bGUuXG4gICAgZGVmaW5lKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIF87XG4gICAgfSk7XG4gIH1cbiAgLy8gQ2hlY2sgZm9yIGBleHBvcnRzYCBhZnRlciBgZGVmaW5lYCBpbiBjYXNlIGEgYnVpbGQgb3B0aW1pemVyIGFkZHMgaXQuXG4gIGVsc2UgaWYgKGZyZWVNb2R1bGUpIHtcbiAgICAvLyBFeHBvcnQgZm9yIE5vZGUuanMuXG4gICAgKGZyZWVNb2R1bGUuZXhwb3J0cyA9IF8pLl8gPSBfO1xuICAgIC8vIEV4cG9ydCBmb3IgQ29tbW9uSlMgc3VwcG9ydC5cbiAgICBmcmVlRXhwb3J0cy5fID0gXztcbiAgfVxuICBlbHNlIHtcbiAgICAvLyBFeHBvcnQgdG8gdGhlIGdsb2JhbCBvYmplY3QuXG4gICAgcm9vdC5fID0gXztcbiAgfVxufS5jYWxsKHRoaXMpKTtcbiIsImV4cG9ydCBlbnVtIFdpZ2dsZVZhcmlhbnRzIHtcbiAgICBOT1JNQUwsXG59XG5cbmV4cG9ydCBlbnVtIFBvaW50VmFyaWFudHMge1xuICAgIFNIT1JULFxuICAgIE5PUk1BTCxcbiAgICBMT05HLFxufVxuXG5leHBvcnQgdHlwZSBUd2VlbkNvbmZpZyA9IHtcbiAgICB0eXBlOiBzdHJpbmc7XG4gICAgdmFyaWFudD86IFdpZ2dsZVZhcmlhbnRzIHwgUG9pbnRWYXJpYW50cztcbiAgICB0aW1lPzogbnVtYmVyO1xufTtcblxuZXhwb3J0IGNsYXNzIEN1cnNvck1hbmFnZXIge1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgQ3Vyc29yVHdlZW5zID0ge1xuICAgICAgICBXSUdHTEU6IFwid2lnZ2xlXCIsXG4gICAgICAgIFBPSU5UOiBcInBvaW50XCIsXG4gICAgfTtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBXSUdHTEUgPSB7XG4gICAgICAgIEtFWTogQ3Vyc29yTWFuYWdlci5DdXJzb3JUd2VlbnMuV0lHR0xFLFxuICAgICAgICBYMTogLTQsXG4gICAgICAgIFkxOiA0LFxuICAgICAgICBYMjogLTgsXG4gICAgICAgIFkyOiAwLFxuICAgICAgICBERUZBVUxUX1RJTUU6IFBoYXNlci5UaW1lci5RVUFSVEVSID4+IDEsXG4gICAgfTtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBQT0lOVCA9IHtcbiAgICAgICAgS0VZOiBDdXJzb3JNYW5hZ2VyLkN1cnNvclR3ZWVucy5QT0lOVCxcbiAgICAgICAgMDoge1xuICAgICAgICAgICAgWDogLTIsXG4gICAgICAgICAgICBZOiAyLFxuICAgICAgICB9LFxuICAgICAgICAxOiB7XG4gICAgICAgICAgICBYOiAtNCxcbiAgICAgICAgICAgIFk6IDQsXG4gICAgICAgIH0sXG4gICAgICAgIDI6IHtcbiAgICAgICAgICAgIFg6IC02LFxuICAgICAgICAgICAgWTogNixcbiAgICAgICAgfSxcbiAgICAgICAgREVGQVVMVF9USU1FOiBQaGFzZXIuVGltZXIuUVVBUlRFUiA+PiAxLFxuICAgIH07XG5cbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBERUZBVUxUX01PVkVfVElNRSA9IFBoYXNlci5UaW1lci5RVUFSVEVSID4+IDE7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgWF9TSElGVCA9IDg7XG5cbiAgICBwcml2YXRlIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHByaXZhdGUgZ3JvdXA6IFBoYXNlci5Hcm91cDtcbiAgICBwcml2YXRlIGN1cnNvcjogUGhhc2VyLlNwcml0ZTtcblxuICAgIHByaXZhdGUgYWN0aXZlX3R3ZWVuOiBQaGFzZXIuVHdlZW47XG5cbiAgICBwcml2YXRlIGN1cnNvcl9kZWZhdWx0X3Bvczoge3g6IG51bWJlcjsgeTogbnVtYmVyfTtcbiAgICBwdWJsaWMgY3Vyc29yX2ZsaXBwZWQ6IGJvb2xlYW47XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoZ2FtZTogUGhhc2VyLkdhbWUpIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcblxuICAgICAgICB0aGlzLmdyb3VwID0gdGhpcy5nYW1lLmFkZC5ncm91cCgpO1xuICAgICAgICB0aGlzLmdyb3VwLnZpc2libGUgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLmdyb3VwLnggPSAwO1xuICAgICAgICB0aGlzLmdyb3VwLnkgPSAwO1xuXG4gICAgICAgIHRoaXMuY3Vyc29yID0gdGhpcy5ncm91cC5jcmVhdGUoMCwgMCwgXCJjdXJzb3JcIik7XG4gICAgICAgIHRoaXMuY3Vyc29yLmFuY2hvci54ID0gMC41O1xuXG4gICAgICAgIHRoaXMuYWN0aXZlX3R3ZWVuID0gbnVsbDtcblxuICAgICAgICB0aGlzLmN1cnNvcl9kZWZhdWx0X3BvcyA9IHt4OiAwLCB5OiAwfTtcbiAgICAgICAgdGhpcy5jdXJzb3JfZmxpcHBlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHB1YmxpYyBpbml0X3R3ZWVuKGNvbmZpZzogVHdlZW5Db25maWcsIGNhbGxiYWNrPzogRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5jbGVhcl90d2VlbnMoKTtcbiAgICAgICAgaWYgKCF0aGlzLmdyb3VwLnZpc2libGUpIHRoaXMuc2hvdygpO1xuXG4gICAgICAgIHN3aXRjaCAoY29uZmlnLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgQ3Vyc29yTWFuYWdlci5XSUdHTEUuS0VZOlxuICAgICAgICAgICAgICAgIGxldCB3aWdnbGVfeDEgPSBDdXJzb3JNYW5hZ2VyLldJR0dMRS5YMTtcbiAgICAgICAgICAgICAgICBsZXQgd2lnZ2xlX3gyID0gQ3Vyc29yTWFuYWdlci5XSUdHTEUuWDI7XG4gICAgICAgICAgICAgICAgbGV0IHdpZ2dsZV95MSA9IEN1cnNvck1hbmFnZXIuV0lHR0xFLlkxO1xuICAgICAgICAgICAgICAgIGxldCB3aWdnbGVfeTIgPSBDdXJzb3JNYW5hZ2VyLldJR0dMRS5ZMjtcbiAgICAgICAgICAgICAgICBsZXQgd2lnZ2xlX3RpbWUgPSBjb25maWcudGltZSA/IGNvbmZpZy50aW1lIDogQ3Vyc29yTWFuYWdlci5XSUdHTEUuREVGQVVMVF9USU1FO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVfdHdlZW4gPSB0aGlzLmdhbWUuYWRkXG4gICAgICAgICAgICAgICAgICAgIC50d2Vlbih0aGlzLmN1cnNvcilcbiAgICAgICAgICAgICAgICAgICAgLnRvKFxuICAgICAgICAgICAgICAgICAgICAgICAge3g6IHRoaXMuY3Vyc29yLnggKyB3aWdnbGVfeDEsIHk6IHRoaXMuY3Vyc29yLnkgKyB3aWdnbGVfeTF9LFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lnZ2xlX3RpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgLnRvKFxuICAgICAgICAgICAgICAgICAgICAgICAge3g6IHRoaXMuY3Vyc29yLnggKyB3aWdnbGVfeDIsIHk6IHRoaXMuY3Vyc29yLnkgKyB3aWdnbGVfeTJ9LFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lnZ2xlX3RpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgLnRvKFxuICAgICAgICAgICAgICAgICAgICAgICAge3g6IHRoaXMuY3Vyc29yLnggKyB3aWdnbGVfeDEsIHk6IHRoaXMuY3Vyc29yLnkgKyB3aWdnbGVfeTF9LFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lnZ2xlX3RpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgLnRvKHt4OiB0aGlzLmN1cnNvci54LCB5OiB0aGlzLmN1cnNvci55fSwgd2lnZ2xlX3RpbWUsIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUpXG4gICAgICAgICAgICAgICAgICAgIC5sb29wKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEN1cnNvck1hbmFnZXIuUE9JTlQuS0VZOlxuICAgICAgICAgICAgICAgIGlmIChjb25maWcudmFyaWFudCA9PT0gdW5kZWZpbmVkKSBjb25maWcudmFyaWFudCA9IFBvaW50VmFyaWFudHMuTk9STUFMO1xuICAgICAgICAgICAgICAgIGxldCBwb2ludF94ID0gQ3Vyc29yTWFuYWdlci5QT0lOVFtjb25maWcudmFyaWFudF0uWDtcbiAgICAgICAgICAgICAgICBsZXQgcG9pbnRfeSA9IEN1cnNvck1hbmFnZXIuUE9JTlRbY29uZmlnLnZhcmlhbnRdLlk7XG4gICAgICAgICAgICAgICAgbGV0IHBvaW50X3RpbWUgPSBjb25maWcudGltZSA/IGNvbmZpZy50aW1lIDogQ3Vyc29yTWFuYWdlci5QT0lOVC5ERUZBVUxUX1RJTUU7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJzb3JfZmxpcHBlZCkgcG9pbnRfeCAqPSAtMTtcblxuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlX3R3ZWVuID0gdGhpcy5nYW1lLmFkZFxuICAgICAgICAgICAgICAgICAgICAudHdlZW4odGhpcy5jdXJzb3IpXG4gICAgICAgICAgICAgICAgICAgIC50byh7eDogdGhpcy5jdXJzb3IueCArIHBvaW50X3gsIHk6IHRoaXMuY3Vyc29yLnkgKyBwb2ludF95fSwgcG9pbnRfdGltZSwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSlcbiAgICAgICAgICAgICAgICAgICAgLnRvKHt4OiB0aGlzLmN1cnNvci54LCB5OiB0aGlzLmN1cnNvci55fSwgcG9pbnRfdGltZSwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSlcbiAgICAgICAgICAgICAgICAgICAgLmxvb3AoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYnJpbmdfdG9fdG9wKCk7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZV90d2VlbikgdGhpcy5hY3RpdmVfdHdlZW4uc3RhcnQoKTtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHB1YmxpYyBtb3ZlX3RvKFxuICAgICAgICBwb3M6IHt4OiBudW1iZXI7IHk6IG51bWJlcn0sXG4gICAgICAgIHBhcmFtcz86IHthbmltYXRlPzogYm9vbGVhbjsgZmxpcD86IGJvb2xlYW47IG1vdmVfdGltZT86IG51bWJlcjsgdHdlZW5fY29uZmlnPzogVHdlZW5Db25maWd9LFxuICAgICAgICBvbl9jb21wbGV0ZT86IEZ1bmN0aW9uXG4gICAgKSB7XG4gICAgICAgIGlmICghdGhpcy5ncm91cC52aXNpYmxlKSB0aGlzLnNob3coKTtcbiAgICAgICAgdGhpcy5icmluZ190b190b3AoKTtcblxuICAgICAgICBjb25zdCBmbGlwID0gcGFyYW1zID8gKHBhcmFtcy5mbGlwICE9PSB1bmRlZmluZWQgPyBwYXJhbXMuZmxpcCA6IGZhbHNlKSA6IGZhbHNlO1xuICAgICAgICBjb25zdCBhbmltYXRlID0gcGFyYW1zID8gKHBhcmFtcy5hbmltYXRlICE9PSB1bmRlZmluZWQgPyBwYXJhbXMuYW5pbWF0ZSA6IHRydWUpIDogdHJ1ZTtcbiAgICAgICAgY29uc3QgdHdlZW5fY29uZmlnID0gcGFyYW1zID8gcGFyYW1zLnR3ZWVuX2NvbmZpZyA6IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgbW92ZV90aW1lID0gcGFyYW1zXG4gICAgICAgICAgICA/IHBhcmFtcy5tb3ZlX3RpbWUgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gcGFyYW1zLm1vdmVfdGltZVxuICAgICAgICAgICAgICAgIDogQ3Vyc29yTWFuYWdlci5ERUZBVUxUX01PVkVfVElNRVxuICAgICAgICAgICAgOiBDdXJzb3JNYW5hZ2VyLkRFRkFVTFRfTU9WRV9USU1FO1xuXG4gICAgICAgIGlmIChmbGlwICE9PSB0aGlzLmN1cnNvcl9mbGlwcGVkKSB0aGlzLmZsaXBfY3Vyc29yKCk7XG4gICAgICAgIGlmICghdHdlZW5fY29uZmlnKSB0aGlzLmNsZWFyX3R3ZWVucygpO1xuXG4gICAgICAgIHBvcy54ICs9IEN1cnNvck1hbmFnZXIuWF9TSElGVDtcbiAgICAgICAgdGhpcy5jdXJzb3JfZGVmYXVsdF9wb3MgPSB7eDogcG9zLnggKyB0aGlzLmdhbWUuY2FtZXJhLngsIHk6IHBvcy55ICsgdGhpcy5nYW1lLmNhbWVyYS55fTtcblxuICAgICAgICBpZiAoYW5pbWF0ZSkge1xuICAgICAgICAgICAgbGV0IHQgPSB0aGlzLmdhbWUuYWRkXG4gICAgICAgICAgICAgICAgLnR3ZWVuKHRoaXMuY3Vyc29yKVxuICAgICAgICAgICAgICAgIC50byhcbiAgICAgICAgICAgICAgICAgICAge3g6IHBvcy54ICsgdGhpcy5nYW1lLmNhbWVyYS54LCB5OiBwb3MueSArIHRoaXMuZ2FtZS5jYW1lcmEueX0sXG4gICAgICAgICAgICAgICAgICAgIG1vdmVfdGltZSxcbiAgICAgICAgICAgICAgICAgICAgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSxcbiAgICAgICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0Lm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHR3ZWVuX2NvbmZpZykgdGhpcy5pbml0X3R3ZWVuKHR3ZWVuX2NvbmZpZywgb25fY29tcGxldGUpO1xuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAob25fY29tcGxldGUpIG9uX2NvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmN1cnNvci54ID0gcG9zLnggKyB0aGlzLmdhbWUuY2FtZXJhLng7XG4gICAgICAgICAgICB0aGlzLmN1cnNvci55ID0gcG9zLnkgKyB0aGlzLmdhbWUuY2FtZXJhLnk7XG5cbiAgICAgICAgICAgIGlmICh0d2Vlbl9jb25maWcpIHRoaXMuaW5pdF90d2Vlbih0d2Vlbl9jb25maWcsIG9uX2NvbXBsZXRlKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKG9uX2NvbXBsZXRlKSBvbl9jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGNsZWFyX3R3ZWVucygpIHtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlX3R3ZWVuKSB0aGlzLmdhbWUudHdlZW5zLnJlbW92ZSh0aGlzLmFjdGl2ZV90d2Vlbik7XG4gICAgICAgIHRoaXMuYWN0aXZlX3R3ZWVuID0gbnVsbDtcblxuICAgICAgICB0aGlzLmN1cnNvci54ID0gdGhpcy5jdXJzb3JfZGVmYXVsdF9wb3MueDtcbiAgICAgICAgdGhpcy5jdXJzb3IueSA9IHRoaXMuY3Vyc29yX2RlZmF1bHRfcG9zLnk7XG4gICAgfVxuXG4gICAgcHVibGljIGZsaXBfY3Vyc29yKCkge1xuICAgICAgICB0aGlzLmNsZWFyX3R3ZWVucygpO1xuXG4gICAgICAgIHRoaXMuY3Vyc29yLnNjYWxlLnggKj0gLTE7XG4gICAgICAgIHRoaXMuY3Vyc29yX2ZsaXBwZWQgPSB0aGlzLmN1cnNvcl9mbGlwcGVkID8gZmFsc2UgOiB0cnVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBicmluZ190b190b3AoKSB7XG4gICAgICAgIHRoaXMuZ2FtZS53b3JsZC5icmluZ1RvVG9wKHRoaXMuZ3JvdXApO1xuICAgIH1cblxuICAgIHB1YmxpYyBoaWRlKCkge1xuICAgICAgICB0aGlzLmdyb3VwLnZpc2libGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2hvdygpIHtcbiAgICAgICAgdGhpcy5ncm91cC52aXNpYmxlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5ncm91cC5yZW1vdmUodGhpcy5jdXJzb3IsIHRydWUpO1xuICAgICAgICB0aGlzLmdyb3VwID0gbnVsbDtcbiAgICAgICAgdGhpcy5jdXJzb3IgPSBudWxsO1xuICAgICAgICB0aGlzLmFjdGl2ZV90d2VlbiA9IG51bGw7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtFZmZlY3QsIGVmZmVjdF90eXBlc30gZnJvbSBcIi4vRWZmZWN0XCI7XG5pbXBvcnQge29yZGVyZWRfZWxlbWVudHN9IGZyb20gXCIuL3V0aWxzXCI7XG5cbmV4cG9ydCBlbnVtIGZpZ2h0ZXJfdHlwZXMge1xuICAgIEFMTFkgPSAxLFxuICAgIEVORU1ZID0gMixcbn1cblxuZXhwb3J0IGVudW0gdGVtcG9yYXJ5X3N0YXR1cyB7XG4gICAgREVMVVNJT04gPSBcImRlbHVzaW9uXCIsXG4gICAgU1RVTiA9IFwic3R1blwiLFxuICAgIFNMRUVQID0gXCJzbGVlcFwiLFxuICAgIFNFQUwgPSBcInNlYWxcIixcbiAgICBERUFUSF9DVVJTRSA9IFwiZGVhdGhfY3Vyc2VcIixcbn1cblxuZXhwb3J0IGVudW0gcGVybWFuZW50X3N0YXR1cyB7XG4gICAgRE9XTkVEID0gXCJkb3duZWRcIixcbiAgICBQT0lTT04gPSBcInBvaXNvblwiLFxuICAgIFZFTk9NID0gXCJ2ZW5vbVwiLFxuICAgIEVRVUlQX0NVUlNFID0gXCJlcXVpcF9jdXJzZVwiLFxuICAgIEhBVU5UID0gXCJoYXVudFwiLFxufVxuXG5leHBvcnQgZW51bSBtYWluX3N0YXRzIHtcbiAgICBNQVhfSFAgPSBcIm1heF9ocFwiLFxuICAgIENVUlJFTlRfSFAgPSBcImN1cnJlbnRfaHBcIixcbiAgICBNQVhfUFAgPSBcIm1heF9wcFwiLFxuICAgIENVUlJFTlRfUFAgPSBcImN1cnJlbnRfcHBcIixcbiAgICBBVFRBQ0sgPSBcImF0a1wiLFxuICAgIERFRkVOU0UgPSBcImRlZlwiLFxuICAgIEFHSUxJVFkgPSBcImFnaVwiLFxuICAgIExVQ0sgPSBcImx1a1wiLFxufVxuXG5leHBvcnQgY29uc3QgZWZmZWN0X3R5cGVfc3RhdDoge1tlZmZlY3RfdHlwZSBpbiBlZmZlY3RfdHlwZXNdPzogbWFpbl9zdGF0c30gPSB7XG4gICAgW2VmZmVjdF90eXBlcy5NQVhfSFBdOiBtYWluX3N0YXRzLk1BWF9IUCxcbiAgICBbZWZmZWN0X3R5cGVzLk1BWF9QUF06IG1haW5fc3RhdHMuTUFYX1BQLFxuICAgIFtlZmZlY3RfdHlwZXMuQVRUQUNLXTogbWFpbl9zdGF0cy5BVFRBQ0ssXG4gICAgW2VmZmVjdF90eXBlcy5ERUZFTlNFXTogbWFpbl9zdGF0cy5ERUZFTlNFLFxuICAgIFtlZmZlY3RfdHlwZXMuQUdJTElUWV06IG1haW5fc3RhdHMuQUdJTElUWSxcbiAgICBbZWZmZWN0X3R5cGVzLkxVQ0tdOiBtYWluX3N0YXRzLkxVQ0ssXG4gICAgW2VmZmVjdF90eXBlcy5DVVJSRU5UX0hQXTogbWFpbl9zdGF0cy5DVVJSRU5UX0hQLFxuICAgIFtlZmZlY3RfdHlwZXMuQ1VSUkVOVF9QUF06IG1haW5fc3RhdHMuQ1VSUkVOVF9QUCxcbn07XG5cbmV4cG9ydCBjb25zdCBvbl9jYXRjaF9zdGF0dXNfbXNnID0ge1xuICAgIFt0ZW1wb3Jhcnlfc3RhdHVzLkRFTFVTSU9OXTogdGFyZ2V0ID0+IGAke3RhcmdldC5uYW1lfSBpcyB3cmFwcGVkIGluIGRlbHVzaW9uIWAsXG4gICAgW3RlbXBvcmFyeV9zdGF0dXMuU1RVTl06IHRhcmdldCA9PiBgJHt0YXJnZXQubmFtZX0gaGFzIGJlZW4gc3R1bm5lZCFgLFxuICAgIFt0ZW1wb3Jhcnlfc3RhdHVzLlNMRUVQXTogdGFyZ2V0ID0+IGAke3RhcmdldC5uYW1lfSBmYWxscyBhc2xlZXAhYCxcbiAgICBbdGVtcG9yYXJ5X3N0YXR1cy5TRUFMXTogdGFyZ2V0ID0+IGAke3RhcmdldC5uYW1lfSdzIFBzeW5lcmd5IGhhcyBiZWVuIHNlYWxlZCFgLFxuICAgIFt0ZW1wb3Jhcnlfc3RhdHVzLkRFQVRIX0NVUlNFXTogdGFyZ2V0ID0+IGBUaGUgU3Bpcml0IG9mIERlYXRoIGVtYnJhY2VzICR7dGFyZ2V0Lm5hbWV9IWAsXG4gICAgW3Blcm1hbmVudF9zdGF0dXMuRE9XTkVEXTogdGFyZ2V0ID0+IHtcbiAgICAgICAgcmV0dXJuIHRhcmdldC5maWdodGVyX3R5cGUgPT09IGZpZ2h0ZXJfdHlwZXMuQUxMWVxuICAgICAgICAgICAgPyBgJHt0YXJnZXQubmFtZX0gd2FzIGRvd25lZC4uLmBcbiAgICAgICAgICAgIDogYFlvdSBmZWxsZWQgJHt0YXJnZXQubmFtZX0hYDtcbiAgICB9LFxuICAgIFtwZXJtYW5lbnRfc3RhdHVzLlBPSVNPTl06IHRhcmdldCA9PiBgJHt0YXJnZXQubmFtZX0gaXMgaW5mZWN0ZWQgd2l0aCBwb2lzb24hYCxcbiAgICBbcGVybWFuZW50X3N0YXR1cy5WRU5PTV06IHRhcmdldCA9PiBgJHt0YXJnZXQubmFtZX0gaXMgaW5mZWN0ZWQgd2l0aCBkZWFkbHkgcG9pc29uIWAsXG4gICAgW3Blcm1hbmVudF9zdGF0dXMuSEFVTlRdOiB0YXJnZXQgPT4gYEFuIGV2aWwgc3Bpcml0IGdyaXBzICR7dGFyZ2V0Lm5hbWV9IWAsXG59O1xuXG5leHBvcnQgY29uc3Qgb25fcmVtb3ZlX3N0YXR1c19tc2cgPSB7XG4gICAgW3RlbXBvcmFyeV9zdGF0dXMuREVMVVNJT05dOiB0YXJnZXQgPT4gYCR7dGFyZ2V0Lm5hbWV9IHNlZXMgY2xlYXJseSBvbmNlIGFnYWluIWAsXG4gICAgW3RlbXBvcmFyeV9zdGF0dXMuU1RVTl06IHRhcmdldCA9PiBgJHt0YXJnZXQubmFtZX0gaXMgbm8gbG9uZ2VyIHN0dW5uZWQhYCxcbiAgICBbdGVtcG9yYXJ5X3N0YXR1cy5TTEVFUF06IHRhcmdldCA9PiBgJHt0YXJnZXQubmFtZX0gd2FrZXMgZnJvbSBzbHVtYmVyIWAsXG4gICAgW3RlbXBvcmFyeV9zdGF0dXMuU0VBTF06IHRhcmdldCA9PiBgJHt0YXJnZXQubmFtZX0ncyBQc3luZXJneSBzZWFsIGlzIGdvbmUhYCxcbiAgICBbcGVybWFuZW50X3N0YXR1cy5ET1dORURdOiB0YXJnZXQgPT4gYCR7dGFyZ2V0Lm5hbWV9J3MgaGFzIGJlZW4gcmV2aXZlZCFgLFxuICAgIFtwZXJtYW5lbnRfc3RhdHVzLlBPSVNPTl06IHRhcmdldCA9PiBgVGhlIHBvaXNvbiBpcyBwdXJnZWQgZnJvbSAke3RhcmdldC5uYW1lfSFgLFxuICAgIFtwZXJtYW5lbnRfc3RhdHVzLlZFTk9NXTogdGFyZ2V0ID0+IGBUaGUgdmVub20gaXMgcHVyZ2VkIGZyb20gJHt0YXJnZXQubmFtZX0hYCxcbn07XG5cbmV4cG9ydCBjb25zdCBvcmRlcmVkX3N0YXR1c19iYXR0bGUgPSBbXG4gICAgcGVybWFuZW50X3N0YXR1cy5ET1dORUQsXG4gICAgcGVybWFuZW50X3N0YXR1cy5FUVVJUF9DVVJTRSxcbiAgICB0ZW1wb3Jhcnlfc3RhdHVzLkRFQVRIX0NVUlNFLFxuICAgIHBlcm1hbmVudF9zdGF0dXMuUE9JU09OLFxuICAgIHBlcm1hbmVudF9zdGF0dXMuVkVOT00sXG4gICAgdGVtcG9yYXJ5X3N0YXR1cy5TRUFMLFxuICAgIHRlbXBvcmFyeV9zdGF0dXMuU1RVTixcbiAgICB0ZW1wb3Jhcnlfc3RhdHVzLlNMRUVQLFxuICAgIHBlcm1hbmVudF9zdGF0dXMuSEFVTlQsXG4gICAgdGVtcG9yYXJ5X3N0YXR1cy5ERUxVU0lPTixcbl07XG5cbmV4cG9ydCBjb25zdCBvcmRlcmVkX3N0YXR1c19tZW51ID0gW1xuICAgIHBlcm1hbmVudF9zdGF0dXMuRE9XTkVELFxuICAgIHBlcm1hbmVudF9zdGF0dXMuUE9JU09OLFxuICAgIHBlcm1hbmVudF9zdGF0dXMuVkVOT00sXG4gICAgcGVybWFuZW50X3N0YXR1cy5FUVVJUF9DVVJTRSxcbiAgICBwZXJtYW5lbnRfc3RhdHVzLkhBVU5ULFxuXTtcblxuZXhwb3J0IGNvbnN0IG9yZGVyZWRfbWFpbl9zdGF0cyA9IFtcbiAgICBtYWluX3N0YXRzLk1BWF9IUCxcbiAgICBtYWluX3N0YXRzLk1BWF9QUCxcbiAgICBtYWluX3N0YXRzLkFUVEFDSyxcbiAgICBtYWluX3N0YXRzLkRFRkVOU0UsXG4gICAgbWFpbl9zdGF0cy5BR0lMSVRZLFxuICAgIG1haW5fc3RhdHMuTFVDSyxcbl07XG5cbmV4cG9ydCBjbGFzcyBQbGF5ZXIge1xuICAgIHB1YmxpYyBrZXlfbmFtZTogc3RyaW5nO1xuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmc7XG4gICAgcHVibGljIHRlbXBvcmFyeV9zdGF0dXM6IFNldDx0ZW1wb3Jhcnlfc3RhdHVzPjtcbiAgICBwdWJsaWMgcGVybWFuZW50X3N0YXR1czogU2V0PHBlcm1hbmVudF9zdGF0dXM+O1xuICAgIHB1YmxpYyBlZmZlY3RzOiBFZmZlY3RbXTtcbiAgICBwdWJsaWMgZWZmZWN0X3R1cm5zX2NvdW50OiB7W2VmZmVjdDogc3RyaW5nXTogbnVtYmVyIHwge1tlbGVtZW50OiBzdHJpbmddOiBudW1iZXJ9fTtcbiAgICBwdWJsaWMgYmF0dGxlX3NjYWxlOiBudW1iZXI7XG4gICAgcHVibGljIGZpZ2h0ZXJfdHlwZTogZmlnaHRlcl90eXBlcztcbiAgICBwdWJsaWMgdmVudXNfbGV2ZWxfY3VycmVudDogbnVtYmVyO1xuICAgIHB1YmxpYyBtZXJjdXJ5X2xldmVsX2N1cnJlbnQ6IG51bWJlcjtcbiAgICBwdWJsaWMgbWFyc19sZXZlbF9jdXJyZW50OiBudW1iZXI7XG4gICAgcHVibGljIGp1cGl0ZXJfbGV2ZWxfY3VycmVudDogbnVtYmVyO1xuICAgIHB1YmxpYyB2ZW51c19wb3dlcl9jdXJyZW50OiBudW1iZXI7XG4gICAgcHVibGljIG1lcmN1cnlfcG93ZXJfY3VycmVudDogbnVtYmVyO1xuICAgIHB1YmxpYyBtYXJzX3Bvd2VyX2N1cnJlbnQ6IG51bWJlcjtcbiAgICBwdWJsaWMganVwaXRlcl9wb3dlcl9jdXJyZW50OiBudW1iZXI7XG4gICAgcHVibGljIHZlbnVzX3Jlc2lzdF9jdXJyZW50OiBudW1iZXI7XG4gICAgcHVibGljIG1lcmN1cnlfcmVzaXN0X2N1cnJlbnQ6IG51bWJlcjtcbiAgICBwdWJsaWMgbWFyc19yZXNpc3RfY3VycmVudDogbnVtYmVyO1xuICAgIHB1YmxpYyBqdXBpdGVyX3Jlc2lzdF9jdXJyZW50OiBudW1iZXI7XG4gICAgcHVibGljIHR1cm5zOiBudW1iZXI7XG4gICAgcHVibGljIGJhdHRsZV9hbmltYXRpb25zX3ZhcmlhdGlvbnM6IHtbYWJpbGl0eV9rZXk6IHN0cmluZ106IHN0cmluZ307XG4gICAgcHVibGljIG1heF9ocDogbnVtYmVyO1xuICAgIHB1YmxpYyBjdXJyZW50X2hwOiBudW1iZXI7XG4gICAgcHVibGljIG1heF9wcDogbnVtYmVyO1xuICAgIHB1YmxpYyBocF9yZWNvdmVyeTogbnVtYmVyO1xuICAgIHB1YmxpYyBwcF9yZWNvdmVyeTogbnVtYmVyO1xuICAgIHB1YmxpYyBjdXJyZW50X3BwOiBudW1iZXI7XG4gICAgcHVibGljIGF0azogbnVtYmVyO1xuICAgIHB1YmxpYyBkZWY6IG51bWJlcjtcbiAgICBwdWJsaWMgYWdpOiBudW1iZXI7XG4gICAgcHVibGljIGx1azogbnVtYmVyO1xuICAgIHB1YmxpYyBsZXZlbDogbnVtYmVyO1xuICAgIHB1YmxpYyBjdXJyZW50X2V4cDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3Ioa2V5X25hbWUsIG5hbWUpIHtcbiAgICAgICAgdGhpcy5rZXlfbmFtZSA9IGtleV9uYW1lO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnRlbXBvcmFyeV9zdGF0dXMgPSBuZXcgU2V0KCk7XG4gICAgICAgIHRoaXMucGVybWFuZW50X3N0YXR1cyA9IG5ldyBTZXQoKTtcbiAgICAgICAgdGhpcy5lZmZlY3RzID0gW107XG4gICAgICAgIHRoaXMuaW5pdF9lZmZlY3RfdHVybnNfY291bnQoKTtcbiAgICB9XG5cbiAgICBpbml0X2VmZmVjdF90dXJuc19jb3VudCgpIHtcbiAgICAgICAgdGhpcy5lZmZlY3RfdHVybnNfY291bnQgPSB7XG4gICAgICAgICAgICBbdGVtcG9yYXJ5X3N0YXR1cy5ERUxVU0lPTl06IDAsXG4gICAgICAgICAgICBbdGVtcG9yYXJ5X3N0YXR1cy5TVFVOXTogMCxcbiAgICAgICAgICAgIFt0ZW1wb3Jhcnlfc3RhdHVzLlNMRUVQXTogMCxcbiAgICAgICAgICAgIFt0ZW1wb3Jhcnlfc3RhdHVzLlNFQUxdOiAwLFxuICAgICAgICAgICAgW3RlbXBvcmFyeV9zdGF0dXMuREVBVEhfQ1VSU0VdOiAwLFxuICAgICAgICAgICAgW2VmZmVjdF90eXBlcy5NQVhfSFBdOiAwLFxuICAgICAgICAgICAgW2VmZmVjdF90eXBlcy5NQVhfUFBdOiAwLFxuICAgICAgICAgICAgW2VmZmVjdF90eXBlcy5BVFRBQ0tdOiAwLFxuICAgICAgICAgICAgW2VmZmVjdF90eXBlcy5ERUZFTlNFXTogMCxcbiAgICAgICAgICAgIFtlZmZlY3RfdHlwZXMuQUdJTElUWV06IDAsXG4gICAgICAgICAgICBbZWZmZWN0X3R5cGVzLkxVQ0tdOiAwLFxuICAgICAgICAgICAgW2VmZmVjdF90eXBlcy5QT1dFUl06IHt9LFxuICAgICAgICAgICAgW2VmZmVjdF90eXBlcy5SRVNJU1RdOiB7fSxcbiAgICAgICAgfTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcmRlcmVkX2VsZW1lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gb3JkZXJlZF9lbGVtZW50c1tpXTtcbiAgICAgICAgICAgIHRoaXMuZWZmZWN0X3R1cm5zX2NvdW50W2VmZmVjdF90eXBlcy5QT1dFUl1bZWxlbWVudF0gPSAwO1xuICAgICAgICAgICAgdGhpcy5lZmZlY3RfdHVybnNfY291bnRbZWZmZWN0X3R5cGVzLlJFU0lTVF1bZWxlbWVudF0gPSAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0X2VmZmVjdF90dXJuc19rZXkoZWZmZWN0OiBFZmZlY3QpIHtcbiAgICAgICAgc3dpdGNoIChlZmZlY3QudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuVEVNUE9SQVJZX1NUQVRVUzpcbiAgICAgICAgICAgICAgICByZXR1cm4gZWZmZWN0LnN0YXR1c19rZXlfbmFtZTtcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLk1BWF9IUDpcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLk1BWF9QUDpcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkFUVEFDSzpcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkRFRkVOU0U6XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5BR0lMSVRZOlxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuTFVDSzpcbiAgICAgICAgICAgICAgICByZXR1cm4gZWZmZWN0LnR5cGU7XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5QT1dFUjpcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLlJFU0lTVDpcbiAgICAgICAgICAgICAgICByZXR1cm4gZWZmZWN0LnR5cGUgKyBcIl9cIiArIGVmZmVjdC5hdHRyaWJ1dGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZ2V0X2VmZmVjdF90dXJuc19jb3VudChlZmZlY3Q6IEVmZmVjdCkge1xuICAgICAgICBzd2l0Y2ggKGVmZmVjdC50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5URU1QT1JBUllfU1RBVFVTOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVmZmVjdF90dXJuc19jb3VudFtlZmZlY3Quc3RhdHVzX2tleV9uYW1lXTtcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLk1BWF9IUDpcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLk1BWF9QUDpcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkFUVEFDSzpcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkRFRkVOU0U6XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5BR0lMSVRZOlxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuTFVDSzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lZmZlY3RfdHVybnNfY291bnRbZWZmZWN0LnR5cGVdO1xuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuUE9XRVI6XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5SRVNJU1Q6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWZmZWN0X3R1cm5zX2NvdW50W2VmZmVjdC50eXBlXVtlZmZlY3QuYXR0cmlidXRlXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBzZXRfZWZmZWN0X3R1cm5zX2NvdW50KGVmZmVjdCwgdmFsdWUgPSAtMSwgcmVsYXRpdmUgPSB0cnVlKSB7XG4gICAgICAgIHN3aXRjaCAoZWZmZWN0LnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLlRFTVBPUkFSWV9TVEFUVVM6XG4gICAgICAgICAgICAgICAgdGhpcy5lZmZlY3RfdHVybnNfY291bnRbZWZmZWN0LnN0YXR1c19rZXlfbmFtZV0gPSByZWxhdGl2ZVxuICAgICAgICAgICAgICAgICAgICA/ICh0aGlzLmVmZmVjdF90dXJuc19jb3VudFtlZmZlY3Quc3RhdHVzX2tleV9uYW1lXSBhcyBudW1iZXIpICsgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgOiB2YWx1ZTtcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLk1BWF9IUDpcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLk1BWF9QUDpcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkFUVEFDSzpcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkRFRkVOU0U6XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5BR0lMSVRZOlxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuTFVDSzpcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuZWZmZWN0X3R1cm5zX2NvdW50W2VmZmVjdC50eXBlXSA9IHJlbGF0aXZlXG4gICAgICAgICAgICAgICAgICAgID8gKHRoaXMuZWZmZWN0X3R1cm5zX2NvdW50W2VmZmVjdC50eXBlXSBhcyBudW1iZXIpICsgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgOiB2YWx1ZSk7XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5QT1dFUjpcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLlJFU0lTVDpcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuZWZmZWN0X3R1cm5zX2NvdW50W2VmZmVjdC50eXBlXVtlZmZlY3QuYXR0cmlidXRlXSA9IHJlbGF0aXZlXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5lZmZlY3RfdHVybnNfY291bnRbZWZmZWN0LnR5cGVdW2VmZmVjdC5hdHRyaWJ1dGVdICsgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgOiB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZGRfZWZmZWN0KGVmZmVjdF9vYmosIGVmZmVjdF9vd25lcl9pbnN0YW5jZSwgYXBwbHkgPSBmYWxzZSkge1xuICAgICAgICBsZXQgZWZmZWN0ID0gbmV3IEVmZmVjdChcbiAgICAgICAgICAgIGVmZmVjdF9vYmoudHlwZSxcbiAgICAgICAgICAgIGVmZmVjdF9vYmoucXVhbnRpdHksXG4gICAgICAgICAgICBlZmZlY3Rfb2JqLm9wZXJhdG9yLFxuICAgICAgICAgICAgZWZmZWN0X293bmVyX2luc3RhbmNlLFxuICAgICAgICAgICAgZWZmZWN0X29iai5xdWFudGl0eV9pc19hYnNvbHV0ZSxcbiAgICAgICAgICAgIGVmZmVjdF9vYmoucmF0ZSxcbiAgICAgICAgICAgIGVmZmVjdF9vYmouY2hhbmNlLFxuICAgICAgICAgICAgZWZmZWN0X29iai5hdHRyaWJ1dGUsXG4gICAgICAgICAgICBlZmZlY3Rfb2JqLmFkZF9zdGF0dXMsXG4gICAgICAgICAgICBlZmZlY3Rfb2JqLnN0YXR1c19rZXlfbmFtZSxcbiAgICAgICAgICAgIGVmZmVjdF9vYmoudHVybnNfcXVhbnRpdHksXG4gICAgICAgICAgICBlZmZlY3Rfb2JqLnZhcmlhdGlvbl9vbl9maW5hbF9yZXN1bHQsXG4gICAgICAgICAgICBlZmZlY3Rfb2JqLmRhbWFnZV9mb3JtdWxhX2tleV9uYW1lLFxuICAgICAgICAgICAgZWZmZWN0X29iai51c2FnZSxcbiAgICAgICAgICAgIGVmZmVjdF9vYmoub25fY2FzdGVyLFxuICAgICAgICAgICAgZWZmZWN0X29iai5yZWxhdGl2ZV90b19wcm9wZXJ0eSxcbiAgICAgICAgICAgIGVmZmVjdF9vYmouc3ViX2VmZmVjdCxcbiAgICAgICAgICAgIGVmZmVjdF9vYmouZWZmZWN0X21zZyxcbiAgICAgICAgICAgIGVmZmVjdF9vYmouc2hvd19tc2csXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZWZmZWN0cy5wdXNoKGVmZmVjdCk7XG4gICAgICAgIGxldCBjaGFuZ2VzO1xuICAgICAgICBpZiAoYXBwbHkpIHtcbiAgICAgICAgICAgIGNoYW5nZXMgPSBlZmZlY3QuYXBwbHlfZWZmZWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVmZmVjdDogZWZmZWN0LFxuICAgICAgICAgICAgY2hhbmdlczogY2hhbmdlcyxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZW1vdmVfZWZmZWN0KGVmZmVjdF90b19yZW1vdmU6IEVmZmVjdCwgYXBwbHk6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICB0aGlzLmVmZmVjdHMgPSB0aGlzLmVmZmVjdHMuZmlsdGVyKGVmZmVjdCA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZWZmZWN0ICE9PSBlZmZlY3RfdG9fcmVtb3ZlO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGFwcGx5KSB7XG4gICAgICAgICAgICBlZmZlY3RfdG9fcmVtb3ZlLmFwcGx5X2VmZmVjdCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWRkX3Blcm1hbmVudF9zdGF0dXMoc3RhdHVzOiBwZXJtYW5lbnRfc3RhdHVzKSB7XG4gICAgICAgIHRoaXMucGVybWFuZW50X3N0YXR1cy5hZGQoc3RhdHVzKTtcbiAgICB9XG5cbiAgICByZW1vdmVfcGVybWFuZW50X3N0YXR1cyhzdGF0dXM6IHBlcm1hbmVudF9zdGF0dXMpIHtcbiAgICAgICAgdGhpcy5wZXJtYW5lbnRfc3RhdHVzLmRlbGV0ZShzdGF0dXMpO1xuICAgIH1cblxuICAgIGhhc19wZXJtYW5lbnRfc3RhdHVzKHN0YXR1czogcGVybWFuZW50X3N0YXR1cykge1xuICAgICAgICByZXR1cm4gdGhpcy5wZXJtYW5lbnRfc3RhdHVzLmhhcyhzdGF0dXMpO1xuICAgIH1cblxuICAgIGFkZF90ZW1wb3Jhcnlfc3RhdHVzKHN0YXR1czogdGVtcG9yYXJ5X3N0YXR1cykge1xuICAgICAgICB0aGlzLnRlbXBvcmFyeV9zdGF0dXMuYWRkKHN0YXR1cyk7XG4gICAgfVxuXG4gICAgcmVtb3ZlX3RlbXBvcmFyeV9zdGF0dXMoc3RhdHVzOiB0ZW1wb3Jhcnlfc3RhdHVzKSB7XG4gICAgICAgIHRoaXMudGVtcG9yYXJ5X3N0YXR1cy5kZWxldGUoc3RhdHVzKTtcbiAgICB9XG5cbiAgICBoYXNfdGVtcG9yYXJ5X3N0YXR1cyhzdGF0dXM6IHRlbXBvcmFyeV9zdGF0dXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGVtcG9yYXJ5X3N0YXR1cy5oYXMoc3RhdHVzKTtcbiAgICB9XG5cbiAgICBpc19wYXJhbHl6ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRlbXBvcmFyeV9zdGF0dXMuaGFzKHRlbXBvcmFyeV9zdGF0dXMuU0xFRVApIHx8IHRoaXMudGVtcG9yYXJ5X3N0YXR1cy5oYXModGVtcG9yYXJ5X3N0YXR1cy5TVFVOKTtcbiAgICB9XG5cbiAgICBpc19wb2lzb25lZCgpIHtcbiAgICAgICAgaWYgKHRoaXMucGVybWFuZW50X3N0YXR1cy5oYXMocGVybWFuZW50X3N0YXR1cy5QT0lTT04pKSB7XG4gICAgICAgICAgICByZXR1cm4gcGVybWFuZW50X3N0YXR1cy5QT0lTT047XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5wZXJtYW5lbnRfc3RhdHVzLmhhcyhwZXJtYW5lbnRfc3RhdHVzLlZFTk9NKSkge1xuICAgICAgICAgICAgcmV0dXJuIHBlcm1hbmVudF9zdGF0dXMuVkVOT007XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQge0dvbGRlblN1bn0gZnJvbSBcIi4uL0dvbGRlblN1blwiO1xuaW1wb3J0IHtJbnRlcmFjdGFibGVPYmplY3RzfSBmcm9tIFwiLi4vSW50ZXJhY3RhYmxlT2JqZWN0c1wiO1xuaW1wb3J0IHtnZXRfZGlyZWN0aW9ucywgc3BsaXRfZGlyZWN0aW9ufSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuXG5leHBvcnQgZW51bSBldmVudF90eXBlcyB7XG4gICAgQ0xJTUIgPSBcImNsaW1iXCIsXG4gICAgU1BFRUQgPSBcInNwZWVkXCIsXG4gICAgVEVMRVBPUlQgPSBcInRlbGVwb3J0XCIsXG4gICAgSlVNUCA9IFwianVtcFwiLFxuICAgIFNURVAgPSBcInN0ZXBcIixcbiAgICBDT0xMSVNJT04gPSBcImNvbGxpc2lvblwiLFxuICAgIFNMSURFUiA9IFwic2xpZGVyXCIsXG59XG5cbmV4cG9ydCBjbGFzcyBUaWxlRXZlbnQge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgZGF0YTogR29sZGVuU3VuO1xuICAgIHB1YmxpYyB0eXBlOiBldmVudF90eXBlcztcbiAgICBwdWJsaWMgeDogbnVtYmVyO1xuICAgIHB1YmxpYyB5OiBudW1iZXI7XG4gICAgcHVibGljIGxvY2F0aW9uX2tleTogc3RyaW5nO1xuICAgIHB1YmxpYyBpZDogbnVtYmVyO1xuICAgIHB1YmxpYyBhY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnM6IG51bWJlcltdO1xuICAgIHB1YmxpYyBhY3RpdmF0aW9uX2RpcmVjdGlvbnM6IG51bWJlcltdO1xuICAgIHB1YmxpYyBkeW5hbWljOiBib29sZWFuO1xuICAgIHB1YmxpYyBhY3RpdmU6IGJvb2xlYW5bXTtcbiAgICBwdWJsaWMgb3JpZ2luX2ludGVyYWN0YWJsZV9vYmplY3Q6IEludGVyYWN0YWJsZU9iamVjdHM7XG4gICAgcHVibGljIHN0YXRpYyBpZF9pbmNyZW1lbnRlcjogbnVtYmVyO1xuICAgIHB1YmxpYyBzdGF0aWMgZXZlbnRzOiB7W2lkOiBudW1iZXJdOiBUaWxlRXZlbnR9O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGdhbWUsXG4gICAgICAgIGRhdGEsXG4gICAgICAgIHR5cGUsXG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIGFjdGl2YXRpb25fZGlyZWN0aW9ucyxcbiAgICAgICAgYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzLFxuICAgICAgICBkeW5hbWljLFxuICAgICAgICBhY3RpdmUsXG4gICAgICAgIG9yaWdpbl9pbnRlcmFjdGFibGVfb2JqZWN0XG4gICAgKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgIHRoaXMueSA9IHk7XG4gICAgICAgIHRoaXMubG9jYXRpb25fa2V5ID0gVGlsZUV2ZW50LmdldF9sb2NhdGlvbl9rZXkodGhpcy54LCB0aGlzLnkpO1xuICAgICAgICB0aGlzLmlkID0gVGlsZUV2ZW50LmlkX2luY3JlbWVudGVyKys7XG4gICAgICAgIHRoaXMuYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzID0gQXJyYXkuaXNBcnJheShhY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMpXG4gICAgICAgICAgICA/IGFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVyc1xuICAgICAgICAgICAgOiBbYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzXTtcbiAgICAgICAgaWYgKGFjdGl2YXRpb25fZGlyZWN0aW9ucyA9PT0gdW5kZWZpbmVkIHx8IGFjdGl2YXRpb25fZGlyZWN0aW9ucyA9PT0gXCJhbGxcIikge1xuICAgICAgICAgICAgYWN0aXZhdGlvbl9kaXJlY3Rpb25zID0gZ2V0X2RpcmVjdGlvbnModHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hY3RpdmF0aW9uX2RpcmVjdGlvbnMgPSBBcnJheS5pc0FycmF5KGFjdGl2YXRpb25fZGlyZWN0aW9ucylcbiAgICAgICAgICAgID8gYWN0aXZhdGlvbl9kaXJlY3Rpb25zXG4gICAgICAgICAgICA6IFthY3RpdmF0aW9uX2RpcmVjdGlvbnNdO1xuICAgICAgICB0aGlzLmR5bmFtaWMgPSBkeW5hbWljO1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IEFycmF5LmlzQXJyYXkoYWN0aXZlKVxuICAgICAgICAgICAgPyBhY3RpdmVcbiAgICAgICAgICAgIDogbmV3IEFycmF5KHRoaXMuYWN0aXZhdGlvbl9kaXJlY3Rpb25zLmxlbmd0aCkuZmlsbChhY3RpdmUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBhY3RpdmUpO1xuICAgICAgICB0aGlzLm9yaWdpbl9pbnRlcmFjdGFibGVfb2JqZWN0ID0gb3JpZ2luX2ludGVyYWN0YWJsZV9vYmplY3QgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBvcmlnaW5faW50ZXJhY3RhYmxlX29iamVjdDtcbiAgICAgICAgVGlsZUV2ZW50LmV2ZW50c1t0aGlzLmlkXSA9IHRoaXM7XG4gICAgfVxuXG4gICAgaXNfYWN0aXZlKGRpcmVjdGlvbikge1xuICAgICAgICBjb25zdCBwb3NzaWJsZV9kaXJlY3Rpb25zID0gc3BsaXRfZGlyZWN0aW9uKGRpcmVjdGlvbik7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zc2libGVfZGlyZWN0aW9ucy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYWN0aXZlW3RoaXMuYWN0aXZhdGlvbl9kaXJlY3Rpb25zLmluZGV4T2YocG9zc2libGVfZGlyZWN0aW9uc1tpXSldKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGFjdGl2YXRlX2F0KGRpcmVjdGlvbikge1xuICAgICAgICB0aGlzLmFjdGl2ZVt0aGlzLmFjdGl2YXRpb25fZGlyZWN0aW9ucy5pbmRleE9mKGRpcmVjdGlvbildID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBkZWFjdGl2YXRlX2F0KGRpcmVjdGlvbikge1xuICAgICAgICB0aGlzLmFjdGl2ZVt0aGlzLmFjdGl2YXRpb25fZGlyZWN0aW9ucy5pbmRleE9mKGRpcmVjdGlvbildID0gZmFsc2U7XG4gICAgfVxuXG4gICAgYWN0aXZhdGUoKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gdGhpcy5hY3RpdmUubWFwKCgpID0+IHRydWUpO1xuICAgIH1cblxuICAgIGRlYWN0aXZhdGUoKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gdGhpcy5hY3RpdmUubWFwKCgpID0+IGZhbHNlKTtcbiAgICB9XG5cbiAgICBjaGVja19wb3NpdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5oZXJvLnRpbGVfeF9wb3MgPT09IHRoaXMueCAmJiB0aGlzLmRhdGEuaGVyby50aWxlX3lfcG9zID09PSB0aGlzLnk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldF9sb2NhdGlvbl9rZXkoeCwgeSkge1xuICAgICAgICByZXR1cm4geC50b1N0cmluZygpICsgXCJfXCIgKyB5LnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldF9ldmVudF9ieV9pZChldmVudHMsIGlkKSB7XG4gICAgICAgIHJldHVybiBfLmZpbmQoZXZlbnRzLCB7aWQ6IGlkfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldF9ldmVudChpZCkge1xuICAgICAgICByZXR1cm4gVGlsZUV2ZW50LmV2ZW50c1tpZF07XG4gICAgfVxuXG4gICAgc3RhdGljIHJlc2V0KCkge1xuICAgICAgICBUaWxlRXZlbnQuaWRfaW5jcmVtZW50ZXIgPSAwO1xuICAgICAgICBUaWxlRXZlbnQuZXZlbnRzID0ge307XG4gICAgfVxufVxuXG5UaWxlRXZlbnQucmVzZXQoKTtcbiIsImltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSBcIi4vbWFnaWNfbnVtYmVyc1wiO1xuaW1wb3J0IHtlbGVtZW50cywgb3JkZXJlZF9lbGVtZW50c30gZnJvbSBcIi4vdXRpbHNcIjtcbmltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuaW1wb3J0IHtNYWluQ2hhcn0gZnJvbSBcIi4vTWFpbkNoYXJcIjtcblxuZXhwb3J0IGVudW0gZGppbm5fc3RhdHVzIHtcbiAgICBTRVQgPSBcInNldFwiLFxuICAgIFNUQU5EQlkgPSBcInN0YW5kYnlcIixcbiAgICBSRUNPVkVSWSA9IFwicmVjb3ZlcnlcIixcbiAgICBBTlkgPSBcImFueVwiLFxufVxuXG5leHBvcnQgY29uc3QgZGppbm5fZm9udF9jb2xvcnM6IHtbc3RhdHVzIGluIGRqaW5uX3N0YXR1c10/OiBudW1iZXJ9ID0ge1xuICAgIFtkamlubl9zdGF0dXMuUkVDT1ZFUlldOiBudW1iZXJzLllFTExPV19GT05UX0NPTE9SLFxuICAgIFtkamlubl9zdGF0dXMuU1RBTkRCWV06IG51bWJlcnMuUkVEX0ZPTlRfQ09MT1IsXG4gICAgW2RqaW5uX3N0YXR1cy5TRVRdOiBudW1iZXJzLkRFRkFVTFRfRk9OVF9DT0xPUixcbn07XG5cbmV4cG9ydCBjbGFzcyBEamlubiB7XG4gICAgcHVibGljIGtleV9uYW1lOiBzdHJpbmc7XG4gICAgcHVibGljIG5hbWU6IHN0cmluZztcbiAgICBwdWJsaWMgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICBwdWJsaWMgZWxlbWVudDogZWxlbWVudHM7XG4gICAgcHVibGljIGFiaWxpdHlfa2V5X25hbWU6IHN0cmluZztcbiAgICBwdWJsaWMgaHBfYm9vc3Q6IG51bWJlcjtcbiAgICBwdWJsaWMgcHBfYm9vc3Q6IG51bWJlcjtcbiAgICBwdWJsaWMgYXRrX2Jvb3N0OiBudW1iZXI7XG4gICAgcHVibGljIGRlZl9ib29zdDogbnVtYmVyO1xuICAgIHB1YmxpYyBhZ2lfYm9vc3Q6IG51bWJlcjtcbiAgICBwdWJsaWMgbHVrX2Jvb3N0OiBudW1iZXI7XG4gICAgcHVibGljIHN0YXR1czogZGppbm5fc3RhdHVzO1xuICAgIHB1YmxpYyBpbmRleDogbnVtYmVyO1xuICAgIHB1YmxpYyByZWNvdmVyeV90dXJuOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAga2V5X25hbWUsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICBlbGVtZW50LFxuICAgICAgICBhYmlsaXR5X2tleV9uYW1lLFxuICAgICAgICBocF9ib29zdCxcbiAgICAgICAgcHBfYm9vc3QsXG4gICAgICAgIGF0a19ib29zdCxcbiAgICAgICAgZGVmX2Jvb3N0LFxuICAgICAgICBhZ2lfYm9vc3QsXG4gICAgICAgIGx1a19ib29zdCxcbiAgICAgICAgaW5kZXhcbiAgICApIHtcbiAgICAgICAgdGhpcy5rZXlfbmFtZSA9IGtleV9uYW1lO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuYWJpbGl0eV9rZXlfbmFtZSA9IGFiaWxpdHlfa2V5X25hbWU7XG4gICAgICAgIHRoaXMuaHBfYm9vc3QgPSBocF9ib29zdDtcbiAgICAgICAgdGhpcy5wcF9ib29zdCA9IHBwX2Jvb3N0O1xuICAgICAgICB0aGlzLmF0a19ib29zdCA9IGF0a19ib29zdDtcbiAgICAgICAgdGhpcy5kZWZfYm9vc3QgPSBkZWZfYm9vc3Q7XG4gICAgICAgIHRoaXMuYWdpX2Jvb3N0ID0gYWdpX2Jvb3N0O1xuICAgICAgICB0aGlzLmx1a19ib29zdCA9IGx1a19ib29zdDtcbiAgICAgICAgdGhpcy5zdGF0dXMgPSBkamlubl9zdGF0dXMuU0VUO1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIHRoaXMucmVjb3ZlcnlfdHVybiA9IDA7XG4gICAgfVxuXG4gICAgc2V0X3N0YXR1cyhzdGF0dXM6IGRqaW5uX3N0YXR1cywgY2hhcjogTWFpbkNoYXIpIHtcbiAgICAgICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgICAgIGNoYXIudXBkYXRlX2VsZW1lbnRhbF9hdHRyaWJ1dGVzKCk7XG4gICAgICAgIGNoYXIudXBkYXRlX2NsYXNzKCk7XG4gICAgICAgIGNoYXIudXBkYXRlX2F0dHJpYnV0ZXMoKTtcbiAgICAgICAgY2hhci51cGRhdGVfYWJpbGl0aWVzKCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGhhc19zdGFuZGJ5X2RqaW5uKGRqaW5uaV9saXN0LCBtZW1iZXJzKSB7XG4gICAgICAgIHJldHVybiBfLnNvbWUoXG4gICAgICAgICAgICBtZW1iZXJzXG4gICAgICAgICAgICAgICAgLm1hcChjaGFyID0+IGNoYXIuZGppbm5pKVxuICAgICAgICAgICAgICAgIC5tYXAoZGppbm5fa2V5cyA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkamlubl9rZXlzLmZpbHRlcihrZXkgPT4gZGppbm5pX2xpc3Rba2V5XS5zdGF0dXMgPT09IGRqaW5uX3N0YXR1cy5TVEFOREJZKS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0X3N0YW5kYnlfZGppbm5pKGRqaW5uaV9saXN0LCBtZW1iZXJzKSB7XG4gICAgICAgIGxldCBzdGFuZGJ5X2RqaW5uaSA9IF8ubWFwVmFsdWVzKFxuICAgICAgICAgICAgXy5ncm91cEJ5KG1lbWJlcnMubWFwKGMgPT4gYy5kamlubmkpLmZsYXQoKSwga2V5ID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGppbm5pX2xpc3Rba2V5XS5lbGVtZW50O1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBkamlubmlfa2V5cyA9PiBkamlubmlfa2V5cy5maWx0ZXIoa2V5ID0+IGRqaW5uaV9saXN0W2tleV0uc3RhdHVzID09PSBkamlubl9zdGF0dXMuU1RBTkRCWSkubGVuZ3RoXG4gICAgICAgICk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3JkZXJlZF9lbGVtZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IG9yZGVyZWRfZWxlbWVudHNbaV07XG4gICAgICAgICAgICBpZiAoIShlbGVtZW50IGluIHN0YW5kYnlfZGppbm5pKSkge1xuICAgICAgICAgICAgICAgIHN0YW5kYnlfZGppbm5pW2VsZW1lbnRdID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhbmRieV9kamlubmk7XG4gICAgfVxuXG4gICAgc3RhdGljIHNldF90b19yZWNvdmVyeShkamlubmlfbGlzdCwgbWVtYmVycywgcmVxdWlyZW1lbnRzKSB7XG4gICAgICAgIGxldCByZXFfY291bnRlciA9IE9iamVjdC5hc3NpZ24oe30sIHJlcXVpcmVtZW50cyk7XG4gICAgICAgIGxldCBkb25lID0gZmFsc2U7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWVtYmVycy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgcGxheWVyID0gbWVtYmVyc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHBsYXllcl9kamlubmkgPSBwbGF5ZXIuZGppbm5pO1xuICAgICAgICAgICAgbGV0IHJlY292ZXJ5X2NvdW50ZXIgPSAxO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBwbGF5ZXJfZGppbm5pLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGppbm4gPSBkamlubmlfbGlzdFtwbGF5ZXJfZGppbm5pW2pdXTtcbiAgICAgICAgICAgICAgICBpZiAoZGppbm4uc3RhdHVzICE9PSBkamlubl9zdGF0dXMuU1RBTkRCWSkgY29udGludWU7XG4gICAgICAgICAgICAgICAgaWYgKHJlcV9jb3VudGVyW2RqaW5uLmVsZW1lbnRdID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBkamlubi5yZWNvdmVyeV90dXJuID0gcmVjb3ZlcnlfY291bnRlcjtcbiAgICAgICAgICAgICAgICAgICAgKytyZWNvdmVyeV9jb3VudGVyO1xuICAgICAgICAgICAgICAgICAgICBkamlubi5zZXRfc3RhdHVzKGRqaW5uX3N0YXR1cy5SRUNPVkVSWSwgcGxheWVyKTtcbiAgICAgICAgICAgICAgICAgICAgLS1yZXFfY291bnRlcltkamlubi5lbGVtZW50XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfLnNvbWUocmVxX2NvdW50ZXIsIEJvb2xlYW4pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRvbmUpIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHtlbGVtZW50c30gZnJvbSBcIi4vdXRpbHNcIjtcblxuZXhwb3J0IGVudW0gaXRlbV90eXBlcyB7XG4gICAgV0VBUE9OUyA9IFwid2VhcG9uc1wiLFxuICAgIEFSTU9SID0gXCJhcm1vclwiLFxuICAgIENIRVNUX1BST1RFQ1RPUiA9IFwiY2hlc3RfcHJvdGVjdG9yXCIsXG4gICAgSEVBRF9QUk9URUNUT1IgPSBcImhlYWRfcHJvdGVjdG9yXCIsXG4gICAgTEVHX1BST1RFQ1RPUiA9IFwibGVnX3Byb3RlY3RvclwiLFxuICAgIEFCSUxJVFlfR1JBTlRPUiA9IFwiYWJpbGl0eV9ncmFudG9yXCIsXG4gICAgQ0xBU1NfQ0hBTkdFUiA9IFwiY2xhc3NfY2hhbmdlclwiLFxuICAgIFJJTkcgPSBcInJpbmdcIixcbiAgICBVTkRFUldFQVIgPSBcInVuZGVyd2VhclwiLFxuICAgIEdFTkVSQUxfSVRFTSA9IFwiZ2VuZXJhbF9pdGVtXCIsXG59XG5cbmV4cG9ydCBlbnVtIHVzZV90eXBlcyB7XG4gICAgTVVMVElQTEVfVVNFUyA9IFwibXVsdGlwbGVfdXNlc1wiLFxuICAgIFNJTkdMRV9VU0UgPSBcInNpbmdsZV91c2VcIixcbiAgICBCUkVBS1NfV0hFTl9VU0UgPSBcImJyZWFrc193aGVuX3VzZVwiLFxuICAgIE5PX1VTRSA9IFwibm9fdXNlXCIsXG59XG5cbmV4cG9ydCBjbGFzcyBJdGVtIHtcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEJSRUFLU19DSEFOQ0UgPSAxIC8gODtcblxuICAgIHB1YmxpYyBrZXlfbmFtZTogc3RyaW5nO1xuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmc7XG4gICAgcHVibGljIHR5cGU6IGl0ZW1fdHlwZXM7XG4gICAgcHVibGljIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgcHVibGljIHVzZV90eXBlOiB1c2VfdHlwZXM7XG4gICAgcHVibGljIGN1cnNlc193aGVuX2VxdWlwcGVkOiBib29sZWFuO1xuICAgIHB1YmxpYyBjYW50X2JlX3JlbW92ZWQ6IGJvb2xlYW47XG4gICAgcHVibGljIHJhcmVfaXRlbTogYm9vbGVhbjtcbiAgICBwdWJsaWMgaW1wb3J0YW50X2l0ZW06IGJvb2xlYW47XG4gICAgcHVibGljIGNhcnJ5X3VwX3RvXzMwOiBib29sZWFuO1xuICAgIHB1YmxpYyBlZmZlY3RzOiBhbnk7XG4gICAgcHVibGljIGF0dHJpYnV0ZTogZWxlbWVudHM7XG4gICAgcHVibGljIHVubGVhc2hfYWJpbGl0eTogc3RyaW5nO1xuICAgIHB1YmxpYyB1bmxlYXNoX3JhdGU6IG51bWJlcjtcbiAgICBwdWJsaWMgdXNlX2FiaWxpdHk6IHN0cmluZztcbiAgICBwdWJsaWMgZXF1aXBhYmxlX2NoYXJzOiBzdHJpbmdbXTtcbiAgICBwdWJsaWMgcHJpY2U6IG51bWJlcjtcbiAgICBwdWJsaWMgZ3JhbnRlZF9hYmlsaXR5OiBzdHJpbmc7XG4gICAgcHVibGljIGVxdWlwYWJsZTogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBrZXlfbmFtZSxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgIHVzZV90eXBlLFxuICAgICAgICBjdXJzZXNfd2hlbl9lcXVpcHBlZCxcbiAgICAgICAgY2FudF9iZV9yZW1vdmVkLFxuICAgICAgICByYXJlX2l0ZW0sXG4gICAgICAgIGltcG9ydGFudF9pdGVtLFxuICAgICAgICBjYXJyeV91cF90b18zMCxcbiAgICAgICAgZWZmZWN0cyxcbiAgICAgICAgYXR0cmlidXRlLFxuICAgICAgICB1bmxlYXNoX2FiaWxpdHksXG4gICAgICAgIHVubGVhc2hfcmF0ZSxcbiAgICAgICAgdXNlX2FiaWxpdHksXG4gICAgICAgIGVxdWlwYWJsZV9jaGFycyxcbiAgICAgICAgcHJpY2UsXG4gICAgICAgIGdyYW50ZWRfYWJpbGl0eVxuICAgICkge1xuICAgICAgICB0aGlzLmtleV9uYW1lID0ga2V5X25hbWU7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy51c2VfdHlwZSA9IHVzZV90eXBlO1xuICAgICAgICB0aGlzLmN1cnNlc193aGVuX2VxdWlwcGVkID0gY3Vyc2VzX3doZW5fZXF1aXBwZWQ7XG4gICAgICAgIHRoaXMuY2FudF9iZV9yZW1vdmVkID0gY2FudF9iZV9yZW1vdmVkO1xuICAgICAgICB0aGlzLnJhcmVfaXRlbSA9IHJhcmVfaXRlbTtcbiAgICAgICAgdGhpcy5pbXBvcnRhbnRfaXRlbSA9IGltcG9ydGFudF9pdGVtO1xuICAgICAgICB0aGlzLmNhcnJ5X3VwX3RvXzMwID0gY2FycnlfdXBfdG9fMzA7XG4gICAgICAgIHRoaXMuZWZmZWN0cyA9IGVmZmVjdHM7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlID0gYXR0cmlidXRlO1xuICAgICAgICB0aGlzLnVubGVhc2hfYWJpbGl0eSA9IHVubGVhc2hfYWJpbGl0eTtcbiAgICAgICAgdGhpcy51bmxlYXNoX3JhdGUgPSB1bmxlYXNoX3JhdGU7XG4gICAgICAgIHRoaXMudXNlX2FiaWxpdHkgPSB1c2VfYWJpbGl0eTtcbiAgICAgICAgdGhpcy5lcXVpcGFibGVfY2hhcnMgPSBlcXVpcGFibGVfY2hhcnM7XG4gICAgICAgIHRoaXMucHJpY2UgPSBwcmljZTtcbiAgICAgICAgdGhpcy5ncmFudGVkX2FiaWxpdHkgPSBncmFudGVkX2FiaWxpdHk7XG4gICAgICAgIHRoaXMuZXF1aXBhYmxlID0gdGhpcy50eXBlID09PSBpdGVtX3R5cGVzLkdFTkVSQUxfSVRFTSA/IGZhbHNlIDogdHJ1ZTtcbiAgICB9XG59XG4iLCJpbXBvcnQge0FiaWxpdHl9IGZyb20gXCIuL0FiaWxpdHlcIjtcbmltcG9ydCB7RW5lbXl9IGZyb20gXCIuL0VuZW15XCI7XG5pbXBvcnQge0l0ZW19IGZyb20gXCIuL0l0ZW1cIjtcbmltcG9ydCB7TWFpbkNoYXJ9IGZyb20gXCIuL01haW5DaGFyXCI7XG5pbXBvcnQge2VmZmVjdF90eXBlX3N0YXQsIG1haW5fc3RhdHMsIHBlcm1hbmVudF9zdGF0dXMsIHRlbXBvcmFyeV9zdGF0dXN9IGZyb20gXCIuL1BsYXllclwiO1xuaW1wb3J0IHt2YXJpYXRpb24sIGVsZW1lbnRzfSBmcm9tIFwiLi91dGlsc1wiO1xuXG5leHBvcnQgZW51bSBlZmZlY3RfdHlwZXMge1xuICAgIE1BWF9IUCA9IFwibWF4X2hwXCIsXG4gICAgTUFYX1BQID0gXCJtYXhfcHBcIixcbiAgICBBVFRBQ0sgPSBcImF0dGFja1wiLFxuICAgIERFRkVOU0UgPSBcImRlZmVuc2VcIixcbiAgICBBR0lMSVRZID0gXCJhZ2lsaXR5XCIsXG4gICAgTFVDSyA9IFwibHVja1wiLFxuICAgIFBPV0VSID0gXCJwb3dlclwiLFxuICAgIFJFU0lTVCA9IFwicmVzaXN0XCIsXG4gICAgQ1VSUkVOVF9IUCA9IFwiY3VycmVudF9ocFwiLFxuICAgIENVUlJFTlRfUFAgPSBcImN1cnJlbnRfcHBcIixcbiAgICBIUF9SRUNPVkVSWSA9IFwiaHBfcmVjb3ZlcnlcIixcbiAgICBQUF9SRUNPVkVSWSA9IFwicHBfcmVjb3ZlcnlcIixcbiAgICBDUklUSUNBTFMgPSBcImNyaXRpY2Fsc1wiLFxuICAgIENPVU5URVJfU1RSSUtFID0gXCJjb3VudGVyX3N0cmlrZVwiLFxuICAgIFRFTVBPUkFSWV9TVEFUVVMgPSBcInRlbXBvcmFyeV9zdGF0dXNcIixcbiAgICBQRVJNQU5FTlRfU1RBVFVTID0gXCJwZXJtYW5lbnRfc3RhdHVzXCIsXG4gICAgVFVSTlMgPSBcInR1cm5zXCIsXG4gICAgRU5DT1VOVEVSUyA9IFwiZW5jb3VudGVyc1wiLFxuICAgIEZMRUUgPSBcImZsZWVcIixcbiAgICBFTkRfVEhFX1JPVU5EID0gXCJlbmRfdGhlX3JvdW5kXCIsXG4gICAgQUJJTElUWV9QT1dFUiA9IFwiYWJpbGl0eV9wb3dlclwiLFxuICAgIFNFVF9ESklOTiA9IFwic2V0X2RqaW5uXCIsXG4gICAgREFNQUdFX01PRElGSUVSID0gXCJkYW1hZ2VfbW9kaWZpZXJcIixcbiAgICBEQU1BR0VfSU5QVVQgPSBcImRhbWFnZV9pbnB1dFwiLFxufVxuXG5leHBvcnQgY29uc3QgZWZmZWN0X25hbWVzOiB7W2VmZmVjdF90eXBlIGluIGVmZmVjdF90eXBlc10/OiBzdHJpbmd9ID0ge1xuICAgIFtlZmZlY3RfdHlwZXMuTUFYX0hQXTogXCJIUFwiLFxuICAgIFtlZmZlY3RfdHlwZXMuTUFYX1BQXTogXCJQUFwiLFxuICAgIFtlZmZlY3RfdHlwZXMuQVRUQUNLXTogXCJBdHRhY2tcIixcbiAgICBbZWZmZWN0X3R5cGVzLkRFRkVOU0VdOiBcIkRlZmVuc2VcIixcbiAgICBbZWZmZWN0X3R5cGVzLkFHSUxJVFldOiBcIkFnaWxpdHlcIixcbiAgICBbZWZmZWN0X3R5cGVzLkxVQ0tdOiBcIkx1Y2tcIixcbiAgICBbZWZmZWN0X3R5cGVzLlBPV0VSXTogXCJQb3dlclwiLFxuICAgIFtlZmZlY3RfdHlwZXMuUkVTSVNUXTogXCJSZXNpc3RcIixcbn07XG5cbmV4cG9ydCBlbnVtIGVmZmVjdF9vcGVyYXRvcnMge1xuICAgIFBMVVMgPSBcInBsdXNcIixcbiAgICBNSU5VUyA9IFwibWludXNcIixcbiAgICBUSU1FUyA9IFwidGltZXNcIixcbiAgICBESVZJREUgPSBcImRpdmlkZVwiLFxufVxuXG5leHBvcnQgZW51bSBlZmZlY3RfdXNhZ2VzIHtcbiAgICBOT1RfQVBQTFkgPSBcIm5vdF9hcHBseVwiLFxuICAgIE9OX1VTRSA9IFwib25fdXNlXCIsXG4gICAgT05fVEFLRSA9IFwib25fdGFrZVwiLFxuICAgIEJBVFRMRV9ST1VORF9TVEFSVCA9IFwiYmF0dGxlX3JvdW5kX3N0YXJ0XCIsXG4gICAgQkFUVExFX1JPVU5EX0VORCA9IFwiYmF0dGxlX3JvdW5kX2VuZFwiLFxuICAgIFBMQVlFUl9UVVJOX1NUQVJUID0gXCJwbGF5ZXJfdHVybl9zdGFydFwiLFxuICAgIFBMQVlFUl9UVVJOX0VORCA9IFwicGxheWVyX3R1cm5fZW5kXCIsXG59XG5cbmV4cG9ydCBjb25zdCBlZmZlY3RfbXNnID0ge1xuICAgIGF1cmE6IHRhcmdldCA9PiBgQSBwcm90ZWN0aXZlIGF1cmEgZW5jaXJjbGVzICR7dGFyZ2V0Lm5hbWV9IWAsXG4gICAgZG91YmxlOiAoKSA9PiBgQW5kIGl0IGdvdCBkb3VibGVkIWAsXG59O1xuXG5leHBvcnQgY2xhc3MgRWZmZWN0IHtcbiAgICBwdWJsaWMgdHlwZTogZWZmZWN0X3R5cGVzO1xuICAgIHB1YmxpYyBxdWFudGl0eTogbnVtYmVyO1xuICAgIHB1YmxpYyBvcGVyYXRvcjogZWZmZWN0X29wZXJhdG9ycztcbiAgICBwdWJsaWMgZWZmZWN0X293bmVyX2luc3RhbmNlOiBBYmlsaXR5IHwgSXRlbTtcbiAgICBwdWJsaWMgcXVhbnRpdHlfaXNfYWJzb2x1dGU6IGJvb2xlYW47XG4gICAgcHVibGljIHJhdGU6IG51bWJlcjtcbiAgICBwdWJsaWMgY2hhbmNlOiBudW1iZXI7XG4gICAgcHVibGljIGF0dHJpYnV0ZTogZWxlbWVudHM7XG4gICAgcHVibGljIGFkZF9zdGF0dXM6IGJvb2xlYW47XG4gICAgcHVibGljIHN0YXR1c19rZXlfbmFtZTogcGVybWFuZW50X3N0YXR1cyB8IHRlbXBvcmFyeV9zdGF0dXM7XG4gICAgcHVibGljIHR1cm5zX3F1YW50aXR5OiBudW1iZXI7XG4gICAgcHVibGljIHR1cm5fY291bnQ6IG51bWJlcjtcbiAgICBwdWJsaWMgdmFyaWF0aW9uX29uX2ZpbmFsX3Jlc3VsdDogYm9vbGVhbjtcbiAgICBwdWJsaWMgZGFtYWdlX2Zvcm11bGFfa2V5X25hbWU6IHN0cmluZztcbiAgICBwdWJsaWMgdXNhZ2U6IHN0cmluZztcbiAgICBwdWJsaWMgb25fY2FzdGVyOiBib29sZWFuO1xuICAgIHB1YmxpYyByZWxhdGl2ZV90b19wcm9wZXJ0eTogc3RyaW5nO1xuICAgIHB1YmxpYyBlZmZlY3RfbXNnOiBzdHJpbmc7XG4gICAgcHVibGljIHNob3dfbXNnOiBib29sZWFuO1xuICAgIHB1YmxpYyBjaGFyOiBNYWluQ2hhciB8IEVuZW15O1xuICAgIHB1YmxpYyBzdWJfZWZmZWN0OiB7XG4gICAgICAgIHR5cGU6IGVmZmVjdF90eXBlcztcbiAgICAgICAgcXVhbnRpdHlfaXNfYWJzb2x1dGU6IGJvb2xlYW47XG4gICAgICAgIHJhdGU6IG51bWJlcjtcbiAgICAgICAgY2hhbmNlOiBudW1iZXI7XG4gICAgICAgIGF0dHJpYnV0ZTogZWxlbWVudHM7XG4gICAgICAgIHZhcmlhdGlvbl9vbl9maW5hbF9yZXN1bHQ6IGJvb2xlYW47XG4gICAgICAgIHVzYWdlOiBzdHJpbmc7XG4gICAgICAgIG9uX2Nhc3RlcjogYm9vbGVhbjtcbiAgICAgICAgb3BlcmF0b3I6IGVmZmVjdF9vcGVyYXRvcnM7XG4gICAgfTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICB0eXBlLFxuICAgICAgICBxdWFudGl0eSxcbiAgICAgICAgb3BlcmF0b3IsXG4gICAgICAgIGVmZmVjdF9vd25lcl9pbnN0YW5jZSxcbiAgICAgICAgcXVhbnRpdHlfaXNfYWJzb2x1dGUsIC8vZGVmYXVsdDogZmFsc2VcbiAgICAgICAgcmF0ZSwgLy9kZWZhdWx0OiAxLjBcbiAgICAgICAgY2hhbmNlLCAvL2RlZmF1bHQ6IDEuMFxuICAgICAgICBhdHRyaWJ1dGUsIC8vZGVmYXVsdDogbm9fZWxlbWVudFxuICAgICAgICBhZGRfc3RhdHVzLCAvL2Jvb2xlYW4uIElmIGZhbHNlLCByZW1vdmUgc3RhdHVzXG4gICAgICAgIHN0YXR1c19rZXlfbmFtZSxcbiAgICAgICAgdHVybnNfcXVhbnRpdHksXG4gICAgICAgIHZhcmlhdGlvbl9vbl9maW5hbF9yZXN1bHQsXG4gICAgICAgIGRhbWFnZV9mb3JtdWxhX2tleV9uYW1lLCAvL2luc3RlYWQgb2YgdXNpbmcgdGhlIG9wZXJhdG9yLCB1c2VzIGEgZGFtYWdlIGZvcm11bGEuIFJldHVybiB2YWx1ZSBpcyBub3QgdXNlZC5cbiAgICAgICAgdXNhZ2UsXG4gICAgICAgIG9uX2Nhc3RlciwgLy9ib29sZWFuLiBkZWZhdWx0IGZhbHNlLiBJZiB0cnVlLCB0aGUgY2FzdGVyIHdpbGwgdGFrZSB0aGUgZWZmZWN0LlxuICAgICAgICByZWxhdGl2ZV90b19wcm9wZXJ0eSwgLy9tYWtlIHRoZSBjYWxjdWxhdGlvbiBiYXNlZCBvbiBhIHBsYXllciBwcm9wZXJ0eVxuICAgICAgICBzdWJfZWZmZWN0LFxuICAgICAgICBlZmZlY3RfbXNnLFxuICAgICAgICBzaG93X21zZyxcbiAgICAgICAgY2hhclxuICAgICkge1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLnF1YW50aXR5ID0gcXVhbnRpdHk7XG4gICAgICAgIHRoaXMub3BlcmF0b3IgPSBvcGVyYXRvcjtcbiAgICAgICAgdGhpcy5lZmZlY3Rfb3duZXJfaW5zdGFuY2UgPSBlZmZlY3Rfb3duZXJfaW5zdGFuY2U7XG4gICAgICAgIHRoaXMucXVhbnRpdHlfaXNfYWJzb2x1dGUgPSBxdWFudGl0eV9pc19hYnNvbHV0ZSA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBxdWFudGl0eV9pc19hYnNvbHV0ZTtcbiAgICAgICAgdGhpcy5yYXRlID0gcmF0ZSA9PT0gdW5kZWZpbmVkID8gMS4wIDogcmF0ZTtcbiAgICAgICAgdGhpcy5jaGFuY2UgPSBjaGFuY2UgPT09IHVuZGVmaW5lZCA/IDEuMCA6IGNoYW5jZTtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGUgPSBhdHRyaWJ1dGUgPT09IHVuZGVmaW5lZCA/IGVsZW1lbnRzLk5PX0VMRU1FTlQgOiBhdHRyaWJ1dGU7XG4gICAgICAgIHRoaXMuYWRkX3N0YXR1cyA9IGFkZF9zdGF0dXM7XG4gICAgICAgIHRoaXMuc3RhdHVzX2tleV9uYW1lID0gc3RhdHVzX2tleV9uYW1lO1xuICAgICAgICB0aGlzLnR1cm5zX3F1YW50aXR5ID0gdHVybnNfcXVhbnRpdHk7XG4gICAgICAgIHRoaXMudHVybl9jb3VudCA9IHR1cm5zX3F1YW50aXR5O1xuICAgICAgICB0aGlzLnZhcmlhdGlvbl9vbl9maW5hbF9yZXN1bHQgPSB2YXJpYXRpb25fb25fZmluYWxfcmVzdWx0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IHZhcmlhdGlvbl9vbl9maW5hbF9yZXN1bHQ7XG4gICAgICAgIHRoaXMuZGFtYWdlX2Zvcm11bGFfa2V5X25hbWUgPSBkYW1hZ2VfZm9ybXVsYV9rZXlfbmFtZTtcbiAgICAgICAgdGhpcy51c2FnZSA9IHVzYWdlID09PSB1bmRlZmluZWQgPyBlZmZlY3RfdXNhZ2VzLk5PVF9BUFBMWSA6IHVzYWdlO1xuICAgICAgICB0aGlzLm9uX2Nhc3RlciA9IG9uX2Nhc3RlciA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBvbl9jYXN0ZXI7XG4gICAgICAgIHRoaXMucmVsYXRpdmVfdG9fcHJvcGVydHkgPSByZWxhdGl2ZV90b19wcm9wZXJ0eTtcbiAgICAgICAgdGhpcy5lZmZlY3RfbXNnID0gZWZmZWN0X21zZztcbiAgICAgICAgdGhpcy5zaG93X21zZyA9IHNob3dfbXNnID09PSB1bmRlZmluZWQgPyB0cnVlIDogc2hvd19tc2c7XG4gICAgICAgIHRoaXMuY2hhciA9IGNoYXI7XG4gICAgICAgIHRoaXMuc3ViX2VmZmVjdCA9IHN1Yl9lZmZlY3Q7XG4gICAgICAgIGlmICh0aGlzLnN1Yl9lZmZlY3QgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5pbml0X3N1Yl9lZmZlY3QoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBhcHBseV9vcGVyYXRvcihhOiBudW1iZXIsIGI6IG51bWJlciwgb3BlcmF0b3I6IGVmZmVjdF9vcGVyYXRvcnMpIHtcbiAgICAgICAgc3dpdGNoIChvcGVyYXRvcikge1xuICAgICAgICAgICAgY2FzZSBlZmZlY3Rfb3BlcmF0b3JzLlBMVVM6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGEgKyBiO1xuICAgICAgICAgICAgY2FzZSBlZmZlY3Rfb3BlcmF0b3JzLk1JTlVTOlxuICAgICAgICAgICAgICAgIHJldHVybiBhIC0gYjtcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X29wZXJhdG9ycy5USU1FUzpcbiAgICAgICAgICAgICAgICByZXR1cm4gYSAqIGI7XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF9vcGVyYXRvcnMuRElWSURFOlxuICAgICAgICAgICAgICAgIHJldHVybiBhIC8gYjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGluaXRfc3ViX2VmZmVjdCgpIHtcbiAgICAgICAgdGhpcy5zdWJfZWZmZWN0LnF1YW50aXR5X2lzX2Fic29sdXRlID1cbiAgICAgICAgICAgIHRoaXMuc3ViX2VmZmVjdC5xdWFudGl0eV9pc19hYnNvbHV0ZSA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiB0aGlzLnN1Yl9lZmZlY3QucXVhbnRpdHlfaXNfYWJzb2x1dGU7XG4gICAgICAgIHRoaXMuc3ViX2VmZmVjdC5yYXRlID0gdGhpcy5zdWJfZWZmZWN0LnJhdGUgPT09IHVuZGVmaW5lZCA/IDEuMCA6IHRoaXMuc3ViX2VmZmVjdC5yYXRlO1xuICAgICAgICB0aGlzLnN1Yl9lZmZlY3QuY2hhbmNlID0gdGhpcy5zdWJfZWZmZWN0LmNoYW5jZSA9PT0gdW5kZWZpbmVkID8gMS4wIDogdGhpcy5zdWJfZWZmZWN0LmNoYW5jZTtcbiAgICAgICAgdGhpcy5zdWJfZWZmZWN0LmF0dHJpYnV0ZSA9XG4gICAgICAgICAgICB0aGlzLnN1Yl9lZmZlY3QuYXR0cmlidXRlID09PSB1bmRlZmluZWQgPyBlbGVtZW50cy5OT19FTEVNRU5UIDogdGhpcy5zdWJfZWZmZWN0LmF0dHJpYnV0ZTtcbiAgICAgICAgdGhpcy5zdWJfZWZmZWN0LnZhcmlhdGlvbl9vbl9maW5hbF9yZXN1bHQgPVxuICAgICAgICAgICAgdGhpcy5zdWJfZWZmZWN0LnZhcmlhdGlvbl9vbl9maW5hbF9yZXN1bHQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogdGhpcy5zdWJfZWZmZWN0LnZhcmlhdGlvbl9vbl9maW5hbF9yZXN1bHQ7XG4gICAgICAgIHRoaXMuc3ViX2VmZmVjdC51c2FnZSA9IHRoaXMuc3ViX2VmZmVjdC51c2FnZSA9PT0gdW5kZWZpbmVkID8gZWZmZWN0X3VzYWdlcy5OT1RfQVBQTFkgOiB0aGlzLnN1Yl9lZmZlY3QudXNhZ2U7XG4gICAgICAgIHRoaXMuc3ViX2VmZmVjdC5vbl9jYXN0ZXIgPSB0aGlzLnN1Yl9lZmZlY3Qub25fY2FzdGVyID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IHRoaXMuc3ViX2VmZmVjdC5vbl9jYXN0ZXI7XG4gICAgfVxuXG4gICAgYXBwbHlfZ2VuZXJhbF92YWx1ZShwcm9wZXJ0eTogc3RyaW5nLCBkaXJlY3RfdmFsdWU/OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgYmVmb3JlX3ZhbHVlID0gcHJvcGVydHkgIT09IHVuZGVmaW5lZCA/IHRoaXMuY2hhcltwcm9wZXJ0eV0gOiBkaXJlY3RfdmFsdWU7XG4gICAgICAgIGlmIChNYXRoLnJhbmRvbSgpID49IHRoaXMuY2hhbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGJlZm9yZTogYmVmb3JlX3ZhbHVlLFxuICAgICAgICAgICAgICAgIGFmdGVyOiBiZWZvcmVfdmFsdWUsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGxldCBhZnRlcl92YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMucXVhbnRpdHlfaXNfYWJzb2x1dGUpIHtcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFyW3Byb3BlcnR5XSA9IHRoaXMucXVhbnRpdHk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZnRlcl92YWx1ZSA9IHRoaXMucXVhbnRpdHk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLnF1YW50aXR5O1xuICAgICAgICAgICAgdmFsdWUgKj0gdGhpcy5yYXRlO1xuICAgICAgICAgICAgaWYgKHRoaXMudmFyaWF0aW9uX29uX2ZpbmFsX3Jlc3VsdCkge1xuICAgICAgICAgICAgICAgIHZhbHVlICs9IHZhcmlhdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHZhbHVlX3RvX3VzZTtcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVfdG9fdXNlID0gdGhpcy5jaGFyW1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbGF0aXZlX3RvX3Byb3BlcnR5ICE9PSB1bmRlZmluZWQgPyB0aGlzLnJlbGF0aXZlX3RvX3Byb3BlcnR5IDogcHJvcGVydHlcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YWx1ZV90b191c2UgPSBkaXJlY3RfdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBFZmZlY3QuYXBwbHlfb3BlcmF0b3IodmFsdWVfdG9fdXNlLCB2YWx1ZSwgdGhpcy5vcGVyYXRvcikgfCAwO1xuICAgICAgICAgICAgaWYgKHByb3BlcnR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJbcHJvcGVydHldID0gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWZ0ZXJfdmFsdWUgPSByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJlZm9yZTogYmVmb3JlX3ZhbHVlLFxuICAgICAgICAgICAgYWZ0ZXI6IGFmdGVyX3ZhbHVlLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGFwcGx5X3N1YmVmZmVjdChwcm9wZXJ0eTogc3RyaW5nLCB2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIGlmIChNYXRoLnJhbmRvbSgpIDwgdGhpcy5zdWJfZWZmZWN0LmNoYW5jZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3ViX2VmZmVjdC5xdWFudGl0eV9pc19hYnNvbHV0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhcltwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgKj0gdGhpcy5zdWJfZWZmZWN0LnJhdGU7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3ViX2VmZmVjdC52YXJpYXRpb25fb25fZmluYWxfcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlICs9IHZhcmlhdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJbcHJvcGVydHldID0gRWZmZWN0LmFwcGx5X29wZXJhdG9yKHRoaXMuY2hhcltwcm9wZXJ0eV0sIHZhbHVlLCB0aGlzLnN1Yl9lZmZlY3Qub3BlcmF0b3IpIHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5jaGFyW3Byb3BlcnR5XTtcbiAgICB9XG5cbiAgICBzdGF0aWMgcHJldmlld192YWx1ZV9hcHBsaWVkKGVmZmVjdF9vYmosIGJhc2VfdmFsdWUpIHtcbiAgICAgICAgaWYgKGVmZmVjdF9vYmoucXVhbnRpdHlfaXNfYWJzb2x1dGUpIHtcbiAgICAgICAgICAgIHJldHVybiBlZmZlY3Rfb2JqLnF1YW50aXR5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gZWZmZWN0X29iai5xdWFudGl0eTtcbiAgICAgICAgICAgIGlmICghZWZmZWN0X29iai5yYXRlKSB7XG4gICAgICAgICAgICAgICAgZWZmZWN0X29iai5yYXRlID0gMS4wO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFsdWUgKj0gZWZmZWN0X29iai5yYXRlO1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSB8IDA7XG4gICAgICAgICAgICByZXR1cm4gRWZmZWN0LmFwcGx5X29wZXJhdG9yKGJhc2VfdmFsdWUsIHZhbHVlLCBlZmZlY3Rfb2JqLm9wZXJhdG9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNoZWNrX2NhcHMoY3VycmVudF9wcm9wLCBtYXhfcHJvcCwgbWluX3ZhbHVlLCByZXN1bHRfb2JqKSB7XG4gICAgICAgIGlmICh0aGlzLmNoYXJbY3VycmVudF9wcm9wXSA+IHRoaXMuY2hhclttYXhfcHJvcF0pIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHRfb2JqKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0X29iai5hZnRlciA9IHRoaXMuY2hhclttYXhfcHJvcF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNoYXJbY3VycmVudF9wcm9wXSA9IHRoaXMuY2hhclttYXhfcHJvcF07XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5jaGFyW2N1cnJlbnRfcHJvcF0gPCBtaW5fdmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHRfb2JqKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0X29iai5hZnRlciA9IG1pbl92YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY2hhcltjdXJyZW50X3Byb3BdID0gbWluX3ZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXBwbHlfZWZmZWN0KGRpcmVjdF92YWx1ZT8pIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLk1BWF9IUDpcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLk1BWF9QUDpcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkFUVEFDSzpcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkRFRkVOU0U6XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5BR0lMSVRZOlxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuTFVDSzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcHBseV9nZW5lcmFsX3ZhbHVlKGVmZmVjdF90eXBlX3N0YXRbdGhpcy50eXBlXSk7XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5IUF9SRUNPVkVSWTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcHBseV9nZW5lcmFsX3ZhbHVlKFwiaHBfcmVjb3ZlcnlcIik7XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5QUF9SRUNPVkVSWTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcHBseV9nZW5lcmFsX3ZhbHVlKFwicHBfcmVjb3ZlcnlcIik7XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5DVVJSRU5UX0hQOlxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdF9jdXJyZW50X2hwID0gdGhpcy5hcHBseV9nZW5lcmFsX3ZhbHVlKG1haW5fc3RhdHMuQ1VSUkVOVF9IUCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja19jYXBzKG1haW5fc3RhdHMuQ1VSUkVOVF9IUCwgbWFpbl9zdGF0cy5NQVhfSFAsIDAsIHJlc3VsdF9jdXJyZW50X2hwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0X2N1cnJlbnRfaHA7XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5DVVJSRU5UX1BQOlxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdF9jdXJyZW50X3BwID0gdGhpcy5hcHBseV9nZW5lcmFsX3ZhbHVlKG1haW5fc3RhdHMuQ1VSUkVOVF9QUCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja19jYXBzKG1haW5fc3RhdHMuQ1VSUkVOVF9QUCwgbWFpbl9zdGF0cy5NQVhfUFAsIDAsIHJlc3VsdF9jdXJyZW50X3BwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0X2N1cnJlbnRfcHA7XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5QT1dFUjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcHBseV9nZW5lcmFsX3ZhbHVlKHRoaXMuYXR0cmlidXRlICsgXCJfcG93ZXJfY3VycmVudFwiKTtcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLlJFU0lTVDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcHBseV9nZW5lcmFsX3ZhbHVlKHRoaXMuYXR0cmlidXRlICsgXCJfcmVzaXN0X2N1cnJlbnRcIik7XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5UVVJOUzpcbiAgICAgICAgICAgICAgICB0aGlzLnR1cm5fY291bnQgPSAxO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5X2dlbmVyYWxfdmFsdWUoXCJ0dXJuc1wiKTtcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLlBFUk1BTkVOVF9TVEFUVVM6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYWRkX3N0YXR1cykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXIuYWRkX3Blcm1hbmVudF9zdGF0dXModGhpcy5zdGF0dXNfa2V5X25hbWUgYXMgcGVybWFuZW50X3N0YXR1cyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFyLnJlbW92ZV9wZXJtYW5lbnRfc3RhdHVzKHRoaXMuc3RhdHVzX2tleV9uYW1lIGFzIHBlcm1hbmVudF9zdGF0dXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5URU1QT1JBUllfU1RBVFVTOlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmFkZF9zdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFyLmFkZF90ZW1wb3Jhcnlfc3RhdHVzKHRoaXMuc3RhdHVzX2tleV9uYW1lIGFzIHRlbXBvcmFyeV9zdGF0dXMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhci5yZW1vdmVfdGVtcG9yYXJ5X3N0YXR1cyh0aGlzLnN0YXR1c19rZXlfbmFtZSBhcyB0ZW1wb3Jhcnlfc3RhdHVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuREFNQUdFX01PRElGSUVSOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5X2dlbmVyYWxfdmFsdWUodW5kZWZpbmVkLCBkaXJlY3RfdmFsdWUpO1xuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuREFNQUdFX0lOUFVUOlxuICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSB0aGlzLmFwcGx5X2dlbmVyYWxfdmFsdWUodW5kZWZpbmVkLCBkaXJlY3RfdmFsdWUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXQgPSBlZmZlY3RfdHlwZV9zdGF0W3RoaXMuc3ViX2VmZmVjdC50eXBlXTtcbiAgICAgICAgICAgICAgICByZXN1bHQuYmVmb3JlID0gdGhpcy5jaGFyW3N0YXRdO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5hZnRlciA9IHRoaXMuYXBwbHlfc3ViZWZmZWN0KHN0YXQsIHJlc3VsdC5hZnRlcik7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLnN1Yl9lZmZlY3QudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5DVVJSRU5UX0hQOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja19jYXBzKG1haW5fc3RhdHMuQ1VSUkVOVF9IUCwgbWFpbl9zdGF0cy5NQVhfSFAsIDAsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuQ1VSUkVOVF9QUDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tfY2FwcyhtYWluX3N0YXRzLkNVUlJFTlRfUFAsIG1haW5fc3RhdHMuTUFYX1BQLCAwLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQge0JpdG1hcFRleHR9IGZyb20gXCJwaGFzZXItY2VcIjtcbmltcG9ydCB7RGppbm4sIGRqaW5uX3N0YXR1c30gZnJvbSBcIi4uL0RqaW5uXCI7XG5pbXBvcnQge0dvbGRlblN1bn0gZnJvbSBcIi4uL0dvbGRlblN1blwiO1xuaW1wb3J0IHtNYWluU3RhdHVzTWVudX0gZnJvbSBcIi4uL21haW5fbWVudXMvTWFpblN0YXR1c01lbnVcIjtcbmltcG9ydCB7ZGlyZWN0aW9ucywgZWxlbWVudHMsIHJldmVyc2VfZGlyZWN0aW9uc30gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQge1dpbmRvd30gZnJvbSBcIi4uL1dpbmRvd1wiO1xuaW1wb3J0IHtCYXR0bGVTdGF0dXNXaW5kb3d9IGZyb20gXCIuLi93aW5kb3dzL2JhdHRsZS9CYXR0bGVTdGF0dXNXaW5kb3dcIjtcblxuZXhwb3J0IGVudW0gU3RhdHVzTW9kZXMge1xuICAgIEJBVFRMRSxcbiAgICBNRU5VLFxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgU3RhdHVzQ29tcG9uZW50IHtcbiAgICBwcm90ZWN0ZWQgc3RhdGljIHJlYWRvbmx5IEdST1VQX0tFWSA9IFwic3RhdHVzX2NvbXBvbmVudFwiO1xuXG4gICAgcHJvdGVjdGVkIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHByb3RlY3RlZCBkYXRhOiBHb2xkZW5TdW47XG4gICAgcHJvdGVjdGVkIHdpbmRvdzogV2luZG93O1xuXG4gICAgcHJvdGVjdGVkIGN1cnJlbnRfbGluZTogbnVtYmVyO1xuICAgIHByb3RlY3RlZCBjdXJyZW50X2NvbDogbnVtYmVyO1xuXG4gICAgcHJvdGVjdGVkIG1vZGU6IFN0YXR1c01vZGVzO1xuXG4gICAgcHJvdGVjdGVkIGhpZ2hsaWdodDogUGhhc2VyLkdyYXBoaWNzO1xuICAgIHByb3RlY3RlZCBzdGF0ZV9zcHJpdGVzOiAoUGhhc2VyLlNwcml0ZSB8IEJpdG1hcFRleHQgfCBQaGFzZXIuR3JvdXApW107XG4gICAgcHJvdGVjdGVkIG1hbmFnZXI6IEJhdHRsZVN0YXR1c1dpbmRvdyB8IE1haW5TdGF0dXNNZW51O1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKFxuICAgICAgICBnYW1lOiBQaGFzZXIuR2FtZSxcbiAgICAgICAgZGF0YTogR29sZGVuU3VuLFxuICAgICAgICB3aW5kb3c6IFdpbmRvdyxcbiAgICAgICAgbWFuYWdlcjogQmF0dGxlU3RhdHVzV2luZG93IHwgTWFpblN0YXR1c01lbnUsXG4gICAgICAgIHBvcz86IHtsaW5lOiBudW1iZXI7IGNvbDogbnVtYmVyfSxcbiAgICAgICAgbW9kZT86IFN0YXR1c01vZGVzXG4gICAgKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMud2luZG93ID0gd2luZG93O1xuXG4gICAgICAgIHRoaXMubW9kZSA9IG1vZGUgPyBtb2RlIDogU3RhdHVzTW9kZXMuQkFUVExFO1xuXG4gICAgICAgIGlmICh0aGlzLm1vZGUgPT09IFN0YXR1c01vZGVzLkJBVFRMRSkgdGhpcy5tYW5hZ2VyID0gdGhpcy5tYW5hZ2VyIGFzIEJhdHRsZVN0YXR1c1dpbmRvdztcbiAgICAgICAgZWxzZSBpZiAodGhpcy5tb2RlID09PSBTdGF0dXNNb2Rlcy5NRU5VKSB0aGlzLm1hbmFnZXIgPSB0aGlzLm1hbmFnZXIgYXMgTWFpblN0YXR1c01lbnU7XG5cbiAgICAgICAgaWYgKCF0aGlzLndpbmRvdy5pbnRlcm5hbF9ncm91cHNbU3RhdHVzQ29tcG9uZW50LkdST1VQX0tFWV0pXG4gICAgICAgICAgICB0aGlzLndpbmRvdy5kZWZpbmVfaW50ZXJuYWxfZ3JvdXAoU3RhdHVzQ29tcG9uZW50LkdST1VQX0tFWSwge3g6IDAsIHk6IDB9KTtcblxuICAgICAgICB0aGlzLmhpZ2hsaWdodCA9IHRoaXMuZ2FtZS5hZGQuZ3JhcGhpY3MoMCwgMCk7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0LmJsZW5kTW9kZSA9IFBJWEkuYmxlbmRNb2Rlcy5TQ1JFRU47XG4gICAgICAgIHRoaXMud2luZG93LmFkZF90b19pbnRlcm5hbF9ncm91cChTdGF0dXNDb21wb25lbnQuR1JPVVBfS0VZLCB0aGlzLmhpZ2hsaWdodCk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZV9zcHJpdGVzID0gW107XG4gICAgICAgIHRoaXMubWFuYWdlciA9IG1hbmFnZXI7XG5cbiAgICAgICAgdGhpcy5jdXJyZW50X2NvbCA9IHBvcyA/IHBvcy5jb2wgOiAwO1xuICAgICAgICB0aGlzLmN1cnJlbnRfbGluZSA9IHBvcyA/IHBvcy5saW5lIDogMDtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWJzdHJhY3Qgc2VsZWN0X29wdGlvbigpOiB2b2lkO1xuICAgIHB1YmxpYyBhYnN0cmFjdCBvbl9jaGFuZ2UoKTogdm9pZDtcbiAgICBwdWJsaWMgYWJzdHJhY3Qgb25fbGVmdCgpOiB2b2lkO1xuICAgIHB1YmxpYyBhYnN0cmFjdCBvbl9yaWdodCgpOiB2b2lkO1xuICAgIHB1YmxpYyBhYnN0cmFjdCBvbl91cCgpOiB2b2lkO1xuICAgIHB1YmxpYyBhYnN0cmFjdCBvbl9kb3duKCk6IHZvaWQ7XG4gICAgcHVibGljIGFic3RyYWN0IGluaXRpYWxpemUoKTogdm9pZDtcblxuICAgIHByb3RlY3RlZCBnZXQgc2VsZWN0ZWRfY2hhcigpIHtcbiAgICAgICAgbGV0IG1hbmFnZXIgPSBudWxsO1xuXG4gICAgICAgIGlmICh0aGlzLm1vZGUgPT09IFN0YXR1c01vZGVzLkJBVFRMRSkgbWFuYWdlciA9IHRoaXMubWFuYWdlciBhcyBCYXR0bGVTdGF0dXNXaW5kb3c7XG4gICAgICAgIGVsc2UgaWYgKHRoaXMubW9kZSA9PT0gU3RhdHVzTW9kZXMuTUVOVSkgbWFuYWdlciA9IHRoaXMubWFuYWdlciBhcyBNYWluU3RhdHVzTWVudTtcblxuICAgICAgICByZXR1cm4gbWFuYWdlci5zZWxlY3RlZF9jaGFyYWN0ZXI7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBiYXR0bGVfc3RhdHVzX2VmZmVjdHMoKSB7XG4gICAgICAgIGxldCBtYW5hZ2VyID0gbnVsbDtcblxuICAgICAgICBpZiAodGhpcy5tb2RlID09PSBTdGF0dXNNb2Rlcy5CQVRUTEUpIG1hbmFnZXIgPSB0aGlzLm1hbmFnZXIgYXMgQmF0dGxlU3RhdHVzV2luZG93O1xuICAgICAgICBlbHNlIGlmICh0aGlzLm1vZGUgPT09IFN0YXR1c01vZGVzLk1FTlUpIG1hbmFnZXIgPSB0aGlzLm1hbmFnZXIgYXMgTWFpblN0YXR1c01lbnU7XG5cbiAgICAgICAgcmV0dXJuIG1hbmFnZXIuYmF0dGxlX2VmZmVjdHNfYXJyYXk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHVwZGF0ZV9kZXNjcmlwdGlvbihsaW5lMTogc3RyaW5nLCBsaW5lMj86IHN0cmluZykge1xuICAgICAgICBsZXQgbWFuYWdlciA9IG51bGw7XG5cbiAgICAgICAgaWYgKHRoaXMubW9kZSA9PT0gU3RhdHVzTW9kZXMuQkFUVExFKSBtYW5hZ2VyID0gdGhpcy5tYW5hZ2VyIGFzIEJhdHRsZVN0YXR1c1dpbmRvdztcbiAgICAgICAgZWxzZSBpZiAodGhpcy5tb2RlID09PSBTdGF0dXNNb2Rlcy5NRU5VKSBtYW5hZ2VyID0gdGhpcy5tYW5hZ2VyIGFzIE1haW5TdGF0dXNNZW51O1xuXG4gICAgICAgIG1hbmFnZXIudXBkYXRlX2Rlc2NyaXB0aW9uKGxpbmUxLCBsaW5lMik7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHVwZGF0ZV9oaWdobGlnaHQoaGlnaGxpZ2h0OiB7eDogbnVtYmVyOyB5OiBudW1iZXI7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyfSkge1xuICAgICAgICB0aGlzLmhpZ2hsaWdodC5jbGVhcigpO1xuXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0LmJlZ2luRmlsbCh0aGlzLndpbmRvdy5jb2xvciwgMSk7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0LmRyYXdSZWN0KGhpZ2hsaWdodC54LCBoaWdobGlnaHQueSwgaGlnaGxpZ2h0LndpZHRoLCBoaWdobGlnaHQuaGVpZ2h0KTtcbiAgICAgICAgdGhpcy5oaWdobGlnaHQuZW5kRmlsbCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgY3VycmVudF9wb3MoKSB7XG4gICAgICAgIHJldHVybiB7bGluZTogdGhpcy5jdXJyZW50X2xpbmUsIGNvbDogdGhpcy5jdXJyZW50X2NvbH07XG4gICAgfVxuXG4gICAgcHVibGljIHJlc2V0KHBvcz86IHtsaW5lOiBudW1iZXI7IGNvbDogbnVtYmVyfSkge1xuICAgICAgICBpZiAocG9zKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRfbGluZSA9IHBvcy5saW5lO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50X2NvbCA9IHBvcy5jb2w7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuXG4gICAgICAgIHRoaXMuc2VsZWN0X29wdGlvbigpO1xuICAgICAgICB0aGlzLm9uX2NoYW5nZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5oaWdobGlnaHQuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5kYXRhLmN1cnNvcl9tYW5hZ2VyLmhpZGUoKTtcblxuICAgICAgICBmb3IgKGxldCBpbmRleCBpbiB0aGlzLnN0YXRlX3Nwcml0ZXMpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVfc3ByaXRlc1tpbmRleF0uZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdGVfc3ByaXRlcyA9IFtdO1xuXG4gICAgICAgIGlmICh0aGlzLndpbmRvdy5wYWdlX2luZGljYXRvci5pc19zZXQpIHRoaXMud2luZG93LnBhZ2VfaW5kaWNhdG9yLnRlcm1pbmFudGUoKTtcbiAgICAgICAgdGhpcy53aW5kb3cuY2xlYXJfc2VwYXJhdG9ycygpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXRfZGppbm5fY291bnRzKGVsZW1lbnQ6IGVsZW1lbnRzKSB7XG4gICAgICAgIGNvbnN0IGRqaW5uID0gdGhpcy5zZWxlY3RlZF9jaGFyW2VsZW1lbnQgKyBcIl9kamlubmlcIl0ubWFwKFxuICAgICAgICAgICAgKGRqaW5uX2tleTogc3RyaW5nKSA9PiB0aGlzLmRhdGEuaW5mby5kamlubmlfbGlzdFtkamlubl9rZXldXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b3RhbDogZGppbm4ubGVuZ3RoLFxuICAgICAgICAgICAgc2V0OiBkamlubi5maWx0ZXIoKGRqaW5uaTogRGppbm4pID0+IGRqaW5uaS5zdGF0dXMgPT09IGRqaW5uX3N0YXR1cy5TRVQpLmxlbmd0aCxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0X2VsZW1lbnRhbF9zdGF0cyhlbGVtZW50OiBlbGVtZW50cykge1xuICAgICAgICBsZXQgZWxlbWVudGFsX2xldmVsID0gMDtcbiAgICAgICAgbGV0IGVsZW1lbnRhbF9wb3dlciA9IDA7XG4gICAgICAgIGxldCBlbGVtZW50YWxfcmVzaXN0YW5jZSA9IDA7XG5cbiAgICAgICAgc3dpdGNoIChlbGVtZW50KSB7XG4gICAgICAgICAgICBjYXNlIGVsZW1lbnRzLlZFTlVTOlxuICAgICAgICAgICAgICAgIGVsZW1lbnRhbF9sZXZlbCA9IHRoaXMuc2VsZWN0ZWRfY2hhci52ZW51c19sZXZlbF9jdXJyZW50O1xuICAgICAgICAgICAgICAgIGVsZW1lbnRhbF9wb3dlciA9IHRoaXMuc2VsZWN0ZWRfY2hhci52ZW51c19wb3dlcl9jdXJyZW50O1xuICAgICAgICAgICAgICAgIGVsZW1lbnRhbF9yZXNpc3RhbmNlID0gdGhpcy5zZWxlY3RlZF9jaGFyLnZlbnVzX3Jlc2lzdF9jdXJyZW50O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBlbGVtZW50cy5NRVJDVVJZOlxuICAgICAgICAgICAgICAgIGVsZW1lbnRhbF9sZXZlbCA9IHRoaXMuc2VsZWN0ZWRfY2hhci5tZXJjdXJ5X2xldmVsX2N1cnJlbnQ7XG4gICAgICAgICAgICAgICAgZWxlbWVudGFsX3Bvd2VyID0gdGhpcy5zZWxlY3RlZF9jaGFyLm1lcmN1cnlfcG93ZXJfY3VycmVudDtcbiAgICAgICAgICAgICAgICBlbGVtZW50YWxfcmVzaXN0YW5jZSA9IHRoaXMuc2VsZWN0ZWRfY2hhci5tZXJjdXJ5X3Jlc2lzdF9jdXJyZW50O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBlbGVtZW50cy5NQVJTOlxuICAgICAgICAgICAgICAgIGVsZW1lbnRhbF9sZXZlbCA9IHRoaXMuc2VsZWN0ZWRfY2hhci5tYXJzX2xldmVsX2N1cnJlbnQ7XG4gICAgICAgICAgICAgICAgZWxlbWVudGFsX3Bvd2VyID0gdGhpcy5zZWxlY3RlZF9jaGFyLm1hcnNfcG93ZXJfY3VycmVudDtcbiAgICAgICAgICAgICAgICBlbGVtZW50YWxfcmVzaXN0YW5jZSA9IHRoaXMuc2VsZWN0ZWRfY2hhci5tYXJzX3Jlc2lzdF9jdXJyZW50O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBlbGVtZW50cy5KVVBJVEVSOlxuICAgICAgICAgICAgICAgIGVsZW1lbnRhbF9sZXZlbCA9IHRoaXMuc2VsZWN0ZWRfY2hhci5qdXBpdGVyX2xldmVsX2N1cnJlbnQ7XG4gICAgICAgICAgICAgICAgZWxlbWVudGFsX3Bvd2VyID0gdGhpcy5zZWxlY3RlZF9jaGFyLmp1cGl0ZXJfcG93ZXJfY3VycmVudDtcbiAgICAgICAgICAgICAgICBlbGVtZW50YWxfcmVzaXN0YW5jZSA9IHRoaXMuc2VsZWN0ZWRfY2hhci5qdXBpdGVyX3Jlc2lzdF9jdXJyZW50O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtsZXZlbDogZWxlbWVudGFsX2xldmVsLCBwb3dlcjogZWxlbWVudGFsX3Bvd2VyLCByZXNpc3RhbmNlOiBlbGVtZW50YWxfcmVzaXN0YW5jZX07XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldF9kamlubmlfc3ByaXRlKGVsZW06IGVsZW1lbnRzLCBncm91cDogUGhhc2VyLkdyb3VwLCBwb3M6IHt4OiBudW1iZXI7IHk6IG51bWJlcn0pIHtcbiAgICAgICAgY29uc3QgYWN0aW9uX2tleSA9IHRoaXMuZGF0YS5pbmZvLmRqaW5uaV9zcHJpdGVzW2VsZW1dLmdldEFjdGlvbktleShkamlubl9zdGF0dXMuU0VUKTtcbiAgICAgICAgY29uc3Qgc3ByaXRlID0gZ3JvdXAuY3JlYXRlKHBvcy54LCBwb3MueSwgYWN0aW9uX2tleSk7XG5cbiAgICAgICAgc3ByaXRlLmFuY2hvci5zZXRUbygwLjUsIDEuMCk7XG4gICAgICAgIHNwcml0ZS5zY2FsZS54ID0gLTE7XG5cbiAgICAgICAgY29uc3QgZGlyZWN0aW9uID0gcmV2ZXJzZV9kaXJlY3Rpb25zW2RpcmVjdGlvbnMuZG93bl07XG4gICAgICAgIGNvbnN0IGFjdGlvbiA9IGRqaW5uX3N0YXR1cy5TRVQ7XG5cbiAgICAgICAgdGhpcy5kYXRhLmluZm8uZGppbm5pX3Nwcml0ZXNbZWxlbV0uc2V0QW5pbWF0aW9uKHNwcml0ZSwgYWN0aW9uKTtcbiAgICAgICAgc3ByaXRlLmFuaW1hdGlvbnMucGxheSh0aGlzLmRhdGEuaW5mby5kamlubmlfc3ByaXRlc1tlbGVtXS5nZXRBbmltYXRpb25LZXkoYWN0aW9uLCBkaXJlY3Rpb24pKTtcblxuICAgICAgICByZXR1cm4gc3ByaXRlO1xuICAgIH1cbn1cbiIsImltcG9ydCB7REVGQVVMVF9GT05UX0NPTE9SLCBJTkFDVElWRV9GT05UX0NPTE9SfSBmcm9tIFwiLi4vbWFnaWNfbnVtYmVyc1wiO1xuaW1wb3J0IHtXaW5kb3csIFRleHRPYmp9IGZyb20gXCIuLi9XaW5kb3dcIjtcblxuZXhwb3J0IGVudW0gUGFnZUluZGljYXRvck1vZGVzIHtcbiAgICBISUdITElHSFQsXG4gICAgRkxBU0gsXG59XG5cbmV4cG9ydCBjbGFzcyBQYWdlSW5kaWNhdG9yIHtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBOVU1CRVJfV0lEVEggPSA4O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IE5VTUJFUl9IRUlHSFQgPSA4O1xuXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgQVJST1dfU0hJRlQgPSAxO1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEdST1VQX0tFWSA9IFwicGFnZV9pbmRpY2F0b3JcIjtcblxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEFSUk9XX0xPT1AgPSBQaGFzZXIuVGltZXIuUVVBUlRFUiA+PiAxO1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEZMQVNIX0xPT1AgPSAxNTA7XG5cbiAgICBwcml2YXRlIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHByaXZhdGUgd2luZG93OiBXaW5kb3c7XG5cbiAgICBwcml2YXRlIHNldDogYm9vbGVhbjtcbiAgICBwcml2YXRlIG1vZGU6IFBhZ2VJbmRpY2F0b3JNb2RlcztcblxuICAgIHByaXZhdGUgcGFnZV9jb3VudDogbnVtYmVyO1xuICAgIHByaXZhdGUgYW5jaG9yOiB7eDogbnVtYmVyOyB5OiBudW1iZXJ9O1xuXG4gICAgcHJpdmF0ZSBudW1iZXJfYmFyOiBQaGFzZXIuR3JhcGhpY3M7XG4gICAgcHJpdmF0ZSBudW1iZXJfYmFyX2hpZ2hsaWdodDogUGhhc2VyLkdyYXBoaWNzO1xuXG4gICAgcHJpdmF0ZSBmbGFzaF90aW1lcjogUGhhc2VyLlRpbWVyO1xuICAgIHByaXZhdGUgZmxhc2hfZXZlbnQ6IFBoYXNlci5UaW1lckV2ZW50O1xuICAgIHByaXZhdGUgYXJyb3dfdGltZXI6IFBoYXNlci5UaW1lcjtcblxuICAgIHByaXZhdGUgcmlnaHRfYXJyb3c6IFBoYXNlci5TcHJpdGU7XG4gICAgcHJpdmF0ZSBsZWZ0X2Fycm93OiBQaGFzZXIuU3ByaXRlO1xuXG4gICAgcHJpdmF0ZSBkZWZhdWx0X2Fycm93X3Bvczoge1xuICAgICAgICByaWdodDogbnVtYmVyO1xuICAgICAgICBsZWZ0OiBudW1iZXI7XG4gICAgfTtcblxuICAgIHByaXZhdGUgcGFnZV9udW1iZXJzOiBUZXh0T2JqW107XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoZ2FtZTogUGhhc2VyLkdhbWUsIHdpbmRvdzogV2luZG93LCBhbmNob3I/OiB7eDogbnVtYmVyOyB5OiBudW1iZXJ9KSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMud2luZG93ID0gd2luZG93O1xuXG4gICAgICAgIHRoaXMud2luZG93LmRlZmluZV9pbnRlcm5hbF9ncm91cChQYWdlSW5kaWNhdG9yLkdST1VQX0tFWSwge3g6IDAsIHk6IDB9KTtcblxuICAgICAgICB0aGlzLnNldCA9IGZhbHNlO1xuICAgICAgICB0aGlzLm1vZGUgPSBudWxsO1xuICAgICAgICB0aGlzLmZsYXNoX2V2ZW50ID0gbnVsbDtcblxuICAgICAgICB0aGlzLnBhZ2VfY291bnQgPSAwO1xuICAgICAgICB0aGlzLmFuY2hvciA9IHtcbiAgICAgICAgICAgIHg6IGFuY2hvciA/IGFuY2hvci54IDogdGhpcy53aW5kb3cud2lkdGggLSAzLFxuICAgICAgICAgICAgeTogYW5jaG9yID8gYW5jaG9yLnkgOiAwLFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuZGVmYXVsdF9hcnJvd19wb3MgPSB7cmlnaHQ6IDAsIGxlZnQ6IDB9O1xuICAgIH1cblxuICAgIGdldCBpc19zZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldDtcbiAgICB9XG5cbiAgICBzZXQgcG9zaXRpb24oYW5jaG9yOiB7eD86IG51bWJlcjsgeT86IG51bWJlcn0pIHtcbiAgICAgICAgaWYgKGFuY2hvci54KSB0aGlzLmFuY2hvci54ID0gYW5jaG9yLng7XG4gICAgICAgIGlmIChhbmNob3IueSkgdGhpcy5hbmNob3IueSA9IGFuY2hvci55O1xuICAgIH1cblxuICAgIHB1YmxpYyBpbml0aWFsaXplKHBhZ2VfY291bnQ6IG51bWJlciwgcGFnZV9pbmRleDogbnVtYmVyLCBtb2RlPzogUGFnZUluZGljYXRvck1vZGVzKSB7XG4gICAgICAgIGlmIChwYWdlX2NvdW50IDw9IDEpIHJldHVybjtcbiAgICAgICAgaWYgKHRoaXMuaXNfc2V0KSB7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tb2RlID0gbW9kZSA/IG1vZGUgOiBQYWdlSW5kaWNhdG9yTW9kZXMuSElHSExJR0hUO1xuICAgICAgICB0aGlzLnBhZ2VfY291bnQgPSBwYWdlX2NvdW50O1xuXG4gICAgICAgIHRoaXMubnVtYmVyX2JhciA9IHRoaXMuZ2FtZS5hZGQuZ3JhcGhpY3MoMCwgMCk7XG4gICAgICAgIHRoaXMubnVtYmVyX2Jhci5hbHBoYSA9IDA7XG4gICAgICAgIHRoaXMud2luZG93LmFkZF9zcHJpdGVfdG9fZ3JvdXAodGhpcy5udW1iZXJfYmFyLCBQYWdlSW5kaWNhdG9yLkdST1VQX0tFWSk7XG5cbiAgICAgICAgdGhpcy5udW1iZXJfYmFyLmJlZ2luRmlsbCh0aGlzLndpbmRvdy5jb2xvciwgMSk7XG4gICAgICAgIHRoaXMubnVtYmVyX2Jhci5kcmF3UmVjdCgwLCAwLCBQYWdlSW5kaWNhdG9yLk5VTUJFUl9XSURUSCwgUGFnZUluZGljYXRvci5OVU1CRVJfSEVJR0hUKTtcbiAgICAgICAgdGhpcy5udW1iZXJfYmFyLmVuZEZpbGwoKTtcblxuICAgICAgICB0aGlzLm51bWJlcl9iYXJfaGlnaGxpZ2h0ID0gdGhpcy5nYW1lLmFkZC5ncmFwaGljcygwLCAwKTtcbiAgICAgICAgdGhpcy5udW1iZXJfYmFyX2hpZ2hsaWdodC5ibGVuZE1vZGUgPSBQSVhJLmJsZW5kTW9kZXMuU0NSRUVOO1xuICAgICAgICB0aGlzLm51bWJlcl9iYXJfaGlnaGxpZ2h0LmFscGhhID0gMDtcblxuICAgICAgICB0aGlzLndpbmRvdy5hZGRfc3ByaXRlX3RvX2dyb3VwKHRoaXMubnVtYmVyX2Jhcl9oaWdobGlnaHQsIFBhZ2VJbmRpY2F0b3IuR1JPVVBfS0VZKTtcbiAgICAgICAgdGhpcy5udW1iZXJfYmFyX2hpZ2hsaWdodC5iZWdpbkZpbGwodGhpcy53aW5kb3cuY29sb3IsIDEpO1xuICAgICAgICB0aGlzLm51bWJlcl9iYXJfaGlnaGxpZ2h0LmRyYXdSZWN0KDAsIDAsIFBhZ2VJbmRpY2F0b3IuTlVNQkVSX1dJRFRILCBQYWdlSW5kaWNhdG9yLk5VTUJFUl9IRUlHSFQpO1xuICAgICAgICB0aGlzLm51bWJlcl9iYXJfaGlnaGxpZ2h0LmVuZEZpbGwoKTtcblxuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVycyA9IFtdO1xuXG4gICAgICAgIHRoaXMuYXJyb3dfdGltZXIgPSB0aGlzLmdhbWUudGltZS5jcmVhdGUoZmFsc2UpO1xuICAgICAgICB0aGlzLmZsYXNoX3RpbWVyID0gdGhpcy5nYW1lLnRpbWUuY3JlYXRlKGZhbHNlKTtcblxuICAgICAgICB0aGlzLnJpZ2h0X2Fycm93ID0gdGhpcy53aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICBcInBhZ2VfYXJyb3dcIixcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIFBhZ2VJbmRpY2F0b3IuR1JPVVBfS0VZXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMucmlnaHRfYXJyb3cuYWxwaGEgPSAwO1xuXG4gICAgICAgIHRoaXMubGVmdF9hcnJvdyA9IHRoaXMud2luZG93LmNyZWF0ZV9hdF9ncm91cChcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgXCJwYWdlX2Fycm93XCIsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICBQYWdlSW5kaWNhdG9yLkdST1VQX0tFWVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmxlZnRfYXJyb3cuYWxwaGEgPSAwO1xuXG4gICAgICAgIHRoaXMuc2V0ID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLm51bWJlcl9iYXIud2lkdGggPSB0aGlzLnBhZ2VfY291bnQgKiBQYWdlSW5kaWNhdG9yLk5VTUJFUl9XSURUSDtcbiAgICAgICAgdGhpcy5udW1iZXJfYmFyLnggPSB0aGlzLmFuY2hvci54IC0gdGhpcy5udW1iZXJfYmFyLndpZHRoIC0gMjtcbiAgICAgICAgdGhpcy5udW1iZXJfYmFyLnkgPSB0aGlzLmFuY2hvci55O1xuICAgICAgICB0aGlzLm51bWJlcl9iYXIuYWxwaGEgPSAxO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IHRoaXMucGFnZV9jb3VudDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCB4ID0gdGhpcy5udW1iZXJfYmFyLnggKyBQYWdlSW5kaWNhdG9yLk5VTUJFUl9XSURUSCAqIChpIC0gMSkgKyAoUGFnZUluZGljYXRvci5OVU1CRVJfV0lEVEggPj4gMSk7XG4gICAgICAgICAgICBjb25zdCB5ID0gdGhpcy5udW1iZXJfYmFyLnkgKyAoUGFnZUluZGljYXRvci5OVU1CRVJfSEVJR0hUID4+IDEpO1xuICAgICAgICAgICAgdGhpcy5wYWdlX251bWJlcnMucHVzaCh0aGlzLndpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihpLnRvU3RyaW5nKCksIHgsIHksIGZhbHNlLCB0cnVlKSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm51bWJlcl9iYXJfaGlnaGxpZ2h0LmFscGhhID0gMTtcbiAgICAgICAgdGhpcy5zZWxlY3RfcGFnZShwYWdlX2luZGV4KTtcbiAgICAgICAgdGhpcy5zZXRfYXJyb3dzKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHNlbGVjdF9wYWdlKHBhZ2VfaW5kZXg6IG51bWJlcikge1xuICAgICAgICBpZiAodGhpcy5tb2RlID09PSBQYWdlSW5kaWNhdG9yTW9kZXMuSElHSExJR0hUKSB7XG4gICAgICAgICAgICB0aGlzLm51bWJlcl9iYXJfaGlnaGxpZ2h0LnggPSB0aGlzLm51bWJlcl9iYXIueCArIHBhZ2VfaW5kZXggKiBQYWdlSW5kaWNhdG9yLk5VTUJFUl9XSURUSDtcbiAgICAgICAgICAgIHRoaXMubnVtYmVyX2Jhcl9oaWdobGlnaHQueSA9IHRoaXMubnVtYmVyX2Jhci55O1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMubW9kZSA9PT0gUGFnZUluZGljYXRvck1vZGVzLkZMQVNIKSB7XG4gICAgICAgICAgICB0aGlzLm51bWJlcl9iYXJfaGlnaGxpZ2h0LmFscGhhID0gMDtcblxuICAgICAgICAgICAgaWYgKHRoaXMuZmxhc2hfdGltZXIucnVubmluZykge1xuICAgICAgICAgICAgICAgIHRoaXMuZmxhc2hfZXZlbnQucGVuZGluZ0RlbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5mbGFzaF9ldmVudCA9IG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMucGFnZV9udW1iZXJzLmZvckVhY2goKG4sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgbi50ZXh0LnRpbnQgPSBpbmRleCA9PT0gcGFnZV9pbmRleCA/IERFRkFVTFRfRk9OVF9DT0xPUiA6IElOQUNUSVZFX0ZPTlRfQ09MT1I7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5mbGFzaF9ldmVudCA9IHRoaXMuZmxhc2hfdGltZXIubG9vcChQYWdlSW5kaWNhdG9yLkZMQVNIX0xPT1AsICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wYWdlX251bWJlcnNbcGFnZV9pbmRleF0udGV4dC50aW50ID09PSBERUZBVUxUX0ZPTlRfQ09MT1IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYWdlX251bWJlcnNbcGFnZV9pbmRleF0udGV4dC50aW50ID0gSU5BQ1RJVkVfRk9OVF9DT0xPUjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyc1twYWdlX2luZGV4XS50ZXh0LnRpbnQgPSBERUZBVUxUX0ZPTlRfQ09MT1I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmZsYXNoX3RpbWVyLnN0YXJ0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHNldF9hcnJvd3MoKSB7XG4gICAgICAgIHRoaXMubGVmdF9hcnJvdy5hbHBoYSA9IDE7XG4gICAgICAgIHRoaXMucmlnaHRfYXJyb3cuYWxwaGEgPSAxO1xuXG4gICAgICAgIGNvbnN0IGxlZnRfYXJyb3dfeCA9IHRoaXMubnVtYmVyX2Jhci54IC0gODtcbiAgICAgICAgdGhpcy5sZWZ0X2Fycm93LnggPSBsZWZ0X2Fycm93X3g7XG4gICAgICAgIHRoaXMubGVmdF9hcnJvdy55ID0gdGhpcy5hbmNob3IueTtcblxuICAgICAgICB0aGlzLnJpZ2h0X2Fycm93LnggPSB0aGlzLmFuY2hvci54O1xuICAgICAgICB0aGlzLnJpZ2h0X2Fycm93LnkgPSB0aGlzLmFuY2hvci55O1xuXG4gICAgICAgIHRoaXMucmlnaHRfYXJyb3cuc2NhbGUueCA9IC0xO1xuICAgICAgICB0aGlzLnJpZ2h0X2Fycm93LnggLT0gdGhpcy5yaWdodF9hcnJvdy53aWR0aDtcblxuICAgICAgICB0aGlzLmRlZmF1bHRfYXJyb3dfcG9zID0ge3JpZ2h0OiB0aGlzLnJpZ2h0X2Fycm93LngsIGxlZnQ6IHRoaXMubGVmdF9hcnJvdy54fTtcblxuICAgICAgICBpZiAodGhpcy5hcnJvd190aW1lci5ydW5uaW5nICYmIHRoaXMuYXJyb3dfdGltZXIucGF1c2VkKSB7XG4gICAgICAgICAgICB0aGlzLmFycm93X3RpbWVyLnJlc3VtZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hcnJvd190aW1lci5sb29wKFBhZ2VJbmRpY2F0b3IuQVJST1dfTE9PUCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yaWdodF9hcnJvdy54ICE9PSB0aGlzLmRlZmF1bHRfYXJyb3dfcG9zLnJpZ2h0ICYmXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGVmdF9hcnJvdy54ICE9PSB0aGlzLmRlZmF1bHRfYXJyb3dfcG9zLmxlZnRcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yaWdodF9hcnJvdy54ID0gdGhpcy5kZWZhdWx0X2Fycm93X3Bvcy5yaWdodDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sZWZ0X2Fycm93LnggPSB0aGlzLmRlZmF1bHRfYXJyb3dfcG9zLmxlZnQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yaWdodF9hcnJvdy54ICs9IC1QYWdlSW5kaWNhdG9yLkFSUk9XX1NISUZUO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxlZnRfYXJyb3cueCArPSBQYWdlSW5kaWNhdG9yLkFSUk9XX1NISUZUO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5hcnJvd190aW1lci5zdGFydCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHRlcm1pbmFudGUoKSB7XG4gICAgICAgIGlmICghdGhpcy5zZXQpIHJldHVybjtcblxuICAgICAgICB0aGlzLnNldCA9IGZhbHNlO1xuICAgICAgICB0aGlzLm1vZGUgPSBudWxsO1xuXG4gICAgICAgIHRoaXMubnVtYmVyX2Jhci5hbHBoYSA9IDA7XG4gICAgICAgIHRoaXMubnVtYmVyX2Jhcl9oaWdobGlnaHQuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLmxlZnRfYXJyb3cuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLnJpZ2h0X2Fycm93LmFscGhhID0gMDtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGFnZV9udW1iZXJzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB0aGlzLndpbmRvdy5yZW1vdmVfdGV4dCh0aGlzLnBhZ2VfbnVtYmVyc1tpXSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVycyA9IFtdO1xuXG4gICAgICAgIHRoaXMuYXJyb3dfdGltZXIucGF1c2UoKTtcbiAgICAgICAgdGhpcy5mbGFzaF90aW1lci5wYXVzZSgpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7U3ByaXRlQmFzZX0gZnJvbSBcIi4vU3ByaXRlQmFzZVwiO1xuaW1wb3J0IHtjaG9vc2VfcmlnaHRfY2xhc3MsIENsYXNzZXN9IGZyb20gXCIuL0NsYXNzZXNcIjtcbmltcG9ydCB7ZGppbm5fc3RhdHVzfSBmcm9tIFwiLi9EamlublwiO1xuaW1wb3J0IHtFZmZlY3QsIGVmZmVjdF90eXBlc30gZnJvbSBcIi4vRWZmZWN0XCI7XG5pbXBvcnQge0l0ZW0sIGl0ZW1fdHlwZXN9IGZyb20gXCIuL0l0ZW1cIjtcbmltcG9ydCB7UGxheWVyLCBmaWdodGVyX3R5cGVzLCBwZXJtYW5lbnRfc3RhdHVzLCBtYWluX3N0YXRzLCBlZmZlY3RfdHlwZV9zdGF0fSBmcm9tIFwiLi9QbGF5ZXJcIjtcbmltcG9ydCB7ZWxlbWVudHMsIG9yZGVyZWRfZWxlbWVudHN9IGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQge0VMRU1fQVRUUl9NSU4sIEVMRU1fQVRUUl9NQVh9IGZyb20gXCIuL21hZ2ljX251bWJlcnNcIjtcbmltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuaW1wb3J0IHtHYW1lSW5mbywgUGFydHlEYXRhfSBmcm9tIFwiLi9pbml0aWFsaXplcnMvaW5pdGlhbGl6ZV9pbmZvXCI7XG5pbXBvcnQge0FiaWxpdHl9IGZyb20gXCIuL0FiaWxpdHlcIjtcblxuZXhwb3J0IHR5cGUgSXRlbVNsb3QgPSB7XG4gICAga2V5X25hbWU6IHN0cmluZztcbiAgICBxdWFudGl0eTogbnVtYmVyO1xuICAgIGluZGV4PzogbnVtYmVyO1xuICAgIGVxdWlwcGVkPzogYm9vbGVhbjtcbiAgICBicm9rZW4/OiBib29sZWFuO1xufTtcblxuZXhwb3J0IGVudW0gZXF1aXBfc2xvdHMge1xuICAgIFdFQVBPTiA9IFwid2VhcG9uXCIsXG4gICAgSEVBRCA9IFwiaGVhZFwiLFxuICAgIENIRVNUID0gXCJjaGVzdFwiLFxuICAgIEJPRFkgPSBcImJvZHlcIixcbiAgICBSSU5HID0gXCJyaW5nXCIsXG4gICAgQk9PVFMgPSBcImJvb3RzXCIsXG4gICAgVU5ERVJXRUFSID0gXCJ1bmRlcndlYXJcIixcbn1cblxuZXhwb3J0IGNvbnN0IGl0ZW1fZXF1aXBfc2xvdCA9IHtcbiAgICBbaXRlbV90eXBlcy5XRUFQT05TXTogZXF1aXBfc2xvdHMuV0VBUE9OLFxuICAgIFtpdGVtX3R5cGVzLkFSTU9SXTogZXF1aXBfc2xvdHMuQk9EWSxcbiAgICBbaXRlbV90eXBlcy5DSEVTVF9QUk9URUNUT1JdOiBlcXVpcF9zbG90cy5DSEVTVCxcbiAgICBbaXRlbV90eXBlcy5IRUFEX1BST1RFQ1RPUl06IGVxdWlwX3Nsb3RzLkhFQUQsXG4gICAgW2l0ZW1fdHlwZXMuTEVHX1BST1RFQ1RPUl06IGVxdWlwX3Nsb3RzLkJPT1RTLFxuICAgIFtpdGVtX3R5cGVzLlJJTkddOiBlcXVpcF9zbG90cy5SSU5HLFxuICAgIFtpdGVtX3R5cGVzLlVOREVSV0VBUl06IGVxdWlwX3Nsb3RzLlVOREVSV0VBUixcbn07XG5cbmV4cG9ydCBjbGFzcyBNYWluQ2hhciBleHRlbmRzIFBsYXllciB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgRUxFTV9MVl9ERUxUQSA9IDE7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgRUxFTV9QT1dFUl9ERUxUQSA9IDU7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgRUxFTV9SRVNJU1RfREVMVEEgPSA1O1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgTUFYX0lURU1TX1BFUl9DSEFSID0gMzA7XG5cbiAgICBwdWJsaWMgaW5mbzogR2FtZUluZm87XG4gICAgcHVibGljIHNwcml0ZV9iYXNlOiBTcHJpdGVCYXNlO1xuICAgIHB1YmxpYyB3YWxrX3NwZWVkOiBudW1iZXI7XG4gICAgcHVibGljIGRhc2hfc3BlZWQ6IG51bWJlcjtcbiAgICBwdWJsaWMgY2xpbWJfc3BlZWQ6IG51bWJlcjtcbiAgICBwdWJsaWMgc3RhcnRpbmdfbGV2ZWw6IG51bWJlcjtcbiAgICBwdWJsaWMgY2xhc3NfdGFibGU6IGFueTtcbiAgICBwdWJsaWMgY2xhc3M6IENsYXNzZXM7XG4gICAgcHVibGljIGV4cF9jdXJ2ZTogbnVtYmVyW107XG4gICAgcHVibGljIHZlbnVzX2xldmVsX2Jhc2U6IG51bWJlcjtcbiAgICBwdWJsaWMgbWVyY3VyeV9sZXZlbF9iYXNlOiBudW1iZXI7XG4gICAgcHVibGljIG1hcnNfbGV2ZWxfYmFzZTogbnVtYmVyO1xuICAgIHB1YmxpYyBqdXBpdGVyX2xldmVsX2Jhc2U6IG51bWJlcjtcbiAgICBwdWJsaWMgdmVudXNfcG93ZXJfYmFzZTogbnVtYmVyO1xuICAgIHB1YmxpYyBtZXJjdXJ5X3Bvd2VyX2Jhc2U6IG51bWJlcjtcbiAgICBwdWJsaWMgbWFyc19wb3dlcl9iYXNlOiBudW1iZXI7XG4gICAgcHVibGljIGp1cGl0ZXJfcG93ZXJfYmFzZTogbnVtYmVyO1xuICAgIHB1YmxpYyB2ZW51c19yZXNpc3RfYmFzZTogbnVtYmVyO1xuICAgIHB1YmxpYyBtZXJjdXJ5X3Jlc2lzdF9iYXNlOiBudW1iZXI7XG4gICAgcHVibGljIG1hcnNfcmVzaXN0X2Jhc2U6IG51bWJlcjtcbiAgICBwdWJsaWMganVwaXRlcl9yZXNpc3RfYmFzZTogbnVtYmVyO1xuICAgIHB1YmxpYyBlbGVtZW50X2FmaW5pdHk6IGVsZW1lbnRzO1xuICAgIHB1YmxpYyB2ZW51c19kamlubmk6IHN0cmluZ1tdO1xuICAgIHB1YmxpYyBtZXJjdXJ5X2RqaW5uaTogc3RyaW5nW107XG4gICAgcHVibGljIG1hcnNfZGppbm5pOiBzdHJpbmdbXTtcbiAgICBwdWJsaWMganVwaXRlcl9kamlubmk6IHN0cmluZ1tdO1xuICAgIHB1YmxpYyBocF9jdXJ2ZTogbnVtYmVyW107XG4gICAgcHVibGljIHBwX2N1cnZlOiBudW1iZXJbXTtcbiAgICBwdWJsaWMgYXRrX2N1cnZlOiBudW1iZXJbXTtcbiAgICBwdWJsaWMgZGVmX2N1cnZlOiBudW1iZXJbXTtcbiAgICBwdWJsaWMgYWdpX2N1cnZlOiBudW1iZXJbXTtcbiAgICBwdWJsaWMgbHVrX2N1cnZlOiBudW1iZXJbXTtcbiAgICBwdWJsaWMgaHBfZXh0cmE6IG51bWJlcjtcbiAgICBwdWJsaWMgcHBfZXh0cmE6IG51bWJlcjtcbiAgICBwdWJsaWMgYXRrX2V4dHJhOiBudW1iZXI7XG4gICAgcHVibGljIGRlZl9leHRyYTogbnVtYmVyO1xuICAgIHB1YmxpYyBhZ2lfZXh0cmE6IG51bWJlcjtcbiAgICBwdWJsaWMgbHVrX2V4dHJhOiBudW1iZXI7XG4gICAgcHVibGljIGl0ZW1zOiBJdGVtU2xvdFtdO1xuICAgIHB1YmxpYyBlcXVpcF9zbG90czoge1tzbG90IGluIGVxdWlwX3Nsb3RzXTogSXRlbVNsb3R9O1xuICAgIHB1YmxpYyBlcXVpcHBlZF9hYmlsaXRpZXM6IHN0cmluZ1tdO1xuICAgIHB1YmxpYyBpbm5hdGVfYWJpbGl0aWVzOiBzdHJpbmdbXTtcbiAgICBwdWJsaWMgaW5fcGFydHk6IGJvb2xlYW47XG4gICAgcHVibGljIGFiaWxpdGllczogc3RyaW5nW107XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAga2V5X25hbWUsXG4gICAgICAgIGluZm8sXG4gICAgICAgIHNwcml0ZV9iYXNlLFxuICAgICAgICB3YWxrX3NwZWVkLFxuICAgICAgICBkYXNoX3NwZWVkLFxuICAgICAgICBjbGltYl9zcGVlZCxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgaHBfY3VydmUsXG4gICAgICAgIHBwX2N1cnZlLFxuICAgICAgICBhdGtfY3VydmUsXG4gICAgICAgIGRlZl9jdXJ2ZSxcbiAgICAgICAgYWdpX2N1cnZlLFxuICAgICAgICBsdWtfY3VydmUsXG4gICAgICAgIGV4cF9jdXJ2ZSxcbiAgICAgICAgc3RhcnRpbmdfbGV2ZWwsXG4gICAgICAgIGNsYXNzX3RhYmxlLFxuICAgICAgICBiYXR0bGVfc2NhbGUsXG4gICAgICAgIHZlbnVzX2xldmVsX2Jhc2UsXG4gICAgICAgIG1lcmN1cnlfbGV2ZWxfYmFzZSxcbiAgICAgICAgbWFyc19sZXZlbF9iYXNlLFxuICAgICAgICBqdXBpdGVyX2xldmVsX2Jhc2UsXG4gICAgICAgIHZlbnVzX3Bvd2VyX2Jhc2UsXG4gICAgICAgIG1lcmN1cnlfcG93ZXJfYmFzZSxcbiAgICAgICAgbWFyc19wb3dlcl9iYXNlLFxuICAgICAgICBqdXBpdGVyX3Bvd2VyX2Jhc2UsXG4gICAgICAgIHZlbnVzX3Jlc2lzdF9iYXNlLFxuICAgICAgICBtZXJjdXJ5X3Jlc2lzdF9iYXNlLFxuICAgICAgICBtYXJzX3Jlc2lzdF9iYXNlLFxuICAgICAgICBqdXBpdGVyX3Jlc2lzdF9iYXNlLFxuICAgICAgICBpbm5hdGVfYWJpbGl0aWVzLFxuICAgICAgICBpbl9wYXJ0eSxcbiAgICAgICAgZGppbm5pLFxuICAgICAgICBpdGVtcyxcbiAgICAgICAgYmF0dGxlX2FuaW1hdGlvbnNfdmFyaWF0aW9uc1xuICAgICkge1xuICAgICAgICBzdXBlcihrZXlfbmFtZSwgbmFtZSk7XG4gICAgICAgIHRoaXMuaW5mbyA9IGluZm87XG4gICAgICAgIHRoaXMuc3ByaXRlX2Jhc2UgPSBzcHJpdGVfYmFzZTtcbiAgICAgICAgdGhpcy53YWxrX3NwZWVkID0gd2Fsa19zcGVlZDtcbiAgICAgICAgdGhpcy5kYXNoX3NwZWVkID0gZGFzaF9zcGVlZDtcbiAgICAgICAgdGhpcy5jbGltYl9zcGVlZCA9IGNsaW1iX3NwZWVkO1xuICAgICAgICB0aGlzLnN0YXJ0aW5nX2xldmVsID0gc3RhcnRpbmdfbGV2ZWw7XG4gICAgICAgIHRoaXMubGV2ZWwgPSB0aGlzLnN0YXJ0aW5nX2xldmVsO1xuICAgICAgICB0aGlzLmNsYXNzX3RhYmxlID0gY2xhc3NfdGFibGU7XG4gICAgICAgIHRoaXMuYmF0dGxlX3NjYWxlID0gYmF0dGxlX3NjYWxlO1xuICAgICAgICB0aGlzLmV4cF9jdXJ2ZSA9IGV4cF9jdXJ2ZTtcbiAgICAgICAgdGhpcy5jdXJyZW50X2V4cCA9IHRoaXMuZXhwX2N1cnZlW3RoaXMubGV2ZWwgLSAxXTtcbiAgICAgICAgdGhpcy52ZW51c19sZXZlbF9iYXNlID0gdmVudXNfbGV2ZWxfYmFzZTtcbiAgICAgICAgdGhpcy5tZXJjdXJ5X2xldmVsX2Jhc2UgPSBtZXJjdXJ5X2xldmVsX2Jhc2U7XG4gICAgICAgIHRoaXMubWFyc19sZXZlbF9iYXNlID0gbWFyc19sZXZlbF9iYXNlO1xuICAgICAgICB0aGlzLmp1cGl0ZXJfbGV2ZWxfYmFzZSA9IGp1cGl0ZXJfbGV2ZWxfYmFzZTtcbiAgICAgICAgdGhpcy52ZW51c19wb3dlcl9iYXNlID0gdmVudXNfcG93ZXJfYmFzZTtcbiAgICAgICAgdGhpcy5tZXJjdXJ5X3Bvd2VyX2Jhc2UgPSBtZXJjdXJ5X3Bvd2VyX2Jhc2U7XG4gICAgICAgIHRoaXMubWFyc19wb3dlcl9iYXNlID0gbWFyc19wb3dlcl9iYXNlO1xuICAgICAgICB0aGlzLmp1cGl0ZXJfcG93ZXJfYmFzZSA9IGp1cGl0ZXJfcG93ZXJfYmFzZTtcbiAgICAgICAgdGhpcy52ZW51c19yZXNpc3RfYmFzZSA9IHZlbnVzX3Jlc2lzdF9iYXNlO1xuICAgICAgICB0aGlzLm1lcmN1cnlfcmVzaXN0X2Jhc2UgPSBtZXJjdXJ5X3Jlc2lzdF9iYXNlO1xuICAgICAgICB0aGlzLm1hcnNfcmVzaXN0X2Jhc2UgPSBtYXJzX3Jlc2lzdF9iYXNlO1xuICAgICAgICB0aGlzLmp1cGl0ZXJfcmVzaXN0X2Jhc2UgPSBqdXBpdGVyX3Jlc2lzdF9iYXNlO1xuICAgICAgICB0aGlzLmVsZW1lbnRfYWZpbml0eSA9IF8ubWF4QnkoXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAge2VsZW1lbnQ6IGVsZW1lbnRzLlZFTlVTLCBsZXZlbDogdGhpcy52ZW51c19sZXZlbF9iYXNlfSxcbiAgICAgICAgICAgICAgICB7ZWxlbWVudDogZWxlbWVudHMuTUVSQ1VSWSwgbGV2ZWw6IHRoaXMubWVyY3VyeV9sZXZlbF9iYXNlfSxcbiAgICAgICAgICAgICAgICB7ZWxlbWVudDogZWxlbWVudHMuTUFSUywgbGV2ZWw6IHRoaXMubWFyc19sZXZlbF9iYXNlfSxcbiAgICAgICAgICAgICAgICB7ZWxlbWVudDogZWxlbWVudHMuSlVQSVRFUiwgbGV2ZWw6IHRoaXMuanVwaXRlcl9sZXZlbF9iYXNlfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBlbGVtZW50ID0+IGVsZW1lbnQubGV2ZWxcbiAgICAgICAgKS5lbGVtZW50O1xuICAgICAgICB0aGlzLnZlbnVzX2RqaW5uaSA9IFtdO1xuICAgICAgICB0aGlzLm1lcmN1cnlfZGppbm5pID0gW107XG4gICAgICAgIHRoaXMubWFyc19kamlubmkgPSBbXTtcbiAgICAgICAgdGhpcy5qdXBpdGVyX2RqaW5uaSA9IFtdO1xuICAgICAgICB0aGlzLmluaXRfZGppbm5pKGRqaW5uaSk7XG4gICAgICAgIHRoaXMudXBkYXRlX2NsYXNzKCk7XG4gICAgICAgIHRoaXMuaHBfY3VydmUgPSBocF9jdXJ2ZTtcbiAgICAgICAgdGhpcy5wcF9jdXJ2ZSA9IHBwX2N1cnZlO1xuICAgICAgICB0aGlzLmF0a19jdXJ2ZSA9IGF0a19jdXJ2ZTtcbiAgICAgICAgdGhpcy5kZWZfY3VydmUgPSBkZWZfY3VydmU7XG4gICAgICAgIHRoaXMuYWdpX2N1cnZlID0gYWdpX2N1cnZlO1xuICAgICAgICB0aGlzLmx1a19jdXJ2ZSA9IGx1a19jdXJ2ZTtcbiAgICAgICAgdGhpcy5ocF9leHRyYSA9IDA7XG4gICAgICAgIHRoaXMucHBfZXh0cmEgPSAwO1xuICAgICAgICB0aGlzLmF0a19leHRyYSA9IDA7XG4gICAgICAgIHRoaXMuZGVmX2V4dHJhID0gMDtcbiAgICAgICAgdGhpcy5hZ2lfZXh0cmEgPSAwO1xuICAgICAgICB0aGlzLmx1a19leHRyYSA9IDA7XG4gICAgICAgIHRoaXMuaHBfcmVjb3ZlcnkgPSAwO1xuICAgICAgICB0aGlzLnBwX3JlY292ZXJ5ID0gMDtcbiAgICAgICAgdGhpcy5pdGVtcyA9IGl0ZW1zO1xuICAgICAgICB0aGlzLmVxdWlwX3Nsb3RzID0ge1xuICAgICAgICAgICAgW2VxdWlwX3Nsb3RzLldFQVBPTl06IG51bGwsXG4gICAgICAgICAgICBbZXF1aXBfc2xvdHMuSEVBRF06IG51bGwsXG4gICAgICAgICAgICBbZXF1aXBfc2xvdHMuQ0hFU1RdOiBudWxsLFxuICAgICAgICAgICAgW2VxdWlwX3Nsb3RzLkJPRFldOiBudWxsLFxuICAgICAgICAgICAgW2VxdWlwX3Nsb3RzLlJJTkddOiBudWxsLFxuICAgICAgICAgICAgW2VxdWlwX3Nsb3RzLkJPT1RTXTogbnVsbCxcbiAgICAgICAgICAgIFtlcXVpcF9zbG90cy5VTkRFUldFQVJdOiBudWxsLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmVxdWlwcGVkX2FiaWxpdGllcyA9IFtdO1xuICAgICAgICB0aGlzLmlubmF0ZV9hYmlsaXRpZXMgPSBpbm5hdGVfYWJpbGl0aWVzO1xuICAgICAgICB0aGlzLmluaXRfaXRlbXMoKTtcbiAgICAgICAgdGhpcy51cGRhdGVfYXR0cmlidXRlcygpO1xuICAgICAgICB0aGlzLnVwZGF0ZV9lbGVtZW50YWxfYXR0cmlidXRlcygpO1xuICAgICAgICB0aGlzLmluX3BhcnR5ID0gaW5fcGFydHk7XG4gICAgICAgIHRoaXMuYWJpbGl0aWVzID0gW107XG4gICAgICAgIHRoaXMudXBkYXRlX2FiaWxpdGllcygpO1xuICAgICAgICB0aGlzLnR1cm5zID0gMTtcbiAgICAgICAgdGhpcy5maWdodGVyX3R5cGUgPSBmaWdodGVyX3R5cGVzLkFMTFk7XG4gICAgICAgIHRoaXMuYmF0dGxlX2FuaW1hdGlvbnNfdmFyaWF0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGJhdHRsZV9hbmltYXRpb25zX3ZhcmlhdGlvbnMpO1xuICAgIH1cblxuICAgIGdldCBkamlubmkoKSB7XG4gICAgICAgIGxldCB0aGlzX2RqaW5uaV9saXN0ID0gdGhpcy52ZW51c19kamlubmkuY29uY2F0KHRoaXMubWVyY3VyeV9kamlubmksIHRoaXMubWFyc19kamlubmksIHRoaXMuanVwaXRlcl9kamlubmkpO1xuICAgICAgICByZXR1cm4gdGhpc19kamlubmlfbGlzdC5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pbmZvLmRqaW5uaV9saXN0W2FdLmluZGV4IC0gdGhpcy5pbmZvLmRqaW5uaV9saXN0W2JdLmluZGV4O1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB1cGRhdGVfY2xhc3MoKSB7XG4gICAgICAgIHRoaXMuY2xhc3MgPSBjaG9vc2VfcmlnaHRfY2xhc3MoXG4gICAgICAgICAgICB0aGlzLmluZm8uY2xhc3Nlc19saXN0LFxuICAgICAgICAgICAgdGhpcy5jbGFzc190YWJsZSxcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudF9hZmluaXR5LFxuICAgICAgICAgICAgdGhpcy52ZW51c19sZXZlbF9jdXJyZW50LFxuICAgICAgICAgICAgdGhpcy5tZXJjdXJ5X2xldmVsX2N1cnJlbnQsXG4gICAgICAgICAgICB0aGlzLm1hcnNfbGV2ZWxfY3VycmVudCxcbiAgICAgICAgICAgIHRoaXMuanVwaXRlcl9sZXZlbF9jdXJyZW50XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgYWRkX2V4cCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIGxldCByZXR1cm5fZGF0YSA9IHtcbiAgICAgICAgICAgIGJlZm9yZToge1xuICAgICAgICAgICAgICAgIGxldmVsOiB0aGlzLmxldmVsLFxuICAgICAgICAgICAgICAgIGFiaWxpdGllczogdGhpcy5hYmlsaXRpZXMuc2xpY2UoKSxcbiAgICAgICAgICAgICAgICBzdGF0czogW1xuICAgICAgICAgICAgICAgICAgICB7bWF4X2hwOiB0aGlzLm1heF9ocH0sXG4gICAgICAgICAgICAgICAgICAgIHttYXhfcHA6IHRoaXMubWF4X3BwfSxcbiAgICAgICAgICAgICAgICAgICAge2F0azogdGhpcy5hdGt9LFxuICAgICAgICAgICAgICAgICAgICB7ZGVmOiB0aGlzLmRlZn0sXG4gICAgICAgICAgICAgICAgICAgIHthZ2k6IHRoaXMuYWdpfSxcbiAgICAgICAgICAgICAgICAgICAge2x1azogdGhpcy5sdWt9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWZ0ZXI6IG51bGwsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY3VycmVudF9leHAgKz0gdmFsdWU7XG4gICAgICAgIHRoaXMubGV2ZWwgPSBfLmZpbmRJbmRleCh0aGlzLmV4cF9jdXJ2ZSwgZXhwID0+IGV4cCA+IHRoaXMuY3VycmVudF9leHApO1xuICAgICAgICB0aGlzLnVwZGF0ZV9hbGwoKTtcbiAgICAgICAgcmV0dXJuX2RhdGEuYWZ0ZXIgPSB7XG4gICAgICAgICAgICBsZXZlbDogdGhpcy5sZXZlbCxcbiAgICAgICAgICAgIGFiaWxpdGllczogdGhpcy5hYmlsaXRpZXMuc2xpY2UoKSxcbiAgICAgICAgICAgIHN0YXRzOiBbXG4gICAgICAgICAgICAgICAge21heF9ocDogdGhpcy5tYXhfaHB9LFxuICAgICAgICAgICAgICAgIHttYXhfcHA6IHRoaXMubWF4X3BwfSxcbiAgICAgICAgICAgICAgICB7YXRrOiB0aGlzLmF0a30sXG4gICAgICAgICAgICAgICAge2RlZjogdGhpcy5kZWZ9LFxuICAgICAgICAgICAgICAgIHthZ2k6IHRoaXMuYWdpfSxcbiAgICAgICAgICAgICAgICB7bHVrOiB0aGlzLmx1a30sXG4gICAgICAgICAgICBdLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcmV0dXJuX2RhdGE7XG4gICAgfVxuXG4gICAgaW5pdF9pdGVtcygpIHtcbiAgICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKChpdGVtX29iaiwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGl0ZW1fb2JqLmluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICBpZiAoaXRlbV9vYmouZXF1aXBwZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVxdWlwX2l0ZW0oaW5kZXgsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhZGRfaXRlbShpdGVtX2tleV9uYW1lOiBzdHJpbmcsIHF1YW50aXR5OiBudW1iZXIsIGVxdWlwOiBib29sZWFuKSB7XG4gICAgICAgIGxldCBmb3VuZCA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5pbmZvLml0ZW1zX2xpc3RbaXRlbV9rZXlfbmFtZV0udHlwZSA9PT0gaXRlbV90eXBlcy5HRU5FUkFMX0lURU0pIHtcbiAgICAgICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaChpdGVtX29iaiA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1fb2JqLmtleV9uYW1lID09PSBpdGVtX2tleV9uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaXRlbV9vYmoucXVhbnRpdHkgKz0gcXVhbnRpdHk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvdW5kKSByZXR1cm47XG4gICAgICAgIHRoaXMuaXRlbXMucHVzaCh7XG4gICAgICAgICAgICBrZXlfbmFtZTogaXRlbV9rZXlfbmFtZSxcbiAgICAgICAgICAgIHF1YW50aXR5OiBxdWFudGl0eSxcbiAgICAgICAgICAgIGVxdWlwcGVkOiBmYWxzZSxcbiAgICAgICAgICAgIGluZGV4OiB0aGlzLml0ZW1zLmxlbmd0aCxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChlcXVpcCkge1xuICAgICAgICAgICAgdGhpcy5lcXVpcF9pdGVtKHRoaXMuaXRlbXMubGVuZ3RoIC0gMSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW1vdmVfaXRlbShpdGVtX29ial90b19yZW1vdmU6IEl0ZW1TbG90LCBxdWFudGl0eTogbnVtYmVyKSB7XG4gICAgICAgIGxldCBhZGp1c3RfaW5kZXggPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pdGVtcyA9IHRoaXMuaXRlbXMuZmlsdGVyKChpdGVtX29iaiwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmIChpdGVtX29ial90b19yZW1vdmUua2V5X25hbWUgPT09IGl0ZW1fb2JqLmtleV9uYW1lKSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1fb2JqLmVxdWlwcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5lcXVpcF9pdGVtKGluZGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1fb2JqLnF1YW50aXR5IC0gcXVhbnRpdHkgPj0gMSkge1xuICAgICAgICAgICAgICAgICAgICBpdGVtX29iai5xdWFudGl0eSA9IGl0ZW1fb2JqLnF1YW50aXR5IC0gcXVhbnRpdHk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhZGp1c3RfaW5kZXggPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhZGp1c3RfaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAtLWl0ZW1fb2JqLmluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGVxdWlwX2l0ZW0oaW5kZXg6IG51bWJlciwgaW5pdGlhbGl6ZTogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IGl0ZW1fb2JqID0gdGhpcy5pdGVtc1tpbmRleF07XG4gICAgICAgIGlmIChpdGVtX29iai5lcXVpcHBlZCAmJiAhaW5pdGlhbGl6ZSkgcmV0dXJuO1xuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5pbmZvLml0ZW1zX2xpc3RbaXRlbV9vYmoua2V5X25hbWVdO1xuICAgICAgICBpZiAoaXRlbS50eXBlIGluIGl0ZW1fZXF1aXBfc2xvdCAmJiB0aGlzLmVxdWlwX3Nsb3RzW2l0ZW1fZXF1aXBfc2xvdFtpdGVtLnR5cGVdXSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy51bmVxdWlwX2l0ZW0odGhpcy5lcXVpcF9zbG90c1tpdGVtX2VxdWlwX3Nsb3RbaXRlbS50eXBlXV0uaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpdGVtLnR5cGUgaW4gaXRlbV9lcXVpcF9zbG90KSB7XG4gICAgICAgICAgICB0aGlzLmVxdWlwX3Nsb3RzW2l0ZW1fZXF1aXBfc2xvdFtpdGVtLnR5cGVdXSA9IGl0ZW1fb2JqO1xuICAgICAgICB9XG4gICAgICAgIGl0ZW1fb2JqLmVxdWlwcGVkID0gdHJ1ZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtLmVmZmVjdHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkX2VmZmVjdChpdGVtLmVmZmVjdHNbaV0sIGl0ZW0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlX2F0dHJpYnV0ZXMoKTtcbiAgICAgICAgdGhpcy51cGRhdGVfZWxlbWVudGFsX2F0dHJpYnV0ZXMoKTtcbiAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gaXRlbV90eXBlcy5BQklMSVRZX0dSQU5UT1IpIHtcbiAgICAgICAgICAgIHRoaXMuZXF1aXBwZWRfYWJpbGl0aWVzLnB1c2goaXRlbS5ncmFudGVkX2FiaWxpdHkpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVfYWJpbGl0aWVzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1bmVxdWlwX2l0ZW0oaW5kZXg6IG51bWJlcikge1xuICAgICAgICBjb25zdCBpdGVtX29iaiA9IHRoaXMuaXRlbXNbaW5kZXhdO1xuICAgICAgICBpZiAoIWl0ZW1fb2JqLmVxdWlwcGVkKSByZXR1cm47XG4gICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmluZm8uaXRlbXNfbGlzdFtpdGVtX29iai5rZXlfbmFtZV07XG4gICAgICAgIGlmIChpdGVtLnR5cGUgaW4gaXRlbV9lcXVpcF9zbG90ICYmIHRoaXMuZXF1aXBfc2xvdHNbaXRlbV9lcXVpcF9zbG90W2l0ZW0udHlwZV1dICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmVxdWlwX3Nsb3RzW2l0ZW1fZXF1aXBfc2xvdFtpdGVtLnR5cGVdXSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaXRlbV9vYmouZXF1aXBwZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5lZmZlY3RzLmZvckVhY2goZWZmZWN0ID0+IHtcbiAgICAgICAgICAgIGlmIChlZmZlY3QuZWZmZWN0X293bmVyX2luc3RhbmNlID09PSBpdGVtKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVfZWZmZWN0KGVmZmVjdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnVwZGF0ZV9hdHRyaWJ1dGVzKCk7XG4gICAgICAgIHRoaXMudXBkYXRlX2VsZW1lbnRhbF9hdHRyaWJ1dGVzKCk7XG4gICAgICAgIGlmIChpdGVtLnR5cGUgPT09IGl0ZW1fdHlwZXMuQUJJTElUWV9HUkFOVE9SKSB7XG4gICAgICAgICAgICB0aGlzLmVxdWlwcGVkX2FiaWxpdGllcyA9IHRoaXMuZXF1aXBwZWRfYWJpbGl0aWVzLmZpbHRlcihhYmlsaXR5ID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWJpbGl0eSAhPT0gaXRlbS5ncmFudGVkX2FiaWxpdHk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlX2FiaWxpdGllcygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaW5pdF9kamlubmkoZGppbm5pOiBzdHJpbmdbXSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRqaW5uaS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgZGppbm4gPSB0aGlzLmluZm8uZGppbm5pX2xpc3RbZGppbm5pW2ldXTtcbiAgICAgICAgICAgIHN3aXRjaCAoZGppbm4uZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGNhc2UgZWxlbWVudHMuVkVOVVM6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmVudXNfZGppbm5pLnB1c2goZGppbm4ua2V5X25hbWUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGVsZW1lbnRzLk1FUkNVUlk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVyY3VyeV9kamlubmkucHVzaChkamlubi5rZXlfbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgZWxlbWVudHMuTUFSUzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXJzX2RqaW5uaS5wdXNoKGRqaW5uLmtleV9uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBlbGVtZW50cy5KVVBJVEVSOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmp1cGl0ZXJfZGppbm5pLnB1c2goZGppbm4ua2V5X25hbWUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZV9lbGVtZW50YWxfYXR0cmlidXRlcygpO1xuICAgIH1cblxuICAgIGFkZF9kamlubihkamlubl9rZXlfbmFtZTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGRqaW5uID0gdGhpcy5pbmZvLmRqaW5uaV9saXN0W2RqaW5uX2tleV9uYW1lXTtcbiAgICAgICAgc3dpdGNoIChkamlubi5lbGVtZW50KSB7XG4gICAgICAgICAgICBjYXNlIGVsZW1lbnRzLlZFTlVTOlxuICAgICAgICAgICAgICAgIHRoaXMudmVudXNfZGppbm5pLnB1c2goZGppbm4ua2V5X25hbWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBlbGVtZW50cy5NRVJDVVJZOlxuICAgICAgICAgICAgICAgIHRoaXMubWVyY3VyeV9kamlubmkucHVzaChkamlubi5rZXlfbmFtZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGVsZW1lbnRzLk1BUlM6XG4gICAgICAgICAgICAgICAgdGhpcy5tYXJzX2RqaW5uaS5wdXNoKGRqaW5uLmtleV9uYW1lKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZWxlbWVudHMuSlVQSVRFUjpcbiAgICAgICAgICAgICAgICB0aGlzLmp1cGl0ZXJfZGppbm5pLnB1c2goZGppbm4ua2V5X25hbWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlX2FsbCgpO1xuICAgIH1cblxuICAgIHJlbW92ZV9kamlubihkamlubl9rZXlfbmFtZTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGRqaW5uID0gdGhpcy5pbmZvLmRqaW5uaV9saXN0W2RqaW5uX2tleV9uYW1lXTtcbiAgICAgICAgbGV0IHRoaXNfZGppbm5pX2xpc3Q7XG4gICAgICAgIHN3aXRjaCAoZGppbm4uZWxlbWVudCkge1xuICAgICAgICAgICAgY2FzZSBlbGVtZW50cy5WRU5VUzpcbiAgICAgICAgICAgICAgICB0aGlzX2RqaW5uaV9saXN0ID0gdGhpcy52ZW51c19kamlubmk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGVsZW1lbnRzLk1FUkNVUlk6XG4gICAgICAgICAgICAgICAgdGhpc19kamlubmlfbGlzdCA9IHRoaXMubWVyY3VyeV9kamlubmk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGVsZW1lbnRzLk1BUlM6XG4gICAgICAgICAgICAgICAgdGhpc19kamlubmlfbGlzdCA9IHRoaXMubWFyc19kamlubmk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGVsZW1lbnRzLkpVUElURVI6XG4gICAgICAgICAgICAgICAgdGhpc19kamlubmlfbGlzdCA9IHRoaXMuanVwaXRlcl9kamlubmk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzX2RqaW5uaV9saXN0LmluZGV4T2YoZGppbm5fa2V5X25hbWUpO1xuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB0aGlzX2RqaW5uaV9saXN0LnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIHRoaXMudXBkYXRlX2FsbCgpO1xuICAgIH1cblxuICAgIHJlcGxhY2VfZGppbm4ob2xkX2RqaW5uX2tleV9uYW1lOiBzdHJpbmcsIG5ld19kamlubl9rZXlfbmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlX2RqaW5uKG9sZF9kamlubl9rZXlfbmFtZSk7XG4gICAgICAgIHRoaXMuYWRkX2RqaW5uKG5ld19kamlubl9rZXlfbmFtZSk7XG4gICAgfVxuXG4gICAgcHJldmlld19kamlubl9jaGFuZ2Uoc3RhdHM6IG1haW5fc3RhdHNbXSwgZGppbm5pX2tleV9uYW1lOiBzdHJpbmdbXSwgZGppbm5pX25leHRfc3RhdHVzOiBkamlubl9zdGF0dXNbXSwgYWN0aW9uPykge1xuICAgICAgICBjb25zdCBwcmV2aW91c19jbGFzcyA9IHRoaXMuY2xhc3M7XG4gICAgICAgIGxldCB2ZW51c19sdiA9IHRoaXMudmVudXNfbGV2ZWxfY3VycmVudDtcbiAgICAgICAgbGV0IG1lcmN1cnlfbHYgPSB0aGlzLm1lcmN1cnlfbGV2ZWxfY3VycmVudDtcbiAgICAgICAgbGV0IG1hcnNfbHYgPSB0aGlzLm1hcnNfbGV2ZWxfY3VycmVudDtcbiAgICAgICAgbGV0IGp1cGl0ZXJfbHYgPSB0aGlzLmp1cGl0ZXJfbGV2ZWxfY3VycmVudDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkamlubmlfa2V5X25hbWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGRqaW5uID0gdGhpcy5pbmZvLmRqaW5uaV9saXN0W2RqaW5uaV9rZXlfbmFtZVtpXV07XG4gICAgICAgICAgICBsZXQgbHZfc2hpZnQ7XG4gICAgICAgICAgICBzd2l0Y2ggKGRqaW5uaV9uZXh0X3N0YXR1c1tpXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgZGppbm5fc3RhdHVzLlNFVDpcbiAgICAgICAgICAgICAgICAgICAgbHZfc2hpZnQgPSBNYWluQ2hhci5FTEVNX0xWX0RFTFRBO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGRqaW5uX3N0YXR1cy5SRUNPVkVSWTpcbiAgICAgICAgICAgICAgICBjYXNlIGRqaW5uX3N0YXR1cy5BTlk6XG4gICAgICAgICAgICAgICAgICAgIGx2X3NoaWZ0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgbHZfc2hpZnQgPSAtTWFpbkNoYXIuRUxFTV9MVl9ERUxUQTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAoZGppbm4uZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGNhc2UgZWxlbWVudHMuVkVOVVM6XG4gICAgICAgICAgICAgICAgICAgIHZlbnVzX2x2ICs9IGx2X3NoaWZ0O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGVsZW1lbnRzLk1FUkNVUlk6XG4gICAgICAgICAgICAgICAgICAgIG1lcmN1cnlfbHYgKz0gbHZfc2hpZnQ7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgZWxlbWVudHMuTUFSUzpcbiAgICAgICAgICAgICAgICAgICAgbWFyc19sdiArPSBsdl9zaGlmdDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBlbGVtZW50cy5KVVBJVEVSOlxuICAgICAgICAgICAgICAgICAgICBqdXBpdGVyX2x2ICs9IGx2X3NoaWZ0O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNsYXNzID0gY2hvb3NlX3JpZ2h0X2NsYXNzKFxuICAgICAgICAgICAgdGhpcy5pbmZvLmNsYXNzZXNfbGlzdCxcbiAgICAgICAgICAgIHRoaXMuY2xhc3NfdGFibGUsXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRfYWZpbml0eSxcbiAgICAgICAgICAgIHZlbnVzX2x2LFxuICAgICAgICAgICAgbWVyY3VyeV9sdixcbiAgICAgICAgICAgIG1hcnNfbHYsXG4gICAgICAgICAgICBqdXBpdGVyX2x2XG4gICAgICAgICk7XG4gICAgICAgIGxldCByZXR1cm5fb2JqID0ge1xuICAgICAgICAgICAgY2xhc3NfbmFtZTogdGhpcy5jbGFzcy5uYW1lLFxuICAgICAgICAgICAgY2xhc3Nfa2V5X25hbWU6IHRoaXMuY2xhc3Mua2V5X25hbWUsXG4gICAgICAgICAgICBhYmlsaXRpZXM6IG51bGwsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybl9vYmouYWJpbGl0aWVzID0gdGhpcy5pbm5hdGVfYWJpbGl0aWVzLmNvbmNhdChcbiAgICAgICAgICAgIHRoaXMuY2xhc3MuYWJpbGl0eV9sZXZlbF9wYWlyc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIocGFpciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwYWlyLmxldmVsIDw9IHRoaXMubGV2ZWwgJiYgIXRoaXMuaW5uYXRlX2FiaWxpdGllcy5pbmNsdWRlcyhwYWlyLmFiaWxpdHkpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLm1hcChwYWlyID0+IHBhaXIuYWJpbGl0eSksXG4gICAgICAgICAgICB0aGlzLmVxdWlwcGVkX2FiaWxpdGllc1xuICAgICAgICApO1xuICAgICAgICBkamlubmlfbmV4dF9zdGF0dXMgPSBkamlubmlfbmV4dF9zdGF0dXMubWFwKHN0YXR1cyA9PlxuICAgICAgICAgICAgc3RhdHVzID09PSBkamlubl9zdGF0dXMuQU5ZID8gZGppbm5fc3RhdHVzLlNUQU5EQlkgOiBzdGF0dXNcbiAgICAgICAgKTtcbiAgICAgICAgc3RhdHMuZm9yRWFjaChzdGF0ID0+IHtcbiAgICAgICAgICAgIHJldHVybl9vYmpbc3RhdF0gPSB0aGlzLnByZXZpZXdfc3RhdHNfYnlfZGppbm4oc3RhdCwgZGppbm5pX2tleV9uYW1lLCBkamlubmlfbmV4dF9zdGF0dXMsIGFjdGlvbik7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNsYXNzID0gcHJldmlvdXNfY2xhc3M7XG4gICAgICAgIHJldHVybiByZXR1cm5fb2JqO1xuICAgIH1cblxuICAgIHByZXZpZXdfc3RhdHNfYnlfZGppbm4oc3RhdDogbWFpbl9zdGF0cywgZGppbm5pX2tleV9uYW1lOiBzdHJpbmdbXSwgZGppbm5pX25leHRfc3RhdHVzOiBkamlubl9zdGF0dXNbXSwgYWN0aW9uKSB7XG4gICAgICAgIGNvbnN0IHByZXZpZXdfb2JqID0ge1xuICAgICAgICAgICAgZGppbm5pX2tleV9uYW1lOiBkamlubmlfa2V5X25hbWUsXG4gICAgICAgICAgICBkamlubmlfbmV4dF9zdGF0dXM6IGRqaW5uaV9uZXh0X3N0YXR1cyxcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRfbWF4X3N0YXQoc3RhdCwgdHJ1ZSwgcHJldmlld19vYmopO1xuICAgIH1cblxuICAgIHByZXZpZXdfc3RhdHNfYnlfZWZmZWN0KGVmZmVjdF90eXBlOiBlZmZlY3RfdHlwZXMsIGVmZmVjdF9vYmosIGl0ZW1fa2V5X25hbWU6IHN0cmluZykge1xuICAgICAgICBjb25zdCBwcmV2aWV3X29iaiA9IHtcbiAgICAgICAgICAgIGVmZmVjdF9vYmo6IGVmZmVjdF9vYmosXG4gICAgICAgICAgICBpdGVtX2tleV9uYW1lOiBpdGVtX2tleV9uYW1lLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRfbWF4X3N0YXQoZWZmZWN0X3R5cGVfc3RhdFtlZmZlY3RfdHlwZV0sIHRydWUsIHByZXZpZXdfb2JqKTtcbiAgICB9XG5cbiAgICBwcmV2aWV3X3N0YXRfd2l0aG91dF9hYmlsaXRpZXNfZWZmZWN0KHN0YXQ6IG1haW5fc3RhdHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0X21heF9zdGF0KHN0YXQsIHRydWUsIHtpZ25vcmVfYWJpbGl0eV9lZmZlY3Q6IHRydWV9KTtcbiAgICB9XG5cbiAgICBzZXRfbWF4X3N0YXQoc3RhdDogbWFpbl9zdGF0cywgcHJldmlldyA9IGZhbHNlLCBwcmV2aWV3X29iajogYW55ID0ge30pIHtcbiAgICAgICAgY29uc3Qgc3RhdF9wcmVmaXggPSBbbWFpbl9zdGF0cy5NQVhfSFAsIG1haW5fc3RhdHMuTUFYX1BQXS5pbmNsdWRlcyhzdGF0KSA/IHN0YXQuc3BsaXQoXCJfXCIpWzFdIDogc3RhdDtcbiAgICAgICAgY29uc3Qgc3RhdF9rZXkgPSBzdGF0O1xuICAgICAgICBjb25zdCBib29zdF9rZXkgPSBzdGF0X3ByZWZpeCArIFwiX2Jvb3N0XCI7XG4gICAgICAgIGNvbnN0IGN1cnZlX2tleSA9IHN0YXRfcHJlZml4ICsgXCJfY3VydmVcIjtcbiAgICAgICAgY29uc3QgZXh0cmFfa2V5ID0gc3RhdF9wcmVmaXggKyBcIl9leHRyYVwiO1xuICAgICAgICBjb25zdCBwcmV2aW91c192YWx1ZSA9IHRoaXNbc3RhdF9rZXldO1xuXG4gICAgICAgIC8vc2V0dGluZyBzdGF0cyBieSBjdXJyZW50IGxldmVsIGFuZCBleHRyYSB2YWx1ZXNcbiAgICAgICAgdGhpc1tzdGF0X2tleV0gPSAodGhpc1tjdXJ2ZV9rZXldW3RoaXMubGV2ZWxdICogdGhpcy5jbGFzc1tib29zdF9rZXldICsgdGhpc1tleHRyYV9rZXldKSB8IDA7XG5cbiAgICAgICAgbGV0IHRoaXNfZGppbm5pID0gdGhpcy5kamlubmk7XG4gICAgICAgIGlmIChwcmV2aWV3KSB7XG4gICAgICAgICAgICBpZiAocHJldmlld19vYmouYWN0aW9uID09PSBcIlRyYWRlXCIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaXJzdF9pbmRleCA9IHRoaXNfZGppbm5pLmluZGV4T2YocHJldmlld19vYmouZGppbm5pX2tleV9uYW1lWzBdKTtcbiAgICAgICAgICAgICAgICBpZiAoZmlyc3RfaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzX2RqaW5uaVtmaXJzdF9pbmRleF0gPSBwcmV2aWV3X29iai5kamlubmlfa2V5X25hbWVbMV07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc19kamlubmlbdGhpc19kamlubmkuaW5kZXhPZihwcmV2aWV3X29iai5kamlubmlfa2V5X25hbWVbMV0pXSA9IHByZXZpZXdfb2JqLmRqaW5uaV9rZXlfbmFtZVswXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByZXZpZXdfb2JqLmFjdGlvbiA9PT0gXCJHaXZlXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzX2RqaW5uaS5wdXNoKHByZXZpZXdfb2JqLmRqaW5uaV9rZXlfbmFtZVswXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzX2RqaW5uaS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgbGV0IGRqaW5uX2tleV9uYW1lID0gdGhpc19kamlubmlbaV07XG4gICAgICAgICAgICBsZXQgZGppbm4gPSB0aGlzLmluZm8uZGppbm5pX2xpc3RbZGppbm5fa2V5X25hbWVdO1xuICAgICAgICAgICAgbGV0IHN0YXR1cyA9IGRqaW5uLnN0YXR1cztcbiAgICAgICAgICAgIGlmIChwcmV2aWV3ICYmIHByZXZpZXdfb2JqLmRqaW5uaV9rZXlfbmFtZSAmJiBwcmV2aWV3X29iai5kamlubmlfa2V5X25hbWUuaW5jbHVkZXMoZGppbm5fa2V5X25hbWUpKSB7XG4gICAgICAgICAgICAgICAgc3RhdHVzID0gcHJldmlld19vYmouZGppbm5pX25leHRfc3RhdHVzW3ByZXZpZXdfb2JqLmRqaW5uaV9rZXlfbmFtZS5pbmRleE9mKGRqaW5uX2tleV9uYW1lKV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhdHVzICE9PSBkamlubl9zdGF0dXMuU0VUKSBjb250aW51ZTtcbiAgICAgICAgICAgIHRoaXNbc3RhdF9rZXldICs9IGRqaW5uW2Jvb3N0X2tleV07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lZmZlY3RzLmZvckVhY2goZWZmZWN0ID0+IHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBwcmV2aWV3ICYmXG4gICAgICAgICAgICAgICAgZWZmZWN0LmVmZmVjdF9vd25lcl9pbnN0YW5jZSAmJlxuICAgICAgICAgICAgICAgIHByZXZpZXdfb2JqLml0ZW1fa2V5X25hbWUgPT09IGVmZmVjdC5lZmZlY3Rfb3duZXJfaW5zdGFuY2Uua2V5X25hbWVcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBpZiAocHJldmlldyAmJiBwcmV2aWV3X29iai5pZ25vcmVfYWJpbGl0eV9lZmZlY3QgJiYgZWZmZWN0LmVmZmVjdF9vd25lcl9pbnN0YW5jZSBpbnN0YW5jZW9mIEFiaWxpdHkpIHJldHVybjtcbiAgICAgICAgICAgIGxldCBlZmZlY3RfdHlwZTtcbiAgICAgICAgICAgIHN3aXRjaCAoc3RhdCkge1xuICAgICAgICAgICAgICAgIGNhc2UgbWFpbl9zdGF0cy5NQVhfSFA6XG4gICAgICAgICAgICAgICAgICAgIGVmZmVjdF90eXBlID0gZWZmZWN0X3R5cGVzLk1BWF9IUDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBtYWluX3N0YXRzLk1BWF9QUDpcbiAgICAgICAgICAgICAgICAgICAgZWZmZWN0X3R5cGUgPSBlZmZlY3RfdHlwZXMuTUFYX1BQO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIG1haW5fc3RhdHMuQVRUQUNLOlxuICAgICAgICAgICAgICAgICAgICBlZmZlY3RfdHlwZSA9IGVmZmVjdF90eXBlcy5BVFRBQ0s7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgbWFpbl9zdGF0cy5ERUZFTlNFOlxuICAgICAgICAgICAgICAgICAgICBlZmZlY3RfdHlwZSA9IGVmZmVjdF90eXBlcy5ERUZFTlNFO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIG1haW5fc3RhdHMuQUdJTElUWTpcbiAgICAgICAgICAgICAgICAgICAgZWZmZWN0X3R5cGUgPSBlZmZlY3RfdHlwZXMuQUdJTElUWTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBtYWluX3N0YXRzLkxVQ0s6XG4gICAgICAgICAgICAgICAgICAgIGVmZmVjdF90eXBlID0gZWZmZWN0X3R5cGVzLkxVQ0s7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVmZmVjdC50eXBlID09PSBlZmZlY3RfdHlwZSkge1xuICAgICAgICAgICAgICAgIGVmZmVjdC5hcHBseV9lZmZlY3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChwcmV2aWV3KSB7XG4gICAgICAgICAgICBjb25zdCBwcmV2aWV3X3ZhbHVlID0gcHJldmlld19vYmouZWZmZWN0X29ialxuICAgICAgICAgICAgICAgID8gRWZmZWN0LnByZXZpZXdfdmFsdWVfYXBwbGllZChwcmV2aWV3X29iai5lZmZlY3Rfb2JqLCB0aGlzW3N0YXRfa2V5XSlcbiAgICAgICAgICAgICAgICA6IHRoaXNbc3RhdF9rZXldO1xuICAgICAgICAgICAgdGhpc1tzdGF0X2tleV0gPSBwcmV2aW91c192YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiBwcmV2aWV3X3ZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChbbWFpbl9zdGF0cy5NQVhfSFAsIG1haW5fc3RhdHMuTUFYX1BQXS5pbmNsdWRlcyhzdGF0KSkge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudF9rZXkgPSBzdGF0ID09PSBtYWluX3N0YXRzLk1BWF9IUCA/IG1haW5fc3RhdHMuQ1VSUkVOVF9IUCA6IG1haW5fc3RhdHMuQ1VSUkVOVF9QUDtcbiAgICAgICAgICAgIGlmICh0aGlzW2N1cnJlbnRfa2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpc1tjdXJyZW50X2tleV0gPSB0aGlzW3N0YXRfa2V5XTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpc1tjdXJyZW50X2tleV0gPSBNYXRoLnJvdW5kKCh0aGlzW2N1cnJlbnRfa2V5XSAqIHRoaXNbc3RhdF9rZXldKSAvIHByZXZpb3VzX3ZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZV9hdHRyaWJ1dGVzKCkge1xuICAgICAgICB0aGlzLnNldF9tYXhfc3RhdChtYWluX3N0YXRzLk1BWF9IUCk7XG4gICAgICAgIHRoaXMuc2V0X21heF9zdGF0KG1haW5fc3RhdHMuTUFYX1BQKTtcbiAgICAgICAgdGhpcy5zZXRfbWF4X3N0YXQobWFpbl9zdGF0cy5BVFRBQ0spO1xuICAgICAgICB0aGlzLnNldF9tYXhfc3RhdChtYWluX3N0YXRzLkRFRkVOU0UpO1xuICAgICAgICB0aGlzLnNldF9tYXhfc3RhdChtYWluX3N0YXRzLkFHSUxJVFkpO1xuICAgICAgICB0aGlzLnNldF9tYXhfc3RhdChtYWluX3N0YXRzLkxVQ0spO1xuICAgIH1cblxuICAgIGFkZF9leHRyYV9tYXhfaHAoYW1vdW50OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5ocF9leHRyYSArPSBhbW91bnQ7XG4gICAgfVxuXG4gICAgYWRkX2V4dHJhX21heF9wcChhbW91bnQ6IG51bWJlcikge1xuICAgICAgICB0aGlzLnBwX2V4dHJhICs9IGFtb3VudDtcbiAgICB9XG5cbiAgICBhZGRfZXh0cmFfbWF4X2F0ayhhbW91bnQ6IG51bWJlcikge1xuICAgICAgICB0aGlzLmF0a19leHRyYSArPSBhbW91bnQ7XG4gICAgfVxuXG4gICAgYWRkX2V4dHJhX21heF9kZWYoYW1vdW50OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5kZWZfZXh0cmEgKz0gYW1vdW50O1xuICAgIH1cblxuICAgIGFkZF9leHRyYV9tYXhfYWdpKGFtb3VudDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuYWdpX2V4dHJhICs9IGFtb3VudDtcbiAgICB9XG5cbiAgICBhZGRfZXh0cmFfbWF4X2x1ayhhbW91bnQ6IG51bWJlcikge1xuICAgICAgICB0aGlzLmx1a19leHRyYSArPSBhbW91bnQ7XG4gICAgfVxuXG4gICAgcHJldmlld19lbGVtZW50YWxfc3RhdHNfd2l0aG91dF9hYmlsaXRpZXNfZWZmZWN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy51cGRhdGVfZWxlbWVudGFsX2F0dHJpYnV0ZXModHJ1ZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgdXBkYXRlX2VsZW1lbnRhbF9hdHRyaWJ1dGVzKHByZXZpZXc6IGJvb2xlYW4gPSBmYWxzZSwgaWdub3JlX2FiaWxpdHlfZWZmZWN0czogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzX3N0YXRzID0ge307XG4gICAgICAgIG9yZGVyZWRfZWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgIGlmIChwcmV2aWV3KSB7XG4gICAgICAgICAgICAgICAgcHJldmlvdXNfc3RhdHNbZWxlbWVudF0gPSB7XG4gICAgICAgICAgICAgICAgICAgIHBvd2VyOiB0aGlzW2VsZW1lbnQgKyBcIl9wb3dlcl9jdXJyZW50XCJdLFxuICAgICAgICAgICAgICAgICAgICByZXNpc3Q6IHRoaXNbZWxlbWVudCArIFwiX3Jlc2lzdF9jdXJyZW50XCJdLFxuICAgICAgICAgICAgICAgICAgICBsZXZlbDogdGhpc1tlbGVtZW50ICsgXCJfbGV2ZWxfY3VycmVudFwiXSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpc1tlbGVtZW50ICsgXCJfcG93ZXJfY3VycmVudFwiXSA9IHRoaXNbZWxlbWVudCArIFwiX3Bvd2VyX2Jhc2VcIl07XG4gICAgICAgICAgICB0aGlzW2VsZW1lbnQgKyBcIl9yZXNpc3RfY3VycmVudFwiXSA9IHRoaXNbZWxlbWVudCArIFwiX3Jlc2lzdF9iYXNlXCJdO1xuICAgICAgICAgICAgdGhpc1tlbGVtZW50ICsgXCJfbGV2ZWxfY3VycmVudFwiXSA9IHRoaXNbZWxlbWVudCArIFwiX2xldmVsX2Jhc2VcIl07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kamlubmkubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGxldCBkamlubiA9IHRoaXMuaW5mby5kamlubmlfbGlzdFt0aGlzLmRqaW5uaVtpXV07XG4gICAgICAgICAgICBpZiAoZGppbm4uc3RhdHVzICE9PSBkamlubl9zdGF0dXMuU0VUKSBjb250aW51ZTtcbiAgICAgICAgICAgIHRoaXNbZGppbm4uZWxlbWVudCArIFwiX3Bvd2VyX2N1cnJlbnRcIl0gKz0gTWFpbkNoYXIuRUxFTV9QT1dFUl9ERUxUQTtcbiAgICAgICAgICAgIHRoaXNbZGppbm4uZWxlbWVudCArIFwiX3Jlc2lzdF9jdXJyZW50XCJdICs9IE1haW5DaGFyLkVMRU1fUkVTSVNUX0RFTFRBO1xuICAgICAgICAgICAgdGhpc1tkamlubi5lbGVtZW50ICsgXCJfbGV2ZWxfY3VycmVudFwiXSArPSBNYWluQ2hhci5FTEVNX0xWX0RFTFRBO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5lZmZlY3RzLmZvckVhY2goZWZmZWN0ID0+IHtcbiAgICAgICAgICAgIGlmIChlZmZlY3QudHlwZSA9PT0gZWZmZWN0X3R5cGVzLlBPV0VSIHx8IGVmZmVjdC50eXBlID09PSBlZmZlY3RfdHlwZXMuUkVTSVNUKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlnbm9yZV9hYmlsaXR5X2VmZmVjdHMgJiYgZWZmZWN0LmVmZmVjdF9vd25lcl9pbnN0YW5jZSBpbnN0YW5jZW9mIEFiaWxpdHkpIHJldHVybjtcbiAgICAgICAgICAgICAgICBlZmZlY3QuYXBwbHlfZWZmZWN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3JkZXJlZF9lbGVtZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IG9yZGVyZWRfZWxlbWVudHNbaV07XG4gICAgICAgICAgICBjb25zdCBwb3dlcl9rZXkgPSBlbGVtZW50ICsgXCJfcG93ZXJfY3VycmVudFwiO1xuICAgICAgICAgICAgY29uc3QgcmVzaXN0X2tleSA9IGVsZW1lbnQgKyBcIl9yZXNpc3RfY3VycmVudFwiO1xuICAgICAgICAgICAgdGhpc1twb3dlcl9rZXldID0gXy5jbGFtcCh0aGlzW3Bvd2VyX2tleV0sIEVMRU1fQVRUUl9NSU4sIEVMRU1fQVRUUl9NQVgpO1xuICAgICAgICAgICAgdGhpc1tyZXNpc3Rfa2V5XSA9IF8uY2xhbXAodGhpc1tyZXNpc3Rfa2V5XSwgRUxFTV9BVFRSX01JTiwgRUxFTV9BVFRSX01BWCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJldmlldykge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudGFsX3N0YXRzID0gT2JqZWN0LmZyb21FbnRyaWVzKFxuICAgICAgICAgICAgICAgIG9yZGVyZWRfZWxlbWVudHMubWFwKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXR1cm5fZGF0YSA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG93ZXI6IHRoaXNbZWxlbWVudCArIFwiX3Bvd2VyX2N1cnJlbnRcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzaXN0OiB0aGlzW2VsZW1lbnQgKyBcIl9yZXNpc3RfY3VycmVudFwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXZlbDogdGhpc1tlbGVtZW50ICsgXCJfbGV2ZWxfY3VycmVudFwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbZWxlbWVudCArIFwiX3Bvd2VyX2N1cnJlbnRcIl0gPSBwcmV2aW91c19zdGF0c1tlbGVtZW50XS5wb3dlcjtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1tlbGVtZW50ICsgXCJfcmVzaXN0X2N1cnJlbnRcIl0gPSBwcmV2aW91c19zdGF0c1tlbGVtZW50XS5yZXNpc3Q7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbZWxlbWVudCArIFwiX2xldmVsX2N1cnJlbnRcIl0gPSBwcmV2aW91c19zdGF0c1tlbGVtZW50XS5sZXZlbDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldHVybl9kYXRhO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnRhbF9zdGF0cztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlX2FiaWxpdGllcygpIHtcbiAgICAgICAgdGhpcy5hYmlsaXRpZXMgPSB0aGlzLmlubmF0ZV9hYmlsaXRpZXMuY29uY2F0KFxuICAgICAgICAgICAgdGhpcy5jbGFzcy5hYmlsaXR5X2xldmVsX3BhaXJzXG4gICAgICAgICAgICAgICAgLmZpbHRlcihwYWlyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhaXIubGV2ZWwgPD0gdGhpcy5sZXZlbCAmJiAhdGhpcy5pbm5hdGVfYWJpbGl0aWVzLmluY2x1ZGVzKHBhaXIuYWJpbGl0eSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAubWFwKHBhaXIgPT4gcGFpci5hYmlsaXR5KSxcbiAgICAgICAgICAgIHRoaXMuZXF1aXBwZWRfYWJpbGl0aWVzXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdXBkYXRlX2FsbCgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVfZWxlbWVudGFsX2F0dHJpYnV0ZXMoKTtcbiAgICAgICAgdGhpcy51cGRhdGVfY2xhc3MoKTtcbiAgICAgICAgdGhpcy51cGRhdGVfYXR0cmlidXRlcygpO1xuICAgICAgICB0aGlzLnVwZGF0ZV9hYmlsaXRpZXMoKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0X2FjdGl2ZV9wbGF5ZXJzKHBhcnR5X2RhdGE6IFBhcnR5RGF0YSwgbWF4OiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHBhcnR5X2RhdGEubWVtYmVycy5zbGljZSgwLCBtYXgpLmZpbHRlcihjaGFyID0+IHtcbiAgICAgICAgICAgIHJldHVybiAhY2hhci5oYXNfcGVybWFuZW50X3N0YXR1cyhwZXJtYW5lbnRfc3RhdHVzLkRPV05FRCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXRpYyBhZGRfaXRlbV90b19wYXJ0eShwYXJ0eV9kYXRhOiBQYXJ0eURhdGEsIGl0ZW06IEl0ZW0sIHF1YW50aXR5OiBudW1iZXIpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0eV9kYXRhLm1lbWJlcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYXIgPSBwYXJ0eV9kYXRhLm1lbWJlcnNbaV07XG4gICAgICAgICAgICBpZiAoY2hhci5pdGVtcy5sZW5ndGggPCBNYWluQ2hhci5NQVhfSVRFTVNfUEVSX0NIQVIpIHtcbiAgICAgICAgICAgICAgICBjaGFyLmFkZF9pdGVtKGl0ZW0ua2V5X25hbWUsIHF1YW50aXR5LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbiIsImltcG9ydCB7ZWxlbWVudHN9IGZyb20gXCIuL3V0aWxzXCI7XG5cbmV4cG9ydCBlbnVtIGFiaWxpdHlfdHlwZXMge1xuICAgIEhFQUxJTkcgPSBcImhlYWxpbmdcIixcbiAgICBFRkZFQ1RfT05MWSA9IFwiZWZmZWN0X29ubHlcIixcbiAgICBBRERFRF9EQU1BR0UgPSBcImFkZGVkX2RhbWFnZVwiLFxuICAgIE1VTFRJUExJRVIgPSBcIm11bHRpcGxpZXJcIixcbiAgICBCQVNFX0RBTUFHRSA9IFwiYmFzZV9kYW1hZ2VcIixcbiAgICBTVU1NT04gPSBcInN1bW1vblwiLFxuICAgIFVUSUxJVFkgPSBcInV0aWxpdHlcIixcbiAgICBESVJFQ1RfREFNQUdFID0gXCJkaXJlY3RfZGFtYWdlXCIsXG59XG5cbmV4cG9ydCBlbnVtIGFiaWxpdHlfbXNnX3R5cGVzIHtcbiAgICBDQVNUID0gXCJjYXN0XCIsXG4gICAgQVRUQUNLID0gXCJhdHRhY2tcIixcbiAgICBVU0UgPSBcInVzZVwiLFxuICAgIFNVTU1PTiA9IFwic3VtbW9uXCIsXG4gICAgVU5MRUFTSCA9IFwidW5sZWFzaFwiLFxuICAgIERFRkVORCA9IFwiZGVmZW5kXCIsXG4gICAgSVRFTV9VTkxFQVNIID0gXCJpdGVtX3VubGVhc2hcIixcbiAgICBTRVRfREpJTk4gPSBcInNldF9kamlublwiLFxuICAgIE5PX01TRyA9IFwibm9fbXNnXCIsXG59XG5cbmV4cG9ydCBlbnVtIGFiaWxpdHlfdGFyZ2V0X3R5cGVzIHtcbiAgICBOT19UQVJHRVQgPSBcIm5vX3RhcmdldFwiLFxuICAgIEFMTFkgPSBcImFsbHlcIixcbiAgICBFTkVNWSA9IFwiZW5lbXlcIixcbiAgICBVU0VSID0gXCJ1c2VyXCIsXG59XG5cbmV4cG9ydCBlbnVtIGFiaWxpdHlfY2F0ZWdvcmllcyB7XG4gICAgUFNZTkVSR1kgPSBcInBzeW5lcmd5XCIsXG4gICAgREpJTk4gPSBcImRqaW5uXCIsXG4gICAgU1VNTU9OID0gXCJzdW1tb25cIixcbiAgICBJVEVNID0gXCJpdGVtXCIsXG4gICAgV0VBUE9OX1VOTEVBU0ggPSBcIndlYXBvbl91bmxlYXNoXCIsXG4gICAgTk9STUFMID0gXCJub3JtYWxcIixcbn1cblxuZXhwb3J0IGNvbnN0IGRpbWluaXNoaW5nX3JhdGlvcyA9IHtcbiAgICBTVEFOREFSRDoge1xuICAgICAgICAxMTogMC4xLFxuICAgICAgICA5OiAwLjIsXG4gICAgICAgIDc6IDAuNCxcbiAgICAgICAgNTogMC42LFxuICAgICAgICAzOiAwLjgsXG4gICAgICAgIDE6IDEsXG4gICAgfSxcbiAgICBTVU1NT046IHtcbiAgICAgICAgMTE6IDAuMSxcbiAgICAgICAgOTogMC4yLFxuICAgICAgICA3OiAwLjMsXG4gICAgICAgIDU6IDAuNCxcbiAgICAgICAgMzogMC43LFxuICAgICAgICAxOiAxLFxuICAgIH0sXG4gICAgRElNSU5JU0g6IHtcbiAgICAgICAgMTE6IDAuMSxcbiAgICAgICAgOTogMC4xLFxuICAgICAgICA3OiAwLjEsXG4gICAgICAgIDU6IDAuMyxcbiAgICAgICAgMzogMC41LFxuICAgICAgICAxOiAxLFxuICAgIH0sXG4gICAgU1RBVFVTOiB7XG4gICAgICAgIDExOiAwLjMsXG4gICAgICAgIDk6IDAuMyxcbiAgICAgICAgNzogMC4zLFxuICAgICAgICA1OiAwLjMsXG4gICAgICAgIDM6IDAuNixcbiAgICAgICAgMTogMSxcbiAgICB9LFxufTtcblxuZXhwb3J0IGNsYXNzIEFiaWxpdHkge1xuICAgIHB1YmxpYyBrZXlfbmFtZTogc3RyaW5nO1xuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmc7XG4gICAgcHVibGljIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgcHVibGljIHR5cGU6IGFiaWxpdHlfdHlwZXM7XG4gICAgcHVibGljIGVsZW1lbnQ6IGVsZW1lbnRzO1xuICAgIHB1YmxpYyBiYXR0bGVfdGFyZ2V0OiBzdHJpbmc7XG4gICAgcHVibGljIHJhbmdlOiBudW1iZXI7XG4gICAgcHVibGljIHBwX2Nvc3Q6IG51bWJlcjtcbiAgICBwdWJsaWMgYWJpbGl0eV9wb3dlcjogbnVtYmVyO1xuICAgIHB1YmxpYyBlZmZlY3RzX291dHNpZGVfYmF0dGxlOiBib29sZWFuO1xuICAgIHB1YmxpYyBpc19iYXR0bGVfYWJpbGl0eTogYm9vbGVhbjtcbiAgICBwdWJsaWMgaXNfZmllbGRfcHN5bmVyZ3k6IGJvb2xlYW47XG4gICAgcHVibGljIGVmZmVjdHM6IGFueTtcbiAgICBwdWJsaWMgYWJpbGl0eV9jYXRlZ29yeTogYWJpbGl0eV9jYXRlZ29yaWVzO1xuICAgIHB1YmxpYyBiYXR0bGVfYW5pbWF0aW9uX2tleTogc3RyaW5nO1xuICAgIHB1YmxpYyBwcmlvcml0eV9tb3ZlOiBib29sZWFuO1xuICAgIHB1YmxpYyBoYXNfY3JpdGljYWw6IGJvb2xlYW47XG4gICAgcHVibGljIGNyaXRfbXVsdF9mYWN0b3I6IG51bWJlcjtcbiAgICBwdWJsaWMgY2FuX3N3aXRjaF90b191bmxlYXNoOiBib29sZWFuO1xuICAgIHB1YmxpYyBjYW5fYmVfZXZhZGVkOiBib29sZWFuO1xuICAgIHB1YmxpYyB1c2VfZGltaW5pc2hpbmdfcmF0aW86IGJvb2xlYW47XG4gICAgcHVibGljIG1zZ190eXBlOiBhYmlsaXR5X21zZ190eXBlcztcbiAgICBwdWJsaWMgYWZmZWN0c19wcDogYm9vbGVhbjtcbiAgICBwdWJsaWMgaGFzX2FuaW1hdGlvbl92YXJpYXRpb246IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAga2V5X25hbWUsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICB0eXBlLFxuICAgICAgICBlbGVtZW50LFxuICAgICAgICBiYXR0bGVfdGFyZ2V0LFxuICAgICAgICByYW5nZSxcbiAgICAgICAgcHBfY29zdCxcbiAgICAgICAgYWJpbGl0eV9wb3dlcixcbiAgICAgICAgZWZmZWN0c19vdXRzaWRlX2JhdHRsZSxcbiAgICAgICAgaXNfYmF0dGxlX2FiaWxpdHksXG4gICAgICAgIGlzX2ZpZWxkX3BzeW5lcmd5LFxuICAgICAgICBlZmZlY3RzLFxuICAgICAgICBhYmlsaXR5X2NhdGVnb3J5LFxuICAgICAgICBiYXR0bGVfYW5pbWF0aW9uX2tleSxcbiAgICAgICAgcHJpb3JpdHlfbW92ZSxcbiAgICAgICAgaGFzX2NyaXRpY2FsLFxuICAgICAgICBjcml0X211bHRfZmFjdG9yLFxuICAgICAgICBjYW5fc3dpdGNoX3RvX3VubGVhc2gsXG4gICAgICAgIGNhbl9iZV9ldmFkZWQsXG4gICAgICAgIHVzZV9kaW1pbmlzaGluZ19yYXRpbyxcbiAgICAgICAgbXNnX3R5cGUsXG4gICAgICAgIGFmZmVjdHNfcHAsXG4gICAgICAgIGhhc19hbmltYXRpb25fdmFyaWF0aW9uXG4gICAgKSB7XG4gICAgICAgIHRoaXMua2V5X25hbWUgPSBrZXlfbmFtZTtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB0aGlzLmJhdHRsZV90YXJnZXQgPSBiYXR0bGVfdGFyZ2V0O1xuICAgICAgICB0aGlzLnJhbmdlID0gcmFuZ2U7XG4gICAgICAgIHRoaXMucHBfY29zdCA9IHBwX2Nvc3Q7XG4gICAgICAgIHRoaXMuYWJpbGl0eV9wb3dlciA9IGFiaWxpdHlfcG93ZXI7XG4gICAgICAgIHRoaXMuZWZmZWN0c19vdXRzaWRlX2JhdHRsZSA9IGVmZmVjdHNfb3V0c2lkZV9iYXR0bGU7XG4gICAgICAgIHRoaXMuaXNfYmF0dGxlX2FiaWxpdHkgPSBpc19iYXR0bGVfYWJpbGl0eTtcbiAgICAgICAgdGhpcy5pc19maWVsZF9wc3luZXJneSA9IGlzX2ZpZWxkX3BzeW5lcmd5O1xuICAgICAgICB0aGlzLmVmZmVjdHMgPSBlZmZlY3RzO1xuICAgICAgICB0aGlzLmFiaWxpdHlfY2F0ZWdvcnkgPSBhYmlsaXR5X2NhdGVnb3J5O1xuICAgICAgICB0aGlzLmJhdHRsZV9hbmltYXRpb25fa2V5ID0gYmF0dGxlX2FuaW1hdGlvbl9rZXk7XG4gICAgICAgIHRoaXMucHJpb3JpdHlfbW92ZSA9IHByaW9yaXR5X21vdmUgPyBwcmlvcml0eV9tb3ZlIDogZmFsc2U7XG4gICAgICAgIHRoaXMuaGFzX2NyaXRpY2FsID0gaGFzX2NyaXRpY2FsID8gaGFzX2NyaXRpY2FsIDogZmFsc2U7XG4gICAgICAgIHRoaXMuY3JpdF9tdWx0X2ZhY3RvciA9IGNyaXRfbXVsdF9mYWN0b3IgIT09IHVuZGVmaW5lZCA/IGNyaXRfbXVsdF9mYWN0b3IgOiAxO1xuICAgICAgICB0aGlzLmNhbl9zd2l0Y2hfdG9fdW5sZWFzaCA9IGNhbl9zd2l0Y2hfdG9fdW5sZWFzaCA/IGNhbl9zd2l0Y2hfdG9fdW5sZWFzaCA6IGZhbHNlO1xuICAgICAgICB0aGlzLmNhbl9iZV9ldmFkZWQgPSBjYW5fYmVfZXZhZGVkID8gY2FuX2JlX2V2YWRlZCA6IGZhbHNlO1xuICAgICAgICB0aGlzLnVzZV9kaW1pbmlzaGluZ19yYXRpbyA9IHVzZV9kaW1pbmlzaGluZ19yYXRpbyA/IHVzZV9kaW1pbmlzaGluZ19yYXRpbyA6IGZhbHNlO1xuICAgICAgICB0aGlzLm1zZ190eXBlID0gbXNnX3R5cGUgPT09IHVuZGVmaW5lZCA/IGFiaWxpdHlfbXNnX3R5cGVzLkNBU1QgOiBtc2dfdHlwZTtcbiAgICAgICAgdGhpcy5hZmZlY3RzX3BwID0gYWZmZWN0c19wcCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBhZmZlY3RzX3BwO1xuICAgICAgICB0aGlzLmhhc19hbmltYXRpb25fdmFyaWF0aW9uID0gaGFzX2FuaW1hdGlvbl92YXJpYXRpb24gPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogaGFzX2FuaW1hdGlvbl92YXJpYXRpb247XG4gICAgfVxuXG4gICAgc3RhdGljIGdldF9kaW1pbmlzaGluZ19yYXRpb3MoYWJpbGl0eV90eXBlOiBhYmlsaXR5X3R5cGVzLCB1c2VfZGltaW5pc2hpbmdfcmF0aW86IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKHVzZV9kaW1pbmlzaGluZ19yYXRpbykge1xuICAgICAgICAgICAgcmV0dXJuIGRpbWluaXNoaW5nX3JhdGlvcy5ESU1JTklTSDtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKGFiaWxpdHlfdHlwZSkge1xuICAgICAgICAgICAgY2FzZSBhYmlsaXR5X3R5cGVzLlNVTU1PTjpcbiAgICAgICAgICAgICAgICByZXR1cm4gZGltaW5pc2hpbmdfcmF0aW9zLlNVTU1PTjtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpbWluaXNoaW5nX3JhdGlvcy5TVEFOREFSRDtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBTcHJpdGVCYXNlIHtcbiAgICBwdWJsaWMga2V5X25hbWU6IHN0cmluZztcbiAgICBwdWJsaWMgYWN0aW9uczoge1xuICAgICAgICBbYWN0aW9uOiBzdHJpbmddOiB7XG4gICAgICAgICAgICBkaXJlY3Rpb25zPzogc3RyaW5nW107XG4gICAgICAgICAgICBmcmFtZV9jb3VudHM/OiBhbnk7XG4gICAgICAgICAgICBmcmFtZV9yYXRlPzoge1tkaXJlY3Rpb246IHN0cmluZ106IGFueX07XG4gICAgICAgICAgICBsb29wPzogYm9vbGVhbiB8IGJvb2xlYW5bXTtcbiAgICAgICAgICAgIHNwcml0ZXNoZWV0Pzoge3Nwcml0ZXNoZWV0X2ltYWdlX3VybDogc3RyaW5nOyBzcHJpdGVzaGVldF9qc29uX3VybDogc3RyaW5nfTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHB1YmxpYyBhbmltYXRpb25zOiB7W2FjdGlvbjogc3RyaW5nXToge1thbmltYXRpb246IHN0cmluZ106IHN0cmluZ1tdfX07XG5cbiAgICBjb25zdHJ1Y3RvcihrZXlfbmFtZSwgYWN0aW9ucykge1xuICAgICAgICB0aGlzLmtleV9uYW1lID0ga2V5X25hbWU7XG4gICAgICAgIHRoaXMuYWN0aW9ucyA9IHt9O1xuICAgICAgICB0aGlzLmFuaW1hdGlvbnMgPSB7fTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhY3Rpb25zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbnNbYWN0aW9uc1tpXV0gPSB7fTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldEFjdGlvbkRpcmVjdGlvbnMoYWN0aW9uLCBkaXJlY3Rpb25zLCBmcmFtZV9jb3VudHMpIHtcbiAgICAgICAgdGhpcy5hY3Rpb25zW2FjdGlvbl0uZGlyZWN0aW9ucyA9IG5ldyBBcnJheShkaXJlY3Rpb25zLmxlbmd0aCk7XG4gICAgICAgIHRoaXMuYWN0aW9uc1thY3Rpb25dLmZyYW1lX2NvdW50cyA9IG5ldyBBcnJheShkaXJlY3Rpb25zLmxlbmd0aCk7XG4gICAgICAgIGNvbnN0IGZyYW1lX2NvdW50X2lzX2FycmF5ID0gQXJyYXkuaXNBcnJheShmcmFtZV9jb3VudHMpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpcmVjdGlvbnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGZyYW1lX2NvdW50ID0gZnJhbWVfY291bnRfaXNfYXJyYXkgPyBmcmFtZV9jb3VudHNbaV0gOiBmcmFtZV9jb3VudHM7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbnNbYWN0aW9uXS5kaXJlY3Rpb25zW2ldID0gZGlyZWN0aW9uc1tpXTtcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uc1thY3Rpb25dLmZyYW1lX2NvdW50c1tpXSA9IGZyYW1lX2NvdW50O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0QWN0aW9uRnJhbWVSYXRlKGFjdGlvbiwgZnJhbWVfcmF0ZSkge1xuICAgICAgICB0aGlzLmFjdGlvbnNbYWN0aW9uXS5mcmFtZV9yYXRlID0ge307XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5hY3Rpb25zW2FjdGlvbl0uZGlyZWN0aW9ucy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgZGlyZWN0aW9uID0gdGhpcy5hY3Rpb25zW2FjdGlvbl0uZGlyZWN0aW9uc1tpXTtcbiAgICAgICAgICAgIGxldCB0aGlzX2ZyYW1lX3JhdGU7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShmcmFtZV9yYXRlKSkge1xuICAgICAgICAgICAgICAgIGlmIChmcmFtZV9yYXRlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzX2ZyYW1lX3JhdGUgPSBmcmFtZV9yYXRlWzBdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNfZnJhbWVfcmF0ZSA9IGZyYW1lX3JhdGVbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzX2ZyYW1lX3JhdGUgPSBmcmFtZV9yYXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hY3Rpb25zW2FjdGlvbl0uZnJhbWVfcmF0ZVtkaXJlY3Rpb25dID0gdGhpc19mcmFtZV9yYXRlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0QWN0aW9uTG9vcChhY3Rpb24sIGxvb3ApIHtcbiAgICAgICAgdGhpcy5hY3Rpb25zW2FjdGlvbl0ubG9vcCA9IGxvb3A7XG4gICAgfVxuXG4gICAgc2V0QWN0aW9uU3ByaXRlc2hlZXQoYWN0aW9uLCBzcHJpdGVzaGVldF9pbWFnZV91cmwsIHNwcml0ZXNoZWV0X2pzb25fdXJsKSB7XG4gICAgICAgIHRoaXMuYWN0aW9uc1thY3Rpb25dLnNwcml0ZXNoZWV0ID0ge1xuICAgICAgICAgICAgc3ByaXRlc2hlZXRfaW1hZ2VfdXJsOiBzcHJpdGVzaGVldF9pbWFnZV91cmwsXG4gICAgICAgICAgICBzcHJpdGVzaGVldF9qc29uX3VybDogc3ByaXRlc2hlZXRfanNvbl91cmwsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgbG9hZFNwcml0ZXNoZWV0cyhnYW1lLCBmb3JjZV9sb2FkLCBvbl9sb2FkX2NvbXBsZXRlKSB7XG4gICAgICAgIGZvciAobGV0IGFjdGlvbiBpbiB0aGlzLmFjdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IHNwcml0ZXNoZWV0ID0gdGhpcy5hY3Rpb25zW2FjdGlvbl0uc3ByaXRlc2hlZXQ7XG4gICAgICAgICAgICBjb25zdCBhY3Rpb25fa2V5ID0gdGhpcy5nZXRBY3Rpb25LZXkoYWN0aW9uKTtcbiAgICAgICAgICAgIGxldCBsb2FkZXIgPSBnYW1lLmxvYWQuYXRsYXNKU09OSGFzaChcbiAgICAgICAgICAgICAgICBhY3Rpb25fa2V5LFxuICAgICAgICAgICAgICAgIHNwcml0ZXNoZWV0LnNwcml0ZXNoZWV0X2ltYWdlX3VybCxcbiAgICAgICAgICAgICAgICBzcHJpdGVzaGVldC5zcHJpdGVzaGVldF9qc29uX3VybFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChmb3JjZV9sb2FkKSB7XG4gICAgICAgICAgICAgICAgbG9hZGVyLm9uTG9hZENvbXBsZXRlLmFkZE9uY2Uob25fbG9hZF9jb21wbGV0ZSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgZ2FtZS5sb2FkLnN0YXJ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZW5lcmF0ZUZyYW1lTmFtZXMoYWN0aW9uLCBkaXJlY3Rpb24sIHN0YXJ0LCBzdG9wLCBzdWZmaXgsIHplcm9QYWQpIHtcbiAgICAgICAgaWYgKCEoYWN0aW9uIGluIHRoaXMuYW5pbWF0aW9ucykpIHtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uc1thY3Rpb25dID0ge307XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hbmltYXRpb25zW2FjdGlvbl1bZGlyZWN0aW9uXSA9IFBoYXNlci5BbmltYXRpb24uZ2VuZXJhdGVGcmFtZU5hbWVzKFxuICAgICAgICAgICAgYCR7YWN0aW9ufS8ke2RpcmVjdGlvbn0vYCxcbiAgICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgICAgc3RvcCxcbiAgICAgICAgICAgIHN1ZmZpeCxcbiAgICAgICAgICAgIHplcm9QYWRcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBzZXRBbmltYXRpb24oc3ByaXRlOiBQaGFzZXIuU3ByaXRlLCBhY3Rpb24pIHtcbiAgICAgICAgY29uc3QgZGlyZWN0aW9ucyA9IHRoaXMuYWN0aW9uc1thY3Rpb25dLmRpcmVjdGlvbnM7XG4gICAgICAgIGNvbnN0IGxvb3AgPSB0aGlzLmFjdGlvbnNbYWN0aW9uXS5sb29wID09PSB1bmRlZmluZWQgPyB0cnVlIDogdGhpcy5hY3Rpb25zW2FjdGlvbl0ubG9vcDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaXJlY3Rpb25zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSBkaXJlY3Rpb25zW2ldO1xuICAgICAgICAgICAgY29uc3QgZnJhbWVfcmF0ZSA9IHRoaXMuYWN0aW9uc1thY3Rpb25dLmZyYW1lX3JhdGVbZGlyZWN0aW9uXTtcbiAgICAgICAgICAgIGNvbnN0IGFuaW1fa2V5ID0gdGhpcy5nZXRBbmltYXRpb25LZXkoYWN0aW9uLCBkaXJlY3Rpb24pO1xuICAgICAgICAgICAgc3ByaXRlLmFuaW1hdGlvbnMuYWRkKFxuICAgICAgICAgICAgICAgIGFuaW1fa2V5LFxuICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uc1thY3Rpb25dW2RpcmVjdGlvbl0sXG4gICAgICAgICAgICAgICAgZnJhbWVfcmF0ZSxcbiAgICAgICAgICAgICAgICBBcnJheS5pc0FycmF5KGxvb3ApID8gbG9vcFtpXSA6IGxvb3AsXG4gICAgICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZW5lcmF0ZUFsbEZyYW1lcygpIHtcbiAgICAgICAgZm9yIChsZXQgYWN0aW9uIGluIHRoaXMuYWN0aW9ucykge1xuICAgICAgICAgICAgY29uc3QgZGlyZWN0aW9ucyA9IHRoaXMuYWN0aW9uc1thY3Rpb25dLmRpcmVjdGlvbnM7XG4gICAgICAgICAgICBjb25zdCBmcmFtZV9jb3VudHMgPSB0aGlzLmFjdGlvbnNbYWN0aW9uXS5mcmFtZV9jb3VudHM7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpcmVjdGlvbnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSBkaXJlY3Rpb25zW2ldO1xuICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVGcmFtZU5hbWVzKGFjdGlvbiwgZGlyZWN0aW9uLCAwLCBmcmFtZV9jb3VudHNbaV0gLSAxLCBcIlwiLCAyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldEZyYW1lTmFtZShhY3Rpb24sIGRpcmVjdGlvbiwgaW5kZXgpIHtcbiAgICAgICAgY29uc3QgZm9ybWF0dGVkX2luZGV4ID0gaW5kZXgudG9Mb2NhbGVTdHJpbmcoXCJlbi1VU1wiLCB7bWluaW11bUludGVnZXJEaWdpdHM6IDIsIHVzZUdyb3VwaW5nOiBmYWxzZX0pO1xuICAgICAgICByZXR1cm4gYCR7YWN0aW9ufS8ke2RpcmVjdGlvbn0vJHtmb3JtYXR0ZWRfaW5kZXh9YDtcbiAgICB9XG5cbiAgICBnZXRBY3Rpb25LZXkoYWN0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmtleV9uYW1lICsgXCJfXCIgKyBhY3Rpb247XG4gICAgfVxuXG4gICAgZ2V0QW5pbWF0aW9uS2V5KGFjdGlvbiwgZGlyZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBhY3Rpb24gKyBcIl9cIiArIGRpcmVjdGlvbjtcbiAgICB9XG5cbiAgICBnZXRTcHJpdGVBY3Rpb24oc3ByaXRlKSB7XG4gICAgICAgIHJldHVybiBzcHJpdGUua2V5LnNwbGl0KFwiX1wiKVsxXTtcbiAgICB9XG59XG4iLCJpbXBvcnQge1dpbmRvd30gZnJvbSBcIi4uL1dpbmRvd1wiO1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQge0dvbGRlblN1bn0gZnJvbSBcIi4uL0dvbGRlblN1blwiO1xuaW1wb3J0IHtNYWluQ2hhcn0gZnJvbSBcIi4uL01haW5DaGFyXCI7XG5pbXBvcnQge0N1cnNvck1hbmFnZXIsIFBvaW50VmFyaWFudHN9IGZyb20gXCIuLi91dGlscy9DdXJzb3JNYW5hZ2VyXCI7XG5cbmNvbnN0IE1BWF9QRVJfTElORSA9IDQ7XG5cbmNvbnN0IFdJTl9YID0gMDtcbmNvbnN0IFdJTl9ZID0gMTEyO1xuY29uc3QgV0lOX1dJRFRIID0gMTAwO1xuY29uc3QgV0lOX0hFSUdIVCA9IDIwO1xuXG5jb25zdCBXSU5fWDIgPSAwO1xuY29uc3QgV0lOX1kyID0gMDtcbmNvbnN0IFdJTl9XSURUSDIgPSAxMDA7XG5jb25zdCBXSU5fSEVJR0hUMiA9IDM2O1xuXG5jb25zdCBDSEFSX0dST1VQX1ggPSAxNjtcbmNvbnN0IENIQVJfR1JPVVBfWSA9IDEyODtcblxuY29uc3QgQ0hBUl9HUk9VUF9YMiA9IDE2O1xuY29uc3QgQ0hBUl9HUk9VUF9ZMiA9IDI4O1xuXG5jb25zdCBHQVBfU0laRSA9IDI0O1xuY29uc3QgU0hJRlRfWCA9IDE2O1xuY29uc3QgU0hJRlRfWSA9IDMyO1xuXG5jb25zdCBDVVJTT1JfWCA9IDA7XG5jb25zdCBDVVJTT1JfWSA9IDExODtcblxuY29uc3QgQ1VSU09SX1gyID0gMDtcbmNvbnN0IENVUlNPUl9ZMiA9IDIyO1xuXG5jb25zdCBBUlJPV19HUk9VUF9YID0gOTY7XG5jb25zdCBBUlJPV19HUk9VUF9ZID0gMTAwO1xuY29uc3QgVVBfQVJST1dfWCA9IDE2O1xuY29uc3QgVVBfQVJST1dfWSA9IDIwO1xuY29uc3QgRE9XTl9BUlJPV19YID0gMDtcbmNvbnN0IERPV05fQVJST1dfWSA9IDI0O1xuY29uc3QgQVJST1dfWV9ESUZGID0gODtcblxuY29uc3QgQVJST1dfR1JPVVBfWDIgPSA5MjtcbmNvbnN0IEFSUk9XX0dST1VQX1kyID0gLTQ7XG5cbmNvbnN0IE1FTlVfU0VMRUNURURfWV9TSElGVCA9IDQ7XG5jb25zdCBTRVBBUkFUT1JfWCA9IDQ7XG5jb25zdCBTRVBBUkFUT1JfWSA9IDI3O1xuY29uc3QgU0VQQVJBVE9SX0xFTkdUSCA9IDk2O1xuXG5leHBvcnQgZW51bSBDaGFyc01lbnVNb2RlcyB7XG4gICAgU0hPUCxcbiAgICBNRU5VLFxufVxuY29uc3QgU0hPUF9NT0RFID0gXCJzaG9wXCI7XG5jb25zdCBNRU5VX01PREUgPSBcIm1lbnVcIjtcblxuY29uc3QgQVJST1dfVFdFRU5fVElNRSA9IFBoYXNlci5UaW1lci5RVUFSVEVSID4+IDE7XG5cbmV4cG9ydCBjbGFzcyBDaGFyc01lbnUge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgZGF0YTogR29sZGVuU3VuO1xuICAgIHB1YmxpYyBvbl9jaGFuZ2U6IEZ1bmN0aW9uO1xuXG4gICAgcHVibGljIHdpbmRvdzogV2luZG93O1xuICAgIHB1YmxpYyBjaGFyX2dyb3VwOiBQaGFzZXIuR3JvdXA7XG4gICAgcHVibGljIGFycm93X2dyb3VwOiBQaGFzZXIuR3JvdXA7XG4gICAgcHVibGljIHVwX2Fycm93OiBQaGFzZXIuU3ByaXRlO1xuICAgIHB1YmxpYyBkb3duX2Fycm93OiBQaGFzZXIuU3ByaXRlO1xuXG4gICAgcHVibGljIGFycm93X3R3ZWVuczogUGhhc2VyLlR3ZWVuW107XG4gICAgcHVibGljIGxpbmVzOiBNYWluQ2hhcltdW107XG4gICAgcHVibGljIGNoYXJfc3ByaXRlczogUGhhc2VyLlNwcml0ZVtdO1xuICAgIHB1YmxpYyBjdXJyZW50X2xpbmU6IG51bWJlcjtcbiAgICBwdWJsaWMgc2VsZWN0ZWRfaW5kZXg6IG51bWJlcjtcbiAgICBwdWJsaWMgaXNfYWN0aXZlOiBib29sZWFuO1xuICAgIHB1YmxpYyBpc19vcGVuOiBib29sZWFuO1xuICAgIHB1YmxpYyBtb2RlOiBDaGFyc01lbnVNb2RlcztcblxuICAgIGNvbnN0cnVjdG9yKGdhbWU6IFBoYXNlci5HYW1lLCBkYXRhOiBHb2xkZW5TdW4sIG9uX2NoYW5nZTogRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5vbl9jaGFuZ2UgPSBvbl9jaGFuZ2U7XG5cbiAgICAgICAgdGhpcy53aW5kb3cgPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgV0lOX1gsIFdJTl9ZLCBXSU5fV0lEVEgsIFdJTl9IRUlHSFQpO1xuICAgICAgICB0aGlzLmNoYXJfZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XG4gICAgICAgIHRoaXMuY2hhcl9ncm91cC54ID0gQ0hBUl9HUk9VUF9YIC0gU0hJRlRfWDtcbiAgICAgICAgdGhpcy5jaGFyX2dyb3VwLnkgPSBDSEFSX0dST1VQX1kgLSBTSElGVF9ZO1xuICAgICAgICB0aGlzLmNoYXJfZ3JvdXAuYWxwaGEgPSAxO1xuXG4gICAgICAgIHRoaXMuYXJyb3dfZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XG4gICAgICAgIHRoaXMuYXJyb3dfZ3JvdXAueCA9IEFSUk9XX0dST1VQX1g7XG4gICAgICAgIHRoaXMuYXJyb3dfZ3JvdXAueSA9IEFSUk9XX0dST1VQX1k7XG5cbiAgICAgICAgdGhpcy51cF9hcnJvdyA9IHRoaXMuYXJyb3dfZ3JvdXAuY3JlYXRlKFVQX0FSUk9XX1gsIFVQX0FSUk9XX1ksIFwiZ3JlZW5fYXJyb3dcIik7XG4gICAgICAgIHRoaXMudXBfYXJyb3cucm90YXRpb24gPSBNYXRoLlBJO1xuICAgICAgICB0aGlzLmRvd25fYXJyb3cgPSB0aGlzLmFycm93X2dyb3VwLmNyZWF0ZShET1dOX0FSUk9XX1gsIERPV05fQVJST1dfWSwgXCJncmVlbl9hcnJvd1wiKTtcbiAgICAgICAgdGhpcy51cF9hcnJvdy5hbHBoYSA9IDA7XG4gICAgICAgIHRoaXMuZG93bl9hcnJvdy5hbHBoYSA9IDA7XG5cbiAgICAgICAgdGhpcy5hcnJvd190d2VlbnMgPSBbXTtcblxuICAgICAgICB0aGlzLmxpbmVzID0gW107XG4gICAgICAgIHRoaXMuY2hhcl9zcHJpdGVzID0gW107XG4gICAgICAgIHRoaXMuY3VycmVudF9saW5lID0gMDtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9pbmRleCA9IG51bGw7XG4gICAgICAgIHRoaXMuaXNfYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNfb3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLm1vZGUgPSBudWxsO1xuICAgIH1cblxuICAgIGNoZWNrX21vZGUoKSB7XG4gICAgICAgIGlmICh0aGlzLm1vZGUgPT09IENoYXJzTWVudU1vZGVzLlNIT1ApIHtcbiAgICAgICAgICAgIHRoaXMud2luZG93LnVwZGF0ZV9zaXplKHt3aWR0aDogV0lOX1dJRFRILCBoZWlnaHQ6IFdJTl9IRUlHSFR9KTtcbiAgICAgICAgICAgIHRoaXMud2luZG93LnVwZGF0ZV9wb3NpdGlvbih7eDogV0lOX1gsIHk6IFdJTl9ZfSk7XG5cbiAgICAgICAgICAgIHRoaXMuY2hhcl9ncm91cC54ID0gQ0hBUl9HUk9VUF9YIC0gU0hJRlRfWCArIHRoaXMuZ2FtZS5jYW1lcmEueDtcbiAgICAgICAgICAgIHRoaXMuY2hhcl9ncm91cC55ID0gQ0hBUl9HUk9VUF9ZIC0gU0hJRlRfWSArIHRoaXMuZ2FtZS5jYW1lcmEueTtcbiAgICAgICAgICAgIHRoaXMuYXJyb3dfZ3JvdXAueCA9IEFSUk9XX0dST1VQX1ggKyB0aGlzLmdhbWUuY2FtZXJhLng7XG4gICAgICAgICAgICB0aGlzLmFycm93X2dyb3VwLnkgPSBBUlJPV19HUk9VUF9ZICsgdGhpcy5nYW1lLmNhbWVyYS55O1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMubW9kZSA9PT0gQ2hhcnNNZW51TW9kZXMuTUVOVSkge1xuICAgICAgICAgICAgdGhpcy53aW5kb3cudXBkYXRlX3NpemUoe3dpZHRoOiBXSU5fV0lEVEgyLCBoZWlnaHQ6IFdJTl9IRUlHSFQyfSk7XG4gICAgICAgICAgICB0aGlzLndpbmRvdy51cGRhdGVfcG9zaXRpb24oe3g6IFdJTl9YMiwgeTogV0lOX1kyfSk7XG5cbiAgICAgICAgICAgIHRoaXMuY2hhcl9ncm91cC54ID0gQ0hBUl9HUk9VUF9YMiAtIFNISUZUX1ggKyB0aGlzLmdhbWUuY2FtZXJhLng7XG4gICAgICAgICAgICB0aGlzLmNoYXJfZ3JvdXAueSA9IENIQVJfR1JPVVBfWTIgLSBTSElGVF9ZICsgdGhpcy5nYW1lLmNhbWVyYS55O1xuICAgICAgICAgICAgdGhpcy5hcnJvd19ncm91cC54ID0gQVJST1dfR1JPVVBfWDIgKyB0aGlzLmdhbWUuY2FtZXJhLng7XG4gICAgICAgICAgICB0aGlzLmFycm93X2dyb3VwLnkgPSBBUlJPV19HUk9VUF9ZMiArIHRoaXMuZ2FtZS5jYW1lcmEueTtcblxuICAgICAgICAgICAgdGhpcy53aW5kb3cuZHJhd19zZXBhcmF0b3IoU0VQQVJBVE9SX1gsIFNFUEFSQVRPUl9ZLCBTRVBBUkFUT1JfWCArIFNFUEFSQVRPUl9MRU5HVEgsIFNFUEFSQVRPUl9ZLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKkhpZGVzIG9yIHNob3dzIHNwZWNpZmljIGFycm93c1xuICAgIFxuICAgIElucHV0OiB1cCwgZG93biBbYm9vbGVhbl0gLSBJZiB0cnVlLCBzaG93cyB1cC9kb3duIGFycm93Ki9cbiAgICBzZXRfYXJyb3dzKHVwOiBib29sZWFuID0gZmFsc2UsIGRvd246IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICB0aGlzLnVwX2Fycm93LnggPSBVUF9BUlJPV19YO1xuICAgICAgICB0aGlzLnVwX2Fycm93LnkgPSBVUF9BUlJPV19ZO1xuICAgICAgICB0aGlzLmRvd25fYXJyb3cueCA9IERPV05fQVJST1dfWDtcbiAgICAgICAgdGhpcy5kb3duX2Fycm93LnkgPSBET1dOX0FSUk9XX1k7XG4gICAgICAgIGlmICh1cCkgdGhpcy51cF9hcnJvdy5hbHBoYSA9IDE7XG4gICAgICAgIGVsc2UgdGhpcy51cF9hcnJvdy5hbHBoYSA9IDA7XG5cbiAgICAgICAgaWYgKGRvd24pIHRoaXMuZG93bl9hcnJvdy5hbHBoYSA9IDE7XG4gICAgICAgIGVsc2UgdGhpcy5kb3duX2Fycm93LmFscGhhID0gMDtcbiAgICB9XG5cbiAgICAvKkNoZWNrcyB3aGljaCBhcnJvd3MgdG8gc2hvdyBvciBoaWRlKi9cbiAgICBjaGVja19hcnJvd3MoKSB7XG4gICAgICAgIGxldCB1cCA9IGZhbHNlO1xuICAgICAgICBsZXQgZG93biA9IGZhbHNlO1xuXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRfbGluZSA8IHRoaXMubGluZXMubGVuZ3RoIC0gMSkgZG93biA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRfbGluZSA+IDApIHVwID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLnNldF9hcnJvd3ModXAsIGRvd24pO1xuICAgICAgICB0aGlzLmluaXRfYXJyb3dfdHdlZW5zKCk7XG4gICAgICAgIHRoaXMuZ2FtZS53b3JsZC5icmluZ1RvVG9wKHRoaXMuYXJyb3dfZ3JvdXApO1xuICAgIH1cblxuICAgIC8qU3RhcnRzIHRoZSBhcnJvdyBhbmltYXRpb25zKi9cbiAgICBpbml0X2Fycm93X3R3ZWVucygpIHtcbiAgICAgICAgbGV0IHVwX3R3ZWVuID0gdGhpcy5nYW1lLmFkZFxuICAgICAgICAgICAgLnR3ZWVuKHRoaXMudXBfYXJyb3cpXG4gICAgICAgICAgICAudG8oe3k6IFVQX0FSUk9XX1kgLSBBUlJPV19ZX0RJRkZ9LCBBUlJPV19UV0VFTl9USU1FLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lKVxuICAgICAgICAgICAgLnRvKHt5OiBVUF9BUlJPV19ZfSwgQVJST1dfVFdFRU5fVElNRSwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSlcbiAgICAgICAgICAgIC5sb29wKCk7XG4gICAgICAgIHRoaXMuYXJyb3dfdHdlZW5zLnB1c2godXBfdHdlZW4pO1xuXG4gICAgICAgIGxldCBkb3duX3R3ZWVuID0gdGhpcy5nYW1lLmFkZFxuICAgICAgICAgICAgLnR3ZWVuKHRoaXMuZG93bl9hcnJvdylcbiAgICAgICAgICAgIC50byh7eTogRE9XTl9BUlJPV19ZICsgQVJST1dfWV9ESUZGfSwgQVJST1dfVFdFRU5fVElNRSwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSlcbiAgICAgICAgICAgIC50byh7eTogRE9XTl9BUlJPV19ZfSwgQVJST1dfVFdFRU5fVElNRSwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSlcbiAgICAgICAgICAgIC5sb29wKCk7XG4gICAgICAgIHRoaXMuYXJyb3dfdHdlZW5zLnB1c2goZG93bl90d2Vlbik7XG5cbiAgICAgICAgdXBfdHdlZW4uc3RhcnQoKTtcbiAgICAgICAgZG93bl90d2Vlbi5zdGFydCgpO1xuICAgIH1cblxuICAgIC8qQ2xlYXJzIHRoZSBhcnJvdyBhbmltYXRpb25zKi9cbiAgICBjbGVhcl9hcnJvd190d2VlbnMoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5hcnJvd190d2VlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS50d2VlbnMucmVtb3ZlKHRoaXMuYXJyb3dfdHdlZW5zLnBvcCgpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldF9jaGFycygpIHtcbiAgICAgICAgdGhpcy5jaGFyX3Nwcml0ZXMgPSBbXTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGluZXNbdGhpcy5jdXJyZW50X2xpbmVdLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBsZXQgY2hhciA9IHRoaXMubGluZXNbdGhpcy5jdXJyZW50X2xpbmVdW2ldO1xuICAgICAgICAgICAgbGV0IHNwcml0ZTogUGhhc2VyLlNwcml0ZSA9IG51bGw7XG5cbiAgICAgICAgICAgIGxldCBkZWFkX2lkbGUgPSB0aGlzLmNoYXJfZ3JvdXAuY2hpbGRyZW4uZmlsdGVyKChzOiBQaGFzZXIuU3ByaXRlKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHMuYWxpdmUgPT09IGZhbHNlICYmIHMua2V5ID09PSBjaGFyLnNwcml0ZV9iYXNlLmdldEFjdGlvbktleSh1dGlscy5iYXNlX2FjdGlvbnMuSURMRSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGRlYWRfaWRsZS5sZW5ndGggPiAwKSBzcHJpdGUgPSAoZGVhZF9pZGxlWzBdIGFzIFBoYXNlci5TcHJpdGUpLnJlc2V0KGkgKiBHQVBfU0laRSwgMCk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgc3ByaXRlID0gdGhpcy5jaGFyX2dyb3VwLmNyZWF0ZShcbiAgICAgICAgICAgICAgICAgICAgaSAqIEdBUF9TSVpFLFxuICAgICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICBjaGFyLnNwcml0ZV9iYXNlLmdldEFjdGlvbktleSh1dGlscy5iYXNlX2FjdGlvbnMuSURMRSlcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBjaGFyLnNwcml0ZV9iYXNlLnNldEFuaW1hdGlvbihzcHJpdGUsIHV0aWxzLmJhc2VfYWN0aW9ucy5JRExFKTtcbiAgICAgICAgICAgIHNwcml0ZS5hbmltYXRpb25zLnBsYXkoXG4gICAgICAgICAgICAgICAgY2hhci5zcHJpdGVfYmFzZS5nZXRBbmltYXRpb25LZXkoXG4gICAgICAgICAgICAgICAgICAgIHV0aWxzLmJhc2VfYWN0aW9ucy5JRExFLFxuICAgICAgICAgICAgICAgICAgICB1dGlscy5yZXZlcnNlX2RpcmVjdGlvbnNbdXRpbHMuZGlyZWN0aW9ucy5kb3duXVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLmNoYXJfc3ByaXRlcy5wdXNoKHNwcml0ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBtYWtlX2xpbmVzKCkge1xuICAgICAgICBsZXQgcGFydHlfbGVuZ3RoID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzLmxlbmd0aDtcbiAgICAgICAgbGV0IGxpbmVfbnVtYmVyID1cbiAgICAgICAgICAgIHBhcnR5X2xlbmd0aCAlIE1BWF9QRVJfTElORSA9PT0gMFxuICAgICAgICAgICAgICAgID8gKHBhcnR5X2xlbmd0aCAvIE1BWF9QRVJfTElORSkgfCAwXG4gICAgICAgICAgICAgICAgOiAoKHBhcnR5X2xlbmd0aCAvIE1BWF9QRVJfTElORSkgfCAwKSArIDE7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lX251bWJlcjsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgY2hhcnMgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IG4gPSBpICogTUFYX1BFUl9MSU5FOyBuIDwgKGkgKyAxKSAqIE1BWF9QRVJfTElORTsgbisrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbbl0pIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNoYXJzLnB1c2godGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW25dKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubGluZXNbaV0gPSBjaGFycztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNoYW5nZV9saW5lKGxpbmU6IG51bWJlciwgZm9yY2VfaW5kZXg/OiBudW1iZXIsIG5vX2N1cnNvcj86IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVycy5sZW5ndGggPCBNQVhfUEVSX0xJTkUgKiBsaW5lKSByZXR1cm47XG5cbiAgICAgICAgdGhpcy5jbGVhcl9hcnJvd190d2VlbnMoKTtcbiAgICAgICAgdGhpcy51bnNldF9jaGFyYWN0ZXIodGhpcy5zZWxlY3RlZF9pbmRleCk7XG5cbiAgICAgICAgdGhpcy5jdXJyZW50X2xpbmUgPSBsaW5lO1xuXG4gICAgICAgIGlmIChmb3JjZV9pbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2luZGV4ID0gZm9yY2VfaW5kZXg7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zZWxlY3RlZF9pbmRleCAhPT0gbnVsbCAmJiB0aGlzLnNlbGVjdGVkX2luZGV4ID49IHRoaXMubGluZXNbdGhpcy5jdXJyZW50X2xpbmVdLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9pbmRleCA9IHRoaXMubGluZXNbdGhpcy5jdXJyZW50X2xpbmVdLmxlbmd0aCAtIDE7XG4gICAgICAgIH1cblxuICAgICAgICB1dGlscy5raWxsX2FsbF9zcHJpdGVzKHRoaXMuY2hhcl9ncm91cCk7XG4gICAgICAgIHRoaXMuc2V0X2NoYXJzKCk7XG4gICAgICAgIHRoaXMuY2hlY2tfYXJyb3dzKCk7XG4gICAgICAgIHRoaXMuc2VsZWN0X2NoYXIodGhpcy5zZWxlY3RlZF9pbmRleCwgbm9fY3Vyc29yKTtcbiAgICB9XG5cbiAgICBuZXh0X2xpbmUoZm9yY2VfaW5kZXg/OiBudW1iZXIsIG5vX2N1cnNvcj86IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKHRoaXMubGluZXMubGVuZ3RoID09PSAxIHx8IHRoaXMuY3VycmVudF9saW5lICsgMSA9PT0gdGhpcy5saW5lcy5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5jdXJyZW50X2xpbmUgKyAxO1xuXG4gICAgICAgIHRoaXMuY2hhbmdlX2xpbmUoaW5kZXgsIGZvcmNlX2luZGV4LCBub19jdXJzb3IpO1xuICAgIH1cblxuICAgIHByZXZpb3VzX2xpbmUoZm9yY2VfaW5kZXg/OiBudW1iZXIsIG5vX2N1cnNvcj86IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKHRoaXMubGluZXMubGVuZ3RoID09PSAxIHx8IHRoaXMuY3VycmVudF9saW5lIC0gMSA8IDApIHJldHVybjtcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5jdXJyZW50X2xpbmUgLSAxO1xuXG4gICAgICAgIHRoaXMuY2hhbmdlX2xpbmUoaW5kZXgsIGZvcmNlX2luZGV4LCBub19jdXJzb3IpO1xuICAgIH1cblxuICAgIHNldF9jaGFyYWN0ZXIoaW5kZXg6IG51bWJlcikge1xuICAgICAgICBpZiAodGhpcy5tb2RlID09PSBDaGFyc01lbnVNb2Rlcy5TSE9QKSB7XG4gICAgICAgICAgICAvL3NldCBydW4gYW5pbWF0aW9uIGZvciBuZXcgY2hhcmFjdGVyO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMubW9kZSA9PT0gQ2hhcnNNZW51TW9kZXMuTUVOVSkge1xuICAgICAgICAgICAgdGhpcy5jaGFyX3Nwcml0ZXNbaW5kZXhdLnkgPSBNRU5VX1NFTEVDVEVEX1lfU0hJRlQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1bnNldF9jaGFyYWN0ZXIoaW5kZXg6IG51bWJlcikge1xuICAgICAgICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCB8fCBpbmRleCA9PT0gbnVsbCkgcmV0dXJuO1xuXG4gICAgICAgIGlmICh0aGlzLm1vZGUgPT09IENoYXJzTWVudU1vZGVzLlNIT1ApIHtcbiAgICAgICAgICAgIC8vdW5zZXQgcnVuIGFuaW1hdGlvbiBmb3IgbmV3IGNoYXJhY3RlcjtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLm1vZGUgPT09IENoYXJzTWVudU1vZGVzLk1FTlUpIHtcbiAgICAgICAgICAgIHRoaXMuY2hhcl9zcHJpdGVzW2luZGV4XS55ID0gMDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNlbGVjdF9jaGFyKGluZGV4PzogbnVtYmVyLCBub19jdXJzb3I/OiBib29sZWFuLCBzaWxlbnQ/OiBib29sZWFuKSB7XG4gICAgICAgIGlmIChpbmRleCA9PT0gdW5kZWZpbmVkKSBpbmRleCA9IHRoaXMuc2VsZWN0ZWRfaW5kZXg7XG5cbiAgICAgICAgY29uc3Qgb25fbW92ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudW5zZXRfY2hhcmFjdGVyKHRoaXMuc2VsZWN0ZWRfaW5kZXgpO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9pbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgdGhpcy5zZXRfY2hhcmFjdGVyKHRoaXMuc2VsZWN0ZWRfaW5kZXgpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5vbl9jaGFuZ2UgJiYgIXNpbGVudCkge1xuICAgICAgICAgICAgICAgIGxldCBjID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuY3VycmVudF9saW5lICogTUFYX1BFUl9MSU5FICsgdGhpcy5zZWxlY3RlZF9pbmRleF07XG4gICAgICAgICAgICAgICAgdGhpcy5vbl9jaGFuZ2UoYy5rZXlfbmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKCFub19jdXJzb3IpIHRoaXMubW92ZV9jdXJzb3IoaW5kZXgsIG9uX21vdmUpO1xuICAgICAgICBlbHNlIG9uX21vdmUoKTtcbiAgICB9XG5cbiAgICBuZXh0X2NoYXIobm9fY3Vyc29yPzogYm9vbGVhbikge1xuICAgICAgICBpZiAodGhpcy5saW5lc1t0aGlzLmN1cnJlbnRfbGluZV0ubGVuZ3RoID09PSAxICYmIHRoaXMubGluZXMubGVuZ3RoID09PSAxKSByZXR1cm47XG5cbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRfaW5kZXggKyAxID09PSB0aGlzLmxpbmVzW3RoaXMuY3VycmVudF9saW5lXS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRfbGluZSArIDEgPT09IHRoaXMubGluZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubGluZXMubGVuZ3RoID09PSAxKSB0aGlzLnNlbGVjdF9jaGFyKDAsIG5vX2N1cnNvcik7XG4gICAgICAgICAgICAgICAgZWxzZSB0aGlzLmNoYW5nZV9saW5lKDAsIDAsIG5vX2N1cnNvcik7XG4gICAgICAgICAgICB9IGVsc2UgdGhpcy5uZXh0X2xpbmUoMCwgbm9fY3Vyc29yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0X2NoYXIodGhpcy5zZWxlY3RlZF9pbmRleCArIDEsIG5vX2N1cnNvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcmV2aW91c19jaGFyKG5vX2N1cnNvcj86IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKHRoaXMubGluZXNbdGhpcy5jdXJyZW50X2xpbmVdLmxlbmd0aCA9PT0gMSAmJiB0aGlzLmxpbmVzLmxlbmd0aCA9PT0gMSkgcmV0dXJuO1xuXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkX2luZGV4IC0gMSA8IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRfbGluZSAtIDEgPCAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubGluZXMubGVuZ3RoID09PSAxKSB0aGlzLnNlbGVjdF9jaGFyKHRoaXMubGluZXNbdGhpcy5jdXJyZW50X2xpbmVdLmxlbmd0aCAtIDEsIG5vX2N1cnNvcik7XG4gICAgICAgICAgICAgICAgZWxzZSB0aGlzLmNoYW5nZV9saW5lKHRoaXMubGluZXMubGVuZ3RoIC0gMSwgdGhpcy5saW5lc1t0aGlzLmxpbmVzLmxlbmd0aCAtIDFdLmxlbmd0aCAtIDEsIG5vX2N1cnNvcik7XG4gICAgICAgICAgICB9IGVsc2UgdGhpcy5wcmV2aW91c19saW5lKHRoaXMubGluZXNbdGhpcy5jdXJyZW50X2xpbmUgLSAxXS5sZW5ndGggLSAxLCBub19jdXJzb3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RfY2hhcih0aGlzLnNlbGVjdGVkX2luZGV4IC0gMSwgbm9fY3Vyc29yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN3YXBfbmV4dCgpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9pbmRleCA9PT0gdGhpcy5saW5lc1t0aGlzLmN1cnJlbnRfbGluZV0ubGVuZ3RoIC0gMSAmJlxuICAgICAgICAgICAgdGhpcy5jdXJyZW50X2xpbmUgPT09IHRoaXMubGluZXMubGVuZ3RoIC0gMVxuICAgICAgICApXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLnNlbGVjdGVkX2luZGV4ICsgdGhpcy5jdXJyZW50X2xpbmUgKiBNQVhfUEVSX0xJTkU7XG4gICAgICAgIGNvbnN0IHRoaXNfY2hhciA9IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1tpbmRleF07XG5cbiAgICAgICAgdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW2luZGV4XSA9IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1tpbmRleCArIDFdO1xuICAgICAgICB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbaW5kZXggKyAxXSA9IHRoaXNfY2hhcjtcblxuICAgICAgICBjb25zdCBuZXdfaW5kZXggPSAodGhpcy5zZWxlY3RlZF9pbmRleCArIDEpICUgTUFYX1BFUl9MSU5FO1xuICAgICAgICBjb25zdCBuZXdfbGluZSA9IHRoaXMuY3VycmVudF9saW5lICsgKG5ld19pbmRleCA9PT0gMCA/IDEgOiAwKTtcblxuICAgICAgICB0aGlzLm1ha2VfbGluZXMoKTtcbiAgICAgICAgdGhpcy5jaGFuZ2VfbGluZShuZXdfbGluZSwgbmV3X2luZGV4KTtcbiAgICB9XG5cbiAgICBzd2FwX3ByZXZpb3VzKCkge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZF9pbmRleCA9PT0gMCAmJiB0aGlzLmN1cnJlbnRfbGluZSA9PT0gMCkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5zZWxlY3RlZF9pbmRleCArIHRoaXMuY3VycmVudF9saW5lICogTUFYX1BFUl9MSU5FO1xuICAgICAgICBjb25zdCB0aGlzX2NoYXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbaW5kZXhdO1xuXG4gICAgICAgIHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1tpbmRleF0gPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbaW5kZXggLSAxXTtcbiAgICAgICAgdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW2luZGV4IC0gMV0gPSB0aGlzX2NoYXI7XG5cbiAgICAgICAgY29uc3QgbmV3X2luZGV4ID0gKHRoaXMuc2VsZWN0ZWRfaW5kZXggKyBNQVhfUEVSX0xJTkUgLSAxKSAlIE1BWF9QRVJfTElORTtcbiAgICAgICAgY29uc3QgbmV3X2xpbmUgPSB0aGlzLmN1cnJlbnRfbGluZSAtIChuZXdfaW5kZXggPiB0aGlzLnNlbGVjdGVkX2luZGV4ID8gMSA6IDApO1xuXG4gICAgICAgIHRoaXMubWFrZV9saW5lcygpO1xuICAgICAgICB0aGlzLmNoYW5nZV9saW5lKG5ld19saW5lLCBuZXdfaW5kZXgpO1xuICAgIH1cblxuICAgIGdyYW50X2NvbnRyb2wob25fY2FuY2VsOiBGdW5jdGlvbiwgb25fc2VsZWN0OiBGdW5jdGlvbiwgZW5hYmxlX3N3YXA/OiBib29sZWFuKSB7XG4gICAgICAgIGNvbnN0IGNvbnRyb2xzOiB7a2V5OiBudW1iZXI7IG9uX2Rvd246IEZ1bmN0aW9uOyBvbl91cD86IEZ1bmN0aW9uOyBwYXJhbXM/OiBhbnl9W10gPSBbXG4gICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5MRUZULCBvbl9kb3duOiB0aGlzLnByZXZpb3VzX2NoYXIuYmluZCh0aGlzKX0sXG4gICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5SSUdIVCwgb25fZG93bjogdGhpcy5uZXh0X2NoYXIuYmluZCh0aGlzKX0sXG4gICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5VUCwgb25fZG93bjogdGhpcy5wcmV2aW91c19saW5lLmJpbmQodGhpcyl9LFxuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuRE9XTiwgb25fZG93bjogdGhpcy5uZXh0X2xpbmUuYmluZCh0aGlzKX0sXG4gICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5BLCBvbl9kb3duOiBvbl9zZWxlY3QsIHBhcmFtczoge3Jlc2V0X2NvbnRyb2w6IHRydWV9fSxcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkIsIG9uX2Rvd246IG9uX2NhbmNlbCwgcGFyYW1zOiB7cmVzZXRfY29udHJvbDogdHJ1ZX19LFxuICAgICAgICBdO1xuICAgICAgICBpZiAoZW5hYmxlX3N3YXApIHtcbiAgICAgICAgICAgIGNvbnRyb2xzLnB1c2goXG4gICAgICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuTCwgb25fZG93bjogdGhpcy5zd2FwX3ByZXZpb3VzLmJpbmQodGhpcyl9LFxuICAgICAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLlIsIG9uX2Rvd246IHRoaXMuc3dhcF9uZXh0LmJpbmQodGhpcyl9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kYXRhLmNvbnRyb2xfbWFuYWdlci5zZXRfY29udHJvbChjb250cm9scywge2xvb3BfY29uZmlnczoge2hvcml6b250YWw6IHRydWV9fSk7XG4gICAgfVxuXG4gICAgbW92ZV9jdXJzb3IocG9zPzogbnVtYmVyLCBvbl9jb21wbGV0ZT86IEZ1bmN0aW9uKSB7XG4gICAgICAgIGlmIChwb3MgPT09IHVuZGVmaW5lZCkgcG9zID0gdGhpcy5zZWxlY3RlZF9pbmRleDtcblxuICAgICAgICBsZXQgY3Vyc29yX3ggPSAwO1xuICAgICAgICBsZXQgY3Vyc29yX3kgPSAwO1xuICAgICAgICBsZXQgdHdlZW5fY29uZmlnID0ge3R5cGU6IG51bGwsIHZhcmlhbnQ6IG51bGx9O1xuXG4gICAgICAgIGlmICh0aGlzLm1vZGUgPT09IENoYXJzTWVudU1vZGVzLlNIT1ApIHtcbiAgICAgICAgICAgIGN1cnNvcl94ID0gQ1VSU09SX1ggKyBwb3MgKiBHQVBfU0laRTtcbiAgICAgICAgICAgIGN1cnNvcl95ID0gQ1VSU09SX1k7XG4gICAgICAgICAgICB0d2Vlbl9jb25maWcudHlwZSA9IEN1cnNvck1hbmFnZXIuQ3Vyc29yVHdlZW5zLldJR0dMRTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLm1vZGUgPT09IENoYXJzTWVudU1vZGVzLk1FTlUpIHtcbiAgICAgICAgICAgIGN1cnNvcl94ID0gQ1VSU09SX1gyICsgcG9zICogR0FQX1NJWkU7XG4gICAgICAgICAgICBjdXJzb3JfeSA9IENVUlNPUl9ZMjtcbiAgICAgICAgICAgIHR3ZWVuX2NvbmZpZy50eXBlID0gQ3Vyc29yTWFuYWdlci5DdXJzb3JUd2VlbnMuUE9JTlQ7XG4gICAgICAgICAgICB0d2Vlbl9jb25maWcudmFyaWFudCA9IFBvaW50VmFyaWFudHMuTk9STUFMO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGF0YS5jdXJzb3JfbWFuYWdlci5tb3ZlX3RvKFxuICAgICAgICAgICAge3g6IGN1cnNvcl94LCB5OiBjdXJzb3JfeX0sXG4gICAgICAgICAgICB7YW5pbWF0ZTogZmFsc2UsIHR3ZWVuX2NvbmZpZzogdHdlZW5fY29uZmlnfSxcbiAgICAgICAgICAgIG9uX2NvbXBsZXRlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgYWN0aXZhdGUoKSB7XG4gICAgICAgIHRoaXMubW92ZV9jdXJzb3IoKTtcbiAgICAgICAgdGhpcy5pc19hY3RpdmUgPSB0cnVlO1xuICAgIH1cblxuICAgIGRlYWN0aXZhdGUoKSB7XG4gICAgICAgIHRoaXMuZGF0YS5jdXJzb3JfbWFuYWdlci5jbGVhcl90d2VlbnMoKTtcbiAgICAgICAgdGhpcy5pc19hY3RpdmUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBvcGVuKFxuICAgICAgICBzZWxlY3RfaW5kZXg6IG51bWJlciA9IDAsXG4gICAgICAgIG1vZGU6IENoYXJzTWVudU1vZGVzID0gQ2hhcnNNZW51TW9kZXMuU0hPUCxcbiAgICAgICAgb3Blbl9jYWxsYmFjaz86IEZ1bmN0aW9uLFxuICAgICAgICBzaWxlbnQ/OiBib29sZWFuXG4gICAgKSB7XG4gICAgICAgIHRoaXMuY3VycmVudF9saW5lID0gMDtcbiAgICAgICAgdGhpcy5tb2RlID0gbW9kZTtcblxuICAgICAgICB0aGlzLm1ha2VfbGluZXMoKTtcbiAgICAgICAgdGhpcy5jaGVja19tb2RlKCk7XG4gICAgICAgIHRoaXMuY2hlY2tfYXJyb3dzKCk7XG4gICAgICAgIHRoaXMuc2V0X2NoYXJzKCk7XG4gICAgICAgIHRoaXMuc2VsZWN0X2NoYXIoc2VsZWN0X2luZGV4LCB1bmRlZmluZWQsIHNpbGVudCk7XG5cbiAgICAgICAgdGhpcy5jaGFyX2dyb3VwLmFscGhhID0gMTtcbiAgICAgICAgdGhpcy5pc19vcGVuID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLmFjdGl2YXRlKCk7XG4gICAgICAgIHRoaXMud2luZG93LnNob3cob3Blbl9jYWxsYmFjaywgZmFsc2UpO1xuICAgIH1cblxuICAgIGNsb3NlKGNhbGxiYWNrPzogRnVuY3Rpb24sIGRlc3Ryb3k6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICB0aGlzLmlzX29wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kZWFjdGl2YXRlKCk7XG4gICAgICAgIHV0aWxzLmtpbGxfYWxsX3Nwcml0ZXModGhpcy5jaGFyX2dyb3VwLCBkZXN0cm95KTtcblxuICAgICAgICB0aGlzLmxpbmVzID0gW107XG4gICAgICAgIHRoaXMuY2hhcl9zcHJpdGVzID0gW107XG4gICAgICAgIHRoaXMuY3VycmVudF9saW5lID0gMDtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9pbmRleCA9IG51bGw7XG4gICAgICAgIHRoaXMuaXNfYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNfb3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNoYXJfZ3JvdXAuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLm1vZGUgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuc2V0X2Fycm93cyhmYWxzZSwgZmFsc2UpO1xuXG4gICAgICAgIHRoaXMud2luZG93LmNsZWFyX3NlcGFyYXRvcnMoKTtcbiAgICAgICAgdGhpcy53aW5kb3cuY2xvc2UoY2FsbGJhY2ssIGZhbHNlKTtcbiAgICB9XG59XG4iLCJpbXBvcnQge2V2ZW50X3R5cGVzLCBUaWxlRXZlbnR9IGZyb20gXCIuL1RpbGVFdmVudFwiO1xuaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tIFwiLi4vbWFnaWNfbnVtYmVyc1wiO1xuaW1wb3J0IHtcbiAgICBnZXRfc3Vycm91bmRpbmdzLFxuICAgIGdldF9vcHBvc2l0ZV9kaXJlY3Rpb24sXG4gICAgZGlyZWN0aW9ucyxcbiAgICBzcGxpdF9kaXJlY3Rpb24sXG4gICAgcmV2ZXJzZV9kaXJlY3Rpb25zLFxuICAgIGJhc2VfYWN0aW9ucyxcbn0gZnJvbSBcIi4uL3V0aWxzXCI7XG5cbmNvbnN0IEpVTVBfT0ZGU0VUID0gMzA7XG5jb25zdCBKVU1QX0RVUkFUSU9OID0gMTUwO1xuXG5leHBvcnQgY2xhc3MgSnVtcEV2ZW50IGV4dGVuZHMgVGlsZUV2ZW50IHtcbiAgICBwdWJsaWMgaXNfc2V0OiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSwgeCwgeSwgYWN0aXZhdGlvbl9kaXJlY3Rpb25zLCBhY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMsIGR5bmFtaWMsIGFjdGl2ZSwgaXNfc2V0KSB7XG4gICAgICAgIHN1cGVyKFxuICAgICAgICAgICAgZ2FtZSxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICBldmVudF90eXBlcy5KVU1QLFxuICAgICAgICAgICAgeCxcbiAgICAgICAgICAgIHksXG4gICAgICAgICAgICBhY3RpdmF0aW9uX2RpcmVjdGlvbnMsXG4gICAgICAgICAgICBhY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMsXG4gICAgICAgICAgICBkeW5hbWljLFxuICAgICAgICAgICAgYWN0aXZlLFxuICAgICAgICAgICAgbnVsbFxuICAgICAgICApO1xuICAgICAgICB0aGlzLmlzX3NldCA9IGlzX3NldDtcbiAgICB9XG5cbiAgICBmaXJlKCkge1xuICAgICAgICBpZiAoIXRoaXMuZGF0YS5oZXJvLnN0b3BfYnlfY29sbGlkaW5nIHx8ICF0aGlzLmNoZWNrX3Bvc2l0aW9uKCkgfHwgIXRoaXMuZGF0YS5oZXJvX21vdmVtZW50X2FsbG93ZWQoZmFsc2UpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGp1bXBfb2Zmc2V0ID0gSlVNUF9PRkZTRVQ7XG4gICAgICAgIGxldCBkaXJlY3Rpb247XG4gICAgICAgIGxldCBqdW1wX2RpcmVjdGlvbjtcbiAgICAgICAgbGV0IG5leHRfcG9zaXRpb24gPSB7eDogdGhpcy54LCB5OiB0aGlzLnl9O1xuICAgICAgICBsZXQgc2lkZV9wb3NpdGlvbiA9IHt4OiB0aGlzLngsIHk6IHRoaXMueX07XG4gICAgICAgIGlmICh0aGlzLmRhdGEuaGVyby5jdXJyZW50X2RpcmVjdGlvbiA9PT0gZGlyZWN0aW9ucy5sZWZ0KSB7XG4gICAgICAgICAgICBqdW1wX29mZnNldCA9IC1qdW1wX29mZnNldDtcbiAgICAgICAgICAgIGRpcmVjdGlvbiA9IFwieFwiO1xuICAgICAgICAgICAgbmV4dF9wb3NpdGlvbi54IC09IDI7XG4gICAgICAgICAgICBzaWRlX3Bvc2l0aW9uLnggLT0gMTtcbiAgICAgICAgICAgIGp1bXBfZGlyZWN0aW9uID0gZGlyZWN0aW9ucy5sZWZ0O1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YS5oZXJvLmN1cnJlbnRfZGlyZWN0aW9uID09PSBkaXJlY3Rpb25zLnJpZ2h0KSB7XG4gICAgICAgICAgICBkaXJlY3Rpb24gPSBcInhcIjtcbiAgICAgICAgICAgIG5leHRfcG9zaXRpb24ueCArPSAyO1xuICAgICAgICAgICAgc2lkZV9wb3NpdGlvbi54ICs9IDE7XG4gICAgICAgICAgICBqdW1wX2RpcmVjdGlvbiA9IGRpcmVjdGlvbnMucmlnaHQ7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5kYXRhLmhlcm8uY3VycmVudF9kaXJlY3Rpb24gPT09IGRpcmVjdGlvbnMudXApIHtcbiAgICAgICAgICAgIGp1bXBfb2Zmc2V0ID0gLWp1bXBfb2Zmc2V0O1xuICAgICAgICAgICAgZGlyZWN0aW9uID0gXCJ5XCI7XG4gICAgICAgICAgICBuZXh0X3Bvc2l0aW9uLnkgLT0gMjtcbiAgICAgICAgICAgIHNpZGVfcG9zaXRpb24ueSAtPSAxO1xuICAgICAgICAgICAganVtcF9kaXJlY3Rpb24gPSBkaXJlY3Rpb25zLnVwO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YS5oZXJvLmN1cnJlbnRfZGlyZWN0aW9uID09PSBkaXJlY3Rpb25zLmRvd24pIHtcbiAgICAgICAgICAgIGRpcmVjdGlvbiA9IFwieVwiO1xuICAgICAgICAgICAgbmV4dF9wb3NpdGlvbi55ICs9IDI7XG4gICAgICAgICAgICBzaWRlX3Bvc2l0aW9uLnkgKz0gMTtcbiAgICAgICAgICAgIGp1bXBfZGlyZWN0aW9uID0gZGlyZWN0aW9ucy5kb3duO1xuICAgICAgICB9XG4gICAgICAgIGlmIChqdW1wX2RpcmVjdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNpZGVfcG9zX2tleSA9IFRpbGVFdmVudC5nZXRfbG9jYXRpb25fa2V5KHNpZGVfcG9zaXRpb24ueCwgc2lkZV9wb3NpdGlvbi55KTtcbiAgICAgICAgaWYgKHNpZGVfcG9zX2tleSBpbiB0aGlzLmRhdGEubWFwLmV2ZW50cykge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRhdGEubWFwLmV2ZW50c1tzaWRlX3Bvc19rZXldLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXZlbnQgPSB0aGlzLmRhdGEubWFwLmV2ZW50c1tzaWRlX3Bvc19rZXldW2ldO1xuICAgICAgICAgICAgICAgIGxldCBpbnRlcmFjdGFibGVfb2JqZWN0X2ZvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmRhdGEubWFwLmludGVyYWN0YWJsZV9vYmplY3RzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGludGVyYWN0YWJsZV9vYmplY3QgPSB0aGlzLmRhdGEubWFwLmludGVyYWN0YWJsZV9vYmplY3RzW2pdO1xuICAgICAgICAgICAgICAgICAgICAvL2lmIHRoZSBzaWRlIHBvc2l0aW9uIGhhcyBhIGludGVyYWN0YWJsZSBvYmplY3QsIGl0IGRvZXMgbm90IGNhbmNlbCB0aGlzIGp1bXAgZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS5tYXAuY29sbGlzaW9uX2xheWVyICE9PSBpbnRlcmFjdGFibGVfb2JqZWN0LmJhc2VfY29sbGlzaW9uX2xheWVyKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LnggPT09IGludGVyYWN0YWJsZV9vYmplY3QuY3VycmVudF94ICYmIGV2ZW50LnkgPT09IGludGVyYWN0YWJsZV9vYmplY3QuY3VycmVudF95KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcmFjdGFibGVfb2JqZWN0X2ZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpbnRlcmFjdGFibGVfb2JqZWN0X2ZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL2NhbmNlbCBqdW1waW5nIGlmIHRoZSBuZXh0IHNpZGUgZXZlbnQgaXMgYWxzbyBhIGp1bXBcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnR5cGUgPT09IGV2ZW50X3R5cGVzLkpVTVAgJiZcbiAgICAgICAgICAgICAgICAgICAgKGV2ZW50IGFzIEp1bXBFdmVudCkuaXNfc2V0ICYmXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycy5pbmNsdWRlcyh0aGlzLmRhdGEubWFwLmNvbGxpc2lvbl9sYXllcilcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgbmV4dF9wb3Nfa2V5ID0gVGlsZUV2ZW50LmdldF9sb2NhdGlvbl9rZXkobmV4dF9wb3NpdGlvbi54LCBuZXh0X3Bvc2l0aW9uLnkpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGF0YS5tYXAuaW50ZXJhY3RhYmxlX29iamVjdHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IG5leHRfaW50ZXJhY3RhYmxlX29iamVjdCA9IHRoaXMuZGF0YS5tYXAuaW50ZXJhY3RhYmxlX29iamVjdHNbaV07XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgbmV4dF9pbnRlcmFjdGFibGVfb2JqZWN0LmN1cnJlbnRfeCAhPT0gbmV4dF9wb3NpdGlvbi54IHx8XG4gICAgICAgICAgICAgICAgbmV4dF9pbnRlcmFjdGFibGVfb2JqZWN0LmN1cnJlbnRfeSAhPT0gbmV4dF9wb3NpdGlvbi55XG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBpZiAodGhpcy5kYXRhLm1hcC5jb2xsaXNpb25fbGF5ZXIgIT09IG5leHRfaW50ZXJhY3RhYmxlX29iamVjdC5iYXNlX2NvbGxpc2lvbl9sYXllcikgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5leHRfcG9zX2tleSBpbiB0aGlzLmRhdGEubWFwLmV2ZW50cykge1xuICAgICAgICAgICAgbGV0IGFjdGl2ZV9qdW1wX2V2ZW50X2ZvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGF0YS5tYXAuZXZlbnRzW25leHRfcG9zX2tleV0ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBldmVudCA9IHRoaXMuZGF0YS5tYXAuZXZlbnRzW25leHRfcG9zX2tleV1baV07XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBldmVudC50eXBlID09PSBldmVudF90eXBlcy5KVU1QICYmXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmlzX2FjdGl2ZShnZXRfb3Bwb3NpdGVfZGlyZWN0aW9uKGp1bXBfZGlyZWN0aW9uKSkgJiZcbiAgICAgICAgICAgICAgICAgICAgKGV2ZW50IGFzIEp1bXBFdmVudCkuaXNfc2V0ICYmXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycy5pbmNsdWRlcyh0aGlzLmRhdGEubWFwLmNvbGxpc2lvbl9sYXllcilcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlX2p1bXBfZXZlbnRfZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZHluYW1pYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgSnVtcEV2ZW50LnNldF9qdW1wX2NvbGxpc2lvbih0aGlzLmdhbWUsIHRoaXMuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmR5bmFtaWMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEp1bXBFdmVudC51bnNldF9zZXRfanVtcF9jb2xsaXNpb24odGhpcy5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghYWN0aXZlX2p1bXBfZXZlbnRfZm91bmQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5keW5hbWljKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kYXRhLmhlcm8uanVtcGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuZGF0YS50aWxlX2V2ZW50X21hbmFnZXIub25fZXZlbnQgPSB0cnVlO1xuICAgICAgICBsZXQgdHdlZW5fb2JqOiBhbnkgPSB7fTtcbiAgICAgICAgdHdlZW5fb2JqW2RpcmVjdGlvbl0gPSB0aGlzLmRhdGEuaGVyby5zcHJpdGVbZGlyZWN0aW9uXSArIGp1bXBfb2Zmc2V0O1xuICAgICAgICBjb25zdCBoZXJvX3ggPSB0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlV2lkdGggKiAobmV4dF9wb3NpdGlvbi54ICsgMC41KTtcbiAgICAgICAgY29uc3QgaGVyb195ID0gdGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZUhlaWdodCAqIChuZXh0X3Bvc2l0aW9uLnkgKyAwLjUpO1xuICAgICAgICBpZiAoZGlyZWN0aW9uID09PSBcInhcIikge1xuICAgICAgICAgICAgdHdlZW5fb2JqLnkgPSBbaGVyb195IC0gOCwgaGVyb195IC0gMTYsIGhlcm9feSAtIDgsIGhlcm9feV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0d2Vlbl9vYmoueCA9IGhlcm9feDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdhbWUucGh5c2ljcy5wMi5wYXVzZSgpO1xuICAgICAgICB0aGlzLmRhdGEuaGVyby5wbGF5KGJhc2VfYWN0aW9ucy5KVU1QLCByZXZlcnNlX2RpcmVjdGlvbnNbanVtcF9kaXJlY3Rpb25dKTtcbiAgICAgICAgdGhpcy5kYXRhLmhlcm8uc3ByaXRlLmFuaW1hdGlvbnMuY3VycmVudEFuaW0ub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnNoYWRvdy52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmdhbWUuYWRkXG4gICAgICAgICAgICAgICAgLnR3ZWVuKHRoaXMuZGF0YS5oZXJvLnNwcml0ZS5ib2R5KVxuICAgICAgICAgICAgICAgIC50byh0d2Vlbl9vYmosIEpVTVBfRFVSQVRJT04sIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsIHRydWUpXG4gICAgICAgICAgICAgICAgLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnNoYWRvdy54ID0gaGVyb194O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zaGFkb3cueSA9IGhlcm9feTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc2hhZG93LnZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zcHJpdGUuYW5pbWF0aW9ucy5jdXJyZW50QW5pbS5yZXZlcnNlT25jZSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5wbGF5KGJhc2VfYWN0aW9ucy5KVU1QLCByZXZlcnNlX2RpcmVjdGlvbnNbanVtcF9kaXJlY3Rpb25dKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc3ByaXRlLmFuaW1hdGlvbnMuY3VycmVudEFuaW0ub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLnJlc3VtZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uanVtcGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLnRpbGVfZXZlbnRfbWFuYWdlci5vbl9ldmVudCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAganVtcF9uZWFyX2NvbGxpc2lvbigpIHtcbiAgICAgICAgY29uc3QgY3VycmVudF9wb3Nfa2V5ID0gVGlsZUV2ZW50LmdldF9sb2NhdGlvbl9rZXkodGhpcy5kYXRhLmhlcm8udGlsZV94X3BvcywgdGhpcy5kYXRhLmhlcm8udGlsZV95X3Bvcyk7XG4gICAgICAgIGxldCBjdXJyZW50X3BvcyA9IHt4OiB0aGlzLmRhdGEuaGVyby50aWxlX3hfcG9zLCB5OiB0aGlzLmRhdGEuaGVyby50aWxlX3lfcG9zfTtcbiAgICAgICAgbGV0IHN1cnJvdW5kaW5ncyA9IGdldF9zdXJyb3VuZGluZ3MoY3VycmVudF9wb3MueCwgY3VycmVudF9wb3MueSwgdHJ1ZSk7XG4gICAgICAgIGxldCByaWdodF9kaXJlY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgbGV0IHBvc3NpYmxlX2RpcmVjdGlvbnMgPSBzcGxpdF9kaXJlY3Rpb24odGhpcy5kYXRhLmhlcm8uY3VycmVudF9kaXJlY3Rpb24pO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc3NpYmxlX2RpcmVjdGlvbnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHJpZ2h0X2RpcmVjdGlvbiA9IHJpZ2h0X2RpcmVjdGlvbiB8fCB0aGlzLmFjdGl2YXRpb25fZGlyZWN0aW9ucy5pbmNsdWRlcyhwb3NzaWJsZV9kaXJlY3Rpb25zW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjbGVhcl9ib2RpZXMgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keS5jb2xsaWRlcyh0aGlzLmRhdGEuY29sbGlzaW9uLm1hcF9jb2xsaXNpb25fZ3JvdXApO1xuICAgICAgICAgICAgdGhpcy5kYXRhLm1hcC5jb2xsaXNpb25fc3ByaXRlLmJvZHkuY29sbGlkZXModGhpcy5kYXRhLmNvbGxpc2lvbi5oZXJvX2NvbGxpc2lvbl9ncm91cCk7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuZGF0YS5jb2xsaXNpb24uZHluYW1pY19qdW1wX2V2ZW50c19ib2RpZXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuY29sbGlzaW9uLmR5bmFtaWNfanVtcF9ldmVudHNfYm9kaWVzW2pdLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGF0YS5jb2xsaXNpb24uZHluYW1pY19qdW1wX2V2ZW50c19ib2RpZXMgPSBbXTtcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IGNvbmNhdF9rZXlzID0gY3VycmVudF9wb3Nfa2V5O1xuICAgICAgICBsZXQgYm9kaWVzX3Bvc2l0aW9ucyA9IFtdO1xuICAgICAgICBsZXQgYXRfbGVhc3Rfb25lX2R5bmFtaWNfYW5kX25vdF9kaWFnID0gZmFsc2U7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3Vycm91bmRpbmdzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBzdXJyb3VuZGluZ19rZXkgPSBUaWxlRXZlbnQuZ2V0X2xvY2F0aW9uX2tleShzdXJyb3VuZGluZ3NbaV0ueCwgc3Vycm91bmRpbmdzW2ldLnkpO1xuICAgICAgICAgICAgaWYgKHN1cnJvdW5kaW5nX2tleSBpbiB0aGlzLmRhdGEubWFwLmV2ZW50cykge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5kYXRhLm1hcC5ldmVudHNbc3Vycm91bmRpbmdfa2V5XS5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdXJyb3VuZGluZ19ldmVudCA9IHRoaXMuZGF0YS5tYXAuZXZlbnRzW3N1cnJvdW5kaW5nX2tleV1bal07XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1cnJvdW5kaW5nX2V2ZW50LnR5cGUgPT09IGV2ZW50X3R5cGVzLkpVTVAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0X2RpcmVjdGlvbiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKHN1cnJvdW5kaW5nX2V2ZW50IGFzIEp1bXBFdmVudCkuaXNfc2V0ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBzdXJyb3VuZGluZ19ldmVudC5hY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMuaW5jbHVkZXModGhpcy5kYXRhLm1hcC5jb2xsaXNpb25fbGF5ZXIpXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChzdXJyb3VuZGluZ19ldmVudC5keW5hbWljIHx8IHRoaXMuZHluYW1pYykgJiYgIXN1cnJvdW5kaW5nc1tpXS5kaWFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXRfbGVhc3Rfb25lX2R5bmFtaWNfYW5kX25vdF9kaWFnID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNpZGVfZXZlbnRfc3Vycm91bmRpbmdzID0gZ2V0X3N1cnJvdW5kaW5ncyhzdXJyb3VuZGluZ3NbaV0ueCwgc3Vycm91bmRpbmdzW2ldLnksIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZGllc19wb3NpdGlvbnMucHVzaChzaWRlX2V2ZW50X3N1cnJvdW5kaW5ncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25jYXRfa2V5cyArPSBcIi1cIiArIHN1cnJvdW5kaW5nX2tleTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgICAhdGhpcy5kYXRhLnRpbGVfZXZlbnRfbWFuYWdlci53YWxraW5nX29uX3BpbGxhcnNfdGlsZXMuaGFzKGNvbmNhdF9rZXlzKSAmJlxuICAgICAgICAgICAgYXRfbGVhc3Rfb25lX2R5bmFtaWNfYW5kX25vdF9kaWFnXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5kYXRhLnRpbGVfZXZlbnRfbWFuYWdlci53YWxraW5nX29uX3BpbGxhcnNfdGlsZXMuY2xlYXIoKTtcbiAgICAgICAgICAgIGNsZWFyX2JvZGllcygpO1xuICAgICAgICAgICAgdGhpcy5kYXRhLnRpbGVfZXZlbnRfbWFuYWdlci53YWxraW5nX29uX3BpbGxhcnNfdGlsZXMuYWRkKGNvbmNhdF9rZXlzKTtcbiAgICAgICAgICAgIGxldCBib2RpZXNfcG9zaXRpb24gPSBuZXcgU2V0KHN1cnJvdW5kaW5ncy5jb25jYXQoLi4uYm9kaWVzX3Bvc2l0aW9ucykubWFwKHBvcyA9PiBwb3MueCArIFwiX1wiICsgcG9zLnkpKTtcbiAgICAgICAgICAgIGNvbmNhdF9rZXlzLnNwbGl0KFwiLVwiKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICAgICAgYm9kaWVzX3Bvc2l0aW9uLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keS5yZW1vdmVDb2xsaXNpb25Hcm91cCh0aGlzLmRhdGEuY29sbGlzaW9uLm1hcF9jb2xsaXNpb25fZ3JvdXAsIHRydWUpO1xuICAgICAgICAgICAgdGhpcy5kYXRhLm1hcC5jb2xsaXNpb25fc3ByaXRlLmJvZHkucmVtb3ZlQ29sbGlzaW9uR3JvdXAodGhpcy5kYXRhLmNvbGxpc2lvbi5oZXJvX2NvbGxpc2lvbl9ncm91cCwgdHJ1ZSk7XG4gICAgICAgICAgICBib2RpZXNfcG9zaXRpb24uZm9yRWFjaChwb3NpdGlvbiA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9zX2FycmF5ID0gcG9zaXRpb24uc3BsaXQoXCJfXCIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHhfcG9zID0gKHBhcnNlSW50KHBvc19hcnJheVswXSkgKyAwLjUpICogdGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZVdpZHRoO1xuICAgICAgICAgICAgICAgIGNvbnN0IHlfcG9zID0gKHBhcnNlSW50KHBvc19hcnJheVsxXSkgKyAwLjUpICogdGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZUhlaWdodDtcbiAgICAgICAgICAgICAgICBsZXQgYm9keSA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUJvZHkoeF9wb3MsIHlfcG9zLCAwLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBib2R5LmNsZWFyU2hhcGVzKCk7XG4gICAgICAgICAgICAgICAgYm9keS5zZXRSZWN0YW5nbGUodGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZVdpZHRoLCB0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlSGVpZ2h0LCAwLCAwKTtcbiAgICAgICAgICAgICAgICBib2R5LnNldENvbGxpc2lvbkdyb3VwKHRoaXMuZGF0YS5jb2xsaXNpb24uZHluYW1pY19ldmVudHNfY29sbGlzaW9uX2dyb3VwKTtcbiAgICAgICAgICAgICAgICBib2R5LmRhbXBpbmcgPSBudW1iZXJzLk1BUF9EQU1QSU5HO1xuICAgICAgICAgICAgICAgIGJvZHkuYW5ndWxhckRhbXBpbmcgPSBudW1iZXJzLk1BUF9EQU1QSU5HO1xuICAgICAgICAgICAgICAgIGJvZHkuc2V0WmVyb1JvdGF0aW9uKCk7XG4gICAgICAgICAgICAgICAgYm9keS5maXhlZFJvdGF0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBib2R5LmR5bmFtaWMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBib2R5LnN0YXRpYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgYm9keS5kZWJ1ZyA9IHRoaXMuZGF0YS5oZXJvLnNwcml0ZS5ib2R5LmRlYnVnO1xuICAgICAgICAgICAgICAgIGJvZHkuY29sbGlkZXModGhpcy5kYXRhLmNvbGxpc2lvbi5oZXJvX2NvbGxpc2lvbl9ncm91cCk7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmNvbGxpc2lvbi5keW5hbWljX2p1bXBfZXZlbnRzX2JvZGllcy5wdXNoKGJvZHkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmR5bmFtaWMgJiYgIXJpZ2h0X2RpcmVjdGlvbiAmJiB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLndhbGtpbmdfb25fcGlsbGFyc190aWxlcy5zaXplKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLndhbGtpbmdfb25fcGlsbGFyc190aWxlcy5jbGVhcigpO1xuICAgICAgICAgICAgY2xlYXJfYm9kaWVzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgc2V0X2p1bXBfY29sbGlzaW9uKGdhbWUsIGRhdGEpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmNvbGxpc2lvbi5keW5hbWljX2p1bXBfZXZlbnRzX2JvZGllcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgZGF0YS5jb2xsaXNpb24uZHluYW1pY19qdW1wX2V2ZW50c19ib2RpZXNbaV0uZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEuY29sbGlzaW9uLmR5bmFtaWNfanVtcF9ldmVudHNfYm9kaWVzID0gW107XG4gICAgICAgIGRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLndhbGtpbmdfb25fcGlsbGFyc190aWxlcy5jbGVhcigpO1xuICAgICAgICBkYXRhLmhlcm8uc3ByaXRlLmJvZHkucmVtb3ZlQ29sbGlzaW9uR3JvdXAoZGF0YS5jb2xsaXNpb24ubWFwX2NvbGxpc2lvbl9ncm91cCwgdHJ1ZSk7XG4gICAgICAgIGRhdGEubWFwLmNvbGxpc2lvbl9zcHJpdGUuYm9keS5yZW1vdmVDb2xsaXNpb25Hcm91cChkYXRhLmNvbGxpc2lvbi5oZXJvX2NvbGxpc2lvbl9ncm91cCwgdHJ1ZSk7XG4gICAgICAgIGZvciAobGV0IGV2ZW50X2tleSBpbiBkYXRhLm1hcC5ldmVudHMpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZGF0YS5tYXAuZXZlbnRzW2V2ZW50X2tleV0ubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICBjb25zdCBldmVudCA9IGRhdGEubWFwLmV2ZW50c1tldmVudF9rZXldW2pdO1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQudHlwZSA9PT0gZXZlbnRfdHlwZXMuSlVNUCAmJlxuICAgICAgICAgICAgICAgICAgICBldmVudC5keW5hbWljICYmXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmlzX3NldCAmJlxuICAgICAgICAgICAgICAgICAgICBldmVudC5hY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMuaW5jbHVkZXMoZGF0YS5tYXAuY29sbGlzaW9uX2xheWVyKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3Vycm91bmRpbmdzID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAge3g6IGV2ZW50LnggLSAxLCB5OiBldmVudC55fSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHt4OiBldmVudC54ICsgMSwgeTogZXZlbnQueX0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7eDogZXZlbnQueCwgeTogZXZlbnQueSAtIDF9LFxuICAgICAgICAgICAgICAgICAgICAgICAge3g6IGV2ZW50LngsIHk6IGV2ZW50LnkgKyAxfSxcbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdXJyb3VuZGluZ3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1cnJvdW5kaW5nX2tleSA9IFRpbGVFdmVudC5nZXRfbG9jYXRpb25fa2V5KHN1cnJvdW5kaW5nc1tpXS54LCBzdXJyb3VuZGluZ3NbaV0ueSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3Vycm91bmRpbmdfa2V5IGluIGRhdGEubWFwLmV2ZW50cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkeW5hbWljX2ZvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBkYXRhLm1hcC5ldmVudHNbc3Vycm91bmRpbmdfa2V5XS5sZW5ndGg7ICsraykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aGlzX2V2ZW50ID0gZGF0YS5tYXAuZXZlbnRzW3N1cnJvdW5kaW5nX2tleV1ba107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfZXZlbnQuZHluYW1pYyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc19ldmVudC50eXBlID09PSBldmVudF90eXBlcy5KVU1QICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzX2V2ZW50LmlzX3NldCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc19ldmVudC5hY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMuaW5jbHVkZXMoZGF0YS5tYXAuY29sbGlzaW9uX2xheWVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR5bmFtaWNfZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGR5bmFtaWNfZm91bmQpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHhfcG9zID0gKHN1cnJvdW5kaW5nc1tpXS54ICsgMC41KSAqIGRhdGEubWFwLnNwcml0ZS50aWxlV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgeV9wb3MgPSAoc3Vycm91bmRpbmdzW2ldLnkgKyAwLjUpICogZGF0YS5tYXAuc3ByaXRlLnRpbGVIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYm9keSA9IGdhbWUucGh5c2ljcy5wMi5jcmVhdGVCb2R5KHhfcG9zLCB5X3BvcywgMCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5LmNsZWFyU2hhcGVzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5LnNldFJlY3RhbmdsZShkYXRhLm1hcC5zcHJpdGUudGlsZVdpZHRoLCBkYXRhLm1hcC5zcHJpdGUudGlsZUhlaWdodCwgMCwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5LnNldENvbGxpc2lvbkdyb3VwKGRhdGEuY29sbGlzaW9uLmR5bmFtaWNfZXZlbnRzX2NvbGxpc2lvbl9ncm91cCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5LmRhbXBpbmcgPSBudW1iZXJzLk1BUF9EQU1QSU5HO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9keS5hbmd1bGFyRGFtcGluZyA9IG51bWJlcnMuTUFQX0RBTVBJTkc7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5LnNldFplcm9Sb3RhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9keS5maXhlZFJvdGF0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkuZHluYW1pYyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9keS5zdGF0aWMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9keS5kZWJ1ZyA9IGRhdGEuaGVyby5zcHJpdGUuYm9keS5kZWJ1ZztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkuY29sbGlkZXMoZGF0YS5jb2xsaXNpb24uaGVyb19jb2xsaXNpb25fZ3JvdXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5jb2xsaXNpb24uZHluYW1pY19qdW1wX2V2ZW50c19ib2RpZXMucHVzaChib2R5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyB1bnNldF9zZXRfanVtcF9jb2xsaXNpb24oZGF0YSkge1xuICAgICAgICBkYXRhLmhlcm8uc3ByaXRlLmJvZHkuY29sbGlkZXMoZGF0YS5jb2xsaXNpb24ubWFwX2NvbGxpc2lvbl9ncm91cCk7XG4gICAgICAgIGRhdGEubWFwLmNvbGxpc2lvbl9zcHJpdGUuYm9keS5jb2xsaWRlcyhkYXRhLmNvbGxpc2lvbi5oZXJvX2NvbGxpc2lvbl9ncm91cCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5jb2xsaXNpb24uZHluYW1pY19qdW1wX2V2ZW50c19ib2RpZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGRhdGEuY29sbGlzaW9uLmR5bmFtaWNfanVtcF9ldmVudHNfYm9kaWVzW2ldLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICBkYXRhLmNvbGxpc2lvbi5keW5hbWljX2p1bXBfZXZlbnRzX2JvZGllcyA9IFtdO1xuICAgIH1cblxuICAgIHN0YXRpYyBhY3RpdmVfanVtcF9zdXJyb3VuZGluZ3MoZGF0YSwgc3Vycm91bmRpbmdzLCB0YXJnZXRfbGF5ZXIpIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzdXJyb3VuZGluZ3MubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgIGNvbnN0IHN1cnJvdW5kaW5nID0gc3Vycm91bmRpbmdzW2pdO1xuICAgICAgICAgICAgY29uc3QgdGhpc19rZXkgPSBUaWxlRXZlbnQuZ2V0X2xvY2F0aW9uX2tleShzdXJyb3VuZGluZy54LCBzdXJyb3VuZGluZy55KTtcbiAgICAgICAgICAgIGlmICh0aGlzX2tleSBpbiBkYXRhLm1hcC5ldmVudHMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IGRhdGEubWFwLmV2ZW50c1t0aGlzX2tleV0ubGVuZ3RoOyArK2spIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3Vycl9ldmVudCA9IGRhdGEubWFwLmV2ZW50c1t0aGlzX2tleV1ba107XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdXJyX2V2ZW50LnR5cGUgPT09IGV2ZW50X3R5cGVzLkpVTVApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdXJyX2V2ZW50LmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycy5pbmNsdWRlcyh0YXJnZXRfbGF5ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1cnJfZXZlbnQuZHluYW1pYyA9PT0gZmFsc2UgJiYgc3Vycl9ldmVudC5pc19zZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vycl9ldmVudC5hY3RpdmF0ZV9hdChnZXRfb3Bwb3NpdGVfZGlyZWN0aW9uKHN1cnJvdW5kaW5nLmRpcmVjdGlvbikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7cGVybWFuZW50X3N0YXR1cywgdGVtcG9yYXJ5X3N0YXR1cywgb25fY2F0Y2hfc3RhdHVzX21zZywgZmlnaHRlcl90eXBlcywgUGxheWVyLCBtYWluX3N0YXRzfSBmcm9tIFwiLi4vUGxheWVyXCI7XG5pbXBvcnQge0JhdHRsZVN0YWdlfSBmcm9tIFwiLi9CYXR0bGVTdGFnZVwiO1xuaW1wb3J0IHtCYXR0bGVMb2d9IGZyb20gXCIuL0JhdHRsZUxvZ1wiO1xuaW1wb3J0IHtNYWluQmF0dGxlTWVudSwgUGxheWVyQWJpbGl0aWVzLCBQbGF5ZXJBYmlsaXR5fSBmcm9tIFwiLi4vbWFpbl9tZW51cy9NYWluQmF0dGxlTWVudVwiO1xuaW1wb3J0IHtFbmVteSwgZ2V0X2VuZW15X2luc3RhbmNlfSBmcm9tIFwiLi4vRW5lbXlcIjtcbmltcG9ydCB7YWJpbGl0eV90eXBlcywgQWJpbGl0eSwgZGltaW5pc2hpbmdfcmF0aW9zLCBhYmlsaXR5X2NhdGVnb3JpZXN9IGZyb20gXCIuLi9BYmlsaXR5XCI7XG5pbXBvcnQge0Nob29zaW5nVGFyZ2V0V2luZG93fSBmcm9tIFwiLi4vd2luZG93cy9iYXR0bGUvQ2hvb3NpbmdUYXJnZXRXaW5kb3dcIjtcbmltcG9ydCB7RW5lbXlBSX0gZnJvbSBcIi4vRW5lbXlBSVwiO1xuaW1wb3J0IHtCYXR0bGVGb3JtdWxhcywgQ1JJVElDQUxfQ0hBTkNFLCBFVkFTSU9OX0NIQU5DRSwgREVMVVNJT05fTUlTU19DSEFOQ0V9IGZyb20gXCIuL0JhdHRsZUZvcm11bGFzXCI7XG5pbXBvcnQge2VmZmVjdF90eXBlcywgRWZmZWN0LCBlZmZlY3RfdXNhZ2VzLCBlZmZlY3RfbmFtZXMsIGVmZmVjdF9tc2d9IGZyb20gXCIuLi9FZmZlY3RcIjtcbmltcG9ydCB7dmFyaWF0aW9uLCBvcmRlcmVkX2VsZW1lbnRzLCBlbGVtZW50X25hbWVzLCBiYXNlX2FjdGlvbnN9IGZyb20gXCIuLi91dGlsc1wiO1xuaW1wb3J0IHtkamlubl9zdGF0dXMsIERqaW5ufSBmcm9tIFwiLi4vRGppbm5cIjtcbmltcG9ydCB7SXRlbVNsb3QsIE1haW5DaGFyfSBmcm9tIFwiLi4vTWFpbkNoYXJcIjtcbmltcG9ydCB7QmF0dGxlQW5pbWF0aW9uTWFuYWdlcn0gZnJvbSBcIi4vQmF0dGxlQW5pbWF0aW9uTWFuYWdlclwiO1xuaW1wb3J0IHtHb2xkZW5TdW59IGZyb20gXCIuLi9Hb2xkZW5TdW5cIjtcbmltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuaW1wb3J0IHtUYXJnZXR9IGZyb20gXCIuLi9iYXR0bGUvQmF0dGxlU3RhZ2VcIjtcbmltcG9ydCB7SXRlbSwgdXNlX3R5cGVzfSBmcm9tIFwiLi4vSXRlbVwiO1xuXG4vKiBBQ1RJT05TOlxuLSBBdHRhY2tcbi0gUHN5bmVyZ3lcbi0gRGppbm5pIFVzZVxuLSBEamlubmkgUmVjb3Zlcnlcbi0gSXRlbVxuLSBFbmVteSBBY3Rpb25cbi0gRGVmZW5kXG4tIFRvdGFsIERlZmVuc2UgKHllcywgdGhpcyBpcyBkZWZpbmVkIGRpZmZlcmVudGx5IGZyb20gRGVmZW5kIGZvciBzb21lIHJlYXNvbilcbi0gQ291bnRlcmF0dGFja1xuLSBEYWVkYWx1c1xuLSBSZXRyZWF0XG4qL1xuXG5lbnVtIGJhdHRsZV9waGFzZXMge1xuICAgIE5PTkUsIC8vIChub3QgaW4gYSBiYXR0bGUpXG4gICAgU1RBUlQsIC8vIFN0YXJ0IChjYW1lcmEgcGFuLCBzaG93cyBlbmVtaWVzLCBtb3ZlIHRvIG1lbnUpXG4gICAgTUVOVSwgLy8gKGluY2x1ZGVzIHN1Ym1lbnVzLCB0aGlzIHBoYXNlIGRvZXNuJ3QgZW5kIHVudGlsIHRoZSBwbGF5ZXIgaGFzIGVudGVyZWQgdGhlaXIgZmluYWwgY29tbWFuZClcbiAgICBST1VORF9TVEFSVCwgLy8gU3RhcnQgKHR1cm4gb3JkZXIgaXMgZGV0ZXJtaW5lZCwgZW5lbWllcyBtYXkgY29tbWl0IHRvIGNlcnRhaW4gYWN0aW9ucylcbiAgICBDT01CQVQsIC8vIChhbGwgYWN0aW9ucyBhcmUgcXVldWVkIGFuZCB0YWtlIHBsYWNlIGhlcmUsIHlvdSBjb3VsZCBmdXJ0aGVyIGJyZWFrIHVwIGNvbWJhdCBhY3Rpb25zIGludG8gc3ViYWN0aW9ucywgd2hpY2ggc2hvdWxkIGJlIGdvdmVybmVkIGJ5IGEgc2VwYXJhdGUgc3ViLXN0YXRlIHZhcmlhYmxlKVxuICAgIFJPVU5EX0VORCwgLy8gRW5kIChkamlubiByZWNvdmVyeSwgc3RhdHVzL2J1ZmYvZGVidWZmIHRpbWVycyBkZWNyZW1lbnQpXG4gICAgRU5ELCAvLyBFbmQgKHRoZSBsYXN0IGVuZW15IGhhcyBmYWxsZW4sIGV4cC9nb2xkL2Ryb3BzIGFyZSBhd2FyZGVkKVxufVxuXG5leHBvcnQgdHlwZSBQbGF5ZXJJbmZvID0ge1xuICAgIHNwcml0ZV9rZXk6IHN0cmluZztcbiAgICBzY2FsZT86IG51bWJlcjtcbiAgICBpbnN0YW5jZT86IEVuZW15IHwgTWFpbkNoYXI7XG4gICAgZW50ZXJlZF9pbl9iYXR0bGU/OiBib29sZWFuO1xuICAgIGJhdHRsZV9rZXk/OiBzdHJpbmc7XG4gICAgc3ByaXRlPzogUGhhc2VyLlNwcml0ZTtcbn07XG5cbmV4cG9ydCB0eXBlIEVuZW15UGFydHlNZW1iZXIgPSB7XG4gICAga2V5OiBzdHJpbmc7XG4gICAgbWluOiBudW1iZXI7XG4gICAgbWF4OiBudW1iZXI7XG59O1xuXG5leHBvcnQgY2xhc3MgQmF0dGxlIHtcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IE1BWF9DSEFSU19JTl9CQVRUTEUgPSA0O1xuXG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOiBHb2xkZW5TdW47XG5cbiAgICBwdWJsaWMgYWxsaWVzX2luZm86IFBsYXllckluZm9bXTtcbiAgICBwdWJsaWMgZW5lbWllc19wYXJ0eV9uYW1lOiBzdHJpbmc7XG4gICAgcHVibGljIGVuZW1pZXNfaW5mbzogUGxheWVySW5mb1tdO1xuICAgIHB1YmxpYyB0aGlzX2VuZW1pZXNfbGlzdDoge1tiYXR0bGVfa2V5OiBzdHJpbmddOiBFbmVteX07XG5cbiAgICBwdWJsaWMgYmF0dGxlX3N0YWdlOiBCYXR0bGVTdGFnZTtcbiAgICBwdWJsaWMgYmF0dGxlX2xvZzogQmF0dGxlTG9nO1xuICAgIHB1YmxpYyBiYXR0bGVfbWVudTogTWFpbkJhdHRsZU1lbnU7XG5cbiAgICBwdWJsaWMgdGFyZ2V0X3dpbmRvdzogQ2hvb3NpbmdUYXJnZXRXaW5kb3c7XG4gICAgcHVibGljIGFuaW1hdGlvbl9tYW5hZ2VyOiBCYXR0bGVBbmltYXRpb25NYW5hZ2VyO1xuXG4gICAgcHVibGljIGJhdHRsZV9waGFzZTogbnVtYmVyO1xuICAgIHB1YmxpYyBvbl9nb2luZ19lZmZlY3RzOiBFZmZlY3RbXTtcbiAgICBwdWJsaWMgYWxsaWVzX2RlZmVhdGVkOiBib29sZWFuO1xuICAgIHB1YmxpYyBlbmVtaWVzX2RlZmVhdGVkOiBib29sZWFuO1xuICAgIHB1YmxpYyBiYXR0bGVfZmluaXNoaW5nOiBib29sZWFuO1xuXG4gICAgcHVibGljIGFkdmFuY2VfbG9nX3Jlc29sdmU6IEZ1bmN0aW9uO1xuICAgIHB1YmxpYyBhZHZhbmNlX2xvZ19jb250cm9sX2tleTogbnVtYmVyO1xuICAgIHB1YmxpYyBhbGxpZXNfYWJpbGl0aWVzOiBQbGF5ZXJBYmlsaXRpZXM7XG4gICAgcHVibGljIGVuZW1pZXNfYWJpbGl0aWVzOiBQbGF5ZXJBYmlsaXRpZXM7XG4gICAgcHVibGljIHR1cm5zX2FjdGlvbnM6IFBsYXllckFiaWxpdHlbXTtcblxuICAgIHB1YmxpYyBhbGxpZXNfbWFwX3Nwcml0ZToge1twbGF5ZXJfa2V5OiBzdHJpbmddOiBQaGFzZXIuU3ByaXRlfTtcbiAgICBwdWJsaWMgZW5lbWllc19tYXBfc3ByaXRlOiB7W3BsYXllcl9rZXk6IHN0cmluZ106IFBoYXNlci5TcHJpdGV9O1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZTogUGhhc2VyLkdhbWUsIGRhdGE6IEdvbGRlblN1biwgYmFja2dyb3VuZF9rZXk6IHN0cmluZywgZW5lbXlfcGFydHlfa2V5OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcblxuICAgICAgICB0aGlzLmFsbGllc19pbmZvID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzLnNsaWNlKDAsIEJhdHRsZS5NQVhfQ0hBUlNfSU5fQkFUVExFKS5tYXAoY2hhciA9PiB7XG4gICAgICAgICAgICBjaGFyLmluaXRfZWZmZWN0X3R1cm5zX2NvdW50KCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHNwcml0ZV9rZXk6IGNoYXIuc3ByaXRlX2Jhc2UuZ2V0QWN0aW9uS2V5KGJhc2VfYWN0aW9ucy5CQVRUTEUpLFxuICAgICAgICAgICAgICAgIHNjYWxlOiBjaGFyLmJhdHRsZV9zY2FsZSxcbiAgICAgICAgICAgICAgICBpbnN0YW5jZTogY2hhcixcbiAgICAgICAgICAgICAgICBlbnRlcmVkX2luX2JhdHRsZTogdHJ1ZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGVuZW1pZXNfcGFydHlfZGF0YSA9IHRoaXMuZGF0YS5kYnMuZW5lbWllc19wYXJ0aWVzX2RiW2VuZW15X3BhcnR5X2tleV07XG4gICAgICAgIHRoaXMuZW5lbWllc19wYXJ0eV9uYW1lID0gZW5lbWllc19wYXJ0eV9kYXRhLm5hbWU7XG4gICAgICAgIHRoaXMuZW5lbWllc19pbmZvID0gW107XG4gICAgICAgIHRoaXMudGhpc19lbmVtaWVzX2xpc3QgPSB7fTtcblxuICAgICAgICBsZXQgYmF0dGxlX2tleXNfY291bnQgPSB7fTtcbiAgICAgICAgbGV0IGNvdW50ZXIgPSAwO1xuXG4gICAgICAgIGVuZW1pZXNfcGFydHlfZGF0YS5tZW1iZXJzLmZvckVhY2goKG1lbWJlcl9pbmZvOiBFbmVteVBhcnR5TWVtYmVyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBxdGQgPSBfLnJhbmRvbShtZW1iZXJfaW5mby5taW4sIG1lbWJlcl9pbmZvLm1heCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHF0ZDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmVtaWVzX2luZm8ucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHNwcml0ZV9rZXk6IG1lbWJlcl9pbmZvLmtleSArIFwiX2JhdHRsZVwiLFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZW5lbWllc19pbmZvW2NvdW50ZXJdLnNwcml0ZV9rZXkgaW4gYmF0dGxlX2tleXNfY291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgYmF0dGxlX2tleXNfY291bnRbdGhpcy5lbmVtaWVzX2luZm9bY291bnRlcl0uc3ByaXRlX2tleV0gKz0gMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBiYXR0bGVfa2V5c19jb3VudFt0aGlzLmVuZW1pZXNfaW5mb1tjb3VudGVyXS5zcHJpdGVfa2V5XSA9IDE7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IGJhdHRsZV9rZXlfc3VmZml4ID0gXCJcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZV9zdWZmaXggPSBcIlwiO1xuICAgICAgICAgICAgICAgIGlmIChiYXR0bGVfa2V5c19jb3VudFt0aGlzLmVuZW1pZXNfaW5mb1tjb3VudGVyXS5zcHJpdGVfa2V5XSA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgYmF0dGxlX2tleV9zdWZmaXggPSBcIl9cIiArIGJhdHRsZV9rZXlzX2NvdW50W3RoaXMuZW5lbWllc19pbmZvW2NvdW50ZXJdLnNwcml0ZV9rZXldLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIG5hbWVfc3VmZml4ID0gXCIgXCIgKyBiYXR0bGVfa2V5c19jb3VudFt0aGlzLmVuZW1pZXNfaW5mb1tjb3VudGVyXS5zcHJpdGVfa2V5XS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuZW5lbWllc19pbmZvW2NvdW50ZXJdLmluc3RhbmNlID0gZ2V0X2VuZW15X2luc3RhbmNlKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaW5mby5lbmVtaWVzX2xpc3RbbWVtYmVyX2luZm8ua2V5XS5kYXRhLFxuICAgICAgICAgICAgICAgICAgICBuYW1lX3N1ZmZpeFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmVtaWVzX2luZm9bY291bnRlcl0uc2NhbGUgPSB0aGlzLmVuZW1pZXNfaW5mb1tjb3VudGVyXS5pbnN0YW5jZS5iYXR0bGVfc2NhbGU7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmVtaWVzX2luZm9bY291bnRlcl0uYmF0dGxlX2tleSA9IHRoaXMuZW5lbWllc19pbmZvW2NvdW50ZXJdLnNwcml0ZV9rZXkgKyBiYXR0bGVfa2V5X3N1ZmZpeDtcbiAgICAgICAgICAgICAgICB0aGlzLnRoaXNfZW5lbWllc19saXN0W3RoaXMuZW5lbWllc19pbmZvW2NvdW50ZXJdLmJhdHRsZV9rZXldID0gdGhpcy5lbmVtaWVzX2luZm9bY291bnRlcl1cbiAgICAgICAgICAgICAgICAgICAgLmluc3RhbmNlIGFzIEVuZW15O1xuXG4gICAgICAgICAgICAgICAgKytjb3VudGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmJhdHRsZV9zdGFnZSA9IG5ldyBCYXR0bGVTdGFnZSh0aGlzLmdhbWUsIHRoaXMuZGF0YSwgYmFja2dyb3VuZF9rZXksIHRoaXMuYWxsaWVzX2luZm8sIHRoaXMuZW5lbWllc19pbmZvKTtcbiAgICAgICAgdGhpcy5iYXR0bGVfbG9nID0gbmV3IEJhdHRsZUxvZyh0aGlzLmdhbWUpO1xuICAgICAgICB0aGlzLmJhdHRsZV9tZW51ID0gbmV3IE1haW5CYXR0bGVNZW51KFxuICAgICAgICAgICAgdGhpcy5nYW1lLFxuICAgICAgICAgICAgdGhpcy5kYXRhLFxuICAgICAgICAgICAgdGhpcy5vbl9hYmlsaXRpZXNfY2hvb3NlLmJpbmQodGhpcyksXG4gICAgICAgICAgICB0aGlzLmNob29zZV90YXJnZXRzLmJpbmQodGhpcylcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLnRhcmdldF93aW5kb3cgPSBuZXcgQ2hvb3NpbmdUYXJnZXRXaW5kb3codGhpcy5nYW1lLCB0aGlzLmRhdGEpO1xuICAgICAgICB0aGlzLmFuaW1hdGlvbl9tYW5hZ2VyID0gbmV3IEJhdHRsZUFuaW1hdGlvbk1hbmFnZXIodGhpcy5nYW1lLCB0aGlzLmRhdGEpO1xuXG4gICAgICAgIHRoaXMuYmF0dGxlX3BoYXNlID0gYmF0dGxlX3BoYXNlcy5OT05FO1xuICAgICAgICB0aGlzLm9uX2dvaW5nX2VmZmVjdHMgPSBbXTtcbiAgICAgICAgdGhpcy5hbGxpZXNfZGVmZWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5lbmVtaWVzX2RlZmVhdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYmF0dGxlX2ZpbmlzaGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHN0YXJ0X2JhdHRsZSgpIHtcbiAgICAgICAgdGhpcy5jaGVja19waGFzZXMoKTtcbiAgICB9XG5cbiAgICBvbl9hYmlsaXRpZXNfY2hvb3NlKGFiaWxpdGllczogUGxheWVyQWJpbGl0aWVzKSB7XG4gICAgICAgIHRoaXMuYWxsaWVzX2FiaWxpdGllcyA9IGFiaWxpdGllcztcblxuICAgICAgICB0aGlzLmJhdHRsZV9tZW51LmNsb3NlX21lbnUoKTtcbiAgICAgICAgdGhpcy5iYXR0bGVfc3RhZ2UucmVzZXRfcG9zaXRpb25zKCk7XG5cbiAgICAgICAgdGhpcy5iYXR0bGVfc3RhZ2UuY2hvb3NpbmdfYWN0aW9ucyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmJhdHRsZV9waGFzZSA9IGJhdHRsZV9waGFzZXMuUk9VTkRfU1RBUlQ7XG5cbiAgICAgICAgdGhpcy5jaGVja19waGFzZXMoKTtcbiAgICB9XG5cbiAgICBjaG9vc2VfdGFyZ2V0cyhhYmlsaXR5X2tleTogc3RyaW5nLCBhY3Rpb246IHN0cmluZywgY2FsbGJhY2s6IEZ1bmN0aW9uLCBjYXN0ZXI6IFBsYXllciwgaXRlbV9vYmo6IEl0ZW1TbG90KSB7XG4gICAgICAgIGNvbnN0IHRoaXNfYWJpbGl0eSA9IHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W2FiaWxpdHlfa2V5XTtcblxuICAgICAgICBsZXQgcXVhbnRpdGllczogbnVtYmVyW107XG4gICAgICAgIGlmIChhY3Rpb24gPT09IFwicHN5bmVyZ3lcIikge1xuICAgICAgICAgICAgcXVhbnRpdGllcyA9IFt0aGlzX2FiaWxpdHkucHBfY29zdF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFjdGlvbiAhPT0gXCJkZWZlbmRcIikge1xuICAgICAgICAgICAgdGhpcy50YXJnZXRfd2luZG93Lm9wZW4oYWN0aW9uLCB0aGlzX2FiaWxpdHkubmFtZSwgdGhpc19hYmlsaXR5LmVsZW1lbnQsIGFiaWxpdHlfa2V5LCBxdWFudGl0aWVzLCBpdGVtX29iaik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJhdHRsZV9zdGFnZS5jaG9vc2VfdGFyZ2V0cyhcbiAgICAgICAgICAgIHRoaXNfYWJpbGl0eS5yYW5nZSxcbiAgICAgICAgICAgIHRoaXNfYWJpbGl0eS5iYXR0bGVfdGFyZ2V0LFxuICAgICAgICAgICAgdGhpc19hYmlsaXR5LnR5cGUsXG4gICAgICAgICAgICBjYXN0ZXIsXG4gICAgICAgICAgICAodGFyZ2V0czogVGFyZ2V0W10pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50YXJnZXRfd2luZG93LndpbmRvd19vcGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0X3dpbmRvdy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYWxsYmFjayh0YXJnZXRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBjaGVja19wYXJ0aWVzKCkge1xuICAgICAgICB0aGlzLmFsbGllc19kZWZlYXRlZCA9IHRoaXMuYWxsaWVzX2luZm8uZXZlcnkocGxheWVyID0+XG4gICAgICAgICAgICBwbGF5ZXIuaW5zdGFuY2UuaGFzX3Blcm1hbmVudF9zdGF0dXMocGVybWFuZW50X3N0YXR1cy5ET1dORUQpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZW5lbWllc19kZWZlYXRlZCA9IHRoaXMuZW5lbWllc19pbmZvLmV2ZXJ5KHBsYXllciA9PlxuICAgICAgICAgICAgcGxheWVyLmluc3RhbmNlLmhhc19wZXJtYW5lbnRfc3RhdHVzKHBlcm1hbmVudF9zdGF0dXMuRE9XTkVEKVxuICAgICAgICApO1xuXG4gICAgICAgIGlmICh0aGlzLmFsbGllc19kZWZlYXRlZCB8fCB0aGlzLmVuZW1pZXNfZGVmZWF0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYmF0dGxlX3BoYXNlID0gYmF0dGxlX3BoYXNlcy5FTkQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjaGVja19waGFzZXMoKSB7XG4gICAgICAgIHRoaXMuY2hlY2tfcGFydGllcygpO1xuICAgICAgICBzd2l0Y2ggKHRoaXMuYmF0dGxlX3BoYXNlKSB7XG4gICAgICAgICAgICBjYXNlIGJhdHRsZV9waGFzZXMuTk9ORTpcbiAgICAgICAgICAgICAgICB0aGlzLmJhdHRsZV9waGFzZV9ub25lKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGJhdHRsZV9waGFzZXMuU1RBUlQ6XG4gICAgICAgICAgICBjYXNlIGJhdHRsZV9waGFzZXMuTUVOVTpcbiAgICAgICAgICAgICAgICB0aGlzLmJhdHRsZV9waGFzZV9tZW51KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGJhdHRsZV9waGFzZXMuUk9VTkRfU1RBUlQ6XG4gICAgICAgICAgICAgICAgdGhpcy5iYXR0bGVfcGhhc2Vfcm91bmRfc3RhcnQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgYmF0dGxlX3BoYXNlcy5DT01CQVQ6XG4gICAgICAgICAgICAgICAgdGhpcy5iYXR0bGVfcGhhc2VfY29tYmF0KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGJhdHRsZV9waGFzZXMuUk9VTkRfRU5EOlxuICAgICAgICAgICAgICAgIHRoaXMuYmF0dGxlX3BoYXNlX3JvdW5kX2VuZCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBiYXR0bGVfcGhhc2VzLkVORDpcbiAgICAgICAgICAgICAgICB0aGlzLmJhdHRsZV9waGFzZV9lbmQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGJhdHRsZV9waGFzZV9ub25lKCkge1xuICAgICAgICB0aGlzLmdhbWUucGh5c2ljcy5wMi5wYXVzZSgpO1xuXG4gICAgICAgIHRoaXMuYmF0dGxlX3BoYXNlID0gYmF0dGxlX3BoYXNlcy5TVEFSVDtcbiAgICAgICAgdGhpcy5kYXRhLmluX2JhdHRsZSA9IHRydWU7XG4gICAgICAgIHRoaXMuZGF0YS5iYXR0bGVfaW5zdGFuY2UgPSB0aGlzO1xuXG4gICAgICAgIHRoaXMuYWR2YW5jZV9sb2dfY29udHJvbF9rZXkgPSB0aGlzLmRhdGEuY29udHJvbF9tYW5hZ2VyLnNpbXBsZV9pbnB1dChcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hZHZhbmNlX2xvZ19yZXNvbHZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWR2YW5jZV9sb2dfcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkdmFuY2VfbG9nX3Jlc29sdmUgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7cGVyc2lzdDogdHJ1ZX1cbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmJhdHRsZV9sb2cuYWRkKHRoaXMuZW5lbWllc19wYXJ0eV9uYW1lICsgXCIgYXBwZWFyZWQhXCIpO1xuICAgICAgICB0aGlzLmJhdHRsZV9zdGFnZS5pbml0aWFsaXplX3N0YWdlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWxsaWVzX21hcF9zcHJpdGUgPSBfLm1hcFZhbHVlcyhfLmtleUJ5KHRoaXMuYWxsaWVzX2luZm8sIFwiaW5zdGFuY2Uua2V5X25hbWVcIiksIGluZm8gPT4gaW5mby5zcHJpdGUpO1xuICAgICAgICAgICAgdGhpcy5lbmVtaWVzX21hcF9zcHJpdGUgPSBfLm1hcFZhbHVlcyhfLmtleUJ5KHRoaXMuZW5lbWllc19pbmZvLCBcImluc3RhbmNlLmtleV9uYW1lXCIpLCBpbmZvID0+IGluZm8uc3ByaXRlKTtcblxuICAgICAgICAgICAgdGhpcy5kYXRhLmNvbnRyb2xfbWFuYWdlci5zaW1wbGVfaW5wdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYmF0dGxlX2xvZy5jbGVhcigpO1xuICAgICAgICAgICAgICAgIHRoaXMuYmF0dGxlX3BoYXNlID0gYmF0dGxlX3BoYXNlcy5NRU5VO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tfcGhhc2VzKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYmF0dGxlX3BoYXNlX21lbnUoKSB7XG4gICAgICAgIHRoaXMuYmF0dGxlX3N0YWdlLnNldF9jaG9vc2luZ19hY3Rpb25fcG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy5iYXR0bGVfbWVudS5vcGVuX21lbnUoKTtcbiAgICB9XG5cbiAgICAvKlxuICAgIEF0IHJvdW5kIHN0YXJ0LCBpcyBjYWxjdWxhdGVkIHRoZSBwbGF5ZXJzIGFuZCBlbmVtaWVzIHNwZWVkcy5cbiAgICBJZiBhIGNlcnRhaW4gcGxheWVyIHNwZWVkIGlzIHRoZSBzYW1lIG9mIGEgZW5lbXksIHBsYXllciBnb2VzIGZpcnN0LlxuICAgIElmIGFub3RoZXIgdGllLCB0aGUgbW9zdCBsZWZ0IGNoYXIgaGFzIHByaW9yaXR5LlxuICAgIEF0IGEgc3BlY2lmaWMgZW5lbXkgdHVybiBzdGFydCwgSSByb2xsIGFuIGFjdGlvbiBmb3IgdGhhdCB0dXJuLlxuICAgIFRoZSBvbmx5IHRoaW5nIG5lZWRlZCB0byBjaGVjayBhYm91dCBlbmVtaWVzIGFjdGlvbnMgYXQgcm91bmQgc3RhcnQgaXM6XG4gICAgICAgIC0gUm9sbCB0aGVpciBhY3Rpb25zIGZvciBlYWNoIHR1cm4gYW5kIHNlZSBpZiBhbiBhYmlsaXR5IHdpdGggcHJpb3JpdHkgbW92ZSBpcyByb2xsZWQuXG4gICAgICAgIC0gSWYgeWVzLCB0aGlzIGFiaWxpdHkgaXMgZml4ZWQgZm9yIHRoYXQgY29ycmVzcG9uZGluZyB0dXJuLlxuICAgIEZvciB0aGUgb3RoZXIgdHVybnMsIGFuIGFjdGlvbiBpcyByZS1yb2xsIGluIHRoZSB0dXJuIHN0YXJ0IHRvIGJlIHVzZWQgb24gaXQuXG4gICAgKi9cbiAgICBhc3luYyBiYXR0bGVfcGhhc2Vfcm91bmRfc3RhcnQoKSB7XG4gICAgICAgIGNvbnN0IGVuZW15X21lbWJlcnMgPSB0aGlzLmVuZW1pZXNfaW5mby5tYXAoaW5mbyA9PiBpbmZvLmluc3RhbmNlKTtcbiAgICAgICAgdGhpcy5lbmVtaWVzX2FiaWxpdGllcyA9IE9iamVjdC5mcm9tRW50cmllcyhcbiAgICAgICAgICAgIGVuZW15X21lbWJlcnMubWFwKChlbmVteSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgYWJpbGl0aWVzID0gbmV3IEFycmF5KGVuZW15LnR1cm5zKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVuZW15LnR1cm5zOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgYWJpbGl0aWVzW2ldID0gRW5lbXlBSS5yb2xsX2FjdGlvbihlbmVteSwgdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzLCBlbmVteV9tZW1iZXJzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFt0aGlzLmVuZW1pZXNfaW5mb1tpbmRleF0uYmF0dGxlX2tleSwgYWJpbGl0aWVzXTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG5cbiAgICAgICAgZm9yIChsZXQgY2hhcl9rZXkgaW4gdGhpcy5hbGxpZXNfYWJpbGl0aWVzKSB7XG4gICAgICAgICAgICBjb25zdCB0aGlzX2NoYXIgPSB0aGlzLmRhdGEuaW5mby5tYWluX2NoYXJfbGlzdFtjaGFyX2tleV07XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYWxsaWVzX2FiaWxpdGllc1tjaGFyX2tleV0ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0aGlzX2FiaWxpdHkgPSB0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFt0aGlzLmFsbGllc19hYmlsaXRpZXNbY2hhcl9rZXldW2ldLmtleV9uYW1lXTtcbiAgICAgICAgICAgICAgICBjb25zdCBwcmlvcml0eV9tb3ZlID0gdGhpc19hYmlsaXR5ICE9PSB1bmRlZmluZWQgPyB0aGlzX2FiaWxpdHkucHJpb3JpdHlfbW92ZSA6IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5hbGxpZXNfYWJpbGl0aWVzW2NoYXJfa2V5XVtpXS5zcGVlZCA9IEJhdHRsZUZvcm11bGFzLnBsYXllcl90dXJuX3NwZWVkKFxuICAgICAgICAgICAgICAgICAgICB0aGlzX2NoYXIuYWdpLFxuICAgICAgICAgICAgICAgICAgICBwcmlvcml0eV9tb3ZlLFxuICAgICAgICAgICAgICAgICAgICBpID4gMFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5hbGxpZXNfYWJpbGl0aWVzW2NoYXJfa2V5XVtpXS5jYXN0ZXIgPSB0aGlzX2NoYXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBiYXR0bGVfa2V5IGluIHRoaXMuZW5lbWllc19hYmlsaXRpZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHRoaXNfZW5lbXkgPSB0aGlzLnRoaXNfZW5lbWllc19saXN0W2JhdHRsZV9rZXldO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmVuZW1pZXNfYWJpbGl0aWVzW2JhdHRsZV9rZXldLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGhpc19hYmlsaXR5ID0gdGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3RbdGhpcy5lbmVtaWVzX2FiaWxpdGllc1tiYXR0bGVfa2V5XVtpXS5rZXlfbmFtZV07XG4gICAgICAgICAgICAgICAgY29uc3QgcHJpb3JpdHlfbW92ZSA9IHRoaXNfYWJpbGl0eSAhPT0gdW5kZWZpbmVkID8gdGhpc19hYmlsaXR5LnByaW9yaXR5X21vdmUgOiBmYWxzZTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZW5lbWllc19hYmlsaXRpZXNbYmF0dGxlX2tleV1baV0uc3BlZWQgPSBCYXR0bGVGb3JtdWxhcy5lbmVteV90dXJuX3NwZWVkKFxuICAgICAgICAgICAgICAgICAgICB0aGlzX2VuZW15LmFnaSxcbiAgICAgICAgICAgICAgICAgICAgaSArIDEsXG4gICAgICAgICAgICAgICAgICAgIHRoaXNfZW5lbXkudHVybnMsXG4gICAgICAgICAgICAgICAgICAgIHByaW9yaXR5X21vdmVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuZW5lbWllc19hYmlsaXRpZXNbYmF0dGxlX2tleV1baV0uY2FzdGVyID0gdGhpc19lbmVteTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudHVybnNfYWN0aW9ucyA9IF8uc29ydEJ5KFxuICAgICAgICAgICAgT2JqZWN0LnZhbHVlcyh0aGlzLmFsbGllc19hYmlsaXRpZXMpLmZsYXQoKS5jb25jYXQoT2JqZWN0LnZhbHVlcyh0aGlzLmVuZW1pZXNfYWJpbGl0aWVzKS5mbGF0KCkpLFxuICAgICAgICAgICAgYWN0aW9uID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWN0aW9uLnNwZWVkOyAvL3N0aWxsIG5lZWQgdG8gYWRkIGxlZnQgbW9zdCBhbmQgcGxheWVyIHByZWZlcmVuY2UgY3JpdGVyaWFzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnR1cm5zX2FjdGlvbnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGFjdGlvbiA9IHRoaXMudHVybnNfYWN0aW9uc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IGFiaWxpdHkgPSB0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFthY3Rpb24ua2V5X25hbWVdO1xuXG4gICAgICAgICAgICBsZXQgYmF0dGxlX2FuaW1hdGlvbl9rZXkgPSB0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFthY3Rpb24ua2V5X25hbWVdLmJhdHRsZV9hbmltYXRpb25fa2V5O1xuICAgICAgICAgICAgaWYgKGFiaWxpdHkuaGFzX2FuaW1hdGlvbl92YXJpYXRpb24gJiYgYWN0aW9uLmtleV9uYW1lIGluIGFjdGlvbi5jYXN0ZXIuYmF0dGxlX2FuaW1hdGlvbnNfdmFyaWF0aW9ucykge1xuICAgICAgICAgICAgICAgIGJhdHRsZV9hbmltYXRpb25fa2V5ID0gYWN0aW9uLmNhc3Rlci5iYXR0bGVfYW5pbWF0aW9uc192YXJpYXRpb25zW2FjdGlvbi5rZXlfbmFtZV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFjdGlvbi5iYXR0bGVfYW5pbWF0aW9uX2tleSA9IGJhdHRsZV9hbmltYXRpb25fa2V5O1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5hbmltYXRpb25fbWFuYWdlci5sb2FkX2FuaW1hdGlvbihiYXR0bGVfYW5pbWF0aW9uX2tleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iYXR0bGVfcGhhc2UgPSBiYXR0bGVfcGhhc2VzLkNPTUJBVDtcbiAgICAgICAgdGhpcy5jaGVja19waGFzZXMoKTtcbiAgICB9XG5cbiAgICB3YWl0X2Zvcl9rZXkoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWR2YW5jZV9sb2dfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFzeW5jIGNoZWNrX2Rvd25lZCh0YXJnZXQ6IEVuZW15IHwgTWFpbkNoYXIpIHtcbiAgICAgICAgaWYgKHRhcmdldC5jdXJyZW50X2hwID09PSAwKSB7XG4gICAgICAgICAgICB0YXJnZXQuYWRkX3Blcm1hbmVudF9zdGF0dXMocGVybWFuZW50X3N0YXR1cy5ET1dORUQpO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmJhdHRsZV9sb2cuYWRkKG9uX2NhdGNoX3N0YXR1c19tc2dbcGVybWFuZW50X3N0YXR1cy5ET1dORURdKHRhcmdldCkpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qXG4gICAgU3RhbmRhcmQgYXR0YWNrOlxuICAgIDEuIFVubGVhc2ggY2hlY2sgKGZvbGxvd2VkIGJ5IGFub3RoZXIgY2hlY2sgZm9yIHVubGVhc2ggdHlwZSBpZiB3ZWFwb24gaGFzIG11bHRpcGxlIHVubGVhc2hlcylcbiAgICAyLiBNaXNzIGNoZWNrXG4gICAgMy4gQ3JpdCBjaGVjayAxICAodXNpbmcgYnJuICUgMzIpXG4gICAgNC4gQ3JpdCBjaGVjayAyICh1c2luZyB0b3RhbCBjcml0IGNoYW5jZSBmcm9tIGVxdWlwbWVudCwgKChlcXVpcG1lbnRfY2hhbmNlLzIpKnJhbmQoMCw2NTUzNSkgPj4gMTYpXG4gICAgNS4gU3RhdHVzIGVmZmVjdCBjaGVja1xuICAgIDYuIEFkZGVkIDAtMyBkYW1hZ2VcbiAgICBJZiBhbnkgb2YgY2hlY2tzIDEtNCBzdWNjZWVkLCBpdCBza2lwcyB0byA1XG4gICAgKi9cbiAgICBhc3luYyBiYXR0bGVfcGhhc2VfY29tYmF0KCkge1xuICAgICAgICBpZiAoIXRoaXMudHVybnNfYWN0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuYmF0dGxlX3BoYXNlID0gYmF0dGxlX3BoYXNlcy5ST1VORF9FTkQ7XG4gICAgICAgICAgICB0aGlzLmNoZWNrX3BoYXNlcygpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYWN0aW9uID0gdGhpcy50dXJuc19hY3Rpb25zLnBvcCgpO1xuICAgICAgICBpZiAoYWN0aW9uLmNhc3Rlci5oYXNfcGVybWFuZW50X3N0YXR1cyhwZXJtYW5lbnRfc3RhdHVzLkRPV05FRCkpIHtcbiAgICAgICAgICAgIC8vY2hlY2sgd2hldGhlciB0aGlzIGNoYXIgaXMgZG93bmVkXG4gICAgICAgICAgICB0aGlzLmNoZWNrX3BoYXNlcygpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhY3Rpb24uY2FzdGVyLmlzX3BhcmFseXplZCgpKSB7XG4gICAgICAgICAgICAvL2NoZWNrIHdoZXRoZXIgdGhpcyBjaGFyIGlzIHBhcmFseXplZFxuICAgICAgICAgICAgaWYgKGFjdGlvbi5jYXN0ZXIudGVtcG9yYXJ5X3N0YXR1cy5oYXModGVtcG9yYXJ5X3N0YXR1cy5TTEVFUCkpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmJhdHRsZV9sb2cuYWRkKGAke2FjdGlvbi5jYXN0ZXIubmFtZX0gaXMgYXNsZWVwIWApO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24uY2FzdGVyLnRlbXBvcmFyeV9zdGF0dXMuaGFzKHRlbXBvcmFyeV9zdGF0dXMuU1RVTikpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmJhdHRsZV9sb2cuYWRkKGAke2FjdGlvbi5jYXN0ZXIubmFtZX0gaXMgcGFyYWx5emVkIGFuZCBjYW5ub3QgbW92ZSFgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tfcGhhc2VzKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBhY3Rpb24uY2FzdGVyLmZpZ2h0ZXJfdHlwZSA9PT0gZmlnaHRlcl90eXBlcy5FTkVNWSAmJlxuICAgICAgICAgICAgIXRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W2FjdGlvbi5rZXlfbmFtZV0ucHJpb3JpdHlfbW92ZVxuICAgICAgICApIHtcbiAgICAgICAgICAgIC8vcmVyb2xsIGVuZW15IGFiaWxpdHlcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgICAgICAgIEVuZW15QUkucm9sbF9hY3Rpb24oXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbi5jYXN0ZXIsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVycyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbmVtaWVzX2luZm8ubWFwKGluZm8gPT4gaW5mby5pbnN0YW5jZSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGFiaWxpdHkgPSB0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFthY3Rpb24ua2V5X25hbWVdO1xuICAgICAgICBsZXQgaXRlbV9uYW1lID0gYWN0aW9uLml0ZW1fc2xvdCA/IHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbYWN0aW9uLml0ZW1fc2xvdC5rZXlfbmFtZV0ubmFtZSA6IFwiXCI7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgYWN0aW9uLmNhc3Rlci5maWdodGVyX3R5cGUgPT09IGZpZ2h0ZXJfdHlwZXMuQUxMWSAmJlxuICAgICAgICAgICAgYWJpbGl0eSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICBhYmlsaXR5LmNhbl9zd2l0Y2hfdG9fdW5sZWFzaFxuICAgICAgICApIHtcbiAgICAgICAgICAgIC8vY2hhbmdlIHRoZSBjdXJyZW50IGFiaWxpdHkgdG8gdW5sZWFzaCBhYmlsaXR5IGZyb20gd2VhcG9uXG4gICAgICAgICAgICBjb25zdCBjYXN0ZXIgPSBhY3Rpb24uY2FzdGVyIGFzIE1haW5DaGFyO1xuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgY2FzdGVyLmVxdWlwX3Nsb3RzLndlYXBvbiAmJlxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbY2FzdGVyLmVxdWlwX3Nsb3RzLndlYXBvbi5rZXlfbmFtZV0udW5sZWFzaF9hYmlsaXR5XG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBjb25zdCB3ZWFwb24gPSB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W2Nhc3Rlci5lcXVpcF9zbG90cy53ZWFwb24ua2V5X25hbWVdO1xuXG4gICAgICAgICAgICAgICAgaWYgKE1hdGgucmFuZG9tKCkgPCB3ZWFwb24udW5sZWFzaF9yYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1fbmFtZSA9IHdlYXBvbi5uYW1lO1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb24ua2V5X25hbWUgPSB3ZWFwb24udW5sZWFzaF9hYmlsaXR5O1xuICAgICAgICAgICAgICAgICAgICBhYmlsaXR5ID0gdGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3Rbd2VhcG9uLnVubGVhc2hfYWJpbGl0eV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFiaWxpdHkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZChgJHthY3Rpb24ua2V5X25hbWV9IGFiaWxpdHkga2V5IG5vdCByZWdpc3RlcmVkLmApO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tfcGhhc2VzKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBhY3Rpb24uY2FzdGVyLmhhc190ZW1wb3Jhcnlfc3RhdHVzKHRlbXBvcmFyeV9zdGF0dXMuU0VBTCkgJiZcbiAgICAgICAgICAgIGFiaWxpdHkuYWJpbGl0eV9jYXRlZ29yeSA9PT0gYWJpbGl0eV9jYXRlZ29yaWVzLlBTWU5FUkdZXG4gICAgICAgICkge1xuICAgICAgICAgICAgLy9jaGVjayBpZiBpcyBwb3NzaWJsZSB0byBjYXN0IGFiaWxpdHkgZHVlIHRvIHNlYWxcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYmF0dGxlX2xvZy5hZGQoYEJ1dCB0aGUgUHN5bmVyZ3kgd2FzIGJsb2NrZWQhYCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLndhaXRfZm9yX2tleSgpO1xuICAgICAgICAgICAgdGhpcy5jaGVja19waGFzZXMoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhYmlsaXR5LnBwX2Nvc3QgPiBhY3Rpb24uY2FzdGVyLmN1cnJlbnRfcHApIHtcbiAgICAgICAgICAgIC8vY2hlY2sgaWYgY2hhciBoYXMgZW5vdWdoIHBwIHRvIGNhc3QgYWJpbGl0eVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZChgLi4uIEJ1dCBkb2Vzbid0IGhhdmUgZW5vdWdoIFBQIWApO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tfcGhhc2VzKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhY3Rpb24uY2FzdGVyLmN1cnJlbnRfcHAgLT0gYWJpbGl0eS5wcF9jb3N0O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZGppbm5fbmFtZSA9IGFjdGlvbi5kamlubl9rZXlfbmFtZSA/IHRoaXMuZGF0YS5pbmZvLmRqaW5uaV9saXN0W2FjdGlvbi5kamlubl9rZXlfbmFtZV0ubmFtZSA6IHVuZGVmaW5lZDtcbiAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZF9hYmlsaXR5KFxuICAgICAgICAgICAgYWN0aW9uLmNhc3RlcixcbiAgICAgICAgICAgIGFiaWxpdHksXG4gICAgICAgICAgICBpdGVtX25hbWUsXG4gICAgICAgICAgICBkamlubl9uYW1lLFxuICAgICAgICAgICAgYWN0aW9uLml0ZW1fc2xvdCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKGFiaWxpdHkuYWJpbGl0eV9jYXRlZ29yeSA9PT0gYWJpbGl0eV9jYXRlZ29yaWVzLkRKSU5OKSB7XG4gICAgICAgICAgICAvL2NoYW5nZSBkamlubiBzdGF0dXNcbiAgICAgICAgICAgIGlmIChhYmlsaXR5LmVmZmVjdHMuc29tZShlZmZlY3QgPT4gZWZmZWN0LnR5cGUgPT09IGVmZmVjdF90eXBlcy5TRVRfREpJTk4pKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmluZm8uZGppbm5pX2xpc3RbYWN0aW9uLmRqaW5uX2tleV9uYW1lXS5zZXRfc3RhdHVzKFxuICAgICAgICAgICAgICAgICAgICBkamlubl9zdGF0dXMuU0VULFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24uY2FzdGVyIGFzIE1haW5DaGFyXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmluZm8uZGppbm5pX2xpc3RbYWN0aW9uLmtleV9uYW1lXS5zZXRfc3RhdHVzKGRqaW5uX3N0YXR1cy5TVEFOREJZLCBhY3Rpb24uY2FzdGVyIGFzIE1haW5DaGFyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChhYmlsaXR5LmFiaWxpdHlfY2F0ZWdvcnkgPT09IGFiaWxpdHlfY2F0ZWdvcmllcy5TVU1NT04pIHtcbiAgICAgICAgICAgIC8vc29tZSBzdW1tb24gY2hlY2tzXG4gICAgICAgICAgICBjb25zdCByZXF1aXJlbWVudHMgPSB0aGlzLmRhdGEuaW5mby5zdW1tb25zX2xpc3RbYWJpbGl0eS5rZXlfbmFtZV0ucmVxdWlyZW1lbnRzO1xuICAgICAgICAgICAgY29uc3Qgc3RhbmRieV9kamlubmkgPSBEamlubi5nZXRfc3RhbmRieV9kamlubmkoXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmluZm8uZGppbm5pX2xpc3QsXG4gICAgICAgICAgICAgICAgTWFpbkNoYXIuZ2V0X2FjdGl2ZV9wbGF5ZXJzKHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEsIEJhdHRsZS5NQVhfQ0hBUlNfSU5fQkFUVExFKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgY29uc3QgaGFzX2F2YWlsYWJsZV9kamlubmkgPSBfLmV2ZXJ5KHJlcXVpcmVtZW50cywgKHJlcXVpcmVtZW50LCBlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YW5kYnlfZGppbm5pW2VsZW1lbnRdID49IHJlcXVpcmVtZW50O1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICghaGFzX2F2YWlsYWJsZV9kamlubmkpIHtcbiAgICAgICAgICAgICAgICAvL2NoZWNrIGlmIGlzIHBvc3NpYmxlIHRvIGNhc3QgYSBzdW1tb25cbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmJhdHRsZV9sb2cuYWRkKGAke2FjdGlvbi5jYXN0ZXIubmFtZX0gc3VtbW9ucyAke2FiaWxpdHkubmFtZX0gYnV0YCk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZChgZG9lc24ndCBoYXZlIGVub3VnaCBzdGFuZGJ5IERqaW5uIWApO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja19waGFzZXMoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vc2V0IGRqaW5uaSB1c2VkIGluIHRoaXMgc3VtbW9uIHRvIHJlY292ZXJ5IG1vZGVcbiAgICAgICAgICAgICAgICBEamlubi5zZXRfdG9fcmVjb3ZlcnkoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5pbmZvLmRqaW5uaV9saXN0LFxuICAgICAgICAgICAgICAgICAgICBNYWluQ2hhci5nZXRfYWN0aXZlX3BsYXllcnModGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YSwgQmF0dGxlLk1BWF9DSEFSU19JTl9CQVRUTEUpLFxuICAgICAgICAgICAgICAgICAgICByZXF1aXJlbWVudHNcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFjdGlvbi5pdGVtX3Nsb3QpIHtcbiAgICAgICAgICAgIC8vY2hlY2sgaWYgaXRlbSBpcyBicm9rZW5cbiAgICAgICAgICAgIGlmIChhY3Rpb24uaXRlbV9zbG90LmJyb2tlbikge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYmF0dGxlX2xvZy5hZGQoYEJ1dCAke2l0ZW1fbmFtZX0gaXMgYnJva2VuLi4uYCk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrX3BoYXNlcygpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYmF0dGxlX21lbnUuY2hhcnNfc3RhdHVzX3dpbmRvdy51cGRhdGVfY2hhcnNfaW5mbygpO1xuICAgICAgICBpZiAoYWJpbGl0eS50eXBlID09PSBhYmlsaXR5X3R5cGVzLlVUSUxJVFkpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5hbmltYXRpb25fbWFuYWdlci5hbmltYXRpb25fYXZhaWxhYmxlKGFjdGlvbi5iYXR0bGVfYW5pbWF0aW9uX2tleSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhc3Rlcl9zcHJpdGUgPVxuICAgICAgICAgICAgICAgIGFjdGlvbi5jYXN0ZXIuZmlnaHRlcl90eXBlID09PSBmaWdodGVyX3R5cGVzLkFMTFlcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmFsbGllc19tYXBfc3ByaXRlW2FjdGlvbi5jYXN0ZXIua2V5X25hbWVdXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5lbmVtaWVzX21hcF9zcHJpdGVbYWN0aW9uLmNhc3Rlci5rZXlfbmFtZV07XG4gICAgICAgICAgICBjb25zdCB0YXJnZXRfc3ByaXRlcyA9IGFjdGlvbi50YXJnZXRzLmZsYXRNYXAoaW5mbyA9PiAoaW5mby5tYWduaXR1ZGUgPyBbaW5mby50YXJnZXQuc3ByaXRlXSA6IFtdKSk7XG4gICAgICAgICAgICBjb25zdCBncm91cF9jYXN0ZXIgPVxuICAgICAgICAgICAgICAgIGFjdGlvbi5jYXN0ZXIuZmlnaHRlcl90eXBlID09PSBmaWdodGVyX3R5cGVzLkFMTFlcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmJhdHRsZV9zdGFnZS5ncm91cF9hbGxpZXNcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmJhdHRsZV9zdGFnZS5ncm91cF9lbmVtaWVzO1xuICAgICAgICAgICAgY29uc3QgZ3JvdXBfdGFrZXIgPVxuICAgICAgICAgICAgICAgIGFjdGlvbi5jYXN0ZXIuZmlnaHRlcl90eXBlID09PSBmaWdodGVyX3R5cGVzLkFMTFlcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmJhdHRsZV9zdGFnZS5ncm91cF9lbmVtaWVzXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5iYXR0bGVfc3RhZ2UuZ3JvdXBfYWxsaWVzO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5hbmltYXRpb25fbWFuYWdlci5wbGF5KFxuICAgICAgICAgICAgICAgIGFjdGlvbi5iYXR0bGVfYW5pbWF0aW9uX2tleSxcbiAgICAgICAgICAgICAgICBjYXN0ZXJfc3ByaXRlLFxuICAgICAgICAgICAgICAgIHRhcmdldF9zcHJpdGVzLFxuICAgICAgICAgICAgICAgIGdyb3VwX2Nhc3RlcixcbiAgICAgICAgICAgICAgICBncm91cF90YWtlcixcbiAgICAgICAgICAgICAgICB0aGlzLmJhdHRsZV9zdGFnZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuYmF0dGxlX3N0YWdlLnByZXZlbnRfY2FtZXJhX2FuZ2xlX292ZXJmbG93KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmJhdHRsZV9sb2cuYWRkKGBBbmltYXRpb24gZm9yICR7YWJpbGl0eS5uYW1lfSBub3QgYXZhaWxhYmxlLi4uYCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLndhaXRfZm9yX2tleSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9hcHBseSBhYmlsaXR5IGRhbWFnZVxuICAgICAgICBpZiAoIVthYmlsaXR5X3R5cGVzLlVUSUxJVFksIGFiaWxpdHlfdHlwZXMuRUZGRUNUX09OTFldLmluY2x1ZGVzKGFiaWxpdHkudHlwZSkpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYXBwbHlfZGFtYWdlKGFjdGlvbiwgYWJpbGl0eSk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2FwcGx5IGFiaWxpdHkgZWZmZWN0c1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFiaWxpdHkuZWZmZWN0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgZWZmZWN0ID0gYWJpbGl0eS5lZmZlY3RzW2ldO1xuICAgICAgICAgICAgaWYgKCFlZmZlY3RfdXNhZ2VzLk9OX1VTRSkgY29udGludWU7XG4gICAgICAgICAgICBjb25zdCBlbmRfdHVybiA9IGF3YWl0IHRoaXMuYXBwbHlfZWZmZWN0cyhhY3Rpb24sIGFiaWxpdHksIGVmZmVjdCk7XG4gICAgICAgICAgICBpZiAoZW5kX3R1cm4pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJhdHRsZV9waGFzZSA9IGJhdHRsZV9waGFzZXMuUk9VTkRfRU5EO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tfcGhhc2VzKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfc3RhZ2Uuc2V0X3N0YWdlX2RlZmF1bHRfcG9zaXRpb24oKTtcbiAgICAgICAgLy9zdW1tb24gYWZ0ZXIgY2FzdCBwb3dlciBidWZmXG4gICAgICAgIGlmIChhYmlsaXR5LmFiaWxpdHlfY2F0ZWdvcnkgPT09IGFiaWxpdHlfY2F0ZWdvcmllcy5TVU1NT04pIHtcbiAgICAgICAgICAgIGNvbnN0IHJlcXVpcmVtZW50cyA9IHRoaXMuZGF0YS5pbmZvLnN1bW1vbnNfbGlzdFthYmlsaXR5LmtleV9uYW1lXS5yZXF1aXJlbWVudHM7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9yZGVyZWRfZWxlbWVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gb3JkZXJlZF9lbGVtZW50c1tpXTtcbiAgICAgICAgICAgICAgICBjb25zdCBwb3dlciA9IEJhdHRsZUZvcm11bGFzLnN1bW1vbl9wb3dlcihyZXF1aXJlbWVudHNbZWxlbWVudF0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKHBvd2VyID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb24uY2FzdGVyLmFkZF9lZmZlY3QoXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJwb3dlclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1YW50aXR5OiBwb3dlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRvcjogXCJwbHVzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlOiBlbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFiaWxpdHksXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnVlXG4gICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZChcbiAgICAgICAgICAgICAgICAgICAgICAgIGAke2FjdGlvbi5jYXN0ZXIubmFtZX0ncyAke2VsZW1lbnRfbmFtZXNbZWxlbWVudF19IFBvd2VyIHJpc2VzIGJ5ICR7cG93ZXIudG9TdHJpbmcoKX0hYFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLndhaXRfZm9yX2tleSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhY3Rpb24uaXRlbV9zbG90KSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtOiBJdGVtID0gdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFthY3Rpb24uaXRlbV9zbG90LmtleV9uYW1lXTtcbiAgICAgICAgICAgIGlmIChpdGVtLnVzZV90eXBlID09PSB1c2VfdHlwZXMuU0lOR0xFX1VTRSkge1xuICAgICAgICAgICAgICAgIC8vY29uc3VtZSBpdGVtIG9uIHVzYWdlXG4gICAgICAgICAgICAgICAgLS1hY3Rpb24uaXRlbV9zbG90LnF1YW50aXR5O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtLnVzZV90eXBlID09PSB1c2VfdHlwZXMuQlJFQUtTX1dIRU5fVVNFKSB7XG4gICAgICAgICAgICAgICAgLy9jaGVjayBpZiBpdGVtIGlzIGdvaW5nIHRvIGJyZWFrXG4gICAgICAgICAgICAgICAgaWYgKE1hdGgucmFuZG9tKCkgPCBJdGVtLkJSRUFLU19DSEFOQ0UpIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uLml0ZW1fc2xvdC5icm9rZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmJhdHRsZV9sb2cuYWRkKGAke2l0ZW0ubmFtZX0gYnJva2UuLi5gKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvL2NoZWNrIGZvciBwb2lzb24gZGFtYWdlXG4gICAgICAgIGNvbnN0IHBvaXNvbl9zdGF0dXMgPSBhY3Rpb24uY2FzdGVyLmlzX3BvaXNvbmVkKCk7XG4gICAgICAgIGlmIChwb2lzb25fc3RhdHVzKSB7XG4gICAgICAgICAgICBsZXQgZGFtYWdlID0gQmF0dGxlRm9ybXVsYXMuYmF0dGxlX3BvaXNvbl9kYW1hZ2UoYWN0aW9uLmNhc3RlciwgcG9pc29uX3N0YXR1cyk7XG4gICAgICAgICAgICBpZiAoZGFtYWdlID4gYWN0aW9uLmNhc3Rlci5jdXJyZW50X2hwKSB7XG4gICAgICAgICAgICAgICAgZGFtYWdlID0gYWN0aW9uLmNhc3Rlci5jdXJyZW50X2hwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhY3Rpb24uY2FzdGVyLmN1cnJlbnRfaHAgPSBfLmNsYW1wKGFjdGlvbi5jYXN0ZXIuY3VycmVudF9ocCAtIGRhbWFnZSwgMCwgYWN0aW9uLmNhc3Rlci5tYXhfaHApO1xuICAgICAgICAgICAgY29uc3QgcG9pc29uX25hbWUgPSBwb2lzb25fc3RhdHVzID09PSBwZXJtYW5lbnRfc3RhdHVzLlBPSVNPTiA/IFwicG9pc29uXCIgOiBcInZlbm9tXCI7XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYmF0dGxlX2xvZy5hZGQoYFRoZSAke3BvaXNvbl9uYW1lfSBkb2VzICR7ZGFtYWdlLnRvU3RyaW5nKCl9IGRhbWFnZSB0byAke2FjdGlvbi5jYXN0ZXIubmFtZX0hYCk7XG4gICAgICAgICAgICB0aGlzLmJhdHRsZV9tZW51LmNoYXJzX3N0YXR1c193aW5kb3cudXBkYXRlX2NoYXJzX2luZm8oKTtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY2hlY2tfZG93bmVkKGFjdGlvbi5jYXN0ZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFjdGlvbi5jYXN0ZXIuaGFzX3RlbXBvcmFyeV9zdGF0dXModGVtcG9yYXJ5X3N0YXR1cy5ERUFUSF9DVVJTRSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHRoaXNfZWZmZWN0ID0gXy5maW5kKGFjdGlvbi5jYXN0ZXIuZWZmZWN0cywge1xuICAgICAgICAgICAgICAgIHN0YXR1c19rZXlfbmFtZTogdGVtcG9yYXJ5X3N0YXR1cy5ERUFUSF9DVVJTRSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoYWN0aW9uLmNhc3Rlci5nZXRfZWZmZWN0X3R1cm5zX2NvdW50KHRoaXNfZWZmZWN0KSA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGFjdGlvbi5jYXN0ZXIuY3VycmVudF9ocCA9IDA7XG4gICAgICAgICAgICAgICAgYWN0aW9uLmNhc3Rlci5hZGRfcGVybWFuZW50X3N0YXR1cyhwZXJtYW5lbnRfc3RhdHVzLkRPV05FRCk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZChgVGhlIEdyaW0gUmVhcGVyIGNhbGxzIG91dCB0byAke2FjdGlvbi5jYXN0ZXIubmFtZX1gKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLndhaXRfZm9yX2tleSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jaGVja19waGFzZXMoKTtcbiAgICB9XG5cbiAgICBhc3luYyBhcHBseV9kYW1hZ2UoYWN0aW9uOiBQbGF5ZXJBYmlsaXR5LCBhYmlsaXR5OiBBYmlsaXR5KSB7XG4gICAgICAgIGxldCBpbmNyZWFzZWRfY3JpdDogbnVtYmVyO1xuXG4gICAgICAgIGlmIChhYmlsaXR5Lmhhc19jcml0aWNhbCkge1xuICAgICAgICAgICAgaW5jcmVhc2VkX2NyaXQgPSBhY3Rpb24uY2FzdGVyLmVmZmVjdHNcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGVmZmVjdCA9PiBlZmZlY3QudHlwZSA9PT0gZWZmZWN0X3R5cGVzLkNSSVRJQ0FMUylcbiAgICAgICAgICAgICAgICAucmVkdWNlKChhY2MsIGVmZmVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRWZmZWN0LmFwcGx5X29wZXJhdG9yKGFjYywgZWZmZWN0LnF1YW50aXR5LCBlZmZlY3Qub3BlcmF0b3IpO1xuICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhY3Rpb24udGFyZ2V0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0X2luZm8gPSBhY3Rpb24udGFyZ2V0c1tpXTtcbiAgICAgICAgICAgIGlmICh0YXJnZXRfaW5mby5tYWduaXR1ZGUgPT09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0X2luc3RhbmNlID0gdGFyZ2V0X2luZm8udGFyZ2V0Lmluc3RhbmNlO1xuXG4gICAgICAgICAgICBpZiAodGFyZ2V0X2luc3RhbmNlLmhhc19wZXJtYW5lbnRfc3RhdHVzKHBlcm1hbmVudF9zdGF0dXMuRE9XTkVEKSkgY29udGludWU7XG4gICAgICAgICAgICBpZiAoYWJpbGl0eS5jYW5fYmVfZXZhZGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBNYXRoLnJhbmRvbSgpIDwgRVZBU0lPTl9DSEFOQ0UgfHxcbiAgICAgICAgICAgICAgICAgICAgKGFjdGlvbi5jYXN0ZXIudGVtcG9yYXJ5X3N0YXR1cy5oYXModGVtcG9yYXJ5X3N0YXR1cy5ERUxVU0lPTikgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgucmFuZG9tKCkgPCBERUxVU0lPTl9NSVNTX0NIQU5DRSlcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZChgJHt0YXJnZXRfaW5zdGFuY2UubmFtZX0gbmltYmx5IGRvZGdlcyB0aGUgYmxvdyFgKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMud2FpdF9mb3Jfa2V5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgZGFtYWdlID0gMDtcbiAgICAgICAgICAgIGlmIChhYmlsaXR5Lmhhc19jcml0aWNhbCAmJiAoTWF0aC5yYW5kb20oKSA8IENSSVRJQ0FMX0NIQU5DRSB8fCBNYXRoLnJhbmRvbSgpIDwgaW5jcmVhc2VkX2NyaXQgLyAyKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG11bHRfbW9kID0gYWJpbGl0eS5jcml0X211bHRfZmFjdG9yID09PSB1bmRlZmluZWQgPyAxLjI1IDogYWJpbGl0eS5jcml0X211bHRfZmFjdG9yO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFkZF9tb2QgPSA2LjAgKyB0YXJnZXRfaW5zdGFuY2UubGV2ZWwgLyA1LjA7XG5cbiAgICAgICAgICAgICAgICBkYW1hZ2UgPSBCYXR0bGVGb3JtdWxhcy5waHlzaWNhbF9hdHRhY2soXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbi5jYXN0ZXIsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldF9pbnN0YW5jZSxcbiAgICAgICAgICAgICAgICAgICAgbXVsdF9tb2QsXG4gICAgICAgICAgICAgICAgICAgIGFkZF9tb2QsXG4gICAgICAgICAgICAgICAgICAgIGFiaWxpdHkuZWxlbWVudFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoYWJpbGl0eS50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgYWJpbGl0eV90eXBlcy5BRERFRF9EQU1BR0U6XG4gICAgICAgICAgICAgICAgICAgICAgICBkYW1hZ2UgPSBCYXR0bGVGb3JtdWxhcy5waHlzaWNhbF9hdHRhY2soXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLmNhc3RlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRfaW5zdGFuY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMS4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFiaWxpdHkuYWJpbGl0eV9wb3dlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYmlsaXR5LmVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBhYmlsaXR5X3R5cGVzLk1VTFRJUExJRVI6XG4gICAgICAgICAgICAgICAgICAgICAgICBkYW1hZ2UgPSBCYXR0bGVGb3JtdWxhcy5waHlzaWNhbF9hdHRhY2soXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLmNhc3RlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRfaW5zdGFuY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJpbGl0eS5hYmlsaXR5X3Bvd2VyIC8gMTAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFiaWxpdHkuZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIGFiaWxpdHlfdHlwZXMuQkFTRV9EQU1BR0U6XG4gICAgICAgICAgICAgICAgICAgICAgICBkYW1hZ2UgPSBCYXR0bGVGb3JtdWxhcy5wc3luZXJneV9kYW1hZ2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLmNhc3RlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRfaW5zdGFuY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJpbGl0eS5hYmlsaXR5X3Bvd2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFiaWxpdHkuZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIGFiaWxpdHlfdHlwZXMuSEVBTElORzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhbWFnZSA9IC1CYXR0bGVGb3JtdWxhcy5oZWFsX2FiaWxpdHkoYWN0aW9uLmNhc3RlciwgYWJpbGl0eS5hYmlsaXR5X3Bvd2VyLCBhYmlsaXR5LmVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgYWJpbGl0eV90eXBlcy5TVU1NT046XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkamlubl91c2VkID0gXy5zdW0oXy52YWx1ZXModGhpcy5kYXRhLmluZm8uc3VtbW9uc19saXN0W2FiaWxpdHkua2V5X25hbWVdLnJlcXVpcmVtZW50cykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlID0gQmF0dGxlRm9ybXVsYXMuc3VtbW9uX2RhbWFnZSh0YXJnZXRfaW5zdGFuY2UsIGFiaWxpdHkuYWJpbGl0eV9wb3dlciwgZGppbm5fdXNlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBhYmlsaXR5X3R5cGVzLkRJUkVDVF9EQU1BR0U6XG4gICAgICAgICAgICAgICAgICAgICAgICBkYW1hZ2UgPSBhYmlsaXR5LmFiaWxpdHlfcG93ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHJhdGlvcyA9IEFiaWxpdHkuZ2V0X2RpbWluaXNoaW5nX3JhdGlvcyhhYmlsaXR5LnR5cGUsIGFiaWxpdHkudXNlX2RpbWluaXNoaW5nX3JhdGlvKTtcbiAgICAgICAgICAgIGRhbWFnZSA9IChkYW1hZ2UgKiByYXRpb3NbdGFyZ2V0X2luZm8ubWFnbml0dWRlXSkgfCAwO1xuICAgICAgICAgICAgZGFtYWdlICs9IHZhcmlhdGlvbigpO1xuXG4gICAgICAgICAgICBpZiAoZGFtYWdlID49IDApIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRfaW5zdGFuY2UuZWZmZWN0cy5mb3JFYWNoKGVmZmVjdCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlZmZlY3QudHlwZSA9PT0gZWZmZWN0X3R5cGVzLkRBTUFHRV9NT0RJRklFUikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlID0gZWZmZWN0LmFwcGx5X2VmZmVjdChkYW1hZ2UpLmFmdGVyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYmF0dGxlX2xvZy5hZGRfZGFtYWdlKGRhbWFnZSwgdGFyZ2V0X2luc3RhbmNlLCBhYmlsaXR5LmFmZmVjdHNfcHApO1xuXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50X3Byb3BlcnR5ID0gYWJpbGl0eS5hZmZlY3RzX3BwID8gbWFpbl9zdGF0cy5DVVJSRU5UX1BQIDogbWFpbl9zdGF0cy5DVVJSRU5UX0hQO1xuICAgICAgICAgICAgY29uc3QgbWF4X3Byb3BlcnR5ID0gYWJpbGl0eS5hZmZlY3RzX3BwID8gbWFpbl9zdGF0cy5NQVhfUFAgOiBtYWluX3N0YXRzLk1BWF9IUDtcbiAgICAgICAgICAgIHRhcmdldF9pbnN0YW5jZS5jdXJyZW50X2hwID0gXy5jbGFtcChcbiAgICAgICAgICAgICAgICB0YXJnZXRfaW5zdGFuY2VbY3VycmVudF9wcm9wZXJ0eV0gLSBkYW1hZ2UsXG4gICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICB0YXJnZXRfaW5zdGFuY2VbbWF4X3Byb3BlcnR5XVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgdGhpcy5iYXR0bGVfbWVudS5jaGFyc19zdGF0dXNfd2luZG93LnVwZGF0ZV9jaGFyc19pbmZvKCk7XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNoZWNrX2Rvd25lZCh0YXJnZXRfaW5zdGFuY2UpO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGFiaWxpdHkuZWZmZWN0cy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVmZmVjdF9vYmogPSBhYmlsaXR5LmVmZmVjdHNbal07XG4gICAgICAgICAgICAgICAgaWYgKGVmZmVjdF9vYmoudHlwZSA9PT0gZWZmZWN0X3R5cGVzLkRBTUFHRV9JTlBVVCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwbGF5ZXIgPSBlZmZlY3Rfb2JqLm9uX2Nhc3RlciA/IGFjdGlvbi5jYXN0ZXIgOiB0YXJnZXRfaW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpX2VmZmVjdCA9IHBsYXllci5hZGRfZWZmZWN0KGVmZmVjdF9vYmosIGFiaWxpdHkpLmVmZmVjdDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZWZmZWN0X3Jlc3VsdCA9IGRpX2VmZmVjdC5hcHBseV9lZmZlY3QoZGFtYWdlKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoW2VmZmVjdF90eXBlcy5DVVJSRU5UX0hQLCBlZmZlY3RfdHlwZXMuQ1VSUkVOVF9QUF0uaW5jbHVkZXMoZGlfZWZmZWN0LnN1Yl9lZmZlY3QudHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVmZmVjdF9kYW1hZ2UgPSBlZmZlY3RfcmVzdWx0LmJlZm9yZSAtIGVmZmVjdF9yZXN1bHQuYWZ0ZXI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlZmZlY3RfZGFtYWdlICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpX2VmZmVjdC5lZmZlY3RfbXNnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYmF0dGxlX2xvZy5hZGQoZWZmZWN0X21zZ1tkaV9lZmZlY3QuZWZmZWN0X21zZ10odGFyZ2V0X2luc3RhbmNlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZF9kYW1hZ2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZmZlY3RfZGFtYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlfZWZmZWN0LnN1Yl9lZmZlY3QudHlwZSA9PT0gZWZmZWN0X3R5cGVzLkNVUlJFTlRfUFBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJhdHRsZV9tZW51LmNoYXJzX3N0YXR1c193aW5kb3cudXBkYXRlX2NoYXJzX2luZm8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLndhaXRfZm9yX2tleSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5jaGVja19kb3duZWQocGxheWVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwbGF5ZXIucmVtb3ZlX2VmZmVjdChkaV9lZmZlY3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qXG5JZiBhIHNsZWVwIGlzIGNhc3Qgb3ZlciBhIHRhcmdldCB0aGF0IGlzIGFscmVhZHkgc2xlZXBpbmcsXG5pdCB3aWxsIHJlY2FsY3VsYXRlIHRoZSBjaGFuY2UsIGFuZCBpZiBpdCBsYW5kcyBpdCB3aWxsIFwidG9wIHVwXCIgKHJlYWQ6IHJlcGxhY2UpIHRoZSBlZmZlY3QncyBkdXJhdGlvbi5cblNvIGlmIGEgY2hhcmFjdGVyIGlzIHNsZWVwaW5nLCB0aGUgcmVtYWluaW5nIGR1cmF0aW9uIGlzIDYgcm91bmRzLCBhbmQgeW91IGNhc3QgU2xlZXAgb24gdGhlbSBhZ2FpbiBhbmQgaXQgbGFuZHMsIGl0J2xsIGdldCBidW1wZWQgdXAgdG8gNyByb3VuZHMuXG5XaGVuIFNsZWVwIG5vcm1hbGx5IGdldHMgaW5mbGljdGVkIHdpdGggYSBtYXggZHVyYXRpb24gb2YgNyBhbnl3YXkuXG5cbkJ1ZmZzIGFuZCBkZWJ1ZmZzIGNhbiBzdGFjayB2YWx1ZXMsIGJ1dCBkdXJhdGlvbnMgZ2V0IG92ZXJ3cml0dGVuIGV2ZXJ5IHRpbWUgYW5kIGRvIG5vdCBzdGFjay5cblxuUG9pc29uL1Zlbm9tIGNhbid0IGxhbmQgYWdhaW4sIGFsdGhvdWdoIFZlbm9tIGNhbiByZXBsYWNlIFBvaXNvbiAoYnV0IG5vdCB0aGUgb3RoZXIgd2F5IGFyb3VuZCkuXG5BbmQgQ2FuZGxlIEN1cnNlIChjb3VudGRvd24gdG8gZGVhdGgpIGNhbiBiZSBcImFkdmFuY2VkXCIuXG5TbywgaWYgYSBjaGFyYWN0ZXIgd2lsbCBkaWUgYWZ0ZXIgNSB0dXJucyBhbmQgeW91IGxhbmQgYW5vdGhlciBDdXJzZSBvbiB0aGVtLCBpdCB3aWxsIGRyb3AgdGhlIHJlbWFpbmluZyBjb3VudCB0byA0LlxuKi9cblxuICAgIGFzeW5jIGFwcGx5X2VmZmVjdHMoYWN0aW9uOiBQbGF5ZXJBYmlsaXR5LCBhYmlsaXR5OiBBYmlsaXR5LCBlZmZlY3Q6IEVmZmVjdCkge1xuICAgICAgICBsZXQgZWZmZWN0X3Jlc3VsdDoge2VmZmVjdDogRWZmZWN0OyBjaGFuZ2VzOiBhbnl9O1xuXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYWN0aW9uLnRhcmdldHMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldF9pbmZvID0gYWN0aW9uLnRhcmdldHNbal07XG4gICAgICAgICAgICBpZiAodGFyZ2V0X2luZm8ubWFnbml0dWRlID09PSBudWxsKSBjb250aW51ZTtcblxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0X2luc3RhbmNlID0gdGFyZ2V0X2luZm8udGFyZ2V0Lmluc3RhbmNlO1xuICAgICAgICAgICAgaWYgKHRhcmdldF9pbnN0YW5jZS5oYXNfcGVybWFuZW50X3N0YXR1cyhwZXJtYW5lbnRfc3RhdHVzLkRPV05FRCkpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKGVmZmVjdC50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuUEVSTUFORU5UX1NUQVRVUzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVmZmVjdC5hZGRfc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0X2luc3RhbmNlLmhhc19wZXJtYW5lbnRfc3RhdHVzKGVmZmVjdC5zdGF0dXNfa2V5X25hbWUgYXMgcGVybWFuZW50X3N0YXR1cykpIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVmZmVjdC5zdGF0dXNfa2V5X25hbWUgPT09IHBlcm1hbmVudF9zdGF0dXMuUE9JU09OICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0X2luc3RhbmNlLmhhc19wZXJtYW5lbnRfc3RhdHVzKHBlcm1hbmVudF9zdGF0dXMuVkVOT00pXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLlRFTVBPUkFSWV9TVEFUVVM6XG4gICAgICAgICAgICAgICAgICAgIGlmIChlZmZlY3QuYWRkX3N0YXR1cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHZ1bG5lcmFiaWxpdHkgPSBfLmZpbmQodGFyZ2V0X2luc3RhbmNlLmNsYXNzLnZ1bG5lcmFiaWxpdGllcywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c19rZXlfbmFtZTogZWZmZWN0LnN0YXR1c19rZXlfbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2dWxuZXJhYmlsaXR5ID0gdnVsbmVyYWJpbGl0eSA9PT0gdW5kZWZpbmVkID8gMCA6IHZ1bG5lcmFiaWxpdHkuY2hhbmNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFnbml0dWRlID0gZGltaW5pc2hpbmdfcmF0aW9zLlNUQVRVU1t0YXJnZXRfaW5mby5tYWduaXR1ZGVdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQmF0dGxlRm9ybXVsYXMuYWlsbWVudF9zdWNjZXNzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24uY2FzdGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRfaW5zdGFuY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVmZmVjdC5jaGFuY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hZ25pdHVkZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJpbGl0eS5lbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2dWxuZXJhYmlsaXR5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGhpc19lZmZlY3QgPSB0YXJnZXRfaW5zdGFuY2UuYWRkX2VmZmVjdChlZmZlY3QsIGFiaWxpdHksIHRydWUpLmVmZmVjdDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzX2VmZmVjdC50eXBlID09PSBlZmZlY3RfdHlwZXMuVEVNUE9SQVJZX1NUQVRVUykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhdGFyZ2V0X2luc3RhbmNlLmhhc190ZW1wb3Jhcnlfc3RhdHVzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfZWZmZWN0LnN0YXR1c19rZXlfbmFtZSBhcyB0ZW1wb3Jhcnlfc3RhdHVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbl9nb2luZ19lZmZlY3RzLnB1c2godGhpc19lZmZlY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc19lZmZlY3Quc3RhdHVzX2tleV9uYW1lID09PSB0ZW1wb3Jhcnlfc3RhdHVzLkRFQVRIX0NVUlNFICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRfaW5zdGFuY2UuaGFzX3RlbXBvcmFyeV9zdGF0dXModGVtcG9yYXJ5X3N0YXR1cy5ERUFUSF9DVVJTRSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRfaW5zdGFuY2Uuc2V0X2VmZmVjdF90dXJuc19jb3VudCh0aGlzX2VmZmVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRfaW5zdGFuY2Uuc2V0X2VmZmVjdF90dXJuc19jb3VudCh0aGlzX2VmZmVjdCwgdGhpc19lZmZlY3QudHVybl9jb3VudCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc19lZmZlY3Quc3RhdHVzX2tleV9uYW1lID09PSBwZXJtYW5lbnRfc3RhdHVzLlZFTk9NICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldF9pbnN0YW5jZS5oYXNfcGVybWFuZW50X3N0YXR1cyhwZXJtYW5lbnRfc3RhdHVzLlBPSVNPTilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9pc29uX2VmZmVjdCA9IF8uZmluZCh0YXJnZXRfaW5zdGFuY2UuZWZmZWN0cywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzX2tleV9uYW1lOiBwZXJtYW5lbnRfc3RhdHVzLlBPSVNPTixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldF9pbnN0YW5jZS5yZW1vdmVfZWZmZWN0KHBvaXNvbl9lZmZlY3QsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmJhdHRsZV9sb2cuYWRkKG9uX2NhdGNoX3N0YXR1c19tc2dbZWZmZWN0LnN0YXR1c19rZXlfbmFtZV0odGFyZ2V0X2luc3RhbmNlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYmF0dGxlX2xvZy5hZGQoYEJ1dCBpdCBoYXMgbm8gZWZmZWN0IG9uICR7dGFyZ2V0X2luc3RhbmNlLm5hbWV9IWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLnJhbmRvbSgpIDwgZWZmZWN0LmNoYW5jZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZW1vdmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGhpc19lZmZlY3QgPSBfLmZpbmQodGFyZ2V0X2luc3RhbmNlLmVmZmVjdHMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c19rZXlfbmFtZTogZWZmZWN0LnN0YXR1c19rZXlfbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzX2VmZmVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0X2luc3RhbmNlLnJlbW92ZV9lZmZlY3QodGhpc19lZmZlY3QsIHRydWUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc19lZmZlY3Quc3RhdHVzX2tleV9uYW1lID09PSBwZXJtYW5lbnRfc3RhdHVzLkRPV05FRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldF9pbnN0YW5jZS5pbml0X2VmZmVjdF90dXJuc19jb3VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc19lZmZlY3QudHlwZSA9PT0gZWZmZWN0X3R5cGVzLlRFTVBPUkFSWV9TVEFUVVMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uX2dvaW5nX2VmZmVjdHMgPSB0aGlzLm9uX2dvaW5nX2VmZmVjdHMuZmlsdGVyKGVmZmVjdCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlZmZlY3QgIT09IHRoaXNfZWZmZWN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZW1vdmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmF0dGxlX2xvZy5hZGRfcmVjb3Zlcl9lZmZlY3QoZWZmZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5DVVJSRU5UX0hQOlxuICAgICAgICAgICAgICAgICAgICBlZmZlY3RfcmVzdWx0ID0gdGFyZ2V0X2luc3RhbmNlLmFkZF9lZmZlY3QoZWZmZWN0LCBhYmlsaXR5LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVmZmVjdF9yZXN1bHQuZWZmZWN0LnNob3dfbXNnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYW1hZ2UgPSBlZmZlY3RfcmVzdWx0LmNoYW5nZXMuYmVmb3JlIC0gZWZmZWN0X3Jlc3VsdC5jaGFuZ2VzLmFmdGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZF9kYW1hZ2UoZGFtYWdlLCB0YXJnZXRfaW5zdGFuY2UpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJhdHRsZV9tZW51LmNoYXJzX3N0YXR1c193aW5kb3cudXBkYXRlX2NoYXJzX2luZm8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmNoZWNrX2Rvd25lZCh0YXJnZXRfaW5zdGFuY2UpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChlZmZlY3RfcmVzdWx0LmVmZmVjdC50dXJuc19xdWFudGl0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uX2dvaW5nX2VmZmVjdHMucHVzaChlZmZlY3RfcmVzdWx0LmVmZmVjdCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRfaW5zdGFuY2UucmVtb3ZlX2VmZmVjdChlZmZlY3RfcmVzdWx0LmVmZmVjdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLk1BWF9IUDpcbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5NQVhfUFA6XG4gICAgICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuQVRUQUNLOlxuICAgICAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkRFRkVOU0U6XG4gICAgICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuQUdJTElUWTpcbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5MVUNLOlxuICAgICAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLlBPV0VSOlxuICAgICAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLlJFU0lTVDpcbiAgICAgICAgICAgICAgICAgICAgZWZmZWN0X3Jlc3VsdCA9IHRhcmdldF9pbnN0YW5jZS5hZGRfZWZmZWN0KGVmZmVjdCwgYWJpbGl0eSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25fZ29pbmdfZWZmZWN0cy5wdXNoKGVmZmVjdF9yZXN1bHQuZWZmZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0X2luc3RhbmNlLnNldF9lZmZlY3RfdHVybnNfY291bnQoXG4gICAgICAgICAgICAgICAgICAgICAgICBlZmZlY3RfcmVzdWx0LmVmZmVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVmZmVjdF9yZXN1bHQuZWZmZWN0LnR1cm5fY291bnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChlZmZlY3RfcmVzdWx0LmVmZmVjdC5zaG93X21zZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGlmZiA9IGVmZmVjdF9yZXN1bHQuY2hhbmdlcy5hZnRlciAtIGVmZmVjdF9yZXN1bHQuY2hhbmdlcy5iZWZvcmU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0ID0gZGlmZiA+PSAwID8gXCJyaXNlc1wiIDogXCJkcm9wc1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGVsZW1lbnRfaW5mbyA9IFwiXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChbZWZmZWN0X3R5cGVzLlBPV0VSLCBlZmZlY3RfdHlwZXMuUkVTSVNUXS5pbmNsdWRlcyhlZmZlY3QudHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50X2luZm8gPSBlbGVtZW50X25hbWVzW2VmZmVjdF9yZXN1bHQuZWZmZWN0LmF0dHJpYnV0ZV0gKyBcIiBcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHt0YXJnZXRfaW5zdGFuY2UubmFtZX0ncyAke2VsZW1lbnRfaW5mb30ke1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZmZlY3RfbmFtZXNbZWZmZWN0LnR5cGVdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAke3RleHR9IGJ5ICR7TWF0aC5hYnMoZGlmZil9IWBcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJhdHRsZV9tZW51LmNoYXJzX3N0YXR1c193aW5kb3cudXBkYXRlX2NoYXJzX2luZm8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5FTkRfVEhFX1JPVU5EOlxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmJhdHRsZV9sb2cuYWRkKGBFdmVyeWJvZHkgaXMgcmVzdGluZyFgKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5UVVJOUzpcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZChgJHthY3Rpb24uY2FzdGVyLm5hbWV9IHJlYWRpZXMgZm9yIGFjdGlvbiFgKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uX2dvaW5nX2VmZmVjdHMucHVzaCh0YXJnZXRfaW5zdGFuY2UuYWRkX2VmZmVjdChlZmZlY3QsIGFiaWxpdHksIHRydWUpLmVmZmVjdCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuREFNQUdFX01PRElGSUVSOlxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmJhdHRsZV9sb2cuYWRkKGVmZmVjdF9tc2dbZWZmZWN0LmVmZmVjdF9tc2ddKHRhcmdldF9pbnN0YW5jZSkpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLndhaXRfZm9yX2tleSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25fZ29pbmdfZWZmZWN0cy5wdXNoKHRhcmdldF9pbnN0YW5jZS5hZGRfZWZmZWN0KGVmZmVjdCwgYWJpbGl0eSwgdHJ1ZSkuZWZmZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5DT1VOVEVSX1NUUklLRTpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuRkxFRTpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uX2dvaW5nX2VmZmVjdHMucHVzaCh0YXJnZXRfaW5zdGFuY2UuYWRkX2VmZmVjdChlZmZlY3QsIGFiaWxpdHksIHRydWUpLmVmZmVjdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGFzeW5jIGJhdHRsZV9waGFzZV9yb3VuZF9lbmQoKSB7XG4gICAgICAgIGxldCBlZmZlY3RzX3RvX3JlbW92ZSA9IFtdO1xuICAgICAgICBsZXQgZWZmZWN0X2dyb3VwcyA9IHt9O1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5vbl9nb2luZ19lZmZlY3RzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBlZmZlY3QgPSB0aGlzLm9uX2dvaW5nX2VmZmVjdHNbaV07XG4gICAgICAgICAgICBpZiAoZWZmZWN0LmNoYXIuaGFzX3Blcm1hbmVudF9zdGF0dXMocGVybWFuZW50X3N0YXR1cy5ET1dORUQpKSB7XG4gICAgICAgICAgICAgICAgZWZmZWN0LmNoYXIucmVtb3ZlX2VmZmVjdChlZmZlY3QpO1xuICAgICAgICAgICAgICAgIGVmZmVjdC5jaGFyLnVwZGF0ZV9hbGwoKTtcbiAgICAgICAgICAgICAgICBlZmZlY3RzX3RvX3JlbW92ZS5wdXNoKGkpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGF2b2lkX21zZyA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGVmZmVjdC50dXJuX2NvdW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZWZmZWN0LmNoYXIuZ2V0X2VmZmVjdF90dXJuc19jb3VudChlZmZlY3QpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICEoZWZmZWN0LmNoYXIua2V5X25hbWUgaW4gZWZmZWN0X2dyb3VwcykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICEoZWZmZWN0LmNoYXIuZ2V0X2VmZmVjdF90dXJuc19rZXkoZWZmZWN0KSBpbiBlZmZlY3RfZ3JvdXBzW2VmZmVjdC5jaGFyLmtleV9uYW1lXSlcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlZmZlY3QuY2hhci5zZXRfZWZmZWN0X3R1cm5zX2NvdW50KGVmZmVjdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBlZmZlY3QudHVybl9jb3VudCA9IGVmZmVjdC5jaGFyLmdldF9lZmZlY3RfdHVybnNfY291bnQoZWZmZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlZmZlY3RfZ3JvdXBzW2VmZmVjdC5jaGFyLmtleV9uYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWZmZWN0X2dyb3Vwc1tlZmZlY3QuY2hhci5rZXlfbmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW2VmZmVjdC5jaGFyLmdldF9lZmZlY3RfdHVybnNfa2V5KGVmZmVjdCldOiBlZmZlY3QsXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWZmZWN0X2dyb3Vwc1tlZmZlY3QuY2hhci5rZXlfbmFtZV1bZWZmZWN0LmNoYXIuZ2V0X2VmZmVjdF90dXJuc19rZXkoZWZmZWN0KV0gPSBlZmZlY3Q7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXZvaWRfbXNnID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAtLWVmZmVjdC50dXJuX2NvdW50O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChlZmZlY3QudHVybl9jb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBlZmZlY3QuY2hhci5yZW1vdmVfZWZmZWN0KGVmZmVjdCk7XG4gICAgICAgICAgICAgICAgICAgIGVmZmVjdC5jaGFyLnVwZGF0ZV9hbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgZWZmZWN0c190b19yZW1vdmUucHVzaChpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhdm9pZF9tc2cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmF0dGxlX2xvZy5hZGRfcmVjb3Zlcl9lZmZlY3QoZWZmZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgY2hhcl9rZXlfbmFtZSBpbiBlZmZlY3RfZ3JvdXBzKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBlZmZlY3RfdHVybl9rZXkgaW4gZWZmZWN0X2dyb3Vwc1tjaGFyX2tleV9uYW1lXSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVmZmVjdCA9IGVmZmVjdF9ncm91cHNbY2hhcl9rZXlfbmFtZV1bZWZmZWN0X3R1cm5fa2V5XTtcblxuICAgICAgICAgICAgICAgIGlmIChlZmZlY3QudHVybl9jb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJhdHRsZV9sb2cuYWRkX3JlY292ZXJfZWZmZWN0KGVmZmVjdCk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vbl9nb2luZ19lZmZlY3RzID0gdGhpcy5vbl9nb2luZ19lZmZlY3RzLmZpbHRlcigoZWZmZWN0LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICFlZmZlY3RzX3RvX3JlbW92ZS5pbmNsdWRlcyhpbmRleCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgQmF0dGxlLk1BWF9DSEFSU19JTl9CQVRUTEU7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgcGxheWVyID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW2ldO1xuICAgICAgICAgICAgaWYgKHBsYXllciA9PT0gdW5kZWZpbmVkKSBjb250aW51ZTtcblxuICAgICAgICAgICAgY29uc3QgcGxheWVyX2RqaW5uaSA9IHBsYXllci5kamlubmk7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHBsYXllcl9kamlubmkubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkamlubl9rZXkgPSBwbGF5ZXJfZGppbm5pW2pdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRqaW5uID0gdGhpcy5kYXRhLmluZm8uZGppbm5pX2xpc3RbZGppbm5fa2V5XTtcbiAgICAgICAgICAgICAgICBpZiAoZGppbm4uc3RhdHVzID09PSBkamlubl9zdGF0dXMuUkVDT1ZFUlkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRqaW5uLnJlY292ZXJ5X3R1cm4gPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRqaW5uLnNldF9zdGF0dXMoZGppbm5fc3RhdHVzLlNFVCwgcGxheWVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYmF0dGxlX2xvZy5hZGQoYCR7ZGppbm4ubmFtZX0gaXMgc2V0IHRvICR7cGxheWVyLm5hbWV9IWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC0tZGppbm4ucmVjb3ZlcnlfdHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYmF0dGxlX2xvZy5jbGVhcigpO1xuICAgICAgICB0aGlzLmJhdHRsZV9waGFzZSA9IGJhdHRsZV9waGFzZXMuTUVOVTtcbiAgICAgICAgdGhpcy5jaGVja19waGFzZXMoKTtcbiAgICB9XG5cbiAgICAvLyBFdmVyeW9uZSBnZXRzIGVxdWFsIGV4cGVyaWVuY2Ugd2l0aCBubyBkaXZpc2lvbiwgYnV0OlxuICAgIC8vIC0gQ2hhcmFjdGVycyB3aG8gZG8gbm90IHBhcnRpY2lwYXRlIGdldCBoYWxmO1xuICAgIC8vIC0gRG93bmVkIGNoYXJhY3RlcnMgZ2V0IG5vbmUuXG5cbiAgICBhc3luYyBiYXR0bGVfcGhhc2VfZW5kKCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub25fZ29pbmdfZWZmZWN0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgLy9yZW1vdmUgYWxsIGVmZmVjdHMgYWNxdWlyZWQgaW4gYmF0dGxlXG4gICAgICAgICAgICBjb25zdCBlZmZlY3QgPSB0aGlzLm9uX2dvaW5nX2VmZmVjdHNbaV07XG4gICAgICAgICAgICBpZiAoZWZmZWN0LnR5cGUgIT09IGVmZmVjdF90eXBlcy5QRVJNQU5FTlRfU1RBVFVTKSB7XG4gICAgICAgICAgICAgICAgZWZmZWN0LmNoYXIucmVtb3ZlX2VmZmVjdChlZmZlY3QpO1xuICAgICAgICAgICAgICAgIGVmZmVjdC5jaGFyLnVwZGF0ZV9hbGwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmFsbGllc19kZWZlYXRlZCkge1xuICAgICAgICAgICAgdGhpcy5iYXR0bGVfbG9nLmFkZCh0aGlzLmFsbGllc19pbmZvWzBdLmluc3RhbmNlLm5hbWUgKyBcIicgcGFydHkgaGFzIGJlZW4gZGVmZWF0ZWQhXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5iYXR0bGVfbG9nLmFkZCh0aGlzLmVuZW1pZXNfcGFydHlfbmFtZSArIFwiIGhhcyBiZWVuIGRlZmVhdGVkIVwiKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHRvdGFsX2V4cCA9IHRoaXMuZW5lbWllc19pbmZvXG4gICAgICAgICAgICAgICAgLm1hcChpbmZvID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy9jYWxjdWxhdGVzIHRvdGFsIGV4cCBnYWluZWRcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChpbmZvLmluc3RhbmNlIGFzIEVuZW15KS5leHBfcmV3YXJkO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApO1xuICAgICAgICAgICAgdGhpcy5iYXR0bGVfbG9nLmFkZChgWW91IGdvdCAke3RvdGFsX2V4cC50b1N0cmluZygpfSBleHBlcmllbmNlIHBvaW50cy5gKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5hbGxpZXNfaW5mby5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZm8gPSB0aGlzLmFsbGllc19pbmZvW2ldO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoYXIgPSBpbmZvLmluc3RhbmNlIGFzIE1haW5DaGFyO1xuICAgICAgICAgICAgICAgIGlmICghY2hhci5oYXNfcGVybWFuZW50X3N0YXR1cyhwZXJtYW5lbnRfc3RhdHVzLkRPV05FRCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9kb3duZWQgY2hhcnMgZG9uJ3QgcmVjZWl2ZSBleHBcbiAgICAgICAgICAgICAgICAgICAgLy9jaGFycyB0aGF0IG5vdCBlbnRlcmVkIGluIGJhdHRsZSwgcmVjZWl2ZSBvbmx5IGhhbGQgZXhwXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoYW5nZSA9IGNoYXIuYWRkX2V4cChpbmZvLmVudGVyZWRfaW5fYmF0dGxlID8gdG90YWxfZXhwIDogdG90YWxfZXhwID4+IDEpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFuZ2UuYmVmb3JlLmxldmVsICE9PSBjaGFuZ2UuYWZ0ZXIubGV2ZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmF0dGxlX2xvZy5hZGQoYCR7Y2hhci5uYW1lfSBpcyBub3cgYSBsZXZlbCAke2NoYXIubGV2ZWx9ICR7Y2hhci5jbGFzcy5uYW1lfSFgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGdhaW5lZF9hYmlsaXRpZXMgPSBfLmRpZmZlcmVuY2UoY2hhbmdlLmFmdGVyLmFiaWxpdGllcywgY2hhbmdlLmJlZm9yZS5hYmlsaXRpZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBnYWluZWRfYWJpbGl0aWVzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWJpbGl0eSA9IHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W2dhaW5lZF9hYmlsaXRpZXNbal1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmF0dGxlX2xvZy5hZGQoYE1hc3RlcmVkIHRoZSAke2NoYXIuY2xhc3MubmFtZX0ncyAke2FiaWxpdHkubmFtZX0hYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjaGFuZ2UuYmVmb3JlLnN0YXRzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhdCA9IE9iamVjdC5rZXlzKGNoYW5nZS5iZWZvcmUuc3RhdHNbal0pWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpZmYgPSBjaGFuZ2UuYWZ0ZXIuc3RhdHNbal1bc3RhdF0gLSBjaGFuZ2UuYmVmb3JlLnN0YXRzW2pdW3N0YXRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaWZmICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdGF0X3RleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoc3RhdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBtYWluX3N0YXRzLk1BWF9IUDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0X3RleHQgPSBcIk1heGltdW0gSFBcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgbWFpbl9zdGF0cy5NQVhfUFA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdF90ZXh0ID0gXCJNYXhpbXVtIFBQXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIG1haW5fc3RhdHMuQVRUQUNLOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRfdGV4dCA9IFwiQXR0YWNrXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIG1haW5fc3RhdHMuREVGRU5TRTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0X3RleHQgPSBcIkRlZmVuc2VcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgbWFpbl9zdGF0cy5BR0lMSVRZOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRfdGV4dCA9IFwiQWdpbGl0eVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBtYWluX3N0YXRzLkxVQ0s6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdF90ZXh0ID0gXCJMdWNrXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXR0bGVfbG9nLmFkZChgJHtzdGF0X3RleHR9IHJpc2VzIGJ5ICR7ZGlmZi50b1N0cmluZygpfSFgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHRvdGFsX2NvaW5zID0gdGhpcy5lbmVtaWVzX2luZm9cbiAgICAgICAgICAgICAgICAubWFwKGluZm8gPT4ge1xuICAgICAgICAgICAgICAgICAgICAvL2NhbGN1bGF0ZSB0b3RhbCBjb2lucyByZWNlaXZlZFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGluZm8uaW5zdGFuY2UgYXMgRW5lbXkpLmNvaW5zX3Jld2FyZDtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAwKTtcbiAgICAgICAgICAgIHRoaXMuYmF0dGxlX2xvZy5hZGQoYFlvdSBnb3QgJHt0b3RhbF9jb2lucy50b1N0cmluZygpfSBjb2lucy5gKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5lbmVtaWVzX2luZm8ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAvL3JlY2VpdmluZyBpdGVtcyBhcyByZXdhcmRcbiAgICAgICAgICAgICAgICBjb25zdCBlbmVteSA9IHRoaXMuZW5lbWllc19pbmZvW2ldLmluc3RhbmNlIGFzIEVuZW15O1xuICAgICAgICAgICAgICAgIGlmIChlbmVteS5pdGVtX3Jld2FyZCAmJiBNYXRoLnJhbmRvbSgpIDwgZW5lbXkuaXRlbV9yZXdhcmRfY2hhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W2VuZW15Lml0ZW1fcmV3YXJkXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE1haW5DaGFyLmFkZF9pdGVtX3RvX3BhcnR5KHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEsIGl0ZW0sIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXR0bGVfbG9nLmFkZChgWW91IGdvdCBhICR7aXRlbS5uYW1lfS5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLndhaXRfZm9yX2tleSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9kZWJ1ZyBwdXJwb3NlcyBvbmx5XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJhdHRsZV9sb2cuYWRkKGAke2VuZW15Lml0ZW1fcmV3YXJkfSBub3QgcmVnaXN0ZXJlZC4uLmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVuc2V0X2JhdHRsZSgpO1xuICAgIH1cblxuICAgIHVuc2V0X2JhdHRsZSgpIHtcbiAgICAgICAgdGhpcy5iYXR0bGVfZmluaXNoaW5nID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLmJhdHRsZV9zdGFnZS51bnNldF9zdGFnZShcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuY29udHJvbF9tYW5hZ2VyLnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmNvbnRyb2xfbWFuYWdlci5kZXRhY2hfYmluZGluZ3ModGhpcy5hZHZhbmNlX2xvZ19jb250cm9sX2tleSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmJhdHRsZV9sb2cuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuYmF0dGxlX21lbnUuZGVzdHJveV9tZW51KCk7XG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXRfd2luZG93LmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvbl9tYW5hZ2VyLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmluX2JhdHRsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5iYXR0bGVfaW5zdGFuY2UgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLnBoeXNpY3MucDIucmVzdW1lKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdXBkYXRlKCkge1xuICAgICAgICBpZiAodGhpcy5iYXR0bGVfZmluaXNoaW5nKSByZXR1cm47XG5cbiAgICAgICAgdGhpcy5iYXR0bGVfc3RhZ2UudXBkYXRlX3N0YWdlKCk7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uX21hbmFnZXIucmVuZGVyKCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtnZXRfdGV4dF93aWR0aH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gXCIuLi9tYWdpY19udW1iZXJzXCI7XG5pbXBvcnQge1dpbmRvd30gZnJvbSBcIi4uL1dpbmRvd1wiO1xuaW1wb3J0IHtHb2xkZW5TdW59IGZyb20gXCIuLi9Hb2xkZW5TdW5cIjtcbmltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuXG5jb25zdCBGT1JXQVJEID0gMTtcbmNvbnN0IEJBQ0tXQVJEID0gLTE7XG5cbmNvbnN0IEJVVFRPTl9XSURUSCA9IDI0O1xuY29uc3QgQlVUVE9OX0hFSUdIVCA9IDI0O1xuY29uc3QgQlVUVE9OX1kgPSBudW1iZXJzLkdBTUVfSEVJR0hUIC0gQlVUVE9OX0hFSUdIVDtcblxuY29uc3QgQUNUSVZFX0RFRkFVTFQgPSAxLjE1O1xuY29uc3QgTUFYX1NDQUxFX0RFRkFVTFQgPSAxLjI1O1xuXG5jb25zdCBUSVRMRV9XSU5ET1dfSEVJR0hUID0gQlVUVE9OX0hFSUdIVCAtIG51bWJlcnMuT1VUU0lERV9CT1JERVJfV0lEVEggLSBudW1iZXJzLklOU0lERV9CT1JERVJfV0lEVEg7XG5cbmV4cG9ydCBjbGFzcyBIb3Jpem9udGFsTWVudSB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOiBHb2xkZW5TdW47XG4gICAgcHVibGljIGJ1dHRvbnNfa2V5czogc3RyaW5nW107XG4gICAgcHVibGljIHRpdGxlczogc3RyaW5nW107XG4gICAgcHVibGljIG9uX2NhbmNlbDogRnVuY3Rpb247XG4gICAgcHVibGljIG9uX3ByZXNzOiBGdW5jdGlvbjtcbiAgICBwdWJsaWMgYnV0dG9uc19udW1iZXI6IG51bWJlcjtcblxuICAgIHB1YmxpYyB0aXRsZV93aW5kb3dfd2lkdGg6IG51bWJlcjtcbiAgICBwdWJsaWMgZG9ja19yaWdodDogYm9vbGVhbjtcblxuICAgIHB1YmxpYyBjdXN0b21fc2NhbGU6IHtcbiAgICAgICAgYWN0aXZlX2RlZmF1bHQ6IG51bWJlcjtcbiAgICAgICAgbWF4X3NjYWxlOiBudW1iZXI7XG4gICAgfTtcbiAgICBwdWJsaWMgc2VsZWN0ZWRfYnV0dG9uX2luZGV4OiBudW1iZXI7XG4gICAgcHVibGljIG1lbnVfb3BlbjogYm9vbGVhbjtcbiAgICBwdWJsaWMgbWVudV9hY3RpdmU6IGJvb2xlYW47XG4gICAgcHVibGljIHNlbGVjdGVkX2J1dHRvbl90d2VlbjogUGhhc2VyLlR3ZWVuO1xuXG4gICAgcHVibGljIHg6IG51bWJlcjtcbiAgICBwdWJsaWMgeTogbnVtYmVyO1xuICAgIHB1YmxpYyB0aXRsZV93aW5kb3c6IFdpbmRvdztcblxuICAgIHB1YmxpYyBncm91cDogUGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyBidXR0b25zOiB7XG4gICAgICAgIHNwcml0ZTogUGhhc2VyLlNwcml0ZTtcbiAgICAgICAgdGl0bGU6IHN0cmluZztcbiAgICB9W107XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgZ2FtZTogUGhhc2VyLkdhbWUsXG4gICAgICAgIGRhdGE6IEdvbGRlblN1bixcbiAgICAgICAgYnV0dG9uczogc3RyaW5nW10sXG4gICAgICAgIHRpdGxlczogc3RyaW5nW10sXG4gICAgICAgIGNhbGxiYWNrczoge1xuICAgICAgICAgICAgb25fY2FuY2VsPzogRnVuY3Rpb247XG4gICAgICAgICAgICBvbl9wcmVzczogRnVuY3Rpb247XG4gICAgICAgIH0sXG4gICAgICAgIHRpdGxlX3dpbmRvd193aWR0aD86IG51bWJlcixcbiAgICAgICAgZG9ja19yaWdodDogYm9vbGVhbiA9IGZhbHNlXG4gICAgKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuYnV0dG9uc19rZXlzID0gYnV0dG9ucztcbiAgICAgICAgdGhpcy50aXRsZXMgPSB0aXRsZXM7XG4gICAgICAgIHRoaXMub25fY2FuY2VsID0gY2FsbGJhY2tzLm9uX2NhbmNlbDtcbiAgICAgICAgdGhpcy5vbl9wcmVzcyA9IGNhbGxiYWNrcy5vbl9wcmVzcztcbiAgICAgICAgdGhpcy5idXR0b25zX251bWJlciA9IGJ1dHRvbnMubGVuZ3RoO1xuXG4gICAgICAgIGNvbnN0IG1heF90aXRsZV93aWR0aCA9IGdldF90ZXh0X3dpZHRoKFxuICAgICAgICAgICAgdGhpcy5nYW1lLFxuICAgICAgICAgICAgXy5tYXhCeSh0aXRsZXMsIHRpdGxlID0+IHRpdGxlLmxlbmd0aClcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy50aXRsZV93aW5kb3dfd2lkdGggPVxuICAgICAgICAgICAgdGl0bGVfd2luZG93X3dpZHRoICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IHRpdGxlX3dpbmRvd193aWR0aFxuICAgICAgICAgICAgICAgIDogbWF4X3RpdGxlX3dpZHRoICsgMiAqIChudW1iZXJzLldJTkRPV19QQURESU5HX0ggKyBudW1iZXJzLklOU0lERV9CT1JERVJfV0lEVEgpO1xuICAgICAgICBjb25zdCB0b3RhbF93aWR0aCA9XG4gICAgICAgICAgICBCVVRUT05fV0lEVEggKiB0aGlzLmJ1dHRvbnNfbnVtYmVyICsgdGhpcy50aXRsZV93aW5kb3dfd2lkdGggKyAyICogbnVtYmVycy5PVVRTSURFX0JPUkRFUl9XSURUSCArIDI7XG4gICAgICAgIHRoaXMuZG9ja19yaWdodCA9IGRvY2tfcmlnaHQ7XG5cbiAgICAgICAgdGhpcy5jdXN0b21fc2NhbGUgPSBudWxsO1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2J1dHRvbl9pbmRleCA9IDA7XG4gICAgICAgIHRoaXMubWVudV9vcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMubWVudV9hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9idXR0b25fdHdlZW4gPSBudWxsO1xuXG4gICAgICAgIHRoaXMueCA9IG51bWJlcnMuR0FNRV9XSURUSCAtIHRvdGFsX3dpZHRoO1xuICAgICAgICBpZiAoIXRoaXMuZG9ja19yaWdodCkgdGhpcy54ID0gdGhpcy54ID4+IDE7XG4gICAgICAgIHRoaXMueSA9IEJVVFRPTl9ZO1xuXG4gICAgICAgIHRoaXMudGl0bGVfd2luZG93ID0gbmV3IFdpbmRvdyhcbiAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgIHRoaXMueCArIEJVVFRPTl9XSURUSCAqIHRoaXMuYnV0dG9uc19udW1iZXIsXG4gICAgICAgICAgICB0aGlzLnksXG4gICAgICAgICAgICB0aGlzLnRpdGxlX3dpbmRvd193aWR0aCxcbiAgICAgICAgICAgIFRJVExFX1dJTkRPV19IRUlHSFRcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5ncm91cCA9IGdhbWUuYWRkLmdyb3VwKCk7XG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLmdyb3VwLndpZHRoID0gMDtcbiAgICAgICAgdGhpcy5ncm91cC5oZWlnaHQgPSAwO1xuXG4gICAgICAgIHRoaXMubW91bnRfYnV0dG9ucygpO1xuICAgIH1cblxuICAgIHNldF9jb250cm9sKCkge1xuICAgICAgICBsZXQgY29udHJvbHMgPSBbXG4gICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5MRUZULCBvbl9kb3duOiB0aGlzLnByZXZpb3VzX2J1dHRvbi5iaW5kKHRoaXMpfSxcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLlJJR0hULCBvbl9kb3duOiB0aGlzLm5leHRfYnV0dG9uLmJpbmQodGhpcyl9LFxuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuQSwgb25fZG93bjogdGhpcy5vbl9wcmVzcy5iaW5kKHRoaXMpfSxcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkIsIG9uX2Rvd246IHRoaXMub25fY2FuY2VsID8gdGhpcy5vbl9jYW5jZWwuYmluZCh0aGlzKSA6IHVuZGVmaW5lZH0sXG4gICAgICAgIF07XG5cbiAgICAgICAgdGhpcy5kYXRhLmNvbnRyb2xfbWFuYWdlci5zZXRfY29udHJvbChjb250cm9scywge2xvb3BfY29uZmlnczoge2hvcml6b250YWw6IHRydWV9fSk7XG4gICAgfVxuXG4gICAgbW91bnRfYnV0dG9ucyhmaWx0ZXJlZF9idXR0b25zOiBzdHJpbmdbXSA9IFtdKSB7XG4gICAgICAgIGNvbnN0IGJ1dHRvbnMgPSB0aGlzLmJ1dHRvbnNfa2V5cy5maWx0ZXIoa2V5ID0+ICFmaWx0ZXJlZF9idXR0b25zLmluY2x1ZGVzKGtleSkpO1xuICAgICAgICB0aGlzLmJ1dHRvbnNfbnVtYmVyID0gYnV0dG9ucy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IHRvdGFsX3dpZHRoID1cbiAgICAgICAgICAgIEJVVFRPTl9XSURUSCAqIHRoaXMuYnV0dG9uc19udW1iZXIgKyB0aGlzLnRpdGxlX3dpbmRvd193aWR0aCArIChudW1iZXJzLk9VVFNJREVfQk9SREVSX1dJRFRIIDw8IDEpICsgMjtcbiAgICAgICAgdGhpcy54ID0gbnVtYmVycy5HQU1FX1dJRFRIIC0gdG90YWxfd2lkdGg7XG5cbiAgICAgICAgaWYgKCF0aGlzLmRvY2tfcmlnaHQpIHRoaXMueCA9IHRoaXMueCA+PiAxO1xuICAgICAgICB0aGlzLnRpdGxlX3dpbmRvdy51cGRhdGVfcG9zaXRpb24oe3g6IHRoaXMueCArIEJVVFRPTl9XSURUSCAqIHRoaXMuYnV0dG9uc19udW1iZXJ9KTtcblxuICAgICAgICBpZiAodGhpcy5idXR0b25zKSB7XG4gICAgICAgICAgICB0aGlzLmJ1dHRvbnMuZm9yRWFjaChvYmogPT4ge1xuICAgICAgICAgICAgICAgIG9iai5zcHJpdGUuZGVzdHJveSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJ1dHRvbnMgPSBuZXcgQXJyYXkodGhpcy5idXR0b25zX251bWJlcik7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5idXR0b25zX251bWJlcjsgKytpKSB7XG4gICAgICAgICAgICB0aGlzLmJ1dHRvbnNbaV0gPSB7XG4gICAgICAgICAgICAgICAgc3ByaXRlOiB0aGlzLmdyb3VwLmNyZWF0ZSgwLCAwLCBcImJ1dHRvbnNcIiwgYnV0dG9uc1tpXSksXG4gICAgICAgICAgICAgICAgdGl0bGU6IHRoaXMudGl0bGVzW2ldLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uc1tpXS5zcHJpdGUuYW5jaG9yLnNldFRvKDAuNSwgMSk7XG4gICAgICAgICAgICB0aGlzLmJ1dHRvbnNbaV0uc3ByaXRlLmNlbnRlclggPSAoQlVUVE9OX1dJRFRIICogKGkgKyAwLjUpKSB8IDA7XG4gICAgICAgICAgICB0aGlzLmJ1dHRvbnNbaV0uc3ByaXRlLmNlbnRlclkgPSAoQlVUVE9OX0hFSUdIVCA+PiAxKSB8IDA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjaGFuZ2VfYnV0dG9uKHN0ZXA6IG51bWJlcikge1xuICAgICAgICB0aGlzLnJlc2V0X2J1dHRvbigpO1xuXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4ID0gKHRoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4ICsgc3RlcCkgJSB0aGlzLmJ1dHRvbnNfbnVtYmVyO1xuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZF9idXR0b25faW5kZXggPCAwKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2J1dHRvbl9pbmRleCA9IHRoaXMuYnV0dG9uc19udW1iZXIgLSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50aXRsZV93aW5kb3cuc2V0X3RleHQoW1t0aGlzLmJ1dHRvbnNbdGhpcy5zZWxlY3RlZF9idXR0b25faW5kZXhdLnRpdGxlXV0pO1xuICAgICAgICB0aGlzLnNldF9idXR0b24oKTtcbiAgICB9XG5cbiAgICBuZXh0X2J1dHRvbigpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VfYnV0dG9uKEZPUldBUkQpO1xuICAgIH1cblxuICAgIHByZXZpb3VzX2J1dHRvbigpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VfYnV0dG9uKEJBQ0tXQVJEKTtcbiAgICB9XG5cbiAgICBzZXRfdG9fcG9zaXRpb24oaW5kZXg6IG51bWJlcikge1xuICAgICAgICB0aGlzLnJlc2V0X2J1dHRvbigpO1xuXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4ID0gaW5kZXg7XG4gICAgICAgIHRoaXMudGl0bGVfd2luZG93LnNldF90ZXh0KFtbdGhpcy5idXR0b25zW3RoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4XS50aXRsZV1dKTtcblxuICAgICAgICB0aGlzLnNldF9idXR0b24oKTtcbiAgICB9XG5cbiAgICBzZXRfYnV0dG9uKCkge1xuICAgICAgICBsZXQgYWN0aXZlX2RlZmF1bHQgPSBBQ1RJVkVfREVGQVVMVDtcbiAgICAgICAgbGV0IG1heF9zY2FsZSA9IE1BWF9TQ0FMRV9ERUZBVUxUO1xuXG4gICAgICAgIGlmICh0aGlzLmN1c3RvbV9zY2FsZSkge1xuICAgICAgICAgICAgYWN0aXZlX2RlZmF1bHQgPSB0aGlzLmN1c3RvbV9zY2FsZS5hY3RpdmVfZGVmYXVsdDtcbiAgICAgICAgICAgIG1heF9zY2FsZSA9IHRoaXMuY3VzdG9tX3NjYWxlLm1heF9zY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYnV0dG9uc1t0aGlzLnNlbGVjdGVkX2J1dHRvbl9pbmRleF0uc3ByaXRlLnNjYWxlLnNldFRvKGFjdGl2ZV9kZWZhdWx0LCBhY3RpdmVfZGVmYXVsdCk7XG4gICAgICAgIHRoaXMuYnV0dG9uc1t0aGlzLnNlbGVjdGVkX2J1dHRvbl9pbmRleF0uc3ByaXRlLmJyaW5nVG9Ub3AoKTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9idXR0b25fdHdlZW4gPSB0aGlzLmdhbWUuYWRkXG4gICAgICAgICAgICAudHdlZW4odGhpcy5idXR0b25zW3RoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4XS5zcHJpdGUuc2NhbGUpXG4gICAgICAgICAgICAudG8oe3g6IG1heF9zY2FsZSwgeTogbWF4X3NjYWxlfSwgUGhhc2VyLlRpbWVyLlFVQVJURVIgPj4gMSwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSwgdHJ1ZSwgMCwgLTEsIHRydWUpO1xuICAgIH1cblxuICAgIHJlc2V0X2J1dHRvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuYnV0dG9uc1t0aGlzLnNlbGVjdGVkX2J1dHRvbl9pbmRleF0pIHtcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uc1t0aGlzLnNlbGVjdGVkX2J1dHRvbl9pbmRleF0uc3ByaXRlLnNjYWxlLnNldFRvKDEuMCwgMS4wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkX2J1dHRvbl90d2Vlbikge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9idXR0b25fdHdlZW4uc3RvcCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlX3Bvc2l0aW9uKCkge1xuICAgICAgICB0aGlzLmdyb3VwLnggPSB0aGlzLmdhbWUuY2FtZXJhLnggKyB0aGlzLng7XG4gICAgICAgIHRoaXMuZ3JvdXAueSA9IHRoaXMuZ2FtZS5jYW1lcmEueSArIHRoaXMueTtcbiAgICAgICAgdGhpcy50aXRsZV93aW5kb3cudXBkYXRlKHRydWUpO1xuICAgIH1cblxuICAgIG9wZW4oXG4gICAgICAgIGNhbGxiYWNrPzogRnVuY3Rpb24sXG4gICAgICAgIHNlbGVjdF9pbmRleDogbnVtYmVyID0gMCxcbiAgICAgICAgc3RhcnRfYWN0aXZlOiBib29sZWFuID0gdHJ1ZSxcbiAgICAgICAgY3VzdG9tX3NjYWxlPzoge2FjdGl2ZV9kZWZhdWx0OiBudW1iZXI7IG1heF9zY2FsZTogbnVtYmVyfVxuICAgICkge1xuICAgICAgICB0aGlzLnJlc2V0X2J1dHRvbigpO1xuXG4gICAgICAgIGlmIChjdXN0b21fc2NhbGUpIHRoaXMuY3VzdG9tX3NjYWxlID0gY3VzdG9tX3NjYWxlO1xuXG4gICAgICAgIHRoaXMubWVudV9hY3RpdmUgPSBzdGFydF9hY3RpdmU7XG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAxO1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2J1dHRvbl9pbmRleCA9IHNlbGVjdF9pbmRleDtcblxuICAgICAgICB0aGlzLnVwZGF0ZV9wb3NpdGlvbigpO1xuICAgICAgICB0aGlzLnRpdGxlX3dpbmRvdy5zZXRfdGV4dChbW3RoaXMuYnV0dG9uc1t0aGlzLnNlbGVjdGVkX2J1dHRvbl9pbmRleF0udGl0bGVdXSk7XG5cbiAgICAgICAgbGV0IHdpbmRvd19wcm9taXNlX3Jlc29sdmU6IEZ1bmN0aW9uO1xuICAgICAgICBsZXQgd2luZG93X3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIHdpbmRvd19wcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy50aXRsZV93aW5kb3cuc2hvdyh3aW5kb3dfcHJvbWlzZV9yZXNvbHZlKTtcblxuICAgICAgICBsZXQgYnV0dG9uc19yZXNvbHZlOiBGdW5jdGlvbjtcbiAgICAgICAgbGV0IGJ1dHRvbnNfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgYnV0dG9uc19yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5nYW1lLmFkZFxuICAgICAgICAgICAgLnR3ZWVuKHRoaXMuZ3JvdXApXG4gICAgICAgICAgICAudG8oXG4gICAgICAgICAgICAgICAge3dpZHRoOiBCVVRUT05fV0lEVEggKiB0aGlzLmJ1dHRvbnNfbnVtYmVyLCBoZWlnaHQ6IEJVVFRPTl9IRUlHSFR9LFxuICAgICAgICAgICAgICAgIFBoYXNlci5UaW1lci5RVUFSVEVSID4+IDIsXG4gICAgICAgICAgICAgICAgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSxcbiAgICAgICAgICAgICAgICB0cnVlXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAub25Db21wbGV0ZS5hZGRPbmNlKGJ1dHRvbnNfcmVzb2x2ZSk7XG5cbiAgICAgICAgUHJvbWlzZS5hbGwoW3dpbmRvd19wcm9taXNlLCBidXR0b25zX3Byb21pc2VdKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0X2J1dHRvbigpO1xuICAgICAgICAgICAgdGhpcy5tZW51X29wZW4gPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2V0X2NvbnRyb2woKTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS53b3JsZC5icmluZ1RvVG9wKHRoaXMuZ3JvdXApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjbG9zZShjYWxsYmFjaz86IEZ1bmN0aW9uLCBhbmltYXRlOiBib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLnJlc2V0X2J1dHRvbigpO1xuICAgICAgICB0aGlzLmRhdGEuY29udHJvbF9tYW5hZ2VyLnJlc2V0KCk7XG5cbiAgICAgICAgdGhpcy5tZW51X29wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDA7XG5cbiAgICAgICAgaWYgKGFuaW1hdGUpIHtcbiAgICAgICAgICAgIGxldCB3aW5kb3dfcHJvbWlzZV9yZXNvbHZlOiBGdW5jdGlvbjtcbiAgICAgICAgICAgIGxldCB3aW5kb3dfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgICAgIHdpbmRvd19wcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnRpdGxlX3dpbmRvdy5jbG9zZSh3aW5kb3dfcHJvbWlzZV9yZXNvbHZlKTtcblxuICAgICAgICAgICAgY29uc3QgdHJhbnNpdGlvbl90aW1lID0gUGhhc2VyLlRpbWVyLlFVQVJURVIgPj4gMjtcbiAgICAgICAgICAgIGxldCBidXR0b25zX3Jlc29sdmU6IEZ1bmN0aW9uO1xuICAgICAgICAgICAgbGV0IGJ1dHRvbnNfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgICAgIGJ1dHRvbnNfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5nYW1lLmFkZFxuICAgICAgICAgICAgICAgIC50d2Vlbih0aGlzLmdyb3VwKVxuICAgICAgICAgICAgICAgIC50byh7d2lkdGg6IDAsIGhlaWdodDogMH0sIHRyYW5zaXRpb25fdGltZSwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAub25Db21wbGV0ZS5hZGRPbmNlKGJ1dHRvbnNfcmVzb2x2ZSk7XG4gICAgICAgICAgICBQcm9taXNlLmFsbChbd2luZG93X3Byb21pc2UsIGJ1dHRvbnNfcHJvbWlzZV0pLnRoZW4oXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgIT09IHVuZGVmaW5lZCA/IChjYWxsYmFjayBhcyAoKSA9PiB2b2lkKSA6ICgpID0+IHt9XG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50aXRsZV93aW5kb3cuY2xvc2UodW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLmdyb3VwLndpZHRoID0gdGhpcy5ncm91cC5oZWlnaHQgPSAwO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFjdGl2YXRlKCkge1xuICAgICAgICB0aGlzLm1lbnVfYWN0aXZlID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLmJ1dHRvbnMuZm9yRWFjaChvYmogPT4ge1xuICAgICAgICAgICAgb2JqLnNwcml0ZS5hbHBoYSA9IDE7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghdGhpcy50aXRsZV93aW5kb3cub3Blbikge1xuICAgICAgICAgICAgdGhpcy50aXRsZV93aW5kb3cuc2hvdyh1bmRlZmluZWQsIGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudGl0bGVfd2luZG93LnNldF90ZXh0KFtbdGhpcy5idXR0b25zW3RoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4XS50aXRsZV1dKTtcbiAgICAgICAgdGhpcy5zZXRfYnV0dG9uKCk7XG4gICAgICAgIHRoaXMuc2V0X2NvbnRyb2woKTtcbiAgICB9XG5cbiAgICBkZWFjdGl2YXRlKGhpZGUgPSBmYWxzZSkge1xuICAgICAgICB0aGlzLmRhdGEuY29udHJvbF9tYW5hZ2VyLnJlc2V0KCk7XG4gICAgICAgIHRoaXMucmVzZXRfYnV0dG9uKCk7XG4gICAgICAgIHRoaXMubWVudV9hY3RpdmUgPSBmYWxzZTtcblxuICAgICAgICBpZiAoaGlkZSkge1xuICAgICAgICAgICAgdGhpcy5idXR0b25zLmZvckVhY2gob2JqID0+IHtcbiAgICAgICAgICAgICAgICBvYmouc3ByaXRlLmFscGhhID0gMDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy50aXRsZV93aW5kb3cuY2xvc2UodW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLnRpdGxlX3dpbmRvdy5kZXN0cm95KGZhbHNlKTtcbiAgICAgICAgdGhpcy5ncm91cC5kZXN0cm95KCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtHb2xkZW5TdW59IGZyb20gXCIuLi9Hb2xkZW5TdW5cIjtcblxuZXhwb3J0IGVudW0gZXZlbnRfdHlwZXMge1xuICAgIEJBVFRMRSA9IFwiYmF0dGxlXCIsXG59XG5cbmV4cG9ydCBjbGFzcyBHYW1lRXZlbnQge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgZGF0YTogR29sZGVuU3VuO1xuICAgIHB1YmxpYyB0eXBlOiBldmVudF90eXBlcztcbiAgICBwdWJsaWMgaWQ6IG51bWJlcjtcbiAgICBwdWJsaWMgc3RhdGljIGlkX2luY3JlbWVudGVyOiBudW1iZXI7XG4gICAgcHVibGljIHN0YXRpYyBldmVudHM6IHtbaWQ6IG51bWJlcl06IEdhbWVFdmVudH07XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhLCB0eXBlKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMuaWQgPSBHYW1lRXZlbnQuaWRfaW5jcmVtZW50ZXIrKztcbiAgICAgICAgR2FtZUV2ZW50LmV2ZW50c1t0aGlzLmlkXSA9IHRoaXM7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldF9ldmVudChpZCkge1xuICAgICAgICByZXR1cm4gR2FtZUV2ZW50LmV2ZW50c1tpZF07XG4gICAgfVxuXG4gICAgc3RhdGljIHJlc2V0KCkge1xuICAgICAgICBHYW1lRXZlbnQuaWRfaW5jcmVtZW50ZXIgPSAwO1xuICAgICAgICBHYW1lRXZlbnQuZXZlbnRzID0ge307XG4gICAgfVxufVxuXG5HYW1lRXZlbnQucmVzZXQoKTtcbiIsImltcG9ydCB7aW5pdF9jYXN0X2F1cmEsIHRpbnRfbWFwX2xheWVyc30gZnJvbSBcIi4vcHN5bmVyZ3lfY2FzdFwiO1xuaW1wb3J0IHtiYXNlX2FjdGlvbnMsIGRpcmVjdGlvbnMsIGRpcmVjdGlvbnNfY291bnQsIHJldmVyc2VfZGlyZWN0aW9uc30gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQge0ludGVyYWN0YWJsZU9iamVjdHMsIGludGVyYWN0YWJsZV9vYmplY3RfaW50ZXJhY3Rpb25fdHlwZXN9IGZyb20gXCIuLi9JbnRlcmFjdGFibGVPYmplY3RzXCI7XG5pbXBvcnQge0ZpZWxkUHN5bmVyZ3lXaW5kb3d9IGZyb20gXCIuLi93aW5kb3dzL0ZpZWxkUHN5bmVyZ3lXaW5kb3dcIjtcbmltcG9ydCB7R29sZGVuU3VufSBmcm9tIFwiLi4vR29sZGVuU3VuXCI7XG5pbXBvcnQge0NvbnRyb2xsYWJsZUNoYXJ9IGZyb20gXCIuLi9Db250cm9sbGFibGVDaGFyXCI7XG5cbi8qRGVmaW5lcyBhbmQgbWFuYWdlcyB0aGUgdXNhZ2Ugb2YgZmllbGQgcHN5bmVyZ3lcblxuSW5wdXQ6IGdhbWUgW1BoYXNlcjpHYW1lXSAtIFJlZmVyZW5jZSB0byB0aGUgcnVubmluZyBnYW1lIG9iamVjdFxuICAgICAgIGRhdGEgW0dvbGRlblN1bl0gLSBSZWZlcmVuY2UgdG8gdGhlIG1haW4gSlMgQ2xhc3MgaW5zdGFuY2UqL1xuZXhwb3J0IGNsYXNzIEZpZWxkQWJpbGl0aWVzIHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGFiaWxpdHlfa2V5X25hbWU6IHN0cmluZztcbiAgICBwdWJsaWMgZGF0YTogR29sZGVuU3VuO1xuICAgIHB1YmxpYyB0YXJnZXRfbWF4X3JhbmdlOiBudW1iZXI7XG4gICAgcHVibGljIGFjdGlvbl9rZXlfbmFtZTogc3RyaW5nO1xuICAgIHB1YmxpYyBuZWVkX3RhcmdldDogYm9vbGVhbjtcbiAgICBwdWJsaWMgYm9vdHN0cmFwX21ldGhvZDogRnVuY3Rpb247XG4gICAgcHVibGljIGNhc3RfZmluaXNoZXI6IEZ1bmN0aW9uO1xuICAgIHB1YmxpYyBjb250cm9sbGFibGVfY2hhcjogQ29udHJvbGxhYmxlQ2hhcjtcbiAgICBwdWJsaWMgdGFyZ2V0X2ZvdW5kOiBib29sZWFuO1xuICAgIHB1YmxpYyB0YXJnZXRfb2JqZWN0OiBJbnRlcmFjdGFibGVPYmplY3RzO1xuICAgIHB1YmxpYyBzdG9wX2Nhc3Rpbmc6IEZ1bmN0aW9uO1xuICAgIHB1YmxpYyBmaWVsZF9wc3luZXJneV93aW5kb3c6IEZpZWxkUHN5bmVyZ3lXaW5kb3c7XG4gICAgcHVibGljIGNhc3RfZGlyZWN0aW9uOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhLCBhYmlsaXR5X2tleV9uYW1lLCB0YXJnZXRfbWF4X3JhbmdlLCBhY3Rpb25fa2V5X25hbWUsIG5lZWRfdGFyZ2V0KSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuYWJpbGl0eV9rZXlfbmFtZSA9IGFiaWxpdHlfa2V5X25hbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMudGFyZ2V0X21heF9yYW5nZSA9IHRhcmdldF9tYXhfcmFuZ2U7XG4gICAgICAgIHRoaXMuYWN0aW9uX2tleV9uYW1lID0gYWN0aW9uX2tleV9uYW1lO1xuICAgICAgICB0aGlzLm5lZWRfdGFyZ2V0ID0gbmVlZF90YXJnZXQ7XG4gICAgICAgIHRoaXMuYm9vdHN0cmFwX21ldGhvZCA9ICgpID0+IHt9O1xuICAgICAgICB0aGlzLmNhc3RfZmluaXNoZXIgPSAoKSA9PiB7fTtcbiAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhciA9IG51bGw7XG4gICAgICAgIHRoaXMudGFyZ2V0X2ZvdW5kID0gZmFsc2U7XG4gICAgICAgIHRoaXMudGFyZ2V0X29iamVjdCA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RvcF9jYXN0aW5nID0gbnVsbDtcbiAgICAgICAgdGhpcy5maWVsZF9wc3luZXJneV93aW5kb3cgPSBuZXcgRmllbGRQc3luZXJneVdpbmRvdyh0aGlzLmdhbWUsIHRoaXMuZGF0YSk7XG4gICAgfVxuXG4gICAgLypTZXRzIHRoZSBwc3luZXJneSBjYXN0IGRpcmVjdGlvblxuICAgIEZvciBkaWFnb25hbHMsIHBpY2sgdGhlIG5leHQgY2xvY2t3aXNlIG5vbi1kaWFnb25hbFxuXG4gICAgSW5wdXQ6IGRpcmVjdGlvbiBbbnVtYmVyXSAtIEN1cnJlbnQgZGlyZWN0aW9uXG5cbiAgICBPdXRwdXQ6IFtudW1iZXJdIC0gTm9uLWRpYWdvbmFsIGNhc3QgZGlyZWN0aW9uKi9cbiAgICBnZXRfY2FzdF9kaXJlY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gJSAyID09PSAwKSByZXR1cm4gZGlyZWN0aW9uO1xuICAgICAgICBkaXJlY3Rpb24rKztcbiAgICAgICAgcmV0dXJuIGRpcmVjdGlvbiA9PT0gZGlyZWN0aW9uc19jb3VudCA/IGRpcmVjdGlvbnMucmlnaHQgOiBkaXJlY3Rpb247XG4gICAgfVxuXG4gICAgc2V0X2hlcm9fY2FzdF9hbmltKCkge1xuICAgICAgICB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnBsYXkodGhpcy5hY3Rpb25fa2V5X25hbWUsIHJldmVyc2VfZGlyZWN0aW9uc1t0aGlzLmNhc3RfZGlyZWN0aW9uXSk7XG4gICAgfVxuXG4gICAgdW5zZXRfaGVyb19jYXN0X2FuaW0oKSB7XG4gICAgICAgIHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLmFuaW1hdGlvbnMuY3VycmVudEFuaW0ucmV2ZXJzZU9uY2UoKTtcbiAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUuYW5pbWF0aW9ucy5jdXJyZW50QW5pbS5vbkNvbXBsZXRlLmFkZE9uY2UoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhci5wbGF5KGJhc2VfYWN0aW9ucy5JRExFLCByZXZlcnNlX2RpcmVjdGlvbnNbdGhpcy5jYXN0X2RpcmVjdGlvbl0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhci5wbGF5KHRoaXMuYWN0aW9uX2tleV9uYW1lLCByZXZlcnNlX2RpcmVjdGlvbnNbdGhpcy5jYXN0X2RpcmVjdGlvbl0pO1xuICAgIH1cblxuICAgIHNldF9ib290c3RyYXBfbWV0aG9kKG1ldGhvZCkge1xuICAgICAgICB0aGlzLmJvb3RzdHJhcF9tZXRob2QgPSBtZXRob2Q7XG4gICAgfVxuXG4gICAgc2V0X2Nhc3RfZmluaXNoZXJfbWV0aG9kKG1ldGhvZCkge1xuICAgICAgICB0aGlzLmNhc3RfZmluaXNoZXIgPSBtZXRob2Q7XG4gICAgfVxuXG4gICAgc2VhcmNoX2Zvcl90YXJnZXQoKSB7XG4gICAgICAgIHRoaXMudGFyZ2V0X2ZvdW5kID0gZmFsc2U7XG4gICAgICAgIGxldCBtaW5feCwgbWF4X3gsIG1pbl95LCBtYXhfeTtcbiAgICAgICAgaWYgKHRoaXMuY2FzdF9kaXJlY3Rpb24gPT09IGRpcmVjdGlvbnMudXAgfHwgdGhpcy5jYXN0X2RpcmVjdGlvbiA9PT0gZGlyZWN0aW9ucy5kb3duKSB7XG4gICAgICAgICAgICBtaW5feCA9IHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLnggLSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLmJvZHlfcmFkaXVzO1xuICAgICAgICAgICAgbWF4X3ggPSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS54ICsgdGhpcy5jb250cm9sbGFibGVfY2hhci5ib2R5X3JhZGl1cztcbiAgICAgICAgICAgIGlmICh0aGlzLmNhc3RfZGlyZWN0aW9uID09PSBkaXJlY3Rpb25zLnVwKSB7XG4gICAgICAgICAgICAgICAgbWluX3kgPSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS55IC0gdGhpcy5jb250cm9sbGFibGVfY2hhci5ib2R5X3JhZGl1cyAtIHRoaXMudGFyZ2V0X21heF9yYW5nZTtcbiAgICAgICAgICAgICAgICBtYXhfeSA9IHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLnkgLSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLmJvZHlfcmFkaXVzO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtaW5feSA9IHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLnkgKyB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLmJvZHlfcmFkaXVzO1xuICAgICAgICAgICAgICAgIG1heF95ID0gdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUueSArIHRoaXMuY29udHJvbGxhYmxlX2NoYXIuYm9keV9yYWRpdXMgKyB0aGlzLnRhcmdldF9tYXhfcmFuZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtaW5feSA9IHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLnkgLSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLmJvZHlfcmFkaXVzO1xuICAgICAgICAgICAgbWF4X3kgPSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS55ICsgdGhpcy5jb250cm9sbGFibGVfY2hhci5ib2R5X3JhZGl1cztcbiAgICAgICAgICAgIGlmICh0aGlzLmNhc3RfZGlyZWN0aW9uID09PSBkaXJlY3Rpb25zLmxlZnQpIHtcbiAgICAgICAgICAgICAgICBtaW5feCA9IHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLnggLSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLmJvZHlfcmFkaXVzIC0gdGhpcy50YXJnZXRfbWF4X3JhbmdlO1xuICAgICAgICAgICAgICAgIG1heF94ID0gdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUueCAtIHRoaXMuY29udHJvbGxhYmxlX2NoYXIuYm9keV9yYWRpdXM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1pbl94ID0gdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUueCArIHRoaXMuY29udHJvbGxhYmxlX2NoYXIuYm9keV9yYWRpdXM7XG4gICAgICAgICAgICAgICAgbWF4X3ggPSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS54ICsgdGhpcy5jb250cm9sbGFibGVfY2hhci5ib2R5X3JhZGl1cyArIHRoaXMudGFyZ2V0X21heF9yYW5nZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgc3FyX2Rpc3RhbmNlID0gSW5maW5pdHk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhLm1hcC5pbnRlcmFjdGFibGVfb2JqZWN0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgbGV0IGludGVyYWN0YWJsZV9vYmplY3QgPSB0aGlzLmRhdGEubWFwLmludGVyYWN0YWJsZV9vYmplY3RzW2ldO1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICEoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWJpbGl0eV9rZXlfbmFtZSBpblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiW2ludGVyYWN0YWJsZV9vYmplY3Qua2V5X25hbWVdLnBzeW5lcmd5X2tleXNcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBjb25zdCBpdGVtX3hfcHggPVxuICAgICAgICAgICAgICAgIGludGVyYWN0YWJsZV9vYmplY3QuY3VycmVudF94ICogdGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZVdpZHRoICsgKHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVXaWR0aCA+PiAxKTtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1feV9weCA9XG4gICAgICAgICAgICAgICAgaW50ZXJhY3RhYmxlX29iamVjdC5jdXJyZW50X3kgKiB0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlSGVpZ2h0ICtcbiAgICAgICAgICAgICAgICAodGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZUhlaWdodCA+PiAxKTtcbiAgICAgICAgICAgIGNvbnN0IHhfY29uZGl0aW9uID0gaXRlbV94X3B4ID49IG1pbl94ICYmIGl0ZW1feF9weCA8PSBtYXhfeDtcbiAgICAgICAgICAgIGNvbnN0IHlfY29uZGl0aW9uID0gaXRlbV95X3B4ID49IG1pbl95ICYmIGl0ZW1feV9weCA8PSBtYXhfeTtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICB4X2NvbmRpdGlvbiAmJlxuICAgICAgICAgICAgICAgIHlfY29uZGl0aW9uICYmXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLm1hcC5jb2xsaXNpb25fbGF5ZXIgPT09IGludGVyYWN0YWJsZV9vYmplY3QuYmFzZV9jb2xsaXNpb25fbGF5ZXJcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGxldCB0aGlzX3Nxcl9kaXN0YW5jZSA9XG4gICAgICAgICAgICAgICAgICAgIE1hdGgucG93KGl0ZW1feF9weCAtIHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLngsIDIpICtcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5wb3coaXRlbV95X3B4IC0gdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUueSwgMik7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXNfc3FyX2Rpc3RhbmNlIDwgc3FyX2Rpc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNxcl9kaXN0YW5jZSA9IHRoaXNfc3FyX2Rpc3RhbmNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldF9mb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0X29iamVjdCA9IGludGVyYWN0YWJsZV9vYmplY3Q7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0X3RhcmdldF9jYXN0ZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLnRhcmdldF9vYmplY3QpIHtcbiAgICAgICAgICAgIGNvbnN0IHBzeW5lcmd5X3Byb3BlcnRpZXMgPSB0aGlzLmRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiW3RoaXMudGFyZ2V0X29iamVjdC5rZXlfbmFtZV1cbiAgICAgICAgICAgICAgICAucHN5bmVyZ3lfa2V5c1t0aGlzLmFiaWxpdHlfa2V5X25hbWVdO1xuICAgICAgICAgICAgaWYgKHBzeW5lcmd5X3Byb3BlcnRpZXMuaW50ZXJhY3Rpb25fdHlwZSA9PT0gaW50ZXJhY3RhYmxlX29iamVjdF9pbnRlcmFjdGlvbl90eXBlcy5PTkNFKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2FzdGVkX3Byb3BlcnR5ID0gdGhpcy5hYmlsaXR5X2tleV9uYW1lICsgXCJfY2FzdGVkXCI7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudGFyZ2V0X29iamVjdC5jdXN0b21fZGF0YVtjYXN0ZWRfcHJvcGVydHldKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0X2ZvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0X29iamVjdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnRhcmdldF9mb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldF9vYmplY3QuY3VzdG9tX2RhdGFbY2FzdGVkX3Byb3BlcnR5XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2FzdChjb250cm9sbGFibGVfY2hhciwgY2FzdGVyX2tleV9uYW1lKSB7XG4gICAgICAgIHRoaXMuY29udHJvbGxhYmxlX2NoYXIgPSBjb250cm9sbGFibGVfY2hhcjtcbiAgICAgICAgaWYgKHRoaXMuY29udHJvbGxhYmxlX2NoYXIuY2FzdGluZ19wc3luZXJneSkgcmV0dXJuO1xuICAgICAgICBpZiAoY2FzdGVyX2tleV9uYW1lICE9PSB1bmRlZmluZWQgJiYgY2FzdGVyX2tleV9uYW1lIGluIHRoaXMuZGF0YS5pbmZvLm1haW5fY2hhcl9saXN0KSB7XG4gICAgICAgICAgICBjb25zdCBjYXN0ZXIgPSB0aGlzLmRhdGEuaW5mby5tYWluX2NoYXJfbGlzdFtjYXN0ZXJfa2V5X25hbWVdO1xuICAgICAgICAgICAgY29uc3QgYWJpbGl0eSA9IHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W3RoaXMuYWJpbGl0eV9rZXlfbmFtZV07XG4gICAgICAgICAgICBpZiAoY2FzdGVyLmN1cnJlbnRfcHAgPCBhYmlsaXR5LnBwX2Nvc3QgfHwgIWNhc3Rlci5hYmlsaXRpZXMuaW5jbHVkZXModGhpcy5hYmlsaXR5X2tleV9uYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc3Rlci5jdXJyZW50X3BwIC09IGFiaWxpdHkucHBfY29zdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZmllbGRfcHN5bmVyZ3lfd2luZG93LndpbmRvdy5zZW5kX3RvX2Zyb250KCk7XG4gICAgICAgIHRoaXMuZmllbGRfcHN5bmVyZ3lfd2luZG93Lm9wZW4odGhpcy5hYmlsaXR5X2tleV9uYW1lKTtcblxuICAgICAgICB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLmNhc3RpbmdfcHN5bmVyZ3kgPSB0cnVlO1xuICAgICAgICB0aGlzLmdhbWUucGh5c2ljcy5wMi5wYXVzZSgpO1xuICAgICAgICB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnN0b3BfY2hhcihmYWxzZSk7XG5cbiAgICAgICAgdGhpcy5jYXN0X2RpcmVjdGlvbiA9IHRoaXMuZ2V0X2Nhc3RfZGlyZWN0aW9uKHRoaXMuY29udHJvbGxhYmxlX2NoYXIuY3VycmVudF9kaXJlY3Rpb24pO1xuICAgICAgICB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNldF9kaXJlY3Rpb24odGhpcy5jYXN0X2RpcmVjdGlvbik7XG4gICAgICAgIGlmICh0aGlzLm5lZWRfdGFyZ2V0KSB7XG4gICAgICAgICAgICB0aGlzLnNlYXJjaF9mb3JfdGFyZ2V0KCk7XG4gICAgICAgICAgICB0aGlzLnNldF90YXJnZXRfY2FzdGVkKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldF9oZXJvX2Nhc3RfYW5pbSgpO1xuICAgICAgICBsZXQgcmVzZXRfbWFwO1xuICAgICAgICB0aGlzLnN0b3BfY2FzdGluZyA9IGluaXRfY2FzdF9hdXJhKFxuICAgICAgICAgICAgdGhpcy5nYW1lLFxuICAgICAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUsXG4gICAgICAgICAgICB0aGlzLmRhdGEubnBjX2dyb3VwLFxuICAgICAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhci5jb2xvcl9maWx0ZXIsXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzZXRfbWFwID0gdGludF9tYXBfbGF5ZXJzKHRoaXMuZ2FtZSwgdGhpcy5kYXRhLm1hcCwgdGhpcy5kYXRhLm1hcC5jb2xvcl9maWx0ZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuYm9vdHN0cmFwX21ldGhvZCgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUucGh5c2ljcy5wMi5yZXN1bWUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLmNhc3RpbmdfcHN5bmVyZ3kgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldF9vYmplY3QgPSBudWxsO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNhc3RfZmluaXNoZXIoKTtcbiAgICAgICAgICAgICAgICByZXNldF9tYXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gXCIuL21hZ2ljX251bWJlcnNcIjtcbmltcG9ydCB7cmV2ZXJzZV9kaXJlY3Rpb25zLCBiYXNlX2FjdGlvbnN9IGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQge0Zvb3RzdGVwc30gZnJvbSBcIi4vdXRpbHMvRm9vdHN0ZXBzXCI7XG5pbXBvcnQge0dvbGRlblN1bn0gZnJvbSBcIi4vR29sZGVuU3VuXCI7XG5pbXBvcnQge1Nwcml0ZUJhc2V9IGZyb20gXCIuL1Nwcml0ZUJhc2VcIjtcblxuZXhwb3J0IGNsYXNzIENvbnRyb2xsYWJsZUNoYXIge1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IERFRkFVTFRfU0hBRE9XX0tFWU5BTUUgPSBcInNoYWRvd1wiO1xuXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgREVGQVVMVF9TSEFET1dfQU5DSE9SX1ggPSAwLjQ1O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IERFRkFVTFRfU0hBRE9XX0FOQ0hPUl9ZID0gMC4wNTtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBERUZBVUxUX1NQUklURV9BTkNIT1JfWCA9IDAuNTtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBERUZBVUxUX1NQUklURV9BTkNIT1JfWSA9IDAuODtcblxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IGRlZmF1bHRfYW5jaG9yID0ge1xuICAgICAgICB4OiBDb250cm9sbGFibGVDaGFyLkRFRkFVTFRfU1BSSVRFX0FOQ0hPUl9YLFxuICAgICAgICB5OiBDb250cm9sbGFibGVDaGFyLkRFRkFVTFRfU1BSSVRFX0FOQ0hPUl9ZLFxuICAgIH07XG5cbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6IEdvbGRlblN1bjtcbiAgICBwdWJsaWMga2V5X25hbWU6IHN0cmluZztcbiAgICBwdWJsaWMgeF9zcGVlZDogbnVtYmVyO1xuICAgIHB1YmxpYyB5X3NwZWVkOiBudW1iZXI7XG4gICAgcHVibGljIGV4dHJhX3NwZWVkOiBudW1iZXI7XG4gICAgcHVibGljIHdhbGtfc3BlZWQ6IG51bWJlcjtcbiAgICBwdWJsaWMgZGFzaF9zcGVlZDogbnVtYmVyO1xuICAgIHB1YmxpYyBjbGltYl9zcGVlZDogbnVtYmVyO1xuICAgIHB1YmxpYyBzdG9wX2J5X2NvbGxpZGluZzogYm9vbGVhbjtcbiAgICBwdWJsaWMgZm9yY2VfZGlyZWN0aW9uOiBib29sZWFuO1xuICAgIHB1YmxpYyBkYXNoaW5nOiBib29sZWFuO1xuICAgIHB1YmxpYyBjbGltYmluZzogYm9vbGVhbjtcbiAgICBwdWJsaWMgcHVzaGluZzogYm9vbGVhbjtcbiAgICBwdWJsaWMganVtcGluZzogYm9vbGVhbjtcbiAgICBwdWJsaWMgc2xpZGluZzogYm9vbGVhbjtcbiAgICBwdWJsaWMgY2FzdGluZ19wc3luZXJneTogYm9vbGVhbjtcbiAgICBwdWJsaWMgdGVsZXBvcnRpbmc6IGJvb2xlYW47XG4gICAgcHVibGljIGlkbGVfY2xpbWJpbmc6IGJvb2xlYW47XG4gICAgcHVibGljIHNwcml0ZV9pbmZvOiBTcHJpdGVCYXNlO1xuICAgIHB1YmxpYyBzcHJpdGU6IFBoYXNlci5TcHJpdGU7XG4gICAgcHVibGljIHNoYWRvdzogUGhhc2VyLlNwcml0ZTtcbiAgICBwdWJsaWMgYm9keV9yYWRpdXM6IG51bWJlcjtcbiAgICBwdWJsaWMgdGlsZV94X3BvczogbnVtYmVyO1xuICAgIHB1YmxpYyB0aWxlX3lfcG9zOiBudW1iZXI7XG4gICAgcHVibGljIGN1cnJlbnRfYWN0aW9uOiBzdHJpbmcgfCBiYXNlX2FjdGlvbnM7XG4gICAgcHVibGljIGN1cnJlbnRfZGlyZWN0aW9uOiBudW1iZXI7XG4gICAgcHVibGljIHJlcXVpcmVkX2RpcmVjdGlvbjogbnVtYmVyO1xuICAgIHB1YmxpYyBkZXNpcmVkX2RpcmVjdGlvbjogbnVtYmVyO1xuICAgIHB1YmxpYyBjb2xvcl9maWx0ZXI6IFBoYXNlci5GaWx0ZXI7XG4gICAgcHVibGljIGVuYWJsZV9mb290c3RlcHM6IGJvb2xlYW47XG4gICAgcHVibGljIGZvb3RzdGVwczogRm9vdHN0ZXBzO1xuICAgIHB1YmxpYyB0cnlpbmdfdG9fcHVzaDogYm9vbGVhbjtcbiAgICBwdWJsaWMgdHJ5aW5nX3RvX3B1c2hfZGlyZWN0aW9uOiBudW1iZXI7XG4gICAgcHVibGljIHB1c2hfdGltZXI6IFBoYXNlci5UaW1lckV2ZW50O1xuICAgIHB1YmxpYyBjcm9wX3RleHR1cmU6IGJvb2xlYW47XG4gICAgcHVibGljIHNoYWRvd19mb2xsb3dpbmc6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgZ2FtZTogUGhhc2VyLkdhbWUsXG4gICAgICAgIGRhdGE6IEdvbGRlblN1bixcbiAgICAgICAga2V5X25hbWU6IHN0cmluZyxcbiAgICAgICAgaW5pdGlhbF94OiBudW1iZXIsXG4gICAgICAgIGluaXRpYWxfeTogbnVtYmVyLFxuICAgICAgICBpbml0aWFsX2FjdGlvbjogc3RyaW5nIHwgYmFzZV9hY3Rpb25zLFxuICAgICAgICBpbml0aWFsX2RpcmVjdGlvbjogbnVtYmVyLFxuICAgICAgICBlbmFibGVfZm9vdHN0ZXBzOiBib29sZWFuLFxuICAgICAgICB3YWxrX3NwZWVkOiBudW1iZXIsXG4gICAgICAgIGRhc2hfc3BlZWQ6IG51bWJlcixcbiAgICAgICAgY2xpbWJfc3BlZWQ6IG51bWJlclxuICAgICkge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLmtleV9uYW1lID0ga2V5X25hbWU7XG4gICAgICAgIHRoaXMueF9zcGVlZCA9IDA7XG4gICAgICAgIHRoaXMueV9zcGVlZCA9IDA7XG4gICAgICAgIHRoaXMuZXh0cmFfc3BlZWQgPSAwO1xuICAgICAgICB0aGlzLndhbGtfc3BlZWQgPSB3YWxrX3NwZWVkO1xuICAgICAgICB0aGlzLmRhc2hfc3BlZWQgPSBkYXNoX3NwZWVkO1xuICAgICAgICB0aGlzLmNsaW1iX3NwZWVkID0gY2xpbWJfc3BlZWQ7XG4gICAgICAgIHRoaXMuc3RvcF9ieV9jb2xsaWRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5mb3JjZV9kaXJlY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kYXNoaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY2xpbWJpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wdXNoaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuanVtcGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNsaWRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jYXN0aW5nX3BzeW5lcmd5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMudGVsZXBvcnRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pZGxlX2NsaW1iaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc3ByaXRlX2luZm8gPSBudWxsO1xuICAgICAgICB0aGlzLnNwcml0ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuc2hhZG93ID0gbnVsbDtcbiAgICAgICAgdGhpcy5ib2R5X3JhZGl1cyA9IDA7XG4gICAgICAgIHRoaXMudGlsZV94X3BvcyA9IGluaXRpYWxfeDtcbiAgICAgICAgdGhpcy50aWxlX3lfcG9zID0gaW5pdGlhbF95O1xuICAgICAgICB0aGlzLmN1cnJlbnRfYWN0aW9uID0gaW5pdGlhbF9hY3Rpb247XG4gICAgICAgIHRoaXMuY3VycmVudF9kaXJlY3Rpb24gPSBpbml0aWFsX2RpcmVjdGlvbjtcbiAgICAgICAgdGhpcy5yZXF1aXJlZF9kaXJlY3Rpb24gPSAwO1xuICAgICAgICB0aGlzLmRlc2lyZWRfZGlyZWN0aW9uID0gaW5pdGlhbF9kaXJlY3Rpb247XG4gICAgICAgIHRoaXMuY29sb3JfZmlsdGVyID0gdGhpcy5nYW1lLmFkZC5maWx0ZXIoXCJDb2xvckZpbHRlcnNcIik7XG4gICAgICAgIHRoaXMudHJ5aW5nX3RvX3B1c2ggPSBmYWxzZTtcbiAgICAgICAgdGhpcy50cnlpbmdfdG9fcHVzaF9kaXJlY3Rpb24gPSBudWxsO1xuICAgICAgICB0aGlzLnB1c2hfdGltZXIgPSBudWxsO1xuICAgICAgICB0aGlzLmVuYWJsZV9mb290c3RlcHMgPSBlbmFibGVfZm9vdHN0ZXBzID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IGVuYWJsZV9mb290c3RlcHM7XG4gICAgICAgIHRoaXMuZm9vdHN0ZXBzID0gbmV3IEZvb3RzdGVwcyh0aGlzLmdhbWUsIHRoaXMuZGF0YSk7XG4gICAgICAgIHRoaXMuY3JvcF90ZXh0dXJlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2hhZG93X2ZvbGxvd2luZyA9IHRydWU7XG4gICAgfVxuXG4gICAgaW5fYWN0aW9uKGFsbG93X2NsaW1iaW5nOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMuY2FzdGluZ19wc3luZXJneSB8fFxuICAgICAgICAgICAgdGhpcy5wdXNoaW5nIHx8XG4gICAgICAgICAgICAodGhpcy5jbGltYmluZyAmJiAhYWxsb3dfY2xpbWJpbmcpIHx8XG4gICAgICAgICAgICB0aGlzLmp1bXBpbmcgfHxcbiAgICAgICAgICAgIHRoaXMudGVsZXBvcnRpbmcgfHxcbiAgICAgICAgICAgIHRoaXMuc2xpZGluZ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIHNldF9zcHJpdGUoXG4gICAgICAgIGdyb3VwOiBQaGFzZXIuR3JvdXAsXG4gICAgICAgIHNwcml0ZV9pbmZvOiBTcHJpdGVCYXNlLFxuICAgICAgICBtYXBfc3ByaXRlOiBQaGFzZXIuVGlsZW1hcCxcbiAgICAgICAgbGF5ZXI6IG51bWJlcixcbiAgICAgICAgYW5jaG9yX3g/OiBudW1iZXIsXG4gICAgICAgIGFuY2hvcl95PzogbnVtYmVyLFxuICAgICAgICBpc193b3JsZF9tYXA6IGJvb2xlYW4gPSBmYWxzZVxuICAgICkge1xuICAgICAgICBhbmNob3JfeCA9IGFuY2hvcl94ID09PSB1bmRlZmluZWQgPyBDb250cm9sbGFibGVDaGFyLmRlZmF1bHRfYW5jaG9yLnggOiBhbmNob3JfeDtcbiAgICAgICAgYW5jaG9yX3kgPSBhbmNob3JfeSA9PT0gdW5kZWZpbmVkID8gQ29udHJvbGxhYmxlQ2hhci5kZWZhdWx0X2FuY2hvci55IDogYW5jaG9yX3k7XG4gICAgICAgIHRoaXMuc3ByaXRlX2luZm8gPSBzcHJpdGVfaW5mbztcbiAgICAgICAgY29uc3QgYWN0aW9uX2tleSA9IHRoaXMuc3ByaXRlX2luZm8uZ2V0QWN0aW9uS2V5KHRoaXMuY3VycmVudF9hY3Rpb24pO1xuICAgICAgICB0aGlzLnNwcml0ZSA9IGdyb3VwLmNyZWF0ZSgwLCAwLCBhY3Rpb25fa2V5KTtcbiAgICAgICAgdGhpcy5zcHJpdGUuYW5jaG9yLnNldFRvKGFuY2hvcl94LCBhbmNob3JfeSk7XG4gICAgICAgIHRoaXMuc3ByaXRlLnggPSAoKHRoaXMudGlsZV94X3BvcyArIDAuNSkgKiBtYXBfc3ByaXRlLnRpbGVXaWR0aCkgfCAwO1xuICAgICAgICB0aGlzLnNwcml0ZS55ID0gKCh0aGlzLnRpbGVfeV9wb3MgKyAwLjUpICogbWFwX3Nwcml0ZS50aWxlSGVpZ2h0KSB8IDA7XG4gICAgICAgIHRoaXMuc3ByaXRlLmJhc2VfY29sbGlzaW9uX2xheWVyID0gbGF5ZXI7XG4gICAgICAgIHRoaXMuc3ByaXRlLnJvdW5kUHggPSB0cnVlO1xuICAgICAgICBjb25zdCBzY2FsZV94ID0gaXNfd29ybGRfbWFwID8gbnVtYmVycy5XT1JMRF9NQVBfU1BSSVRFX1NDQUxFX1ggOiAxO1xuICAgICAgICBjb25zdCBzY2FsZV95ID0gaXNfd29ybGRfbWFwID8gbnVtYmVycy5XT1JMRF9NQVBfU1BSSVRFX1NDQUxFX1kgOiAxO1xuICAgICAgICB0aGlzLnNwcml0ZS5zY2FsZS5zZXRUbyhzY2FsZV94LCBzY2FsZV95KTtcbiAgICB9XG5cbiAgICByZXNldF9hbmNob3IocHJvcGVydHk/OiBcInhcIiB8IFwieVwiKSB7XG4gICAgICAgIGlmIChwcm9wZXJ0eSAhPT0gdW5kZWZpbmVkICYmIFtcInhcIiwgXCJ5XCJdLmluY2x1ZGVzKHByb3BlcnR5KSkge1xuICAgICAgICAgICAgdGhpcy5zcHJpdGUuYW5jaG9yW3Byb3BlcnR5XSA9IENvbnRyb2xsYWJsZUNoYXIuZGVmYXVsdF9hbmNob3JbcHJvcGVydHldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zcHJpdGUuYW5jaG9yLnggPSBDb250cm9sbGFibGVDaGFyLmRlZmF1bHRfYW5jaG9yLng7XG4gICAgICAgICAgICB0aGlzLnNwcml0ZS5hbmNob3IueSA9IENvbnRyb2xsYWJsZUNoYXIuZGVmYXVsdF9hbmNob3IueTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldF9zaGFkb3coXG4gICAgICAgIGtleV9uYW1lOiBzdHJpbmcsXG4gICAgICAgIGdyb3VwOiBQaGFzZXIuR3JvdXAsXG4gICAgICAgIGxheWVyOiBudW1iZXIsXG4gICAgICAgIHNoYWRvd19hbmNob3JfeD86IG51bWJlcixcbiAgICAgICAgc2hhZG93X2FuY2hvcl95PzogbnVtYmVyLFxuICAgICAgICBpc193b3JsZF9tYXA6IGJvb2xlYW4gPSBmYWxzZVxuICAgICkge1xuICAgICAgICBrZXlfbmFtZSA9IGtleV9uYW1lID09PSB1bmRlZmluZWQgPyBDb250cm9sbGFibGVDaGFyLkRFRkFVTFRfU0hBRE9XX0tFWU5BTUUgOiBrZXlfbmFtZTtcbiAgICAgICAgc2hhZG93X2FuY2hvcl94ID0gc2hhZG93X2FuY2hvcl94ID09PSB1bmRlZmluZWQgPyBDb250cm9sbGFibGVDaGFyLkRFRkFVTFRfU0hBRE9XX0FOQ0hPUl9YIDogc2hhZG93X2FuY2hvcl94O1xuICAgICAgICBzaGFkb3dfYW5jaG9yX3kgPSBzaGFkb3dfYW5jaG9yX3kgPT09IHVuZGVmaW5lZCA/IENvbnRyb2xsYWJsZUNoYXIuREVGQVVMVF9TSEFET1dfQU5DSE9SX1kgOiBzaGFkb3dfYW5jaG9yX3k7XG4gICAgICAgIHRoaXMuc2hhZG93ID0gZ3JvdXAuY3JlYXRlKDAsIDAsIGtleV9uYW1lKTtcbiAgICAgICAgdGhpcy5zaGFkb3cuYmxlbmRNb2RlID0gUElYSS5ibGVuZE1vZGVzLk1VTFRJUExZO1xuICAgICAgICB0aGlzLnNoYWRvdy5kaXNhYmxlUm91bmRQeCA9IHRydWU7XG4gICAgICAgIHRoaXMuc2hhZG93LmFuY2hvci5zZXRUbyhzaGFkb3dfYW5jaG9yX3gsIHNoYWRvd19hbmNob3JfeSk7XG4gICAgICAgIHRoaXMuc2hhZG93LmJhc2VfY29sbGlzaW9uX2xheWVyID0gbGF5ZXI7XG4gICAgICAgIGNvbnN0IHNjYWxlX3ggPSBpc193b3JsZF9tYXAgPyBudW1iZXJzLldPUkxEX01BUF9TUFJJVEVfU0NBTEVfWCA6IDE7XG4gICAgICAgIGNvbnN0IHNjYWxlX3kgPSBpc193b3JsZF9tYXAgPyBudW1iZXJzLldPUkxEX01BUF9TUFJJVEVfU0NBTEVfWSA6IDE7XG4gICAgICAgIHRoaXMuc2hhZG93LnNjYWxlLnNldFRvKHNjYWxlX3gsIHNjYWxlX3kpO1xuICAgIH1cblxuICAgIGNhbWVyYV9mb2xsb3coKSB7XG4gICAgICAgIHRoaXMuZ2FtZS5jYW1lcmEuZm9sbG93KHRoaXMuc3ByaXRlLCBQaGFzZXIuQ2FtZXJhLkZPTExPV19MT0NLT04sIG51bWJlcnMuQ0FNRVJBX0xFUlAsIG51bWJlcnMuQ0FNRVJBX0xFUlApO1xuICAgICAgICB0aGlzLmdhbWUuY2FtZXJhLmZvY3VzT24odGhpcy5zcHJpdGUpO1xuICAgIH1cblxuICAgIHNldF9jb2xsaXNpb25fbGF5ZXIobGF5ZXI6IG51bWJlcikge1xuICAgICAgICB0aGlzLnNwcml0ZS5iYXNlX2NvbGxpc2lvbl9sYXllciA9IGxheWVyO1xuICAgICAgICB0aGlzLnNoYWRvdy5iYXNlX2NvbGxpc2lvbl9sYXllciA9IGxheWVyO1xuICAgIH1cblxuICAgIHBsYXkoYWN0aW9uPzogc3RyaW5nIHwgYmFzZV9hY3Rpb25zLCBhbmltYXRpb24/OiBzdHJpbmcgfCBudW1iZXIsIHN0YXJ0OiBib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBhY3Rpb24gPSBhY3Rpb24gPT09IHVuZGVmaW5lZCA/IHRoaXMuY3VycmVudF9hY3Rpb24gOiBhY3Rpb247XG4gICAgICAgIGFuaW1hdGlvbiA9IGFuaW1hdGlvbiA9PT0gdW5kZWZpbmVkID8gcmV2ZXJzZV9kaXJlY3Rpb25zW3RoaXMuY3VycmVudF9kaXJlY3Rpb25dIDogYW5pbWF0aW9uO1xuICAgICAgICBpZiAodGhpcy5zcHJpdGVfaW5mby5nZXRTcHJpdGVBY3Rpb24odGhpcy5zcHJpdGUpICE9PSBhY3Rpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IGFjdGlvbl9rZXkgPSB0aGlzLnNwcml0ZV9pbmZvLmdldEFjdGlvbktleShhY3Rpb24pO1xuICAgICAgICAgICAgdGhpcy5zcHJpdGUubG9hZFRleHR1cmUoYWN0aW9uX2tleSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYW5pbWF0aW9uX2tleSA9IHRoaXMuc3ByaXRlX2luZm8uZ2V0QW5pbWF0aW9uS2V5KGFjdGlvbiwgYW5pbWF0aW9uKTtcbiAgICAgICAgaWYgKCF0aGlzLnNwcml0ZS5hbmltYXRpb25zLmdldEFuaW1hdGlvbihhbmltYXRpb25fa2V5KSkge1xuICAgICAgICAgICAgdGhpcy5zcHJpdGVfaW5mby5zZXRBbmltYXRpb24odGhpcy5zcHJpdGUsIGFjdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYW5pbWF0aW9uX29iaiA9IHRoaXMuc3ByaXRlLmFuaW1hdGlvbnMuZ2V0QW5pbWF0aW9uKGFuaW1hdGlvbl9rZXkpO1xuICAgICAgICBpZiAoc3RhcnQpIHtcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlLmFuaW1hdGlvbnMucGxheShhbmltYXRpb25fa2V5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFuaW1hdGlvbl9vYmouc3RvcCh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYW5pbWF0aW9uX29iajtcbiAgICB9XG5cbiAgICBzZXRfZnJhbWUoZGlyZWN0aW9uOiBudW1iZXIsIGZyYW1lX2luZGV4OiBudW1iZXIgPSAwKSB7XG4gICAgICAgIGNvbnN0IGZyYW1lX25hbWUgPSB0aGlzLnNwcml0ZV9pbmZvLmdldEZyYW1lTmFtZShcbiAgICAgICAgICAgIHRoaXMuY3VycmVudF9hY3Rpb24sXG4gICAgICAgICAgICByZXZlcnNlX2RpcmVjdGlvbnNbZGlyZWN0aW9uXSxcbiAgICAgICAgICAgIGZyYW1lX2luZGV4XG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc3ByaXRlLmZyYW1lTmFtZSA9IGZyYW1lX25hbWU7XG4gICAgfVxuXG4gICAgdXBkYXRlX3NoYWRvdygpIHtcbiAgICAgICAgaWYgKCF0aGlzLnNoYWRvdyB8fCAhdGhpcy5zaGFkb3dfZm9sbG93aW5nKSByZXR1cm47XG4gICAgICAgIGlmICh0aGlzLnNwcml0ZS5ib2R5KSB7XG4gICAgICAgICAgICB0aGlzLnNoYWRvdy54ID0gdGhpcy5zcHJpdGUuYm9keS54O1xuICAgICAgICAgICAgdGhpcy5zaGFkb3cueSA9IHRoaXMuc3ByaXRlLmJvZHkueTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2hhZG93LnggPSB0aGlzLnNwcml0ZS54O1xuICAgICAgICAgICAgdGhpcy5zaGFkb3cueSA9IHRoaXMuc3ByaXRlLnk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVfaGFsZl9jcm9wX21hc2soaXNfd29ybGRfbWFwOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgaWYgKGlzX3dvcmxkX21hcCkge1xuICAgICAgICAgICAgdGhpcy5zcHJpdGUubWFzayA9IHRoaXMuZ2FtZS5hZGQuZ3JhcGhpY3MoXG4gICAgICAgICAgICAgICAgdGhpcy5zcHJpdGUuY2VudGVyWCAtICh0aGlzLnNwcml0ZS53aWR0aCA+PiAxKSxcbiAgICAgICAgICAgICAgICB0aGlzLnNwcml0ZS5jZW50ZXJZIC0gKHRoaXMuc3ByaXRlLmhlaWdodCA+PiAxKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlLm1hc2suYmVnaW5GaWxsKDB4ZmZmZmZmLCAxKTtcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlLm1hc2suZHJhd1JlY3QoMCwgMCwgdGhpcy5zcHJpdGUud2lkdGgsIHRoaXMuc3ByaXRlLmhlaWdodCk7XG4gICAgICAgICAgICB0aGlzLnNwcml0ZS5tYXNrLmVuZEZpbGwoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldF9oYWxmX2Nyb3BfbWFzayhjcm9wOiBib29sZWFuLCBmb3JjZTogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIGlmIChjcm9wICYmICghdGhpcy5jcm9wX3RleHR1cmUgfHwgZm9yY2UpKSB7XG4gICAgICAgICAgICB0aGlzLnNwcml0ZS5tYXNrLmNsZWFyKCk7XG4gICAgICAgICAgICB0aGlzLnNwcml0ZS5tYXNrLmJlZ2luRmlsbCgweGZmZmZmZiwgMSk7XG4gICAgICAgICAgICB0aGlzLnNwcml0ZS5tYXNrLmRyYXdSZWN0KDAsIDAsIHRoaXMuc3ByaXRlLndpZHRoLCAoKHRoaXMuc3ByaXRlLmhlaWdodCAqIDMpIHwgMCkgPj4gMik7XG4gICAgICAgICAgICB0aGlzLnNwcml0ZS5tYXNrLmVuZEZpbGwoKTtcbiAgICAgICAgICAgIHRoaXMuc2hhZG93LnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuY3JvcF90ZXh0dXJlID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICghY3JvcCAmJiAodGhpcy5jcm9wX3RleHR1cmUgfHwgZm9yY2UpKSB7XG4gICAgICAgICAgICB0aGlzLnNwcml0ZS5tYXNrLmNsZWFyKCk7XG4gICAgICAgICAgICB0aGlzLnNwcml0ZS5tYXNrLmJlZ2luRmlsbCgweGZmZmZmZiwgMSk7XG4gICAgICAgICAgICB0aGlzLnNwcml0ZS5tYXNrLmRyYXdSZWN0KDAsIDAsIHRoaXMuc3ByaXRlLndpZHRoLCB0aGlzLnNwcml0ZS5oZWlnaHQpO1xuICAgICAgICAgICAgdGhpcy5zcHJpdGUubWFzay5lbmRGaWxsKCk7XG4gICAgICAgICAgICB0aGlzLmNyb3BfdGV4dHVyZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5zaGFkb3cudmlzaWJsZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjaGVja19oYWxmX2Nyb3BfdGlsZShmb3JjZTogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IHRpbGVzID0gdGhpcy5kYXRhLm1hcC5nZXRfY3VycmVudF90aWxlKHRoaXMpIGFzIFBoYXNlci5UaWxlW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGlsZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHRpbGUgPSB0aWxlc1tpXTtcbiAgICAgICAgICAgIGlmICh0aWxlLnByb3BlcnRpZXMuaGFsZl9jcm9wKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRfaGFsZl9jcm9wX21hc2sodHJ1ZSwgZm9yY2UpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldF9oYWxmX2Nyb3BfbWFzayhmYWxzZSwgZm9yY2UpO1xuICAgIH1cblxuICAgIHVwZGF0ZV9oYWxmX2Nyb3AoZm9yY2U6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICBpZiAodGhpcy5zcHJpdGUubWFzaykge1xuICAgICAgICAgICAgaWYgKGZvcmNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zcHJpdGUudXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zcHJpdGUucG9zdFVwZGF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zcHJpdGUubWFzay54ID0gdGhpcy5zcHJpdGUuY2VudGVyWCAtICh0aGlzLnNwcml0ZS53aWR0aCA+PiAxKTtcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlLm1hc2sueSA9IHRoaXMuc3ByaXRlLmNlbnRlclkgLSAodGhpcy5zcHJpdGUuaGVpZ2h0ID4+IDEpO1xuICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS5tYXAuaXNfd29ybGRfbWFwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja19oYWxmX2Nyb3BfdGlsZShmb3JjZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdG9wX2NoYXIoY2hhbmdlX3Nwcml0ZTogYm9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgaWYgKHRoaXMuc3ByaXRlLmJvZHkpIHtcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkueSA9IHRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkueCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoYW5nZV9zcHJpdGUpIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudF9hY3Rpb24gPSBiYXNlX2FjdGlvbnMuSURMRTtcbiAgICAgICAgICAgIHRoaXMuc2V0X2FjdGlvbigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0X2RpcmVjdGlvbihkaXJlY3Rpb246IG51bWJlcikge1xuICAgICAgICB0aGlzLmN1cnJlbnRfZGlyZWN0aW9uID0gdGhpcy5kZXNpcmVkX2RpcmVjdGlvbiA9IGRpcmVjdGlvbjtcbiAgICB9XG5cbiAgICBzZXRfYWN0aW9uKGNoZWNrX29uX2V2ZW50OiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgaWYgKGNoZWNrX29uX2V2ZW50ICYmIHRoaXMuZGF0YS50aWxlX2V2ZW50X21hbmFnZXIub25fZXZlbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgYWN0aW9uID0gdGhpcy5jdXJyZW50X2FjdGlvbjtcbiAgICAgICAgbGV0IGlkbGVfY2xpbWJpbmcgPSB0aGlzLmlkbGVfY2xpbWJpbmc7XG4gICAgICAgIGlmICh0aGlzLnN0b3BfYnlfY29sbGlkaW5nICYmICF0aGlzLnB1c2hpbmcgJiYgIXRoaXMuY2xpbWJpbmcpIHtcbiAgICAgICAgICAgIGFjdGlvbiA9IGJhc2VfYWN0aW9ucy5JRExFO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RvcF9ieV9jb2xsaWRpbmcgJiYgIXRoaXMucHVzaGluZyAmJiB0aGlzLmNsaW1iaW5nKSB7XG4gICAgICAgICAgICBpZGxlX2NsaW1iaW5nID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbmltYXRpb24gPSBpZGxlX2NsaW1iaW5nID8gYmFzZV9hY3Rpb25zLklETEUgOiByZXZlcnNlX2RpcmVjdGlvbnNbdGhpcy5kZXNpcmVkX2RpcmVjdGlvbl07XG4gICAgICAgIHRoaXMucGxheShhY3Rpb24sIGFuaW1hdGlvbik7XG4gICAgfVxuXG4gICAgdGlsZV9hYmxlX3RvX3Nob3dfZm9vdHByaW50KCkge1xuICAgICAgICBjb25zdCB0aWxlcyA9IHRoaXMuZGF0YS5tYXAuZ2V0X2N1cnJlbnRfdGlsZSh0aGlzKSBhcyBQaGFzZXIuVGlsZVtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRpbGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCB0aWxlID0gdGlsZXNbaV07XG4gICAgICAgICAgICBpZiAodGlsZS5wcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KFwiZGlzYWJsZV9mb290cHJpbnRcIikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsYXllcnMgPSB0aWxlLnByb3BlcnRpZXMuZGlzYWJsZV9mb290cHJpbnQuc3BsaXQoXCIsXCIpLm1hcChsYXllciA9PiBwYXJzZUludChsYXllcikpO1xuICAgICAgICAgICAgICAgIGlmIChsYXllcnMuaW5jbHVkZXModGhpcy5kYXRhLm1hcC5jb2xsaXNpb25fbGF5ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgc2V0X2N1cnJlbnRfYWN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5kYXRhLnRpbGVfZXZlbnRfbWFuYWdlci5vbl9ldmVudCkgcmV0dXJuO1xuICAgICAgICBpZiAodGhpcy5yZXF1aXJlZF9kaXJlY3Rpb24gPT09IG51bGwgJiYgdGhpcy5jdXJyZW50X2FjdGlvbiAhPT0gYmFzZV9hY3Rpb25zLklETEUgJiYgIXRoaXMuY2xpbWJpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudF9hY3Rpb24gPSBiYXNlX2FjdGlvbnMuSURMRTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJlcXVpcmVkX2RpcmVjdGlvbiAhPT0gbnVsbCAmJiAhdGhpcy5jbGltYmluZyAmJiAhdGhpcy5wdXNoaW5nKSB7XG4gICAgICAgICAgICBjb25zdCBmb290c3RlcHMgPVxuICAgICAgICAgICAgICAgIHRoaXMuZW5hYmxlX2Zvb3RzdGVwcyAmJiB0aGlzLmRhdGEubWFwLnNob3dfZm9vdHN0ZXBzICYmIHRoaXMudGlsZV9hYmxlX3RvX3Nob3dfZm9vdHByaW50KCk7XG4gICAgICAgICAgICBpZiAodGhpcy5mb290c3RlcHMuY2FuX21ha2VfZm9vdHByaW50ICYmIGZvb3RzdGVwcykge1xuICAgICAgICAgICAgICAgIHRoaXMuZm9vdHN0ZXBzLmNyZWF0ZV9zdGVwKHRoaXMuY3VycmVudF9kaXJlY3Rpb24sIHRoaXMuY3VycmVudF9hY3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuZGFzaGluZyAmJiB0aGlzLmN1cnJlbnRfYWN0aW9uICE9PSBiYXNlX2FjdGlvbnMuREFTSCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudF9hY3Rpb24gPSBiYXNlX2FjdGlvbnMuREFTSDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuZGFzaGluZyAmJiB0aGlzLmN1cnJlbnRfYWN0aW9uICE9PSBiYXNlX2FjdGlvbnMuV0FMSykge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudF9hY3Rpb24gPSBiYXNlX2FjdGlvbnMuV0FMSztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZV90aWxlX3Bvc2l0aW9uKG1hcF9zcHJpdGU6IFBoYXNlci5UaWxlbWFwKSB7XG4gICAgICAgIHRoaXMudGlsZV94X3BvcyA9ICh0aGlzLnNwcml0ZS54IC8gbWFwX3Nwcml0ZS50aWxlV2lkdGgpIHwgMDtcbiAgICAgICAgdGhpcy50aWxlX3lfcG9zID0gKHRoaXMuc3ByaXRlLnkgLyBtYXBfc3ByaXRlLnRpbGVIZWlnaHQpIHwgMDtcbiAgICB9XG5cbiAgICBjYWxjdWxhdGVfc3BlZWQoKSB7XG4gICAgICAgIC8vd2hlbiBzZXR0aW5nIHRlbXBfeCBvciB0ZW1wX3ksIGl0IG1lYW5zIHRoYXQgdGhlc2UgdmVsb2NpdGllcyB3aWxsIHN0aWxsIGJlIGFuYWx5emVkIGluIGNvbGxpc2lvbl9kZWFsZXIgZnVuY3Rpb25cbiAgICAgICAgY29uc3QgZGVsdGFfdGltZSA9IHRoaXMuZ2FtZS50aW1lLmVsYXBzZWRNUyAvIG51bWJlcnMuREVMVEFfVElNRV9GQUNUT1I7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRfYWN0aW9uID09PSBiYXNlX2FjdGlvbnMuREFTSCkge1xuICAgICAgICAgICAgY29uc3Qgc3BlZWRfZmFjdG9yID1cbiAgICAgICAgICAgICAgICB0aGlzLmRhc2hfc3BlZWQgK1xuICAgICAgICAgICAgICAgIHRoaXMuZXh0cmFfc3BlZWQgK1xuICAgICAgICAgICAgICAgICh0aGlzLmRhdGEubWFwLmlzX3dvcmxkX21hcCA/IG51bWJlcnMuV09STERfTUFQX1NQRUVEX0RBU0hfUkVEVUNFIDogMCk7XG4gICAgICAgICAgICB0aGlzLnNwcml0ZS5ib2R5LnZlbG9jaXR5LnRlbXBfeCA9IChkZWx0YV90aW1lICogdGhpcy54X3NwZWVkICogc3BlZWRfZmFjdG9yKSB8IDA7XG4gICAgICAgICAgICB0aGlzLnNwcml0ZS5ib2R5LnZlbG9jaXR5LnRlbXBfeSA9IChkZWx0YV90aW1lICogdGhpcy55X3NwZWVkICogc3BlZWRfZmFjdG9yKSB8IDA7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5jdXJyZW50X2FjdGlvbiA9PT0gYmFzZV9hY3Rpb25zLldBTEspIHtcbiAgICAgICAgICAgIGNvbnN0IHNwZWVkX2ZhY3RvciA9XG4gICAgICAgICAgICAgICAgdGhpcy53YWxrX3NwZWVkICtcbiAgICAgICAgICAgICAgICB0aGlzLmV4dHJhX3NwZWVkICtcbiAgICAgICAgICAgICAgICAodGhpcy5kYXRhLm1hcC5pc193b3JsZF9tYXAgPyBudW1iZXJzLldPUkxEX01BUF9TUEVFRF9XQUxLX1JFRFVDRSA6IDApO1xuICAgICAgICAgICAgdGhpcy5zcHJpdGUuYm9keS52ZWxvY2l0eS50ZW1wX3ggPSAoZGVsdGFfdGltZSAqIHRoaXMueF9zcGVlZCAqIHNwZWVkX2ZhY3RvcikgfCAwO1xuICAgICAgICAgICAgdGhpcy5zcHJpdGUuYm9keS52ZWxvY2l0eS50ZW1wX3kgPSAoZGVsdGFfdGltZSAqIHRoaXMueV9zcGVlZCAqIHNwZWVkX2ZhY3RvcikgfCAwO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY3VycmVudF9hY3Rpb24gPT09IGJhc2VfYWN0aW9ucy5DTElNQikge1xuICAgICAgICAgICAgdGhpcy5zcHJpdGUuYm9keS52ZWxvY2l0eS50ZW1wX3ggPSAoZGVsdGFfdGltZSAqIHRoaXMueF9zcGVlZCAqIHRoaXMuY2xpbWJfc3BlZWQpIHwgMDtcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkudGVtcF95ID0gKGRlbHRhX3RpbWUgKiB0aGlzLnlfc3BlZWQgKiB0aGlzLmNsaW1iX3NwZWVkKSB8IDA7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5jdXJyZW50X2FjdGlvbiA9PT0gYmFzZV9hY3Rpb25zLklETEUpIHtcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkueSA9IHRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkueCA9IDA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhcHBseV9zcGVlZCgpIHtcbiAgICAgICAgaWYgKFtiYXNlX2FjdGlvbnMuV0FMSywgYmFzZV9hY3Rpb25zLkRBU0gsIGJhc2VfYWN0aW9ucy5DTElNQl0uaW5jbHVkZXModGhpcy5jdXJyZW50X2FjdGlvbiBhcyBiYXNlX2FjdGlvbnMpKSB7XG4gICAgICAgICAgICAvL3NldHMgdGhlIGZpbmFsIHZlbG9jaXR5XG4gICAgICAgICAgICB0aGlzLnNwcml0ZS5ib2R5LnZlbG9jaXR5LnggPSB0aGlzLnNwcml0ZS5ib2R5LnZlbG9jaXR5LnRlbXBfeDtcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkueSA9IHRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkudGVtcF95O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0X3NwZWVkKHhfc3BlZWQ6IG51bWJlciwgeV9zcGVlZDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMueF9zcGVlZCA9IHhfc3BlZWQgPT09IHVuZGVmaW5lZCA/IHRoaXMueF9zcGVlZCA6IHhfc3BlZWQ7XG4gICAgICAgIHRoaXMueV9zcGVlZCA9IHlfc3BlZWQgPT09IHVuZGVmaW5lZCA/IHRoaXMueV9zcGVlZCA6IHlfc3BlZWQ7XG4gICAgICAgIHRoaXMuY2FsY3VsYXRlX3NwZWVkKCk7XG4gICAgICAgIHRoaXMuYXBwbHlfc3BlZWQoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gXCIuLi9tYWdpY19udW1iZXJzXCI7XG5pbXBvcnQge1RpbGVFdmVudCwgZXZlbnRfdHlwZXN9IGZyb20gXCIuLi90aWxlX2V2ZW50cy9UaWxlRXZlbnRcIjtcbmltcG9ydCB7Z2V0X3N1cnJvdW5kaW5ncywgZ2V0X29wcG9zaXRlX2RpcmVjdGlvbiwgZGlyZWN0aW9ucywgcmV2ZXJzZV9kaXJlY3Rpb25zLCBiYXNlX2FjdGlvbnN9IGZyb20gXCIuLi91dGlsc1wiO1xuaW1wb3J0IHtKdW1wRXZlbnR9IGZyb20gXCIuLi90aWxlX2V2ZW50cy9KdW1wRXZlbnRcIjtcblxuY29uc3QgRFVTVF9DT1VOVCA9IDc7XG5jb25zdCBEVVNUX1JBRElVUyA9IDE4O1xuY29uc3QgUFVTSF9TSElGVCA9IDE2O1xuY29uc3QgRFVTVF9LRVkgPSBcImR1c3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbF9wdXNoKGdhbWUsIGRhdGEsIGludGVyYWN0YWJsZV9vYmplY3QpIHtcbiAgICBpZiAoXG4gICAgICAgIGRhdGEuaGVyby50cnlpbmdfdG9fcHVzaCAmJlxuICAgICAgICBbZGlyZWN0aW9ucy51cCwgZGlyZWN0aW9ucy5kb3duLCBkaXJlY3Rpb25zLmxlZnQsIGRpcmVjdGlvbnMucmlnaHRdLmluY2x1ZGVzKFxuICAgICAgICAgICAgZGF0YS5oZXJvLnRyeWluZ190b19wdXNoX2RpcmVjdGlvblxuICAgICAgICApICYmXG4gICAgICAgIGRhdGEuaGVyby50cnlpbmdfdG9fcHVzaF9kaXJlY3Rpb24gPT09IGRhdGEuaGVyby5jdXJyZW50X2RpcmVjdGlvbiAmJlxuICAgICAgICAhZGF0YS5oZXJvLmNhc3RpbmdfcHN5bmVyZ3kgJiZcbiAgICAgICAgIWRhdGEuaGVyby5qdW1waW5nICYmXG4gICAgICAgICFkYXRhLmluX2JhdHRsZVxuICAgICkge1xuICAgICAgICBmaXJlX3B1c2hfbW92ZW1lbnQoZ2FtZSwgZGF0YSwgaW50ZXJhY3RhYmxlX29iamVjdCk7XG4gICAgfVxuICAgIGRhdGEuaGVyby50cnlpbmdfdG9fcHVzaCA9IGZhbHNlO1xuICAgIGRhdGEuaGVyby5wdXNoX3RpbWVyID0gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRhcmdldF9vbmx5X3B1c2goXG4gICAgZ2FtZSxcbiAgICBkYXRhLFxuICAgIGludGVyYWN0YWJsZV9vYmplY3QsXG4gICAgYmVmb3JlX21vdmUsXG4gICAgcHVzaF9lbmQsXG4gICAgZW5hYmxlX3BoeXNpY3NfYXRfZW5kID0gdHJ1ZSxcbiAgICBvbl9wdXNoX3VwZGF0ZSA9IHVuZGVmaW5lZFxuKSB7XG4gICAgZmlyZV9wdXNoX21vdmVtZW50KFxuICAgICAgICBnYW1lLFxuICAgICAgICBkYXRhLFxuICAgICAgICBpbnRlcmFjdGFibGVfb2JqZWN0LFxuICAgICAgICBwdXNoX2VuZCxcbiAgICAgICAgYmVmb3JlX21vdmUsXG4gICAgICAgIHRydWUsXG4gICAgICAgIGVuYWJsZV9waHlzaWNzX2F0X2VuZCxcbiAgICAgICAgb25fcHVzaF91cGRhdGVcbiAgICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmlyZV9wdXNoX21vdmVtZW50KFxuICAgIGdhbWUsXG4gICAgZGF0YSxcbiAgICBpbnRlcmFjdGFibGVfb2JqZWN0LFxuICAgIHB1c2hfZW5kPyxcbiAgICBiZWZvcmVfbW92ZT8sXG4gICAgdGFyZ2V0X29ubHkgPSBmYWxzZSxcbiAgICBlbmFibGVfcGh5c2ljc19hdF9lbmQgPSB0cnVlLFxuICAgIG9uX3B1c2hfdXBkYXRlID0gdW5kZWZpbmVkXG4pIHtcbiAgICBsZXQgZXhwZWN0ZWRfcG9zaXRpb247XG4gICAgaWYgKCF0YXJnZXRfb25seSkge1xuICAgICAgICBsZXQgcG9zaXRpdmVfbGltaXQgPSBkYXRhLmhlcm8uc3ByaXRlLnggKyAoLWludGVyYWN0YWJsZV9vYmplY3Quc3ByaXRlLnkgLSBpbnRlcmFjdGFibGVfb2JqZWN0LnNwcml0ZS54KTtcbiAgICAgICAgbGV0IG5lZ2F0aXZlX2xpbWl0ID0gLWRhdGEuaGVyby5zcHJpdGUueCArICgtaW50ZXJhY3RhYmxlX29iamVjdC5zcHJpdGUueSArIGludGVyYWN0YWJsZV9vYmplY3Quc3ByaXRlLngpO1xuICAgICAgICBpZiAoLWRhdGEuaGVyby5zcHJpdGUueSA+PSBwb3NpdGl2ZV9saW1pdCAmJiAtZGF0YS5oZXJvLnNwcml0ZS55ID49IG5lZ2F0aXZlX2xpbWl0KSB7XG4gICAgICAgICAgICBleHBlY3RlZF9wb3NpdGlvbiA9IGRpcmVjdGlvbnMuZG93bjtcbiAgICAgICAgfSBlbHNlIGlmICgtZGF0YS5oZXJvLnNwcml0ZS55IDw9IHBvc2l0aXZlX2xpbWl0ICYmIC1kYXRhLmhlcm8uc3ByaXRlLnkgPj0gbmVnYXRpdmVfbGltaXQpIHtcbiAgICAgICAgICAgIGV4cGVjdGVkX3Bvc2l0aW9uID0gZGlyZWN0aW9ucy5sZWZ0O1xuICAgICAgICB9IGVsc2UgaWYgKC1kYXRhLmhlcm8uc3ByaXRlLnkgPD0gcG9zaXRpdmVfbGltaXQgJiYgLWRhdGEuaGVyby5zcHJpdGUueSA8PSBuZWdhdGl2ZV9saW1pdCkge1xuICAgICAgICAgICAgZXhwZWN0ZWRfcG9zaXRpb24gPSBkaXJlY3Rpb25zLnVwO1xuICAgICAgICB9IGVsc2UgaWYgKC1kYXRhLmhlcm8uc3ByaXRlLnkgPj0gcG9zaXRpdmVfbGltaXQgJiYgLWRhdGEuaGVyby5zcHJpdGUueSA8PSBuZWdhdGl2ZV9saW1pdCkge1xuICAgICAgICAgICAgZXhwZWN0ZWRfcG9zaXRpb24gPSBkaXJlY3Rpb25zLnJpZ2h0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh0YXJnZXRfb25seSB8fCBleHBlY3RlZF9wb3NpdGlvbiA9PT0gZGF0YS5oZXJvLnRyeWluZ190b19wdXNoX2RpcmVjdGlvbikge1xuICAgICAgICBpZiAoIXRhcmdldF9vbmx5KSB7XG4gICAgICAgICAgICBkYXRhLmhlcm8ucHVzaGluZyA9IHRydWU7XG4gICAgICAgICAgICBkYXRhLmhlcm8uY3VycmVudF9hY3Rpb24gPSBiYXNlX2FjdGlvbnMuUFVTSDtcbiAgICAgICAgICAgIGRhdGEuaGVyby5zZXRfYWN0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgZ2FtZS5waHlzaWNzLnAyLnBhdXNlKCk7XG4gICAgICAgIGxldCB0d2Vlbl94ID0gMCxcbiAgICAgICAgICAgIHR3ZWVuX3kgPSAwO1xuICAgICAgICBsZXQgZXZlbnRfc2hpZnRfeCA9IDAsXG4gICAgICAgICAgICBldmVudF9zaGlmdF95ID0gMDtcbiAgICAgICAgc3dpdGNoIChkYXRhLmhlcm8udHJ5aW5nX3RvX3B1c2hfZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMudXA6XG4gICAgICAgICAgICAgICAgZXZlbnRfc2hpZnRfeSA9IC0xO1xuICAgICAgICAgICAgICAgIHR3ZWVuX3kgPSAtUFVTSF9TSElGVDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5kb3duOlxuICAgICAgICAgICAgICAgIGV2ZW50X3NoaWZ0X3kgPSAxO1xuICAgICAgICAgICAgICAgIHR3ZWVuX3kgPSBQVVNIX1NISUZUO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBkaXJlY3Rpb25zLmxlZnQ6XG4gICAgICAgICAgICAgICAgZXZlbnRfc2hpZnRfeCA9IC0xO1xuICAgICAgICAgICAgICAgIHR3ZWVuX3ggPSAtUFVTSF9TSElGVDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5yaWdodDpcbiAgICAgICAgICAgICAgICBldmVudF9zaGlmdF94ID0gMTtcbiAgICAgICAgICAgICAgICB0d2Vlbl94ID0gUFVTSF9TSElGVDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzaGlmdF9ldmVudHMoZGF0YSwgaW50ZXJhY3RhYmxlX29iamVjdCwgZXZlbnRfc2hpZnRfeCwgZXZlbnRfc2hpZnRfeSk7XG4gICAgICAgIGxldCBzcHJpdGVzID0gW2ludGVyYWN0YWJsZV9vYmplY3Quc3ByaXRlLmJvZHldO1xuICAgICAgICBpZiAoIXRhcmdldF9vbmx5KSB7XG4gICAgICAgICAgICBzcHJpdGVzLnB1c2goLi4uW2RhdGEuaGVyby5zaGFkb3csIGRhdGEuaGVyby5zcHJpdGUuYm9keV0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByZXZfeCA9IGludGVyYWN0YWJsZV9vYmplY3QuY3VycmVudF94O1xuICAgICAgICBjb25zdCBwcmV2X3kgPSBpbnRlcmFjdGFibGVfb2JqZWN0LmN1cnJlbnRfeTtcbiAgICAgICAgaW50ZXJhY3RhYmxlX29iamVjdC5jdXJyZW50X3ggKz0gZXZlbnRfc2hpZnRfeDtcbiAgICAgICAgaW50ZXJhY3RhYmxlX29iamVjdC5jdXJyZW50X3kgKz0gZXZlbnRfc2hpZnRfeTtcbiAgICAgICAgbGV0IHByb21pc2VzID0gW107XG4gICAgICAgIGlmIChiZWZvcmVfbW92ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBiZWZvcmVfbW92ZSh0d2Vlbl94LCB0d2Vlbl95KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW50ZXJhY3RhYmxlX29iamVjdC5jdXN0b21fZGF0YS5ibG9ja2luZ19zdGFpcl9ibG9jaykge1xuICAgICAgICAgICAgaW50ZXJhY3RhYmxlX29iamVjdC5jdXN0b21fZGF0YS5ibG9ja2luZ19zdGFpcl9ibG9jay54ICs9IHR3ZWVuX3g7XG4gICAgICAgICAgICBpbnRlcmFjdGFibGVfb2JqZWN0LmN1c3RvbV9kYXRhLmJsb2NraW5nX3N0YWlyX2Jsb2NrLnkgKz0gdHdlZW5feTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNwcml0ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGxldCBib2R5ID0gc3ByaXRlc1tpXTtcbiAgICAgICAgICAgIGxldCBkZXN0X3ggPSBib2R5LnggKyB0d2Vlbl94O1xuICAgICAgICAgICAgbGV0IGRlc3RfeSA9IGJvZHkueSArIHR3ZWVuX3k7XG4gICAgICAgICAgICBpZiAoYm9keSA9PT0gZGF0YS5oZXJvLnNoYWRvdyB8fCBib2R5ID09PSBkYXRhLmhlcm8uc3ByaXRlLmJvZHkpIHtcbiAgICAgICAgICAgICAgICBpZiAodHdlZW5feCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBkZXN0X3ggPSBkYXRhLm1hcC5zcHJpdGUudGlsZVdpZHRoICogKHByZXZfeCArIGV2ZW50X3NoaWZ0X3ggKyAwLjUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHdlZW5feSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBkZXN0X3kgPSBkYXRhLm1hcC5zcHJpdGUudGlsZUhlaWdodCAqIChwcmV2X3kgKyBldmVudF9zaGlmdF95ICsgMC41KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgcHJvbWlzZV9yZXNvbHZlO1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaChcbiAgICAgICAgICAgICAgICBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZV9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNvbnN0IHRoaXNfdHdlZW4gPSBnYW1lLmFkZC50d2Vlbihib2R5KS50byhcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHg6IGRlc3RfeCxcbiAgICAgICAgICAgICAgICAgICAgeTogZGVzdF95LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbnVtYmVycy5QVVNIX1RJTUUsXG4gICAgICAgICAgICAgICAgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSxcbiAgICAgICAgICAgICAgICB0cnVlXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKG9uX3B1c2hfdXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpc190d2Vlbi5vblVwZGF0ZUNhbGxiYWNrKG9uX3B1c2hfdXBkYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXNfdHdlZW4ub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgZHJvcF9mb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChpID09PSBzcHJpdGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJhY3RhYmxlX29iamVjdC5vYmplY3RfZHJvcF90aWxlcy5mb3JFYWNoKGRyb3BfdGlsZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcF90aWxlLnggPT09IGludGVyYWN0YWJsZV9vYmplY3QuY3VycmVudF94ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcF90aWxlLnkgPT09IGludGVyYWN0YWJsZV9vYmplY3QuY3VycmVudF95XG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wX2ZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXN0X3lfc2hpZnRfcHggPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZHJvcF90aWxlLmRlc3RfeSAtIGludGVyYWN0YWJsZV9vYmplY3QuY3VycmVudF95KSAqIGRhdGEubWFwLnNwcml0ZS50aWxlSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoaWZ0X2V2ZW50cyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJhY3RhYmxlX29iamVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcF90aWxlLmRlc3RfeSAtIGludGVyYWN0YWJsZV9vYmplY3QuY3VycmVudF95XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcmFjdGFibGVfb2JqZWN0LmN1cnJlbnRfeSA9IGRyb3BfdGlsZS5kZXN0X3k7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJhY3RhYmxlX29iamVjdC5jaGFuZ2VfY29sbGlkZXJfbGF5ZXIoZGF0YSwgZHJvcF90aWxlLmRlc3RpbmF0aW9uX2NvbGxpZGVyX2xheWVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lLmFkZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudHdlZW4oaW50ZXJhY3RhYmxlX29iamVjdC5zcHJpdGUuYm9keSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRvKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IGludGVyYWN0YWJsZV9vYmplY3Quc3ByaXRlLmJvZHkueSArIGRlc3RfeV9zaGlmdF9weCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wX3RpbGUuYW5pbWF0aW9uX2R1cmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGhhc2VyLkVhc2luZy5RdWFkcmF0aWMuSW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZHJvcF90aWxlLmR1c3RfYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5oZXJvLmN1cnJlbnRfYWN0aW9uID0gYmFzZV9hY3Rpb25zLklETEU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5oZXJvLnBsYXkoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuaGVyby5jdXJyZW50X2FjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV2ZXJzZV9kaXJlY3Rpb25zW2RhdGEuaGVyby5jdXJyZW50X2RpcmVjdGlvbl1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1c3RfYW5pbWF0aW9uKGdhbWUsIGRhdGEsIGludGVyYWN0YWJsZV9vYmplY3QsIHByb21pc2VfcmVzb2x2ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2VfcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWRyb3BfZm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZV9yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgZGF0YS5oZXJvLnB1c2hpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChlbmFibGVfcGh5c2ljc19hdF9lbmQpIHtcbiAgICAgICAgICAgICAgICBnYW1lLnBoeXNpY3MucDIucmVzdW1lKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHVzaF9lbmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHB1c2hfZW5kKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc2hpZnRfZXZlbnRzKGRhdGEsIGludGVyYWN0YWJsZV9vYmplY3QsIGV2ZW50X3NoaWZ0X3gsIGV2ZW50X3NoaWZ0X3kpIHtcbiAgICBsZXQgb2JqZWN0X2V2ZW50cyA9IGludGVyYWN0YWJsZV9vYmplY3QuZ2V0X2V2ZW50cygpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqZWN0X2V2ZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICBsZXQgZXZlbnQgPSBvYmplY3RfZXZlbnRzW2ldO1xuICAgICAgICBkYXRhLm1hcC5ldmVudHNbZXZlbnQubG9jYXRpb25fa2V5XSA9IGRhdGEubWFwLmV2ZW50c1tldmVudC5sb2NhdGlvbl9rZXldLmZpbHRlcihlID0+IHtcbiAgICAgICAgICAgIHJldHVybiBlLmlkICE9PSBldmVudC5pZDtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChkYXRhLm1hcC5ldmVudHNbZXZlbnQubG9jYXRpb25fa2V5XS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGRlbGV0ZSBkYXRhLm1hcC5ldmVudHNbZXZlbnQubG9jYXRpb25fa2V5XTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgb2xkX3ggPSBldmVudC54O1xuICAgICAgICBsZXQgb2xkX3kgPSBldmVudC55O1xuICAgICAgICBsZXQgbmV3X3ggPSBvbGRfeCArIGV2ZW50X3NoaWZ0X3g7XG4gICAgICAgIGxldCBuZXdfeSA9IG9sZF95ICsgZXZlbnRfc2hpZnRfeTtcbiAgICAgICAgY29uc3QgbmV3X2V2ZW50X2xvY2F0aW9uX2tleSA9IFRpbGVFdmVudC5nZXRfbG9jYXRpb25fa2V5KG5ld194LCBuZXdfeSk7XG4gICAgICAgIGV2ZW50LnggPSBuZXdfeDtcbiAgICAgICAgZXZlbnQueSA9IG5ld195O1xuICAgICAgICBldmVudC5sb2NhdGlvbl9rZXkgPSBuZXdfZXZlbnRfbG9jYXRpb25fa2V5O1xuICAgICAgICBpZiAoIShuZXdfZXZlbnRfbG9jYXRpb25fa2V5IGluIGRhdGEubWFwLmV2ZW50cykpIHtcbiAgICAgICAgICAgIGRhdGEubWFwLmV2ZW50c1tuZXdfZXZlbnRfbG9jYXRpb25fa2V5XSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEubWFwLmV2ZW50c1tuZXdfZXZlbnRfbG9jYXRpb25fa2V5XS5wdXNoKGV2ZW50KTtcbiAgICAgICAgY29uc3QgbmV3X3N1cnJvdW5kaW5ncyA9IGdldF9zdXJyb3VuZGluZ3MobmV3X3gsIG5ld195LCBmYWxzZSwgMik7XG4gICAgICAgIEp1bXBFdmVudC5hY3RpdmVfanVtcF9zdXJyb3VuZGluZ3MoXG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgbmV3X3N1cnJvdW5kaW5ncyxcbiAgICAgICAgICAgIGludGVyYWN0YWJsZV9vYmplY3QuY29sbGlkZXJfbGF5ZXJfc2hpZnQgKyBpbnRlcmFjdGFibGVfb2JqZWN0LmJhc2VfY29sbGlzaW9uX2xheWVyXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IG9sZF9zdXJyb3VuZGluZ3MgPSBnZXRfc3Vycm91bmRpbmdzKG9sZF94LCBvbGRfeSwgZmFsc2UsIDIpO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG9sZF9zdXJyb3VuZGluZ3MubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgIGNvbnN0IG9sZF9zdXJyb3VuZGluZyA9IG9sZF9zdXJyb3VuZGluZ3Nbal07XG4gICAgICAgICAgICBjb25zdCBvbGRfa2V5ID0gVGlsZUV2ZW50LmdldF9sb2NhdGlvbl9rZXkob2xkX3N1cnJvdW5kaW5nLngsIG9sZF9zdXJyb3VuZGluZy55KTtcbiAgICAgICAgICAgIGlmIChvbGRfa2V5IGluIGRhdGEubWFwLmV2ZW50cykge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgZGF0YS5tYXAuZXZlbnRzW29sZF9rZXldLmxlbmd0aDsgKytrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9sZF9zdXJyX2V2ZW50ID0gZGF0YS5tYXAuZXZlbnRzW29sZF9rZXldW2tdO1xuICAgICAgICAgICAgICAgICAgICBpZiAob2xkX3N1cnJfZXZlbnQudHlwZSA9PT0gZXZlbnRfdHlwZXMuSlVNUCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0X2xheWVyID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcmFjdGFibGVfb2JqZWN0LmNvbGxpZGVyX2xheWVyX3NoaWZ0ICsgaW50ZXJhY3RhYmxlX29iamVjdC5iYXNlX2NvbGxpc2lvbl9sYXllcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbGRfc3Vycl9ldmVudC5hY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMuaW5jbHVkZXModGFyZ2V0X2xheWVyKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sZF9zdXJyX2V2ZW50LmR5bmFtaWMgPT09IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbGRfc3Vycl9ldmVudC5kZWFjdGl2YXRlX2F0KGdldF9vcHBvc2l0ZV9kaXJlY3Rpb24ob2xkX3N1cnJvdW5kaW5nLmRpcmVjdGlvbikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkdXN0X2FuaW1hdGlvbihnYW1lLCBkYXRhLCBpbnRlcmFjdGFibGVfb2JqZWN0LCBwcm9taXNlX3Jlc29sdmUpIHtcbiAgICBsZXQgcHJvbWlzZXMgPSBuZXcgQXJyYXkoRFVTVF9DT1VOVCk7XG4gICAgbGV0IHNwcml0ZXMgPSBuZXcgQXJyYXkoRFVTVF9DT1VOVCk7XG4gICAgY29uc3Qgb3JpZ2luX3ggPSAoaW50ZXJhY3RhYmxlX29iamVjdC5jdXJyZW50X3ggKyAwLjUpICogZGF0YS5tYXAuc3ByaXRlLnRpbGVXaWR0aDtcbiAgICBjb25zdCBvcmlnaW5feSA9IChpbnRlcmFjdGFibGVfb2JqZWN0LmN1cnJlbnRfeSArIDAuNSkgKiBkYXRhLm1hcC5zcHJpdGUudGlsZUhlaWdodDtcbiAgICBjb25zdCBkdXN0X3Nwcml0ZV9iYXNlID0gZGF0YS5pbmZvLm1pc2Nfc3ByaXRlX2Jhc2VfbGlzdFtEVVNUX0tFWV07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBEVVNUX0NPVU5UOyArK2kpIHtcbiAgICAgICAgY29uc3QgdGhpc19hbmdsZSA9ICgoTWF0aC5QSSArIG51bWJlcnMuZGVncmVlNjApICogaSkgLyAoRFVTVF9DT1VOVCAtIDEpIC0gbnVtYmVycy5kZWdyZWUzMDtcbiAgICAgICAgY29uc3QgeCA9IG9yaWdpbl94ICsgRFVTVF9SQURJVVMgKiBNYXRoLmNvcyh0aGlzX2FuZ2xlKTtcbiAgICAgICAgY29uc3QgeSA9IG9yaWdpbl95ICsgRFVTVF9SQURJVVMgKiBNYXRoLnNpbih0aGlzX2FuZ2xlKTtcbiAgICAgICAgbGV0IGR1c3Rfc3ByaXRlID0gZGF0YS5ucGNfZ3JvdXAuY3JlYXRlKG9yaWdpbl94LCBvcmlnaW5feSwgRFVTVF9LRVkpO1xuICAgICAgICBpZiAodGhpc19hbmdsZSA8IDAgfHwgdGhpc19hbmdsZSA+IE1hdGguUEkpIHtcbiAgICAgICAgICAgIGRhdGEubnBjX2dyb3VwLnNldENoaWxkSW5kZXgoZHVzdF9zcHJpdGUsIGRhdGEubnBjX2dyb3VwLmdldENoaWxkSW5kZXgoaW50ZXJhY3RhYmxlX29iamVjdC5zcHJpdGUpKTtcbiAgICAgICAgfVxuICAgICAgICBkdXN0X3Nwcml0ZS5hbmNob3Iuc2V0VG8oMC41LCAwLjUpO1xuICAgICAgICBnYW1lLmFkZC50d2VlbihkdXN0X3Nwcml0ZSkudG8oXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogeCxcbiAgICAgICAgICAgICAgICB5OiB5LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIDQwMCxcbiAgICAgICAgICAgIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICk7XG4gICAgICAgIHNwcml0ZXNbaV0gPSBkdXN0X3Nwcml0ZTtcbiAgICAgICAgZHVzdF9zcHJpdGVfYmFzZS5zZXRBbmltYXRpb24oZHVzdF9zcHJpdGUsIERVU1RfS0VZKTtcbiAgICAgICAgY29uc3QgYW5pbWF0aW9uX2tleSA9IGR1c3Rfc3ByaXRlX2Jhc2UuZ2V0QW5pbWF0aW9uS2V5KERVU1RfS0VZLCBcInNwcmVhZFwiKTtcbiAgICAgICAgbGV0IHJlc29sdmVfZnVuYztcbiAgICAgICAgcHJvbWlzZXNbaV0gPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIHJlc29sdmVfZnVuYyA9IHJlc29sdmU7XG4gICAgICAgIH0pO1xuICAgICAgICBkdXN0X3Nwcml0ZS5hbmltYXRpb25zLmdldEFuaW1hdGlvbihhbmltYXRpb25fa2V5KS5vbkNvbXBsZXRlLmFkZE9uY2UocmVzb2x2ZV9mdW5jKTtcbiAgICAgICAgZHVzdF9zcHJpdGUuYW5pbWF0aW9ucy5wbGF5KGFuaW1hdGlvbl9rZXkpO1xuICAgIH1cbiAgICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbigoKSA9PiB7XG4gICAgICAgIHNwcml0ZXMuZm9yRWFjaChzcHJpdGUgPT4ge1xuICAgICAgICAgICAgZGF0YS5ucGNfZ3JvdXAucmVtb3ZlKHNwcml0ZSwgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBwcm9taXNlX3Jlc29sdmUoKTtcbiAgICB9KTtcbn1cbiIsImltcG9ydCB7R29sZGVuU3VufSBmcm9tIFwiLi4vR29sZGVuU3VuXCI7XG5pbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gXCIuLi9tYWdpY19udW1iZXJzXCI7XG5pbXBvcnQge1Nwcml0ZUJhc2V9IGZyb20gXCIuLi9TcHJpdGVCYXNlXCI7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCB7V2luZG93fSBmcm9tIFwiLi4vV2luZG93XCI7XG5cbmNvbnN0IERJQUxPR19DUllTVEFMX0tFWSA9IFwiZGlhbG9nX2NyeXN0YWxcIjtcblxuLy9BIGRpYWxvZyBjYW4gYmUgZGl2aWRlZCBpbiBOIHdpbmRvd3MuIEVhY2ggZGl2aXNpb24gaGFzIGEgc3RlcCBpbmRleC5cbi8vVG8gc2V0IGEgZGlhbG9nLCBjYWxsIHRoZSBEaWFsb2dNYW5hZ2VyLnNldF9kaWFsb2cgZnVuY3Rpb24gYW5kIHBhc3MgdGhlIGVudGlyZSBkaWFsb2cgdGV4dC5cbi8vVG8gYWR2YW5jZSB0aGUgZGlhbG9nIChjYWxsIG5leHQgd2luZG93KSwgY2FsbCB0aGUgRGlhbG9nTWFuYWdlci5uZXh0IGZ1bmN0aW9uLlxuZXhwb3J0IGNsYXNzIERpYWxvZ01hbmFnZXIge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgZGF0YTogR29sZGVuU3VuO1xuICAgIHB1YmxpYyBwYXJ0czoge1xuICAgICAgICBsaW5lczogc3RyaW5nW107XG4gICAgICAgIHdpZHRoOiBudW1iZXI7XG4gICAgICAgIGhlaWdodDogbnVtYmVyO1xuICAgIH1bXTtcbiAgICBwdWJsaWMgc3RlcDogbnVtYmVyO1xuICAgIHB1YmxpYyBmaW5pc2hlZDogYm9vbGVhbjtcbiAgICBwdWJsaWMgYXZhdGFyOiBzdHJpbmc7XG4gICAgcHVibGljIHdpbmRvdzogV2luZG93O1xuICAgIHB1YmxpYyBhdmF0YXJfd2luZG93OiBXaW5kb3c7XG4gICAgcHVibGljIGl0YWxpY19mb250OiBib29sZWFuO1xuICAgIHB1YmxpYyBoZXJvX2RpcmVjdGlvbjogbnVtYmVyO1xuICAgIHB1YmxpYyBkaWFsb2dfY3J5c3RhbF9zcHJpdGVfYmFzZTogU3ByaXRlQmFzZTtcbiAgICBwdWJsaWMgZGlhbG9nX2NyeXN0YWw6IFBoYXNlci5TcHJpdGU7XG4gICAgcHVibGljIGRpYWxvZ19jcnlzdGFsX2FuaW1fa2V5OiBzdHJpbmc7XG4gICAgcHVibGljIGRpYWxvZ19jcnlzdGFsX3R3ZWVuOiBQaGFzZXIuVHdlZW47XG4gICAgcHVibGljIHNob3dfY3J5c3RhbDogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEsIGl0YWxpY19mb250ID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLml0YWxpY19mb250ID0gaXRhbGljX2ZvbnQ7XG5cbiAgICAgICAgdGhpcy5wYXJ0cyA9IG51bGw7IC8vcGFydHMgb2YgdGhlIGRpYWxvZyB0ZXh0XG4gICAgICAgIHRoaXMuc3RlcCA9IDA7IC8vc3RlcCBpbmRleFxuICAgICAgICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5hdmF0YXIgPSBudWxsO1xuICAgICAgICB0aGlzLndpbmRvdyA9IG51bGw7XG4gICAgICAgIHRoaXMuYXZhdGFyX3dpbmRvdyA9IG51bGw7XG4gICAgICAgIHRoaXMuaGVyb19kaXJlY3Rpb24gPSB1dGlscy5kaXJlY3Rpb25zLmRvd247XG5cbiAgICAgICAgdGhpcy5kaWFsb2dfY3J5c3RhbF9zcHJpdGVfYmFzZSA9IHRoaXMuZGF0YS5pbmZvLm1pc2Nfc3ByaXRlX2Jhc2VfbGlzdFtESUFMT0dfQ1JZU1RBTF9LRVldO1xuICAgICAgICBjb25zdCBzcHJpdGVfa2V5ID0gdGhpcy5kaWFsb2dfY3J5c3RhbF9zcHJpdGVfYmFzZS5nZXRBY3Rpb25LZXkoRElBTE9HX0NSWVNUQUxfS0VZKTtcbiAgICAgICAgdGhpcy5kaWFsb2dfY3J5c3RhbCA9IHRoaXMuZ2FtZS5hZGQuc3ByaXRlKDAsIDAsIHNwcml0ZV9rZXkpO1xuICAgICAgICB0aGlzLmRpYWxvZ19jcnlzdGFsX3Nwcml0ZV9iYXNlLnNldEFuaW1hdGlvbih0aGlzLmRpYWxvZ19jcnlzdGFsLCBESUFMT0dfQ1JZU1RBTF9LRVkpO1xuICAgICAgICB0aGlzLmRpYWxvZ19jcnlzdGFsX2FuaW1fa2V5ID0gdGhpcy5kaWFsb2dfY3J5c3RhbF9zcHJpdGVfYmFzZS5nZXRBbmltYXRpb25LZXkoRElBTE9HX0NSWVNUQUxfS0VZLCBcInJvdGF0ZVwiKTtcblxuICAgICAgICB0aGlzLmRpYWxvZ19jcnlzdGFsLnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kaWFsb2dfY3J5c3RhbF90d2VlbiA9IG51bGw7XG4gICAgICAgIHRoaXMuc2hvd19jcnlzdGFsID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdXBkYXRlX3Bvc2l0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5hdmF0YXIpIHtcbiAgICAgICAgICAgIHRoaXMuYXZhdGFyX3dpbmRvdy51cGRhdGUodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy53aW5kb3cudXBkYXRlKHRydWUpO1xuICAgIH1cblxuICAgIC8vSW50ZXJuYWwgbWV0aG9kLiBUcnkgdG8gY2FsY3VsYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGlhbG9nIHdpbmRvd1xuICAgIGdldF9kaWFsb2dfd2luZG93X3Bvc2l0aW9uKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgY29uc3QgeCA9IChudW1iZXJzLkdBTUVfV0lEVEggLSB3aWR0aCkgPj4gMTtcbiAgICAgICAgbGV0IHkgPSAobnVtYmVycy5NQVhfRElBR19XSU5fSEVJR0hUIC0gaGVpZ2h0KSA+PiAxO1xuICAgICAgICBpZiAoIVt1dGlscy5kaXJlY3Rpb25zLnVwLCB1dGlscy5kaXJlY3Rpb25zLnVwX2xlZnQsIHV0aWxzLmRpcmVjdGlvbnMudXBfcmlnaHRdLmluY2x1ZGVzKHRoaXMuaGVyb19kaXJlY3Rpb24pKSB7XG4gICAgICAgICAgICB5ID0gbnVtYmVycy5HQU1FX0hFSUdIVCAtIChudW1iZXJzLk1BWF9ESUFHX1dJTl9IRUlHSFQgKyA0KSArIHk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHt4OiB4LCB5OiB5fTtcbiAgICB9XG5cbiAgICAvL0ludGVybmFsIG1ldGhvZC4gVHJ5IHRvIGNhbGN1bGF0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGF2YXRhciB3aW5kb3dcbiAgICBnZXRfYXZhdGFyX3Bvc2l0aW9uKHdpbl9wb3MpIHtcbiAgICAgICAgY29uc3QgeCA9ICgodGhpcy5wYXJ0c1t0aGlzLnN0ZXBdLndpZHRoID4+IDIpICsgd2luX3Bvcy54KSB8IDA7XG4gICAgICAgIGxldCB5O1xuICAgICAgICBpZiAod2luX3Bvcy55ID49IG51bWJlcnMuR0FNRV9IRUlHSFQgPj4gMSkge1xuICAgICAgICAgICAgeSA9IHdpbl9wb3MueSAtIG51bWJlcnMuQVZBVEFSX1NJWkUgLSA4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgeSA9IHdpbl9wb3MueSArIHRoaXMucGFydHNbdGhpcy5zdGVwXS5oZWlnaHQgKyA0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7eDogeCwgeTogeX07XG4gICAgfVxuXG4gICAgLy9zZXQgY3VycmVudCBhdmF0YXIga2V5IG5hbWVcbiAgICBzZXRfYXZhdGFyKGF2YXRhcikge1xuICAgICAgICB0aGlzLmF2YXRhciA9IGF2YXRhcjtcbiAgICB9XG5cbiAgICAvL3NldCBjdXJyZW50IGhlcm8gZGlyZWN0aW9uXG4gICAgc2V0X2hlcm9fZGlyZWN0aW9uKGhlcm9fZGlyZWN0aW9uKSB7XG4gICAgICAgIGlmIChoZXJvX2RpcmVjdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmhlcm9fZGlyZWN0aW9uID0gaGVyb19kaXJlY3Rpb247XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvL0NhbGxzIHRoZSBuZXh0IGRpYWxvZyB3aW5kb3cuIElmIHRoZSBkaWFsb2cgaXMgZmluaXNoZWQsIHRoaXMgZnVuY3Rpb24gcGFzc2VzIHRydWUgdG8gdGhlIGNhbGxiYWNrLlxuICAgIG5leHQoY2FsbGJhY2ssIGN1c3RvbV9wb3MsIGN1c3RvbV9hdmF0YXJfcG9zKSB7XG4gICAgICAgIGlmICh0aGlzLmF2YXRhcl93aW5kb3cpIHtcbiAgICAgICAgICAgIHRoaXMuYXZhdGFyX3dpbmRvdy5kZXN0cm95KGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuYXZhdGFyX3dpbmRvdyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc3RlcCA+PSB0aGlzLnBhcnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgLy9maW5pc2hlcyB0aGUgZGlhbG9nXG4gICAgICAgICAgICB0aGlzLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMud2luZG93LmRlc3Ryb3kodHJ1ZSwgY2FsbGJhY2suYmluZCh0aGlzLCB0aGlzLmZpbmlzaGVkKSk7XG4gICAgICAgICAgICB0aGlzLmRpYWxvZ19jcnlzdGFsLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy53aW5kb3cpIHtcbiAgICAgICAgICAgIC8vZGVzdHJveXMgdGhlIGN1cnJlbnQgd2luZG93XG4gICAgICAgICAgICB0aGlzLndpbmRvdy5kZXN0cm95KGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMud2luZG93ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1vdW50X3dpbmRvdyhjYWxsYmFjaywgY3VzdG9tX3BvcywgY3VzdG9tX2F2YXRhcl9wb3MpO1xuICAgICAgICArK3RoaXMuc3RlcDtcbiAgICB9XG5cbiAgICBtb3VudF93aW5kb3coY2FsbGJhY2ssIGN1c3RvbV9wb3MsIGN1c3RvbV9hdmF0YXJfcG9zKSB7XG4gICAgICAgIHRoaXMuZGlhbG9nX2NyeXN0YWwudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICBsZXQgd2luX3BvcyA9IHRoaXMuZ2V0X2RpYWxvZ193aW5kb3dfcG9zaXRpb24odGhpcy5wYXJ0c1t0aGlzLnN0ZXBdLndpZHRoLCB0aGlzLnBhcnRzW3RoaXMuc3RlcF0uaGVpZ2h0KTtcbiAgICAgICAgaWYgKGN1c3RvbV9wb3MgJiYgY3VzdG9tX3Bvcy54ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdpbl9wb3MueCA9IGN1c3RvbV9wb3MueDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VzdG9tX3BvcyAmJiBjdXN0b21fcG9zLnkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd2luX3Bvcy55ID0gY3VzdG9tX3Bvcy55O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMud2luZG93ID0gbmV3IFdpbmRvdyhcbiAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgIHdpbl9wb3MueCxcbiAgICAgICAgICAgIHdpbl9wb3MueSxcbiAgICAgICAgICAgIHRoaXMucGFydHNbdGhpcy5zdGVwXS53aWR0aCxcbiAgICAgICAgICAgIHRoaXMucGFydHNbdGhpcy5zdGVwXS5oZWlnaHQsXG4gICAgICAgICAgICBmYWxzZVxuICAgICAgICApO1xuICAgICAgICB0aGlzLndpbmRvdy5zaG93KFxuICAgICAgICAgICAgKChzdGVwLCBpdGFsaWNfZm9udCwgbmV4dF9jYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMud2luZG93XG4gICAgICAgICAgICAgICAgICAgIC5zZXRfdGV4dCh0aGlzLnBhcnRzW3N0ZXBdLmxpbmVzLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBpdGFsaWNfZm9udCwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0ZXAgPCB0aGlzLnBhcnRzLmxlbmd0aCAtIDEgfHwgdGhpcy5zaG93X2NyeXN0YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpYWxvZ19jcnlzdGFsLnZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlhbG9nX2NyeXN0YWwueCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2luZG93LnJlYWxfeCArIHRoaXMucGFydHNbc3RlcF0ud2lkdGggLSB0aGlzLmRpYWxvZ19jcnlzdGFsLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlhbG9nX2NyeXN0YWwueSA9IHRoaXMud2luZG93LnJlYWxfeSArIHRoaXMucGFydHNbc3RlcF0uaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IHRoaXMuZGlhbG9nX2NyeXN0YWwucGFyZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5zZXRDaGlsZEluZGV4KHRoaXMuZGlhbG9nX2NyeXN0YWwsIHBhcmVudC5nZXRDaGlsZEluZGV4KHRoaXMud2luZG93Lmdyb3VwKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaWFsb2dfY3J5c3RhbC5wbGF5KHRoaXMuZGlhbG9nX2NyeXN0YWxfYW5pbV9rZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHR3ZWVuX3RvX3kgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlhbG9nX2NyeXN0YWwueSAtICh0aGlzLmRpYWxvZ19jcnlzdGFsLmhlaWdodCA+PiAxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaWFsb2dfY3J5c3RhbC55LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGlhbG9nX2NyeXN0YWxfdHdlZW4gJiYgdGhpcy5kaWFsb2dfY3J5c3RhbF90d2Vlbi5pc1J1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaWFsb2dfY3J5c3RhbF90d2Vlbi5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlhbG9nX2NyeXN0YWxfdHdlZW4gPSB0aGlzLmdhbWUudHdlZW5zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jcmVhdGUodGhpcy5kaWFsb2dfY3J5c3RhbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRvKHt5OiB0d2Vlbl90b195fSwgMTQwMCwgUGhhc2VyLkVhc2luZy5RdWFkcmF0aWMuSW5PdXQsIHRydWUsIDAsIC0xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGlhbG9nX2NyeXN0YWxfdHdlZW4gJiYgdGhpcy5kaWFsb2dfY3J5c3RhbF90d2Vlbi5pc1J1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaWFsb2dfY3J5c3RhbF90d2Vlbi5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRfY2FsbGJhY2spIG5leHRfY2FsbGJhY2sodGhpcy5maW5pc2hlZCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSkuYmluZCh0aGlzLCB0aGlzLnN0ZXAsIHRoaXMuaXRhbGljX2ZvbnQsIGNhbGxiYWNrKVxuICAgICAgICApO1xuICAgICAgICBpZiAodGhpcy5hdmF0YXIpIHtcbiAgICAgICAgICAgIGxldCBhdmF0YXJfcG9zID0gdGhpcy5nZXRfYXZhdGFyX3Bvc2l0aW9uKHdpbl9wb3MpO1xuICAgICAgICAgICAgaWYgKGN1c3RvbV9hdmF0YXJfcG9zICYmIGN1c3RvbV9hdmF0YXJfcG9zLnggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGF2YXRhcl9wb3MueCA9IGN1c3RvbV9hdmF0YXJfcG9zLng7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY3VzdG9tX2F2YXRhcl9wb3MgJiYgY3VzdG9tX2F2YXRhcl9wb3MueSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgYXZhdGFyX3Bvcy55ID0gY3VzdG9tX2F2YXRhcl9wb3MueTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHdpbmRvd19zaXplID0gbnVtYmVycy5BVkFUQVJfU0laRSArIDQ7XG4gICAgICAgICAgICB0aGlzLmF2YXRhcl93aW5kb3cgPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgYXZhdGFyX3Bvcy54LCBhdmF0YXJfcG9zLnksIHdpbmRvd19zaXplLCB3aW5kb3dfc2l6ZSk7XG4gICAgICAgICAgICB0aGlzLmF2YXRhcl93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKDQsIDQsIFwiYXZhdGFyc1wiLCB1bmRlZmluZWQsIHRoaXMuYXZhdGFyKTtcbiAgICAgICAgICAgIHRoaXMuYXZhdGFyX3dpbmRvdy5zaG93KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvL1JlY2VpdmVzIGEgdGV4dCBzdHJpbmcgYW5kIG1vdW50IHRoZSB0aGUgZGlhbG9nIHNlY3Rpb25zIHRoYXQgd2lsbCBnbyB0byBlYWNoIHdpbmRvdyBvZiB0aGUgZGlhbG9nLlxuICAgIC8vT3B0aW9uYWxseSwgYWxzbyByZWNlaXZlcyBhbiBpbml0aWFsIGF2YXRhciBhbmQgdGhlIGhlcm8gdGFsa2luZyBkaXJlY3Rpb25cbiAgICBzZXRfZGlhbG9nKHRleHQsIGF2YXRhciwgaGVyb19kaXJlY3Rpb24pIHtcbiAgICAgICAgdGhpcy5zZXRfYXZhdGFyKGF2YXRhcik7XG4gICAgICAgIHRoaXMuc2V0X2hlcm9fZGlyZWN0aW9uKGhlcm9fZGlyZWN0aW9uKTtcbiAgICAgICAgY29uc3QgbWF4X2VmZWN0aXZlX3dpZHRoID1cbiAgICAgICAgICAgIG51bWJlcnMuTUFYX0RJQUdfV0lOX1dJRFRIIC0gMiAqIG51bWJlcnMuV0lORE9XX1BBRERJTkdfSCAtIG51bWJlcnMuSU5TSURFX0JPUkRFUl9XSURUSDtcbiAgICAgICAgbGV0IHdvcmRzID0gdGV4dC5zcGxpdChcIiBcIik7XG4gICAgICAgIGxldCB3aW5kb3dzID0gW107IC8vYXJyYXkgb2YgbGluZXNcbiAgICAgICAgbGV0IGxpbmVzID0gW107IC8vYXJyYXkgb2Ygc3RyaW5nc1xuICAgICAgICBsZXQgbGluZSA9IFtdOyAvL2FycmF5IG9mIHdvcmRzXG4gICAgICAgIGxldCBsaW5lX3dpZHRoID0gMDsgLy9pbiBweFxuICAgICAgICBsZXQgbWF4X3dpbmRvd193aWR0aCA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgd29yZHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHdvcmQgPSB3b3Jkc1tpXTtcbiAgICAgICAgICAgIGxpbmVfd2lkdGggPSB1dGlscy5nZXRfdGV4dF93aWR0aCh0aGlzLmdhbWUsIGxpbmUuam9pbihcIiBcIikgKyB3b3JkLCB0aGlzLml0YWxpY19mb250KTtcbiAgICAgICAgICAgIGlmIChsaW5lX3dpZHRoID49IG1heF9lZmVjdGl2ZV93aWR0aCkge1xuICAgICAgICAgICAgICAgIC8vY2hlY2sgaWYgaXQncyB0aGUgZW5kIG9mIHRoZSBsaW5lXG4gICAgICAgICAgICAgICAgY29uc3QgbGluZV90ZXh0ID0gbGluZS5qb2luKFwiIFwiKTtcbiAgICAgICAgICAgICAgICBsaW5lcy5wdXNoKGxpbmVfdGV4dCk7XG4gICAgICAgICAgICAgICAgbWF4X3dpbmRvd193aWR0aCA9IE1hdGgubWF4KFxuICAgICAgICAgICAgICAgICAgICBtYXhfd2luZG93X3dpZHRoLFxuICAgICAgICAgICAgICAgICAgICB1dGlscy5nZXRfdGV4dF93aWR0aCh0aGlzLmdhbWUsIGxpbmVfdGV4dCwgdGhpcy5pdGFsaWNfZm9udClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGxpbmUgPSBbXTtcbiAgICAgICAgICAgICAgICBsaW5lLnB1c2god29yZCk7XG4gICAgICAgICAgICAgICAgbGluZV93aWR0aCA9IHV0aWxzLmdldF90ZXh0X3dpZHRoKHRoaXMuZ2FtZSwgd29yZCwgdGhpcy5pdGFsaWNfZm9udCk7XG4gICAgICAgICAgICAgICAgaWYgKGxpbmVzLmxlbmd0aCA9PT0gbnVtYmVycy5NQVhfTElORVNfUEVSX0RJQUdfV0lOKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgaWYgaXQncyB0aGUgZW5kIG9mIHRoZSB3aW5kb3dcbiAgICAgICAgICAgICAgICAgICAgd2luZG93cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVzOiBsaW5lcy5zbGljZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IG1heF93aW5kb3dfd2lkdGggKyAyICogbnVtYmVycy5XSU5ET1dfUEFERElOR19IICsgbnVtYmVycy5JTlNJREVfQk9SREVSX1dJRFRILFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bWJlcnMuV0lORE9XX1BBRERJTkdfVE9QICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1iZXJzLldJTkRPV19QQURESU5HX0JPVFRPTSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZXMubGVuZ3RoICogKG51bWJlcnMuRk9OVF9TSVpFICsgbnVtYmVycy5TUEFDRV9CRVRXRUVOX0xJTkVTKSAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVycy5TUEFDRV9CRVRXRUVOX0xJTkVTLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgbWF4X3dpbmRvd193aWR0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGxpbmVzID0gW107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsaW5lLnB1c2god29yZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxpbmUubGVuZ3RoKSB7XG4gICAgICAgICAgICAvL2RlYWwgd2l0aCB0aGUgbGFzdCB3aW5kb3cgdGhhdCBkb2VzIG5vdCBoYXZlIDMgbGluZXNcbiAgICAgICAgICAgIG1heF93aW5kb3dfd2lkdGggPSBNYXRoLm1heChcbiAgICAgICAgICAgICAgICBtYXhfd2luZG93X3dpZHRoLFxuICAgICAgICAgICAgICAgIHV0aWxzLmdldF90ZXh0X3dpZHRoKHRoaXMuZ2FtZSwgbGluZS5qb2luKFwiIFwiKSwgdGhpcy5pdGFsaWNfZm9udClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBsaW5lcy5wdXNoKGxpbmUuam9pbihcIiBcIikpO1xuICAgICAgICAgICAgd2luZG93cy5wdXNoKHtcbiAgICAgICAgICAgICAgICBsaW5lczogbGluZXMuc2xpY2UoKSxcbiAgICAgICAgICAgICAgICB3aWR0aDogbWF4X3dpbmRvd193aWR0aCArIDIgKiBudW1iZXJzLldJTkRPV19QQURESU5HX0ggKyBudW1iZXJzLklOU0lERV9CT1JERVJfV0lEVEggKyAyLFxuICAgICAgICAgICAgICAgIGhlaWdodDpcbiAgICAgICAgICAgICAgICAgICAgbnVtYmVycy5XSU5ET1dfUEFERElOR19UT1AgK1xuICAgICAgICAgICAgICAgICAgICBudW1iZXJzLldJTkRPV19QQURESU5HX0JPVFRPTSArXG4gICAgICAgICAgICAgICAgICAgIGxpbmVzLmxlbmd0aCAqIChudW1iZXJzLkZPTlRfU0laRSArIG51bWJlcnMuU1BBQ0VfQkVUV0VFTl9MSU5FUykgLVxuICAgICAgICAgICAgICAgICAgICBudW1iZXJzLlNQQUNFX0JFVFdFRU5fTElORVMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBhcnRzID0gd2luZG93cztcbiAgICB9XG5cbiAgICAvL0NhbGxzIGEgd2luZG93IGFuZCBsZXQgaXQgb3BlbiB0aWxsIHlvdSBjYWxsIHF1aWNrX25leHQgYWdhaW4gb3IgY2FsbCBraWxsX2RpYWxvZy4gSXMgZXhwZWN0ZWQgdGhhdCB0ZXh0IGZpdHMgaW4gb25lIHdpbmRvdy5cbiAgICBxdWlja19uZXh0KHRleHQsIGNhbGxiYWNrLCBhdmF0YXIsIGhlcm9fZGlyZWN0aW9uLCBjdXN0b21fcG9zLCBjdXN0b21fYXZhdGFyX3Bvcywgc2hvd19jcnlzdGFsID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5wYXJ0cyA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RlcCA9IDA7XG4gICAgICAgIGlmICh0aGlzLndpbmRvdykge1xuICAgICAgICAgICAgdGhpcy53aW5kb3cuZGVzdHJveShmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLndpbmRvdyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuYXZhdGFyX3dpbmRvdykge1xuICAgICAgICAgICAgdGhpcy5hdmF0YXJfd2luZG93LmRlc3Ryb3koZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5hdmF0YXJfd2luZG93ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNob3dfY3J5c3RhbCA9IHNob3dfY3J5c3RhbDtcbiAgICAgICAgdGhpcy5zZXRfZGlhbG9nKHRleHQsIGF2YXRhciwgaGVyb19kaXJlY3Rpb24pO1xuICAgICAgICB0aGlzLm1vdW50X3dpbmRvdyhjYWxsYmFjaywgY3VzdG9tX3BvcywgY3VzdG9tX2F2YXRhcl9wb3MpO1xuICAgIH1cblxuICAgIGtpbGxfZGlhbG9nKGNhbGxiYWNrLCBkaWFsb2dfb25seSA9IGZhbHNlLCBkZXN0cm95X2NyeXN0YWwgPSBmYWxzZSkge1xuICAgICAgICBpZiAoIWRpYWxvZ19vbmx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hdmF0YXJfd2luZG93KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hdmF0YXJfd2luZG93LmRlc3Ryb3koZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLndpbmRvdykge1xuICAgICAgICAgICAgdGhpcy5maW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLndpbmRvdy5kZXN0cm95KHRydWUsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIGlmIChkZXN0cm95X2NyeXN0YWwpIHRoaXMuZGlhbG9nX2NyeXN0YWwuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHtTcHJpdGVCYXNlfSBmcm9tIFwiLi9TcHJpdGVCYXNlXCI7XG5pbXBvcnQge2V2ZW50X3R5cGVzIGFzIGdhbWVfZXZlbnRfdHlwZXMsIEdhbWVFdmVudH0gZnJvbSBcIi4vZ2FtZV9ldmVudHMvR2FtZUV2ZW50XCI7XG5pbXBvcnQge21vdW50X2NvbGxpc2lvbl9wb2x5Z29ufSBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0IHtDb250cm9sbGFibGVDaGFyfSBmcm9tIFwiLi9Db250cm9sbGFibGVDaGFyXCI7XG5pbXBvcnQge0JhdHRsZUV2ZW50fSBmcm9tIFwiLi9nYW1lX2V2ZW50cy9CYXR0bGVFdmVudFwiO1xuaW1wb3J0IHtDb2xsaXNpb259IGZyb20gXCIuL0NvbGxpc2lvblwiO1xuXG5leHBvcnQgZW51bSBucGNfbW92ZW1lbnRfdHlwZXMge1xuICAgIElETEUgPSBcImlkbGVcIixcbiAgICBXQUxLX0FST1VORCA9IFwid2Fsa19hcm91bmRcIixcbn1cblxuZXhwb3J0IGVudW0gbnBjX3R5cGVzIHtcbiAgICBOT1JNQUwgPSBcIm5vcm1hbFwiLFxuICAgIElOTiA9IFwiaW5uXCIsXG4gICAgU0hPUCA9IFwic2hvcFwiLFxuICAgIFNQUklURSA9IFwic3ByaXRlXCIsXG59XG5cbmV4cG9ydCBjbGFzcyBOUEMgZXh0ZW5kcyBDb250cm9sbGFibGVDaGFyIHtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBOUENfVEFMS19SQU5HRSA9IDMuMDtcblxuICAgIHB1YmxpYyBtb3ZlbWVudF90eXBlOiBucGNfbW92ZW1lbnRfdHlwZXM7XG4gICAgcHVibGljIG5wY190eXBlOiBucGNfdHlwZXM7XG4gICAgcHVibGljIG1lc3NhZ2U6IHN0cmluZztcbiAgICBwdWJsaWMgdGhvdWdodF9tZXNzYWdlOiBzdHJpbmc7XG4gICAgcHVibGljIGF2YXRhcjogc3RyaW5nO1xuICAgIHB1YmxpYyBiYXNlX2NvbGxpc2lvbl9sYXllcjogbnVtYmVyO1xuICAgIHB1YmxpYyB0YWxrX3JhbmdlX2ZhY3RvcjogbnVtYmVyO1xuICAgIHB1YmxpYyBldmVudHM6IEdhbWVFdmVudFtdO1xuICAgIHB1YmxpYyBzaG9wX2tleTogc3RyaW5nO1xuICAgIHB1YmxpYyBub19zaGFkb3c6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgZ2FtZSxcbiAgICAgICAgZGF0YSxcbiAgICAgICAga2V5X25hbWUsXG4gICAgICAgIGluaXRpYWxfeCxcbiAgICAgICAgaW5pdGlhbF95LFxuICAgICAgICBpbml0aWFsX2FjdGlvbixcbiAgICAgICAgaW5pdGlhbF9kaXJlY3Rpb24sXG4gICAgICAgIGVuYWJsZV9mb290c3RlcHMsXG4gICAgICAgIHdhbGtfc3BlZWQsXG4gICAgICAgIGRhc2hfc3BlZWQsXG4gICAgICAgIGNsaW1iX3NwZWVkLFxuICAgICAgICBucGNfdHlwZSxcbiAgICAgICAgbW92ZW1lbnRfdHlwZSxcbiAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgdGhvdWdodF9tZXNzYWdlLFxuICAgICAgICBhdmF0YXIsXG4gICAgICAgIHNob3Bfa2V5LFxuICAgICAgICBiYXNlX2NvbGxpc2lvbl9sYXllcixcbiAgICAgICAgdGFsa19yYW5nZV9mYWN0b3IsXG4gICAgICAgIGV2ZW50c19pbmZvLFxuICAgICAgICBub19zaGFkb3dcbiAgICApIHtcbiAgICAgICAgc3VwZXIoXG4gICAgICAgICAgICBnYW1lLFxuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIGtleV9uYW1lLFxuICAgICAgICAgICAgaW5pdGlhbF94LFxuICAgICAgICAgICAgaW5pdGlhbF95LFxuICAgICAgICAgICAgaW5pdGlhbF9hY3Rpb24sXG4gICAgICAgICAgICBpbml0aWFsX2RpcmVjdGlvbixcbiAgICAgICAgICAgIGVuYWJsZV9mb290c3RlcHMsXG4gICAgICAgICAgICB3YWxrX3NwZWVkLFxuICAgICAgICAgICAgZGFzaF9zcGVlZCxcbiAgICAgICAgICAgIGNsaW1iX3NwZWVkXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMubnBjX3R5cGUgPSBucGNfdHlwZTtcbiAgICAgICAgdGhpcy5tb3ZlbWVudF90eXBlID0gbW92ZW1lbnRfdHlwZTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgdGhpcy50aG91Z2h0X21lc3NhZ2UgPSB0aG91Z2h0X21lc3NhZ2U7XG4gICAgICAgIHRoaXMuYXZhdGFyID0gYXZhdGFyO1xuICAgICAgICB0aGlzLnNob3Bfa2V5ID0gc2hvcF9rZXk7XG4gICAgICAgIHRoaXMuYmFzZV9jb2xsaXNpb25fbGF5ZXIgPSBiYXNlX2NvbGxpc2lvbl9sYXllcjtcbiAgICAgICAgdGhpcy50YWxrX3JhbmdlX2ZhY3RvciA9IHRhbGtfcmFuZ2VfZmFjdG9yID09PSB1bmRlZmluZWQgPyBOUEMuTlBDX1RBTEtfUkFOR0UgOiB0YWxrX3JhbmdlX2ZhY3RvcjtcbiAgICAgICAgdGhpcy5ub19zaGFkb3cgPSBub19zaGFkb3cgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogbm9fc2hhZG93O1xuICAgICAgICB0aGlzLmV2ZW50cyA9IFtdO1xuICAgICAgICB0aGlzLnNldF9ldmVudHMoZXZlbnRzX2luZm8pO1xuICAgIH1cblxuICAgIHNldF9zcHJpdGVfYXNfbnBjKCkge1xuICAgICAgICB0aGlzLnNwcml0ZS5pc19ucGMgPSB0cnVlO1xuICAgIH1cblxuICAgIHNldF9ldmVudHMoZXZlbnRzX2luZm8pIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBldmVudHNfaW5mby5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgZXZlbnRfaW5mbyA9IGV2ZW50c19pbmZvW2ldO1xuICAgICAgICAgICAgc3dpdGNoIChldmVudF9pbmZvLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIGdhbWVfZXZlbnRfdHlwZXMuQkFUVExFOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmV2ZW50cy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEJhdHRsZUV2ZW50KHRoaXMuZ2FtZSwgdGhpcy5kYXRhLCBldmVudF9pbmZvLmJhY2tncm91bmRfa2V5LCBldmVudF9pbmZvLmVuZW15X3BhcnR5X2tleSlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIGlmICh0aGlzLm1vdmVtZW50X3R5cGUgPT09IG5wY19tb3ZlbWVudF90eXBlcy5JRExFKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3BfY2hhcihmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVfc2hhZG93KCk7XG4gICAgfVxuXG4gICAgY29uZmlnX2JvZHkoY29sbGlzaW9uX29iajogQ29sbGlzaW9uKSB7XG4gICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLmVuYWJsZSh0aGlzLnNwcml0ZSwgZmFsc2UpO1xuICAgICAgICAvL0ltcG9ydGFudCB0byBiZSBhZnRlciB0aGUgcHJldmlvdXMgY29tbWFuZFxuICAgICAgICBpZiAodGhpcy5kYXRhLmRicy5ucGNfZGJbdGhpcy5rZXlfbmFtZV0uYW5jaG9yX3ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zcHJpdGUuYW5jaG9yLnggPSB0aGlzLmRhdGEuZGJzLm5wY19kYlt0aGlzLmtleV9uYW1lXS5hbmNob3JfeDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXRfYW5jaG9yKFwieFwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5kYXRhLmRicy5ucGNfZGJbdGhpcy5rZXlfbmFtZV0uYW5jaG9yX3kgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zcHJpdGUuYW5jaG9yLnkgPSB0aGlzLmRhdGEuZGJzLm5wY19kYlt0aGlzLmtleV9uYW1lXS5hbmNob3JfeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXRfYW5jaG9yKFwieVwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNwcml0ZS5ib2R5LmNsZWFyU2hhcGVzKCk7XG4gICAgICAgIHRoaXMuYm9keV9yYWRpdXMgPSB0aGlzLmRhdGEuZGJzLm5wY19kYlt0aGlzLmtleV9uYW1lXS5ib2R5X3JhZGl1cztcbiAgICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLmJvZHlfcmFkaXVzIDw8IDE7XG4gICAgICAgIGNvbnN0IHBvbHlnb24gPSBtb3VudF9jb2xsaXNpb25fcG9seWdvbihcbiAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgLSh3aWR0aCA+PiAxKSxcbiAgICAgICAgICAgIHRoaXMuZGF0YS5kYnMubnBjX2RiW3RoaXMua2V5X25hbWVdLmNvbGxpc2lvbl9ib2R5X2JldmVsXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkuYWRkUG9seWdvbihcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvcHRpbWFsRGVjb21wOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBza2lwU2ltcGxlQ2hlY2s6IHRydWUsXG4gICAgICAgICAgICAgICAgcmVtb3ZlQ29sbGluZWFyUG9pbnRzOiBmYWxzZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwb2x5Z29uXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkuc2V0Q29sbGlzaW9uR3JvdXAoY29sbGlzaW9uX29iai5ucGNfY29sbGlzaW9uX2dyb3Vwc1t0aGlzLmJhc2VfY29sbGlzaW9uX2xheWVyXSk7XG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkuZGFtcGluZyA9IDE7XG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkuYW5ndWxhckRhbXBpbmcgPSAxO1xuICAgICAgICB0aGlzLnNwcml0ZS5ib2R5LnNldFplcm9Sb3RhdGlvbigpO1xuICAgICAgICB0aGlzLnNwcml0ZS5ib2R5LmZpeGVkUm90YXRpb24gPSB0cnVlO1xuICAgICAgICB0aGlzLnNwcml0ZS5ib2R5LmR5bmFtaWMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zcHJpdGUuYm9keS5zdGF0aWMgPSB0cnVlO1xuICAgIH1cbn1cbiIsImltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSBcIi4uL21hZ2ljX251bWJlcnNcIjtcbmltcG9ydCB7cmFuZ2VfMzYwfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCB7YWJpbGl0eV90YXJnZXRfdHlwZXN9IGZyb20gXCIuLi9BYmlsaXR5XCI7XG5pbXBvcnQge2ZpZ2h0ZXJfdHlwZXMsIHBlcm1hbmVudF9zdGF0dXMsIFBsYXllcn0gZnJvbSBcIi4uL1BsYXllclwiO1xuaW1wb3J0IHtHb2xkZW5TdW59IGZyb20gXCIuLi9Hb2xkZW5TdW5cIjtcbmltcG9ydCB7UGxheWVySW5mb30gZnJvbSBcIi4vQmF0dGxlXCI7XG5pbXBvcnQgKiBhcyBfIGZyb20gXCJsb2Rhc2hcIjtcbmltcG9ydCB7U3ByaXRlQmFzZX0gZnJvbSBcIi4uL1Nwcml0ZUJhc2VcIjtcblxuY29uc3QgU0NBTEVfRkFDVE9SID0gMC44MzM0O1xuY29uc3QgQkdfWCA9IDA7XG5jb25zdCBCR19ZID0gMTc7XG5jb25zdCBCR19IRUlHSFQgPSAxMjA7XG5cbmNvbnN0IENFTlRFUl9YID0gbnVtYmVycy5HQU1FX1dJRFRIID4+IDE7XG5jb25zdCBDRU5URVJfWSA9IG51bWJlcnMuR0FNRV9IRUlHSFQgLSAzNTtcbmNvbnN0IENBTUVSQV9TUEVFRCA9IDAuMDA5ICogTWF0aC5QSTtcblxuY29uc3QgQkdfU1BFRUQgPSAyLjQ7XG5jb25zdCBCR19TUElOX1NQRUVEID0gMC40O1xuXG5jb25zdCBTUEFDRV9CRVRXRUVOX0NIQVJTID0gMzU7XG5jb25zdCBTRU1JX01BSk9SX0FYSVMgPSBudW1iZXJzLkdBTUVfV0lEVEggLyAyIC0gNTA7XG5jb25zdCBTRU1JX01JTk9SX0FYSVMgPSBudW1iZXJzLkdBTUVfSEVJR0hUIC8gNTA7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1BPU19BTkdMRSA9IDAuNzU1MTMyNztcbmNvbnN0IElOSVRJQUxfUE9TX0FOR0xFID0gLTIuMTIwNTc1O1xuXG5jb25zdCBJTklUSUFMX1NDQUxFID0gMS4yO1xuY29uc3QgQkdfREVGQVVMVF9TQ0FMRSA9IDEuMDtcblxuY29uc3QgQUNUSU9OX1BPU19CR19TQ0FMRSA9IDI7XG5cbmNvbnN0IEFDVElPTl9QT1NfQUxMWV9YID0gODg7XG5jb25zdCBBQ1RJT05fUE9TX0VORU1ZX0NFTlRFUl9YID0gMTA2O1xuY29uc3QgQUNUSU9OX0FMTFlfWSA9IDE2MDtcbmNvbnN0IEFDVElPTl9FTkVNWV9ZID0gOTg7XG5cbmNvbnN0IEFDVElPTl9QT1NfU1BBQ0VfQkVUV0VFTiA9IDQwO1xuY29uc3QgQUNUSU9OX1BPU19TQ0FMRV9BREQgPSAwLjI7XG5cbmNvbnN0IENIT09TRV9UQVJHRVRfRU5FTVlfU0hJRlQgPSAxNTtcbmNvbnN0IENIT09TRV9UQVJHRVRfQUxMWV9TSElGVCA9IC0zO1xuXG5jb25zdCBDSE9PU0VfVEFSR0VUX1JJR0hUID0gMTtcbmNvbnN0IENIT09TRV9UQVJHRVRfTEVGVCA9IC0xO1xuXG5jb25zdCBSQU5HRVMgPSBbMTEsIDksIDcsIDUsIDMsIDEsIDMsIDUsIDcsIDksIDExXTtcbmNvbnN0IEJBVFRMRV9DVVJTT1JfU0NBTEVTID0gWzAuMSwgMC4yLCAwLjMsIDAuNCwgMC42LCAxLCAwLjYsIDAuNCwgMC4zLCAwLjIsIDAuMV07XG5cbmNvbnN0IElOSVRfVElNRSA9IDE1MDA7XG5jb25zdCBDSE9PU0lOR19UQVJHRVRfU0NSRUVOX1NISUZUX1RJTUUgPSAxNTA7XG5cbmV4cG9ydCB0eXBlIENhbWVyYUFuZ2xlID0ge1xuICAgIHJhZDogbnVtYmVyO1xuICAgIHNwaW5pbmc6IGJvb2xlYW47XG4gICAgdXBkYXRlOiBGdW5jdGlvbjtcbn07XG5cbmV4cG9ydCB0eXBlIFRhcmdldCA9IHtcbiAgICBtYWduaXR1ZGU6IG51bWJlcjtcbiAgICB0YXJnZXQ6IFBsYXllckluZm87XG59O1xuXG5leHBvcnQgY2xhc3MgQmF0dGxlU3RhZ2Uge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgZGF0YTogR29sZGVuU3VuO1xuXG4gICAgcHVibGljIGNhbWVyYV9hbmdsZTogQ2FtZXJhQW5nbGU7XG5cbiAgICBwdWJsaWMgYmFja2dyb3VuZF9rZXk6IHN0cmluZztcbiAgICBwdWJsaWMgb2xkX2NhbWVyYV9hbmdsZTogbnVtYmVyO1xuXG4gICAgcHVibGljIGJhdHRsZV9ncm91cDogUGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyBjcm9wX2dyb3VwOiBQaGFzZXIuR3JvdXA7XG4gICAgcHVibGljIGdyb3VwX2VuZW1pZXM6IFBoYXNlci5Hcm91cDtcbiAgICBwdWJsaWMgZ3JvdXBfYWxsaWVzOiBQaGFzZXIuR3JvdXA7XG5cbiAgICBwdWJsaWMgYWxsaWVzX2luZm86IFBsYXllckluZm9bXTtcbiAgICBwdWJsaWMgZW5lbWllc19pbmZvOiBQbGF5ZXJJbmZvW107XG4gICAgcHVibGljIGFsbGllc19jb3VudDogbnVtYmVyO1xuICAgIHB1YmxpYyBlbmVtaWVzX2NvdW50OiBudW1iZXI7XG5cbiAgICBwdWJsaWMgc2hpZnRfZnJvbV9taWRkbGVfZW5lbXk6IG51bWJlcjtcbiAgICBwdWJsaWMgc2hpZnRfZnJvbV9taWRkbGVfYWxseTogbnVtYmVyO1xuXG4gICAgcHVibGljIHNwcml0ZXM6IFBoYXNlci5TcHJpdGVbXTtcblxuICAgIHB1YmxpYyB4OiBudW1iZXI7XG4gICAgcHVibGljIHk6IG51bWJlcjtcblxuICAgIHB1YmxpYyBjaG9vc2luZ19hY3Rpb25zOiBib29sZWFuO1xuICAgIHB1YmxpYyBjaG9vc2luZ190YXJnZXRzOiBib29sZWFuO1xuICAgIHB1YmxpYyB0YXJnZXRfdHlwZTogc3RyaW5nO1xuICAgIHB1YmxpYyBhYmlsaXR5X2Nhc3RlcjogUGxheWVyO1xuXG4gICAgcHVibGljIGJsYWNrX2JnOiBQaGFzZXIuR3JhcGhpY3M7XG4gICAgcHVibGljIGJhdHRsZV9iZzogUGhhc2VyLlRpbGVTcHJpdGU7XG4gICAgcHVibGljIGJhdHRsZV9iZzI6IFBoYXNlci5UaWxlU3ByaXRlO1xuXG4gICAgcHVibGljIHVwcGVyX3JlY3Q6IFBoYXNlci5HcmFwaGljcztcbiAgICBwdWJsaWMgbG93ZXJfcmVjdDogUGhhc2VyLkdyYXBoaWNzO1xuXG4gICAgcHVibGljIGZpcnN0X2FsbHlfY2hhcjogUGhhc2VyLlNwcml0ZTtcbiAgICBwdWJsaWMgbGFzdF9hbGx5X2NoYXI6IFBoYXNlci5TcHJpdGU7XG4gICAgcHVibGljIGZpcnN0X2VuZW15X2NoYXI6IFBoYXNlci5TcHJpdGU7XG4gICAgcHVibGljIGxhc3RfZW5lbXlfY2hhcjogUGhhc2VyLlNwcml0ZTtcblxuICAgIHB1YmxpYyBjaG9vc2luZ190YXJnZXRzX2NhbGxiYWNrOiBGdW5jdGlvbjtcbiAgICBwdWJsaWMgcmFuZ2VfY3Vyc29yX3Bvc2l0aW9uOiBudW1iZXI7XG4gICAgcHVibGljIGFiaWxpdHlfcmFuZ2U6IHN0cmluZyB8IG51bWJlcjtcbiAgICBwdWJsaWMgYWJpbGl0eV90eXBlOiBzdHJpbmc7XG5cbiAgICBwdWJsaWMgY3Vyc29yc190d2VlbnM6IFBoYXNlci5Ud2VlbltdO1xuICAgIHB1YmxpYyBjdXJzb3JzOiBQaGFzZXIuU3ByaXRlW107XG4gICAgcHVibGljIGJnX2hlaWdodDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGdhbWU6IFBoYXNlci5HYW1lLFxuICAgICAgICBkYXRhOiBHb2xkZW5TdW4sXG4gICAgICAgIGJhY2tncm91bmRfa2V5OiBzdHJpbmcsXG4gICAgICAgIGFsbGllc19pbmZvOiBQbGF5ZXJJbmZvW10sXG4gICAgICAgIGVuZW1pZXNfaW5mbzogUGxheWVySW5mb1tdXG4gICAgKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG5cbiAgICAgICAgdGhpcy5jYW1lcmFfYW5nbGUgPSB7XG4gICAgICAgICAgICByYWQ6IElOSVRJQUxfUE9TX0FOR0xFLFxuICAgICAgICAgICAgc3BpbmluZzogZmFsc2UsXG4gICAgICAgICAgICB1cGRhdGU6IHRoaXMudXBkYXRlX3Nwcml0ZV9wcm9wZXJ0aWVzLmJpbmQodGhpcyksXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kX2tleSA9IGJhY2tncm91bmRfa2V5O1xuICAgICAgICB0aGlzLm9sZF9jYW1lcmFfYW5nbGUgPSB0aGlzLmNhbWVyYV9hbmdsZS5yYWQ7XG5cbiAgICAgICAgdGhpcy5iYXR0bGVfZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XG4gICAgICAgIHRoaXMuY3JvcF9ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcbiAgICAgICAgdGhpcy5ncm91cF9lbmVtaWVzID0gdGhpcy5nYW1lLmFkZC5ncm91cCgpO1xuICAgICAgICB0aGlzLmdyb3VwX2FsbGllcyA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcblxuICAgICAgICB0aGlzLmFsbGllc19pbmZvID0gYWxsaWVzX2luZm87XG4gICAgICAgIHRoaXMuZW5lbWllc19pbmZvID0gZW5lbWllc19pbmZvO1xuICAgICAgICB0aGlzLmFsbGllc19jb3VudCA9IGFsbGllc19pbmZvLmxlbmd0aDtcbiAgICAgICAgdGhpcy5lbmVtaWVzX2NvdW50ID0gZW5lbWllc19pbmZvLmxlbmd0aDtcblxuICAgICAgICB0aGlzLnNoaWZ0X2Zyb21fbWlkZGxlX2VuZW15ID0gU1BBQ0VfQkVUV0VFTl9DSEFSUyAqIHRoaXMuZW5lbWllc19jb3VudCAqIDAuNTtcbiAgICAgICAgdGhpcy5zaGlmdF9mcm9tX21pZGRsZV9hbGx5ID0gU1BBQ0VfQkVUV0VFTl9DSEFSUyAqIHRoaXMuYWxsaWVzX2NvdW50ICogMC41O1xuXG4gICAgICAgIHRoaXMuc3ByaXRlcyA9IFtdO1xuXG4gICAgICAgIHRoaXMueCA9IHRoaXMuZ2FtZS5jYW1lcmEueDtcbiAgICAgICAgdGhpcy55ID0gdGhpcy5nYW1lLmNhbWVyYS55O1xuXG4gICAgICAgIHRoaXMuYmF0dGxlX2dyb3VwLnggPSB0aGlzLng7XG4gICAgICAgIHRoaXMuYmF0dGxlX2dyb3VwLnkgPSB0aGlzLnk7XG4gICAgICAgIHRoaXMuYmF0dGxlX2dyb3VwLnNjYWxlLnNldFRvKElOSVRJQUxfU0NBTEUsIElOSVRJQUxfU0NBTEUpO1xuXG4gICAgICAgIHRoaXMuY3JvcF9ncm91cC54ID0gdGhpcy54O1xuICAgICAgICB0aGlzLmNyb3BfZ3JvdXAueSA9IHRoaXMueTtcbiAgICB9XG5cbiAgICBzZXRfdGFyZ2V0cygpIHtcbiAgICAgICAgbGV0IHBhcnR5X2NvdW50OiBudW1iZXIsIHBhcnR5X2luZm86IFBsYXllckluZm9bXTtcblxuICAgICAgICBzd2l0Y2ggKHRoaXMudGFyZ2V0X3R5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgYWJpbGl0eV90YXJnZXRfdHlwZXMuQUxMWTpcbiAgICAgICAgICAgICAgICBwYXJ0eV9jb3VudCA9IHRoaXMuYWxsaWVzX2NvdW50O1xuICAgICAgICAgICAgICAgIHBhcnR5X2luZm8gPSB0aGlzLmFsbGllc19pbmZvO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIGFiaWxpdHlfdGFyZ2V0X3R5cGVzLkVORU1ZOlxuICAgICAgICAgICAgICAgIHBhcnR5X2NvdW50ID0gdGhpcy5lbmVtaWVzX2NvdW50O1xuICAgICAgICAgICAgICAgIHBhcnR5X2luZm8gPSB0aGlzLmVuZW1pZXNfaW5mbztcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBhYmlsaXR5X3RhcmdldF90eXBlcy5VU0VSOlxuICAgICAgICAgICAgICAgIHBhcnR5X2NvdW50ID1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hYmlsaXR5X2Nhc3Rlci5maWdodGVyX3R5cGUgPT09IGZpZ2h0ZXJfdHlwZXMuQUxMWSA/IHRoaXMuYWxsaWVzX2NvdW50IDogdGhpcy5lbmVtaWVzX2NvdW50O1xuICAgICAgICAgICAgICAgIHBhcnR5X2luZm8gPVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFiaWxpdHlfY2FzdGVyLmZpZ2h0ZXJfdHlwZSA9PT0gZmlnaHRlcl90eXBlcy5FTkVNWSA/IHRoaXMuYWxsaWVzX2luZm8gOiB0aGlzLmVuZW1pZXNfaW5mbztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHRhcmdldHMgPSBfLnppcFdpdGgoXG4gICAgICAgICAgICBSQU5HRVMuc2xpY2UoXG4gICAgICAgICAgICAgICAgdGhpcy5yYW5nZV9jdXJzb3JfcG9zaXRpb24gLSAocGFydHlfY291bnQgPj4gMSksXG4gICAgICAgICAgICAgICAgdGhpcy5yYW5nZV9jdXJzb3JfcG9zaXRpb24gKyAocGFydHlfY291bnQgPj4gMSkgKyAxXG4gICAgICAgICAgICApLnJldmVyc2UoKSxcbiAgICAgICAgICAgIHBhcnR5X2luZm8sXG4gICAgICAgICAgICAobWFnbml0dWRlLCB0YXJnZXQpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgdDogVGFyZ2V0ID0ge21hZ25pdHVkZTogbWFnbml0dWRlID4gdGhpcy5hYmlsaXR5X3JhbmdlID8gbnVsbCA6IG1hZ25pdHVkZSwgdGFyZ2V0OiB0YXJnZXR9O1xuICAgICAgICAgICAgICAgIHJldHVybiB0O1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIGlmICh0aGlzLnRhcmdldF90eXBlID09PSBhYmlsaXR5X3RhcmdldF90eXBlcy5VU0VSKSB7XG4gICAgICAgICAgICB0aGlzLmNob29zaW5nX3RhcmdldHNfY2FsbGJhY2sodGFyZ2V0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNob29zaW5nX3RhcmdldHNfZmluaXNoZWQodGFyZ2V0cyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZXh0X3RhcmdldCgpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VfdGFyZ2V0KENIT09TRV9UQVJHRVRfTEVGVCk7XG4gICAgfVxuXG4gICAgcHJldmlvdXNfdGFyZ2V0KCkge1xuICAgICAgICB0aGlzLmNoYW5nZV90YXJnZXQoQ0hPT1NFX1RBUkdFVF9SSUdIVCk7XG4gICAgfVxuXG4gICAgY2hhbmdlX3RhcmdldChzdGVwOiBudW1iZXIsIHR3ZWVuX3RvX3BvczogYm9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0X3R5cGUgPT09IGFiaWxpdHlfdGFyZ2V0X3R5cGVzLkVORU1ZKSB7XG4gICAgICAgICAgICBzdGVwICo9IC0xO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZ3JvdXBfaW5mbyA9IHRoaXMudGFyZ2V0X3R5cGUgPT09IGFiaWxpdHlfdGFyZ2V0X3R5cGVzLkFMTFkgPyB0aGlzLmFsbGllc19pbmZvIDogdGhpcy5lbmVtaWVzX2luZm87XG4gICAgICAgIGNvbnN0IGdyb3VwX2xlbmd0aCA9IGdyb3VwX2luZm8ubGVuZ3RoO1xuICAgICAgICBjb25zdCBncm91cF9oYWxmX2xlbmd0aCA9IGdyb3VwX2xlbmd0aCAlIDIgPyBncm91cF9sZW5ndGggPj4gMSA6IChncm91cF9sZW5ndGggPj4gMSkgLSAxO1xuXG4gICAgICAgIGxldCB0YXJnZXRfc3ByaXRlX2luZGV4OiBudW1iZXI7XG5cbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgdGhpcy5yYW5nZV9jdXJzb3JfcG9zaXRpb24gKz0gc3RlcDtcbiAgICAgICAgICAgIGlmIChzdGVwID09PSAwKSBzdGVwID0gQ0hPT1NFX1RBUkdFVF9MRUZUO1xuXG4gICAgICAgICAgICBjb25zdCBjZW50ZXJfc2hpZnQgPSB0aGlzLnJhbmdlX2N1cnNvcl9wb3NpdGlvbiAtIChSQU5HRVMubGVuZ3RoID4+IDEpO1xuICAgICAgICAgICAgdGFyZ2V0X3Nwcml0ZV9pbmRleCA9IGdyb3VwX2hhbGZfbGVuZ3RoICsgY2VudGVyX3NoaWZ0O1xuXG4gICAgICAgICAgICBpZiAodGFyZ2V0X3Nwcml0ZV9pbmRleCA+PSBncm91cF9sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJhbmdlX2N1cnNvcl9wb3NpdGlvbiA9IChSQU5HRVMubGVuZ3RoID4+IDEpIC0gZ3JvdXBfaGFsZl9sZW5ndGg7XG4gICAgICAgICAgICAgICAgdGFyZ2V0X3Nwcml0ZV9pbmRleCA9IDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRhcmdldF9zcHJpdGVfaW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yYW5nZV9jdXJzb3JfcG9zaXRpb24gPSAoUkFOR0VTLmxlbmd0aCA+PiAxKSArIGdyb3VwX2hhbGZfbGVuZ3RoICsgKyEoZ3JvdXBfbGVuZ3RoICUgMik7XG4gICAgICAgICAgICAgICAgdGFyZ2V0X3Nwcml0ZV9pbmRleCA9IGdyb3VwX2xlbmd0aCAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKGdyb3VwX2luZm9bdGFyZ2V0X3Nwcml0ZV9pbmRleF0uaW5zdGFuY2UuaGFzX3Blcm1hbmVudF9zdGF0dXMocGVybWFuZW50X3N0YXR1cy5ET1dORUQpKTtcblxuICAgICAgICB0aGlzLnNldF9iYXR0bGVfY3Vyc29yc19wb3NpdGlvbih0d2Vlbl90b19wb3MpO1xuICAgIH1cblxuICAgIGluaXRpYWxpemVfc3ByaXRlcygpIHtcbiAgICAgICAgdGhpcy5ibGFja19iZyA9IHRoaXMuZ2FtZS5hZGQuZ3JhcGhpY3MoMCwgMCk7XG4gICAgICAgIHRoaXMuYmF0dGxlX2dyb3VwLmFkZCh0aGlzLmJsYWNrX2JnKTtcblxuICAgICAgICB0aGlzLmJsYWNrX2JnLmJlZ2luRmlsbCgweDAsIDEpO1xuICAgICAgICB0aGlzLmJsYWNrX2JnLmRyYXdSZWN0KDAsIDAsIG51bWJlcnMuR0FNRV9XSURUSCwgbnVtYmVycy5HQU1FX0hFSUdIVCk7XG4gICAgICAgIHRoaXMuYmxhY2tfYmcuZW5kRmlsbCgpO1xuXG4gICAgICAgIHRoaXMuYmF0dGxlX2JnID0gdGhpcy5nYW1lLmFkZC50aWxlU3ByaXRlKFxuICAgICAgICAgICAgQkdfWCxcbiAgICAgICAgICAgIEJHX1ksXG4gICAgICAgICAgICBudW1iZXJzLkdBTUVfV0lEVEgsXG4gICAgICAgICAgICBCR19IRUlHSFQsXG4gICAgICAgICAgICBcImJhdHRsZV9iYWNrZ3JvdW5kc1wiLFxuICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kX2tleVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmJhdHRsZV9iZzIgPSB0aGlzLmdhbWUuYWRkLnRpbGVTcHJpdGUoXG4gICAgICAgICAgICBCR19YLFxuICAgICAgICAgICAgQkdfWSxcbiAgICAgICAgICAgIG51bWJlcnMuR0FNRV9XSURUSCxcbiAgICAgICAgICAgIEJHX0hFSUdIVCxcbiAgICAgICAgICAgIFwiYmF0dGxlX2JhY2tncm91bmRzXCIsXG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmRfa2V5XG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5iZ19oZWlnaHQgPSB0aGlzLmJhdHRsZV9iZy5oZWlnaHQ7XG5cbiAgICAgICAgdGhpcy5iYXR0bGVfYmcuc2NhbGUuc2V0VG8oQkdfREVGQVVMVF9TQ0FMRSwgQkdfREVGQVVMVF9TQ0FMRSk7XG4gICAgICAgIHRoaXMuYmF0dGxlX2JnMi5zY2FsZS5zZXRUbyhCR19ERUZBVUxUX1NDQUxFLCBCR19ERUZBVUxUX1NDQUxFKTtcblxuICAgICAgICBjb25zdCBzZXRfc3ByaXRlID0gKFxuICAgICAgICAgICAgZ3JvdXA6IFBoYXNlci5Hcm91cCxcbiAgICAgICAgICAgIGluZm86IFBsYXllckluZm8sXG4gICAgICAgICAgICBpc19hbGx5OiBib29sZWFuLFxuICAgICAgICAgICAgYW5pbWF0aW9uOiBzdHJpbmcsXG4gICAgICAgICAgICBzcHJpdGVfYmFzZTogU3ByaXRlQmFzZVxuICAgICAgICApID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNwcml0ZSA9IGdyb3VwLmNyZWF0ZSgwLCAwLCBpbmZvLnNwcml0ZV9rZXkpO1xuICAgICAgICAgICAgc3ByaXRlLmFuY2hvci5zZXRUbygwLjUsIDEpO1xuICAgICAgICAgICAgc3ByaXRlLnNjYWxlLnNldFRvKGluZm8uc2NhbGUsIGluZm8uc2NhbGUpO1xuXG4gICAgICAgICAgICBzcHJpdGUuZWxsaXBzZXNfc2VtaV9tYWpvciA9IFNFTUlfTUFKT1JfQVhJUztcbiAgICAgICAgICAgIHNwcml0ZS5lbGxpcHNlc19zZW1pX21pbm9yID0gU0VNSV9NSU5PUl9BWElTO1xuXG4gICAgICAgICAgICBzcHJpdGUuZGF0YS5pc19BbGx5ID0gaXNfYWxseTtcbiAgICAgICAgICAgIHNwcml0ZV9iYXNlLnNldEFuaW1hdGlvbihzcHJpdGUsIFwiYmF0dGxlXCIpO1xuICAgICAgICAgICAgc3ByaXRlLmFuaW1hdGlvbnMucGxheShhbmltYXRpb24pO1xuICAgICAgICAgICAgdGhpcy5zcHJpdGVzLnB1c2goc3ByaXRlKTtcblxuICAgICAgICAgICAgcmV0dXJuIHNwcml0ZTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmFsbGllc19pbmZvLmZvckVhY2goaW5mbyA9PiB7XG4gICAgICAgICAgICBjb25zdCBzcHJpdGUgPSBzZXRfc3ByaXRlKFxuICAgICAgICAgICAgICAgIHRoaXMuZ3JvdXBfYWxsaWVzLFxuICAgICAgICAgICAgICAgIGluZm8sXG4gICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImJhdHRsZV9iYWNrXCIsXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmluZm8ubWFpbl9jaGFyX2xpc3RbaW5mby5pbnN0YW5jZS5rZXlfbmFtZV0uc3ByaXRlX2Jhc2VcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpbmZvLnNwcml0ZSA9IHNwcml0ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5lbmVtaWVzX2luZm8uZm9yRWFjaChpbmZvID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNwcml0ZSA9IHNldF9zcHJpdGUoXG4gICAgICAgICAgICAgICAgdGhpcy5ncm91cF9lbmVtaWVzLFxuICAgICAgICAgICAgICAgIGluZm8sXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgXCJiYXR0bGVfZnJvbnRcIixcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaW5mby5lbmVtaWVzX2xpc3RbaW5mby5pbnN0YW5jZS5rZXlfbmFtZV0uc3ByaXRlX2Jhc2VcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpbmZvLnNwcml0ZSA9IHNwcml0ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5maXJzdF9hbGx5X2NoYXIgPSB0aGlzLmdyb3VwX2FsbGllcy5jaGlsZHJlblswXSBhcyBQaGFzZXIuU3ByaXRlO1xuICAgICAgICB0aGlzLmxhc3RfYWxseV9jaGFyID0gdGhpcy5ncm91cF9hbGxpZXMuY2hpbGRyZW5bdGhpcy5hbGxpZXNfY291bnQgLSAxXSBhcyBQaGFzZXIuU3ByaXRlO1xuXG4gICAgICAgIHRoaXMuZmlyc3RfZW5lbXlfY2hhciA9IHRoaXMuZ3JvdXBfZW5lbWllcy5jaGlsZHJlblswXSBhcyBQaGFzZXIuU3ByaXRlO1xuICAgICAgICB0aGlzLmxhc3RfZW5lbXlfY2hhciA9IHRoaXMuZ3JvdXBfZW5lbWllcy5jaGlsZHJlblt0aGlzLmVuZW1pZXNfY291bnQgLSAxXSBhcyBQaGFzZXIuU3ByaXRlO1xuICAgIH1cblxuICAgIGludGlhbGl6ZV9jcm9wX3JlY3RhbmdsZXMoKSB7XG4gICAgICAgIGNvbnN0IHVwcGVyX3ggPSAwO1xuICAgICAgICBjb25zdCB1cHBlcl95ID0gMDtcblxuICAgICAgICB0aGlzLnVwcGVyX3JlY3QgPSB0aGlzLmdhbWUuYWRkLmdyYXBoaWNzKHVwcGVyX3gsIHVwcGVyX3kpO1xuICAgICAgICB0aGlzLmNyb3BfZ3JvdXAuYWRkKHRoaXMudXBwZXJfcmVjdCk7XG5cbiAgICAgICAgdGhpcy51cHBlcl9yZWN0LmJlZ2luRmlsbCgweDAsIDEpO1xuICAgICAgICB0aGlzLnVwcGVyX3JlY3QuZHJhd1JlY3QoMCwgMCwgbnVtYmVycy5HQU1FX1dJRFRILCBudW1iZXJzLkdBTUVfSEVJR0hUID4+IDEpO1xuICAgICAgICB0aGlzLnVwcGVyX3JlY3QuZW5kRmlsbCgpO1xuXG4gICAgICAgIGNvbnN0IGxvd2VyX3ggPSAwO1xuICAgICAgICBjb25zdCBsb3dlcl95ID0gQkdfWSArICh0aGlzLmJnX2hlaWdodCA+PiAxKSArIDI7XG5cbiAgICAgICAgdGhpcy5sb3dlcl9yZWN0ID0gdGhpcy5nYW1lLmFkZC5ncmFwaGljcyhsb3dlcl94LCBsb3dlcl95KTtcbiAgICAgICAgdGhpcy5jcm9wX2dyb3VwLmFkZCh0aGlzLmxvd2VyX3JlY3QpO1xuXG4gICAgICAgIHRoaXMubG93ZXJfcmVjdC5iZWdpbkZpbGwoMHgwLCAxKTtcbiAgICAgICAgdGhpcy5sb3dlcl9yZWN0LmRyYXdSZWN0KDAsIDAsIG51bWJlcnMuR0FNRV9XSURUSCwgKG51bWJlcnMuR0FNRV9IRUlHSFQgPj4gMSkgKyAyKTtcbiAgICAgICAgdGhpcy5sb3dlcl9yZWN0LmVuZEZpbGwoKTtcbiAgICB9XG5cbiAgICBpbml0aWFsaXplX3N0YWdlKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuY2hvb3NpbmdfYWN0aW9ucyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNob29zaW5nX3RhcmdldHMgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLmluaXRpYWxpemVfc3ByaXRlcygpO1xuICAgICAgICB0aGlzLmludGlhbGl6ZV9jcm9wX3JlY3RhbmdsZXMoKTtcblxuICAgICAgICB0aGlzLmJhdHRsZV9ncm91cC5hZGQodGhpcy5iYXR0bGVfYmcpO1xuICAgICAgICB0aGlzLmJhdHRsZV9ncm91cC5hZGQodGhpcy5iYXR0bGVfYmcyKTtcbiAgICAgICAgdGhpcy5iYXR0bGVfZ3JvdXAuYWRkKHRoaXMuZ3JvdXBfZW5lbWllcyk7XG4gICAgICAgIHRoaXMuYmF0dGxlX2dyb3VwLmFkZCh0aGlzLmdyb3VwX2FsbGllcyk7XG5cbiAgICAgICAgdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLnVwcGVyX3JlY3QpLnRvKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGhlaWdodDogQkdfWSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBJTklUX1RJTUUsXG4gICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcy5sb3dlcl9yZWN0KS50byhcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB5OiBCR19ZICsgdGhpcy5iZ19oZWlnaHQgLSAxLFxuICAgICAgICAgICAgICAgIGhlaWdodDogbnVtYmVycy5HQU1FX0hFSUdIVCAtIHRoaXMuYmdfaGVpZ2h0IC0gQkdfWSArIDEsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgSU5JVF9USU1FLFxuICAgICAgICAgICAgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmdhbWUuYWRkXG4gICAgICAgICAgICAudHdlZW4odGhpcy5jYW1lcmFfYW5nbGUpXG4gICAgICAgICAgICAudG8oXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICByYWQ6IERFRkFVTFRfUE9TX0FOR0xFLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgSU5JVF9USU1FLFxuICAgICAgICAgICAgICAgIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsXG4gICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLmJhdHRsZV9ncm91cC5zY2FsZSkudG8oXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogMSxcbiAgICAgICAgICAgICAgICB5OiAxLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIElOSVRfVElNRSxcbiAgICAgICAgICAgIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgYXN5bmMgc2V0X3N0YWdlX2RlZmF1bHRfcG9zaXRpb24oKSB7XG4gICAgICAgIGxldCBwcm9taXNlX3Jlc29sdmU6IEZ1bmN0aW9uO1xuICAgICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICBwcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmdhbWUuYWRkXG4gICAgICAgICAgICAudHdlZW4odGhpcy5jYW1lcmFfYW5nbGUpXG4gICAgICAgICAgICAudG8oXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICByYWQ6IERFRkFVTFRfUE9TX0FOR0xFLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgMzAwLFxuICAgICAgICAgICAgICAgIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsXG4gICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLm9uQ29tcGxldGUuYWRkT25jZShwcm9taXNlX3Jlc29sdmUpO1xuICAgICAgICBhd2FpdCBwcm9taXNlO1xuICAgIH1cblxuICAgIHNldF9jaG9vc2luZ19hY3Rpb25fcG9zaXRpb24oKSB7XG4gICAgICAgIHRoaXMuY2hvb3NpbmdfYWN0aW9ucyA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5iYXR0bGVfYmcyLnggPSAwO1xuICAgICAgICB0aGlzLmJhdHRsZV9iZzIuc2NhbGUuc2V0VG8oQUNUSU9OX1BPU19CR19TQ0FMRSwgQUNUSU9OX1BPU19CR19TQ0FMRSk7XG4gICAgICAgIHRoaXMuYmF0dGxlX2JnMi55ID0gLXRoaXMuYmF0dGxlX2JnLmhlaWdodCAqIChBQ1RJT05fUE9TX0JHX1NDQUxFIC0gMSkgKyBCR19ZIC0gQ0hPT1NFX1RBUkdFVF9BTExZX1NISUZUO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zcHJpdGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBzcHJpdGUgPSB0aGlzLnNwcml0ZXNbaV07XG4gICAgICAgICAgICBjb25zdCBpbmRleF9zaGlmdGVkID0gc3ByaXRlLmRhdGEuaXNfQWxseSA/IGkgOiB0aGlzLmVuZW1pZXNfY291bnQgLSAxIC0gKGkgLSB0aGlzLmFsbGllc19jb3VudCk7XG4gICAgICAgICAgICBjb25zdCB4X3NoaWZ0ID0gc3ByaXRlLmRhdGEuaXNfQWxseVxuICAgICAgICAgICAgICAgID8gQUNUSU9OX1BPU19BTExZX1hcbiAgICAgICAgICAgICAgICA6IEFDVElPTl9QT1NfRU5FTVlfQ0VOVEVSX1ggLSAodGhpcy5lbmVtaWVzX2NvdW50ID4+IDEpICogQUNUSU9OX1BPU19TUEFDRV9CRVRXRUVOO1xuXG4gICAgICAgICAgICBjb25zdCBwb3NfeCA9IHhfc2hpZnQgKyBpbmRleF9zaGlmdGVkICogQUNUSU9OX1BPU19TUEFDRV9CRVRXRUVOO1xuICAgICAgICAgICAgY29uc3QgcG9zX3kgPSBzcHJpdGUuZGF0YS5pc19BbGx5ID8gQUNUSU9OX0FMTFlfWSA6IEFDVElPTl9FTkVNWV9ZO1xuXG4gICAgICAgICAgICBzcHJpdGUueCA9IHBvc194O1xuICAgICAgICAgICAgc3ByaXRlLnkgPSBwb3NfeTtcblxuICAgICAgICAgICAgY29uc3QgdGhpc19zY2FsZV94ID0gc3ByaXRlLnNjYWxlLnggKyBNYXRoLnNpZ24oc3ByaXRlLnNjYWxlLngpICogQUNUSU9OX1BPU19TQ0FMRV9BREQ7XG4gICAgICAgICAgICBjb25zdCB0aGlzX3NjYWxlX3kgPSBzcHJpdGUuc2NhbGUueSArIE1hdGguc2lnbihzcHJpdGUuc2NhbGUueSkgKiBBQ1RJT05fUE9TX1NDQUxFX0FERDtcblxuICAgICAgICAgICAgc3ByaXRlLnNjYWxlLnNldFRvKHRoaXNfc2NhbGVfeCwgdGhpc19zY2FsZV95KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlc2V0X3Bvc2l0aW9ucygpIHtcbiAgICAgICAgdGhpcy5iYXR0bGVfYmcyLnNjYWxlLnNldFRvKEJHX0RFRkFVTFRfU0NBTEUsIEJHX0RFRkFVTFRfU0NBTEUpO1xuICAgICAgICB0aGlzLmJhdHRsZV9iZzIueSA9IEJHX1k7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNwcml0ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHNwcml0ZSA9IHRoaXMuc3ByaXRlc1tpXTtcblxuICAgICAgICAgICAgY29uc3QgdGhpc19zY2FsZV94ID0gc3ByaXRlLnNjYWxlLnggLSBNYXRoLnNpZ24oc3ByaXRlLnNjYWxlLngpICogQUNUSU9OX1BPU19TQ0FMRV9BREQ7XG4gICAgICAgICAgICBjb25zdCB0aGlzX3NjYWxlX3kgPSBzcHJpdGUuc2NhbGUueSAtIE1hdGguc2lnbihzcHJpdGUuc2NhbGUueSkgKiBBQ1RJT05fUE9TX1NDQUxFX0FERDtcblxuICAgICAgICAgICAgc3ByaXRlLnNjYWxlLnNldFRvKHRoaXNfc2NhbGVfeCwgdGhpc19zY2FsZV95KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldF9iYXR0bGVfY3Vyc29yc19wb3NpdGlvbih0d2Vlbl90b19wb3M6IGJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IGdyb3VwX2luZm8gPSB0aGlzLnRhcmdldF90eXBlID09PSBhYmlsaXR5X3RhcmdldF90eXBlcy5BTExZID8gdGhpcy5hbGxpZXNfaW5mbyA6IHRoaXMuZW5lbWllc19pbmZvO1xuICAgICAgICBjb25zdCBncm91cF9oYWxmX2xlbmd0aCA9IGdyb3VwX2luZm8ubGVuZ3RoICUgMiA/IGdyb3VwX2luZm8ubGVuZ3RoID4+IDEgOiAoZ3JvdXBfaW5mby5sZW5ndGggPj4gMSkgLSAxO1xuICAgICAgICBjb25zdCBjZW50ZXJfc2hpZnQgPSB0aGlzLnJhbmdlX2N1cnNvcl9wb3NpdGlvbiAtIChSQU5HRVMubGVuZ3RoID4+IDEpO1xuXG4gICAgICAgIHRoaXMuY3Vyc29ycy5mb3JFYWNoKChjdXJzb3Jfc3ByaXRlLCBpKSA9PiB7XG4gICAgICAgICAgICBsZXQgdGFyZ2V0X2luZGV4ID0gaSAtICgodGhpcy5jdXJzb3JzLmxlbmd0aCA+PiAxKSAtIGdyb3VwX2hhbGZfbGVuZ3RoKSArIGNlbnRlcl9zaGlmdDtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldF9pbmZvID0gZ3JvdXBfaW5mb1t0YXJnZXRfaW5kZXhdO1xuXG4gICAgICAgICAgICBpZiAodGFyZ2V0X2luZm8gJiYgIXRhcmdldF9pbmZvLmluc3RhbmNlLmhhc19wZXJtYW5lbnRfc3RhdHVzKHBlcm1hbmVudF9zdGF0dXMuRE9XTkVEKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldF9zcHJpdGUgPSB0YXJnZXRfaW5mby5zcHJpdGU7XG4gICAgICAgICAgICAgICAgY29uc3QgdGhpc19zY2FsZSA9XG4gICAgICAgICAgICAgICAgICAgIEJBVFRMRV9DVVJTT1JfU0NBTEVTW3RoaXMucmFuZ2VfY3Vyc29yX3Bvc2l0aW9uIC0gY2VudGVyX3NoaWZ0IC0gKHRoaXMuY3Vyc29ycy5sZW5ndGggPj4gMSkgKyBpXTtcblxuICAgICAgICAgICAgICAgIGN1cnNvcl9zcHJpdGUuc2NhbGUuc2V0VG8odGhpc19zY2FsZSwgdGhpc19zY2FsZSk7XG4gICAgICAgICAgICAgICAgY3Vyc29yX3Nwcml0ZS5hbHBoYSA9IDE7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJzb3JzX3R3ZWVuc1tpXSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnNvcnNfdHdlZW5zW2ldLnN0b3AoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBkZXN0X3ggPSB0YXJnZXRfc3ByaXRlLng7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVzdF95ID0gdGFyZ2V0X3Nwcml0ZS55IC0gdGFyZ2V0X3Nwcml0ZS5oZWlnaHQgLSA1O1xuXG4gICAgICAgICAgICAgICAgaWYgKHR3ZWVuX3RvX3Bvcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWUuYWRkXG4gICAgICAgICAgICAgICAgICAgICAgICAudHdlZW4oY3Vyc29yX3Nwcml0ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC50byhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlclg6IGRlc3RfeCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogZGVzdF95LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgODUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnNvcnNfdHdlZW5zW2ldID0gdGhpcy5nYW1lLmFkZC50d2VlbihjdXJzb3Jfc3ByaXRlKS50byhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogY3Vyc29yX3Nwcml0ZS55IC0gNCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjdXJzb3Jfc3ByaXRlLmNlbnRlclggPSBkZXN0X3g7XG4gICAgICAgICAgICAgICAgICAgIGN1cnNvcl9zcHJpdGUueSA9IGRlc3RfeTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnNvcnNfdHdlZW5zW2ldID0gdGhpcy5nYW1lLmFkZC50d2VlbihjdXJzb3Jfc3ByaXRlKS50byhcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiBjdXJzb3Jfc3ByaXRlLnkgLSA0LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIDEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC0xLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3Vyc29yX3Nwcml0ZS5hbHBoYSA9IDA7XG4gICAgICAgICAgICAgICAgdGFyZ2V0X2luZGV4ID0gdGFyZ2V0X2luZGV4IDwgMCA/IDAgOiBncm91cF9pbmZvLmxlbmd0aCAtIDE7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXRfc3ByaXRlID0gZ3JvdXBfaW5mb1t0YXJnZXRfaW5kZXhdLnNwcml0ZTtcbiAgICAgICAgICAgICAgICBjdXJzb3Jfc3ByaXRlLmNlbnRlclggPSB0YXJnZXRfc3ByaXRlLng7XG4gICAgICAgICAgICAgICAgY3Vyc29yX3Nwcml0ZS55ID0gdGFyZ2V0X3Nwcml0ZS55IC0gdGFyZ2V0X3Nwcml0ZS5oZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHVuc2V0X2JhdHRsZV9jdXJzb3JzKCkge1xuICAgICAgICB0aGlzLmN1cnNvcnMuZm9yRWFjaCgoc3ByaXRlLCBpKSA9PiB7XG4gICAgICAgICAgICBzcHJpdGUuZGVzdHJveSgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuY3Vyc29yc190d2VlbnNbaV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnNvcnNfdHdlZW5zW2ldLnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY2hvb3NlX3RhcmdldHMoXG4gICAgICAgIHJhbmdlOiBzdHJpbmcgfCBudW1iZXIsXG4gICAgICAgIHRhcmdldF90eXBlOiBzdHJpbmcsXG4gICAgICAgIGFiaWxpdHlfdHlwZTogc3RyaW5nLFxuICAgICAgICBhYmlsaXR5X2Nhc3RlcjogUGxheWVyLFxuICAgICAgICBjYWxsYmFjazogRnVuY3Rpb25cbiAgICApIHtcbiAgICAgICAgdGhpcy5jaG9vc2luZ190YXJnZXRzX2NhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICAgIHRoaXMucmFuZ2VfY3Vyc29yX3Bvc2l0aW9uID0gUkFOR0VTLmxlbmd0aCA+PiAxO1xuXG4gICAgICAgIHRoaXMuYWJpbGl0eV9yYW5nZSA9IHJhbmdlID09PSBcImFsbFwiID8gUkFOR0VTWzBdIDogcmFuZ2U7XG4gICAgICAgIHRoaXMuYWJpbGl0eV90eXBlID0gYWJpbGl0eV90eXBlO1xuICAgICAgICB0aGlzLmFiaWxpdHlfY2FzdGVyID0gYWJpbGl0eV9jYXN0ZXI7XG5cbiAgICAgICAgdGhpcy50YXJnZXRfdHlwZSA9IHRhcmdldF90eXBlO1xuICAgICAgICBpZiAodGhpcy50YXJnZXRfdHlwZSA9PT0gYWJpbGl0eV90YXJnZXRfdHlwZXMuVVNFUikge1xuICAgICAgICAgICAgdGhpcy5zZXRfdGFyZ2V0cygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5nYW1lLmFkZFxuICAgICAgICAgICAgICAgIC50d2Vlbih0aGlzLmJhdHRsZV9ncm91cClcbiAgICAgICAgICAgICAgICAudG8oXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXR0bGVfZ3JvdXAueSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMudGFyZ2V0X3R5cGUgPT09IGFiaWxpdHlfdGFyZ2V0X3R5cGVzLkFMTFlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBDSE9PU0VfVEFSR0VUX0FMTFlfU0hJRlRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBDSE9PU0VfVEFSR0VUX0VORU1ZX1NISUZUKSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgQ0hPT1NJTkdfVEFSR0VUX1NDUkVFTl9TSElGVF9USU1FLFxuICAgICAgICAgICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLFxuICAgICAgICAgICAgICAgICAgICB0cnVlXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIC5vbkNvbXBsZXRlLmFkZE9uY2UoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJzb3JfY291bnQgPSB0aGlzLmFiaWxpdHlfcmFuZ2U7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJzb3JzID0gbmV3IEFycmF5PFBoYXNlci5TcHJpdGU+KGN1cnNvcl9jb3VudCBhcyBudW1iZXIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnNvcnNfdHdlZW5zID0gbmV3IEFycmF5PFBoYXNlci5Ud2Vlbj4oY3Vyc29yX2NvdW50IGFzIG51bWJlcikuZmlsbChudWxsKTtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnNvcl9jb3VudDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnNvcnNbaV0gPSB0aGlzLmJhdHRsZV9ncm91cC5jcmVhdGUoMCwgMCwgXCJiYXR0bGVfY3Vyc29yXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJzb3JzW2ldLmFuaW1hdGlvbnMuYWRkKFwiYW5pbVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3Vyc29yc1tpXS5hbmltYXRpb25zLnBsYXkoXCJhbmltXCIsIDQwLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hvb3NpbmdfdGFyZ2V0cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlX3RhcmdldCgwLCBmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRyb2xzID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuTEVGVCwgb25fZG93bjogdGhpcy5uZXh0X3RhcmdldC5iaW5kKHRoaXMpfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLlJJR0hULCBvbl9kb3duOiB0aGlzLnByZXZpb3VzX3RhcmdldC5iaW5kKHRoaXMpfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkEsIG9uX2Rvd246IHRoaXMuc2V0X3RhcmdldHMuYmluZCh0aGlzKX0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5CLCBvbl9kb3duOiB0aGlzLmNob29zaW5nX3RhcmdldHNfZmluaXNoZWQuYmluZCh0aGlzLCBudWxsKX0sXG4gICAgICAgICAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmNvbnRyb2xfbWFuYWdlci5zZXRfY29udHJvbChjb250cm9scywge2xvb3BfY29uZmlnczoge2hvcml6b250YWw6IHRydWV9fSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjaG9vc2luZ190YXJnZXRzX2ZpbmlzaGVkKHRhcmdldHM6IFRhcmdldFtdKSB7XG4gICAgICAgIHRoaXMuY2hvb3NpbmdfdGFyZ2V0cyA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcy5iYXR0bGVfZ3JvdXApLnRvKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmF0dGxlX2dyb3VwLnkgLVxuICAgICAgICAgICAgICAgICAgICAodGhpcy50YXJnZXRfdHlwZSA9PT0gYWJpbGl0eV90YXJnZXRfdHlwZXMuQUxMWVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBDSE9PU0VfVEFSR0VUX0FMTFlfU0hJRlRcbiAgICAgICAgICAgICAgICAgICAgICAgIDogQ0hPT1NFX1RBUkdFVF9FTkVNWV9TSElGVCksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgQ0hPT1NJTkdfVEFSR0VUX1NDUkVFTl9TSElGVF9USU1FLFxuICAgICAgICAgICAgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLnVuc2V0X2JhdHRsZV9jdXJzb3JzKCk7XG4gICAgICAgIHRoaXMuY2hvb3NpbmdfdGFyZ2V0c19jYWxsYmFjayh0YXJnZXRzKTtcbiAgICB9XG5cbiAgICBwcmV2ZW50X2NhbWVyYV9hbmdsZV9vdmVyZmxvdygpIHtcbiAgICAgICAgdGhpcy5jYW1lcmFfYW5nbGUucmFkID0gcmFuZ2VfMzYwKHRoaXMuY2FtZXJhX2FuZ2xlLnJhZCk7XG4gICAgfVxuXG4gICAgdXBkYXRlX3N0YWdlKCkge1xuICAgICAgICBpZiAodGhpcy5jaG9vc2luZ19hY3Rpb25zKSByZXR1cm47XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgIXRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5pc0Rvd24odGhpcy5kYXRhLmdhbWVwYWQuREVCVUdfQ0FNX1BMVVMpICYmXG4gICAgICAgICAgICB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuaXNEb3duKHRoaXMuZGF0YS5nYW1lcGFkLkRFQlVHX0NBTV9NSU5VUylcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLmNhbWVyYV9hbmdsZS5yYWQgLT0gQ0FNRVJBX1NQRUVEO1xuICAgICAgICAgICAgdGhpcy5iYXR0bGVfYmcueCAtPSBCR19TUEVFRDtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5pc0Rvd24odGhpcy5kYXRhLmdhbWVwYWQuREVCVUdfQ0FNX1BMVVMpICYmXG4gICAgICAgICAgICAhdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmlzRG93bih0aGlzLmRhdGEuZ2FtZXBhZC5ERUJVR19DQU1fTUlOVVMpXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5jYW1lcmFfYW5nbGUucmFkICs9IENBTUVSQV9TUEVFRDtcbiAgICAgICAgICAgIHRoaXMuYmF0dGxlX2JnLnggKz0gQkdfU1BFRUQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkZWx0YSA9IHJhbmdlXzM2MCh0aGlzLmNhbWVyYV9hbmdsZS5yYWQpIC0gcmFuZ2VfMzYwKHRoaXMub2xkX2NhbWVyYV9hbmdsZSk7XG4gICAgICAgICAgICB0aGlzLmJhdHRsZV9iZy54ICs9IEJHX1NQSU5fU1BFRUQgKiB0aGlzLmJhdHRsZV9iZy53aWR0aCAqIGRlbHRhOyAvL3RpZSBiZyB4IHBvc2l0aW9uIHdpdGggY2FtZXJhIGFuZ2xlIHdoZW4gc3BpbmluZ1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vbGRfY2FtZXJhX2FuZ2xlID0gdGhpcy5jYW1lcmFfYW5nbGUucmFkO1xuXG4gICAgICAgIGlmICh0aGlzLmJhdHRsZV9iZy54ID4gdGhpcy5iYXR0bGVfYmcud2lkdGggfHwgdGhpcy5iYXR0bGVfYmcueCA8IC10aGlzLmJhdHRsZV9iZy53aWR0aCkge1xuICAgICAgICAgICAgLy9jaGVjayBiZyB4IHBvc2l0aW9uIHN1cnBsdXNcbiAgICAgICAgICAgIHRoaXMuYmF0dGxlX2JnLnggPSB0aGlzLmJhdHRsZV9iZzIueDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmJhdHRsZV9iZy54ID4gMCkge1xuICAgICAgICAgICAgLy9tYWtlIGJnMiBmb2xsb3cgZGVmYXVsdCBiZ1xuICAgICAgICAgICAgdGhpcy5iYXR0bGVfYmcyLnggPSB0aGlzLmJhdHRsZV9iZy54IC0gdGhpcy5iYXR0bGVfYmcud2lkdGg7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5iYXR0bGVfYmcueCA8IDApIHtcbiAgICAgICAgICAgIHRoaXMuYmF0dGxlX2JnMi54ID0gdGhpcy5iYXR0bGVfYmcueCArIHRoaXMuYmF0dGxlX2JnLndpZHRoO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgTWF0aC5zaW4odGhpcy5jYW1lcmFfYW5nbGUucmFkKSA+IDAgJiZcbiAgICAgICAgICAgIHRoaXMuYmF0dGxlX2dyb3VwLmdldENoaWxkSW5kZXgodGhpcy5ncm91cF9hbGxpZXMpIDwgdGhpcy5iYXR0bGVfZ3JvdXAuZ2V0Q2hpbGRJbmRleCh0aGlzLmdyb3VwX2VuZW1pZXMpXG4gICAgICAgICkge1xuICAgICAgICAgICAgLy9jaGVjayBwYXJ0eSBhbmQgZW5lbXkgeiBpbmRleFxuICAgICAgICAgICAgdGhpcy5iYXR0bGVfZ3JvdXAuc3dhcENoaWxkcmVuKHRoaXMuZ3JvdXBfZW5lbWllcywgdGhpcy5ncm91cF9hbGxpZXMpO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgTWF0aC5zaW4odGhpcy5jYW1lcmFfYW5nbGUucmFkKSA8IDAgJiZcbiAgICAgICAgICAgIHRoaXMuYmF0dGxlX2dyb3VwLmdldENoaWxkSW5kZXgodGhpcy5ncm91cF9hbGxpZXMpID4gdGhpcy5iYXR0bGVfZ3JvdXAuZ2V0Q2hpbGRJbmRleCh0aGlzLmdyb3VwX2VuZW1pZXMpXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5iYXR0bGVfZ3JvdXAuc3dhcENoaWxkcmVuKHRoaXMuZ3JvdXBfZW5lbWllcywgdGhpcy5ncm91cF9hbGxpZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKE1hdGguY29zKHRoaXMuY2FtZXJhX2FuZ2xlLnJhZCkgPCAwICYmIHRoaXMuZmlyc3RfYWxseV9jaGFyLnogPiB0aGlzLmxhc3RfYWxseV9jaGFyLnopIHtcbiAgICAgICAgICAgIC8vY2hlY2sgYWxseSB6IGluZGV4IG9yZGVyXG4gICAgICAgICAgICB0aGlzLmdyb3VwX2FsbGllcy5yZXZlcnNlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoTWF0aC5jb3ModGhpcy5jYW1lcmFfYW5nbGUucmFkKSA+IDAgJiYgdGhpcy5maXJzdF9hbGx5X2NoYXIueiA8IHRoaXMubGFzdF9hbGx5X2NoYXIueikge1xuICAgICAgICAgICAgdGhpcy5ncm91cF9hbGxpZXMucmV2ZXJzZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKE1hdGguY29zKHRoaXMuY2FtZXJhX2FuZ2xlLnJhZCkgPCAwICYmIHRoaXMuZmlyc3RfZW5lbXlfY2hhci56IDwgdGhpcy5sYXN0X2VuZW15X2NoYXIueikge1xuICAgICAgICAgICAgLy9jaGVjayBlbmVteSB6IGluZGV4IG9yZGVyXG4gICAgICAgICAgICB0aGlzLmdyb3VwX2VuZW1pZXMucmV2ZXJzZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKE1hdGguY29zKHRoaXMuY2FtZXJhX2FuZ2xlLnJhZCkgPiAwICYmIHRoaXMuZmlyc3RfZW5lbXlfY2hhci56ID4gdGhpcy5sYXN0X2VuZW15X2NoYXIueikge1xuICAgICAgICAgICAgdGhpcy5ncm91cF9lbmVtaWVzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudXBkYXRlX3Nwcml0ZV9wcm9wZXJ0aWVzKCk7XG4gICAgfVxuXG4gICAgdXBkYXRlX3Nwcml0ZV9wcm9wZXJ0aWVzKCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3ByaXRlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3Qgc3ByaXRlID0gdGhpcy5zcHJpdGVzW2ldO1xuICAgICAgICAgICAgY29uc3QgcmVsYXRpdmVfYW5nbGUgPSBzcHJpdGUuZGF0YS5pc19BbGx5ID8gdGhpcy5jYW1lcmFfYW5nbGUucmFkIDogdGhpcy5jYW1lcmFfYW5nbGUucmFkICsgTWF0aC5QSTtcblxuICAgICAgICAgICAgY29uc3QgYW5nbGVfcG9zaXRpb24gPSBCYXR0bGVTdGFnZS5nZXRfYW5nbGUocmVsYXRpdmVfYW5nbGUpO1xuICAgICAgICAgICAgY29uc3QgcG9zX3ggPSBCYXR0bGVTdGFnZS5lbGxpcHNlX3Bvc2l0aW9uKHNwcml0ZSwgYW5nbGVfcG9zaXRpb24sIHRydWUpO1xuICAgICAgICAgICAgY29uc3QgcG9zX3kgPSBCYXR0bGVTdGFnZS5lbGxpcHNlX3Bvc2l0aW9uKHNwcml0ZSwgYW5nbGVfcG9zaXRpb24sIGZhbHNlKTtcblxuICAgICAgICAgICAgY29uc3Qgc2hpZnRfZnJvbV9taWRkbGUgPSBzcHJpdGUuZGF0YS5pc19BbGx5ID8gdGhpcy5zaGlmdF9mcm9tX21pZGRsZV9hbGx5IDogdGhpcy5zaGlmdF9mcm9tX21pZGRsZV9lbmVteTtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4X3NoaWZ0ZWQgPSBzcHJpdGUuZGF0YS5pc19BbGx5ID8gaSA6IGkgLSB0aGlzLmFsbGllc19jb3VudDtcblxuICAgICAgICAgICAgc3ByaXRlLnggPVxuICAgICAgICAgICAgICAgIHBvc194ICtcbiAgICAgICAgICAgICAgICAoU1BBQ0VfQkVUV0VFTl9DSEFSUyAqIGluZGV4X3NoaWZ0ZWQgLSBzaGlmdF9mcm9tX21pZGRsZSArIChTUEFDRV9CRVRXRUVOX0NIQVJTID4+IDEpKSAqXG4gICAgICAgICAgICAgICAgICAgIE1hdGguc2luKHJlbGF0aXZlX2FuZ2xlKTsgLy9zaGlmdCBwYXJ0eSBwbGF5ZXJzIGZyb20gYmFzZSBwb2ludFxuICAgICAgICAgICAgc3ByaXRlLnkgPSBwb3NfeTtcblxuICAgICAgICAgICAgY29uc3QgaW5mbyA9IHNwcml0ZS5kYXRhLmlzX0FsbHkgPyB0aGlzLmFsbGllc19pbmZvW2luZGV4X3NoaWZ0ZWRdIDogdGhpcy5lbmVtaWVzX2luZm9baW5kZXhfc2hpZnRlZF07XG4gICAgICAgICAgICBjb25zdCBzY2FsZSA9IEJhdHRsZVN0YWdlLmdldF9zY2FsZShpbmZvLnNjYWxlLCByZWxhdGl2ZV9hbmdsZSk7XG4gICAgICAgICAgICBzcHJpdGUuc2NhbGUuc2V0VG8oc2NhbGUsIHNjYWxlKTtcblxuICAgICAgICAgICAgaWYgKE1hdGguc2luKHJlbGF0aXZlX2FuZ2xlKSA+IDAgJiYgIXNwcml0ZS5hbmltYXRpb25zLmN1cnJlbnRBbmltLm5hbWUuZW5kc1dpdGgoXCJiYWNrXCIpKSB7XG4gICAgICAgICAgICAgICAgLy9jaGFuZ2UgdGV4dHVyZSBpbiBmdW5jdGlvbiBvZiBwb3NpdGlvblxuICAgICAgICAgICAgICAgIHNwcml0ZS5hbmltYXRpb25zLnBsYXkoc3ByaXRlLmFuaW1hdGlvbnMuY3VycmVudEFuaW0ubmFtZS5yZXBsYWNlKFwiZnJvbnRcIiwgXCJiYWNrXCIpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoTWF0aC5zaW4ocmVsYXRpdmVfYW5nbGUpIDw9IDAgJiYgIXNwcml0ZS5hbmltYXRpb25zLmN1cnJlbnRBbmltLm5hbWUuZW5kc1dpdGgoXCJmcm9udFwiKSkge1xuICAgICAgICAgICAgICAgIHNwcml0ZS5hbmltYXRpb25zLnBsYXkoc3ByaXRlLmFuaW1hdGlvbnMuY3VycmVudEFuaW0ubmFtZS5yZXBsYWNlKFwiYmFja1wiLCBcImZyb250XCIpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKE1hdGguY29zKHJlbGF0aXZlX2FuZ2xlKSA+IDAgJiYgc3ByaXRlLnNjYWxlLnggPCAwKSB7XG4gICAgICAgICAgICAgICAgLy9jaGFuZ2Ugc2lkZSBpbiBmdW5jdGlvbiBvZiBwb3NpdGlvblxuICAgICAgICAgICAgICAgIHNwcml0ZS5zY2FsZS5zZXRUbyhzcHJpdGUuc2NhbGUueCwgc3ByaXRlLnNjYWxlLnkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChNYXRoLmNvcyhyZWxhdGl2ZV9hbmdsZSkgPD0gMCAmJiBzcHJpdGUuc2NhbGUueCA+IDApIHtcbiAgICAgICAgICAgICAgICBzcHJpdGUuc2NhbGUuc2V0VG8oLXNwcml0ZS5zY2FsZS54LCBzcHJpdGUuc2NhbGUueSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1bnNldF9zdGFnZShvbl9mYWRlX2NvbXBsZXRlOiBGdW5jdGlvbiwgb25fZmxhc2hfY29tcGxldGU6IEZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMuZ2FtZS5jYW1lcmEuZmFkZSgpO1xuICAgICAgICB0aGlzLmdhbWUuY2FtZXJhLm9uRmFkZUNvbXBsZXRlLmFkZE9uY2UoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKG9uX2ZhZGVfY29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICBvbl9mYWRlX2NvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmJhdHRsZV9ncm91cC5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLnVwcGVyX3JlY3QuaGVpZ2h0ID0gdGhpcy5sb3dlcl9yZWN0LmhlaWdodCA9IG51bWJlcnMuR0FNRV9IRUlHSFQgPj4gMTtcbiAgICAgICAgICAgIHRoaXMudXBwZXJfcmVjdC55ID0gMDtcbiAgICAgICAgICAgIHRoaXMubG93ZXJfcmVjdC55ID0gbnVtYmVycy5HQU1FX0hFSUdIVCA+PiAxO1xuICAgICAgICAgICAgY29uc3QgZmFkZV90aW1lID0gMzAwO1xuICAgICAgICAgICAgdGhpcy5nYW1lLmNhbWVyYS5yZXNldEZYKCk7XG4gICAgICAgICAgICB0aGlzLmdhbWUuYWRkXG4gICAgICAgICAgICAgICAgLnR3ZWVuKHRoaXMudXBwZXJfcmVjdClcbiAgICAgICAgICAgICAgICAudG8oXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZmFkZV90aW1lLFxuICAgICAgICAgICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLFxuICAgICAgICAgICAgICAgICAgICB0cnVlXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIC5vbkNvbXBsZXRlLmFkZE9uY2UoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAob25fZmxhc2hfY29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uX2ZsYXNoX2NvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jcm9wX2dyb3VwLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcy5sb3dlcl9yZWN0KS50byhcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMCxcbiAgICAgICAgICAgICAgICAgICAgeTogbnVtYmVycy5HQU1FX0hFSUdIVCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZhZGVfdGltZSxcbiAgICAgICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLFxuICAgICAgICAgICAgICAgIHRydWVcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgIH1cblxuICAgIHN0YXRpYyBlbGxpcHNlKGFuZ2xlOiBudW1iZXIsIGE6IG51bWJlciwgYjogbnVtYmVyKSB7XG4gICAgICAgIC8vZWxsaXBzZSBmb3JtdWxhXG4gICAgICAgIGEgPSBhID09PSB1bmRlZmluZWQgPyBTRU1JX01BSk9SX0FYSVMgOiBhO1xuICAgICAgICBiID0gYiA9PT0gdW5kZWZpbmVkID8gU0VNSV9NSU5PUl9BWElTIDogYjtcbiAgICAgICAgcmV0dXJuIChhICogYikgLyBNYXRoLnNxcnQoTWF0aC5wb3coYiAqIE1hdGguY29zKGFuZ2xlKSwgMikgKyBNYXRoLnBvdyhhICogTWF0aC5zaW4oYW5nbGUpLCAyKSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGVsbGlwc2VfcG9zaXRpb24oc3ByaXRlOiBQaGFzZXIuU3ByaXRlLCBhbmdsZTogbnVtYmVyLCBpc194OiBib29sZWFuKSB7XG4gICAgICAgIGlmIChpc194KSB7XG4gICAgICAgICAgICBjb25zdCBhID0gc3ByaXRlLmVsbGlwc2VzX3NlbWlfbWFqb3I7XG4gICAgICAgICAgICByZXR1cm4gQ0VOVEVSX1ggKyBCYXR0bGVTdGFnZS5lbGxpcHNlKGFuZ2xlLCBhLCBTRU1JX01JTk9SX0FYSVMpICogTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgYiA9IHNwcml0ZS5lbGxpcHNlc19zZW1pX21pbm9yO1xuICAgICAgICAgICAgcmV0dXJuIENFTlRFUl9ZICsgQmF0dGxlU3RhZ2UuZWxsaXBzZShhbmdsZSwgU0VNSV9NQUpPUl9BWElTLCBiKSAqIE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBnZXRfYW5nbGUoYW5nbGU6IG51bWJlcikge1xuICAgICAgICAvL2VxdWlkaXN0YW50IGVsbGlwc2UgYW5nbGUgZm9ybXVsYTogaHR0cHM6Ly9tYXRoLnN0YWNrZXhjaGFuZ2UuY29tL2EvMTEyMzQ0OC8yMDI0MzVcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGFuZ2xlICtcbiAgICAgICAgICAgIE1hdGguYXRhbihcbiAgICAgICAgICAgICAgICAoKFNFTUlfTUlOT1JfQVhJUyAtIFNFTUlfTUFKT1JfQVhJUykgKiBNYXRoLnRhbihhbmdsZSkpIC9cbiAgICAgICAgICAgICAgICAgICAgKFNFTUlfTUFKT1JfQVhJUyArIFNFTUlfTUlOT1JfQVhJUyAqIE1hdGgucG93KE1hdGgudGFuKGFuZ2xlKSwgMikpXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldF9zY2FsZShkZWZhdWx0X3NjYWxlOiBudW1iZXIsIGFuZ2xlOiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIChNYXRoLnNpbihhbmdsZSkgLyA3ICsgU0NBTEVfRkFDVE9SKSAqIGRlZmF1bHRfc2NhbGU7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtUZXh0T2JqLCBXaW5kb3d9IGZyb20gXCIuLi9XaW5kb3dcIjtcbmltcG9ydCB7b3JkZXJlZF9lbGVtZW50c30gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gXCIuLi9tYWdpY19udW1iZXJzXCI7XG5pbXBvcnQge0RqaW5ufSBmcm9tIFwiLi4vRGppbm5cIjtcbmltcG9ydCB7TWFpbkNoYXJ9IGZyb20gXCIuLi9NYWluQ2hhclwiO1xuaW1wb3J0IHtHb2xkZW5TdW59IGZyb20gXCIuLi9Hb2xkZW5TdW5cIjtcbmltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuXG5jb25zdCBXSURUSF9QRVJfQ0hBUiA9IDQ4O1xuY29uc3QgU1RBVFVTX1dJTl9IRUlHSFQgPSAzNTtcbmNvbnN0IFNUQVRVU19XSU5fSEVJR0hUX0NPTVBBQ1QgPSAyNDtcbmNvbnN0IFNUQVRVU19CQVJfV0lEVEggPSA0MDtcbmNvbnN0IFNUQVRVU19CQVJfSEVJR0hUID0gMztcblxuY29uc3QgU1RBVFVTX0JBUl9DT0xPUl9HT09EID0gbnVtYmVycy5CTFVFX0ZPTlRfQ09MT1I7XG5jb25zdCBTVEFUVVNfQkFSX0NPTE9SX0JBRCA9IG51bWJlcnMuUkVEX0ZPTlRfQ09MT1I7XG5cbmNvbnN0IE1BWF9DSEFSU19OVU1CRVIgPSA0O1xuY29uc3QgU1RBVF9YID0gMjY7XG5jb25zdCBOQU1FX1kgPSA4O1xuY29uc3QgTkFNRV9ZX0NPTVBBQ1QgPSAwO1xuXG5jb25zdCBJTklUSUFMX1BBRERJTkdfWCA9IDg7XG5jb25zdCBESklOTl9JTkZPX1dJRFRIID0gNDA7XG5cbmNvbnN0IFNUQVJTX1ggPSBbMCwgMTZdO1xuY29uc3QgU1RBUlNfWSA9IFswLCA4XTtcblxuY29uc3QgU1RBTkRCWV9DT1VOVF9YID0gWzE2ICsgNSwgMzIgKyA1XTtcbmNvbnN0IFNUQU5EQllfQ09VTlRfU0hJRlRfWSA9IFs4LCAxNl07XG5cbmNvbnN0IElOSVRJQUxfUEFERElOR19fREpJTk5JX1ggPSA5O1xuY29uc3QgSU5JVElBTF9QQURESU5HX19ESklOTklfWSA9IDk7XG5cbnR5cGUgSW5mb1Nwcml0ZSA9IHtcbiAgICBncm91cDogUGhhc2VyLkdyb3VwO1xuICAgIG5hbWU6IFRleHRPYmo7XG4gICAgaHBfYmFyX2dyYXBoaWNzOiBQaGFzZXIuR3JhcGhpY3M7XG4gICAgaHBfYmFyX2RhbWFnZV9ncmFwaGljczogUGhhc2VyLkdyYXBoaWNzO1xuICAgIGhwX2hlYWRlcjogVGV4dE9iajtcbiAgICBocDogVGV4dE9iajtcbiAgICBwcF9iYXJfZ3JhcGhpY3M6IFBoYXNlci5HcmFwaGljcztcbiAgICBwcF9iYXJfZGFtYWdlX2dyYXBoaWNzOiBQaGFzZXIuR3JhcGhpY3M7XG4gICAgcHBfaGVhZGVyOiBUZXh0T2JqO1xuICAgIHBwOiBUZXh0T2JqO1xufTtcblxuLypBIHdpbmRvdyBkaXNwbGF5aW5nIHRoZSBjaGFyYWN0ZXIncyBuYW1lIGFuZCBIUC9QUFxuVGhlIG5vcm1hbCB2ZXJzaW9uIGlzIHVzZWQgaW4gdGhlIGZpZWxkIG1lbnVcblRoZSBjb21wYWN0ZWQgdmVyc2lvbiBhbmQgRGppbm4gaW5mb3JtYXRpb24gYXJlIGRpc3BsYXllZCBpbiBiYXR0bGVcblxuSW5wdXQ6IGdhbWUgW1BoYXNlcjpHYW1lXSAtIFJlZmVyZW5jZSB0byB0aGUgcnVubmluZyBnYW1lIG9iamVjdFxuICAgICAgIGRhdGEgW0dvbGRlblN1bl0gLSBSZWZlcmVuY2UgdG8gdGhlIG1haW4gSlMgQ2xhc3MgaW5zdGFuY2VcbiAgICAgICBkamlubl9pbmZvIFtib29sZWFuXSAtIElmIHRydWUsIHdpbGwgZGlzcGxheSBEamlubiBvbiBzdGFuZGJ5XG4gICAgICAgY29tcGFjdCBbYm9vbGVhbl0gLSBJZiB0cnVlLCBkaXNwbGF5cyB0aGUgY29tcGFjdGVkIHZlcnNpb24qL1xuZXhwb3J0IGNsYXNzIENoYXJzU3RhdHVzV2luZG93IHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6IEdvbGRlblN1bjtcblxuICAgIHB1YmxpYyBkamlubmlfaW5mbzogYm9vbGVhbjtcbiAgICBwdWJsaWMgY29tcGFjdDogYm9vbGVhbjtcbiAgICBwdWJsaWMgbmFtZV95OiBudW1iZXI7XG5cbiAgICBwdWJsaWMgc3RhdHVzX3dpbl9oZWlnaHQ6IG51bWJlcjtcbiAgICBwdWJsaWMgc3RhdHVzX3dpbl93aWR0aDogbnVtYmVyO1xuICAgIHB1YmxpYyBzdGF0dXNfd2luX3g6IG51bWJlcjtcbiAgICBwdWJsaWMgc3RhdHVzX3dpbmRvdzogV2luZG93O1xuXG4gICAgcHVibGljIGluZm9fc3ByaXRlczoge1tjaGFyX2tleTogc3RyaW5nXTogSW5mb1Nwcml0ZX07XG4gICAgcHVibGljIHN0YXJzX2dyb3VwOiBQaGFzZXIuR3JvdXA7XG4gICAgcHVibGljIHN0YW5kYnlfY291bnRfdGV4dDoge1tlbGVtZW50OiBzdHJpbmddOiBUZXh0T2JqfTtcbiAgICBwdWJsaWMgc3RhbmRieV9kamlubmk6IHtbZWxlbWVudDogc3RyaW5nXTogbnVtYmVyfTtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWU6IFBoYXNlci5HYW1lLCBkYXRhOiBHb2xkZW5TdW4sIGRqaW5uaV9pbmZvOiBib29sZWFuID0gZmFsc2UsIGNvbXBhY3Q6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuXG4gICAgICAgIHRoaXMuZGppbm5pX2luZm8gPSBkamlubmlfaW5mbztcbiAgICAgICAgdGhpcy5jb21wYWN0ID0gY29tcGFjdDtcbiAgICAgICAgdGhpcy5uYW1lX3kgPSBOQU1FX1k7XG5cbiAgICAgICAgaWYgKHRoaXMuY29tcGFjdCkge1xuICAgICAgICAgICAgdGhpcy5uYW1lX3kgPSBOQU1FX1lfQ09NUEFDVDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0YXR1c193aW5faGVpZ2h0ID0gU1RBVFVTX1dJTl9IRUlHSFQ7XG4gICAgICAgIGlmICh0aGlzLmNvbXBhY3QpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzX3dpbl9oZWlnaHQgPSBTVEFUVVNfV0lOX0hFSUdIVF9DT01QQUNUO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY2hhcnNfbnVtYmVyID0gXy5jbGFtcCh0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnMubGVuZ3RoLCBNQVhfQ0hBUlNfTlVNQkVSKTtcbiAgICAgICAgdGhpcy5zdGF0dXNfd2luX3dpZHRoID0gY2hhcnNfbnVtYmVyICogV0lEVEhfUEVSX0NIQVIgKyAoSU5JVElBTF9QQURESU5HX1ggPj4gMSk7XG4gICAgICAgIHRoaXMuc3RhdHVzX3dpbl94ID1cbiAgICAgICAgICAgIG51bWJlcnMuR0FNRV9XSURUSCAtIHRoaXMuc3RhdHVzX3dpbl93aWR0aCAtIG51bWJlcnMuSU5TSURFX0JPUkRFUl9XSURUSCAtIG51bWJlcnMuT1VUU0lERV9CT1JERVJfV0lEVEg7XG4gICAgICAgIHRoaXMuc3RhdHVzX3dpbmRvdyA9IG5ldyBXaW5kb3coXG4gICAgICAgICAgICB0aGlzLmdhbWUsXG4gICAgICAgICAgICB0aGlzLnN0YXR1c193aW5feCxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICB0aGlzLnN0YXR1c193aW5fd2lkdGgsXG4gICAgICAgICAgICB0aGlzLnN0YXR1c193aW5faGVpZ2h0LFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5pbmZvX3Nwcml0ZXMgPSB7fTtcblxuICAgICAgICB0aGlzLnNldF9jaGFyc19pbmZvKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuZGppbm5pX2luZm8pIHtcbiAgICAgICAgICAgIHRoaXMuc3RhbmRieV9jb3VudF90ZXh0ID0ge307XG4gICAgICAgICAgICB0aGlzLnN0YXJzX2dyb3VwID0gdGhpcy5nYW1lLmFkZC5ncm91cCgpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcmRlcmVkX2VsZW1lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IG9yZGVyZWRfZWxlbWVudHNbaV07XG4gICAgICAgICAgICAgICAgY29uc3QgeCA9IGkgJSAyLFxuICAgICAgICAgICAgICAgICAgICB5ID0gKyhpID4gMSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJzX2dyb3VwLmNyZWF0ZShTVEFSU19YW3hdLCBTVEFSU19ZW3ldLCBlbGVtZW50ICsgXCJfc3RhclwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YW5kYnlfY291bnRfdGV4dFtlbGVtZW50XSA9IHRoaXMuc3RhdHVzX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgICAgICAgICAgU1RBTkRCWV9DT1VOVF9YW3hdLFxuICAgICAgICAgICAgICAgICAgICBTVEFOREJZX0NPVU5UX1NISUZUX1lbeV0sXG4gICAgICAgICAgICAgICAgICAgIHRydWVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zdGF0dXNfd2luZG93LmFkZF9zcHJpdGVfdG9fZ3JvdXAodGhpcy5zdGFyc19ncm91cCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKlVwZGF0ZXMgdGhlIHdpbmRvdydzIHBvc2l0aW9uXG5cbiAgICBJbnB1dDogZm9yY2UgW2Jvb2xlYW5dID0gSWYgdHJ1ZSwgZm9yY2VzIGFuIHVwZGF0ZSovXG4gICAgdXBkYXRlX3Bvc2l0aW9uKGZvcmNlID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5zdGF0dXNfd2luZG93LnVwZGF0ZShmb3JjZSk7XG4gICAgfVxuXG4gICAgLypTZXRzIHRoZSBjaGFyYWN0ZXJzJyBpbmZvcm1hdGlvbiBhbmQgY3JlYXRlcyB0aGUgZ3JhcGhpY3NcbiAgICBSZW1vdmVzIHNwcml0ZXMgZnJvbSB0aGUgV2luZG93IGdyb3VwIGFuZCBnaXZlcyB0aGVtIHRvIHRoZSBpbnRlcm5hbCBncm91cCovXG4gICAgc2V0X2NoYXJzX2luZm8oKSB7XG4gICAgICAgIGNvbnN0IGNoYXJzX2xpc3QgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnMuc2xpY2UoMCwgTUFYX0NIQVJTX05VTUJFUik7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hhcnNfbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgbGV0IGluZm9fc3ByaXRlc19vYmo6IEluZm9TcHJpdGUgPSB7XG4gICAgICAgICAgICAgICAgZ3JvdXA6IG51bGwsXG4gICAgICAgICAgICAgICAgbmFtZTogbnVsbCxcbiAgICAgICAgICAgICAgICBocF9iYXJfZ3JhcGhpY3M6IG51bGwsXG4gICAgICAgICAgICAgICAgaHBfYmFyX2RhbWFnZV9ncmFwaGljczogbnVsbCxcbiAgICAgICAgICAgICAgICBocF9oZWFkZXI6IG51bGwsXG4gICAgICAgICAgICAgICAgaHA6IG51bGwsXG4gICAgICAgICAgICAgICAgcHBfYmFyX2dyYXBoaWNzOiBudWxsLFxuICAgICAgICAgICAgICAgIHBwX2Jhcl9kYW1hZ2VfZ3JhcGhpY3M6IG51bGwsXG4gICAgICAgICAgICAgICAgcHBfaGVhZGVyOiBudWxsLFxuICAgICAgICAgICAgICAgIHBwOiBudWxsLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3QgY2hhciA9IGNoYXJzX2xpc3RbaV07XG4gICAgICAgICAgICBjb25zdCBiYXNlX3hfcG9zID0gaSAqIFdJRFRIX1BFUl9DSEFSICsgSU5JVElBTF9QQURESU5HX1g7XG4gICAgICAgICAgICBjb25zdCBncm91cF9rZXkgPSBjaGFyLmtleV9uYW1lICsgXCJfc3RhdHVzXCI7XG5cbiAgICAgICAgICAgIGluZm9fc3ByaXRlc19vYmouZ3JvdXAgPSB0aGlzLnN0YXR1c193aW5kb3cuZGVmaW5lX2ludGVybmFsX2dyb3VwKGdyb3VwX2tleSk7XG4gICAgICAgICAgICBpbmZvX3Nwcml0ZXNfb2JqLm5hbWUgPSB0aGlzLnN0YXR1c193aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICAgICAgY2hhci5uYW1lLFxuICAgICAgICAgICAgICAgIGJhc2VfeF9wb3MsXG4gICAgICAgICAgICAgICAgdGhpcy5uYW1lX3ksXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0dXNfd2luZG93LmZvbnRfY29sb3IsXG4gICAgICAgICAgICAgICAgdGhpcy5jb21wYWN0LFxuICAgICAgICAgICAgICAgIGdyb3VwX2tleVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgbGV0IHlfcG9zID0gdGhpcy5uYW1lX3kgKyBudW1iZXJzLkZPTlRfU0laRTtcbiAgICAgICAgICAgIGxldCB5X3Bvc19iYXIgPSB5X3BvcyArIG51bWJlcnMuRk9OVF9TSVpFIC0gU1RBVFVTX0JBUl9IRUlHSFQ7XG5cbiAgICAgICAgICAgIGluZm9fc3ByaXRlc19vYmouaHBfYmFyX2dyYXBoaWNzID0gdGhpcy5nYW1lLmFkZC5ncmFwaGljcyhiYXNlX3hfcG9zLCB5X3Bvc19iYXIpO1xuICAgICAgICAgICAgaW5mb19zcHJpdGVzX29iai5ocF9iYXJfZ3JhcGhpY3MuYmVnaW5GaWxsKFNUQVRVU19CQVJfQ09MT1JfR09PRCwgMSk7XG4gICAgICAgICAgICBpbmZvX3Nwcml0ZXNfb2JqLmhwX2Jhcl9ncmFwaGljcy5kcmF3UmVjdCgwLCAwLCBTVEFUVVNfQkFSX1dJRFRILCBTVEFUVVNfQkFSX0hFSUdIVCk7XG4gICAgICAgICAgICBpbmZvX3Nwcml0ZXNfb2JqLmhwX2Jhcl9ncmFwaGljcy5lbmRGaWxsKCk7XG4gICAgICAgICAgICBpbmZvX3Nwcml0ZXNfb2JqLmdyb3VwLmFkZChpbmZvX3Nwcml0ZXNfb2JqLmhwX2Jhcl9ncmFwaGljcyk7XG5cbiAgICAgICAgICAgIGluZm9fc3ByaXRlc19vYmouaHBfYmFyX2RhbWFnZV9ncmFwaGljcyA9IHRoaXMuZ2FtZS5hZGQuZ3JhcGhpY3MoMCwgMCk7XG4gICAgICAgICAgICBpbmZvX3Nwcml0ZXNfb2JqLmhwX2Jhcl9kYW1hZ2VfZ3JhcGhpY3MuZGF0YS5kZWZhdWx0X3kgPSB5X3Bvc19iYXI7XG4gICAgICAgICAgICBpbmZvX3Nwcml0ZXNfb2JqLmdyb3VwLmFkZChpbmZvX3Nwcml0ZXNfb2JqLmhwX2Jhcl9kYW1hZ2VfZ3JhcGhpY3MpO1xuXG4gICAgICAgICAgICBjb25zdCB4X251bWJlcl9wb3MgPSBiYXNlX3hfcG9zICsgU1RBVF9YO1xuXG4gICAgICAgICAgICBpbmZvX3Nwcml0ZXNfb2JqLmhwX2hlYWRlciA9IHRoaXMuc3RhdHVzX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgICAgICBcIkhQXCIsXG4gICAgICAgICAgICAgICAgYmFzZV94X3BvcyxcbiAgICAgICAgICAgICAgICB5X3BvcyxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXR1c193aW5kb3cuZm9udF9jb2xvcixcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICBncm91cF9rZXlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpbmZvX3Nwcml0ZXNfb2JqLmhwID0gdGhpcy5zdGF0dXNfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgICAgIGNoYXIuY3VycmVudF9ocC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIHhfbnVtYmVyX3BvcyxcbiAgICAgICAgICAgICAgICB5X3BvcyxcbiAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdHVzX3dpbmRvdy5mb250X2NvbG9yLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIGdyb3VwX2tleVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgeV9wb3MgPSB0aGlzLm5hbWVfeSArIDIgKiBudW1iZXJzLkZPTlRfU0laRTtcbiAgICAgICAgICAgIHlfcG9zX2JhciA9IHlfcG9zICsgbnVtYmVycy5GT05UX1NJWkUgLSBTVEFUVVNfQkFSX0hFSUdIVDtcblxuICAgICAgICAgICAgaW5mb19zcHJpdGVzX29iai5wcF9iYXJfZ3JhcGhpY3MgPSB0aGlzLmdhbWUuYWRkLmdyYXBoaWNzKGJhc2VfeF9wb3MsIHlfcG9zX2Jhcik7XG4gICAgICAgICAgICBpbmZvX3Nwcml0ZXNfb2JqLnBwX2Jhcl9ncmFwaGljcy5iZWdpbkZpbGwoU1RBVFVTX0JBUl9DT0xPUl9HT09ELCAxKTtcbiAgICAgICAgICAgIGluZm9fc3ByaXRlc19vYmoucHBfYmFyX2dyYXBoaWNzLmRyYXdSZWN0KDAsIDAsIFNUQVRVU19CQVJfV0lEVEgsIFNUQVRVU19CQVJfSEVJR0hUKTtcbiAgICAgICAgICAgIGluZm9fc3ByaXRlc19vYmoucHBfYmFyX2dyYXBoaWNzLmVuZEZpbGwoKTtcblxuICAgICAgICAgICAgaW5mb19zcHJpdGVzX29iai5ncm91cC5hZGQoaW5mb19zcHJpdGVzX29iai5wcF9iYXJfZ3JhcGhpY3MpO1xuXG4gICAgICAgICAgICBpbmZvX3Nwcml0ZXNfb2JqLnBwX2Jhcl9kYW1hZ2VfZ3JhcGhpY3MgPSB0aGlzLmdhbWUuYWRkLmdyYXBoaWNzKDAsIDApO1xuICAgICAgICAgICAgaW5mb19zcHJpdGVzX29iai5wcF9iYXJfZGFtYWdlX2dyYXBoaWNzLmRhdGEuZGVmYXVsdF95ID0geV9wb3NfYmFyO1xuXG4gICAgICAgICAgICBpbmZvX3Nwcml0ZXNfb2JqLmdyb3VwLmFkZChpbmZvX3Nwcml0ZXNfb2JqLnBwX2Jhcl9kYW1hZ2VfZ3JhcGhpY3MpO1xuXG4gICAgICAgICAgICBpbmZvX3Nwcml0ZXNfb2JqLnBwX2hlYWRlciA9IHRoaXMuc3RhdHVzX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgICAgICBcIlBQXCIsXG4gICAgICAgICAgICAgICAgYmFzZV94X3BvcyxcbiAgICAgICAgICAgICAgICB5X3BvcyxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXR1c193aW5kb3cuZm9udF9jb2xvcixcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICBncm91cF9rZXlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpbmZvX3Nwcml0ZXNfb2JqLnBwID0gdGhpcy5zdGF0dXNfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgICAgIGNoYXIuY3VycmVudF9wcC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIHhfbnVtYmVyX3BvcyxcbiAgICAgICAgICAgICAgICB5X3BvcyxcbiAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdHVzX3dpbmRvdy5mb250X2NvbG9yLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIGdyb3VwX2tleVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgdGhpcy5pbmZvX3Nwcml0ZXNbY2hhci5rZXlfbmFtZV0gPSBpbmZvX3Nwcml0ZXNfb2JqO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypVcGRhdGVzIHRoZSBpbmZvcm1hdGlvbiBkaXNwbGF5ZWQqL1xuICAgIHVwZGF0ZV9jaGFyc19pbmZvKCkge1xuICAgICAgICBsZXQgc2hvd19kamlubl9pbmZvID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLmRqaW5uaV9pbmZvKSB7XG4gICAgICAgICAgICB0aGlzLnN0YW5kYnlfZGppbm5pID0gRGppbm4uZ2V0X3N0YW5kYnlfZGppbm5pKFxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5pbmZvLmRqaW5uaV9saXN0LFxuICAgICAgICAgICAgICAgIE1haW5DaGFyLmdldF9hY3RpdmVfcGxheWVycyh0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLCBNQVhfQ0hBUlNfTlVNQkVSKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHNob3dfZGppbm5faW5mbyA9IF8uc29tZSh0aGlzLnN0YW5kYnlfZGppbm5pLCBCb29sZWFuKTtcblxuICAgICAgICAgICAgaWYgKHNob3dfZGppbm5faW5mbykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnNfZ3JvdXAuYWxwaGEgPSAxO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnNfZ3JvdXAueCA9IElOSVRJQUxfUEFERElOR19fREpJTk5JX1g7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFyc19ncm91cC55ID0gSU5JVElBTF9QQURESU5HX19ESklOTklfWTtcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3JkZXJlZF9lbGVtZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gb3JkZXJlZF9lbGVtZW50c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IGVsZW1lbnQgaW4gdGhpcy5zdGFuZGJ5X2RqaW5uaSA/IHRoaXMuc3RhbmRieV9kamlubmlbZWxlbWVudF0udG9TdHJpbmcoKSA6IFwiMFwiO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXR1c193aW5kb3cudXBkYXRlX3RleHQoXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFuZGJ5X2NvdW50X3RleHRbZWxlbWVudF0sXG4gICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hbWVfeSArIFNUQU5EQllfQ09VTlRfU0hJRlRfWVsrKGkgPiAxKV1cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3JkZXJlZF9lbGVtZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gb3JkZXJlZF9lbGVtZW50c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0dXNfd2luZG93LnVwZGF0ZV90ZXh0KFwiXCIsIHRoaXMuc3RhbmRieV9jb3VudF90ZXh0W2VsZW1lbnRdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFyc19ncm91cC5hbHBoYSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjaGFyc19udW1iZXIgPSBfLmNsYW1wKHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVycy5sZW5ndGgsIE1BWF9DSEFSU19OVU1CRVIpO1xuICAgICAgICB0aGlzLnN0YXR1c193aW5fd2lkdGggPVxuICAgICAgICAgICAgY2hhcnNfbnVtYmVyICogV0lEVEhfUEVSX0NIQVIgKyAoSU5JVElBTF9QQURESU5HX1ggPj4gMSkgKyAoc2hvd19kamlubl9pbmZvID8gREpJTk5fSU5GT19XSURUSCA6IDApO1xuICAgICAgICB0aGlzLnN0YXR1c193aW5feCA9XG4gICAgICAgICAgICBudW1iZXJzLkdBTUVfV0lEVEggLSB0aGlzLnN0YXR1c193aW5fd2lkdGggLSBudW1iZXJzLklOU0lERV9CT1JERVJfV0lEVEggLSBudW1iZXJzLk9VVFNJREVfQk9SREVSX1dJRFRIO1xuXG4gICAgICAgIHRoaXMuc3RhdHVzX3dpbmRvdy51cGRhdGVfc2l6ZSh7d2lkdGg6IHRoaXMuc3RhdHVzX3dpbl93aWR0aH0pO1xuICAgICAgICB0aGlzLnN0YXR1c193aW5kb3cudXBkYXRlX3Bvc2l0aW9uKHt4OiB0aGlzLnN0YXR1c193aW5feH0pO1xuICAgICAgICB0aGlzLnN0YXR1c193aW5kb3cuY2xlYXJfc2VwYXJhdG9ycygpO1xuXG4gICAgICAgIGxldCBjdXJyZW50X2NoYXJzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hhcnNfbnVtYmVyOyArK2kpIHtcbiAgICAgICAgICAgIGxldCBjaGFyID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW2ldO1xuICAgICAgICAgICAgY3VycmVudF9jaGFycy5wdXNoKGNoYXIua2V5X25hbWUpO1xuXG4gICAgICAgICAgICBsZXQgaW5mb19zcHJpdGUgPSB0aGlzLmluZm9fc3ByaXRlc1tjaGFyLmtleV9uYW1lXTtcbiAgICAgICAgICAgIGluZm9fc3ByaXRlLmdyb3VwLnZpc2libGUgPSB0cnVlO1xuXG4gICAgICAgICAgICBjb25zdCBiYXNlX3hfcG9zID0gaSAqIFdJRFRIX1BFUl9DSEFSICsgSU5JVElBTF9QQURESU5HX1ggKyAoc2hvd19kamlubl9pbmZvID8gREpJTk5fSU5GT19XSURUSCA6IDApO1xuICAgICAgICAgICAgY29uc3QgeF9udW1iZXJfcG9zID0gYmFzZV94X3BvcyArIFNUQVRfWDtcblxuICAgICAgICAgICAgdGhpcy5zdGF0dXNfd2luZG93LnVwZGF0ZV90ZXh0KGNoYXIubmFtZSwgaW5mb19zcHJpdGUubmFtZSwgYmFzZV94X3Bvcyk7XG4gICAgICAgICAgICB0aGlzLnN0YXR1c193aW5kb3cudXBkYXRlX3RleHQoY2hhci5jdXJyZW50X2hwLCBpbmZvX3Nwcml0ZS5ocCwgeF9udW1iZXJfcG9zKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzX3dpbmRvdy51cGRhdGVfdGV4dChjaGFyLmN1cnJlbnRfcHAsIGluZm9fc3ByaXRlLnBwLCB4X251bWJlcl9wb3MpO1xuXG4gICAgICAgICAgICBsZXQgaHBfd2lkdGggPSBpbmZvX3Nwcml0ZS5ocC50ZXh0LnRleHRXaWR0aDtcbiAgICAgICAgICAgIGluZm9fc3ByaXRlLmhwLnRleHQueCArPSBocF93aWR0aCAvIDI7XG4gICAgICAgICAgICBpbmZvX3Nwcml0ZS5ocC5zaGFkb3cueCArPSBocF93aWR0aCAvIDI7XG5cbiAgICAgICAgICAgIGxldCBwcF93aWR0aCA9IGluZm9fc3ByaXRlLnBwLnRleHQudGV4dFdpZHRoO1xuICAgICAgICAgICAgaW5mb19zcHJpdGUucHAudGV4dC54ICs9IHBwX3dpZHRoIC8gMjtcbiAgICAgICAgICAgIGluZm9fc3ByaXRlLnBwLnNoYWRvdy54ICs9IHBwX3dpZHRoIC8gMjtcblxuICAgICAgICAgICAgdGhpcy5zdGF0dXNfd2luZG93LnVwZGF0ZV90ZXh0X3Bvc2l0aW9uKHt4OiBiYXNlX3hfcG9zfSwgaW5mb19zcHJpdGUuaHBfaGVhZGVyKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzX3dpbmRvdy51cGRhdGVfdGV4dF9wb3NpdGlvbih7eDogYmFzZV94X3Bvc30sIGluZm9fc3ByaXRlLnBwX2hlYWRlcik7XG5cbiAgICAgICAgICAgIGluZm9fc3ByaXRlLmhwX2Jhcl9ncmFwaGljcy54ID0gYmFzZV94X3BvcztcbiAgICAgICAgICAgIGluZm9fc3ByaXRlLnBwX2Jhcl9ncmFwaGljcy54ID0gYmFzZV94X3BvcztcblxuICAgICAgICAgICAgY29uc3QgaHBfZGFtYWdlX2Jhcl93aWR0aCA9IChTVEFUVVNfQkFSX1dJRFRIICogKDEgLSBjaGFyLmN1cnJlbnRfaHAgLyBjaGFyLm1heF9ocCkpIHwgMDtcbiAgICAgICAgICAgIGNvbnN0IGhwX2RhbWFnZV9iYXJfeCA9IGJhc2VfeF9wb3MgKyBTVEFUVVNfQkFSX1dJRFRIIC0gaHBfZGFtYWdlX2Jhcl93aWR0aDtcblxuICAgICAgICAgICAgaW5mb19zcHJpdGUuaHBfYmFyX2RhbWFnZV9ncmFwaGljcy5jbGVhcigpO1xuICAgICAgICAgICAgaW5mb19zcHJpdGUuaHBfYmFyX2RhbWFnZV9ncmFwaGljcy5iZWdpbkZpbGwoU1RBVFVTX0JBUl9DT0xPUl9CQUQsIDEpO1xuICAgICAgICAgICAgaW5mb19zcHJpdGUuaHBfYmFyX2RhbWFnZV9ncmFwaGljcy5kcmF3UmVjdChcbiAgICAgICAgICAgICAgICBocF9kYW1hZ2VfYmFyX3gsXG4gICAgICAgICAgICAgICAgaW5mb19zcHJpdGUuaHBfYmFyX2RhbWFnZV9ncmFwaGljcy5kYXRhLmRlZmF1bHRfeSxcbiAgICAgICAgICAgICAgICBocF9kYW1hZ2VfYmFyX3dpZHRoLFxuICAgICAgICAgICAgICAgIFNUQVRVU19CQVJfSEVJR0hUXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaW5mb19zcHJpdGUuaHBfYmFyX2RhbWFnZV9ncmFwaGljcy5lbmRGaWxsKCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHBwX2RhbWFnZV9iYXJfd2lkdGggPSAoU1RBVFVTX0JBUl9XSURUSCAqICgxIC0gY2hhci5jdXJyZW50X3BwIC8gY2hhci5tYXhfcHApKSB8IDA7XG4gICAgICAgICAgICBjb25zdCBwcF9kYW1hZ2VfYmFyX3ggPSBiYXNlX3hfcG9zICsgU1RBVFVTX0JBUl9XSURUSCAtIHBwX2RhbWFnZV9iYXJfd2lkdGg7XG5cbiAgICAgICAgICAgIGluZm9fc3ByaXRlLnBwX2Jhcl9kYW1hZ2VfZ3JhcGhpY3MuY2xlYXIoKTtcbiAgICAgICAgICAgIGluZm9fc3ByaXRlLnBwX2Jhcl9kYW1hZ2VfZ3JhcGhpY3MuYmVnaW5GaWxsKFNUQVRVU19CQVJfQ09MT1JfQkFELCAxKTtcbiAgICAgICAgICAgIGluZm9fc3ByaXRlLnBwX2Jhcl9kYW1hZ2VfZ3JhcGhpY3MuZHJhd1JlY3QoXG4gICAgICAgICAgICAgICAgcHBfZGFtYWdlX2Jhcl94LFxuICAgICAgICAgICAgICAgIGluZm9fc3ByaXRlLnBwX2Jhcl9kYW1hZ2VfZ3JhcGhpY3MuZGF0YS5kZWZhdWx0X3ksXG4gICAgICAgICAgICAgICAgcHBfZGFtYWdlX2Jhcl93aWR0aCxcbiAgICAgICAgICAgICAgICBTVEFUVVNfQkFSX0hFSUdIVFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGluZm9fc3ByaXRlLnBwX2Jhcl9kYW1hZ2VfZ3JhcGhpY3MuZW5kRmlsbCgpO1xuXG4gICAgICAgICAgICBpZiAoaSAhPT0gMCB8fCBzaG93X2RqaW5uX2luZm8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXR1c193aW5kb3cuZHJhd19zZXBhcmF0b3IoYmFzZV94X3BvcyAtIDUsIDMsIGJhc2VfeF9wb3MgLSA1LCB0aGlzLnN0YXR1c193aW5faGVpZ2h0IC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBrZXlfbmFtZSBpbiB0aGlzLmluZm9fc3ByaXRlcykge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRfY2hhcnMuaW5jbHVkZXMoa2V5X25hbWUpKSBjb250aW51ZTtcblxuICAgICAgICAgICAgbGV0IGluZm9fc3ByaXRlID0gdGhpcy5pbmZvX3Nwcml0ZXNba2V5X25hbWVdO1xuICAgICAgICAgICAgaW5mb19zcHJpdGUuZ3JvdXAudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypEaXNwbGF5cyB0aGlzIHdpbmRvdyovXG4gICAgc2hvdygpIHtcbiAgICAgICAgdGhpcy5zdGF0dXNfd2luZG93LnNob3coKTtcbiAgICB9XG5cbiAgICAvKkNsb3NlcyB0aGlzIHdpbmRvdyovXG4gICAgY2xvc2UoY2FsbGJhY2s/OiBGdW5jdGlvbikge1xuICAgICAgICB0aGlzLnN0YXR1c193aW5kb3cuY2xvc2UoY2FsbGJhY2spO1xuICAgIH1cblxuICAgIC8qRGVzdHJveXMgdGhpcyB3aW5kb3cqL1xuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuc3RhdHVzX3dpbmRvdy5kZXN0cm95KGZhbHNlKTtcbiAgICB9XG59XG4iLCJpbXBvcnQge2VsZW1lbnRzfSBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XG5pbXBvcnQge0dhbWVJbmZvfSBmcm9tIFwiLi9pbml0aWFsaXplcnMvaW5pdGlhbGl6ZV9pbmZvXCI7XG5cbmV4cG9ydCBjbGFzcyBDbGFzc2VzIHtcbiAgICBwdWJsaWMga2V5X25hbWU6IHN0cmluZztcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nO1xuICAgIHB1YmxpYyByZXF1aXJlZF92ZW51c19sZXZlbDogbnVtYmVyO1xuICAgIHB1YmxpYyByZXF1aXJlZF9tZXJjdXJ5X2xldmVsOiBudW1iZXI7XG4gICAgcHVibGljIHJlcXVpcmVkX21hcnNfbGV2ZWw6IG51bWJlcjtcbiAgICBwdWJsaWMgcmVxdWlyZWRfanVwaXRlcl9sZXZlbDogbnVtYmVyO1xuICAgIHB1YmxpYyBocF9ib29zdDogbnVtYmVyO1xuICAgIHB1YmxpYyBwcF9ib29zdDogbnVtYmVyO1xuICAgIHB1YmxpYyBhdGtfYm9vc3Q6IG51bWJlcjtcbiAgICBwdWJsaWMgZGVmX2Jvb3N0OiBudW1iZXI7XG4gICAgcHVibGljIGFnaV9ib29zdDogbnVtYmVyO1xuICAgIHB1YmxpYyBsdWtfYm9vc3Q6IG51bWJlcjtcbiAgICBwdWJsaWMgYWJpbGl0eV9sZXZlbF9wYWlyczoge1xuICAgICAgICBhYmlsaXR5OiBzdHJpbmc7XG4gICAgICAgIGxldmVsOiBudW1iZXI7XG4gICAgfVtdO1xuICAgIHB1YmxpYyBjbGFzc190eXBlOiBudW1iZXI7XG4gICAgcHVibGljIHZ1bG5lcmFiaWxpdGllczogYW55O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGtleV9uYW1lLFxuICAgICAgICBuYW1lLFxuICAgICAgICByZXF1aXJlZF92ZW51c19sZXZlbCxcbiAgICAgICAgcmVxdWlyZWRfbWVyY3VyeV9sZXZlbCxcbiAgICAgICAgcmVxdWlyZWRfbWFyc19sZXZlbCxcbiAgICAgICAgcmVxdWlyZWRfanVwaXRlcl9sZXZlbCxcbiAgICAgICAgaHBfYm9vc3QsXG4gICAgICAgIHBwX2Jvb3N0LFxuICAgICAgICBhdGtfYm9vc3QsXG4gICAgICAgIGRlZl9ib29zdCxcbiAgICAgICAgYWdpX2Jvb3N0LFxuICAgICAgICBsdWtfYm9vc3QsXG4gICAgICAgIGFiaWxpdHlfbGV2ZWxfcGFpcnMsXG4gICAgICAgIGNsYXNzX3R5cGUsXG4gICAgICAgIHZ1bG5lcmFiaWxpdGllc1xuICAgICkge1xuICAgICAgICB0aGlzLmtleV9uYW1lID0ga2V5X25hbWU7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMucmVxdWlyZWRfdmVudXNfbGV2ZWwgPSByZXF1aXJlZF92ZW51c19sZXZlbDtcbiAgICAgICAgdGhpcy5yZXF1aXJlZF9tZXJjdXJ5X2xldmVsID0gcmVxdWlyZWRfbWVyY3VyeV9sZXZlbDtcbiAgICAgICAgdGhpcy5yZXF1aXJlZF9tYXJzX2xldmVsID0gcmVxdWlyZWRfbWFyc19sZXZlbDtcbiAgICAgICAgdGhpcy5yZXF1aXJlZF9qdXBpdGVyX2xldmVsID0gcmVxdWlyZWRfanVwaXRlcl9sZXZlbDtcbiAgICAgICAgdGhpcy5ocF9ib29zdCA9IGhwX2Jvb3N0O1xuICAgICAgICB0aGlzLnBwX2Jvb3N0ID0gcHBfYm9vc3Q7XG4gICAgICAgIHRoaXMuYXRrX2Jvb3N0ID0gYXRrX2Jvb3N0O1xuICAgICAgICB0aGlzLmRlZl9ib29zdCA9IGRlZl9ib29zdDtcbiAgICAgICAgdGhpcy5hZ2lfYm9vc3QgPSBhZ2lfYm9vc3Q7XG4gICAgICAgIHRoaXMubHVrX2Jvb3N0ID0gbHVrX2Jvb3N0O1xuICAgICAgICB0aGlzLmFiaWxpdHlfbGV2ZWxfcGFpcnMgPSBhYmlsaXR5X2xldmVsX3BhaXJzO1xuICAgICAgICB0aGlzLmNsYXNzX3R5cGUgPSBjbGFzc190eXBlO1xuICAgICAgICB0aGlzLnZ1bG5lcmFiaWxpdGllcyA9IHZ1bG5lcmFiaWxpdGllcyA9PT0gdW5kZWZpbmVkID8gW10gOiB2dWxuZXJhYmlsaXRpZXM7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hvb3NlX3JpZ2h0X2NsYXNzKFxuICAgIGNsYXNzZXNfbGlzdDogR2FtZUluZm9bXCJjbGFzc2VzX2xpc3RcIl0sXG4gICAgY2xhc3NfdGFibGUsXG4gICAgZWxlbWVudF9hZmluaXR5OiBlbGVtZW50cyxcbiAgICB2ZW51c19sdmw6IG51bWJlcixcbiAgICBtZXJjdXJ5X2x2bDogbnVtYmVyLFxuICAgIG1hcnNfbHZsOiBudW1iZXIsXG4gICAganVwaXRlcl9sdmw6IG51bWJlclxuKTogQ2xhc3NlcyB7XG4gICAgbGV0IHNlY29uZGFyeV9lbGVtZW50cyA9IFtcbiAgICAgICAgLi4uKGVsZW1lbnRfYWZpbml0eSAhPT0gZWxlbWVudHMuVkVOVVMgPyBbe2VsZW1lbnQ6IGVsZW1lbnRzLlZFTlVTLCBsZXZlbDogdmVudXNfbHZsfV0gOiBbXSksXG4gICAgICAgIC4uLihlbGVtZW50X2FmaW5pdHkgIT09IGVsZW1lbnRzLk1FUkNVUlkgPyBbe2VsZW1lbnQ6IGVsZW1lbnRzLk1FUkNVUlksIGxldmVsOiBtZXJjdXJ5X2x2bH1dIDogW10pLFxuICAgICAgICAuLi4oZWxlbWVudF9hZmluaXR5ICE9PSBlbGVtZW50cy5NQVJTID8gW3tlbGVtZW50OiBlbGVtZW50cy5NQVJTLCBsZXZlbDogbWFyc19sdmx9XSA6IFtdKSxcbiAgICAgICAgLi4uKGVsZW1lbnRfYWZpbml0eSAhPT0gZWxlbWVudHMuSlVQSVRFUiA/IFt7ZWxlbWVudDogZWxlbWVudHMuSlVQSVRFUiwgbGV2ZWw6IGp1cGl0ZXJfbHZsfV0gOiBbXSksXG4gICAgXTtcbiAgICBjb25zdCBub19zZWNvbmRhcnkgPSBzZWNvbmRhcnlfZWxlbWVudHMuZXZlcnkoZWxlbWVudCA9PiBlbGVtZW50LmxldmVsID09PSAwKTtcbiAgICBsZXQgc2Vjb25kYXJ5X2FmaW5pdHk7XG4gICAgaWYgKG5vX3NlY29uZGFyeSkge1xuICAgICAgICBzZWNvbmRhcnlfYWZpbml0eSA9IGVsZW1lbnRfYWZpbml0eTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzZWNvbmRhcnlfYWZpbml0eSA9IF8ubWF4Qnkoc2Vjb25kYXJ5X2VsZW1lbnRzLCBlbGVtZW50ID0+IGVsZW1lbnQubGV2ZWwpLmVsZW1lbnQ7XG4gICAgfVxuICAgIGNvbnN0IGNsYXNzX3R5cGUgPSBjbGFzc190YWJsZVtlbGVtZW50X2FmaW5pdHldW3NlY29uZGFyeV9hZmluaXR5XTtcbiAgICBsZXQgY2xhc3NlcyA9IE9iamVjdC52YWx1ZXMoY2xhc3Nlc19saXN0KS5maWx0ZXIodGhpc19jbGFzcyA9PiB0aGlzX2NsYXNzLmNsYXNzX3R5cGUgPT09IGNsYXNzX3R5cGUpO1xuICAgIGNsYXNzZXMgPSBjbGFzc2VzLmZpbHRlcih0aGlzX2NsYXNzID0+IHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXNfY2xhc3MucmVxdWlyZWRfdmVudXNfbGV2ZWwgPD0gdmVudXNfbHZsICYmXG4gICAgICAgICAgICB0aGlzX2NsYXNzLnJlcXVpcmVkX21lcmN1cnlfbGV2ZWwgPD0gbWVyY3VyeV9sdmwgJiZcbiAgICAgICAgICAgIHRoaXNfY2xhc3MucmVxdWlyZWRfbWFyc19sZXZlbCA8PSBtYXJzX2x2bCAmJlxuICAgICAgICAgICAgdGhpc19jbGFzcy5yZXF1aXJlZF9qdXBpdGVyX2xldmVsIDw9IGp1cGl0ZXJfbHZsXG4gICAgICAgICk7XG4gICAgfSk7XG4gICAgcmV0dXJuIF8uc29ydEJ5KGNsYXNzZXMsIFtcbiAgICAgICAgdGhpc19jbGFzcyA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIHRoaXNfY2xhc3MucmVxdWlyZWRfdmVudXNfbGV2ZWwgK1xuICAgICAgICAgICAgICAgIHRoaXNfY2xhc3MucmVxdWlyZWRfbWVyY3VyeV9sZXZlbCArXG4gICAgICAgICAgICAgICAgdGhpc19jbGFzcy5yZXF1aXJlZF9tYXJzX2xldmVsICtcbiAgICAgICAgICAgICAgICB0aGlzX2NsYXNzLnJlcXVpcmVkX2p1cGl0ZXJfbGV2ZWxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgXSkucmV2ZXJzZSgpWzBdO1xufVxuIiwiaW1wb3J0IHtTcHJpdGVCYXNlfSBmcm9tIFwiLi9TcHJpdGVCYXNlXCI7XG5pbXBvcnQge1RpbGVFdmVudCwgZXZlbnRfdHlwZXMgYXMgdGlsZV9ldmVudF90eXBlc30gZnJvbSBcIi4vdGlsZV9ldmVudHMvVGlsZUV2ZW50XCI7XG5pbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gXCIuL21hZ2ljX251bWJlcnNcIjtcbmltcG9ydCB7ZGlyZWN0aW9ucywgZ2V0X3N1cnJvdW5kaW5ncywgbW91bnRfY29sbGlzaW9uX3BvbHlnb259IGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQge0p1bXBFdmVudH0gZnJvbSBcIi4vdGlsZV9ldmVudHMvSnVtcEV2ZW50XCI7XG5pbXBvcnQge0NsaW1iRXZlbnR9IGZyb20gXCIuL3RpbGVfZXZlbnRzL0NsaW1iRXZlbnRcIjtcbmltcG9ydCB7R29sZGVuU3VufSBmcm9tIFwiLi9Hb2xkZW5TdW5cIjtcbmltcG9ydCB7TWFwfSBmcm9tIFwiLi9NYXBcIjtcbmltcG9ydCB7Q29sbGlzaW9ufSBmcm9tIFwiLi9Db2xsaXNpb25cIjtcblxuZXhwb3J0IGVudW0gaW50ZXJhY3RhYmxlX29iamVjdF9pbnRlcmFjdGlvbl90eXBlcyB7XG4gICAgT05DRSA9IFwib25jZVwiLFxuICAgIElORklOSVRFID0gXCJpbmZpbml0ZVwiLFxufVxuXG5leHBvcnQgZW51bSBpbnRlcmFjdGFibGVfb2JqZWN0X2V2ZW50X3R5cGVzIHtcbiAgICBKVU1QID0gXCJqdW1wXCIsXG4gICAgSlVNUF9BUk9VTkQgPSBcImp1bXBfYXJvdW5kXCIsXG4gICAgQ0xJTUIgPSBcImNsaW1iXCIsXG59XG5cbmV4cG9ydCBjbGFzcyBJbnRlcmFjdGFibGVPYmplY3RzIHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6IEdvbGRlblN1bjtcbiAgICBwdWJsaWMga2V5X25hbWU6IHN0cmluZztcbiAgICBwdWJsaWMgeDogbnVtYmVyO1xuICAgIHB1YmxpYyB5OiBudW1iZXI7XG4gICAgcHVibGljIHNwcml0ZV9pbmZvOiBTcHJpdGVCYXNlO1xuICAgIHB1YmxpYyBhbGxvd2VkX3RpbGVzOiB7eDogbnVtYmVyOyB5OiBudW1iZXI7IGNvbGxpc2lvbl9sYXllcjogbnVtYmVyfVtdO1xuICAgIHB1YmxpYyBiYXNlX2NvbGxpc2lvbl9sYXllcjogbnVtYmVyO1xuICAgIHB1YmxpYyBjb2xsaWRlcl9sYXllcl9zaGlmdDogbnVtYmVyO1xuICAgIHB1YmxpYyBpbnRlcm1lZGlhdGVfY29sbGlkZXJfbGF5ZXJfc2hpZnQ6IG51bWJlcjtcbiAgICBwdWJsaWMgbm90X2FsbG93ZWRfdGlsZXM6IHt4OiBudW1iZXI7IHk6IG51bWJlcn1bXTtcbiAgICBwdWJsaWMgb2JqZWN0X2Ryb3BfdGlsZXM6IGFueTtcbiAgICBwdWJsaWMgZXZlbnRzOiBTZXQ8VGlsZUV2ZW50PjtcbiAgICBwdWJsaWMgZXZlbnRzX2luZm86IGFueTtcbiAgICBwdWJsaWMgY3VycmVudF94OiBudW1iZXI7XG4gICAgcHVibGljIGN1cnJlbnRfeTogbnVtYmVyO1xuICAgIHB1YmxpYyBjdXN0b21fZGF0YTogYW55O1xuICAgIHB1YmxpYyBjb2xsaXNpb25fY2hhbmdlX2Z1bmN0aW9uczogRnVuY3Rpb25bXTtcbiAgICBwdWJsaWMgY29sb3JfZmlsdGVyOiBhbnk7XG4gICAgcHVibGljIHNwcml0ZTogUGhhc2VyLlNwcml0ZTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBnYW1lLFxuICAgICAgICBkYXRhLFxuICAgICAgICBrZXlfbmFtZSxcbiAgICAgICAgeCxcbiAgICAgICAgeSxcbiAgICAgICAgYWxsb3dlZF90aWxlcyxcbiAgICAgICAgYmFzZV9jb2xsaXNpb25fbGF5ZXIsXG4gICAgICAgIGNvbGxpZGVyX2xheWVyX3NoaWZ0LFxuICAgICAgICBub3RfYWxsb3dlZF90aWxlcyxcbiAgICAgICAgb2JqZWN0X2Ryb3BfdGlsZXMsXG4gICAgICAgIGludGVybWVkaWF0ZV9jb2xsaWRlcl9sYXllcl9zaGlmdFxuICAgICkge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLmtleV9uYW1lID0ga2V5X25hbWU7XG4gICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgIHRoaXMueSA9IHk7XG4gICAgICAgIHRoaXMuc3ByaXRlX2luZm8gPSBudWxsO1xuICAgICAgICB0aGlzLmFsbG93ZWRfdGlsZXMgPSBhbGxvd2VkX3RpbGVzO1xuICAgICAgICB0aGlzLmJhc2VfY29sbGlzaW9uX2xheWVyID0gYmFzZV9jb2xsaXNpb25fbGF5ZXI7XG4gICAgICAgIHRoaXMuY29sbGlkZXJfbGF5ZXJfc2hpZnQgPSBjb2xsaWRlcl9sYXllcl9zaGlmdDtcbiAgICAgICAgdGhpcy5pbnRlcm1lZGlhdGVfY29sbGlkZXJfbGF5ZXJfc2hpZnQgPVxuICAgICAgICAgICAgaW50ZXJtZWRpYXRlX2NvbGxpZGVyX2xheWVyX3NoaWZ0ID09PSB1bmRlZmluZWQgPyAwIDogaW50ZXJtZWRpYXRlX2NvbGxpZGVyX2xheWVyX3NoaWZ0O1xuICAgICAgICB0aGlzLm5vdF9hbGxvd2VkX3RpbGVzID0gbm90X2FsbG93ZWRfdGlsZXMgPT09IHVuZGVmaW5lZCA/IFtdIDogbm90X2FsbG93ZWRfdGlsZXM7XG4gICAgICAgIHRoaXMub2JqZWN0X2Ryb3BfdGlsZXMgPSBvYmplY3RfZHJvcF90aWxlcyA9PT0gdW5kZWZpbmVkID8gW10gOiBvYmplY3RfZHJvcF90aWxlcztcbiAgICAgICAgdGhpcy5ldmVudHMgPSBuZXcgU2V0KCk7XG4gICAgICAgIHRoaXMuZXZlbnRzX2luZm8gPSB7fTtcbiAgICAgICAgdGhpcy5jdXJyZW50X3ggPSB4O1xuICAgICAgICB0aGlzLmN1cnJlbnRfeSA9IHk7XG4gICAgICAgIHRoaXMuY3VzdG9tX2RhdGEgPSB7XG4gICAgICAgICAgICBjb2xsaXNpb25fdGlsZXNfYm9kaWVzOiBbXSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jb2xsaXNpb25fY2hhbmdlX2Z1bmN0aW9ucyA9IFtdO1xuICAgICAgICB0aGlzLmNvbG9yX2ZpbHRlciA9IHRoaXMuZ2FtZS5hZGQuZmlsdGVyKFwiQ29sb3JGaWx0ZXJzXCIpO1xuICAgIH1cblxuICAgIHNldF9zcHJpdGUoc3ByaXRlKSB7XG4gICAgICAgIHRoaXMuc3ByaXRlID0gc3ByaXRlO1xuICAgIH1cblxuICAgIHBvc2l0aW9uX2FsbG93ZWQoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5kYXRhLm1hcC5pbnRlcmFjdGFibGVfb2JqZWN0cy5maWx0ZXIoaXRlbSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uY3VycmVudF94ID09PSB4ICYmIGl0ZW0uY3VycmVudF95ID09PSB5O1xuICAgICAgICAgICAgfSkubGVuZ3RoXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5hbGxvd2VkX3RpbGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCB0aWxlID0gdGhpcy5hbGxvd2VkX3RpbGVzW2ldO1xuICAgICAgICAgICAgaWYgKHRpbGUueCA9PT0geCAmJiB0aWxlLnkgPT09IHkgJiYgdGlsZS5jb2xsaXNpb25fbGF5ZXIgPT09IHRoaXMuZGF0YS5tYXAuY29sbGlzaW9uX2xheWVyKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZ2V0X2N1cnJlbnRfcG9zaXRpb24obWFwOiBNYXApIHtcbiAgICAgICAgY29uc3QgeCA9ICh0aGlzLnNwcml0ZS54IC8gbWFwLnNwcml0ZS50aWxlV2lkdGgpIHwgMDtcbiAgICAgICAgY29uc3QgeSA9ICh0aGlzLnNwcml0ZS55IC8gbWFwLnNwcml0ZS50aWxlSGVpZ2h0KSB8IDA7XG4gICAgICAgIHJldHVybiB7eDogeCwgeTogeX07XG4gICAgfVxuXG4gICAgY2hhbmdlX2NvbGxpZGVyX2xheWVyKGRhdGE6IEdvbGRlblN1biwgZGVzdGluYXRpb25fY29sbGlkZXJfbGF5ZXI6IG51bWJlcikge1xuICAgICAgICB0aGlzLnNwcml0ZS5ib2R5LnJlbW92ZUNvbGxpc2lvbkdyb3VwKFxuICAgICAgICAgICAgZGF0YS5jb2xsaXNpb24uaW50ZXJhY3RhYmxlX29ianNfY29sbGlzaW9uX2dyb3Vwc1t0aGlzLmJhc2VfY29sbGlzaW9uX2xheWVyXVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnNwcml0ZS5ib2R5LnNldENvbGxpc2lvbkdyb3VwKFxuICAgICAgICAgICAgZGF0YS5jb2xsaXNpb24uaW50ZXJhY3RhYmxlX29ianNfY29sbGlzaW9uX2dyb3Vwc1tkZXN0aW5hdGlvbl9jb2xsaWRlcl9sYXllcl1cbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5iYXNlX2NvbGxpc2lvbl9sYXllciA9IGRlc3RpbmF0aW9uX2NvbGxpZGVyX2xheWVyO1xuICAgICAgICB0aGlzLnNwcml0ZS5iYXNlX2NvbGxpc2lvbl9sYXllciA9IGRlc3RpbmF0aW9uX2NvbGxpZGVyX2xheWVyO1xuICAgICAgICB0aGlzLmNvbGxpc2lvbl9jaGFuZ2VfZnVuY3Rpb25zLmZvckVhY2goZiA9PiB7XG4gICAgICAgICAgICBmKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGluc2VydF9ldmVudChpZCkge1xuICAgICAgICB0aGlzLmV2ZW50cy5hZGQoaWQpO1xuICAgIH1cblxuICAgIGdldF9ldmVudHMoKSB7XG4gICAgICAgIHJldHVybiBbLi4udGhpcy5ldmVudHNdLm1hcChpZCA9PiBUaWxlRXZlbnQuZ2V0X2V2ZW50KGlkKSk7XG4gICAgfVxuXG4gICAgcmVtb3ZlX2V2ZW50KGlkKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzLmRlbGV0ZShpZCk7XG4gICAgfVxuXG4gICAgY3JlYXRpbmdfYmxvY2tpbmdfc3RhaXJfYmxvY2soY29sbGlzaW9uX29iajogQ29sbGlzaW9uKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldF9sYXllciA9IHRoaXMuYmFzZV9jb2xsaXNpb25fbGF5ZXIgKyB0aGlzLmN1c3RvbV9kYXRhLmJsb2NrX3N0YWlyX2NvbGxpZGVyX2xheWVyX3NoaWZ0O1xuICAgICAgICBjb25zdCB4X3BvcyA9ICh0aGlzLmN1cnJlbnRfeCArIDAuNSkgKiB0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlV2lkdGg7XG4gICAgICAgIGNvbnN0IHlfcG9zID0gKHRoaXMuY3VycmVudF95ICsgMS41KSAqIHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVIZWlnaHQgLSA0O1xuICAgICAgICBsZXQgYm9keSA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUJvZHkoeF9wb3MsIHlfcG9zLCAwLCB0cnVlKTtcbiAgICAgICAgYm9keS5jbGVhclNoYXBlcygpO1xuICAgICAgICBjb25zdCB3aWR0aCA9IHRoaXMuZGF0YS5kYnMuaW50ZXJhY3RhYmxlX29iamVjdHNfZGJbdGhpcy5rZXlfbmFtZV0uYm9keV9yYWRpdXMgKiAyO1xuICAgICAgICBib2R5LnNldFJlY3RhbmdsZSh3aWR0aCwgd2lkdGgsIDAsIDApO1xuICAgICAgICBpZiAoISh0YXJnZXRfbGF5ZXIgaW4gdGhpcy5kYXRhLmNvbGxpc2lvbi5pbnRlcmFjdGFibGVfb2Jqc19jb2xsaXNpb25fZ3JvdXBzKSkge1xuICAgICAgICAgICAgdGhpcy5kYXRhLmNvbGxpc2lvbi5pbnRlcmFjdGFibGVfb2Jqc19jb2xsaXNpb25fZ3JvdXBzW1xuICAgICAgICAgICAgICAgIHRhcmdldF9sYXllclxuICAgICAgICAgICAgXSA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUNvbGxpc2lvbkdyb3VwKCk7XG4gICAgICAgIH1cbiAgICAgICAgYm9keS5zZXRDb2xsaXNpb25Hcm91cCh0aGlzLmRhdGEuY29sbGlzaW9uLmludGVyYWN0YWJsZV9vYmpzX2NvbGxpc2lvbl9ncm91cHNbdGFyZ2V0X2xheWVyXSk7XG4gICAgICAgIGJvZHkuZGFtcGluZyA9IG51bWJlcnMuTUFQX0RBTVBJTkc7XG4gICAgICAgIGJvZHkuYW5ndWxhckRhbXBpbmcgPSBudW1iZXJzLk1BUF9EQU1QSU5HO1xuICAgICAgICBib2R5LnNldFplcm9Sb3RhdGlvbigpO1xuICAgICAgICBib2R5LmZpeGVkUm90YXRpb24gPSB0cnVlO1xuICAgICAgICBib2R5LmR5bmFtaWMgPSBmYWxzZTtcbiAgICAgICAgYm9keS5zdGF0aWMgPSB0cnVlO1xuICAgICAgICBib2R5LmRlYnVnID0gdGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkuZGVidWc7XG4gICAgICAgIGJvZHkuY29sbGlkZXMoY29sbGlzaW9uX29iai5oZXJvX2NvbGxpc2lvbl9ncm91cCk7XG4gICAgICAgIHRoaXMuY3VzdG9tX2RhdGEuYmxvY2tpbmdfc3RhaXJfYmxvY2sgPSBib2R5O1xuICAgIH1cblxuICAgIGluaXRpYWxfY29uZmlnKG1hcF9zcHJpdGU6IFBoYXNlci5UaWxlbWFwKSB7XG4gICAgICAgIGNvbnN0IGludGVyYWN0YWJsZV9vYmplY3Rfc3ByaXRlID0gdGhpcy5kYXRhLm5wY19ncm91cC5jcmVhdGUoMCwgMCwgdGhpcy5rZXlfbmFtZSArIFwiX1wiICsgdGhpcy5rZXlfbmFtZSk7XG4gICAgICAgIHRoaXMuc2V0X3Nwcml0ZShpbnRlcmFjdGFibGVfb2JqZWN0X3Nwcml0ZSk7XG4gICAgICAgIHRoaXMuc3ByaXRlLmlzX2ludGVyYWN0YWJsZV9vYmplY3QgPSB0cnVlO1xuICAgICAgICB0aGlzLnNwcml0ZS5yb3VuZFB4ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zcHJpdGUuYmFzZV9jb2xsaXNpb25fbGF5ZXIgPSB0aGlzLmJhc2VfY29sbGlzaW9uX2xheWVyO1xuICAgICAgICB0aGlzLnNwcml0ZS5pbnRlcmFjdGFibGVfb2JqZWN0ID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5kYnMuaW50ZXJhY3RhYmxlX29iamVjdHNfZGJbdGhpcy5rZXlfbmFtZV0uc2VuZF90b19iYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlLnNlbmRfdG9fYmFjayA9IHRoaXMuZGF0YS5kYnMuaW50ZXJhY3RhYmxlX29iamVjdHNfZGJbdGhpcy5rZXlfbmFtZV0uc2VuZF90b19iYWNrO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiW3RoaXMua2V5X25hbWVdLmFuY2hvcl94ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlLmFuY2hvci54ID0gdGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYlt0aGlzLmtleV9uYW1lXS5hbmNob3JfeDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNwcml0ZS5hbmNob3IueSA9IHRoaXMuZGF0YS5kYnMuaW50ZXJhY3RhYmxlX29iamVjdHNfZGJbdGhpcy5rZXlfbmFtZV0uYW5jaG9yX3k7XG4gICAgICAgIGNvbnN0IHNoaWZ0X3ggPVxuICAgICAgICAgICAgdGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYlt0aGlzLmtleV9uYW1lXS5zaGlmdF94ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IHRoaXMuZGF0YS5kYnMuaW50ZXJhY3RhYmxlX29iamVjdHNfZGJbdGhpcy5rZXlfbmFtZV0uc2hpZnRfeFxuICAgICAgICAgICAgICAgIDogMDtcbiAgICAgICAgY29uc3Qgc2hpZnRfeSA9XG4gICAgICAgICAgICB0aGlzLmRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiW3RoaXMua2V5X25hbWVdLnNoaWZ0X3kgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gdGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYlt0aGlzLmtleV9uYW1lXS5zaGlmdF95XG4gICAgICAgICAgICAgICAgOiAwO1xuICAgICAgICB0aGlzLnNwcml0ZS5jZW50ZXJYID0gKHRoaXMueCArIDEpICogbWFwX3Nwcml0ZS50aWxlV2lkdGggKyBzaGlmdF94O1xuICAgICAgICBjb25zdCBhbmNob3Jfc2hpZnQgPSB0aGlzLmRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiW3RoaXMua2V5X25hbWVdLmFuY2hvcl95ICogbWFwX3Nwcml0ZS50aWxlV2lkdGggKiAwLjU7XG4gICAgICAgIHRoaXMuc3ByaXRlLmNlbnRlclkgPSB0aGlzLnkgKiBtYXBfc3ByaXRlLnRpbGVXaWR0aCAtIGFuY2hvcl9zaGlmdCArIHNoaWZ0X3k7XG4gICAgICAgIHRoaXMuc3ByaXRlX2luZm8uc2V0QW5pbWF0aW9uKHRoaXMuc3ByaXRlLCB0aGlzLmtleV9uYW1lKTtcbiAgICAgICAgY29uc3QgaW5pdGlhbF9hbmltYXRpb24gPSB0aGlzLmRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiW3RoaXMua2V5X25hbWVdLmluaXRpYWxfYW5pbWF0aW9uO1xuICAgICAgICB0aGlzLnNwcml0ZS5hbmltYXRpb25zLnBsYXkodGhpcy5rZXlfbmFtZSArIFwiX1wiICsgaW5pdGlhbF9hbmltYXRpb24pO1xuICAgIH1cblxuICAgIGluaXRpYWxpemVfcmVsYXRlZF9ldmVudHMobWFwX2V2ZW50czogTWFwW1wiZXZlbnRzXCJdLCBtYXA6IE1hcCkge1xuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMuZ2V0X2N1cnJlbnRfcG9zaXRpb24obWFwKTtcbiAgICAgICAgbGV0IHhfcG9zID0gcG9zaXRpb24ueDtcbiAgICAgICAgbGV0IHlfcG9zID0gcG9zaXRpb24ueTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiW3RoaXMua2V5X25hbWVdLmV2ZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgZXZlbnRfaW5mbyA9IHRoaXMuZGF0YS5kYnMuaW50ZXJhY3RhYmxlX29iamVjdHNfZGJbdGhpcy5rZXlfbmFtZV0uZXZlbnRzW2ldO1xuICAgICAgICAgICAgeF9wb3MgKz0gZXZlbnRfaW5mby54X3NoaWZ0ICE9PSB1bmRlZmluZWQgPyBldmVudF9pbmZvLnhfc2hpZnQgOiAwO1xuICAgICAgICAgICAgeV9wb3MgKz0gZXZlbnRfaW5mby55X3NoaWZ0ICE9PSB1bmRlZmluZWQgPyBldmVudF9pbmZvLnlfc2hpZnQgOiAwO1xuICAgICAgICAgICAgbGV0IGNvbGxpZGVyX2xheWVyX3NoaWZ0ID1cbiAgICAgICAgICAgICAgICBldmVudF9pbmZvLmNvbGxpZGVyX2xheWVyX3NoaWZ0ICE9PSB1bmRlZmluZWQgPyBldmVudF9pbmZvLmNvbGxpZGVyX2xheWVyX3NoaWZ0IDogMDtcbiAgICAgICAgICAgIGNvbGxpZGVyX2xheWVyX3NoaWZ0ID1cbiAgICAgICAgICAgICAgICB0aGlzLmNvbGxpZGVyX2xheWVyX3NoaWZ0ICE9PSB1bmRlZmluZWQgPyB0aGlzLmNvbGxpZGVyX2xheWVyX3NoaWZ0IDogY29sbGlkZXJfbGF5ZXJfc2hpZnQ7XG4gICAgICAgICAgICB0aGlzLmNvbGxpZGVyX2xheWVyX3NoaWZ0ID0gY29sbGlkZXJfbGF5ZXJfc2hpZnQ7XG4gICAgICAgICAgICBjb25zdCBhY3RpdmVfZXZlbnQgPSBldmVudF9pbmZvLmFjdGl2ZSAhPT0gdW5kZWZpbmVkID8gZXZlbnRfaW5mby5hY3RpdmUgOiB0cnVlO1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0X2xheWVyID0gdGhpcy5iYXNlX2NvbGxpc2lvbl9sYXllciArIGNvbGxpZGVyX2xheWVyX3NoaWZ0O1xuICAgICAgICAgICAgc3dpdGNoIChldmVudF9pbmZvLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIGludGVyYWN0YWJsZV9vYmplY3RfZXZlbnRfdHlwZXMuSlVNUDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRfanVtcF90eXBlX2V2ZW50KGV2ZW50X2luZm8sIHhfcG9zLCB5X3BvcywgYWN0aXZlX2V2ZW50LCB0YXJnZXRfbGF5ZXIsIG1hcF9ldmVudHMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGludGVyYWN0YWJsZV9vYmplY3RfZXZlbnRfdHlwZXMuSlVNUF9BUk9VTkQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0X2p1bXBfYXJvdW5kX2V2ZW50KGV2ZW50X2luZm8sIHhfcG9zLCB5X3BvcywgYWN0aXZlX2V2ZW50LCB0YXJnZXRfbGF5ZXIsIG1hcF9ldmVudHMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGludGVyYWN0YWJsZV9vYmplY3RfZXZlbnRfdHlwZXMuQ0xJTUI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0X3N0YWlyX2V2ZW50KGV2ZW50X2luZm8sIHhfcG9zLCB5X3BvcywgYWN0aXZlX2V2ZW50LCB0YXJnZXRfbGF5ZXIsIG1hcF9ldmVudHMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5vdF9hbGxvd2VkX3RpbGVfdGVzdCh4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubm90X2FsbG93ZWRfdGlsZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vdF9hbGxvd2VkX3RpbGUgPSB0aGlzLm5vdF9hbGxvd2VkX3RpbGVzW2ldO1xuICAgICAgICAgICAgaWYgKG5vdF9hbGxvd2VkX3RpbGUueCA9PT0geCAmJiBub3RfYWxsb3dlZF90aWxlLnkgPT09IHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgc2V0X2p1bXBfdHlwZV9ldmVudChcbiAgICAgICAgZXZlbnRfaW5mbzogYW55LFxuICAgICAgICB4X3BvczogbnVtYmVyLFxuICAgICAgICB5X3BvczogbnVtYmVyLFxuICAgICAgICBhY3RpdmVfZXZlbnQ6IGJvb2xlYW4sXG4gICAgICAgIHRhcmdldF9sYXllcjogbnVtYmVyLFxuICAgICAgICBtYXBfZXZlbnRzOiBNYXBbXCJldmVudHNcIl1cbiAgICApIHtcbiAgICAgICAgaWYgKHRoaXMubm90X2FsbG93ZWRfdGlsZV90ZXN0KHhfcG9zLCB5X3BvcykpIHJldHVybjtcbiAgICAgICAgY29uc3QgdGhpc19ldmVudF9sb2NhdGlvbl9rZXkgPSBUaWxlRXZlbnQuZ2V0X2xvY2F0aW9uX2tleSh4X3BvcywgeV9wb3MpO1xuICAgICAgICBpZiAoISh0aGlzX2V2ZW50X2xvY2F0aW9uX2tleSBpbiBtYXBfZXZlbnRzKSkge1xuICAgICAgICAgICAgbWFwX2V2ZW50c1t0aGlzX2V2ZW50X2xvY2F0aW9uX2tleV0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdfZXZlbnQgPSBuZXcgSnVtcEV2ZW50KFxuICAgICAgICAgICAgdGhpcy5nYW1lLFxuICAgICAgICAgICAgdGhpcy5kYXRhLFxuICAgICAgICAgICAgeF9wb3MsXG4gICAgICAgICAgICB5X3BvcyxcbiAgICAgICAgICAgIFtkaXJlY3Rpb25zLnVwLCBkaXJlY3Rpb25zLmRvd24sIGRpcmVjdGlvbnMucmlnaHQsIGRpcmVjdGlvbnMubGVmdF0sXG4gICAgICAgICAgICBbdGFyZ2V0X2xheWVyXSxcbiAgICAgICAgICAgIGV2ZW50X2luZm8uZHluYW1pYyxcbiAgICAgICAgICAgIGFjdGl2ZV9ldmVudCxcbiAgICAgICAgICAgIGV2ZW50X2luZm8uaXNfc2V0ID09PSB1bmRlZmluZWQgPyB0cnVlIDogZXZlbnRfaW5mby5pc19zZXRcbiAgICAgICAgKTtcbiAgICAgICAgbWFwX2V2ZW50c1t0aGlzX2V2ZW50X2xvY2F0aW9uX2tleV0ucHVzaChuZXdfZXZlbnQpO1xuICAgICAgICB0aGlzLmluc2VydF9ldmVudChuZXdfZXZlbnQuaWQpO1xuICAgICAgICB0aGlzLmV2ZW50c19pbmZvW2V2ZW50X2luZm8udHlwZV0gPSBldmVudF9pbmZvO1xuICAgICAgICB0aGlzLmNvbGxpc2lvbl9jaGFuZ2VfZnVuY3Rpb25zLnB1c2goKCkgPT4ge1xuICAgICAgICAgICAgbmV3X2V2ZW50LmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycyA9IFt0aGlzLmJhc2VfY29sbGlzaW9uX2xheWVyICsgdGhpcy5jb2xsaWRlcl9sYXllcl9zaGlmdF07XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNldF9qdW1wX2Fyb3VuZF9ldmVudChcbiAgICAgICAgZXZlbnRfaW5mbzogYW55LFxuICAgICAgICB4X3BvczogbnVtYmVyLFxuICAgICAgICB5X3BvczogbnVtYmVyLFxuICAgICAgICBhY3RpdmVfZXZlbnQ6IGJvb2xlYW4sXG4gICAgICAgIHRhcmdldF9sYXllcjogbnVtYmVyLFxuICAgICAgICBtYXBfZXZlbnRzOiBNYXBbXCJldmVudHNcIl1cbiAgICApIHtcbiAgICAgICAgbGV0IGlzX3NldCA9IGV2ZW50X2luZm8uaXNfc2V0ID09PSB1bmRlZmluZWQgPyB0cnVlIDogZXZlbnRfaW5mby5pc19zZXQ7XG4gICAgICAgIGdldF9zdXJyb3VuZGluZ3MoeF9wb3MsIHlfcG9zKS5mb3JFYWNoKChwb3MsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5ub3RfYWxsb3dlZF90aWxlX3Rlc3QocG9zLngsIHBvcy55KSkgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgdGhpc19ldmVudF9sb2NhdGlvbl9rZXkgPSBUaWxlRXZlbnQuZ2V0X2xvY2F0aW9uX2tleShwb3MueCwgcG9zLnkpO1xuICAgICAgICAgICAgaWYgKHRoaXNfZXZlbnRfbG9jYXRpb25fa2V5IGluIG1hcF9ldmVudHMpIHtcbiAgICAgICAgICAgICAgICAvL2NoZWNrIGlmIGFscmVhZHkgdGhlcmVzIGEganVtcCBldmVudCBpbiB0aGlzIHBsYWNlXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBtYXBfZXZlbnRzW3RoaXNfZXZlbnRfbG9jYXRpb25fa2V5XS5sZW5ndGg7ICsraykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBldmVudCA9IG1hcF9ldmVudHNbdGhpc19ldmVudF9sb2NhdGlvbl9rZXldW2tdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gdGlsZV9ldmVudF90eXBlcy5KVU1QICYmIChldmVudCBhcyBKdW1wRXZlbnQpLmlzX3NldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycy5pbmNsdWRlcyh0YXJnZXRfbGF5ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNfc2V0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1hcF9ldmVudHNbdGhpc19ldmVudF9sb2NhdGlvbl9rZXldID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBuZXdfZXZlbnQgPSBuZXcgSnVtcEV2ZW50KFxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEsXG4gICAgICAgICAgICAgICAgcG9zLngsXG4gICAgICAgICAgICAgICAgcG9zLnksXG4gICAgICAgICAgICAgICAgW2RpcmVjdGlvbnMucmlnaHQsIGRpcmVjdGlvbnMubGVmdCwgZGlyZWN0aW9ucy5kb3duLCBkaXJlY3Rpb25zLnVwXVtpbmRleF0sXG4gICAgICAgICAgICAgICAgW3RoaXMuYmFzZV9jb2xsaXNpb25fbGF5ZXJdLFxuICAgICAgICAgICAgICAgIGV2ZW50X2luZm8uZHluYW1pYyxcbiAgICAgICAgICAgICAgICBhY3RpdmVfZXZlbnQsXG4gICAgICAgICAgICAgICAgaXNfc2V0XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbWFwX2V2ZW50c1t0aGlzX2V2ZW50X2xvY2F0aW9uX2tleV0ucHVzaChuZXdfZXZlbnQpO1xuICAgICAgICAgICAgdGhpcy5pbnNlcnRfZXZlbnQobmV3X2V2ZW50LmlkKTtcbiAgICAgICAgICAgIHRoaXMuY29sbGlzaW9uX2NoYW5nZV9mdW5jdGlvbnMucHVzaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgbmV3X2V2ZW50LmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycyA9IFt0aGlzLmJhc2VfY29sbGlzaW9uX2xheWVyXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5ldmVudHNfaW5mb1tldmVudF9pbmZvLnR5cGVdID0gZXZlbnRfaW5mbztcbiAgICB9XG5cbiAgICBzZXRfc3RhaXJfZXZlbnQoXG4gICAgICAgIGV2ZW50X2luZm86IGFueSxcbiAgICAgICAgeF9wb3M6IG51bWJlcixcbiAgICAgICAgeV9wb3M6IG51bWJlcixcbiAgICAgICAgYWN0aXZlX2V2ZW50OiBib29sZWFuLFxuICAgICAgICB0YXJnZXRfbGF5ZXI6IG51bWJlcixcbiAgICAgICAgbWFwX2V2ZW50czogTWFwW1wiZXZlbnRzXCJdXG4gICAgKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50c19kYXRhID0gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IHhfcG9zLFxuICAgICAgICAgICAgICAgIHk6IHlfcG9zICsgMSxcbiAgICAgICAgICAgICAgICBhY3RpdmF0aW9uX2RpcmVjdGlvbnM6IFtkaXJlY3Rpb25zLnVwXSxcbiAgICAgICAgICAgICAgICBhY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnM6IFt0aGlzLmJhc2VfY29sbGlzaW9uX2xheWVyXSxcbiAgICAgICAgICAgICAgICBjaGFuZ2VfdG9fY29sbGlzaW9uX2xheWVyOiB0aGlzLmJhc2VfY29sbGlzaW9uX2xheWVyICsgdGhpcy5pbnRlcm1lZGlhdGVfY29sbGlkZXJfbGF5ZXJfc2hpZnQsXG4gICAgICAgICAgICAgICAgY2xpbWJpbmdfb25seTogZmFsc2UsXG4gICAgICAgICAgICAgICAgY29sbGlzaW9uX2NoYW5nZV9mdW5jdGlvbjogZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBldmVudC5hY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMgPSBbdGhpcy5iYXNlX2NvbGxpc2lvbl9sYXllcl07XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmNoYW5nZV90b19jb2xsaXNpb25fbGF5ZXIgPVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXNlX2NvbGxpc2lvbl9sYXllciArIHRoaXMuaW50ZXJtZWRpYXRlX2NvbGxpZGVyX2xheWVyX3NoaWZ0O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IHhfcG9zLFxuICAgICAgICAgICAgICAgIHk6IHlfcG9zLFxuICAgICAgICAgICAgICAgIGFjdGl2YXRpb25fZGlyZWN0aW9uczogW2RpcmVjdGlvbnMuZG93bl0sXG4gICAgICAgICAgICAgICAgYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzOiBbdGhpcy5iYXNlX2NvbGxpc2lvbl9sYXllciArIHRoaXMuaW50ZXJtZWRpYXRlX2NvbGxpZGVyX2xheWVyX3NoaWZ0XSxcbiAgICAgICAgICAgICAgICBjaGFuZ2VfdG9fY29sbGlzaW9uX2xheWVyOiB0aGlzLmJhc2VfY29sbGlzaW9uX2xheWVyLFxuICAgICAgICAgICAgICAgIGNsaW1iaW5nX29ubHk6IHRydWUsXG4gICAgICAgICAgICAgICAgY29sbGlzaW9uX2NoYW5nZV9mdW5jdGlvbjogZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBldmVudC5hY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJhc2VfY29sbGlzaW9uX2xheWVyICsgdGhpcy5pbnRlcm1lZGlhdGVfY29sbGlkZXJfbGF5ZXJfc2hpZnQsXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmNoYW5nZV90b19jb2xsaXNpb25fbGF5ZXIgPSB0aGlzLmJhc2VfY29sbGlzaW9uX2xheWVyO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IHhfcG9zLFxuICAgICAgICAgICAgICAgIHk6IHlfcG9zICsgZXZlbnRfaW5mby5sYXN0X3lfc2hpZnQgKyAxLFxuICAgICAgICAgICAgICAgIGFjdGl2YXRpb25fZGlyZWN0aW9uczogW2RpcmVjdGlvbnMudXBdLFxuICAgICAgICAgICAgICAgIGFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVyczogW3RoaXMuYmFzZV9jb2xsaXNpb25fbGF5ZXIgKyB0aGlzLmludGVybWVkaWF0ZV9jb2xsaWRlcl9sYXllcl9zaGlmdF0sXG4gICAgICAgICAgICAgICAgY2hhbmdlX3RvX2NvbGxpc2lvbl9sYXllcjogdGFyZ2V0X2xheWVyLFxuICAgICAgICAgICAgICAgIGNsaW1iaW5nX29ubHk6IHRydWUsXG4gICAgICAgICAgICAgICAgY29sbGlzaW9uX2NoYW5nZV9mdW5jdGlvbjogZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBldmVudC5hY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJhc2VfY29sbGlzaW9uX2xheWVyICsgdGhpcy5pbnRlcm1lZGlhdGVfY29sbGlkZXJfbGF5ZXJfc2hpZnQsXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmNoYW5nZV90b19jb2xsaXNpb25fbGF5ZXIgPSB0aGlzLmJhc2VfY29sbGlzaW9uX2xheWVyICsgdGhpcy5jb2xsaWRlcl9sYXllcl9zaGlmdDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiB4X3BvcyxcbiAgICAgICAgICAgICAgICB5OiB5X3BvcyArIGV2ZW50X2luZm8ubGFzdF95X3NoaWZ0LFxuICAgICAgICAgICAgICAgIGFjdGl2YXRpb25fZGlyZWN0aW9uczogW2RpcmVjdGlvbnMuZG93bl0sXG4gICAgICAgICAgICAgICAgYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzOiBbdGFyZ2V0X2xheWVyXSxcbiAgICAgICAgICAgICAgICBjaGFuZ2VfdG9fY29sbGlzaW9uX2xheWVyOiB0aGlzLmJhc2VfY29sbGlzaW9uX2xheWVyICsgdGhpcy5pbnRlcm1lZGlhdGVfY29sbGlkZXJfbGF5ZXJfc2hpZnQsXG4gICAgICAgICAgICAgICAgY2xpbWJpbmdfb25seTogZmFsc2UsXG4gICAgICAgICAgICAgICAgY29sbGlzaW9uX2NoYW5nZV9mdW5jdGlvbjogZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBldmVudC5hY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMgPSBbdGhpcy5iYXNlX2NvbGxpc2lvbl9sYXllciArIHRoaXMuY29sbGlkZXJfbGF5ZXJfc2hpZnRdO1xuICAgICAgICAgICAgICAgICAgICBldmVudC5jaGFuZ2VfdG9fY29sbGlzaW9uX2xheWVyID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmFzZV9jb2xsaXNpb25fbGF5ZXIgKyB0aGlzLmludGVybWVkaWF0ZV9jb2xsaWRlcl9sYXllcl9zaGlmdDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXTtcbiAgICAgICAgZXZlbnRzX2RhdGEuZm9yRWFjaChldmVudF9kYXRhID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRoaXNfbG9jYXRpb25fa2V5ID0gVGlsZUV2ZW50LmdldF9sb2NhdGlvbl9rZXkoZXZlbnRfZGF0YS54LCBldmVudF9kYXRhLnkpO1xuICAgICAgICAgICAgaWYgKCEodGhpc19sb2NhdGlvbl9rZXkgaW4gbWFwX2V2ZW50cykpIHtcbiAgICAgICAgICAgICAgICBtYXBfZXZlbnRzW3RoaXNfbG9jYXRpb25fa2V5XSA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbmV3X2V2ZW50ID0gbmV3IENsaW1iRXZlbnQoXG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLFxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YSxcbiAgICAgICAgICAgICAgICBldmVudF9kYXRhLngsXG4gICAgICAgICAgICAgICAgZXZlbnRfZGF0YS55LFxuICAgICAgICAgICAgICAgIGV2ZW50X2RhdGEuYWN0aXZhdGlvbl9kaXJlY3Rpb25zLFxuICAgICAgICAgICAgICAgIGV2ZW50X2RhdGEuYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzLFxuICAgICAgICAgICAgICAgIGV2ZW50X2luZm8uZHluYW1pYyxcbiAgICAgICAgICAgICAgICBhY3RpdmVfZXZlbnQsXG4gICAgICAgICAgICAgICAgZXZlbnRfZGF0YS5jaGFuZ2VfdG9fY29sbGlzaW9uX2xheWVyLFxuICAgICAgICAgICAgICAgIGV2ZW50X2luZm8uaXNfc2V0LFxuICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgZXZlbnRfZGF0YS5jbGltYmluZ19vbmx5XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbWFwX2V2ZW50c1t0aGlzX2xvY2F0aW9uX2tleV0ucHVzaChuZXdfZXZlbnQpO1xuICAgICAgICAgICAgdGhpcy5pbnNlcnRfZXZlbnQobmV3X2V2ZW50LmlkKTtcbiAgICAgICAgICAgIHRoaXMuY29sbGlzaW9uX2NoYW5nZV9mdW5jdGlvbnMucHVzaChldmVudF9kYXRhLmNvbGxpc2lvbl9jaGFuZ2VfZnVuY3Rpb24uYmluZChudWxsLCBuZXdfZXZlbnQpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZXZlbnRzX2luZm9bZXZlbnRfaW5mby50eXBlXSA9IGV2ZW50X2luZm87XG4gICAgfVxuXG4gICAgY29uZmlnX2JvZHkoY29sbGlzaW9uX29iajogQ29sbGlzaW9uKSB7XG4gICAgICAgIGlmICh0aGlzLmRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiW3RoaXMua2V5X25hbWVdLmJvZHlfcmFkaXVzID09PSAwKSByZXR1cm47XG4gICAgICAgIGNvbnN0IGNvbGxpc2lvbl9ncm91cHMgPSBjb2xsaXNpb25fb2JqLmludGVyYWN0YWJsZV9vYmpzX2NvbGxpc2lvbl9ncm91cHM7XG4gICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLmVuYWJsZSh0aGlzLnNwcml0ZSwgZmFsc2UpO1xuICAgICAgICB0aGlzLnNwcml0ZS5hbmNob3IueSA9IHRoaXMuZGF0YS5kYnMuaW50ZXJhY3RhYmxlX29iamVjdHNfZGJbdGhpcy5rZXlfbmFtZV0uYW5jaG9yX3k7IC8vSW1wb3J0YW50IHRvIGJlIGFmdGVyIHRoZSBwcmV2aW91cyBjb21tYW5kXG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkuY2xlYXJTaGFwZXMoKTtcbiAgICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLmRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiW3RoaXMua2V5X25hbWVdLmJvZHlfcmFkaXVzIDw8IDE7XG4gICAgICAgIGNvbnN0IHBvbHlnb24gPSBtb3VudF9jb2xsaXNpb25fcG9seWdvbihcbiAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgLSh3aWR0aCA+PiAxKSxcbiAgICAgICAgICAgIHRoaXMuZGF0YS5kYnMuaW50ZXJhY3RhYmxlX29iamVjdHNfZGJbdGhpcy5rZXlfbmFtZV0uY29sbGlzaW9uX2JvZHlfYmV2ZWxcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zcHJpdGUuYm9keS5hZGRQb2x5Z29uKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9wdGltYWxEZWNvbXA6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNraXBTaW1wbGVDaGVjazogdHJ1ZSxcbiAgICAgICAgICAgICAgICByZW1vdmVDb2xsaW5lYXJQb2ludHM6IGZhbHNlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBvbHlnb25cbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zcHJpdGUuYm9keS5zZXRDb2xsaXNpb25Hcm91cChjb2xsaXNpb25fZ3JvdXBzW3RoaXMuYmFzZV9jb2xsaXNpb25fbGF5ZXJdKTtcbiAgICAgICAgdGhpcy5zcHJpdGUuYm9keS5kYW1waW5nID0gMTtcbiAgICAgICAgdGhpcy5zcHJpdGUuYm9keS5hbmd1bGFyRGFtcGluZyA9IDE7XG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkuc2V0WmVyb1JvdGF0aW9uKCk7XG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkuZml4ZWRSb3RhdGlvbiA9IHRydWU7XG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkuZHluYW1pYyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNwcml0ZS5ib2R5LnN0YXRpYyA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLmN1c3RvbV9kYXRhLmJsb2NrX3N0YWlyX2NvbGxpZGVyX2xheWVyX3NoaWZ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRpbmdfYmxvY2tpbmdfc3RhaXJfYmxvY2soY29sbGlzaW9uX29iaik7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQge2Jhc2VfYWN0aW9ucywgZGlyZWN0aW9ucywgcmV2ZXJzZV9kaXJlY3Rpb25zfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCB7SnVtcEV2ZW50fSBmcm9tIFwiLi9KdW1wRXZlbnRcIjtcbmltcG9ydCB7VGlsZUV2ZW50LCBldmVudF90eXBlc30gZnJvbSBcIi4vVGlsZUV2ZW50XCI7XG5pbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gXCIuLi9tYWdpY19udW1iZXJzXCI7XG5cbmV4cG9ydCBjbGFzcyBDbGltYkV2ZW50IGV4dGVuZHMgVGlsZUV2ZW50IHtcbiAgICBwdWJsaWMgY2hhbmdlX3RvX2NvbGxpc2lvbl9sYXllcjogbnVtYmVyO1xuICAgIHB1YmxpYyBpc19zZXQ6IGJvb2xlYW47XG4gICAgcHVibGljIGNsaW1iaW5nX29ubHk6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgZ2FtZSxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgeCxcbiAgICAgICAgeSxcbiAgICAgICAgYWN0aXZhdGlvbl9kaXJlY3Rpb25zLFxuICAgICAgICBhY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMsXG4gICAgICAgIGR5bmFtaWMsXG4gICAgICAgIGFjdGl2ZSxcbiAgICAgICAgY2hhbmdlX3RvX2NvbGxpc2lvbl9sYXllcixcbiAgICAgICAgaXNfc2V0PyxcbiAgICAgICAgb3JpZ2luX2ludGVyYWN0YWJsZV9vYmplY3Q/LFxuICAgICAgICBjbGltYmluZ19vbmx5P1xuICAgICkge1xuICAgICAgICBzdXBlcihcbiAgICAgICAgICAgIGdhbWUsXG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgZXZlbnRfdHlwZXMuQ0xJTUIsXG4gICAgICAgICAgICB4LFxuICAgICAgICAgICAgeSxcbiAgICAgICAgICAgIGFjdGl2YXRpb25fZGlyZWN0aW9ucyxcbiAgICAgICAgICAgIGFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycyxcbiAgICAgICAgICAgIGR5bmFtaWMsXG4gICAgICAgICAgICBhY3RpdmUsXG4gICAgICAgICAgICBvcmlnaW5faW50ZXJhY3RhYmxlX29iamVjdFxuICAgICAgICApO1xuICAgICAgICB0aGlzLmNoYW5nZV90b19jb2xsaXNpb25fbGF5ZXIgPSBjaGFuZ2VfdG9fY29sbGlzaW9uX2xheWVyO1xuICAgICAgICB0aGlzLmlzX3NldCA9IGlzX3NldCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGlzX3NldDtcbiAgICAgICAgdGhpcy5jbGltYmluZ19vbmx5ID0gY2xpbWJpbmdfb25seSA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBjbGltYmluZ19vbmx5O1xuICAgIH1cblxuICAgIGZpcmUoYWN0aXZhdGlvbl9kaXJlY3Rpb24pIHtcbiAgICAgICAgaWYgKCF0aGlzLmRhdGEuaGVyby5zdG9wX2J5X2NvbGxpZGluZyB8fCAhdGhpcy5jaGVja19wb3NpdGlvbigpIHx8ICF0aGlzLmRhdGEuaGVyb19tb3ZlbWVudF9hbGxvd2VkKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuZGF0YS5oZXJvLmNsaW1iaW5nICYmICF0aGlzLmNsaW1iaW5nX29ubHkpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRfY2xpbWJpbmcoYWN0aXZhdGlvbl9kaXJlY3Rpb24pO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgKHRoaXMuZGF0YS5oZXJvLmNsaW1iaW5nICYmICF0aGlzLmNsaW1iaW5nX29ubHkpIHx8XG4gICAgICAgICAgICAodGhpcy5kYXRhLmhlcm8uY2xpbWJpbmcgJiYgdGhpcy5jbGltYmluZ19vbmx5KVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMuZmluaXNoX2NsaW1iaW5nKGFjdGl2YXRpb25fZGlyZWN0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXJ0X2NsaW1iaW5nKGFjdGl2YXRpb25fZGlyZWN0aW9uKSB7XG4gICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLnBhdXNlKCk7XG4gICAgICAgIGlmICh0aGlzLmNoYW5nZV90b19jb2xsaXNpb25fbGF5ZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5jb2xsaXNpb24uY2hhbmdlX21hcF9ib2R5KHRoaXMuZGF0YSwgdGhpcy5jaGFuZ2VfdG9fY29sbGlzaW9uX2xheWVyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLm9uX2V2ZW50ID0gdHJ1ZTtcbiAgICAgICAgaWYgKGFjdGl2YXRpb25fZGlyZWN0aW9uID09PSBkaXJlY3Rpb25zLmRvd24pIHtcbiAgICAgICAgICAgIGNvbnN0IHR1cm5fYW5pbWF0aW9uID0gdGhpcy5kYXRhLmhlcm8ucGxheShiYXNlX2FjdGlvbnMuQ0xJTUIsIFwidHVyblwiKTtcbiAgICAgICAgICAgIHR1cm5fYW5pbWF0aW9uLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc2hhZG93LnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBjb25zdCB4X3R3ZWVuID0gdGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZVdpZHRoICogKHRoaXMueCArIDAuNSk7XG4gICAgICAgICAgICAgICAgY29uc3QgeV90d2VlbiA9IHRoaXMuZGF0YS5oZXJvLnNwcml0ZS55ICsgMjU7XG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLmFkZFxuICAgICAgICAgICAgICAgICAgICAudHdlZW4odGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkpXG4gICAgICAgICAgICAgICAgICAgIC50byh7eDogeF90d2VlbiwgeTogeV90d2Vlbn0sIDMwMCwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnRfYW5pbWF0aW9uID0gdGhpcy5kYXRhLmhlcm8ucGxheShiYXNlX2FjdGlvbnMuQ0xJTUIsIFwic3RhcnRcIik7XG4gICAgICAgICAgICAgICAgc3RhcnRfYW5pbWF0aW9uLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnBsYXkoYmFzZV9hY3Rpb25zLkNMSU1CLCBiYXNlX2FjdGlvbnMuSURMRSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS50aWxlX2V2ZW50X21hbmFnZXIub25fZXZlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uY2xpbWJpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5jdXJyZW50X2FjdGlvbiA9IGJhc2VfYWN0aW9ucy5DTElNQjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZHluYW1pYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVfY2xpbWJfY29sbGlzaW9uX2JvZGllcygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLnJlc3VtZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoYWN0aXZhdGlvbl9kaXJlY3Rpb24gPT09IGRpcmVjdGlvbnMudXApIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnBsYXkoYmFzZV9hY3Rpb25zLkNMSU1CLCBiYXNlX2FjdGlvbnMuSURMRSk7XG4gICAgICAgICAgICBjb25zdCBvdXRfdGltZSA9IFBoYXNlci5UaW1lci5RVUFSVEVSIC8gMztcbiAgICAgICAgICAgIGNvbnN0IHhfdHdlZW4gPSB0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlV2lkdGggKiAodGhpcy54ICsgMC41KTtcbiAgICAgICAgICAgIGNvbnN0IHlfdHdlZW4gPSB0aGlzLmRhdGEuaGVyby5zcHJpdGUueSAtIDE1O1xuICAgICAgICAgICAgaWYgKHRoaXMuZHluYW1pYykge1xuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlX2NsaW1iX2NvbGxpc2lvbl9ib2RpZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZ2FtZS5hZGRcbiAgICAgICAgICAgICAgICAudHdlZW4odGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkpXG4gICAgICAgICAgICAgICAgLnRvKHt4OiB4X3R3ZWVuLCB5OiB5X3R3ZWVufSwgb3V0X3RpbWUsIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsIHRydWUpXG4gICAgICAgICAgICAgICAgLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLnJlc3VtZSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLm9uX2V2ZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLmNsaW1iaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnNoYWRvdy52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5jdXJyZW50X2FjdGlvbiA9IGJhc2VfYWN0aW9ucy5DTElNQjtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLmlkbGVfY2xpbWJpbmcgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZmluaXNoX2NsaW1iaW5nKGFjdGl2YXRpb25fZGlyZWN0aW9uKSB7XG4gICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLnBhdXNlKCk7XG4gICAgICAgIGlmIChhY3RpdmF0aW9uX2RpcmVjdGlvbiA9PT0gZGlyZWN0aW9ucy51cCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRhdGEubWFwLmludGVyYWN0YWJsZV9vYmplY3RzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dF9pbnRlcmFjdGFibGVfb2JqZWN0ID0gdGhpcy5kYXRhLm1hcC5pbnRlcmFjdGFibGVfb2JqZWN0c1tpXTtcbiAgICAgICAgICAgICAgICBpZiAobmV4dF9pbnRlcmFjdGFibGVfb2JqZWN0LmN1cnJlbnRfeCAhPT0gdGhpcy54IHx8IG5leHRfaW50ZXJhY3RhYmxlX29iamVjdC5jdXJyZW50X3kgIT09IHRoaXMueSAtIDEpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoYW5nZV90b19jb2xsaXNpb25fbGF5ZXIgIT09IG5leHRfaW50ZXJhY3RhYmxlX29iamVjdC5iYXNlX2NvbGxpc2lvbl9sYXllcikgY29udGludWU7XG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLnBoeXNpY3MucDIucmVzdW1lKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuY2hhbmdlX3RvX2NvbGxpc2lvbl9sYXllciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5jb2xsaXNpb24uY2hhbmdlX21hcF9ib2R5KHRoaXMuZGF0YSwgdGhpcy5jaGFuZ2VfdG9fY29sbGlzaW9uX2xheWVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGF0YS50aWxlX2V2ZW50X21hbmFnZXIub25fZXZlbnQgPSB0cnVlO1xuICAgICAgICAgICAgY29uc3QgZW5kX2FuaW1hdGlvbiA9IHRoaXMuZGF0YS5oZXJvLnBsYXkoYmFzZV9hY3Rpb25zLkNMSU1CLCBcImVuZFwiKTtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnNoYWRvdy52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmdhbWUuYWRkXG4gICAgICAgICAgICAgICAgLnR3ZWVuKHRoaXMuZGF0YS5oZXJvLnNwcml0ZS5ib2R5KVxuICAgICAgICAgICAgICAgIC50byh7eTogdGhpcy5kYXRhLmhlcm8uc3ByaXRlLnkgLSAxNX0sIDE3MCwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSwgdHJ1ZSk7XG4gICAgICAgICAgICBjb25zdCBmaW5hbF9zaGFkb3dfcG9zID0gdGhpcy5kYXRhLmhlcm8uc3ByaXRlLnkgLSAxNTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5hZGQoMTcwLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc2hhZG93LnkgPSBmaW5hbF9zaGFkb3dfcG9zO1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnNoYWRvdy52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZW5kX2FuaW1hdGlvbi5vbkNvbXBsZXRlLmFkZE9uY2UoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5hZGQoXG4gICAgICAgICAgICAgICAgICAgIDE1MCxcbiAgICAgICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc2hhZG93LnkgPSB0aGlzLmRhdGEuaGVyby5zcHJpdGUueTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnBsYXkoYmFzZV9hY3Rpb25zLklETEUsIHJldmVyc2VfZGlyZWN0aW9uc1tkaXJlY3Rpb25zLnVwXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5keW5hbWljKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVfY2xpbWJfY29sbGlzaW9uX2JvZGllcyhmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWUudGltZS5ldmVudHMuYWRkKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDI1MCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS50aWxlX2V2ZW50X21hbmFnZXIub25fZXZlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uY2xpbWJpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uY3VycmVudF9hY3Rpb24gPSBiYXNlX2FjdGlvbnMuSURMRTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc2V0X2RpcmVjdGlvbihkaXJlY3Rpb25zLnVwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lLnBoeXNpY3MucDIucmVzdW1lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKGFjdGl2YXRpb25fZGlyZWN0aW9uID09PSBkaXJlY3Rpb25zLmRvd24pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNoYW5nZV90b19jb2xsaXNpb25fbGF5ZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuY29sbGlzaW9uLmNoYW5nZV9tYXBfYm9keSh0aGlzLmRhdGEsIHRoaXMuY2hhbmdlX3RvX2NvbGxpc2lvbl9sYXllcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLm9uX2V2ZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnBsYXkoYmFzZV9hY3Rpb25zLklETEUsIHJldmVyc2VfZGlyZWN0aW9uc1tkaXJlY3Rpb25zLnVwXSk7XG4gICAgICAgICAgICBjb25zdCBvdXRfdGltZSA9IFBoYXNlci5UaW1lci5RVUFSVEVSID4+IDE7XG4gICAgICAgICAgICB0aGlzLmdhbWUuYWRkXG4gICAgICAgICAgICAgICAgLnR3ZWVuKHRoaXMuZGF0YS5oZXJvLnNwcml0ZS5ib2R5KVxuICAgICAgICAgICAgICAgIC50byhcbiAgICAgICAgICAgICAgICAgICAge3k6IFt0aGlzLmRhdGEuaGVyby5zcHJpdGUueSAtIDQsIHRoaXMuZGF0YS5oZXJvLnNwcml0ZS55ICsgMTVdfSxcbiAgICAgICAgICAgICAgICAgICAgb3V0X3RpbWUsXG4gICAgICAgICAgICAgICAgICAgIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsXG4gICAgICAgICAgICAgICAgICAgIHRydWVcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5hZGQoXG4gICAgICAgICAgICAgICAgICAgICAgICA1MCxcbiAgICAgICAgICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLm9uX2V2ZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uY2xpbWJpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWUucGh5c2ljcy5wMi5yZXN1bWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAodGhpcy5keW5hbWljKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVfY2xpbWJfY29sbGlzaW9uX2JvZGllcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc2hhZG93LnkgPSB0aGlzLmRhdGEuaGVyby5zcHJpdGUueSArIDE1O1xuICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc2hhZG93LnZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uY3VycmVudF9hY3Rpb24gPSBiYXNlX2FjdGlvbnMuSURMRTtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnNldF9kaXJlY3Rpb24oZGlyZWN0aW9ucy51cCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVfY2xpbWJfY29sbGlzaW9uX2JvZGllcygpIHtcbiAgICAgICAgdGhpcy5vcmlnaW5faW50ZXJhY3RhYmxlX29iamVjdC5zcHJpdGUuc2VuZF90b19iYWNrID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgcG9zdGlvbnMgPSB0aGlzLm9yaWdpbl9pbnRlcmFjdGFibGVfb2JqZWN0LmV2ZW50c19pbmZvLmNsaW1iLmNvbGxpc2lvbl90aWxlcy5tYXAodGlsZV9zaGlmdCA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHg6IHRoaXMub3JpZ2luX2ludGVyYWN0YWJsZV9vYmplY3QuY3VycmVudF94ICsgdGlsZV9zaGlmdC54LFxuICAgICAgICAgICAgICAgIHk6IHRoaXMub3JpZ2luX2ludGVyYWN0YWJsZV9vYmplY3QuY3VycmVudF95ICsgdGlsZV9zaGlmdC55LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIEp1bXBFdmVudC51bnNldF9zZXRfanVtcF9jb2xsaXNpb24odGhpcy5kYXRhKTtcbiAgICAgICAgdGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkucmVtb3ZlQ29sbGlzaW9uR3JvdXAodGhpcy5kYXRhLmNvbGxpc2lvbi5tYXBfY29sbGlzaW9uX2dyb3VwLCB0cnVlKTtcbiAgICAgICAgdGhpcy5kYXRhLm1hcC5jb2xsaXNpb25fc3ByaXRlLmJvZHkucmVtb3ZlQ29sbGlzaW9uR3JvdXAodGhpcy5kYXRhLmNvbGxpc2lvbi5oZXJvX2NvbGxpc2lvbl9ncm91cCwgdHJ1ZSk7XG4gICAgICAgIGZvciAobGV0IGNvbGxpZGVfaW5kZXggaW4gdGhpcy5kYXRhLmNvbGxpc2lvbi5pbnRlcmFjdGFibGVfb2Jqc19jb2xsaXNpb25fZ3JvdXBzKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keS5yZW1vdmVDb2xsaXNpb25Hcm91cChcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuY29sbGlzaW9uLmludGVyYWN0YWJsZV9vYmpzX2NvbGxpc2lvbl9ncm91cHNbY29sbGlkZV9pbmRleF0sXG4gICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc3Rpb25zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCB4X3BvcyA9IChwb3N0aW9uc1tpXS54ICsgMC41KSAqIHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVXaWR0aDtcbiAgICAgICAgICAgIGNvbnN0IHlfcG9zID0gKHBvc3Rpb25zW2ldLnkgKyAwLjUpICogdGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZUhlaWdodDtcbiAgICAgICAgICAgIGxldCBib2R5ID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlQm9keSh4X3BvcywgeV9wb3MsIDAsIHRydWUpO1xuICAgICAgICAgICAgYm9keS5jbGVhclNoYXBlcygpO1xuICAgICAgICAgICAgYm9keS5zZXRSZWN0YW5nbGUodGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZVdpZHRoLCB0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlSGVpZ2h0LCAwLCAwKTtcbiAgICAgICAgICAgIGJvZHkuc2V0Q29sbGlzaW9uR3JvdXAodGhpcy5kYXRhLmNvbGxpc2lvbi5keW5hbWljX2V2ZW50c19jb2xsaXNpb25fZ3JvdXApO1xuICAgICAgICAgICAgYm9keS5kYW1waW5nID0gbnVtYmVycy5NQVBfREFNUElORztcbiAgICAgICAgICAgIGJvZHkuYW5ndWxhckRhbXBpbmcgPSBudW1iZXJzLk1BUF9EQU1QSU5HO1xuICAgICAgICAgICAgYm9keS5zZXRaZXJvUm90YXRpb24oKTtcbiAgICAgICAgICAgIGJvZHkuZml4ZWRSb3RhdGlvbiA9IHRydWU7XG4gICAgICAgICAgICBib2R5LmR5bmFtaWMgPSBmYWxzZTtcbiAgICAgICAgICAgIGJvZHkuc3RhdGljID0gdHJ1ZTtcbiAgICAgICAgICAgIGJvZHkuZGVidWcgPSB0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keS5kZWJ1ZztcbiAgICAgICAgICAgIGJvZHkuY29sbGlkZXModGhpcy5kYXRhLmNvbGxpc2lvbi5oZXJvX2NvbGxpc2lvbl9ncm91cCk7XG4gICAgICAgICAgICB0aGlzLm9yaWdpbl9pbnRlcmFjdGFibGVfb2JqZWN0LmN1c3RvbV9kYXRhLmNvbGxpc2lvbl90aWxlc19ib2RpZXMucHVzaChib2R5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbW92ZV9jbGltYl9jb2xsaXNpb25fYm9kaWVzKGNvbGxpZGVfd2l0aF9tYXAgPSB0cnVlKSB7XG4gICAgICAgIHRoaXMub3JpZ2luX2ludGVyYWN0YWJsZV9vYmplY3Quc3ByaXRlLnNlbmRfdG9fYmFjayA9IGZhbHNlO1xuICAgICAgICBKdW1wRXZlbnQuc2V0X2p1bXBfY29sbGlzaW9uKHRoaXMuZ2FtZSwgdGhpcy5kYXRhKTtcbiAgICAgICAgaWYgKGNvbGxpZGVfd2l0aF9tYXApIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnNwcml0ZS5ib2R5LmNvbGxpZGVzKHRoaXMuZGF0YS5jb2xsaXNpb24ubWFwX2NvbGxpc2lvbl9ncm91cCk7XG4gICAgICAgICAgICB0aGlzLmRhdGEubWFwLmNvbGxpc2lvbl9zcHJpdGUuYm9keS5jb2xsaWRlcyh0aGlzLmRhdGEuY29sbGlzaW9uLmhlcm9fY29sbGlzaW9uX2dyb3VwKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBjb2xsaWRlX2luZGV4IGluIHRoaXMuZGF0YS5jb2xsaXNpb24uaW50ZXJhY3RhYmxlX29ianNfY29sbGlzaW9uX2dyb3Vwcykge1xuICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkucmVtb3ZlQ29sbGlzaW9uR3JvdXAoXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmNvbGxpc2lvbi5pbnRlcmFjdGFibGVfb2Jqc19jb2xsaXNpb25fZ3JvdXBzW2NvbGxpZGVfaW5kZXhdLFxuICAgICAgICAgICAgICAgIHRydWVcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZGF0YS5tYXAuY29sbGlzaW9uX2xheWVyIGluIHRoaXMuZGF0YS5jb2xsaXNpb24uaW50ZXJhY3RhYmxlX29ianNfY29sbGlzaW9uX2dyb3Vwcykge1xuICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkuY29sbGlkZXMoXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmNvbGxpc2lvbi5pbnRlcmFjdGFibGVfb2Jqc19jb2xsaXNpb25fZ3JvdXBzW3RoaXMuZGF0YS5tYXAuY29sbGlzaW9uX2xheWVyXVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgYm9kaWVzID0gdGhpcy5vcmlnaW5faW50ZXJhY3RhYmxlX29iamVjdC5jdXN0b21fZGF0YS5jb2xsaXNpb25fdGlsZXNfYm9kaWVzO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgYm9kaWVzW2ldLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICBib2RpZXMgPSBbXTtcbiAgICB9XG59XG4iLCJpbXBvcnQge01haW5DaGFyfSBmcm9tIFwiLi4vTWFpbkNoYXJcIjtcbmltcG9ydCB7VGV4dE9iaiwgV2luZG93fSBmcm9tIFwiLi4vV2luZG93XCI7XG5cbmNvbnN0IEJBU0VfV0lOX1dJRFRIID0gMTAwO1xuY29uc3QgQkFTRV9XSU5fSEVJR0hUID0gOTI7XG5jb25zdCBCQVNFX1dJTl9YID0gMDtcbmNvbnN0IEJBU0VfV0lOX1kgPSA0MDtcblxuLypBIHdpbmRvdyB0ZW1wbGF0ZSB3aXRoIGNoYXJhY3RlciBpbmZvcm1hdGlvblxuVXNlZCBmb3IgUHN5bmVyZ3kgYW5kIEl0ZW0gbWVudXNcblxuSW5wdXQ6IGdhbWUgW1BoYXNlcjpHYW1lXSAtIFJlZmVyZW5jZSB0byB0aGUgcnVubmluZyBnYW1lIG9iamVjdCovXG5leHBvcnQgY2xhc3MgQmFzaWNJbmZvV2luZG93IHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGNoYXI6IE1haW5DaGFyO1xuICAgIHB1YmxpYyB3aW5kb3dfb3BlbjogYm9vbGVhbjtcbiAgICBwdWJsaWMgeDogbnVtYmVyO1xuICAgIHB1YmxpYyB5OiBudW1iZXI7XG4gICAgcHVibGljIGJhc2Vfd2luZG93OiBXaW5kb3c7XG4gICAgcHVibGljIGF2YXRhcl9ncm91cDogUGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyB4X2F2YXRhcjogbnVtYmVyO1xuICAgIHB1YmxpYyB5X2F2YXRhcjogbnVtYmVyO1xuICAgIHB1YmxpYyBhdmF0YXI6IFBoYXNlci5TcHJpdGU7XG4gICAgcHVibGljIG5hbWVfdGV4dDogVGV4dE9iajtcbiAgICBwdWJsaWMgbHZfdGV4dDogVGV4dE9iajtcbiAgICBwdWJsaWMgY2xhc3NfdGV4dDogVGV4dE9iajtcbiAgICBwdWJsaWMgaHBfdGV4dDogVGV4dE9iajtcbiAgICBwdWJsaWMgcHBfdGV4dDogVGV4dE9iajtcbiAgICBwdWJsaWMgbWF4X2hwX3RleHQ6IFRleHRPYmo7XG4gICAgcHVibGljIG1heF9wcF90ZXh0OiBUZXh0T2JqO1xuICAgIHB1YmxpYyBleHBfdGV4dDogVGV4dE9iajtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWUpIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5jaGFyID0gbnVsbDtcbiAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLnggPSBCQVNFX1dJTl9YO1xuICAgICAgICB0aGlzLnkgPSBCQVNFX1dJTl9ZO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93ID0gbmV3IFdpbmRvdyh0aGlzLmdhbWUsIHRoaXMueCwgdGhpcy55LCBCQVNFX1dJTl9XSURUSCwgQkFTRV9XSU5fSEVJR0hUKTtcblxuICAgICAgICB0aGlzLmF2YXRhcl9ncm91cCA9IGdhbWUuYWRkLmdyb3VwKCk7XG4gICAgICAgIHRoaXMuYXZhdGFyX2dyb3VwLmFscGhhID0gMDtcbiAgICAgICAgdGhpcy54X2F2YXRhciA9IHRoaXMueCArIDg7XG4gICAgICAgIHRoaXMueV9hdmF0YXIgPSB0aGlzLnkgKyA4O1xuICAgICAgICB0aGlzLmF2YXRhciA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIkx2XCIsIDQ4LCAyNCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJIUFwiLCA4LCA0OCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJQUFwiLCA4LCA1Nik7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCIvXCIsIDU2LCA0OSk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCIvXCIsIDU2LCA1Nik7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJFeHBcIiwgOCwgNzMpO1xuXG4gICAgICAgIHRoaXMubmFtZV90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIjBcIiwgNDAsIDgpO1xuICAgICAgICB0aGlzLmx2X3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiMFwiLCA4MCwgMjQpO1xuICAgICAgICB0aGlzLmNsYXNzX3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiMFwiLCA4LCA0MCk7XG4gICAgICAgIHRoaXMuaHBfdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCIwXCIsIDUxLCA0OCwgdHJ1ZSk7XG4gICAgICAgIHRoaXMucHBfdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCIwXCIsIDUxLCA1NiwgdHJ1ZSk7XG4gICAgICAgIHRoaXMubWF4X2hwX3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiMFwiLCA5NCwgNDgsIHRydWUpO1xuICAgICAgICB0aGlzLm1heF9wcF90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIjBcIiwgOTQsIDU2LCB0cnVlKTtcbiAgICAgICAgdGhpcy5leHBfdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCIwXCIsIDk0LCA4MCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyogUGxhY2VzIHRoZSBhdmF0YXIgZ3JvdXAgY29ycmVjdGx5IG9uIHNjcmVlbiAqL1xuICAgIHVwZGF0ZV9wb3NpdGlvbigpIHtcbiAgICAgICAgdGhpcy5hdmF0YXJfZ3JvdXAueCA9IHRoaXMuZ2FtZS5jYW1lcmEueCArIHRoaXMueF9hdmF0YXI7XG4gICAgICAgIHRoaXMuYXZhdGFyX2dyb3VwLnkgPSB0aGlzLmdhbWUuY2FtZXJhLnkgKyB0aGlzLnlfYXZhdGFyO1xuICAgIH1cblxuICAgIC8qU2V0cyB0aGUgc2VsZWN0ZWQgY2hhcmFjdGVyXG4gICAgVGhlIGNoYXJhY3RlcidzIGF2YXRhciBpcyBsb2FkZWQgZnJvbSBjYWNoZVxuXG4gICAgSW5wdXQ6IGNoYXIgW3N0cmluZ10gLSBUaGUgc2VsZWN0ZWQgY2hhcmFjdGVyJ3MgbmFtZSovXG4gICAgc2V0X2NoYXIoY2hhcikge1xuICAgICAgICBpZiAoY2hhciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmNoYXIgPSBjaGFyO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5jaGFyLm5hbWUsIHRoaXMubmFtZV90ZXh0KTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmNoYXIubGV2ZWwudG9TdHJpbmcoKSwgdGhpcy5sdl90ZXh0KTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmNoYXIuY2xhc3MubmFtZSwgdGhpcy5jbGFzc190ZXh0KTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmNoYXIuY3VycmVudF9ocC50b1N0cmluZygpLCB0aGlzLmhwX3RleHQpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuY2hhci5jdXJyZW50X3BwLnRvU3RyaW5nKCksIHRoaXMucHBfdGV4dCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5jaGFyLm1heF9ocC50b1N0cmluZygpLCB0aGlzLm1heF9ocF90ZXh0KTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmNoYXIubWF4X3BwLnRvU3RyaW5nKCksIHRoaXMubWF4X3BwX3RleHQpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuY2hhci5jdXJyZW50X2V4cC50b1N0cmluZygpLCB0aGlzLmV4cF90ZXh0KTtcblxuICAgICAgICBpZiAodGhpcy5hdmF0YXIpIHtcbiAgICAgICAgICAgIHRoaXMuYXZhdGFyLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmF2YXRhciA9IHRoaXMuYXZhdGFyX2dyb3VwLmNyZWF0ZSgwLCAwLCBcImF2YXRhcnNcIiwgdGhpcy5jaGFyLmtleV9uYW1lKTtcbiAgICB9XG5cbiAgICAvKk9wZW5zIHRoZSB3aW5kb3cgd2l0aCB0aGUgc2VsZWN0ZWQgcGFydHkgbWVtYmVyXG5cbiAgICBJbnB1dDogaW5pdGlhbF9jaGFyIFtzdHJpbmddIC0gVGhlIGNoYXJhY3RlciBzZWxlY3RlZCBieSBkZWZhdWx0XG4gICAgICAgICAgIGNhbGxiYWNrIFtmdW5jdGlvbl0gLSBDYWxsYmFjayBmdW5jdGlvbiAoT3B0aW9uYWwpKi9cbiAgICBvcGVuKGluaXRpYWxfY2hhciwgY2FsbGJhY2s/KSB7XG4gICAgICAgIHRoaXMudXBkYXRlX3Bvc2l0aW9uKCk7XG4gICAgICAgIHRoaXMuYXZhdGFyX2dyb3VwLmFscGhhID0gMTtcbiAgICAgICAgdGhpcy5zZXRfY2hhcihpbml0aWFsX2NoYXIpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNob3coKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IHRydWU7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICAvKkNsb3NlcyB0aGUgd2luZG93XG5cbiAgICBJbnB1dDogY2FsbGJhY2sgW2Z1bmN0aW9uXSAtIENhbGxiYWNrIGZ1bmN0aW9uIChPcHRpb25hbCkqL1xuICAgIGNsb3NlKGNhbGxiYWNrPykge1xuICAgICAgICB0aGlzLmF2YXRhcl9ncm91cC5hbHBoYSA9IDA7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY2xvc2UoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmYWxzZSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtXaW5kb3csIFRleHRPYmp9IGZyb20gXCIuLi9XaW5kb3dcIjtcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSBcIi4uL21hZ2ljX251bWJlcnNcIjtcbmltcG9ydCB7R29sZGVuU3VufSBmcm9tIFwiLi4vR29sZGVuU3VuXCI7XG5pbXBvcnQge0l0ZW1TbG90LCBNYWluQ2hhcn0gZnJvbSBcIi4uL01haW5DaGFyXCI7XG5pbXBvcnQge1BhZ2VJbmRpY2F0b3J9IGZyb20gXCIuLi9zdXBwb3J0X21lbnVzL1BhZ2VJbmRpY2F0b3JcIjtcbmltcG9ydCB7Q3Vyc29yTWFuYWdlciwgUG9pbnRWYXJpYW50c30gZnJvbSBcIi4uL3V0aWxzL0N1cnNvck1hbmFnZXJcIjtcblxuY29uc3QgUFNZX09WRVJWSUVXX1dJTl9YID0gMTA0O1xuY29uc3QgUFNZX09WRVJWSUVXX1dJTl9ZID0gMjQ7XG5jb25zdCBQU1lfT1ZFUlZJRVdfV0lOX1dJRFRIID0gMTMyO1xuY29uc3QgUFNZX09WRVJWSUVXX1dJTl9IRUlHSFQgPSAxMDg7XG5cbmNvbnN0IFNQQUNFX0JFVFdFRU5fSVRFTVMgPSAxO1xuY29uc3QgRUxFTV9OQU1FX0lDT05fU0hJRlQgPSA0O1xuXG5jb25zdCBFTEVNX1BBRERJTkdfVE9QID0gMTI7XG5jb25zdCBFTEVNX1BBRERJTkdfTEVGVCA9IDg7XG5jb25zdCBFTEVNX1BFUl9QQUdFID0gNTtcblxuY29uc3QgUFNZX1BQX1ggPSAxMjU7XG5jb25zdCBQU1lfUFBfQ09TVF9YID0gMTAyO1xuY29uc3QgUFNZX1BQX0NPU1RfWSA9IDg7XG5cbmNvbnN0IEhJR0hMSUdIVF9XSURUSCA9IDExNDtcbmNvbnN0IEhJR0hMSUdIVF9IRUlHSFQgPSBudW1iZXJzLkZPTlRfU0laRTtcblxuY29uc3QgU1VCX0lDT05fWCA9IDA7XG5jb25zdCBTVUJfSUNPTl9ZID0gMDtcblxuY29uc3QgQ1VSU09SX1ggPSA5ODtcbmNvbnN0IENVUlNPUl9ZID0gNDI7XG5jb25zdCBDVVJTT1JfR0FQID0gMTY7XG5cbmNvbnN0IEhPUklaT05UQUxfTE9PUF9USU1FID0gMzAwO1xuY29uc3QgU0hPVUxERVJfTE9PUF9USU1FID0gMjAwO1xuXG4vKkRpc3BsYXlzIHRoZSBjaGFyYWN0ZXIncyBQc3luZXJneSBvciBJdGVtc1xuVXNlZCBpbiBhIHNlbGVjdGlvbi10eXBlIG1lbnUsIHJlZmVycmluZyB0byB0aGUgYWJvdmVcblxuSW5wdXQ6IGdhbWUgW1BoYXNlcjpHYW1lXSAtIFJlZmVyZW5jZSB0byB0aGUgcnVubmluZyBnYW1lIG9iamVjdFxuICAgICAgIGRhdGEgW0dvbGRlblN1bl0gLSBSZWZlcmVuY2UgdG8gdGhlIG1haW4gSlMgQ2xhc3MgaW5zdGFuY2VcbiAgICAgICBpc19wc3luZXJneV93aW5kb3cgW2Jvb2xlYW5dIC0gV2hldGhlciB0aGlzIHdpbmRvdyBzaG93cyBwc3luZXJneSBvciBpdGVtc1xuICAgICAgIG9uX2Nob29zZSBbZnVuY3Rpb25dIC0gQ2FsbGJhY2sgZXhlY3V0ZWQgb24gXCJDaG9vc2VcIiBvcHRpb25cbiAgICAgICBvbl9jaGFuZ2UgW2Z1bmN0aW9uXSAtIENhbGxiYWNrIGV4ZWN1dGVkIG9uIGEgXCJDaGFuZ2VcIiBldmVudFxuICAgICAgIGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSBbbnVtYmVyXSAtIENvdW50cyBwYXJlbnQtY2hpbGQgc3RhdHVzIGZvciBFU0Mga2V5IChDYW5jZWwvQmFjaylcbiAgICAgICBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSBbbnVtYmVyXSAtIENvdW50cyBwYXJlbnQtY2hpbGQgc3RhdHVzIGZvciBFbnRlciBrZXkgKENob29zZS9TZWxlY3QpKi9cbmV4cG9ydCBjbGFzcyBJdGVtUHN5bmVyZ3lDaG9vc2VXaW5kb3cge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgZGF0YTogR29sZGVuU3VuO1xuICAgIHB1YmxpYyBpc19wc3luZXJneV93aW5kb3c6IGJvb2xlYW47XG4gICAgcHVibGljIG9uX2NoYW5nZTogRnVuY3Rpb247XG5cbiAgICBwdWJsaWMgZWxlbWVudF9saXN0OiBhbnk7XG4gICAgcHVibGljIGVsZW1lbnRfc3ByaXRlX2tleTogc3RyaW5nO1xuXG4gICAgcHVibGljIHdpbmRvdzogV2luZG93O1xuICAgIHB1YmxpYyBncm91cDogUGhhc2VyLkdyb3VwO1xuXG4gICAgcHVibGljIHdpbmRvd19vcGVuOiBib29sZWFuO1xuICAgIHB1YmxpYyB3aW5kb3dfYWN0aXZhdGVkOiBib29sZWFuO1xuICAgIHB1YmxpYyBjbG9zZV9jYWxsYmFjazogRnVuY3Rpb247XG4gICAgcHVibGljIGNoYXI6IE1haW5DaGFyO1xuICAgIHB1YmxpYyBjaGFyX3NlbGVjdF9jb250cm9sc19zcHJpdGVzOiAoUGhhc2VyLlNwcml0ZSB8IFBoYXNlci5CaXRtYXBUZXh0KVtdO1xuXG4gICAgcHVibGljIHBhZ2VfaW5kZXg6IG51bWJlcjtcbiAgICBwdWJsaWMgcGFnZV9udW1iZXI6IG51bWJlcjtcbiAgICBwdWJsaWMgdGV4dF9zcHJpdGVzX2luX3dpbmRvdzogVGV4dE9ialtdO1xuICAgIHB1YmxpYyBpY29uX3Nwcml0ZXNfaW5fd2luZG93OiAoUGhhc2VyLlNwcml0ZSB8IFBoYXNlci5Hcm91cClbXTtcbiAgICBwdWJsaWMgc2VsZWN0ZWRfZWxlbWVudF9pbmRleDogbnVtYmVyO1xuICAgIHB1YmxpYyBlbGVtZW50czogc3RyaW5nW10gfCBJdGVtU2xvdFtdO1xuICAgIHB1YmxpYyBzZWxlY3RlZF9lbGVtZW50X3R3ZWVuOiBQaGFzZXIuVHdlZW47XG5cbiAgICBwdWJsaWMgaGlnaGxpZ2h0X2JhcjogUGhhc2VyLkdyYXBoaWNzO1xuICAgIHB1YmxpYyBjaGFyX2luZGV4OiBudW1iZXI7XG4gICAgcHVibGljIGl0ZW1fb2JqczogSXRlbVNsb3RbXTtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWU6IFBoYXNlci5HYW1lLCBkYXRhOiBHb2xkZW5TdW4sIGlzX3BzeW5lcmd5X3dpbmRvdzogYm9vbGVhbiwgb25fY2hhbmdlOiBGdW5jdGlvbikge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLmlzX3BzeW5lcmd5X3dpbmRvdyA9IGlzX3BzeW5lcmd5X3dpbmRvdztcbiAgICAgICAgdGhpcy5vbl9jaGFuZ2UgPSBvbl9jaGFuZ2UgPT09IHVuZGVmaW5lZCA/ICgpID0+IHt9IDogb25fY2hhbmdlO1xuXG4gICAgICAgIHRoaXMuZWxlbWVudF9saXN0ID0gdGhpcy5pc19wc3luZXJneV93aW5kb3cgPyB0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdCA6IHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3Q7XG4gICAgICAgIHRoaXMuZWxlbWVudF9zcHJpdGVfa2V5ID0gdGhpcy5pc19wc3luZXJneV93aW5kb3cgPyBcImFiaWxpdGllc19pY29uc1wiIDogXCJpdGVtc19pY29uc1wiO1xuXG4gICAgICAgIHRoaXMud2luZG93ID0gbmV3IFdpbmRvdyhcbiAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgIFBTWV9PVkVSVklFV19XSU5fWCxcbiAgICAgICAgICAgIFBTWV9PVkVSVklFV19XSU5fWSxcbiAgICAgICAgICAgIFBTWV9PVkVSVklFV19XSU5fV0lEVEgsXG4gICAgICAgICAgICBQU1lfT1ZFUlZJRVdfV0lOX0hFSUdIVFxuICAgICAgICApO1xuICAgICAgICB0aGlzLmdyb3VwID0gZ2FtZS5hZGQuZ3JvdXAoKTtcbiAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDA7XG5cbiAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLndpbmRvd19hY3RpdmF0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jaGFyID0gbnVsbDtcbiAgICAgICAgdGhpcy5jaGFyX3NlbGVjdF9jb250cm9sc19zcHJpdGVzID0gW1xuICAgICAgICAgICAgdGhpcy53aW5kb3cuY3JlYXRlX2F0X2dyb3VwKDksIDk3LCBcInNoaWZ0X2tleWJvYXJkXCIsIDB4MCksXG4gICAgICAgICAgICB0aGlzLndpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoOCwgOTYsIFwic2hpZnRfa2V5Ym9hcmRcIiksXG4gICAgICAgICAgICB0aGlzLndpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoMzIsIDk3LCBcInRhYl9rZXlib2FyZFwiLCAweDApLFxuICAgICAgICAgICAgdGhpcy53aW5kb3cuY3JlYXRlX2F0X2dyb3VwKDMxLCA5NiwgXCJ0YWJfa2V5Ym9hcmRcIiksXG4gICAgICAgIF07XG4gICAgICAgIGNvbnN0IHNwcml0ZV9wYWlyID0gdGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCI6IENoYW5nZSBDaGFyXCIsIDQ5LCA5Nik7XG4gICAgICAgIHRoaXMuY2hhcl9zZWxlY3RfY29udHJvbHNfc3ByaXRlcy5wdXNoKHNwcml0ZV9wYWlyLnRleHQsIHNwcml0ZV9wYWlyLnNoYWRvdyk7XG5cbiAgICAgICAgdGhpcy5wYWdlX2luZGV4ID0gMDtcbiAgICAgICAgdGhpcy5wYWdlX251bWJlciA9IDA7XG5cbiAgICAgICAgdGhpcy50ZXh0X3Nwcml0ZXNfaW5fd2luZG93ID0gW107XG4gICAgICAgIHRoaXMuaWNvbl9zcHJpdGVzX2luX3dpbmRvdyA9IFtdO1xuXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfZWxlbWVudF9pbmRleCA9IDA7XG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSBbXTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9lbGVtZW50X3R3ZWVuID0gbnVsbDtcblxuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIgPSB0aGlzLmdhbWUuYWRkLmdyYXBoaWNzKDAsIDApO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYmxlbmRNb2RlID0gUElYSS5ibGVuZE1vZGVzLlNDUkVFTjtcbiAgICAgICAgdGhpcy53aW5kb3cuYWRkX3Nwcml0ZV90b19ncm91cCh0aGlzLmhpZ2hsaWdodF9iYXIpO1xuXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci5iZWdpbkZpbGwodGhpcy53aW5kb3cuY29sb3IsIDEpO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuZHJhd1JlY3QoXG4gICAgICAgICAgICBFTEVNX1BBRERJTkdfTEVGVCArIChudW1iZXJzLklDT05fV0lEVEggPj4gMSksXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgSElHSExJR0hUX1dJRFRILFxuICAgICAgICAgICAgSElHSExJR0hUX0hFSUdIVFxuICAgICAgICApO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuZW5kRmlsbCgpO1xuXG4gICAgICAgIGlmICh0aGlzLmlzX3BzeW5lcmd5X3dpbmRvdykge1xuICAgICAgICAgICAgdGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJQUFwiLCBQU1lfUFBfQ09TVF9YLCBQU1lfUFBfQ09TVF9ZKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5leHRfcGFnZSgpIHtcbiAgICAgICAgaWYgKHRoaXMucGFnZV9udW1iZXIgPT09IDEpIHJldHVybjtcblxuICAgICAgICBpZiAodGhpcy5wYWdlX2luZGV4IDwgdGhpcy5wYWdlX251bWJlciAtIDEpIHRoaXMucGFnZV9jaGFuZ2UodGhpcy5wYWdlX2luZGV4ICsgMSk7XG4gICAgICAgIGVsc2UgdGhpcy5wYWdlX2NoYW5nZSgwKTtcbiAgICB9XG5cbiAgICBwcmV2aW91c19wYWdlKCkge1xuICAgICAgICBpZiAodGhpcy5wYWdlX251bWJlciA9PT0gMSkgcmV0dXJuO1xuXG4gICAgICAgIGlmICh0aGlzLnBhZ2VfaW5kZXggPiAwKSB0aGlzLnBhZ2VfY2hhbmdlKHRoaXMucGFnZV9pbmRleCAtIDEpO1xuICAgICAgICBlbHNlIHRoaXMucGFnZV9jaGFuZ2UodGhpcy5wYWdlX251bWJlciAtIDEpO1xuICAgIH1cblxuICAgIG5leHRfZWxlbWVudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudHMubGVuZ3RoID09PSAxKSByZXR1cm47XG5cbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRfZWxlbWVudF9pbmRleCA8IHRoaXMuZWxlbWVudHMubGVuZ3RoIC0gMSlcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudF9jaGFuZ2UodGhpcy5zZWxlY3RlZF9lbGVtZW50X2luZGV4ICsgMSk7XG4gICAgICAgIGVsc2UgdGhpcy5lbGVtZW50X2NoYW5nZSgwKTtcbiAgICB9XG5cbiAgICBwcmV2aW91c19lbGVtZW50KCkge1xuICAgICAgICBpZiAodGhpcy5lbGVtZW50cy5sZW5ndGggPT09IDEpIHJldHVybjtcblxuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZF9lbGVtZW50X2luZGV4ID4gMCkgdGhpcy5lbGVtZW50X2NoYW5nZSh0aGlzLnNlbGVjdGVkX2VsZW1lbnRfaW5kZXggLSAxKTtcbiAgICAgICAgZWxzZSB0aGlzLmVsZW1lbnRfY2hhbmdlKHRoaXMuZWxlbWVudHMubGVuZ3RoIC0gMSk7XG4gICAgfVxuXG4gICAgLypSZXR1cm5zIHRoZSBuYW1lIG9mIHRoZSBQc3luZXJneS9JdGVtXG5cbiAgICBJbnB1dDogaW5kZXggW251bWJlcl0gOiBUaGUgZWxlbWVudCdzIGluZGV4XG5cbiAgICBPdXRwdXQ6IFtzdHJpbmddKi9cbiAgICBnZXRfZWxlbWVudF9rZXlfbmFtZShpbmRleDogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzX3BzeW5lcmd5X3dpbmRvdyA/IHRoaXMuZWxlbWVudHNbaW5kZXhdIDogKHRoaXMuZWxlbWVudHNbaW5kZXhdIGFzIEl0ZW1TbG90KS5rZXlfbmFtZTtcbiAgICB9XG5cbiAgICAvKlNldHMgdGhlIHRvdGFsIHBhZ2UgbnVtYmVyKi9cbiAgICBzZXRfcGFnZV9udW1iZXIoKSB7XG4gICAgICAgIGxldCBsaXN0X2xlbmd0aDogbnVtYmVyO1xuICAgICAgICBpZiAodGhpcy5pc19wc3luZXJneV93aW5kb3cpIHtcbiAgICAgICAgICAgIGxpc3RfbGVuZ3RoID0gdGhpcy5jaGFyLmFiaWxpdGllcy5maWx0ZXIoZWxlbV9rZXlfbmFtZSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgZWxlbV9rZXlfbmFtZSBpbiB0aGlzLmVsZW1lbnRfbGlzdCAmJlxuICAgICAgICAgICAgICAgICAgICAodGhpcy5lbGVtZW50X2xpc3RbZWxlbV9rZXlfbmFtZV0uaXNfZmllbGRfcHN5bmVyZ3kgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudF9saXN0W2VsZW1fa2V5X25hbWVdLmVmZmVjdHNfb3V0c2lkZV9iYXR0bGUpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pLmxlbmd0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxpc3RfbGVuZ3RoID0gdGhpcy5jaGFyLml0ZW1zLmZpbHRlcihpdGVtX29iaiA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW1fb2JqLmtleV9uYW1lIGluIHRoaXMuZWxlbWVudF9saXN0O1xuICAgICAgICAgICAgfSkubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGFnZV9udW1iZXIgPSAoKChsaXN0X2xlbmd0aCAtIDEpIC8gRUxFTV9QRVJfUEFHRSkgfCAwKSArIDE7XG4gICAgICAgIGlmICh0aGlzLnBhZ2VfaW5kZXggPj0gdGhpcy5wYWdlX251bWJlcikge1xuICAgICAgICAgICAgdGhpcy5wYWdlX2luZGV4ID0gdGhpcy5wYWdlX251bWJlciAtIDE7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLndpbmRvdy5wYWdlX2luZGljYXRvci5pbml0aWFsaXplKHRoaXMucGFnZV9udW1iZXIsIHRoaXMucGFnZV9pbmRleCk7XG4gICAgfVxuXG4gICAgLypVcGRhdGVzIHRoaXMgd2luZG93J3MgcG9zaXRpb24qL1xuICAgIHVwZGF0ZV9wb3NpdGlvbigpIHtcbiAgICAgICAgdGhpcy5ncm91cC54ID0gdGhpcy5nYW1lLmNhbWVyYS54ICsgUFNZX09WRVJWSUVXX1dJTl9YO1xuICAgICAgICB0aGlzLmdyb3VwLnkgPSB0aGlzLmdhbWUuY2FtZXJhLnkgKyBQU1lfT1ZFUlZJRVdfV0lOX1k7XG4gICAgfVxuXG4gICAgLypBZGRzIHRoZSBpdGVtcy9wc3luZXJnaWVzIHRvIHRoZSB3aW5kb3cqL1xuICAgIHNldF9lbGVtZW50cygpIHtcbiAgICAgICAgdGhpcy5jbGVhcl9zcHJpdGVzKCk7XG4gICAgICAgIHRoaXMuaXRlbV9vYmpzID0gW107XG4gICAgICAgIGlmICh0aGlzLmlzX3BzeW5lcmd5X3dpbmRvdykge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cyA9IHRoaXMuY2hhci5hYmlsaXRpZXNcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGVsZW1fa2V5X25hbWUgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbV9rZXlfbmFtZSBpbiB0aGlzLmVsZW1lbnRfbGlzdCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuZWxlbWVudF9saXN0W2VsZW1fa2V5X25hbWVdLmlzX2ZpZWxkX3BzeW5lcmd5IHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50X2xpc3RbZWxlbV9rZXlfbmFtZV0uZWZmZWN0c19vdXRzaWRlX2JhdHRsZSlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5zbGljZSh0aGlzLnBhZ2VfaW5kZXggKiBFTEVNX1BFUl9QQUdFLCAodGhpcy5wYWdlX2luZGV4ICsgMSkgKiBFTEVNX1BFUl9QQUdFKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMgPSB0aGlzLmNoYXIuaXRlbXNcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGl0ZW1fb2JqID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1fb2JqLmtleV9uYW1lIGluIHRoaXMuZWxlbWVudF9saXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1fb2Jqcy5wdXNoKGl0ZW1fb2JqKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5zbGljZSh0aGlzLnBhZ2VfaW5kZXggKiBFTEVNX1BFUl9QQUdFLCAodGhpcy5wYWdlX2luZGV4ICsgMSkgKiBFTEVNX1BFUl9QQUdFKTtcbiAgICAgICAgICAgIHRoaXMuaXRlbV9vYmpzID0gdGhpcy5pdGVtX29ianMuc2xpY2UoXG4gICAgICAgICAgICAgICAgdGhpcy5wYWdlX2luZGV4ICogRUxFTV9QRVJfUEFHRSxcbiAgICAgICAgICAgICAgICAodGhpcy5wYWdlX2luZGV4ICsgMSkgKiBFTEVNX1BFUl9QQUdFXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkX2VsZW1lbnRfaW5kZXggPj0gdGhpcy5lbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfZWxlbWVudF9pbmRleCA9IHRoaXMuZWxlbWVudHMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIHRoaXMubW92ZV9jdXJzb3IoQ1VSU09SX1gsIENVUlNPUl9ZICsgdGhpcy5zZWxlY3RlZF9lbGVtZW50X2luZGV4ICogQ1VSU09SX0dBUCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmVsZW1lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBlbGVtX2tleV9uYW1lID0gdGhpcy5nZXRfZWxlbWVudF9rZXlfbmFtZShpKTtcbiAgICAgICAgICAgIGNvbnN0IHggPSBFTEVNX1BBRERJTkdfTEVGVDtcbiAgICAgICAgICAgIGNvbnN0IHkgPSBFTEVNX1BBRERJTkdfVE9QICsgaSAqIChudW1iZXJzLklDT05fSEVJR0hUICsgU1BBQ0VfQkVUV0VFTl9JVEVNUyk7XG5cbiAgICAgICAgICAgIGNvbnN0IGljb25feCA9IHggKyAobnVtYmVycy5JQ09OX1dJRFRIID4+IDEpO1xuICAgICAgICAgICAgY29uc3QgaWNvbl95ID0geSArIChudW1iZXJzLklDT05fSEVJR0hUID4+IDEpO1xuXG4gICAgICAgICAgICBjb25zdCB4X2VsZW1fbmFtZSA9IEVMRU1fUEFERElOR19MRUZUICsgbnVtYmVycy5JQ09OX1dJRFRIICsgKHRoaXMuaXNfcHN5bmVyZ3lfd2luZG93ID8gMiA6IDQpO1xuICAgICAgICAgICAgdGhpcy50ZXh0X3Nwcml0ZXNfaW5fd2luZG93LnB1c2goXG4gICAgICAgICAgICAgICAgdGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudF9saXN0W2VsZW1fa2V5X25hbWUgYXMgc3RyaW5nXS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICB4X2VsZW1fbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgeSArIEVMRU1fTkFNRV9JQ09OX1NISUZUXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuaXNfcHN5bmVyZ3lfd2luZG93KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pY29uX3Nwcml0ZXNfaW5fd2luZG93LnB1c2goXG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2luZG93LmNyZWF0ZV9hdF9ncm91cChpY29uX3gsIGljb25feSwgdGhpcy5lbGVtZW50X3Nwcml0ZV9rZXksIHVuZGVmaW5lZCwgZWxlbV9rZXlfbmFtZSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICh0aGlzLmljb25fc3ByaXRlc19pbl93aW5kb3dbaV0gYXMgUGhhc2VyLlNwcml0ZSkuYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IGljb25fZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XG4gICAgICAgICAgICAgICAgbGV0IGljb25fc3ByaXRlID0gaWNvbl9ncm91cC5jcmVhdGUoMCwgMCwgdGhpcy5lbGVtZW50X3Nwcml0ZV9rZXksIGVsZW1fa2V5X25hbWUgYXMgc3RyaW5nKTtcblxuICAgICAgICAgICAgICAgIGljb25fc3ByaXRlLmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXRlbV9vYmpzW2ldLmVxdWlwcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGljb25fZ3JvdXAuY3JlYXRlKFNVQl9JQ09OX1gsIFNVQl9JQ09OX1ksIFwiZXF1aXBwZWRcIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXRlbV9vYmpzW2ldLnF1YW50aXR5ID4gMSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaXRlbV9jb3VudCA9IHRoaXMuZ2FtZS5hZGQuYml0bWFwVGV4dChcbiAgICAgICAgICAgICAgICAgICAgICAgIFNVQl9JQ09OX1gsXG4gICAgICAgICAgICAgICAgICAgICAgICBTVUJfSUNPTl9ZLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJncy1pdGVtLWJtcC1mb250XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1fb2Jqc1tpXS5xdWFudGl0eS50b1N0cmluZygpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGljb25fZ3JvdXAuYWRkKGl0ZW1fY291bnQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMud2luZG93LmFkZF9zcHJpdGVfdG9fZ3JvdXAoaWNvbl9ncm91cCk7XG4gICAgICAgICAgICAgICAgaWNvbl9ncm91cC54ID0gaWNvbl94O1xuICAgICAgICAgICAgICAgIGljb25fZ3JvdXAueSA9IGljb25feTtcbiAgICAgICAgICAgICAgICB0aGlzLmljb25fc3ByaXRlc19pbl93aW5kb3cucHVzaChpY29uX2dyb3VwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmlzX3BzeW5lcmd5X3dpbmRvdykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHhfZWxlbV9wcF9jb3N0ID0gUFNZX1BQX1g7XG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0X3Nwcml0ZXNfaW5fd2luZG93LnB1c2goXG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50X2xpc3RbZWxlbV9rZXlfbmFtZSBhcyBzdHJpbmddLnBwX2Nvc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICB4X2VsZW1fcHBfY29zdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHkgKyBFTEVNX05BTUVfSUNPTl9TSElGVCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRydWVcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKlNob3dzIGFuZCBwb3NpdGlvbnMgdGhlIGhpZ2hsaWdodCBiYXIqL1xuICAgIHNldF9oaWdobGlnaHRfYmFyKCkge1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYWxwaGEgPSAxO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIueSA9XG4gICAgICAgICAgICBFTEVNX1BBRERJTkdfVE9QICsgdGhpcy5zZWxlY3RlZF9lbGVtZW50X2luZGV4ICogKG51bWJlcnMuSUNPTl9IRUlHSFQgKyBTUEFDRV9CRVRXRUVOX0lURU1TKSArIDQ7XG4gICAgfVxuXG4gICAgLypIaWRlcyB0aGUgaGlnaGxpZ2h0IGJhciovXG4gICAgdW5zZXRfaGlnaGxpZ2h0X2JhcigpIHtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmFscGhhID0gMDtcbiAgICB9XG5cbiAgICAvKlNldHMgdGhlIHNjYWxpbmcgZWZmZWN0IGZvciB0aGUgc2VsZWN0ZWQgaXRlbSovXG4gICAgc2V0X2VsZW1lbnRfdHdlZW4oaW5kZXg6IG51bWJlcikge1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2VsZW1lbnRfdHdlZW4gPSB0aGlzLmdhbWUuYWRkXG4gICAgICAgICAgICAudHdlZW4odGhpcy5pY29uX3Nwcml0ZXNfaW5fd2luZG93W2luZGV4XS5zY2FsZSlcbiAgICAgICAgICAgIC50byh7eDogMS42LCB5OiAxLjZ9LCBQaGFzZXIuVGltZXIuUVVBUlRFUiwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSwgdHJ1ZSwgMCwgLTEsIHRydWUpO1xuICAgIH1cblxuICAgIC8qU3RvcHMgdGhlIHNjYWxpbmcgZWZmZWN0Ki9cbiAgICB1bnNldF9lbGVtZW50X3R3ZWVuKGluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuaWNvbl9zcHJpdGVzX2luX3dpbmRvd1tpbmRleF0pIHRoaXMuaWNvbl9zcHJpdGVzX2luX3dpbmRvd1tpbmRleF0uc2NhbGUuc2V0VG8oMSwgMSk7XG5cbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRfZWxlbWVudF90d2Vlbikge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9lbGVtZW50X3R3ZWVuLnN0b3AoKTtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfZWxlbWVudF90d2VlbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKlNlbGVjdHMgYSBuZXcgZWxlbWVudFxuICAgIFxuICAgIElucHV0OiBiZWZvcmVfaW5kZXggW251bWJlcl0gLSBQcmV2aW91cyBlbGVtZW50XG4gICAgICAgICAgIGFmdGVyX2luZGV4IFtudW1iZXJdIC0gTmV4dCBlbGVtZW50Ki9cbiAgICBlbGVtZW50X2NoYW5nZShpbmRleDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMudW5zZXRfZWxlbWVudF90d2Vlbih0aGlzLnNlbGVjdGVkX2VsZW1lbnRfaW5kZXgpO1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2VsZW1lbnRfaW5kZXggPSBpbmRleDtcbiAgICAgICAgdGhpcy5zZXRfZWxlbWVudF90d2Vlbih0aGlzLnNlbGVjdGVkX2VsZW1lbnRfaW5kZXgpO1xuXG4gICAgICAgIHRoaXMuc2V0X2hpZ2hsaWdodF9iYXIoKTtcbiAgICAgICAgdGhpcy5vbl9jaGFuZ2UoXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRfbGlzdFt0aGlzLmdldF9lbGVtZW50X2tleV9uYW1lKGluZGV4KSBhcyBzdHJpbmddLFxuICAgICAgICAgICAgdGhpcy5pc19wc3luZXJneV93aW5kb3cgPyB1bmRlZmluZWQgOiB0aGlzLml0ZW1fb2Jqc1tpbmRleF1cbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5tb3ZlX2N1cnNvcihDVVJTT1JfWCwgQ1VSU09SX1kgKyB0aGlzLnNlbGVjdGVkX2VsZW1lbnRfaW5kZXggKiBDVVJTT1JfR0FQKTtcbiAgICB9XG5cbiAgICAvKkRpc3BsYXlzIGEgbmV3IHBhZ2UqL1xuICAgIHBhZ2VfY2hhbmdlKHBhZ2U6IG51bWJlcikge1xuICAgICAgICB0aGlzLnBhZ2VfaW5kZXggPSBwYWdlO1xuICAgICAgICB0aGlzLnNldF9lbGVtZW50cygpO1xuICAgICAgICB0aGlzLnNldF9lbGVtZW50X3R3ZWVuKHRoaXMuc2VsZWN0ZWRfZWxlbWVudF9pbmRleCk7XG4gICAgICAgIHRoaXMuc2V0X2hpZ2hsaWdodF9iYXIoKTtcblxuICAgICAgICB0aGlzLm9uX2NoYW5nZShcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudF9saXN0W3RoaXMuZ2V0X2VsZW1lbnRfa2V5X25hbWUodGhpcy5zZWxlY3RlZF9lbGVtZW50X2luZGV4KSBhcyBzdHJpbmddLFxuICAgICAgICAgICAgdGhpcy5pc19wc3luZXJneV93aW5kb3cgPyB1bmRlZmluZWQgOiB0aGlzLml0ZW1fb2Jqc1t0aGlzLnNlbGVjdGVkX2VsZW1lbnRfaW5kZXhdXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMud2luZG93LnBhZ2VfaW5kaWNhdG9yLnNlbGVjdF9wYWdlKHRoaXMucGFnZV9pbmRleCk7XG4gICAgfVxuXG4gICAgLypSZW1vdmVzIGFsbCBzcHJpdGVzIGZyb20gdGhpcyB3aW5kb3cqL1xuICAgIGNsZWFyX3Nwcml0ZXMoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5pY29uX3Nwcml0ZXNfaW5fd2luZG93Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB0aGlzLndpbmRvdy5yZW1vdmVfZnJvbV9ncm91cCh0aGlzLmljb25fc3ByaXRlc19pbl93aW5kb3dbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaWNvbl9zcHJpdGVzX2luX3dpbmRvdyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudGV4dF9zcHJpdGVzX2luX3dpbmRvdy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdGhpcy53aW5kb3cucmVtb3ZlX3RleHQodGhpcy50ZXh0X3Nwcml0ZXNfaW5fd2luZG93W2ldKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRleHRfc3ByaXRlc19pbl93aW5kb3cgPSBbXTtcbiAgICB9XG5cbiAgICAvKkVuYWJsZXMgY29udHJvbCBrZXlzIGZvciB0aGlzIG1lbnUqL1xuICAgIGdyYW50X2NvbnRyb2wob25fY2FuY2VsOiBGdW5jdGlvbiwgb25fc2VsZWN0OiBGdW5jdGlvbiwgbmV4dF9jaGFyPzogRnVuY3Rpb24sIHByZXZpb3VzX2NoYXI/OiBGdW5jdGlvbikge1xuICAgICAgICBsZXQgY29udHJvbHMgPSBbXG4gICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5MRUZULCBvbl9kb3duOiB0aGlzLnByZXZpb3VzX3BhZ2UuYmluZCh0aGlzKX0sXG4gICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5SSUdIVCwgb25fZG93bjogdGhpcy5uZXh0X3BhZ2UuYmluZCh0aGlzKX0sXG4gICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5VUCwgb25fZG93bjogdGhpcy5wcmV2aW91c19lbGVtZW50LmJpbmQodGhpcyl9LFxuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuRE9XTiwgb25fZG93bjogdGhpcy5uZXh0X2VsZW1lbnQuYmluZCh0aGlzKX0sXG4gICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5BLCBvbl9kb3duOiBvbl9zZWxlY3R9LFxuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuQiwgb25fZG93bjogb25fY2FuY2VsfSxcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkwsIG9uX2Rvd246IHByZXZpb3VzX2NoYXJ9LFxuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuUiwgb25fZG93bjogbmV4dF9jaGFyfSxcbiAgICAgICAgXTtcblxuICAgICAgICB0aGlzLmRhdGEuY29udHJvbF9tYW5hZ2VyLnNldF9jb250cm9sKGNvbnRyb2xzLCB7XG4gICAgICAgICAgICBsb29wX2NvbmZpZ3M6IHtcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBob3Jpem9udGFsOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNob3VsZGVyOiB0cnVlLFxuICAgICAgICAgICAgICAgIGhvcml6b250YWxfdGltZTogSE9SSVpPTlRBTF9MT09QX1RJTUUsXG4gICAgICAgICAgICAgICAgc2hvdWxkZXJfdGltZTogU0hPVUxERVJfTE9PUF9USU1FLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbW92ZV9jdXJzb3IoeF9wb3M6IG51bWJlciwgeV9wb3M6IG51bWJlciwgb25fY29tcGxldGU/OiBGdW5jdGlvbikge1xuICAgICAgICBsZXQgdHdlZW5fY29uZmlnID0ge1xuICAgICAgICAgICAgdHlwZTogQ3Vyc29yTWFuYWdlci5DdXJzb3JUd2VlbnMuUE9JTlQsXG4gICAgICAgICAgICB2YXJpYW50OiBQb2ludFZhcmlhbnRzLk5PUk1BTCxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5kYXRhLmN1cnNvcl9tYW5hZ2VyLm1vdmVfdG8oXG4gICAgICAgICAgICB7eDogeF9wb3MsIHk6IHlfcG9zfSxcbiAgICAgICAgICAgIHthbmltYXRlOiBmYWxzZSwgdHdlZW5fY29uZmlnOiB0d2Vlbl9jb25maWd9LFxuICAgICAgICAgICAgb25fY29tcGxldGVcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKkhpZGVzIHRoaXMgd2luZG93Ki9cbiAgICBoaWRlKCkge1xuICAgICAgICB0aGlzLndpbmRvdy5ncm91cC5hbHBoYSA9IDA7XG4gICAgfVxuXG4gICAgLypTaG93cyB0aGlzIHdpbmRvdyovXG4gICAgc2hvdygpIHtcbiAgICAgICAgdGhpcy53aW5kb3cuZ3JvdXAuYWxwaGEgPSAxO1xuICAgIH1cblxuICAgIC8qT3BlbnMgdGhpcyB3aW5kb3dcblxuICAgIElucHV0OiBjaGFyX2luZGV4IFtudW1iZXJdID0gVGhlIHNlbGVjdGVkIGNoYXJhY3RlcidzIHBhcnR5IGluZGV4XG4gICAgICAgICAgIGNsb3NlX2NhbGxiYWNrIFtmdW5jdGlvbl0gPSBDbG9zaW5nIGNhbGxiYWNrIChPcHRpb25hbClcbiAgICAgICAgICAgb3Blbl9jYWxsYmFjayBbZnVuY3Rpb25dID0gT3BlbmluZyBjYWxsYmFjayAoT3B0aW9uYWwpKi9cbiAgICBvcGVuKGNoYXJfaW5kZXg6IG51bWJlciwgY2xvc2VfY2FsbGJhY2s/OiBGdW5jdGlvbiwgb3Blbl9jYWxsYmFjaz86IEZ1bmN0aW9uLCBwb3M/OiB7cGFnZTogbnVtYmVyOyBpbmRleDogbnVtYmVyfSkge1xuICAgICAgICB0aGlzLnVwZGF0ZV9wb3NpdGlvbigpO1xuICAgICAgICB0aGlzLmNoYXJfaW5kZXggPSBjaGFyX2luZGV4O1xuICAgICAgICB0aGlzLmNoYXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbY2hhcl9pbmRleF07XG5cbiAgICAgICAgdGhpcy5wYWdlX2luZGV4ID0gcG9zID8gcG9zLnBhZ2UgOiAwO1xuICAgICAgICB0aGlzLnNldF9wYWdlX251bWJlcigpO1xuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMTtcbiAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayA9IGNsb3NlX2NhbGxiYWNrO1xuICAgICAgICB0aGlzLndpbmRvdy5zaG93KG9wZW5fY2FsbGJhY2ssIGZhbHNlKTtcblxuICAgICAgICB0aGlzLnNlbGVjdGVkX2VsZW1lbnRfaW5kZXggPSBwb3MgPyBwb3MuaW5kZXggOiAwO1xuICAgICAgICB0aGlzLnNldF9lbGVtZW50cygpO1xuXG4gICAgICAgIHRoaXMuc2V0X2VsZW1lbnRfdHdlZW4odGhpcy5zZWxlY3RlZF9lbGVtZW50X2luZGV4KTtcbiAgICAgICAgdGhpcy5zZXRfaGlnaGxpZ2h0X2JhcigpO1xuICAgICAgICB0aGlzLm9uX2NoYW5nZShcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudF9saXN0W3RoaXMuZ2V0X2VsZW1lbnRfa2V5X25hbWUodGhpcy5zZWxlY3RlZF9lbGVtZW50X2luZGV4KSBhcyBzdHJpbmddLFxuICAgICAgICAgICAgdGhpcy5pc19wc3luZXJneV93aW5kb3cgPyB1bmRlZmluZWQgOiB0aGlzLml0ZW1fb2Jqc1t0aGlzLnNlbGVjdGVkX2VsZW1lbnRfaW5kZXhdXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5tb3ZlX2N1cnNvcihDVVJTT1JfWCwgQ1VSU09SX1kgKyB0aGlzLnNlbGVjdGVkX2VsZW1lbnRfaW5kZXggKiBDVVJTT1JfR0FQKTtcblxuICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gdHJ1ZTtcbiAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZhdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKkNsb3NlcyB0aGlzIHdpbmRvdyovXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMud2luZG93LmNsb3NlKHRoaXMuY2xvc2VfY2FsbGJhY2ssIGZhbHNlKTtcbiAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDE7XG4gICAgICAgIHRoaXMuY2xlYXJfc3ByaXRlcygpO1xuICAgICAgICB0aGlzLndpbmRvdy5wYWdlX2luZGljYXRvci50ZXJtaW5hbnRlKCk7XG4gICAgICAgIHRoaXMuZGF0YS5jdXJzb3JfbWFuYWdlci5oaWRlKCk7XG5cbiAgICAgICAgdGhpcy51bnNldF9lbGVtZW50X3R3ZWVuKHRoaXMuc2VsZWN0ZWRfZWxlbWVudF9pbmRleCk7XG4gICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZhdGVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLypTZXRzIHRoaXMgd2luZG93J3Mgc3RhdGUgYXMgXCJhY3RpdmF0ZWRcIlxuICAgIEVuYWJsZXMgc2V2ZXJhbCBVSSBlbGVtZW50cyovXG4gICAgYWN0aXZhdGUoKSB7XG4gICAgICAgIHRoaXMuc2V0X3BhZ2VfbnVtYmVyKCk7XG4gICAgICAgIHRoaXMuc2V0X2VsZW1lbnRzKCk7XG4gICAgICAgIHRoaXMuZWxlbWVudF9jaGFuZ2UodGhpcy5zZWxlY3RlZF9lbGVtZW50X2luZGV4KTtcblxuICAgICAgICB0aGlzLndpbmRvdy5wYWdlX2luZGljYXRvci5pbml0aWFsaXplKHRoaXMucGFnZV9udW1iZXIsIHRoaXMucGFnZV9pbmRleCk7XG4gICAgICAgIHRoaXMuc2V0X2VsZW1lbnRfdHdlZW4odGhpcy5zZWxlY3RlZF9lbGVtZW50X2luZGV4KTtcbiAgICAgICAgdGhpcy5zZXRfaGlnaGxpZ2h0X2JhcigpO1xuXG4gICAgICAgIHRoaXMud2luZG93X2FjdGl2YXRlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuY2hhcl9zZWxlY3RfY29udHJvbHNfc3ByaXRlcy5mb3JFYWNoKHNwcml0ZSA9PiB7XG4gICAgICAgICAgICBzcHJpdGUuYWxwaGEgPSAxO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKkRpc2FibGVzIHRoaXMgd2luZG93J3MgXCJhY3RpdmF0ZWRcIiBzdGF0ZVxuICAgIERpc2FibGVzIHNldmVyYWwgVUkgZWxlbWVudHMqL1xuICAgIGRlYWN0aXZhdGUoKSB7XG4gICAgICAgIHRoaXMuY2xlYXJfc3ByaXRlcygpO1xuICAgICAgICB0aGlzLndpbmRvdy5wYWdlX2luZGljYXRvci50ZXJtaW5hbnRlKCk7XG5cbiAgICAgICAgdGhpcy51bnNldF9lbGVtZW50X3R3ZWVuKHRoaXMuc2VsZWN0ZWRfZWxlbWVudF9pbmRleCk7XG4gICAgICAgIHRoaXMudW5zZXRfaGlnaGxpZ2h0X2JhcigpO1xuXG4gICAgICAgIHRoaXMud2luZG93X2FjdGl2YXRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNoYXJfc2VsZWN0X2NvbnRyb2xzX3Nwcml0ZXMuZm9yRWFjaChzcHJpdGUgPT4ge1xuICAgICAgICAgICAgc3ByaXRlLmFscGhhID0gMDtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtUZXh0T2JqLCBXaW5kb3d9IGZyb20gXCIuLi8uLi9XaW5kb3dcIjtcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSBcIi4uLy4uL21hZ2ljX251bWJlcnNcIjtcbmltcG9ydCB7SXRlbUNvdW50ZXJ9IGZyb20gXCIuLi8uLi91dGlscy9JdGVtQ291bnRlclwiO1xuaW1wb3J0IHtHb2xkZW5TdW59IGZyb20gXCIuLi8uLi9Hb2xkZW5TdW5cIjtcbmltcG9ydCB7SXRlbVNsb3QsIE1haW5DaGFyfSBmcm9tIFwiLi4vLi4vTWFpbkNoYXJcIjtcbmltcG9ydCB7SXRlbX0gZnJvbSBcIi4uLy4uL0l0ZW1cIjtcbmltcG9ydCB7Q3Vyc29yTWFuYWdlciwgUG9pbnRWYXJpYW50c30gZnJvbSBcIi4uLy4uL3V0aWxzL0N1cnNvck1hbmFnZXJcIjtcblxuY29uc3QgV0lOX1dJRFRIID0gMTMyO1xuY29uc3QgV0lOX0hFSUdIVCA9IDUyO1xuY29uc3QgV0lOX1ggPSAxMDQ7XG5jb25zdCBXSU5fWSA9IDA7XG5jb25zdCBRVUVTVElPTl9URVhUX1ggPSA0MDtcbmNvbnN0IFFVRVNUSU9OX1RFWFRfWSA9IDg7XG5jb25zdCBJVEVNX05BTUVfWCA9IDI3O1xuY29uc3QgSVRFTV9OQU1FX1kgPSAxNjtcbmNvbnN0IENIQVJfTkFNRV9YID0gMjc7XG5jb25zdCBERVNUX0NIQVJfTkFNRV9YID0gODQ7XG5jb25zdCBDSEFSX05BTUVfWSA9IElURU1fTkFNRV9ZICsgbnVtYmVycy5GT05UX1NJWkU7XG5jb25zdCBJVEVNX0lDT05fWCA9IDg7XG5jb25zdCBJVEVNX0lDT05fWSA9IDg7XG5jb25zdCBTVUJfSUNPTl9YID0gNztcbmNvbnN0IFNVQl9JQ09OX1kgPSA4O1xuY29uc3QgSVRFTV9DT1VOVEVSX1ggPSA1NjtcbmNvbnN0IElURU1fQ09VTlRFUl9ZID0gNDA7XG5jb25zdCBSRU1BSU5fVEVYVF9DSEFSX0NPVU5UX1ggPSAzNztcbmNvbnN0IFJFTUFJTl9URVhUX0NIQVJfQ09VTlRfWSA9IENIQVJfTkFNRV9ZICsgbnVtYmVycy5GT05UX1NJWkU7XG5jb25zdCBSRU1BSU5fVEVYVF9ERVNUX0NIQVJfQ09VTlRfWCA9IDk0O1xuY29uc3QgUkVNT1ZFX1RFWFRfQ09VTlRfWCA9IDUzO1xuY29uc3QgUkVNT1ZFX1RFWFRfQ09VTlRfWSA9IElURU1fQ09VTlRFUl9ZO1xuXG5jb25zdCBDVVJTT1JfWCA9IDEzODtcbmNvbnN0IENVUlNPUl9ZID0gNDY7XG5cbmNvbnN0IElURU1fQ09VTlRFUl9MT09QX1RJTUUgPSAxMDA7XG5cbmV4cG9ydCBjbGFzcyBJdGVtUXVhbnRpdHlNYW5hZ2VyV2luZG93IHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6IEdvbGRlblN1bjtcbiAgICBwdWJsaWMgaXRlbV9vYmo6IEl0ZW1TbG90O1xuICAgIHB1YmxpYyBpdGVtOiBJdGVtO1xuICAgIHB1YmxpYyBjaGFyOiBNYWluQ2hhcjtcbiAgICBwdWJsaWMgd2luZG93X29wZW46IGJvb2xlYW47XG4gICAgcHVibGljIHdpbmRvd19hY3RpdmU6IGJvb2xlYW47XG4gICAgcHVibGljIHg6IG51bWJlcjtcbiAgICBwdWJsaWMgeTogbnVtYmVyO1xuICAgIHB1YmxpYyBiYXNlX3dpbmRvdzogV2luZG93O1xuICAgIHB1YmxpYyBncm91cDogUGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyBjaG9vc2VuX3F1YW50aXR5OiBudW1iZXI7XG4gICAgcHVibGljIGl0ZW1fY291bnRlcjogSXRlbUNvdW50ZXI7XG4gICAgcHVibGljIHJlbWFpbmluZ193aXRoX2NoYXJfY291bnQ6IFRleHRPYmo7XG4gICAgcHVibGljIG5ld19hbW91bnRfd2l0aF9kZXN0X2NoYXJfY291bnQ6IFRleHRPYmo7XG4gICAgcHVibGljIHRvX3JlbW92ZV9jb3VudDogVGV4dE9iajtcbiAgICBwdWJsaWMgZGVzdGluYXRpb25fY2hhcjogTWFpbkNoYXI7XG4gICAgcHVibGljIGljb25fc3ByaXRlOiBQaGFzZXIuU3ByaXRlO1xuICAgIHB1YmxpYyBjaGFyX25hbWU6IFRleHRPYmo7XG4gICAgcHVibGljIGl0ZW1fbmFtZTogVGV4dE9iajtcbiAgICBwdWJsaWMgZXF1aXBfc3ByaXRlOiBQaGFzZXIuU3ByaXRlO1xuICAgIHB1YmxpYyBpdGVtX2NvdW50X3Nwcml0ZTogUGhhc2VyLkJpdG1hcFRleHQ7XG4gICAgcHVibGljIGNsb3NlX2NhbGxiYWNrOiBGdW5jdGlvbjtcbiAgICBwdWJsaWMgZGVzdF9pdGVtX29iajogSXRlbVNsb3Q7XG4gICAgcHVibGljIGRlc3RfY2hhcl9uYW1lOiBUZXh0T2JqO1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSkge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLml0ZW1fb2JqID0gbnVsbDtcbiAgICAgICAgdGhpcy5pdGVtID0gbnVsbDtcbiAgICAgICAgdGhpcy5jaGFyID0gbnVsbDtcbiAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy54ID0gV0lOX1g7XG4gICAgICAgIHRoaXMueSA9IFdJTl9ZO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93ID0gbmV3IFdpbmRvdyh0aGlzLmdhbWUsIHRoaXMueCwgdGhpcy55LCBXSU5fV0lEVEgsIFdJTl9IRUlHSFQpO1xuICAgICAgICB0aGlzLmdyb3VwID0gdGhpcy5nYW1lLmFkZC5ncm91cCgpO1xuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMDtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIkhvdyBtYW55P1wiLCBRVUVTVElPTl9URVhUX1gsIFFVRVNUSU9OX1RFWFRfWSk7XG4gICAgICAgIHRoaXMuY2hvb3Nlbl9xdWFudGl0eSA9IDE7XG4gICAgICAgIHRoaXMuaXRlbV9jb3VudGVyID0gbmV3IEl0ZW1Db3VudGVyKFxuICAgICAgICAgICAgdGhpcy5nYW1lLFxuICAgICAgICAgICAgdGhpcy5ncm91cCxcbiAgICAgICAgICAgIElURU1fQ09VTlRFUl9YLFxuICAgICAgICAgICAgSVRFTV9DT1VOVEVSX1ksXG4gICAgICAgICAgICB0aGlzLm9uX2NoYW5nZS5iaW5kKHRoaXMpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMucmVtYWluaW5nX3dpdGhfY2hhcl9jb3VudCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgUkVNQUlOX1RFWFRfQ0hBUl9DT1VOVF9YLFxuICAgICAgICAgICAgUkVNQUlOX1RFWFRfQ0hBUl9DT1VOVF9ZLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgICAgICB0aGlzLm5ld19hbW91bnRfd2l0aF9kZXN0X2NoYXJfY291bnQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIFJFTUFJTl9URVhUX0RFU1RfQ0hBUl9DT1VOVF9YLFxuICAgICAgICAgICAgUkVNQUlOX1RFWFRfQ0hBUl9DT1VOVF9ZLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnRvX3JlbW92ZV9jb3VudCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgUkVNT1ZFX1RFWFRfQ09VTlRfWCxcbiAgICAgICAgICAgIFJFTU9WRV9URVhUX0NPVU5UX1ksXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZ3JhbnRfY29udHJvbChvbl9jYW5jZWw6IEZ1bmN0aW9uLCBvbl9zZWxlY3Q6IEZ1bmN0aW9uKSB7XG4gICAgICAgIGxldCBjb250cm9scyA9IFtcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkxFRlQsIG9uX2Rvd246IHRoaXMuZGVjcmVhc2VfYW1vdW50LmJpbmQodGhpcyl9LFxuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuUklHSFQsIG9uX2Rvd246IHRoaXMuaW5jcmVhc2VfYW1vdW50LmJpbmQodGhpcyl9LFxuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuQSwgb25fZG93bjogb25fc2VsZWN0fSxcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkIsIG9uX2Rvd246IG9uX2NhbmNlbH0sXG4gICAgICAgIF07XG4gICAgICAgIHRoaXMuZGF0YS5jb250cm9sX21hbmFnZXIuc2V0X2NvbnRyb2woY29udHJvbHMsIHtcbiAgICAgICAgICAgIGxvb3BfY29uZmlnczoge2hvcml6b250YWw6IHRydWUsIGhvcml6b250YWxfdGltZTogSVRFTV9DT1VOVEVSX0xPT1BfVElNRX0sXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGluY3JlYXNlX2Ftb3VudCgpIHtcbiAgICAgICAgdGhpcy5pdGVtX2NvdW50ZXIuYWR2YW5jZV9zdGVwKDEpO1xuICAgIH1cblxuICAgIGRlY3JlYXNlX2Ftb3VudCgpIHtcbiAgICAgICAgdGhpcy5pdGVtX2NvdW50ZXIuYWR2YW5jZV9zdGVwKC0xKTtcbiAgICB9XG5cbiAgICBvbl9jaGFuZ2UocXVhbnRpdHkpIHtcbiAgICAgICAgdGhpcy5jaG9vc2VuX3F1YW50aXR5ID0gcXVhbnRpdHk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5jaG9vc2VuX3F1YW50aXR5LnRvU3RyaW5nKCksIHRoaXMudG9fcmVtb3ZlX2NvdW50KTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChcbiAgICAgICAgICAgICh0aGlzLml0ZW1fb2JqLnF1YW50aXR5IC0gdGhpcy5jaG9vc2VuX3F1YW50aXR5KS50b1N0cmluZygpLFxuICAgICAgICAgICAgdGhpcy5yZW1haW5pbmdfd2l0aF9jaGFyX2NvdW50XG4gICAgICAgICk7XG4gICAgICAgIGlmICh0aGlzLmRlc3RpbmF0aW9uX2NoYXIpIHtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoXG4gICAgICAgICAgICAgICAgKHRoaXMuZGVzdF9pdGVtX29iai5xdWFudGl0eSArIHRoaXMuY2hvb3Nlbl9xdWFudGl0eSkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICB0aGlzLm5ld19hbW91bnRfd2l0aF9kZXN0X2NoYXJfY291bnRcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRfaGVhZGVyKCkge1xuICAgICAgICB0aGlzLmljb25fc3ByaXRlID0gdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoXG4gICAgICAgICAgICBJVEVNX0lDT05fWCxcbiAgICAgICAgICAgIElURU1fSUNPTl9ZLFxuICAgICAgICAgICAgXCJpdGVtc19pY29uc1wiLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgdGhpcy5pdGVtLmtleV9uYW1lXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuY2hhcl9uYW1lID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbih0aGlzLmNoYXIubmFtZSwgQ0hBUl9OQU1FX1gsIENIQVJfTkFNRV9ZKTtcbiAgICAgICAgaWYgKHRoaXMuZGVzdGluYXRpb25fY2hhcikge1xuICAgICAgICAgICAgdGhpcy5kZXN0X2NoYXJfbmFtZSA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbl9jaGFyLm5hbWUsXG4gICAgICAgICAgICAgICAgREVTVF9DSEFSX05BTUVfWCxcbiAgICAgICAgICAgICAgICBDSEFSX05BTUVfWVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLml0ZW1fbmFtZSA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24odGhpcy5pdGVtLm5hbWUsIElURU1fTkFNRV9YLCBJVEVNX05BTUVfWSk7XG4gICAgICAgIHRoaXMuZXF1aXBfc3ByaXRlID0gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuaXRlbV9vYmouZXF1aXBwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZXF1aXBfc3ByaXRlID0gdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoXG4gICAgICAgICAgICAgICAgSVRFTV9JQ09OX1ggKyBTVUJfSUNPTl9YLFxuICAgICAgICAgICAgICAgIElURU1fSUNPTl9ZICsgU1VCX0lDT05fWSxcbiAgICAgICAgICAgICAgICBcImVxdWlwcGVkXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pdGVtX2NvdW50X3Nwcml0ZSA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLml0ZW1fb2JqLnF1YW50aXR5ID4gMSkge1xuICAgICAgICAgICAgdGhpcy5pdGVtX2NvdW50X3Nwcml0ZSA9IHRoaXMuZ2FtZS5hZGQuYml0bWFwVGV4dChcbiAgICAgICAgICAgICAgICBJVEVNX0lDT05fWCArIFNVQl9JQ09OX1gsXG4gICAgICAgICAgICAgICAgSVRFTV9JQ09OX1kgKyBTVUJfSUNPTl9ZLFxuICAgICAgICAgICAgICAgIFwiZ3MtaXRlbS1ibXAtZm9udFwiLFxuICAgICAgICAgICAgICAgIHRoaXMuaXRlbV9vYmoucXVhbnRpdHkudG9TdHJpbmcoKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cuYWRkX3Nwcml0ZV90b19ncm91cCh0aGlzLml0ZW1fY291bnRfc3ByaXRlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVuc2V0X2hlYWRlcigpIHtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfZnJvbV9ncm91cCh0aGlzLmljb25fc3ByaXRlKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfdGV4dCh0aGlzLmNoYXJfbmFtZSk7XG4gICAgICAgIGlmICh0aGlzLmRlc3RpbmF0aW9uX2NoYXIpIHtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX3RleHQodGhpcy5kZXN0X2NoYXJfbmFtZSk7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiXCIsIHRoaXMubmV3X2Ftb3VudF93aXRoX2Rlc3RfY2hhcl9jb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfdGV4dCh0aGlzLml0ZW1fbmFtZSk7XG4gICAgICAgIGlmICh0aGlzLmVxdWlwX3Nwcml0ZSkge1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfZnJvbV9ncm91cCh0aGlzLmVxdWlwX3Nwcml0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXRlbV9jb3VudF9zcHJpdGUpIHtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX2Zyb21fZ3JvdXAodGhpcy5pdGVtX2NvdW50X3Nwcml0ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVfcG9zaXRpb24oKSB7XG4gICAgICAgIHRoaXMuZ3JvdXAueCA9IHRoaXMuZ2FtZS5jYW1lcmEueCArIHRoaXMueDtcbiAgICAgICAgdGhpcy5ncm91cC55ID0gdGhpcy5nYW1lLmNhbWVyYS55ICsgdGhpcy55O1xuICAgIH1cblxuICAgIG9wZW4oXG4gICAgICAgIGl0ZW1fb2JqOiBJdGVtU2xvdCxcbiAgICAgICAgaXRlbTogSXRlbSxcbiAgICAgICAgY2hhcjogTWFpbkNoYXIsXG4gICAgICAgIGNsb3NlX2NhbGxiYWNrPzogRnVuY3Rpb24sXG4gICAgICAgIGRlc3RpbmF0aW9uX2NoYXI/OiBNYWluQ2hhcixcbiAgICAgICAgb3Blbl9jYWxsYmFjaz86IEZ1bmN0aW9uXG4gICAgKSB7XG4gICAgICAgIHRoaXMuZGF0YS5jdXJzb3JfbWFuYWdlci5tb3ZlX3RvKFxuICAgICAgICAgICAge3g6IENVUlNPUl9YLCB5OiBDVVJTT1JfWX0sXG4gICAgICAgICAgICB7YW5pbWF0ZTogZmFsc2UsIHR3ZWVuX2NvbmZpZzoge3R5cGU6IEN1cnNvck1hbmFnZXIuQ3Vyc29yVHdlZW5zLlBPSU5ULCB2YXJpYW50OiBQb2ludFZhcmlhbnRzLk5PUk1BTH19LFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaXRlbV9vYmogPSBpdGVtX29iajtcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW0gPSBpdGVtO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhciA9IGNoYXI7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbl9jaGFyID0gZGVzdGluYXRpb25fY2hhcjtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRlc3RpbmF0aW9uX2NoYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVzdF9pdGVtX29iaiA9IHRoaXMuZGVzdGluYXRpb25fY2hhci5pdGVtcy5maWx0ZXIoaXRlbSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5rZXlfbmFtZSA9PT0gaXRlbV9vYmoua2V5X25hbWU7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlc3RfaXRlbV9vYmogPSBkZXN0X2l0ZW1fb2JqLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBkZXN0X2l0ZW1fb2JqWzBdXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleV9uYW1lOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWFudGl0eTogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5jaG9vc2VuX3F1YW50aXR5ID0gMTtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrID0gY2xvc2VfY2FsbGJhY2s7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZV9wb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0X2hlYWRlcigpO1xuICAgICAgICAgICAgICAgIHRoaXMuaXRlbV9jb3VudGVyLmNvbmZpZyh0aGlzLml0ZW1fb2JqLnF1YW50aXR5LCB0aGlzLmNob29zZW5fcXVhbnRpdHkpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDE7XG4gICAgICAgICAgICAgICAgdGhpcy5vbl9jaGFuZ2UodGhpcy5jaG9vc2VuX3F1YW50aXR5KTtcblxuICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2hvdygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2luZG93X29wZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3Blbl9jYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuX2NhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgY2xvc2UoY2FsbGJhY2s/OiBGdW5jdGlvbikge1xuICAgICAgICB0aGlzLmRhdGEuY3Vyc29yX21hbmFnZXIuaGlkZSgpO1xuICAgICAgICB0aGlzLnVuc2V0X2hlYWRlcigpO1xuICAgICAgICB0aGlzLml0ZW1fY291bnRlci5kZWFjdGl2YXRlKCk7XG5cbiAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDA7XG4gICAgICAgIHRoaXMuY2hvb3Nlbl9xdWFudGl0eSA9IDA7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY2xvc2UoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRoaXMuY2hvb3Nlbl9xdWFudGl0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBhY3RpdmF0ZSgpIHtcbiAgICAgICAgdGhpcy5zZXRfaGVhZGVyKCk7XG4gICAgICAgIHRoaXMuaXRlbV9jb3VudGVyLmFjdGl2YXRlKCk7XG4gICAgICAgIHRoaXMub25fY2hhbmdlKHRoaXMuY2hvb3Nlbl9xdWFudGl0eSk7XG4gICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IHRydWU7XG4gICAgfVxuXG4gICAgZGVhY3RpdmF0ZSgpIHtcbiAgICAgICAgdGhpcy5kYXRhLmN1cnNvcl9tYW5hZ2VyLmhpZGUoKTtcbiAgICAgICAgdGhpcy51bnNldF9oZWFkZXIoKTtcbiAgICAgICAgdGhpcy5pdGVtX2NvdW50ZXIuZGVhY3RpdmF0ZSgpO1xuICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSBmYWxzZTtcbiAgICB9XG59XG4iLCJjb25zdCBHUklEX0NPTE9SID0gMHgwMDAwMDA7XG5jb25zdCBJTkFDVElWRV9CQVJfQ09MT1IgPSAweDk4OTg5ODtcbmNvbnN0IERJU0FCTEVEX0JBUl9DT0xPUiA9IDB4ZmYwMDAwO1xuY29uc3QgQUNUSVZFX0JBUl9DT0xPUiA9IDB4ZjhiMDcwO1xuY29uc3QgTUFYX0lURU1TID0gMzA7XG5jb25zdCBHUklEX1dJRFRIID0gTUFYX0lURU1TICogMiArIDE7XG5jb25zdCBHUklEX0hFSUdIVCA9IDg7XG5cbmV4cG9ydCBjbGFzcyBJdGVtQ291bnRlciB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBncm91cDogUGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyB4OiBudW1iZXI7XG4gICAgcHVibGljIHk6IG51bWJlcjtcbiAgICBwdWJsaWMgb25fY2hhbmdlOiBGdW5jdGlvbjtcblxuICAgIHB1YmxpYyBhdmFpbGFibGVfaXRlbXNfY291bnQ6IG51bWJlcjtcbiAgICBwdWJsaWMgZGlzYWJsZWRfY291bnQ6IG51bWJlcjtcbiAgICBwdWJsaWMgY3VycmVudF9xdWFudGl0eTogbnVtYmVyO1xuICAgIHB1YmxpYyBhY3RpdmU6IGJvb2xlYW47XG5cbiAgICBwdWJsaWMgaW50ZXJuYWxfZ3JvdXA6IFBoYXNlci5Hcm91cDtcbiAgICBwdWJsaWMgZ3JhcGhpY3M6IFBoYXNlci5HcmFwaGljcztcbiAgICBwdWJsaWMgYWN0aXZlX2Jhcl9ncmFwaGljczogUGhhc2VyLkdyYXBoaWNzO1xuICAgIHB1YmxpYyBpbmFjdGl2ZV9iYXJfZ3JhcGhpY3M6IFBoYXNlci5HcmFwaGljcztcbiAgICBwdWJsaWMgZGlzYWJsZWRfYmFyX2dyYXBoaWNzOiBQaGFzZXIuR3JhcGhpY3M7XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lOiBQaGFzZXIuR2FtZSwgZ3JvdXA6IFBoYXNlci5Hcm91cCwgeDogbnVtYmVyLCB5OiBudW1iZXIsIG9uX2NoYW5nZTogRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5ncm91cCA9IGdyb3VwO1xuICAgICAgICB0aGlzLmF2YWlsYWJsZV9pdGVtc19jb3VudCA9IDA7XG4gICAgICAgIHRoaXMuZGlzYWJsZWRfY291bnQgPSAwO1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgICAgICB0aGlzLm9uX2NoYW5nZSA9IG9uX2NoYW5nZSA9PT0gdW5kZWZpbmVkID8gKCkgPT4ge30gOiBvbl9jaGFuZ2U7XG4gICAgICAgIHRoaXMuY3VycmVudF9xdWFudGl0eSA9IDE7XG5cbiAgICAgICAgdGhpcy5pbnRlcm5hbF9ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcbiAgICAgICAgdGhpcy5pbnRlcm5hbF9ncm91cC54ID0gdGhpcy54O1xuICAgICAgICB0aGlzLmludGVybmFsX2dyb3VwLnkgPSB0aGlzLnk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MgPSB0aGlzLmdhbWUuYWRkLmdyYXBoaWNzKDAsIDApO1xuICAgICAgICB0aGlzLmFjdGl2ZV9iYXJfZ3JhcGhpY3MgPSB0aGlzLmdhbWUuYWRkLmdyYXBoaWNzKDAsIDApO1xuICAgICAgICB0aGlzLmluYWN0aXZlX2Jhcl9ncmFwaGljcyA9IHRoaXMuZ2FtZS5hZGQuZ3JhcGhpY3MoMCwgMCk7XG4gICAgICAgIHRoaXMuZGlzYWJsZWRfYmFyX2dyYXBoaWNzID0gdGhpcy5nYW1lLmFkZC5ncmFwaGljcygwLCAwKTtcblxuICAgICAgICB0aGlzLmludGVybmFsX2dyb3VwLmFkZCh0aGlzLmdyYXBoaWNzKTtcbiAgICAgICAgdGhpcy5pbnRlcm5hbF9ncm91cC5hZGQodGhpcy5hY3RpdmVfYmFyX2dyYXBoaWNzKTtcbiAgICAgICAgdGhpcy5pbnRlcm5hbF9ncm91cC5hZGQodGhpcy5pbmFjdGl2ZV9iYXJfZ3JhcGhpY3MpO1xuICAgICAgICB0aGlzLmludGVybmFsX2dyb3VwLmFkZCh0aGlzLmRpc2FibGVkX2Jhcl9ncmFwaGljcyk7XG4gICAgICAgIHRoaXMuZ3JvdXAuYWRkKHRoaXMuaW50ZXJuYWxfZ3JvdXApO1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlX2dyaWQoKTtcbiAgICB9XG5cbiAgICBhZHZhbmNlX3N0ZXAoc3RlcDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuY3VycmVudF9xdWFudGl0eSArPSBzdGVwO1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50X3F1YW50aXR5ID4gdGhpcy5hdmFpbGFibGVfaXRlbXNfY291bnQpIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudF9xdWFudGl0eSA9IDE7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5jdXJyZW50X3F1YW50aXR5ID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRfcXVhbnRpdHkgPSB0aGlzLmF2YWlsYWJsZV9pdGVtc19jb3VudDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFjdGl2ZV9iYXJfZ3JhcGhpY3MuY2xlYXIoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuZGlzYWJsZWRfY291bnQ7IGkgPCB0aGlzLmRpc2FibGVkX2NvdW50ICsgdGhpcy5jdXJyZW50X3F1YW50aXR5OyArK2kpIHtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlX2Jhcl9ncmFwaGljcy5saW5lU3R5bGUoMSwgQUNUSVZFX0JBUl9DT0xPUik7XG4gICAgICAgICAgICBjb25zdCB4ID0gaSAqIDIgKyAxO1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVfYmFyX2dyYXBoaWNzLm1vdmVUbyh4LCAwKTtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlX2Jhcl9ncmFwaGljcy5saW5lVG8oeCwgR1JJRF9IRUlHSFQgLSAyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9uX2NoYW5nZSh0aGlzLmN1cnJlbnRfcXVhbnRpdHkpO1xuICAgIH1cblxuICAgIGNyZWF0ZV9ncmlkKCkge1xuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSgxLCBHUklEX0NPTE9SKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8oMCwgMCk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKEdSSURfV0lEVEgsIDApO1xuXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIEdSSURfQ09MT1IpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbyhHUklEX1dJRFRIIC0gMSwgMCk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKEdSSURfV0lEVEggLSAxLCBHUklEX0hFSUdIVCAtIDEpO1xuXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIEdSSURfQ09MT1IpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbyhHUklEX1dJRFRIIC0gMSwgR1JJRF9IRUlHSFQgLSAxKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8oMCwgR1JJRF9IRUlHSFQgLSAxKTtcblxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSgxLCBHUklEX0NPTE9SKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8oMCwgR1JJRF9IRUlHSFQgLSAxKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8oMCwgMCk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBNQVhfSVRFTVMgLSAxOyArK2kpIHtcbiAgICAgICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIEdSSURfQ09MT1IpO1xuICAgICAgICAgICAgY29uc3QgeCA9IDIgKyBpICogMjtcbiAgICAgICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKHgsIDApO1xuICAgICAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8oeCwgR1JJRF9IRUlHSFQgLSAyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZV9pbmFjdGl2ZV9iYXIoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kaXNhYmxlZF9jb3VudDsgKytpKSB7XG4gICAgICAgICAgICB0aGlzLmRpc2FibGVkX2Jhcl9ncmFwaGljcy5saW5lU3R5bGUoMSwgRElTQUJMRURfQkFSX0NPTE9SKTtcbiAgICAgICAgICAgIGNvbnN0IHggPSBpICogMiArIDE7XG4gICAgICAgICAgICB0aGlzLmRpc2FibGVkX2Jhcl9ncmFwaGljcy5tb3ZlVG8oeCwgMCk7XG4gICAgICAgICAgICB0aGlzLmRpc2FibGVkX2Jhcl9ncmFwaGljcy5saW5lVG8oeCwgR1JJRF9IRUlHSFQgLSAyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSBNQVhfSVRFTVM7IGkgPiB0aGlzLmF2YWlsYWJsZV9pdGVtc19jb3VudCArIHRoaXMuZGlzYWJsZWRfY291bnQ7IC0taSkge1xuICAgICAgICAgICAgdGhpcy5pbmFjdGl2ZV9iYXJfZ3JhcGhpY3MubGluZVN0eWxlKDEsIElOQUNUSVZFX0JBUl9DT0xPUik7XG4gICAgICAgICAgICBjb25zdCB4ID0gaSAqIDIgLSAxO1xuICAgICAgICAgICAgdGhpcy5pbmFjdGl2ZV9iYXJfZ3JhcGhpY3MubW92ZVRvKHgsIDApO1xuICAgICAgICAgICAgdGhpcy5pbmFjdGl2ZV9iYXJfZ3JhcGhpY3MubGluZVRvKHgsIEdSSURfSEVJR0hUIC0gMik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25maWcoYXZhaWxhYmxlX2l0ZW1zX2NvdW50OiBudW1iZXIsIGluaXRpYWxfcXVhbnRpdHk6IG51bWJlciwgZGlzYWJsZWRfY291bnQ6IG51bWJlciA9IDApIHtcbiAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICB0aGlzLmN1cnJlbnRfcXVhbnRpdHkgPSBpbml0aWFsX3F1YW50aXR5O1xuICAgICAgICB0aGlzLmF2YWlsYWJsZV9pdGVtc19jb3VudCA9IGF2YWlsYWJsZV9pdGVtc19jb3VudDtcbiAgICAgICAgdGhpcy5kaXNhYmxlZF9jb3VudCA9IGRpc2FibGVkX2NvdW50O1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuY3JlYXRlX2luYWN0aXZlX2JhcigpO1xuICAgICAgICB0aGlzLmFkdmFuY2Vfc3RlcCgwKTtcbiAgICB9XG5cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5hY3RpdmVfYmFyX2dyYXBoaWNzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuaW5hY3RpdmVfYmFyX2dyYXBoaWNzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuZGlzYWJsZWRfYmFyX2dyYXBoaWNzLmNsZWFyKCk7XG5cbiAgICAgICAgdGhpcy5jdXJyZW50X3F1YW50aXR5ID0gMTtcbiAgICAgICAgdGhpcy5hdmFpbGFibGVfaXRlbXNfY291bnQgPSAwO1xuICAgICAgICB0aGlzLmRpc2FibGVkX2NvdW50ID0gMDtcbiAgICB9XG5cbiAgICBhY3RpdmF0ZSgpIHtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICAgIH1cblxuICAgIGRlYWN0aXZhdGUoKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtHb2xkZW5TdW59IGZyb20gXCIuLi9Hb2xkZW5TdW5cIjtcbmltcG9ydCB7ZXF1aXBfc2xvdHMsIE1haW5DaGFyfSBmcm9tIFwiLi4vTWFpbkNoYXJcIjtcbmltcG9ydCB7b3JkZXJlZF9zdGF0dXNfbWVudX0gZnJvbSBcIi4uL1BsYXllclwiO1xuaW1wb3J0IHtDaGFyc01lbnUsIENoYXJzTWVudU1vZGVzfSBmcm9tIFwiLi4vc3VwcG9ydF9tZW51cy9DaGFyc01lbnVcIjtcbmltcG9ydCB7VGV4dE9iaiwgV2luZG93fSBmcm9tIFwiLi4vV2luZG93XCI7XG5pbXBvcnQge0JhdHRsZVN0YXR1c0VmZmVjdH0gZnJvbSBcIi4uL3dpbmRvd3MvYmF0dGxlL0JhdHRsZVN0YXR1c1dpbmRvd1wiO1xuaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XG5pbXBvcnQge1N0YXR1c0NvbXBvbmVudH0gZnJvbSBcIi4uL3N1cHBvcnRfbWVudXMvU3RhdHVzQ29tcG9uZW50XCI7XG5pbXBvcnQge01haW5TdGF0dXNTdGF0aXN0aWNzfSBmcm9tIFwiLi4vc3VwcG9ydF9tZW51cy9NYWluU3RhdHVzU3RhdGlzdGljc1wiO1xuaW1wb3J0IHtNYWluU3RhdHVzRGppbm59IGZyb20gXCIuLi9zdXBwb3J0X21lbnVzL01haW5TdGF0dXNEamlublwiO1xuaW1wb3J0IHtNYWluU3RhdHVzUHN5bmVyZ3l9IGZyb20gXCIuLi9zdXBwb3J0X21lbnVzL01haW5TdGF0dXNQc3luZXJneVwiO1xuaW1wb3J0IHtNYWluU3RhdHVzSXRlbXN9IGZyb20gXCIuLi9zdXBwb3J0X21lbnVzL01haW5TdGF0dXNJdGVtc1wiO1xuXG5leHBvcnQgZW51bSBNYWluU3RhdHVzU3RhdGVzIHtcbiAgICBDSEFSQUNURVJTLFxuICAgIERKSU5OLFxuICAgIFNUQVRJU1RJQ1MsXG4gICAgUFNZTkVSR1ksXG4gICAgSVRFTVMsXG59XG5cbmV4cG9ydCBjbGFzcyBNYWluU3RhdHVzTWVudSB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgREVTQ19XSU4gPSB7XG4gICAgICAgIFg6IDAsXG4gICAgICAgIFk6IDAsXG4gICAgICAgIFdJRFRIOiAyMzYsXG4gICAgICAgIEhFSUdIVDogMzYsXG4gICAgfTtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBFUVVJUF9XSU4gPSB7XG4gICAgICAgIFg6IDAsXG4gICAgICAgIFk6IDgwLFxuICAgICAgICBXSURUSDogMTE2LFxuICAgICAgICBIRUlHSFQ6IDc2LFxuICAgIH07XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgR1VJREVfV0lOID0ge1xuICAgICAgICBYOiAxMDQsXG4gICAgICAgIFk6IDAsXG4gICAgICAgIFdJRFRIOiAxMzIsXG4gICAgICAgIEhFSUdIVDogMzYsXG4gICAgfTtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBNQUlOX1dJTiA9IHtcbiAgICAgICAgWDogMCxcbiAgICAgICAgWTogNDAsXG4gICAgICAgIFdJRFRIOiAyMzYsXG4gICAgICAgIEhFSUdIVDogMTE2LFxuICAgIH07XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgTkFNRSA9IHtcbiAgICAgICAgWDogNDgsXG4gICAgICAgIFk6IDgsXG4gICAgfTtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBDTEFTU19OQU1FID0ge1xuICAgICAgICBYOiA4LFxuICAgICAgICBZOiA0MCxcbiAgICB9O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IExFVkVMID0ge1xuICAgICAgICBMQUJFTF9YMTogMTEyLFxuICAgICAgICBMQUJFTF9ZMTogOCxcbiAgICAgICAgVkFMVUVfRU5EX1gxOiAxNDksXG4gICAgICAgIFZBTFVFX1kxOiA4LFxuICAgICAgICBMQUJFTF9YMjogOCxcbiAgICAgICAgTEFCRUxfWTI6IDU2LFxuICAgICAgICBWQUxVRV9FTkRfWDI6IDQ1LFxuICAgICAgICBWQUxVRV9ZMjogNTYsXG4gICAgfTtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBBVkFUQVIgPSB7XG4gICAgICAgIFg6IDgsXG4gICAgICAgIFk6IDgsXG4gICAgfTtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBHVUlERSA9IHtcbiAgICAgICAgTDoge1g6IDgsIFk6IDh9LFxuICAgICAgICBISUZFTjoge1g6IDIyLCBZOiA4fSxcbiAgICAgICAgUjoge1g6IDI3LCBZOiA4fSxcbiAgICAgICAgTFJfVEVYVDoge1g6IDQyLCBZOiA4fSxcbiAgICAgICAgQToge1g6IDksIFk6IDE2fSxcbiAgICAgICAgQV9URVhUOiB7WDogMTksIFk6IDE2fSxcbiAgICAgICAgU0VMRUNUOiB7WDogOCwgWTogMjR9LFxuICAgICAgICBTRUxFQ1RfVEVYVDoge1g6IDIxLCBZOiAyNH0sXG4gICAgfTtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBERVNDID0ge1xuICAgICAgICBMSU5FMToge1g6IDYsIFk6IDd9LFxuICAgICAgICBMSU5FMjoge1g6IDYsIFk6IDIxfSxcbiAgICB9O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IERFU0NfR1VJREUgPSB7XG4gICAgICAgIEw6IHtYOiA4OCwgWTogMjR9LFxuICAgICAgICBISUZFTjoge1g6IDEwMiwgWTogMjR9LFxuICAgICAgICBSOiB7WDogMTA3LCBZOiAyNH0sXG4gICAgICAgIExSX1RFWFQ6IHtYOiAxMjIsIFk6IDI0fSxcbiAgICAgICAgQToge1g6IDksIFk6IDI0fSxcbiAgICAgICAgQV9URVhUOiB7WDogMTksIFk6IDI0fSxcbiAgICB9O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEVRVUlQX1RFWFQgPSB7XG4gICAgICAgIExBQkVMOiB7WDogOCwgWTogOH0sXG4gICAgICAgIE5BTUU6IHtYOiAxNiwgWTogMTZ9LFxuICAgICAgICBTSElGVDogMTYsXG4gICAgfTtcblxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFN0YXRlQ29tcG9uZW50ID0ge1xuICAgICAgICBbTWFpblN0YXR1c1N0YXRlcy5DSEFSQUNURVJTXTogMCxcbiAgICAgICAgW01haW5TdGF0dXNTdGF0ZXMuREpJTk5dOiAyLFxuICAgICAgICBbTWFpblN0YXR1c1N0YXRlcy5TVEFUSVNUSUNTXTogMCxcbiAgICAgICAgW01haW5TdGF0dXNTdGF0ZXMuUFNZTkVSR1ldOiAxLFxuICAgICAgICBbTWFpblN0YXR1c1N0YXRlcy5JVEVNU106IDMsXG4gICAgfTtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBBZHZhbmNlU3RhdGUgPSB7XG4gICAgICAgIFtNYWluU3RhdHVzU3RhdGVzLkNIQVJBQ1RFUlNdOiBNYWluU3RhdHVzU3RhdGVzLlNUQVRJU1RJQ1MsXG4gICAgICAgIFtNYWluU3RhdHVzU3RhdGVzLlNUQVRJU1RJQ1NdOiBNYWluU3RhdHVzU3RhdGVzLlBTWU5FUkdZLFxuICAgICAgICBbTWFpblN0YXR1c1N0YXRlcy5QU1lORVJHWV06IE1haW5TdGF0dXNTdGF0ZXMuSVRFTVMsXG4gICAgICAgIFtNYWluU3RhdHVzU3RhdGVzLklURU1TXTogTWFpblN0YXR1c1N0YXRlcy5TVEFUSVNUSUNTLFxuICAgIH07XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgRk9OVFMgPSB7XG4gICAgICAgIE5PUk1BTDogXCJncy1ibXAtZm9udFwiLFxuICAgICAgICBJVEFMSUM6IFwiZ3MtaXRhbGljLWJtcC1mb250XCIsXG4gICAgfTtcblxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEdST1VQX0tFWSA9IFwibWFpbl9zdGF0dXNcIjtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBERVNDX0dVSURFX0tFWSA9IFwiZGVzY19ndWlkZVwiO1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IE1BWF9FRkZFQ1RTX0RJU1BMQVlFRCA9IDQ7XG5cbiAgICBwcml2YXRlIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHByaXZhdGUgZGF0YTogR29sZGVuU3VuO1xuXG4gICAgcHJpdmF0ZSBjaGFyc19tZW51OiBDaGFyc01lbnU7XG5cbiAgICBwcml2YXRlIG1haW5fd2luZG93OiBXaW5kb3c7XG4gICAgcHJpdmF0ZSBndWlkZV93aW5kb3c6IFdpbmRvdztcbiAgICBwcml2YXRlIGRlc2Nfd2luZG93OiBXaW5kb3c7XG4gICAgcHJpdmF0ZSBlcXVpcF93aW5kb3c6IFdpbmRvdztcblxuICAgIHByaXZhdGUgY29tcG9uZW50czogU3RhdHVzQ29tcG9uZW50W107XG4gICAgcHJpdmF0ZSBjdXJyZW50X3N0YXRlOiBNYWluU3RhdHVzU3RhdGVzO1xuICAgIHByaXZhdGUgY3VycmVudF9jb21wb25lbnQ6IFN0YXR1c0NvbXBvbmVudDtcbiAgICBwcml2YXRlIHNlbGVjdGVkX2NoYXI6IE1haW5DaGFyO1xuXG4gICAgcHJpdmF0ZSBtZW51X29wZW46IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBjbG9zZV9jYWxsYmFjazogRnVuY3Rpb247XG5cbiAgICBwcml2YXRlIGF2YXRhcjogUGhhc2VyLlNwcml0ZTtcbiAgICBwcml2YXRlIG5hbWU6IFRleHRPYmo7XG4gICAgcHJpdmF0ZSBsZXZlbF9sYWJlbDogVGV4dE9iajtcbiAgICBwcml2YXRlIGxldmVsX3ZhbHVlOiBUZXh0T2JqO1xuICAgIHByaXZhdGUgY2xhc3NfbmFtZTogVGV4dE9iajtcblxuICAgIHByaXZhdGUgbF9idXR0b246IHtzcHJpdGU6IFBoYXNlci5TcHJpdGU7IHNoYWRvdzogUGhhc2VyLlNwcml0ZX07XG4gICAgcHJpdmF0ZSByX2J1dHRvbjoge3Nwcml0ZTogUGhhc2VyLlNwcml0ZTsgc2hhZG93OiBQaGFzZXIuU3ByaXRlfTtcbiAgICBwcml2YXRlIGFfYnV0dG9uOiB7c3ByaXRlOiBQaGFzZXIuU3ByaXRlOyBzaGFkb3c6IFBoYXNlci5TcHJpdGV9O1xuICAgIHByaXZhdGUgc2VsZWN0X2J1dHRvbjoge3Nwcml0ZTogUGhhc2VyLlNwcml0ZTsgc2hhZG93OiBQaGFzZXIuU3ByaXRlfTtcbiAgICBwcml2YXRlIGhpZmVuOiBUZXh0T2JqO1xuICAgIHByaXZhdGUgbHJfdGV4dDogVGV4dE9iajtcbiAgICBwcml2YXRlIGFfdGV4dDogVGV4dE9iajtcbiAgICBwcml2YXRlIHNlbGVjdF90ZXh0OiBUZXh0T2JqO1xuXG4gICAgcHJpdmF0ZSBkZXNjX2xpbmUxOiBUZXh0T2JqO1xuICAgIHByaXZhdGUgZGVzY19saW5lMjogVGV4dE9iajtcbiAgICBwcml2YXRlIGRlc2NfZ3VpZGVfYV90ZXh0OiBUZXh0T2JqO1xuXG4gICAgcHJpdmF0ZSBlcV93ZWFwb25fbmFtZTogVGV4dE9iajtcbiAgICBwcml2YXRlIGVxX3NoaWVsZF9uYW1lOiBUZXh0T2JqO1xuICAgIHByaXZhdGUgZXFfY2hlc3RfbmFtZTogVGV4dE9iajtcbiAgICBwcml2YXRlIGVxX2hlYWRfbmFtZTogVGV4dE9iajtcblxuICAgIHByaXZhdGUgYmF0dGxlX2VmZmVjdHM6IEJhdHRsZVN0YXR1c0VmZmVjdFtdO1xuICAgIHByaXZhdGUgYWN0aXZlX3Nwcml0ZXM6IChQaGFzZXIuU3ByaXRlIHwgUGhhc2VyLkJpdG1hcFRleHQpW107XG4gICAgcHJpdmF0ZSBlcV9oaWdobGlnaHQ6IFBoYXNlci5HcmFwaGljcztcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihnYW1lOiBQaGFzZXIuR2FtZSwgZGF0YTogR29sZGVuU3VuKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG5cbiAgICAgICAgdGhpcy5jaGFyc19tZW51ID0gbmV3IENoYXJzTWVudSh0aGlzLmdhbWUsIHRoaXMuZGF0YSwgdGhpcy5vbl9jaGFyYWN0ZXJfY2hhbmdlLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLm1haW5fd2luZG93ID0gbmV3IFdpbmRvdyhcbiAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgIE1haW5TdGF0dXNNZW51Lk1BSU5fV0lOLlgsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5NQUlOX1dJTi5ZLFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuTUFJTl9XSU4uV0lEVEgsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5NQUlOX1dJTi5IRUlHSFRcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmd1aWRlX3dpbmRvdyA9IG5ldyBXaW5kb3coXG4gICAgICAgICAgICB0aGlzLmdhbWUsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5HVUlERV9XSU4uWCxcbiAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkdVSURFX1dJTi5ZLFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuR1VJREVfV0lOLldJRFRILFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuR1VJREVfV0lOLkhFSUdIVFxuICAgICAgICApO1xuICAgICAgICB0aGlzLmRlc2Nfd2luZG93ID0gbmV3IFdpbmRvdyhcbiAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkRFU0NfV0lOLlgsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5ERVNDX1dJTi5ZLFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuREVTQ19XSU4uV0lEVEgsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5ERVNDX1dJTi5IRUlHSFRcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5lcXVpcF93aW5kb3cgPSBuZXcgV2luZG93KFxuICAgICAgICAgICAgdGhpcy5nYW1lLFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuRVFVSVBfV0lOLlgsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5FUVVJUF9XSU4uWSxcbiAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkVRVUlQX1dJTi5XSURUSCxcbiAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkVRVUlQX1dJTi5IRUlHSFRcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmRlc2Nfd2luZG93LmRlZmluZV9pbnRlcm5hbF9ncm91cChNYWluU3RhdHVzTWVudS5ERVNDX0dVSURFX0tFWSk7XG4gICAgICAgIHRoaXMubWFpbl93aW5kb3cuZGVmaW5lX2ludGVybmFsX2dyb3VwKE1haW5TdGF0dXNNZW51LkdST1VQX0tFWSk7XG4gICAgICAgIHRoaXMuZ3VpZGVfd2luZG93LmRlZmluZV9pbnRlcm5hbF9ncm91cChNYWluU3RhdHVzTWVudS5HUk9VUF9LRVkpO1xuICAgICAgICB0aGlzLmVxdWlwX3dpbmRvdy5kZWZpbmVfaW50ZXJuYWxfZ3JvdXAoTWFpblN0YXR1c01lbnUuR1JPVVBfS0VZKTtcblxuICAgICAgICB0aGlzLmNvbXBvbmVudHMgPSBbXG4gICAgICAgICAgICBuZXcgTWFpblN0YXR1c1N0YXRpc3RpY3ModGhpcy5nYW1lLCB0aGlzLmRhdGEsIHRoaXMubWFpbl93aW5kb3csIHRoaXMpLFxuICAgICAgICAgICAgbmV3IE1haW5TdGF0dXNQc3luZXJneSh0aGlzLmdhbWUsIHRoaXMuZGF0YSwgdGhpcy5tYWluX3dpbmRvdywgdGhpcyksXG4gICAgICAgICAgICBuZXcgTWFpblN0YXR1c0RqaW5uKHRoaXMuZ2FtZSwgdGhpcy5kYXRhLCB0aGlzLm1haW5fd2luZG93LCB0aGlzKSxcbiAgICAgICAgICAgIG5ldyBNYWluU3RhdHVzSXRlbXModGhpcy5nYW1lLCB0aGlzLmRhdGEsIHRoaXMubWFpbl93aW5kb3csIHRoaXMpLFxuICAgICAgICBdO1xuXG4gICAgICAgIHRoaXMuZXFfaGlnaGxpZ2h0ID0gdGhpcy5nYW1lLmFkZC5ncmFwaGljcygwLCAwKTtcbiAgICAgICAgdGhpcy5lcV9oaWdobGlnaHQuYmxlbmRNb2RlID0gUElYSS5ibGVuZE1vZGVzLlNDUkVFTjtcbiAgICAgICAgdGhpcy5lcXVpcF93aW5kb3cuYWRkX3RvX2ludGVybmFsX2dyb3VwKE1haW5TdGF0dXNNZW51LkdST1VQX0tFWSwgdGhpcy5lcV9oaWdobGlnaHQpO1xuXG4gICAgICAgIHRoaXMuY3VycmVudF9zdGF0ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuY3VycmVudF9jb21wb25lbnQgPSBudWxsO1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXIgPSBudWxsO1xuICAgICAgICB0aGlzLm1lbnVfb3BlbiA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuYWN0aXZlX3Nwcml0ZXMgPSBbXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHNlbGVjdGVkX2NoYXJhY3RlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWRfY2hhcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGJhdHRsZV9lZmZlY3RzX2FycmF5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXR0bGVfZWZmZWN0cztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHN0YXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50X3N0YXRlO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgaXNfb3BlbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVudV9vcGVuO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0X2JhdHRsZV9lZmZlY3RzKCkge1xuICAgICAgICBjb25zdCBlZmZlY3RzID0gW107XG4gICAgICAgIGNvbnN0IHN0YXR1c19lZmZlY3RzID0gXy5zb3J0QnkoXG4gICAgICAgICAgICBbLi4udGhpcy5kYXRhLmluZm8ubWFpbl9jaGFyX2xpc3RbdGhpcy5zZWxlY3RlZF9jaGFyLmtleV9uYW1lXS5wZXJtYW5lbnRfc3RhdHVzXSxcbiAgICAgICAgICAgIHMgPT4gb3JkZXJlZF9zdGF0dXNfbWVudS5pbmRleE9mKHMpXG4gICAgICAgICk7XG5cbiAgICAgICAgZm9yIChsZXQgaW5kZXggaW4gc3RhdHVzX2VmZmVjdHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGVmZmVjdDogQmF0dGxlU3RhdHVzRWZmZWN0ID0ge2tleTogbnVsbCwgcHJvcGVydGllczogbnVsbH07XG5cbiAgICAgICAgICAgIGVmZmVjdC5rZXkgPSBzdGF0dXNfZWZmZWN0c1tpbmRleF07XG4gICAgICAgICAgICBpZiAoZWZmZWN0cy5sZW5ndGggPCBNYWluU3RhdHVzTWVudS5NQVhfRUZGRUNUU19ESVNQTEFZRUQpIGVmZmVjdHMucHVzaChlZmZlY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5iYXR0bGVfZWZmZWN0cyA9IGVmZmVjdHM7XG4gICAgfVxuXG4gICAgcHVibGljIHVwZGF0ZV9kZXNjcmlwdGlvbihsaW5lMTogc3RyaW5nLCBsaW5lMj86IHN0cmluZykge1xuICAgICAgICBpZiAoIXRoaXMuZGVzY193aW5kb3cub3BlbikgcmV0dXJuO1xuICAgICAgICBjb25zdCB0ZXh0MiA9IGxpbmUyICE9PSB1bmRlZmluZWQgPyBsaW5lMiA6IFwiXCI7XG5cbiAgICAgICAgY29uc3QgZGVzY193aW5fZ3JvdXAgPSB0aGlzLmRlc2Nfd2luZG93LmdldF9pbnRlcm5hbF9ncm91cChNYWluU3RhdHVzTWVudS5ERVNDX0dVSURFX0tFWSk7XG4gICAgICAgIGNvbnN0IGRlc2NfZ3VpZGVfc3RhdGVzID0gW01haW5TdGF0dXNTdGF0ZXMuU1RBVElTVElDUywgTWFpblN0YXR1c1N0YXRlcy5QU1lORVJHWSwgTWFpblN0YXR1c1N0YXRlcy5JVEVNU107XG5cbiAgICAgICAgaWYgKHRleHQyID09PSBcIlwiICYmIGRlc2NfZ3VpZGVfc3RhdGVzLmluY2x1ZGVzKHRoaXMuY3VycmVudF9zdGF0ZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IG5leHRfc3RhdGUgPSBNYWluU3RhdHVzTWVudS5BZHZhbmNlU3RhdGVbdGhpcy5jdXJyZW50X3N0YXRlXTtcbiAgICAgICAgICAgIGxldCBuZXh0X3N0YXRlX25hbWUgPSBNYWluU3RhdHVzU3RhdGVzW25leHRfc3RhdGVdLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBuZXh0X3N0YXRlX25hbWUgPSBuZXh0X3N0YXRlX25hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuZXh0X3N0YXRlX25hbWUuc2xpY2UoMSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGd1aWRlX2FfdHh0ID0gXCI6IFwiICsgbmV4dF9zdGF0ZV9uYW1lO1xuICAgICAgICAgICAgdGhpcy5kZXNjX3dpbmRvdy51cGRhdGVfdGV4dChndWlkZV9hX3R4dCwgdGhpcy5kZXNjX2d1aWRlX2FfdGV4dCk7XG5cbiAgICAgICAgICAgIGlmICghZGVzY193aW5fZ3JvdXAudmlzaWJsZSkgZGVzY193aW5fZ3JvdXAudmlzaWJsZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZGVzY193aW5fZ3JvdXAudmlzaWJsZSkgZGVzY193aW5fZ3JvdXAudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGZvbnQgPSBNYWluU3RhdHVzTWVudS5GT05UUy5OT1JNQUw7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRfc3RhdGUgPT09IE1haW5TdGF0dXNTdGF0ZXMuU1RBVElTVElDUykge1xuICAgICAgICAgICAgZm9udCA9IE1haW5TdGF0dXNNZW51LkZPTlRTLklUQUxJQztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZGVzY19saW5lMS50ZXh0LmZvbnQgPSBmb250O1xuICAgICAgICB0aGlzLmRlc2NfbGluZTEuc2hhZG93LmZvbnQgPSBmb250O1xuICAgICAgICB0aGlzLmRlc2NfbGluZTIudGV4dC5mb250ID0gZm9udDtcbiAgICAgICAgdGhpcy5kZXNjX2xpbmUyLnNoYWRvdy5mb250ID0gZm9udDtcblxuICAgICAgICB0aGlzLmRlc2Nfd2luZG93LnVwZGF0ZV90ZXh0KGxpbmUxLCB0aGlzLmRlc2NfbGluZTEpO1xuICAgICAgICB0aGlzLmRlc2Nfd2luZG93LnVwZGF0ZV90ZXh0KHRleHQyLCB0aGlzLmRlc2NfbGluZTIpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdG9nZ2xlX2d1aWRlX3dpbigpIHtcbiAgICAgICAgdGhpcy5sX2J1dHRvbi5zaGFkb3cudmlzaWJsZSA9ICF0aGlzLmxfYnV0dG9uLnNoYWRvdy52aXNpYmxlO1xuICAgICAgICB0aGlzLnJfYnV0dG9uLnNoYWRvdy52aXNpYmxlID0gIXRoaXMucl9idXR0b24uc2hhZG93LnZpc2libGU7XG4gICAgICAgIHRoaXMuYV9idXR0b24uc2hhZG93LnZpc2libGUgPSAhdGhpcy5hX2J1dHRvbi5zaGFkb3cudmlzaWJsZTtcblxuICAgICAgICB0aGlzLmxfYnV0dG9uLnNwcml0ZS52aXNpYmxlID0gIXRoaXMubF9idXR0b24uc3ByaXRlLnZpc2libGU7XG4gICAgICAgIHRoaXMucl9idXR0b24uc3ByaXRlLnZpc2libGUgPSAhdGhpcy5yX2J1dHRvbi5zcHJpdGUudmlzaWJsZTtcbiAgICAgICAgdGhpcy5hX2J1dHRvbi5zcHJpdGUudmlzaWJsZSA9ICF0aGlzLmFfYnV0dG9uLnNwcml0ZS52aXNpYmxlO1xuXG4gICAgICAgIHRoaXMuaGlmZW4uc2hhZG93LnZpc2libGUgPSAhdGhpcy5oaWZlbi5zaGFkb3cudmlzaWJsZTtcbiAgICAgICAgdGhpcy5scl90ZXh0LnNoYWRvdy52aXNpYmxlID0gIXRoaXMubHJfdGV4dC5zaGFkb3cudmlzaWJsZTtcbiAgICAgICAgdGhpcy5hX3RleHQuc2hhZG93LnZpc2libGUgPSAhdGhpcy5hX3RleHQuc2hhZG93LnZpc2libGU7XG5cbiAgICAgICAgdGhpcy5oaWZlbi50ZXh0LnZpc2libGUgPSAhdGhpcy5oaWZlbi50ZXh0LnZpc2libGU7XG4gICAgICAgIHRoaXMubHJfdGV4dC50ZXh0LnZpc2libGUgPSAhdGhpcy5scl90ZXh0LnRleHQudmlzaWJsZTtcbiAgICAgICAgdGhpcy5hX3RleHQudGV4dC52aXNpYmxlID0gIXRoaXMuYV90ZXh0LnRleHQudmlzaWJsZTtcblxuICAgICAgICBjb25zdCBuZXdfdGV4dCA9IHRoaXMuc2VsZWN0X3RleHQudGV4dC50ZXh0ID09PSBcIjogUmV0dXJuXCIgPyBcIjogRGppbm4gIGxpc3RcIiA6IFwiOiBSZXR1cm5cIjtcbiAgICAgICAgdGhpcy5ndWlkZV93aW5kb3cudXBkYXRlX3RleHQobmV3X3RleHQsIHRoaXMuc2VsZWN0X3RleHQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY2hlY2tfbWFpbl9jb21wb25lbnRzKCkge1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50X3N0YXRlID09PSBNYWluU3RhdHVzU3RhdGVzLkRKSU5OKSB7XG4gICAgICAgICAgICB0aGlzLm1haW5fd2luZG93LmdldF9pbnRlcm5hbF9ncm91cChNYWluU3RhdHVzTWVudS5HUk9VUF9LRVkpLnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBsYWJlbF94ID0gMDtcbiAgICAgICAgICAgIGxldCBsYWJlbF95ID0gMDtcblxuICAgICAgICAgICAgbGV0IHZhbHVlX2VuZF94ID0gMDtcbiAgICAgICAgICAgIGxldCB2YWx1ZV95ID0gMDtcblxuICAgICAgICAgICAgbGV0IGxhYmVsID0gXCJcIjtcbiAgICAgICAgICAgIGlmIChbTWFpblN0YXR1c1N0YXRlcy5DSEFSQUNURVJTLCBNYWluU3RhdHVzU3RhdGVzLlNUQVRJU1RJQ1NdLmluY2x1ZGVzKHRoaXMuY3VycmVudF9zdGF0ZSkpIHtcbiAgICAgICAgICAgICAgICBsYWJlbF94ID0gTWFpblN0YXR1c01lbnUuTEVWRUwuTEFCRUxfWDE7XG4gICAgICAgICAgICAgICAgbGFiZWxfeSA9IE1haW5TdGF0dXNNZW51LkxFVkVMLkxBQkVMX1kxO1xuXG4gICAgICAgICAgICAgICAgdmFsdWVfZW5kX3ggPSBNYWluU3RhdHVzTWVudS5MRVZFTC5WQUxVRV9FTkRfWDE7XG4gICAgICAgICAgICAgICAgdmFsdWVfeSA9IE1haW5TdGF0dXNNZW51LkxFVkVMLlZBTFVFX1kxO1xuXG4gICAgICAgICAgICAgICAgbGFiZWwgPSBcIkx2XCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxhYmVsX3ggPSBNYWluU3RhdHVzTWVudS5MRVZFTC5MQUJFTF9YMjtcbiAgICAgICAgICAgICAgICBsYWJlbF95ID0gTWFpblN0YXR1c01lbnUuTEVWRUwuTEFCRUxfWTI7XG5cbiAgICAgICAgICAgICAgICB2YWx1ZV9lbmRfeCA9IE1haW5TdGF0dXNNZW51LkxFVkVMLlZBTFVFX0VORF9YMjtcbiAgICAgICAgICAgICAgICB2YWx1ZV95ID0gTWFpblN0YXR1c01lbnUuTEVWRUwuVkFMVUVfWTI7XG5cbiAgICAgICAgICAgICAgICBsYWJlbCA9IFwiTCB2XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm1haW5fd2luZG93LnVwZGF0ZV90ZXh0X3Bvc2l0aW9uKHt4OiBsYWJlbF94LCB5OiBsYWJlbF95fSwgdGhpcy5sZXZlbF9sYWJlbCk7XG4gICAgICAgICAgICB0aGlzLm1haW5fd2luZG93LnVwZGF0ZV90ZXh0X3Bvc2l0aW9uKHt4OiB2YWx1ZV9lbmRfeCwgeTogdmFsdWVfeX0sIHRoaXMubGV2ZWxfdmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5tYWluX3dpbmRvdy51cGRhdGVfdGV4dChsYWJlbCwgdGhpcy5sZXZlbF9sYWJlbCk7XG5cbiAgICAgICAgICAgIHRoaXMubWFpbl93aW5kb3cuZ2V0X2ludGVybmFsX2dyb3VwKE1haW5TdGF0dXNNZW51LkdST1VQX0tFWSkudmlzaWJsZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGluaXRfZGVzY19ndWlkZSgpIHtcbiAgICAgICAgbGV0IHNwcml0ZSA9IHRoaXMuZGVzY193aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuREVTQ19HVUlERS5MLlggKyAxLFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuREVTQ19HVUlERS5MLlkgKyAxLFxuICAgICAgICAgICAgXCJsX2J1dHRvblwiLFxuICAgICAgICAgICAgMHgwLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuREVTQ19HVUlERV9LRVlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5hY3RpdmVfc3ByaXRlcy5wdXNoKHNwcml0ZSk7XG5cbiAgICAgICAgc3ByaXRlID0gdGhpcy5kZXNjX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5ERVNDX0dVSURFLkwuWCxcbiAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkRFU0NfR1VJREUuTC5ZLFxuICAgICAgICAgICAgXCJsX2J1dHRvblwiLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuREVTQ19HVUlERV9LRVlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5hY3RpdmVfc3ByaXRlcy5wdXNoKHNwcml0ZSk7XG5cbiAgICAgICAgc3ByaXRlID0gdGhpcy5kZXNjX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5ERVNDX0dVSURFLlIuWCArIDEsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5ERVNDX0dVSURFLlIuWSArIDEsXG4gICAgICAgICAgICBcInJfYnV0dG9uXCIsXG4gICAgICAgICAgICAweDAsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5ERVNDX0dVSURFX0tFWVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmFjdGl2ZV9zcHJpdGVzLnB1c2goc3ByaXRlKTtcblxuICAgICAgICBzcHJpdGUgPSB0aGlzLmRlc2Nfd2luZG93LmNyZWF0ZV9hdF9ncm91cChcbiAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkRFU0NfR1VJREUuUi5YLFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuREVTQ19HVUlERS5SLlksXG4gICAgICAgICAgICBcInJfYnV0dG9uXCIsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5ERVNDX0dVSURFX0tFWVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmFjdGl2ZV9zcHJpdGVzLnB1c2goc3ByaXRlKTtcblxuICAgICAgICBzcHJpdGUgPSB0aGlzLmRlc2Nfd2luZG93LmNyZWF0ZV9hdF9ncm91cChcbiAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkRFU0NfR1VJREUuQS5YICsgMSxcbiAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkRFU0NfR1VJREUuQS5ZICsgMSxcbiAgICAgICAgICAgIFwiYV9idXR0b25cIixcbiAgICAgICAgICAgIDB4MCxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkRFU0NfR1VJREVfS0VZXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuYWN0aXZlX3Nwcml0ZXMucHVzaChzcHJpdGUpO1xuXG4gICAgICAgIHNwcml0ZSA9IHRoaXMuZGVzY193aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuREVTQ19HVUlERS5BLlgsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5ERVNDX0dVSURFLkEuWSxcbiAgICAgICAgICAgIFwiYV9idXR0b25cIixcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkRFU0NfR1VJREVfS0VZXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuYWN0aXZlX3Nwcml0ZXMucHVzaChzcHJpdGUpO1xuXG4gICAgICAgIGxldCBvYmogPSB0aGlzLmRlc2Nfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgXCItXCIsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5ERVNDX0dVSURFLkhJRkVOLlgsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5ERVNDX0dVSURFLkhJRkVOLlksXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5ERVNDX0dVSURFX0tFWVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmFjdGl2ZV9zcHJpdGVzLnB1c2gob2JqLnRleHQsIG9iai5zaGFkb3cpO1xuXG4gICAgICAgIG9iaiA9IHRoaXMuZGVzY193aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICBcIjogU3dpdGNoICBjaGFyYWN0ZXJzXCIsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5ERVNDX0dVSURFLkxSX1RFWFQuWCxcbiAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkRFU0NfR1VJREUuTFJfVEVYVC5ZLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuREVTQ19HVUlERV9LRVlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5hY3RpdmVfc3ByaXRlcy5wdXNoKG9iai50ZXh0LCBvYmouc2hhZG93KTtcblxuICAgICAgICBvYmogPSB0aGlzLmRlc2NfZ3VpZGVfYV90ZXh0ID0gdGhpcy5kZXNjX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5ERVNDX0dVSURFLkFfVEVYVC5YLFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuREVTQ19HVUlERS5BX1RFWFQuWSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkRFU0NfR1VJREVfS0VZXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuYWN0aXZlX3Nwcml0ZXMucHVzaChvYmoudGV4dCwgb2JqLnNoYWRvdyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbml0aWFsaXplKCkge1xuICAgICAgICB0aGlzLmF2YXRhciA9IHRoaXMubWFpbl93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuQVZBVEFSLlgsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5BVkFUQVIuWSxcbiAgICAgICAgICAgIFwiYXZhdGFyc1wiLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyLmtleV9uYW1lLFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuR1JPVVBfS0VZXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuYWN0aXZlX3Nwcml0ZXMucHVzaCh0aGlzLmF2YXRhcik7XG5cbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5tYWluX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5OQU1FLlgsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5OQU1FLlksXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5HUk9VUF9LRVlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5hY3RpdmVfc3ByaXRlcy5wdXNoKHRoaXMubmFtZS50ZXh0LCB0aGlzLm5hbWUuc2hhZG93KTtcblxuICAgICAgICB0aGlzLmxldmVsX2xhYmVsID0gdGhpcy5tYWluX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgIFwiTHZcIixcbiAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkxFVkVMLkxBQkVMX1gxLFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuTEVWRUwuTEFCRUxfWTEsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5HUk9VUF9LRVlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5hY3RpdmVfc3ByaXRlcy5wdXNoKHRoaXMubGV2ZWxfbGFiZWwudGV4dCwgdGhpcy5sZXZlbF9sYWJlbC5zaGFkb3cpO1xuXG4gICAgICAgIHRoaXMubGV2ZWxfdmFsdWUgPSB0aGlzLm1haW5fd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkxFVkVMLlZBTFVFX0VORF9YMSxcbiAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkxFVkVMLlZBTFVFX1kxLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5HUk9VUF9LRVlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5hY3RpdmVfc3ByaXRlcy5wdXNoKHRoaXMubGV2ZWxfdmFsdWUudGV4dCwgdGhpcy5sZXZlbF92YWx1ZS5zaGFkb3cpO1xuXG4gICAgICAgIHRoaXMuY2xhc3NfbmFtZSA9IHRoaXMubWFpbl93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuQ0xBU1NfTkFNRS5YLFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuQ0xBU1NfTkFNRS5ZLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuR1JPVVBfS0VZXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuYWN0aXZlX3Nwcml0ZXMucHVzaCh0aGlzLmNsYXNzX25hbWUudGV4dCwgdGhpcy5jbGFzc19uYW1lLnNoYWRvdyk7XG5cbiAgICAgICAgdGhpcy5sX2J1dHRvbiA9IHtcbiAgICAgICAgICAgIHNoYWRvdzogdGhpcy5ndWlkZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFxuICAgICAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkdVSURFLkwuWCArIDEsXG4gICAgICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuR1VJREUuTC5ZICsgMSxcbiAgICAgICAgICAgICAgICBcImxfYnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgMHgwLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBNYWluU3RhdHVzTWVudS5HUk9VUF9LRVlcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBzcHJpdGU6IHRoaXMuZ3VpZGVfd2luZG93LmNyZWF0ZV9hdF9ncm91cChcbiAgICAgICAgICAgICAgICBNYWluU3RhdHVzTWVudS5HVUlERS5MLlgsXG4gICAgICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuR1VJREUuTC5ZLFxuICAgICAgICAgICAgICAgIFwibF9idXR0b25cIixcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkdST1VQX0tFWVxuICAgICAgICAgICAgKSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hY3RpdmVfc3ByaXRlcy5wdXNoKHRoaXMubF9idXR0b24uc3ByaXRlLCB0aGlzLmxfYnV0dG9uLnNoYWRvdyk7XG5cbiAgICAgICAgdGhpcy5yX2J1dHRvbiA9IHtcbiAgICAgICAgICAgIHNoYWRvdzogdGhpcy5ndWlkZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFxuICAgICAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkdVSURFLlIuWCArIDEsXG4gICAgICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuR1VJREUuUi5ZICsgMSxcbiAgICAgICAgICAgICAgICBcInJfYnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgMHgwLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBNYWluU3RhdHVzTWVudS5HUk9VUF9LRVlcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBzcHJpdGU6IHRoaXMuZ3VpZGVfd2luZG93LmNyZWF0ZV9hdF9ncm91cChcbiAgICAgICAgICAgICAgICBNYWluU3RhdHVzTWVudS5HVUlERS5SLlgsXG4gICAgICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuR1VJREUuUi5ZLFxuICAgICAgICAgICAgICAgIFwicl9idXR0b25cIixcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkdST1VQX0tFWVxuICAgICAgICAgICAgKSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hY3RpdmVfc3ByaXRlcy5wdXNoKHRoaXMucl9idXR0b24uc3ByaXRlLCB0aGlzLnJfYnV0dG9uLnNoYWRvdyk7XG5cbiAgICAgICAgdGhpcy5hX2J1dHRvbiA9IHtcbiAgICAgICAgICAgIHNoYWRvdzogdGhpcy5ndWlkZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFxuICAgICAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkdVSURFLkEuWCArIDEsXG4gICAgICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuR1VJREUuQS5ZICsgMSxcbiAgICAgICAgICAgICAgICBcImFfYnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgMHgwLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBNYWluU3RhdHVzTWVudS5HUk9VUF9LRVlcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBzcHJpdGU6IHRoaXMuZ3VpZGVfd2luZG93LmNyZWF0ZV9hdF9ncm91cChcbiAgICAgICAgICAgICAgICBNYWluU3RhdHVzTWVudS5HVUlERS5BLlgsXG4gICAgICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuR1VJREUuQS5ZLFxuICAgICAgICAgICAgICAgIFwiYV9idXR0b25cIixcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkdST1VQX0tFWVxuICAgICAgICAgICAgKSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hY3RpdmVfc3ByaXRlcy5wdXNoKHRoaXMuYV9idXR0b24uc3ByaXRlLCB0aGlzLmFfYnV0dG9uLnNoYWRvdyk7XG5cbiAgICAgICAgdGhpcy5zZWxlY3RfYnV0dG9uID0ge1xuICAgICAgICAgICAgc2hhZG93OiB0aGlzLmd1aWRlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoXG4gICAgICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuR1VJREUuU0VMRUNULlggKyAxLFxuICAgICAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkdVSURFLlNFTEVDVC5ZICsgMSxcbiAgICAgICAgICAgICAgICBcInNlbGVjdF9idXR0b25cIixcbiAgICAgICAgICAgICAgICAweDAsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkdST1VQX0tFWVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHNwcml0ZTogdGhpcy5ndWlkZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFxuICAgICAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkdVSURFLlNFTEVDVC5YLFxuICAgICAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkdVSURFLlNFTEVDVC5ZLFxuICAgICAgICAgICAgICAgIFwic2VsZWN0X2J1dHRvblwiLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuR1JPVVBfS0VZXG4gICAgICAgICAgICApLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmFjdGl2ZV9zcHJpdGVzLnB1c2godGhpcy5zZWxlY3RfYnV0dG9uLnNwcml0ZSwgdGhpcy5zZWxlY3RfYnV0dG9uLnNoYWRvdyk7XG5cbiAgICAgICAgdGhpcy5oaWZlbiA9IHRoaXMuZ3VpZGVfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgXCItXCIsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5HVUlERS5ISUZFTi5YLFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuR1VJREUuSElGRU4uWSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkdST1VQX0tFWVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmFjdGl2ZV9zcHJpdGVzLnB1c2godGhpcy5oaWZlbi50ZXh0LCB0aGlzLmhpZmVuLnNoYWRvdyk7XG5cbiAgICAgICAgdGhpcy5scl90ZXh0ID0gdGhpcy5ndWlkZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICBcIjogUmVhcnJhbmdlXCIsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5HVUlERS5MUl9URVhULlgsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5HVUlERS5MUl9URVhULlksXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5HUk9VUF9LRVlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5hY3RpdmVfc3ByaXRlcy5wdXNoKHRoaXMubHJfdGV4dC50ZXh0LCB0aGlzLmxyX3RleHQuc2hhZG93KTtcblxuICAgICAgICB0aGlzLmFfdGV4dCA9IHRoaXMuZ3VpZGVfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgXCI6IERldGFpbHNcIixcbiAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkdVSURFLkFfVEVYVC5YLFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuR1VJREUuQV9URVhULlksXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5HUk9VUF9LRVlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5hY3RpdmVfc3ByaXRlcy5wdXNoKHRoaXMuYV90ZXh0LnRleHQsIHRoaXMuYV90ZXh0LnNoYWRvdyk7XG5cbiAgICAgICAgdGhpcy5zZWxlY3RfdGV4dCA9IHRoaXMuZ3VpZGVfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgXCI6IERqaW5uICBsaXN0XCIsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5HVUlERS5TRUxFQ1RfVEVYVC5YLFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuR1VJREUuU0VMRUNUX1RFWFQuWSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkdST1VQX0tFWVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmFjdGl2ZV9zcHJpdGVzLnB1c2godGhpcy5zZWxlY3RfdGV4dC50ZXh0LCB0aGlzLnNlbGVjdF90ZXh0LnNoYWRvdyk7XG5cbiAgICAgICAgdGhpcy5kZXNjX2xpbmUxID0gdGhpcy5kZXNjX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5ERVNDLkxJTkUxLlgsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5ERVNDLkxJTkUxLlksXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5HUk9VUF9LRVksXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuYWN0aXZlX3Nwcml0ZXMucHVzaCh0aGlzLmRlc2NfbGluZTEudGV4dCwgdGhpcy5kZXNjX2xpbmUxLnNoYWRvdyk7XG5cbiAgICAgICAgdGhpcy5kZXNjX2xpbmUyID0gdGhpcy5kZXNjX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5ERVNDLkxJTkUyLlgsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5ERVNDLkxJTkUyLlksXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5HUk9VUF9LRVksXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuYWN0aXZlX3Nwcml0ZXMucHVzaCh0aGlzLmRlc2NfbGluZTIudGV4dCwgdGhpcy5kZXNjX2xpbmUyLnNoYWRvdyk7XG5cbiAgICAgICAgbGV0IHRleHQgPSB0aGlzLmVxdWlwX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgIFwiV2VhcG9uXCIsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5FUVVJUF9URVhULkxBQkVMLlgsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5FUVVJUF9URVhULkxBQkVMLlksXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5HUk9VUF9LRVlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5hY3RpdmVfc3ByaXRlcy5wdXNoKHRleHQudGV4dCwgdGV4dC5zaGFkb3cpO1xuXG4gICAgICAgIHRoaXMuZXFfd2VhcG9uX25hbWUgPSB0aGlzLmVxdWlwX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5FUVVJUF9URVhULk5BTUUuWCxcbiAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkVRVUlQX1RFWFQuTkFNRS5ZLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuR1JPVVBfS0VZXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuYWN0aXZlX3Nwcml0ZXMucHVzaCh0aGlzLmVxX3dlYXBvbl9uYW1lLnRleHQsIHRoaXMuZXFfd2VhcG9uX25hbWUuc2hhZG93KTtcblxuICAgICAgICBsZXQgc2hpZnQgPSBNYWluU3RhdHVzTWVudS5FUVVJUF9URVhULlNISUZUO1xuXG4gICAgICAgIHRleHQgPSB0aGlzLmVxdWlwX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgIFwiSGVhZFwiLFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuRVFVSVBfVEVYVC5MQUJFTC5YLFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuRVFVSVBfVEVYVC5MQUJFTC5ZICsgc2hpZnQsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5HUk9VUF9LRVlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5hY3RpdmVfc3ByaXRlcy5wdXNoKHRleHQudGV4dCwgdGV4dC5zaGFkb3cpO1xuXG4gICAgICAgIHRoaXMuZXFfaGVhZF9uYW1lID0gdGhpcy5lcXVpcF93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuRVFVSVBfVEVYVC5OQU1FLlgsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5FUVVJUF9URVhULk5BTUUuWSArIHNoaWZ0LFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuR1JPVVBfS0VZXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuYWN0aXZlX3Nwcml0ZXMucHVzaCh0aGlzLmVxX2hlYWRfbmFtZS50ZXh0LCB0aGlzLmVxX2hlYWRfbmFtZS5zaGFkb3cpO1xuXG4gICAgICAgIHNoaWZ0ICs9IE1haW5TdGF0dXNNZW51LkVRVUlQX1RFWFQuU0hJRlQ7XG5cbiAgICAgICAgdGV4dCA9IHRoaXMuZXF1aXBfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgXCJTaGllbGRcIixcbiAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkVRVUlQX1RFWFQuTEFCRUwuWCxcbiAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkVRVUlQX1RFWFQuTEFCRUwuWSArIHNoaWZ0LFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuR1JPVVBfS0VZXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuYWN0aXZlX3Nwcml0ZXMucHVzaCh0ZXh0LnRleHQsIHRleHQuc2hhZG93KTtcblxuICAgICAgICB0aGlzLmVxX3NoaWVsZF9uYW1lID0gdGhpcy5lcXVpcF93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuRVFVSVBfVEVYVC5OQU1FLlgsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5FUVVJUF9URVhULk5BTUUuWSArIHNoaWZ0LFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuR1JPVVBfS0VZXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuYWN0aXZlX3Nwcml0ZXMucHVzaCh0aGlzLmVxX3NoaWVsZF9uYW1lLnRleHQsIHRoaXMuZXFfc2hpZWxkX25hbWUuc2hhZG93KTtcblxuICAgICAgICBzaGlmdCArPSBNYWluU3RhdHVzTWVudS5FUVVJUF9URVhULlNISUZUO1xuXG4gICAgICAgIHRleHQgPSB0aGlzLmVxdWlwX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgIFwiQ2hlc3RcIixcbiAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkVRVUlQX1RFWFQuTEFCRUwuWCxcbiAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkVRVUlQX1RFWFQuTEFCRUwuWSArIHNoaWZ0LFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuR1JPVVBfS0VZXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuYWN0aXZlX3Nwcml0ZXMucHVzaCh0ZXh0LnRleHQsIHRleHQuc2hhZG93KTtcblxuICAgICAgICB0aGlzLmVxX2NoZXN0X25hbWUgPSB0aGlzLmVxdWlwX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5FUVVJUF9URVhULk5BTUUuWCxcbiAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkVRVUlQX1RFWFQuTkFNRS5ZICsgc2hpZnQsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5HUk9VUF9LRVlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5hY3RpdmVfc3ByaXRlcy5wdXNoKHRoaXMuZXFfY2hlc3RfbmFtZS50ZXh0LCB0aGlzLmVxX2NoZXN0X25hbWUuc2hhZG93KTtcblxuICAgICAgICB0aGlzLmluaXRfZGVzY19ndWlkZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlX2luZm8oKSB7XG4gICAgICAgIGlmICh0aGlzLmF2YXRhcikgdGhpcy5hdmF0YXIuZGVzdHJveSgpO1xuXG4gICAgICAgIGNvbnN0IGNoYXIgPSB0aGlzLnNlbGVjdGVkX2NoYXI7XG4gICAgICAgIHRoaXMuc2V0X2JhdHRsZV9lZmZlY3RzKCk7XG5cbiAgICAgICAgdGhpcy5hdmF0YXIgPSB0aGlzLm1haW5fd2luZG93LmNyZWF0ZV9hdF9ncm91cChcbiAgICAgICAgICAgIE1haW5TdGF0dXNNZW51LkFWQVRBUi5YLFxuICAgICAgICAgICAgTWFpblN0YXR1c01lbnUuQVZBVEFSLlksXG4gICAgICAgICAgICBcImF2YXRhcnNcIixcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGNoYXIua2V5X25hbWUsXG4gICAgICAgICAgICBNYWluU3RhdHVzTWVudS5HUk9VUF9LRVlcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLm1haW5fd2luZG93LnVwZGF0ZV90ZXh0KGNoYXIubmFtZSwgdGhpcy5uYW1lKTtcbiAgICAgICAgdGhpcy5tYWluX3dpbmRvdy51cGRhdGVfdGV4dChjaGFyLmxldmVsLCB0aGlzLmxldmVsX3ZhbHVlKTtcbiAgICAgICAgdGhpcy5tYWluX3dpbmRvdy51cGRhdGVfdGV4dChjaGFyLmNsYXNzLm5hbWUsIHRoaXMuY2xhc3NfbmFtZSk7XG5cbiAgICAgICAgY29uc3QgbmFtZXMgPSB7XG4gICAgICAgICAgICBbZXF1aXBfc2xvdHMuV0VBUE9OXTogXCJcIixcbiAgICAgICAgICAgIFtlcXVpcF9zbG90cy5IRUFEXTogXCJcIixcbiAgICAgICAgICAgIFtlcXVpcF9zbG90cy5DSEVTVF06IFwiXCIsXG4gICAgICAgICAgICBbZXF1aXBfc2xvdHMuQk9EWV06IFwiXCIsXG4gICAgICAgIH07XG4gICAgICAgIGZvciAobGV0IHByb3BlcnR5IGluIG5hbWVzKSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtX3Nsb3QgPSBjaGFyLmVxdWlwX3Nsb3RzW3Byb3BlcnR5XTtcblxuICAgICAgICAgICAgaWYgKCFpdGVtX3Nsb3QpIG5hbWVzW3Byb3BlcnR5XSA9IFwiXCI7XG4gICAgICAgICAgICBlbHNlIG5hbWVzW3Byb3BlcnR5XSA9IHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbaXRlbV9zbG90LmtleV9uYW1lXS5uYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5lcXVpcF93aW5kb3cudXBkYXRlX3RleHQobmFtZXNbZXF1aXBfc2xvdHMuV0VBUE9OXSwgdGhpcy5lcV93ZWFwb25fbmFtZSk7XG4gICAgICAgIHRoaXMuZXF1aXBfd2luZG93LnVwZGF0ZV90ZXh0KG5hbWVzW2VxdWlwX3Nsb3RzLkhFQURdLCB0aGlzLmVxX2hlYWRfbmFtZSk7XG4gICAgICAgIHRoaXMuZXF1aXBfd2luZG93LnVwZGF0ZV90ZXh0KG5hbWVzW2VxdWlwX3Nsb3RzLkNIRVNUXSwgdGhpcy5lcV9zaGllbGRfbmFtZSk7XG4gICAgICAgIHRoaXMuZXF1aXBfd2luZG93LnVwZGF0ZV90ZXh0KG5hbWVzW2VxdWlwX3Nsb3RzLkJPRFldLCB0aGlzLmVxX2NoZXN0X25hbWUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdHJpZ2dlcl9zdGF0ZV9jaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlX3N0YXRlKE1haW5TdGF0dXNNZW51LkFkdmFuY2VTdGF0ZVt0aGlzLmN1cnJlbnRfc3RhdGVdLCB0cnVlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uX2NoYXJhY3Rlcl9jaGFuZ2UoY2hhcj86IE1haW5DaGFyIHwgc3RyaW5nKSB7XG4gICAgICAgIGlmIChjaGFyKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNoYXIgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXIgPSB0aGlzLmRhdGEuaW5mby5tYWluX2NoYXJfbGlzdFtjaGFyIGFzIHN0cmluZ107XG4gICAgICAgICAgICB9IGVsc2UgdGhpcy5zZWxlY3RlZF9jaGFyID0gY2hhciBhcyBNYWluQ2hhcjtcbiAgICAgICAgfSBlbHNlIHRoaXMuc2VsZWN0ZWRfY2hhciA9IHRoaXMuY2hhcnNfbWVudS5saW5lc1t0aGlzLmNoYXJzX21lbnUuY3VycmVudF9saW5lXVt0aGlzLmNoYXJzX21lbnUuc2VsZWN0ZWRfaW5kZXhdO1xuXG4gICAgICAgIGxldCBzdGF0ZSA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRfc3RhdGUgPT09IG51bGwgfHwgdGhpcy5jdXJyZW50X3N0YXRlID09PSB1bmRlZmluZWQpIHN0YXRlID0gTWFpblN0YXR1c1N0YXRlcy5DSEFSQUNURVJTO1xuICAgICAgICBlbHNlIHN0YXRlID0gdGhpcy5jdXJyZW50X3N0YXRlO1xuXG4gICAgICAgIHRoaXMudXBkYXRlX2luZm8oKTtcbiAgICAgICAgdGhpcy5jaGFuZ2Vfc3RhdGUoc3RhdGUpO1xuXG4gICAgICAgIHRoaXMuZGF0YS5jdXJzb3JfbWFuYWdlci5zaG93KCk7XG4gICAgfVxuXG4gICAgcHVibGljIGlubmVyX2NvbnRyb2woKSB7XG4gICAgICAgIGNvbnN0IGNvbnRyb2xzID0gW1xuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuTEVGVCwgb25fZG93bjogdGhpcy5jdXJyZW50X2NvbXBvbmVudC5vbl9sZWZ0LmJpbmQodGhpcy5jdXJyZW50X2NvbXBvbmVudCl9LFxuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuUklHSFQsIG9uX2Rvd246IHRoaXMuY3VycmVudF9jb21wb25lbnQub25fcmlnaHQuYmluZCh0aGlzLmN1cnJlbnRfY29tcG9uZW50KX0sXG4gICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5VUCwgb25fZG93bjogdGhpcy5jdXJyZW50X2NvbXBvbmVudC5vbl91cC5iaW5kKHRoaXMuY3VycmVudF9jb21wb25lbnQpfSxcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkRPV04sIG9uX2Rvd246IHRoaXMuY3VycmVudF9jb21wb25lbnQub25fZG93bi5iaW5kKHRoaXMuY3VycmVudF9jb21wb25lbnQpfSxcbiAgICAgICAgXTtcblxuICAgICAgICBpZiAodGhpcy5jdXJyZW50X3N0YXRlICE9PSBNYWluU3RhdHVzU3RhdGVzLkRKSU5OKSB7XG4gICAgICAgICAgICBjb250cm9scy5wdXNoKFxuICAgICAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkEsIG9uX2Rvd246IHRoaXMudHJpZ2dlcl9zdGF0ZV9jaGFuZ2UuYmluZCh0aGlzKX0sXG4gICAgICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuQiwgb25fZG93bjogdGhpcy5zZWxlY3RpbmdfY2hhci5iaW5kKHRoaXMpfSxcbiAgICAgICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5MLCBvbl9kb3duOiB0aGlzLmNoYXJzX21lbnUucHJldmlvdXNfY2hhci5iaW5kKHRoaXMuY2hhcnNfbWVudSwgdHJ1ZSl9LFxuICAgICAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLlIsIG9uX2Rvd246IHRoaXMuY2hhcnNfbWVudS5uZXh0X2NoYXIuYmluZCh0aGlzLmNoYXJzX21lbnUsIHRydWUpfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRyb2xzLnB1c2goXG4gICAgICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuQSwgb25fZG93bjogdGhpcy5zZWxlY3RpbmdfY2hhci5iaW5kKHRoaXMpfSxcbiAgICAgICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5CLCBvbl9kb3duOiB0aGlzLnNlbGVjdGluZ19jaGFyLmJpbmQodGhpcyl9LFxuICAgICAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLlNFTEVDVCwgb25fZG93bjogdGhpcy5zZWxlY3RpbmdfY2hhci5iaW5kKHRoaXMpfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZGF0YS5jb250cm9sX21hbmFnZXIuc2V0X2NvbnRyb2woY29udHJvbHMsIHtcbiAgICAgICAgICAgIGxvb3BfY29uZmlnczoge3ZlcnRpY2FsOiB0cnVlLCBob3Jpem9udGFsOiB0cnVlLCBzaG91bGRlcjogdHJ1ZX0sXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgY2hhbmdlX3N0YXRlKG5ld19zdGF0ZTogTWFpblN0YXR1c1N0YXRlcywgcmVzZXRfcG9zOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgbGV0IHBvcyA9IHtsaW5lOiAwLCBjb2w6IDB9O1xuXG4gICAgICAgIGlmIChuZXdfc3RhdGUgPT09IE1haW5TdGF0dXNTdGF0ZXMuREpJTk4gfHwgdGhpcy5jdXJyZW50X3N0YXRlID09PSBNYWluU3RhdHVzU3RhdGVzLkRKSU5OKSB7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZV9ndWlkZV93aW4oKTtcblxuICAgICAgICAgICAgaWYgKG5ld19zdGF0ZSA9PT0gTWFpblN0YXR1c1N0YXRlcy5ESklOTikge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhcnNfbWVudS51bnNldF9jaGFyYWN0ZXIodGhpcy5jaGFyc19tZW51LnNlbGVjdGVkX2luZGV4KTtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJzX21lbnUuYXJyb3dfZ3JvdXAudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJzX21lbnUuc2V0X2NoYXJhY3Rlcih0aGlzLmNoYXJzX21lbnUuc2VsZWN0ZWRfaW5kZXgpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhcnNfbWVudS5hcnJvd19ncm91cC52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghW01haW5TdGF0dXNTdGF0ZXMuQ0hBUkFDVEVSUywgTWFpblN0YXR1c1N0YXRlcy5ESklOTl0uaW5jbHVkZXMobmV3X3N0YXRlKSAmJiAhdGhpcy5kZXNjX3dpbmRvdy5vcGVuKSB7XG4gICAgICAgICAgICB0aGlzLmRlc2Nfd2luZG93LnNob3codW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSBpZiAobmV3X3N0YXRlID09PSBNYWluU3RhdHVzU3RhdGVzLkNIQVJBQ1RFUlMgJiYgdGhpcy5kZXNjX3dpbmRvdy5vcGVuKSB7XG4gICAgICAgICAgICB0aGlzLmRlc2Nfd2luZG93LmNsb3NlKHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5ld19zdGF0ZSA9PT0gTWFpblN0YXR1c1N0YXRlcy5JVEVNUyAmJiAhdGhpcy5lcXVpcF93aW5kb3cub3Blbikge1xuICAgICAgICAgICAgdGhpcy5lcXVpcF93aW5kb3cuc2hvdyh1bmRlZmluZWQsIGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIGlmICghKG5ld19zdGF0ZSA9PT0gTWFpblN0YXR1c1N0YXRlcy5JVEVNUykgJiYgdGhpcy5lcXVpcF93aW5kb3cub3Blbikge1xuICAgICAgICAgICAgdGhpcy5lcXVpcF93aW5kb3cuY2xvc2UodW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5jdXJyZW50X2NvbXBvbmVudCkge1xuICAgICAgICAgICAgaWYgKCFyZXNldF9wb3MpIHBvcyA9IHRoaXMuY3VycmVudF9jb21wb25lbnQuY3VycmVudF9wb3M7XG5cbiAgICAgICAgICAgIHRoaXMuY3VycmVudF9jb21wb25lbnQuY2xlYXIoKTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudF9jb21wb25lbnQgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jdXJyZW50X3N0YXRlID0gbmV3X3N0YXRlO1xuICAgICAgICB0aGlzLmN1cnJlbnRfY29tcG9uZW50ID0gdGhpcy5jb21wb25lbnRzW01haW5TdGF0dXNNZW51LlN0YXRlQ29tcG9uZW50W3RoaXMuY3VycmVudF9zdGF0ZV1dO1xuXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRfc3RhdGUgPT09IE1haW5TdGF0dXNTdGF0ZXMuREpJTk4pIHRoaXMuY3VycmVudF9jb21wb25lbnQuaW5pdGlhbGl6ZSgpO1xuICAgICAgICBlbHNlIHRoaXMuY3VycmVudF9jb21wb25lbnQucmVzZXQocG9zKTtcblxuICAgICAgICBpZiAodGhpcy5jdXJyZW50X3N0YXRlICE9PSBNYWluU3RhdHVzU3RhdGVzLkNIQVJBQ1RFUlMpIHRoaXMuaW5uZXJfY29udHJvbCgpO1xuICAgICAgICB0aGlzLmNoZWNrX21haW5fY29tcG9uZW50cygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2VsZWN0aW5nX2NoYXIoKSB7XG4gICAgICAgIHRoaXMudXBkYXRlX2luZm8oKTtcbiAgICAgICAgdGhpcy5jaGFuZ2Vfc3RhdGUoTWFpblN0YXR1c1N0YXRlcy5DSEFSQUNURVJTKTtcbiAgICAgICAgdGhpcy5jaGFyc19tZW51LnNlbGVjdF9jaGFyKHRoaXMuY2hhcnNfbWVudS5zZWxlY3RlZF9pbmRleCwgZmFsc2UsIHRydWUpO1xuXG4gICAgICAgIHRoaXMuY2hhcnNfbWVudS5ncmFudF9jb250cm9sKFxuICAgICAgICAgICAgdGhpcy5jbG9zZV9tZW51LmJpbmQodGhpcywgdGhpcy5jbG9zZV9jYWxsYmFjayksXG4gICAgICAgICAgICB0aGlzLnRyaWdnZXJfc3RhdGVfY2hhbmdlLmJpbmQodGhpcyksXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3Qgb3Blbl9kamlubl9jb250cm9sID0gW1xuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuU0VMRUNULCBvbl9kb3duOiB0aGlzLmNoYW5nZV9zdGF0ZS5iaW5kKHRoaXMsIE1haW5TdGF0dXNTdGF0ZXMuREpJTk4pfSxcbiAgICAgICAgXTtcblxuICAgICAgICB0aGlzLmRhdGEuY29udHJvbF9tYW5hZ2VyLnNldF9jb250cm9sKG9wZW5fZGppbm5fY29udHJvbCwge25vX3Jlc2V0OiB0cnVlfSk7XG4gICAgICAgIHRoaXMuZGF0YS5jdXJzb3JfbWFuYWdlci5zaG93KCk7XG4gICAgfVxuXG4gICAgcHVibGljIG9wZW5fbWVudShjbG9zZV9jYWxsYmFjaz86IEZ1bmN0aW9uLCBvcGVuX2NhbGxiYWNrPzogRnVuY3Rpb24pIHtcbiAgICAgICAgaWYgKGNsb3NlX2NhbGxiYWNrKSB0aGlzLmNsb3NlX2NhbGxiYWNrID0gY2xvc2VfY2FsbGJhY2s7XG5cbiAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzWzBdO1xuICAgICAgICB0aGlzLmluaXRpYWxpemUoKTtcblxuICAgICAgICB0aGlzLmd1aWRlX3dpbmRvdy5zaG93KHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgICAgICB0aGlzLm1haW5fd2luZG93LnNob3codW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuY2hhcnNfbWVudS5vcGVuKDAsIENoYXJzTWVudU1vZGVzLk1FTlUsIHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuc2VsZWN0aW5nX2NoYXIoKTtcblxuICAgICAgICB0aGlzLm1haW5fd2luZG93Lmdyb3VwLmJyaW5nVG9Ub3AodGhpcy5tYWluX3dpbmRvdy5nZXRfaW50ZXJuYWxfZ3JvdXAoTWFpblN0YXR1c01lbnUuR1JPVVBfS0VZKSk7XG4gICAgICAgIGlmIChvcGVuX2NhbGxiYWNrKSBvcGVuX2NhbGxiYWNrKCk7XG5cbiAgICAgICAgdGhpcy5tZW51X29wZW4gPSB0cnVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBjbG9zZV9tZW51KGNhbGxiYWNrPzogRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5tZW51X29wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kYXRhLmN1cnNvcl9tYW5hZ2VyLmhpZGUoKTtcbiAgICAgICAgdGhpcy5kYXRhLmNvbnRyb2xfbWFuYWdlci5yZXNldCgpO1xuXG4gICAgICAgIHRoaXMuY3VycmVudF9jb21wb25lbnQuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5jdXJyZW50X2NvbXBvbmVudCA9IG51bGw7XG4gICAgICAgIHRoaXMuY3VycmVudF9zdGF0ZSA9IG51bGw7XG5cbiAgICAgICAgaWYgKCFjYWxsYmFjaykgY2FsbGJhY2sgPSB0aGlzLmNsb3NlX2NhbGxiYWNrO1xuXG4gICAgICAgIHRoaXMuY2hhcnNfbWVudS5jbG9zZSgpO1xuICAgICAgICB0aGlzLm1haW5fd2luZG93LmNsb3NlKHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgICAgICB0aGlzLmd1aWRlX3dpbmRvdy5jbG9zZSh1bmRlZmluZWQsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5kZXNjX3dpbmRvdy5jbG9zZSh1bmRlZmluZWQsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5lcXVpcF93aW5kb3cuY2xvc2UodW5kZWZpbmVkLCBmYWxzZSk7XG5cbiAgICAgICAgdGhpcy5hY3RpdmVfc3ByaXRlcy5mb3JFYWNoKChzOiBQaGFzZXIuU3ByaXRlIHwgUGhhc2VyLkJpdG1hcFRleHQpID0+IHtcbiAgICAgICAgICAgIHMuZGVzdHJveSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5hY3RpdmVfc3ByaXRlcyA9IFtdO1xuXG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBudWxsO1xuICAgIH1cblxuICAgIHB1YmxpYyB1cGRhdGVfZXFfaGlnaGxpZ2h0KGhpZ2hsaWdodDoge3g6IG51bWJlcjsgeTogbnVtYmVyOyB3aWR0aDogbnVtYmVyOyBoZWlnaHQ6IG51bWJlcn0pIHtcbiAgICAgICAgdGhpcy5lcV9oaWdobGlnaHQuY2xlYXIoKTtcblxuICAgICAgICB0aGlzLmVxX2hpZ2hsaWdodC5iZWdpbkZpbGwodGhpcy5lcXVpcF93aW5kb3cuY29sb3IsIDEpO1xuICAgICAgICB0aGlzLmVxX2hpZ2hsaWdodC5kcmF3UmVjdChoaWdobGlnaHQueCwgaGlnaGxpZ2h0LnksIGhpZ2hsaWdodC53aWR0aCwgaGlnaGxpZ2h0LmhlaWdodCk7XG4gICAgICAgIHRoaXMuZXFfaGlnaGxpZ2h0LmVuZEZpbGwoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gXCIuL21hZ2ljX251bWJlcnNcIjtcbmltcG9ydCB7VGlsZUV2ZW50fSBmcm9tIFwiLi90aWxlX2V2ZW50cy9UaWxlRXZlbnRcIjtcbmltcG9ydCB7RGVidWd9IGZyb20gXCIuL2RlYnVnL0RlYnVnXCI7XG5pbXBvcnQge2xvYWRfYWxsfSBmcm9tIFwiLi9pbml0aWFsaXplcnMvYXNzZXRzX2xvYWRlclwiO1xuaW1wb3J0IHtDb2xsaXNpb259IGZyb20gXCIuL0NvbGxpc2lvblwiO1xuaW1wb3J0IHtkaXJlY3Rpb25zfSBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0IHtIZXJvfSBmcm9tIFwiLi9IZXJvXCI7XG5pbXBvcnQge1RpbGVFdmVudE1hbmFnZXJ9IGZyb20gXCIuL3RpbGVfZXZlbnRzL1RpbGVFdmVudE1hbmFnZXJcIjtcbmltcG9ydCB7R2FtZUV2ZW50TWFuYWdlcn0gZnJvbSBcIi4vZ2FtZV9ldmVudHMvR2FtZUV2ZW50TWFuYWdlclwiO1xuaW1wb3J0IHtsb2FkX2RhdGFiYXNlc30gZnJvbSBcIi4vaW5pdGlhbGl6ZXJzL2RhdGFiYXNlc19sb2FkZXJcIjtcbmltcG9ydCB7R2FtZUluZm8sIGluaXRpYWxpemVfZ2FtZV9kYXRhfSBmcm9tIFwiLi9pbml0aWFsaXplcnMvaW5pdGlhbGl6ZV9pbmZvXCI7XG5pbXBvcnQge01hcH0gZnJvbSBcIi4vTWFwXCI7XG5pbXBvcnQge0JhdHRsZX0gZnJvbSBcIi4vYmF0dGxlL0JhdHRsZVwiO1xuaW1wb3J0IHtNYWluTWVudSwgaW5pdGlhbGl6ZV9tZW51fSBmcm9tIFwiLi9tYWluX21lbnVzL01haW5NZW51XCI7XG5pbXBvcnQge1Nob3BNZW51fSBmcm9tIFwiLi9tYWluX21lbnVzL1Nob3BNZW51XCI7XG5pbXBvcnQge0NvbnRyb2xNYW5hZ2VyfSBmcm9tIFwiLi91dGlscy9Db250cm9sTWFuYWdlclwiO1xuaW1wb3J0IHtDdXJzb3JNYW5hZ2VyfSBmcm9tIFwiLi91dGlscy9DdXJzb3JNYW5hZ2VyXCI7XG5pbXBvcnQge0dhbWVwYWR9IGZyb20gXCIuL0dhbWVwYWRcIjtcblxuZXhwb3J0IGNsYXNzIEdvbGRlblN1biB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lID0gbnVsbDtcbiAgICBwdWJsaWMgZGJzOiBhbnkgPSB7fTtcbiAgICBwdWJsaWMgaW5mbzogR2FtZUluZm8gPSB7fSBhcyBHYW1lSW5mbztcbiAgICBwdWJsaWMgcGFydGljbGVfbWFuYWdlcjogUGhhc2VyLlBhcnRpY2xlU3Rvcm0gPSBudWxsO1xuXG4gICAgLy9tYWluIGdhbWUgc3RhdGVzXG4gICAgcHVibGljIG1lbnVfb3BlbjogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHB1YmxpYyBzaG9wX29wZW46IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwdWJsaWMgaW5fYmF0dGxlOiBib29sZWFuID0gZmFsc2U7XG4gICAgcHVibGljIGNyZWF0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwdWJsaWMgZm9yY2Vfc3RvcF9tb3ZlbWVudDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLy9nYW1lIG9iamVjdHNcbiAgICBwdWJsaWMgaGVybzogSGVybyA9IG51bGw7IC8vY2xhc3MgcmVzcG9uc2libGUgZm9yIHRoZSBjb250cm9sIG9mIHRoZSBtYWluIGhlcm9cbiAgICBwdWJsaWMgY29sbGlzaW9uOiBDb2xsaXNpb24gPSBudWxsOyAvL2NsYXNzIHJlc3BvbnNpYmxlIGZvciB0aGUgY29sbGlzaW9uIHN5c3RlbVxuICAgIHB1YmxpYyBkZWJ1ZzogRGVidWcgPSBudWxsOyAvL2NsYXNzIHJlc3BvbnNpYmxlIGZvciB0aGUgZGVidWcgc3lzdGVtc1xuICAgIHB1YmxpYyBtYWluX21lbnU6IE1haW5NZW51ID0gbnVsbDsgLy9jbGFzcyByZXNwb25iaWJsZSBmb3IgdGhlIG1haW4gbWVudVxuICAgIHB1YmxpYyBzaG9wX21lbnU6IFNob3BNZW51ID0gbnVsbDsgLy9jbGFzcyByZXNwb25zaWJsZSBmb3IgdGhlIHNob3Agc3lzdGVtXG4gICAgcHVibGljIG1hcDogTWFwID0gbnVsbDsgLy90aGUgY3VycmVudCBhY3RpdmUgbWFwXG4gICAgcHVibGljIHRpbGVfZXZlbnRfbWFuYWdlcjogVGlsZUV2ZW50TWFuYWdlciA9IG51bGw7IC8vY2xhc3MgcmVzcG9uc2libGUgZm9yIHRoZSB0aWxlIGV2ZW50c1xuICAgIHB1YmxpYyBnYW1lX2V2ZW50X21hbmFnZXI6IEdhbWVFdmVudE1hbmFnZXIgPSBudWxsOyAvL2NsYXNzIHJlc3BvbnNpYmxlIGZvciB0aGUgZ2FtZSBldmVudHNcbiAgICBwdWJsaWMgYmF0dGxlX2luc3RhbmNlOiBCYXR0bGUgPSBudWxsOyAvL2NsYXNzIHJlc3BvbnNpYmxlIGZvciBhIGJhdHRsZVxuXG4gICAgLy9tYW5hZ2Vyc1xuICAgIHB1YmxpYyBjb250cm9sX21hbmFnZXI6IENvbnRyb2xNYW5hZ2VyID0gbnVsbDtcbiAgICBwdWJsaWMgY3Vyc29yX21hbmFnZXI6IEN1cnNvck1hbmFnZXIgPSBudWxsO1xuICAgIHB1YmxpYyBnYW1lcGFkOiBHYW1lcGFkID0gbnVsbDtcblxuICAgIC8vdmFyaWFibGVzIHRoYXQgY29udHJvbCB0aGUgY2FudmFzXG4gICAgcHVibGljIGZ1bGxzY3JlZW46IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwdWJsaWMgc2NhbGVfZmFjdG9yOiBudW1iZXIgPSAxO1xuXG4gICAgLy9ncm91cHMgdGhhdCB3aWxsIGhvbGQgdGhlIHNwcml0ZXMgdGhhdCBhcmUgYmVsb3cgdGhlIGhlcm8sIHNhbWUgbGV2ZWwgdGhhbiBoZXJvIGFuZCBhYm92ZSB0aGUgaGVyb1xuICAgIHB1YmxpYyB1bmRlcmxheWVyX2dyb3VwOiBQaGFzZXIuR3JvdXAgPSBudWxsO1xuICAgIHB1YmxpYyBucGNfZ3JvdXA6IFBoYXNlci5Hcm91cCA9IG51bGw7XG4gICAgcHVibGljIG92ZXJsYXllcl9ncm91cDogUGhhc2VyLkdyb3VwID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmdhbWUgPSBuZXcgUGhhc2VyLkdhbWUoXG4gICAgICAgICAgICBudW1iZXJzLkdBTUVfV0lEVEgsXG4gICAgICAgICAgICBudW1iZXJzLkdBTUVfSEVJR0hULFxuICAgICAgICAgICAgUGhhc2VyLldFQkdMLFxuICAgICAgICAgICAgXCJnYW1lXCIsIC8vZG9tIGVsZW1lbnQgaWRcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwcmVsb2FkOiB0aGlzLnByZWxvYWQuYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICBjcmVhdGU6IHRoaXMuY3JlYXRlLmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgIHJlbmRlcjogdGhpcy5yZW5kZXIuYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICBsb2FkUmVuZGVyOiB0aGlzLmxvYWRSZW5kZXIuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmYWxzZSwgLy90cmFuc3BhcmVudFxuICAgICAgICAgICAgZmFsc2UgLy9hbnRpYWxpYXNcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcmVsb2FkKCkge1xuICAgICAgICBsb2FkX2FsbCh0aGlzLmdhbWUpO1xuXG4gICAgICAgIHRoaXMuZ2FtZS50aW1lLmFkdmFuY2VkVGltaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5nYW1lLnN0YWdlLnNtb290aGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZ2FtZS5jYW1lcmEucm91bmRQeCA9IHRydWU7XG4gICAgICAgIHRoaXMuZ2FtZS5yZW5kZXJlci5yZW5kZXJTZXNzaW9uLnJvdW5kUGl4ZWxzID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLmdhbWUuY2FtZXJhLmZhZGUoMHgwLCAxKTtcbiAgICB9XG5cbiAgICByZW5kZXJfbG9hZGluZygpIHtcbiAgICAgICAgdGhpcy5nYW1lLmRlYnVnLnRleHQoXCJMb2FkaW5nLi4uXCIsIDUsIDE1LCBcIiMwMGZmMDBcIik7XG4gICAgfVxuXG4gICAgbG9hZFJlbmRlcigpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJfbG9hZGluZygpO1xuICAgIH1cblxuICAgIGFzeW5jIGNyZWF0ZSgpIHtcbiAgICAgICAgLy9sb2FkIHNvbWUganNvbiBmaWxlcyBmcm9tIGFzc2V0cyBmb2xkZXJcbiAgICAgICAgbG9hZF9kYXRhYmFzZXModGhpcy5nYW1lLCB0aGlzLmRicyk7XG5cbiAgICAgICAgLy9pbml0aWFsaXplIG1hbmFnZXJzXG4gICAgICAgIHRoaXMuZ2FtZXBhZCA9IG5ldyBHYW1lcGFkKHRoaXMpO1xuICAgICAgICB0aGlzLmN1cnNvcl9tYW5hZ2VyID0gbmV3IEN1cnNvck1hbmFnZXIodGhpcy5nYW1lKTtcbiAgICAgICAgdGhpcy5jb250cm9sX21hbmFnZXIgPSBuZXcgQ29udHJvbE1hbmFnZXIodGhpcy5nYW1lLCB0aGlzLmdhbWVwYWQpO1xuXG4gICAgICAgIHRoaXMuc2NhbGVfZmFjdG9yID0gdGhpcy5kYnMuaW5pdF9kYi5pbml0aWFsX3NjYWxlX2ZhY3RvcjtcblxuICAgICAgICAvL2FkdmFuY2VkIHBhcnRpY2xlIHN5c3RlbVxuICAgICAgICB0aGlzLnBhcnRpY2xlX21hbmFnZXIgPSB0aGlzLmdhbWUucGx1Z2lucy5hZGQoUGhhc2VyLlBhcnRpY2xlU3Rvcm0pO1xuXG4gICAgICAgIC8vaW5pdCBkZWJ1ZyBzeXN0ZW1zXG4gICAgICAgIHRoaXMuZGVidWcgPSBuZXcgRGVidWcodGhpcy5nYW1lLCB0aGlzKTtcbiAgICAgICAgdGhpcy5kZWJ1Zy5pbml0aWFsaXplX2NvbnRyb2xzKCk7XG5cbiAgICAgICAgLy9jcmVhdGluZyBncm91cHMuIE9yZGVyIGhlcmUgaXMgaW1wb3J0YW50XG4gICAgICAgIHRoaXMudW5kZXJsYXllcl9ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcbiAgICAgICAgdGhpcy5ucGNfZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XG4gICAgICAgIHRoaXMub3ZlcmxheWVyX2dyb3VwID0gdGhpcy5nYW1lLmFkZC5ncm91cCgpO1xuXG4gICAgICAgIC8vdXNlIHRoZSBkYXRhIGxvYWRlZCBmcm9tIGpzb24gZmlsZXMgdG8gaW5pdGlhbGl6ZSBzb21lIGRhdGFcbiAgICAgICAgYXdhaXQgaW5pdGlhbGl6ZV9nYW1lX2RhdGEodGhpcy5nYW1lLCB0aGlzKTtcblxuICAgICAgICAvL2NvbmZpZ3MgbWFwIGxheWVyczogY3JlYXRlcyBzcHJpdGVzLCBpbnRlcmFjdGFibGUgb2JqZWN0cyBhbmQgbnBjcywgbGlzdHMgZXZlbnRzIGFuZCBzZXRzIHRoZSBtYXAgbGF5ZXJzXG4gICAgICAgIHRoaXMubWFwID0gYXdhaXQgdGhpcy5pbmZvLm1hcHNfbGlzdFt0aGlzLmRicy5pbml0X2RiLm1hcF9rZXlfbmFtZV0ubW91bnRfbWFwKHRoaXMuZGJzLmluaXRfZGIubWFwX3pfaW5kZXgpO1xuXG4gICAgICAgIC8vaW5pdGlhbGl6ZXMgdGhlIGNvbnRyb2xsYWJsZSBoZXJvXG4gICAgICAgIGNvbnN0IGhlcm9fa2V5X25hbWUgPSB0aGlzLmRicy5pbml0X2RiLmhlcm9fa2V5X25hbWU7XG4gICAgICAgIHRoaXMuaGVybyA9IG5ldyBIZXJvKFxuICAgICAgICAgICAgdGhpcy5nYW1lLFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIGhlcm9fa2V5X25hbWUsXG4gICAgICAgICAgICB0aGlzLmRicy5pbml0X2RiLnhfdGlsZV9wb3NpdGlvbixcbiAgICAgICAgICAgIHRoaXMuZGJzLmluaXRfZGIueV90aWxlX3Bvc2l0aW9uLFxuICAgICAgICAgICAgdGhpcy5kYnMuaW5pdF9kYi5pbml0aWFsX2FjdGlvbixcbiAgICAgICAgICAgIGRpcmVjdGlvbnNbdGhpcy5kYnMuaW5pdF9kYi5pbml0aWFsX2RpcmVjdGlvbl0sXG4gICAgICAgICAgICB0aGlzLmluZm8ubWFpbl9jaGFyX2xpc3RbaGVyb19rZXlfbmFtZV0ud2Fsa19zcGVlZCxcbiAgICAgICAgICAgIHRoaXMuaW5mby5tYWluX2NoYXJfbGlzdFtoZXJvX2tleV9uYW1lXS5kYXNoX3NwZWVkLFxuICAgICAgICAgICAgdGhpcy5pbmZvLm1haW5fY2hhcl9saXN0W2hlcm9fa2V5X25hbWVdLmNsaW1iX3NwZWVkXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGhlcm9fc3ByaXRlX2Jhc2UgPSB0aGlzLmluZm8ubWFpbl9jaGFyX2xpc3RbaGVyb19rZXlfbmFtZV0uc3ByaXRlX2Jhc2U7XG4gICAgICAgIHRoaXMuaGVyby5zZXRfc3ByaXRlKFxuICAgICAgICAgICAgdGhpcy5ucGNfZ3JvdXAsXG4gICAgICAgICAgICBoZXJvX3Nwcml0ZV9iYXNlLFxuICAgICAgICAgICAgdGhpcy5tYXAuc3ByaXRlLFxuICAgICAgICAgICAgdGhpcy5tYXAuY29sbGlzaW9uX2xheWVyLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgdGhpcy5tYXAuaXNfd29ybGRfbWFwXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuaGVyby5zZXRfc2hhZG93KFwic2hhZG93XCIsIHRoaXMubnBjX2dyb3VwLCB0aGlzLm1hcC5jb2xsaXNpb25fbGF5ZXIpO1xuICAgICAgICB0aGlzLmhlcm8uY3JlYXRlX2hhbGZfY3JvcF9tYXNrKHRoaXMubWFwLmlzX3dvcmxkX21hcCk7XG4gICAgICAgIHRoaXMuaGVyby5jYW1lcmFfZm9sbG93KCk7XG4gICAgICAgIHRoaXMuaGVyby5wbGF5KCk7XG5cbiAgICAgICAgLy9pbml0aWFsaXplcyBjb2xsaXNpb24gc3lzdGVtXG4gICAgICAgIHRoaXMuY29sbGlzaW9uID0gbmV3IENvbGxpc2lvbih0aGlzLmdhbWUsIHRoaXMuaGVybyk7XG4gICAgICAgIHRoaXMuaGVyby5jb25maWdfYm9keSh0aGlzLmNvbGxpc2lvbik7XG4gICAgICAgIHRoaXMuY29sbGlzaW9uLmNvbmZpZ19jb2xsaXNpb25fZ3JvdXBzKHRoaXMubWFwKTtcbiAgICAgICAgdGhpcy5tYXAuY29uZmlnX2FsbF9ib2RpZXModGhpcy5jb2xsaXNpb24sIHRoaXMubWFwLmNvbGxpc2lvbl9sYXllcik7XG4gICAgICAgIHRoaXMuY29sbGlzaW9uLmNvbmZpZ19jb2xsaXNpb25zKHRoaXMubWFwLCB0aGlzLm1hcC5jb2xsaXNpb25fbGF5ZXIsIHRoaXMubnBjX2dyb3VwKTtcbiAgICAgICAgdGhpcy5nYW1lLnBoeXNpY3MucDIudXBkYXRlQm91bmRzQ29sbGlzaW9uR3JvdXAoKTtcblxuICAgICAgICAvL2luaXRpYWxpemVzIHRoZSBldmVudCBtYW5hZ2Vyc1xuICAgICAgICB0aGlzLnRpbGVfZXZlbnRfbWFuYWdlciA9IG5ldyBUaWxlRXZlbnRNYW5hZ2VyKHRoaXMuZ2FtZSwgdGhpcywgdGhpcy5oZXJvLCB0aGlzLmNvbGxpc2lvbik7XG4gICAgICAgIHRoaXMuZ2FtZV9ldmVudF9tYW5hZ2VyID0gbmV3IEdhbWVFdmVudE1hbmFnZXIodGhpcy5nYW1lLCB0aGlzKTtcblxuICAgICAgICB0aGlzLmluaXRpYWxpemVfdXRpbHNfY29udHJvbHMoKTtcblxuICAgICAgICB0aGlzLmNyZWF0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmdhbWUuY2FtZXJhLnJlc2V0RlgoKTtcbiAgICB9XG5cbiAgICBpbml0aWFsaXplX3V0aWxzX2NvbnRyb2xzKCkge1xuICAgICAgICAvL3NldCBpbml0aWFsIHpvb21cbiAgICAgICAgdGhpcy5nYW1lLnNjYWxlLnNldHVwU2NhbGUodGhpcy5zY2FsZV9mYWN0b3IgKiBudW1iZXJzLkdBTUVfV0lEVEgsIHRoaXMuc2NhbGVfZmFjdG9yICogbnVtYmVycy5HQU1FX0hFSUdIVCk7XG4gICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInJlc2l6ZVwiKSk7XG5cbiAgICAgICAgLy9lbmFibGUgZnVsbCBzY3JlZW5cbiAgICAgICAgdGhpcy5nYW1lLnNjYWxlLmZ1bGxTY3JlZW5TY2FsZU1vZGUgPSBQaGFzZXIuU2NhbGVNYW5hZ2VyLlNIT1dfQUxMO1xuICAgICAgICB0aGlzLmdhbWUuaW5wdXQub25UYXAuYWRkKChwb2ludGVyLCBpc19kb3VibGVfY2xpY2spID0+IHtcbiAgICAgICAgICAgIGlmIChpc19kb3VibGVfY2xpY2spIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUuc2NhbGUuc3RhcnRGdWxsU2NyZWVuKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5nYW1lLnNjYWxlLm9uRnVsbFNjcmVlbkNoYW5nZS5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5mdWxsc2NyZWVuID0gIXRoaXMuZnVsbHNjcmVlbjtcbiAgICAgICAgICAgIHRoaXMuc2NhbGVfZmFjdG9yID0gMTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5zY2FsZS5zZXR1cFNjYWxlKG51bWJlcnMuR0FNRV9XSURUSCwgbnVtYmVycy5HQU1FX0hFSUdIVCk7XG4gICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJyZXNpemVcIikpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvL2luaXRpYWxpemUgc2NyZWVuc1xuICAgICAgICB0aGlzLnNob3BfbWVudSA9IG5ldyBTaG9wTWVudSh0aGlzLmdhbWUsIHRoaXMpO1xuICAgICAgICB0aGlzLm1haW5fbWVudSA9IGluaXRpYWxpemVfbWVudSh0aGlzLmdhbWUsIHRoaXMpO1xuXG4gICAgICAgIC8vZW5hYmxlIHpvb20gYW5kIHBzeW5lcmdpZXMgc2hvcnRjdXRzIGZvciB0ZXN0aW5nXG4gICAgICAgIGxldCBjb250cm9scyA9IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBrZXk6IHRoaXMuZ2FtZXBhZC5aT09NMSxcbiAgICAgICAgICAgICAgICBvbl9kb3duOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmZ1bGxzY3JlZW4pIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2FsZV9mYWN0b3IgPSAxO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWUuc2NhbGUuc2V0dXBTY2FsZShudW1iZXJzLkdBTUVfV0lEVEgsIG51bWJlcnMuR0FNRV9IRUlHSFQpO1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJyZXNpemVcIikpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGtleTogdGhpcy5nYW1lcGFkLlpPT00yLFxuICAgICAgICAgICAgICAgIG9uX2Rvd246ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZnVsbHNjcmVlbikgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjYWxlX2ZhY3RvciA9IDI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5zY2FsZS5zZXR1cFNjYWxlKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2FsZV9mYWN0b3IgKiBudW1iZXJzLkdBTUVfV0lEVEgsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNjYWxlX2ZhY3RvciAqIG51bWJlcnMuR0FNRV9IRUlHSFRcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwicmVzaXplXCIpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBrZXk6IHRoaXMuZ2FtZXBhZC5aT09NMyxcbiAgICAgICAgICAgICAgICBvbl9kb3duOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmZ1bGxzY3JlZW4pIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2FsZV9mYWN0b3IgPSAzO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWUuc2NhbGUuc2V0dXBTY2FsZShcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2NhbGVfZmFjdG9yICogbnVtYmVycy5HQU1FX1dJRFRILFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2FsZV9mYWN0b3IgKiBudW1iZXJzLkdBTUVfSEVJR0hUXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInJlc2l6ZVwiKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAga2V5OiB0aGlzLmdhbWVwYWQuUFNZMSxcbiAgICAgICAgICAgICAgICBvbl9kb3duOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhlcm8uaW5fYWN0aW9uKCkgfHwgdGhpcy5tZW51X29wZW4gfHwgdGhpcy5pbl9iYXR0bGUgfHwgdGhpcy5zaG9wX29wZW4pIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmZvLmZpZWxkX2FiaWxpdGllc19saXN0Lm1vdmUuY2FzdCh0aGlzLmhlcm8sIHRoaXMuZGJzLmluaXRfZGIuaW5pdGlhbF9zaG9ydGN1dHMubW92ZSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAga2V5OiB0aGlzLmdhbWVwYWQuUFNZMixcbiAgICAgICAgICAgICAgICBvbl9kb3duOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhlcm8uaW5fYWN0aW9uKCkgfHwgdGhpcy5tZW51X29wZW4gfHwgdGhpcy5pbl9iYXR0bGUgfHwgdGhpcy5zaG9wX29wZW4pIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmZvLmZpZWxkX2FiaWxpdGllc19saXN0LmZyb3N0LmNhc3QodGhpcy5oZXJvLCB0aGlzLmRicy5pbml0X2RiLmluaXRpYWxfc2hvcnRjdXRzLmZyb3N0KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBrZXk6IHRoaXMuZ2FtZXBhZC5QU1kzLFxuICAgICAgICAgICAgICAgIG9uX2Rvd246ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaGVyby5pbl9hY3Rpb24oKSB8fCB0aGlzLm1lbnVfb3BlbiB8fCB0aGlzLmluX2JhdHRsZSB8fCB0aGlzLnNob3Bfb3BlbikgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmluZm8uZmllbGRfYWJpbGl0aWVzX2xpc3QuZ3Jvd3RoLmNhc3QodGhpcy5oZXJvLCB0aGlzLmRicy5pbml0X2RiLmluaXRpYWxfc2hvcnRjdXRzLmdyb3d0aCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF07XG4gICAgICAgIHRoaXMuY29udHJvbF9tYW5hZ2VyLnNldF9jb250cm9sKGNvbnRyb2xzLCB7cGVyc2lzdDogdHJ1ZX0pO1xuICAgIH1cblxuICAgIGhlcm9fbW92ZW1lbnRfYWxsb3dlZChhbGxvd19jbGltYmluZyA9IHRydWUpIHtcbiAgICAgICAgcmV0dXJuICEoXG4gICAgICAgICAgICB0aGlzLmhlcm8uaW5fYWN0aW9uKGFsbG93X2NsaW1iaW5nKSB8fFxuICAgICAgICAgICAgdGhpcy5tZW51X29wZW4gfHxcbiAgICAgICAgICAgIHRoaXMuc2hvcF9vcGVuIHx8XG4gICAgICAgICAgICB0aGlzLmluX2JhdHRsZSB8fFxuICAgICAgICAgICAgdGhpcy50aWxlX2V2ZW50X21hbmFnZXIub25fZXZlbnQgfHxcbiAgICAgICAgICAgIHRoaXMuZm9yY2Vfc3RvcF9tb3ZlbWVudFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNyZWF0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyX2xvYWRpbmcoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5oZXJvX21vdmVtZW50X2FsbG93ZWQoKSkge1xuICAgICAgICAgICAgdGhpcy5oZXJvLnVwZGF0ZV90aWxlX3Bvc2l0aW9uKHRoaXMubWFwLnNwcml0ZSk7XG5cbiAgICAgICAgICAgIHRoaXMudGlsZV9ldmVudF9tYW5hZ2VyLmZpcmVfdHJpZ2dlcmVkX2V2ZW50cygpOyAvL3RyaWdnZXIgYW55IGV2ZW50IHRoYXQncyB3YWl0aW5nIHRvIGJlIHRyaWdnZXJlZFxuICAgICAgICAgICAgY29uc3QgbG9jYXRpb25fa2V5ID0gVGlsZUV2ZW50LmdldF9sb2NhdGlvbl9rZXkodGhpcy5oZXJvLnRpbGVfeF9wb3MsIHRoaXMuaGVyby50aWxlX3lfcG9zKTtcbiAgICAgICAgICAgIGlmIChsb2NhdGlvbl9rZXkgaW4gdGhpcy5tYXAuZXZlbnRzKSB7XG4gICAgICAgICAgICAgICAgLy9jaGVjayBpZiB0aGUgYWN0dWFsIHRpbGUgaGFzIGFuIGV2ZW50XG4gICAgICAgICAgICAgICAgdGhpcy50aWxlX2V2ZW50X21hbmFnZXIuY2hlY2tfdGlsZV9ldmVudHMobG9jYXRpb25fa2V5LCB0aGlzLm1hcCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuaGVyby51cGRhdGUodGhpcy5tYXApOyAvL3VwZGF0ZSBoZXJvIHBvc2l0aW9uL3ZlbG9jaXR5L3Nwcml0ZVxuICAgICAgICAgICAgdGhpcy5tYXAudXBkYXRlKCk7IC8vdXBkYXRlIG1hcCBhbmQgaXRzIG9iamVjdHMgcG9zaXRpb24vdmVsb2NpdHkvc3ByaXRlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhlcm8uc3RvcF9jaGFyKGZhbHNlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLm1lbnVfb3BlbiAmJiB0aGlzLm1haW5fbWVudS5pc19hY3RpdmUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1haW5fbWVudS51cGRhdGVfcG9zaXRpb24oKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5zaG9wX29wZW4gJiYgdGhpcy5zaG9wX21lbnUuaG9yaXpvbnRhbF9tZW51Lm1lbnVfYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG9wX21lbnUudXBkYXRlX3Bvc2l0aW9uKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaW5fYmF0dGxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5iYXR0bGVfaW5zdGFuY2UudXBkYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHRoaXMuZGVidWcuc2V0X2RlYnVnX2luZm8oKTtcbiAgICAgICAgaWYgKHRoaXMuZ2FtZS50aW1lLmZyYW1lcyAlIDggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGVidWcuZmlsbF9rZXlfZGVidWdfdGFibGUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5nYW1lLnRpbWUuZnJhbWVzICUgMzAgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGVidWcuZmlsbF9zdGF0c19kZWJ1Z190YWJsZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG52YXIgZ29sZGVuX3N1biA9IG5ldyBHb2xkZW5TdW4oKTtcblxuLy9kZWJ1Z2dpbmcgcG9ycG91c2VzXG4od2luZG93IGFzIGFueSkuZGF0YSA9IGdvbGRlbl9zdW47XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCJpbXBvcnQge0dvbGRlblN1bn0gZnJvbSBcIi4uL0dvbGRlblN1blwiO1xuaW1wb3J0IHtNYWluQ2hhcn0gZnJvbSBcIi4uL01haW5DaGFyXCI7XG5pbXBvcnQge3JldmVyc2VfZGlyZWN0aW9ucywgb3JkZXJlZF9lbGVtZW50c30gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgKiBhcyBfIGZyb20gXCJsb2Rhc2hcIjtcblxuZXhwb3J0IGNsYXNzIERlYnVnIHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6IEdvbGRlblN1bjtcbiAgICBwdWJsaWMgZGVidWdfcGh5c2ljczogYm9vbGVhbjtcbiAgICBwdWJsaWMgZ3JpZDogYm9vbGVhbjtcbiAgICBwdWJsaWMgZGVidWdfa2V5czogYm9vbGVhbjtcbiAgICBwdWJsaWMgZGVidWdfc3RhdHM6IGJvb2xlYW47XG4gICAgcHVibGljIHNob3dfZnBzOiBib29sZWFuO1xuICAgIHB1YmxpYyBzaG93X3NsaWRlcnM6IGJvb2xlYW47XG4gICAgcHVibGljIGRlYnVnX3N0YXRzX2luZm86IHtcbiAgICAgICAgY2hhcnM6IE1haW5DaGFyW107XG4gICAgICAgIHNlbGVjdGVkOiBudW1iZXI7XG4gICAgICAgIGxpc3RlbmVyOiBFdmVudExpc3RlbmVyO1xuICAgIH07XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuZGVidWdfcGh5c2ljcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmdyaWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kZWJ1Z19rZXlzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGVidWdfc3RhdHMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zaG93X2ZwcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNob3dfc2xpZGVycyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGluaXRpYWxpemVfY29udHJvbHMoKSB7XG4gICAgICAgIGxldCBkZWJ1Z19jb250cm9scyA9IFtcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkRFQlVHX1BIWVNJQ1MsIG9uX2Rvd246IHRoaXMudG9nZ2xlX2RlYnVnX3BoeXNpY3MuYmluZCh0aGlzKX0sXG4gICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5ERUJVR19HUklELCBvbl9kb3duOiB0aGlzLnRvZ2dsZV9ncmlkLmJpbmQodGhpcyl9LFxuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuREVCVUdfS0VZUywgb25fZG93bjogdGhpcy50b2dnbGVfa2V5cy5iaW5kKHRoaXMpfSxcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkRFQlVHX1NUQVRTLCBvbl9kb3duOiB0aGlzLnRvZ2dsZV9zdGF0cy5iaW5kKHRoaXMpfSxcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkRFQlVHX0ZQUywgb25fZG93bjogdGhpcy50b2dnbGVfZnBzLmJpbmQodGhpcyl9LFxuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuREVCVUdfU0xJREVSUywgb25fZG93bjogdGhpcy50b2dnbGVfc2xpZGVycy5iaW5kKHRoaXMpfSxcbiAgICAgICAgXTtcbiAgICAgICAgdGhpcy5kYXRhLmNvbnRyb2xfbWFuYWdlci5zZXRfY29udHJvbChkZWJ1Z19jb250cm9scywge3BlcnNpc3Q6IHRydWV9KTtcbiAgICB9XG5cbiAgICB1cGRhdGVfZGVidWdfcGh5c2ljcyhmbGFnKSB7XG4gICAgICAgIHRoaXMuZGF0YS5tYXAuY29sbGlzaW9uX3Nwcml0ZS5ib2R5LmRlYnVnID0gZmxhZztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRhdGEubnBjX2dyb3VwLmNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBsZXQgc3ByaXRlOiBQaGFzZXIuU3ByaXRlID0gdGhpcy5kYXRhLm5wY19ncm91cC5jaGlsZHJlbltpXSBhcyBQaGFzZXIuU3ByaXRlO1xuICAgICAgICAgICAgaWYgKCFzcHJpdGUuaXNfbnBjICYmICFzcHJpdGUuaXNfaW50ZXJhY3RhYmxlX29iamVjdCkgY29udGludWU7XG4gICAgICAgICAgICBpZiAoIXNwcml0ZS5ib2R5KSBjb250aW51ZTtcbiAgICAgICAgICAgIHNwcml0ZS5ib2R5LmRlYnVnID0gZmxhZztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vYWN0aXZhdGUgZGVidWcgbW9kZVxuICAgIHRvZ2dsZV9kZWJ1Z19waHlzaWNzKCkge1xuICAgICAgICB0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keS5kZWJ1ZyA9ICF0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keS5kZWJ1ZztcbiAgICAgICAgdGhpcy51cGRhdGVfZGVidWdfcGh5c2ljcyh0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keS5kZWJ1Zyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhLmNvbGxpc2lvbi5keW5hbWljX2p1bXBfZXZlbnRzX2JvZGllcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdGhpcy5kYXRhLmNvbGxpc2lvbi5keW5hbWljX2p1bXBfZXZlbnRzX2JvZGllc1tpXS5kZWJ1ZyA9ICF0aGlzLmRhdGEuY29sbGlzaW9uLmR5bmFtaWNfanVtcF9ldmVudHNfYm9kaWVzW2ldXG4gICAgICAgICAgICAgICAgLmRlYnVnO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhLm1hcC5pbnRlcmFjdGFibGVfb2JqZWN0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgaW50ZXJhY3RhYmxlX29iamVjdCA9IHRoaXMuZGF0YS5tYXAuaW50ZXJhY3RhYmxlX29iamVjdHNbaV07XG4gICAgICAgICAgICBpZiAoaW50ZXJhY3RhYmxlX29iamVjdC5jdXN0b21fZGF0YS5ibG9ja2luZ19zdGFpcl9ibG9jaykge1xuICAgICAgICAgICAgICAgIGludGVyYWN0YWJsZV9vYmplY3QuY3VzdG9tX2RhdGEuYmxvY2tpbmdfc3RhaXJfYmxvY2suZGVidWcgPSAhaW50ZXJhY3RhYmxlX29iamVjdC5jdXN0b21fZGF0YVxuICAgICAgICAgICAgICAgICAgICAuYmxvY2tpbmdfc3RhaXJfYmxvY2suZGVidWc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZWJ1Z19waHlzaWNzID0gIXRoaXMuZGVidWdfcGh5c2ljcztcbiAgICB9XG5cbiAgICAvL2FjdGl2YXRlIGtleXMgZGVidWcgbW9kZVxuICAgIHRvZ2dsZV9rZXlzKCkge1xuICAgICAgICB0aGlzLmRlYnVnX2tleXMgPSAhdGhpcy5kZWJ1Z19rZXlzO1xuICAgICAgICBjb25zdCB0b2dnbGVyID0gKGlzX2Rvd24sIGUpID0+IHtcbiAgICAgICAgICAgIGxldCBjbGFzc19saXN0O1xuICAgICAgICAgICAgc3dpdGNoIChlLmtleUNvZGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDM4OlxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5yZXBlYXQpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NfbGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIja2V5X2RlYnVnIC51cFwiKS5jbGFzc0xpc3Q7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgICAgICAgICAgIGlmIChlLnJlcGVhdCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBjbGFzc19saXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNrZXlfZGVidWcgLmRvd25cIikuY2xhc3NMaXN0O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5yZXBlYXQpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NfbGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIja2V5X2RlYnVnIC5yaWdodFwiKS5jbGFzc0xpc3Q7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzc6XG4gICAgICAgICAgICAgICAgICAgIGlmIChlLnJlcGVhdCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBjbGFzc19saXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNrZXlfZGVidWcgLmxlZnRcIikuY2xhc3NMaXN0O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjbGFzc19saXN0KSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzX2Rvd24pIHtcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NfbGlzdC5hZGQoXCJwcmVzc2VkXCIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzX2xpc3QucmVtb3ZlKFwicHJlc3NlZFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLmRlYnVnX2tleXMpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwia2V5X2RlYnVnXCIpLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcbiAgICAgICAgICAgIGRvY3VtZW50Lm9ua2V5ZG93biA9IHRvZ2dsZXIuYmluZChudWxsLCB0cnVlKTtcbiAgICAgICAgICAgIGRvY3VtZW50Lm9ua2V5dXAgPSB0b2dnbGVyLmJpbmQobnVsbCwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrZXlfZGVidWdcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgZG9jdW1lbnQub25rZXlkb3duID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgZG9jdW1lbnQub25rZXl1cCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vc2hvdyBzbGlkZXJzXG4gICAgdG9nZ2xlX3NsaWRlcnMoKSB7XG4gICAgICAgIHRoaXMuc2hvd19zbGlkZXJzID0gIXRoaXMuc2hvd19zbGlkZXJzO1xuICAgICAgICBpZiAodGhpcy5zaG93X3NsaWRlcnMpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2xpZGVyc19kZWJ1Z1wiKS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzbGlkZXJzX2RlYnVnXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFkZF9zbGlkZXIoKSB7XG4gICAgICAgIGNvbnN0IGhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGhvbGRlci5jbGFzc0xpc3QuYWRkKFwiaG9sZGVyXCIpO1xuXG4gICAgICAgIGNvbnN0IGlucHV0X3ZhcmlhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgICBpbnB1dF92YXJpYWJsZS50eXBlID0gXCJ0ZXh0XCI7XG4gICAgICAgIGlucHV0X3ZhcmlhYmxlLnBsYWNlaG9sZGVyID0gXCJ2YXJpYWJsZSBuYW1lXCI7XG5cbiAgICAgICAgY29uc3QgaW5wdXRfc2xpZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgICBpbnB1dF9zbGlkZXIudHlwZSA9IFwicmFuZ2VcIjtcbiAgICAgICAgaW5wdXRfc2xpZGVyLmRpc2FibGVkID0gdHJ1ZTtcblxuICAgICAgICBjb25zdCBpbnB1dF9taW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgIGlucHV0X21pbi50eXBlID0gXCJudW1iZXJcIjtcbiAgICAgICAgaW5wdXRfbWluLnBsYWNlaG9sZGVyID0gXCJtaW4gdmFsdWVcIjtcbiAgICAgICAgaW5wdXRfbWluLm9ua2V5dXAgPSBlID0+IHtcbiAgICAgICAgICAgIGlucHV0X3NsaWRlci5taW4gPSBpbnB1dF9taW4udmFsdWU7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgaW5wdXRfbWF4ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgICBpbnB1dF9tYXgudHlwZSA9IFwibnVtYmVyXCI7XG4gICAgICAgIGlucHV0X21heC5wbGFjZWhvbGRlciA9IFwibWF4IHZhbHVlXCI7XG4gICAgICAgIGlucHV0X21heC5vbmtleXVwID0gZSA9PiB7XG4gICAgICAgICAgICBpbnB1dF9zbGlkZXIubWF4ID0gaW5wdXRfbWF4LnZhbHVlO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGlucHV0X3N0ZXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgIGlucHV0X3N0ZXAudHlwZSA9IFwibnVtYmVyXCI7XG4gICAgICAgIGlucHV0X3N0ZXAucGxhY2Vob2xkZXIgPSBcInN0ZXAgdmFsdWVcIjtcblxuICAgICAgICBjb25zdCBpbnB1dF92YWx1ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgaW5wdXRfdmFsdWUudHlwZSA9IFwibnVtYmVyXCI7XG4gICAgICAgIGlucHV0X3ZhbHVlLnBsYWNlaG9sZGVyID0gXCJjdXJyZW50IHZhbHVlXCI7XG4gICAgICAgIGlucHV0X3ZhbHVlLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgaW5wdXRfdmFsdWUub25rZXl1cCA9IGlucHV0X3ZhbHVlLm9uY2hhbmdlID0gZSA9PiB7XG4gICAgICAgICAgICBfLnNldCh3aW5kb3csIGlucHV0X3ZhcmlhYmxlLnZhbHVlLCBwYXJzZUZsb2F0KGlucHV0X3ZhbHVlLnZhbHVlKSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgaW5wdXRfcmVtb3ZlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgICBpbnB1dF9yZW1vdmUudHlwZSA9IFwiYnV0dG9uXCI7XG4gICAgICAgIGlucHV0X3JlbW92ZS52YWx1ZSA9IFwiUmVtb3ZlXCI7XG4gICAgICAgIGlucHV0X3JlbW92ZS5vbmNsaWNrID0gZSA9PiB7XG4gICAgICAgICAgICBob2xkZXIucmVtb3ZlKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaW5wdXRfc3RlcC5vbmtleXVwID0gZSA9PiB7XG4gICAgICAgICAgICBpbnB1dF9zbGlkZXIuc3RlcCA9IGlucHV0X3N0ZXAudmFsdWU7XG4gICAgICAgICAgICBpbnB1dF92YWx1ZS5zdGVwID0gaW5wdXRfc3RlcC52YWx1ZTtcbiAgICAgICAgICAgIGlucHV0X21pbi5zdGVwID0gaW5wdXRfc3RlcC52YWx1ZTtcbiAgICAgICAgICAgIGlucHV0X21heC5zdGVwID0gaW5wdXRfc3RlcC52YWx1ZTtcbiAgICAgICAgfTtcblxuICAgICAgICBpbnB1dF9zbGlkZXIub25pbnB1dCA9IGUgPT4ge1xuICAgICAgICAgICAgXy5zZXQod2luZG93LCBpbnB1dF92YXJpYWJsZS52YWx1ZSwgcGFyc2VGbG9hdChpbnB1dF9zbGlkZXIudmFsdWUpKTtcbiAgICAgICAgICAgIGlucHV0X3ZhbHVlLnZhbHVlID0gaW5wdXRfc2xpZGVyLnZhbHVlO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlucHV0X3ZhcmlhYmxlLm9ua2V5dXAgPSBlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gXy5nZXQod2luZG93LCBpbnB1dF92YXJpYWJsZS52YWx1ZSk7XG4gICAgICAgICAgICBpZiAoXy5pc051bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBpbnB1dF9zbGlkZXIuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpbnB1dF92YWx1ZS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlucHV0X3NsaWRlci52YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgaW5wdXRfdmFsdWUudmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbnB1dF9zbGlkZXIuZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlucHV0X3ZhbHVlLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBob2xkZXIuYXBwZW5kQ2hpbGQoaW5wdXRfdmFyaWFibGUpO1xuICAgICAgICBob2xkZXIuYXBwZW5kQ2hpbGQoaW5wdXRfbWluKTtcbiAgICAgICAgaG9sZGVyLmFwcGVuZENoaWxkKGlucHV0X21heCk7XG4gICAgICAgIGhvbGRlci5hcHBlbmRDaGlsZChpbnB1dF9zdGVwKTtcbiAgICAgICAgaG9sZGVyLmFwcGVuZENoaWxkKGlucHV0X3NsaWRlcik7XG4gICAgICAgIGhvbGRlci5hcHBlbmRDaGlsZChpbnB1dF92YWx1ZSk7XG4gICAgICAgIGhvbGRlci5hcHBlbmRDaGlsZChpbnB1dF9yZW1vdmUpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNsaWRlcnNfZGVidWdcIikuYXBwZW5kQ2hpbGQoaG9sZGVyKTtcbiAgICB9XG5cbiAgICBmaWxsX2tleV9kZWJ1Z190YWJsZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRlYnVnX2tleXMpIHJldHVybjtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNrZXlfZGVidWcgdGFibGUgLmRpcmVjdGlvblwiKS5pbm5lckhUTUwgPVxuICAgICAgICAgICAgcmV2ZXJzZV9kaXJlY3Rpb25zW3RoaXMuZGF0YS5oZXJvLmN1cnJlbnRfZGlyZWN0aW9uXTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNrZXlfZGVidWcgdGFibGUgLmFjdGlvblwiKS5pbm5lckhUTUwgPSB0aGlzLmRhdGEuaGVyby5jdXJyZW50X2FjdGlvbjtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNrZXlfZGVidWcgdGFibGUgLnhcIikuaW5uZXJIVE1MID0gYCR7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby50aWxlX3hfcG9zXG4gICAgICAgIH0vJHt0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keS54LnRvRml4ZWQoMyl9YDtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNrZXlfZGVidWcgdGFibGUgLnlcIikuaW5uZXJIVE1MID0gYCR7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby50aWxlX3lfcG9zXG4gICAgICAgIH0vJHt0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keS55LnRvRml4ZWQoMyl9YDtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNrZXlfZGVidWcgdGFibGUgLnNwZWVkX3hcIikuaW5uZXJIVE1MID0gdGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkudmVsb2NpdHkueC50b0ZpeGVkKFxuICAgICAgICAgICAgM1xuICAgICAgICApO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2tleV9kZWJ1ZyB0YWJsZSAuc3BlZWRfeVwiKS5pbm5lckhUTUwgPSB0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keS52ZWxvY2l0eS55LnRvRml4ZWQoXG4gICAgICAgICAgICAzXG4gICAgICAgICk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICBcIiNrZXlfZGVidWcgdGFibGUgLmZvcmNlX2RpcmVjdGlvblwiXG4gICAgICAgICkuaW5uZXJIVE1MID0gdGhpcy5kYXRhLmhlcm8uZm9yY2VfZGlyZWN0aW9uLnRvU3RyaW5nKCk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICBcIiNrZXlfZGVidWcgdGFibGUgLnN0b3BfYnlfY29sbGlkaW5nXCJcbiAgICAgICAgKS5pbm5lckhUTUwgPSB0aGlzLmRhdGEuaGVyby5zdG9wX2J5X2NvbGxpZGluZy50b1N0cmluZygpO1xuICAgIH1cblxuICAgIC8vZW5hYmxlIGZwcyBzaG93XG4gICAgdG9nZ2xlX2ZwcygpIHtcbiAgICAgICAgdGhpcy5zaG93X2ZwcyA9ICF0aGlzLnNob3dfZnBzO1xuICAgIH1cblxuICAgIC8vYWN0aXZhdGUgZ3JpZCBtb2RlXG4gICAgdG9nZ2xlX2dyaWQoKSB7XG4gICAgICAgIHRoaXMuZ3JpZCA9ICF0aGlzLmdyaWQ7XG4gICAgfVxuXG4gICAgc2V0X2RlYnVnX2luZm8oKSB7XG4gICAgICAgIHRoaXMuZ2FtZS5kZWJ1Zy50ZXh0KFwiXCIsIDAsIDApO1xuXG4gICAgICAgIGlmICh0aGlzLnNob3dfZnBzKSB7XG4gICAgICAgICAgICB0aGlzLmdhbWUuZGVidWcudGV4dChcIkZQUzogXCIgKyB0aGlzLmdhbWUudGltZS5mcHMgfHwgXCJGUFM6IC0tXCIsIDUsIDE1LCBcIiMwMGZmMDBcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5ncmlkKSB7XG4gICAgICAgICAgICBjb25zdCB0aWxlX3dpZHRoID0gdGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZVdpZHRoO1xuICAgICAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB0aGlzLmdhbWUud29ybGQud2lkdGg7IHggKz0gdGlsZV93aWR0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5kZWJ1Zy5nZW9tKFxuICAgICAgICAgICAgICAgICAgICBuZXcgUGhhc2VyLkxpbmUoeCwgMCwgeCwgdGhpcy5nYW1lLndvcmxkLmhlaWdodCksXG4gICAgICAgICAgICAgICAgICAgIFwicmdiYSgwLDI1NSwyNTUsMC4zNSlcIixcbiAgICAgICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIDRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdGlsZV9oZWlnaHQgPSB0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlSGVpZ2h0O1xuICAgICAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aGlzLmdhbWUud29ybGQuaGVpZ2h0OyB5ICs9IHRpbGVfaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLmRlYnVnLmdlb20obmV3IFBoYXNlci5MaW5lKDAsIHksIHRoaXMuZ2FtZS53b3JsZC53aWR0aCwgeSksIFwicmdiYSgwLDI1NSwyNTUsMC4zNSlcIiwgZmFsc2UsIDQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHhfcG9zID0gdGhpcy5kYXRhLmhlcm8udGlsZV94X3BvcyAqIHRpbGVfd2lkdGg7XG4gICAgICAgICAgICBsZXQgeV9wb3MgPSB0aGlzLmRhdGEuaGVyby50aWxlX3lfcG9zICogdGlsZV9oZWlnaHQ7XG4gICAgICAgICAgICB0aGlzLmdhbWUuZGVidWcuZ2VvbShuZXcgUGhhc2VyLlJlY3RhbmdsZSh4X3BvcywgeV9wb3MsIHRpbGVfd2lkdGgsIHRpbGVfaGVpZ2h0KSwgXCJyZ2JhKDI1NSwwLDAsMC41KVwiKTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5kZWJ1Zy5nZW9tKFxuICAgICAgICAgICAgICAgIG5ldyBQaGFzZXIuQ2lyY2xlKHRoaXMuZGF0YS5oZXJvLnNwcml0ZS54LCB0aGlzLmRhdGEuaGVyby5zcHJpdGUueSwgNSksXG4gICAgICAgICAgICAgICAgXCJyZ2JhKDIwLDc1LDAsMS4wKVwiXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgZm9yIChsZXQgcG9pbnQgaW4gdGhpcy5kYXRhLm1hcC5ldmVudHMpIHtcbiAgICAgICAgICAgICAgICBsZXQgcG9zID0gcG9pbnQuc3BsaXQoXCJfXCIpLm1hcChwID0+IHBhcnNlSW50KHApKTtcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUuZGVidWcuZ2VvbShcbiAgICAgICAgICAgICAgICAgICAgbmV3IFBoYXNlci5SZWN0YW5nbGUocG9zWzBdICogdGlsZV93aWR0aCwgcG9zWzFdICogdGlsZV9oZWlnaHQsIHRpbGVfd2lkdGgsIHRpbGVfaGVpZ2h0KSxcbiAgICAgICAgICAgICAgICAgICAgXCJyZ2JhKDI1NSwyNTUsNjAsMC43KVwiXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuZ2FtZS5pbnB1dC5tb3VzZVBvaW50ZXIud2l0aGluR2FtZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1vdXNlX3ggPVxuICAgICAgICAgICAgICAgICAgICAoKHRoaXMuZ2FtZS5jYW1lcmEueCArIHRoaXMuZ2FtZS5pbnB1dC5tb3VzZVBvaW50ZXIueCAvIHRoaXMuZGF0YS5zY2FsZV9mYWN0b3IpIC9cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVXaWR0aCkgfFxuICAgICAgICAgICAgICAgICAgICAwO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1vdXNlX3kgPVxuICAgICAgICAgICAgICAgICAgICAoKHRoaXMuZ2FtZS5jYW1lcmEueSArIHRoaXMuZ2FtZS5pbnB1dC5tb3VzZVBvaW50ZXIueSAvIHRoaXMuZGF0YS5zY2FsZV9mYWN0b3IpIC9cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVIZWlnaHQpIHxcbiAgICAgICAgICAgICAgICAgICAgMDtcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUuZGVidWcudGV4dChgeDogJHttb3VzZV94fSwgeTogJHttb3VzZV95fWAsIDE0MCwgMTUsIFwiIzAwZmYwMFwiKTtcbiAgICAgICAgICAgICAgICBjb25zdCBldmVudF9rZXkgPSBtb3VzZV94ICsgXCJfXCIgKyBtb3VzZV95O1xuICAgICAgICAgICAgICAgIGlmIChldmVudF9rZXkgaW4gdGhpcy5kYXRhLm1hcC5ldmVudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXZlbnRzID0gdGhpcy5kYXRhLm1hcC5ldmVudHNbZXZlbnRfa2V5XS5tYXAoZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGV2ZW50LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTogXCJbUGhhc2VyLkdhbWVdXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogXCJbR29sZGVuU3VuXVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2YXRpb25fZGlyZWN0aW9uczogZXZlbnQuYWN0aXZhdGlvbl9kaXJlY3Rpb25zLm1hcChkaXIgPT4gcmV2ZXJzZV9kaXJlY3Rpb25zW2Rpcl0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLihldmVudC5vcmlnaW5faW50ZXJhY3RhYmxlX29iamVjdCAmJiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbl9pbnRlcmFjdGFibGVfb2JqZWN0OiBgWyR7ZXZlbnQub3JpZ2luX2ludGVyYWN0YWJsZV9vYmplY3Qua2V5X25hbWV9XWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwib2JqZWN0X2luc3BlY3RvclwiKS5pbm5lclRleHQgPSBKU09OLnN0cmluZ2lmeShldmVudHMsIG51bGwsIDQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLmRlYnVnLnRleHQoYHg6IC0tLCB5OiAtLWAsIDE0MCwgMTUsIFwiIzAwZmYwMFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwib2JqZWN0X2luc3BlY3RvclwiKS5pbm5lclRleHQgPSBcIlwiO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy9hY3RpdmF0ZSBzdGF0cyBkZWJ1ZyBtb2RlXG4gICAgdG9nZ2xlX3N0YXRzKCkge1xuICAgICAgICBpZiAoIXRoaXMuZGF0YS5pbl9iYXR0bGUpIHtcbiAgICAgICAgICAgIHRoaXMuZGVidWdfc3RhdHMgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGVidWdfc3RhdHMgPSAhdGhpcy5kZWJ1Z19zdGF0cztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzZWxlY3RfZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3RhdHNfZGVidWdfc2VsZWN0XCIpO1xuICAgICAgICBpZiAodGhpcy5kZWJ1Z19zdGF0cykge1xuICAgICAgICAgICAgdGhpcy5kZWJ1Z19zdGF0c19pbmZvID0ge1xuICAgICAgICAgICAgICAgIGNoYXJzOiB0aGlzLmRhdGEuYmF0dGxlX2luc3RhbmNlLmFsbGllc19pbmZvXG4gICAgICAgICAgICAgICAgICAgIC5jb25jYXQodGhpcy5kYXRhLmJhdHRsZV9pbnN0YW5jZS5lbmVtaWVzX2luZm8pXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoaW5mbyA9PiBpbmZvLmluc3RhbmNlIGFzIE1haW5DaGFyKSxcbiAgICAgICAgICAgICAgICBzZWxlY3RlZDogMCxcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcjogZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlYnVnX3N0YXRzX2luZm8uc2VsZWN0ZWQgPSAoZXZlbnQudGFyZ2V0IGFzIGFueSkudmFsdWU7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmRlYnVnX3N0YXRzX2luZm8uY2hhcnMuZm9yRWFjaCgoY2hhciwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcbiAgICAgICAgICAgICAgICBvcHRpb24uaW5uZXJUZXh0ID0gY2hhci5uYW1lO1xuICAgICAgICAgICAgICAgIG9wdGlvbi5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBpbmRleC50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICBzZWxlY3RfZWxlbWVudC5hcHBlbmRDaGlsZChvcHRpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzZWxlY3RfZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIHRoaXMuZGVidWdfc3RhdHNfaW5mby5saXN0ZW5lcik7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN0YXRzX2RlYnVnXCIpLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5kZWJ1Z19zdGF0c19pbmZvKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0X2VsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCB0aGlzLmRlYnVnX3N0YXRzX2luZm8ubGlzdGVuZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGVidWdfc3RhdHNfaW5mbyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3RhdHNfZGVidWdfc2VsZWN0XCIpLmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN0YXRzX2RlYnVnXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZpbGxfc3RhdHNfZGVidWdfdGFibGUoKSB7XG4gICAgICAgIGlmICghdGhpcy5kZWJ1Z19zdGF0cyB8fCAhdGhpcy5kYXRhLmluX2JhdHRsZSkgcmV0dXJuO1xuICAgICAgICBjb25zdCBjaGFyID0gdGhpcy5kZWJ1Z19zdGF0c19pbmZvLmNoYXJzW3RoaXMuZGVidWdfc3RhdHNfaW5mby5zZWxlY3RlZF07XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHNfZGVidWcgdGFibGUgLm5hbWVcIikuaW5uZXJIVE1MID0gY2hhci5uYW1lO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0YXRzX2RlYnVnIHRhYmxlIC5jbGFzc1wiKS5pbm5lckhUTUwgPSBjaGFyLmNsYXNzLm5hbWU7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHNfZGVidWcgdGFibGUgLmxldmVsXCIpLmlubmVySFRNTCA9IGNoYXIubGV2ZWwudG9TdHJpbmcoKTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdGF0c19kZWJ1ZyB0YWJsZSAuZXhwXCIpLmlubmVySFRNTCA9IGNoYXIuY3VycmVudF9leHAudG9TdHJpbmcoKTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdGF0c19kZWJ1ZyB0YWJsZSAuY3VycmVudF9ocFwiKS5pbm5lckhUTUwgPSBjaGFyLmN1cnJlbnRfaHAudG9TdHJpbmcoKTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdGF0c19kZWJ1ZyB0YWJsZSAubWF4X2hwXCIpLmlubmVySFRNTCA9IGNoYXIubWF4X2hwLnRvU3RyaW5nKCk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHNfZGVidWcgdGFibGUgLmN1cnJlbnRfcHBcIikuaW5uZXJIVE1MID0gY2hhci5jdXJyZW50X3BwLnRvU3RyaW5nKCk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHNfZGVidWcgdGFibGUgLm1heF9wcFwiKS5pbm5lckhUTUwgPSBjaGFyLm1heF9wcC50b1N0cmluZygpO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0YXRzX2RlYnVnIHRhYmxlIC5hdGtcIikuaW5uZXJIVE1MID0gY2hhci5hdGsudG9TdHJpbmcoKTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdGF0c19kZWJ1ZyB0YWJsZSAuZGVmXCIpLmlubmVySFRNTCA9IGNoYXIuZGVmLnRvU3RyaW5nKCk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHNfZGVidWcgdGFibGUgLmFnaVwiKS5pbm5lckhUTUwgPSBjaGFyLmFnaS50b1N0cmluZygpO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0YXRzX2RlYnVnIHRhYmxlIC5sdWtcIikuaW5uZXJIVE1MID0gY2hhci5sdWsudG9TdHJpbmcoKTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdGF0c19kZWJ1ZyB0YWJsZSAudmVudXNfcG93ZXJcIikuaW5uZXJIVE1MID0gY2hhci52ZW51c19wb3dlcl9jdXJyZW50LnRvU3RyaW5nKCk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHNfZGVidWcgdGFibGUgLnZlbnVzX3Jlc2lzdFwiKS5pbm5lckhUTUwgPSBjaGFyLnZlbnVzX3Jlc2lzdF9jdXJyZW50LnRvU3RyaW5nKCk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHNfZGVidWcgdGFibGUgLnZlbnVzX2xldmVsXCIpLmlubmVySFRNTCA9IGNoYXIudmVudXNfbGV2ZWxfY3VycmVudC50b1N0cmluZygpO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0YXRzX2RlYnVnIHRhYmxlIC5tZXJjdXJ5X3Bvd2VyXCIpLmlubmVySFRNTCA9IGNoYXIubWVyY3VyeV9wb3dlcl9jdXJyZW50LnRvU3RyaW5nKCk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHNfZGVidWcgdGFibGUgLm1lcmN1cnlfcmVzaXN0XCIpLmlubmVySFRNTCA9IGNoYXIubWVyY3VyeV9yZXNpc3RfY3VycmVudC50b1N0cmluZygpO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0YXRzX2RlYnVnIHRhYmxlIC5tZXJjdXJ5X2xldmVsXCIpLmlubmVySFRNTCA9IGNoYXIubWVyY3VyeV9sZXZlbF9jdXJyZW50LnRvU3RyaW5nKCk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHNfZGVidWcgdGFibGUgLm1hcnNfcG93ZXJcIikuaW5uZXJIVE1MID0gY2hhci5tYXJzX3Bvd2VyX2N1cnJlbnQudG9TdHJpbmcoKTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdGF0c19kZWJ1ZyB0YWJsZSAubWFyc19yZXNpc3RcIikuaW5uZXJIVE1MID0gY2hhci5tYXJzX3Jlc2lzdF9jdXJyZW50LnRvU3RyaW5nKCk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHNfZGVidWcgdGFibGUgLm1hcnNfbGV2ZWxcIikuaW5uZXJIVE1MID0gY2hhci5tYXJzX2xldmVsX2N1cnJlbnQudG9TdHJpbmcoKTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdGF0c19kZWJ1ZyB0YWJsZSAuanVwaXRlcl9wb3dlclwiKS5pbm5lckhUTUwgPSBjaGFyLmp1cGl0ZXJfcG93ZXJfY3VycmVudC50b1N0cmluZygpO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0YXRzX2RlYnVnIHRhYmxlIC5qdXBpdGVyX3Jlc2lzdFwiKS5pbm5lckhUTUwgPSBjaGFyLmp1cGl0ZXJfcmVzaXN0X2N1cnJlbnQudG9TdHJpbmcoKTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdGF0c19kZWJ1ZyB0YWJsZSAuanVwaXRlcl9sZXZlbFwiKS5pbm5lckhUTUwgPSBjaGFyLmp1cGl0ZXJfbGV2ZWxfY3VycmVudC50b1N0cmluZygpO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0YXRzX2RlYnVnIHRhYmxlIC50dXJuc1wiKS5pbm5lckhUTUwgPSBjaGFyLnR1cm5zLnRvU3RyaW5nKCk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHNfZGVidWcgdGFibGUgLnRlbXBfc3RhdHVzZXNcIikuaW5uZXJIVE1MID0gWy4uLmNoYXIudGVtcG9yYXJ5X3N0YXR1c10uam9pbihcIiBcIik7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHNfZGVidWcgdGFibGUgLnBlcm1fc3RhdHVzZXNcIikuaW5uZXJIVE1MID0gWy4uLmNoYXIucGVybWFuZW50X3N0YXR1c10uam9pbihcIiBcIik7XG4gICAgICAgIGxldCBidWZmX2h0bWwgPSBcIlwiO1xuICAgICAgICBPYmplY3Qua2V5cyhjaGFyLmVmZmVjdF90dXJuc19jb3VudClcbiAgICAgICAgICAgIC5zb3J0KClcbiAgICAgICAgICAgIC5mb3JFYWNoKGVmZmVjdCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVmZmVjdCA9PT0gXCJwb3dlclwiIHx8IGVmZmVjdCA9PT0gXCJyZXNpc3RcIikge1xuICAgICAgICAgICAgICAgICAgICBvcmRlcmVkX2VsZW1lbnRzLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmX2h0bWwgKz0gYCR7ZWZmZWN0fVske2VsZW1lbnR9XS8ke2NoYXIuZWZmZWN0X3R1cm5zX2NvdW50W2VmZmVjdF1bZWxlbWVudF19IDxicj5gO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBidWZmX2h0bWwgKz0gYCR7ZWZmZWN0fS8ke2NoYXIuZWZmZWN0X3R1cm5zX2NvdW50W2VmZmVjdF19IDxicj5gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0YXRzX2RlYnVnIHRhYmxlIC5idWZmXCIpLmlubmVySFRNTCA9IGJ1ZmZfaHRtbDtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdGF0c19kZWJ1ZyB0YWJsZSAuZWZmZWN0X2NvdW50XCIpLmlubmVySFRNTCA9IGNoYXIuZWZmZWN0cy5sZW5ndGgudG9TdHJpbmcoKTtcbiAgICB9XG59XG4iLCJmdW5jdGlvbiBsb2FkX2J1dHRvbnMoZ2FtZSkge1xuICAgIGdhbWUubG9hZC5hdGxhc0pTT05IYXNoKFwiYnV0dG9uc1wiLCBcImFzc2V0cy9pbWFnZXMvYnV0dG9ucy9idXR0b25zLnBuZ1wiLCBcImFzc2V0cy9pbWFnZXMvYnV0dG9ucy9idXR0b25zLmpzb25cIik7XG4gICAgZ2FtZS5sb2FkLmltYWdlKFwic2hpZnRfa2V5Ym9hcmRcIiwgXCJhc3NldHMvaW1hZ2VzL2tleWJvYXJkL3NoaWZ0LnBuZ1wiKTtcbiAgICBnYW1lLmxvYWQuaW1hZ2UoXCJ0YWJfa2V5Ym9hcmRcIiwgXCJhc3NldHMvaW1hZ2VzL2tleWJvYXJkL3RhYi5wbmdcIik7XG4gICAgZ2FtZS5sb2FkLmltYWdlKFwic3BhY2ViYXJfa2V5Ym9hcmRcIiwgXCJhc3NldHMvaW1hZ2VzL2tleWJvYXJkL3NwYWNlYmFyLnBuZ1wiKTtcbiAgICBnYW1lLmxvYWQuaW1hZ2UoXCJhX2J1dHRvblwiLCBcImFzc2V0cy9pbWFnZXMva2V5Ym9hcmQvYV9idXR0b24ucG5nXCIpO1xuICAgIGdhbWUubG9hZC5pbWFnZShcInNlbGVjdF9idXR0b25cIiwgXCJhc3NldHMvaW1hZ2VzL2tleWJvYXJkL3NlbGVjdF9idXR0b24ucG5nXCIpO1xuICAgIGdhbWUubG9hZC5pbWFnZShcImxfYnV0dG9uXCIsIFwiYXNzZXRzL2ltYWdlcy9rZXlib2FyZC9sX2J1dHRvbi5wbmdcIik7XG4gICAgZ2FtZS5sb2FkLmltYWdlKFwicl9idXR0b25cIiwgXCJhc3NldHMvaW1hZ2VzL2tleWJvYXJkL3JfYnV0dG9uLnBuZ1wiKTtcbn1cblxuZnVuY3Rpb24gbG9hZF9kYl9maWxlcyhnYW1lKSB7XG4gICAgZ2FtZS5sb2FkLmpzb24oXCJpbml0X2RiXCIsIFwiYXNzZXRzL2luaXQuanNvblwiKTtcbiAgICBnYW1lLmxvYWQuanNvbihcImNsYXNzZXNfZGJcIiwgXCJhc3NldHMvZGJzL2NsYXNzZXNfZGIuanNvblwiKTtcbiAgICBnYW1lLmxvYWQuanNvbihcImFiaWxpdGllc19kYlwiLCBcImFzc2V0cy9kYnMvYWJpbGl0aWVzX2RiLmpzb25cIik7XG4gICAgZ2FtZS5sb2FkLmpzb24oXCJpdGVtc19kYlwiLCBcImFzc2V0cy9kYnMvaXRlbXNfZGIuanNvblwiKTtcbiAgICBnYW1lLmxvYWQuanNvbihcIm5wY19kYlwiLCBcImFzc2V0cy9kYnMvbnBjX2RiLmpzb25cIik7XG4gICAgZ2FtZS5sb2FkLmpzb24oXCJpbnRlcmFjdGFibGVfb2JqZWN0c19kYlwiLCBcImFzc2V0cy9kYnMvaW50ZXJhY3RhYmxlX29iamVjdHNfZGIuanNvblwiKTtcbiAgICBnYW1lLmxvYWQuanNvbihcImRqaW5uaV9kYlwiLCBcImFzc2V0cy9kYnMvZGppbm5pX2RiLmpzb25cIik7XG4gICAgZ2FtZS5sb2FkLmpzb24oXCJlbmVtaWVzX2RiXCIsIFwiYXNzZXRzL2Ricy9lbmVtaWVzX2RiLmpzb25cIik7XG4gICAgZ2FtZS5sb2FkLmpzb24oXCJlbmVtaWVzX3BhcnRpZXNfZGJcIiwgXCJhc3NldHMvZGJzL2VuZW1pZXNfcGFydGllc19kYi5qc29uXCIpO1xuICAgIGdhbWUubG9hZC5qc29uKFwibWFwc19kYlwiLCBcImFzc2V0cy9kYnMvbWFwc19kYi5qc29uXCIpO1xuICAgIGdhbWUubG9hZC5qc29uKFwibWFpbl9jaGFyc19kYlwiLCBcImFzc2V0cy9kYnMvbWFpbl9jaGFyc19kYi5qc29uXCIpO1xuICAgIGdhbWUubG9hZC5qc29uKFwic3VtbW9uc19kYlwiLCBcImFzc2V0cy9kYnMvc3VtbW9uc19kYi5qc29uXCIpO1xuICAgIGdhbWUubG9hZC5qc29uKFwibWlzY19hbmltYXRpb25zX2RiXCIsIFwiYXNzZXRzL2Ricy9taXNjX2FuaW1hdGlvbnNfZGIuanNvblwiKTtcbiAgICBnYW1lLmxvYWQuanNvbihcInNob3BrZWVwX2RpYWxvZ19kYlwiLCBcImFzc2V0cy9kYnMvc2hvcGtlZXBfZGlhbG9nX2RiLmpzb25cIik7XG4gICAgZ2FtZS5sb2FkLmpzb24oXCJzaG9wc19kYlwiLCBcImFzc2V0cy9kYnMvc2hvcHNfZGIuanNvblwiKTtcbn1cblxuZnVuY3Rpb24gbG9hZF9taXNjKGdhbWUpIHtcbiAgICBnYW1lLmxvYWQuaW1hZ2UoXCJzaGFkb3dcIiwgXCJhc3NldHMvaW1hZ2VzL21pc2Mvc2hhZG93LmpwZ1wiKTtcbiAgICBnYW1lLmxvYWQuaW1hZ2UoXCJjdXJzb3JcIiwgXCJhc3NldHMvaW1hZ2VzL21pc2MvY3Vyc29yLmdpZlwiKTtcbiAgICBnYW1lLmxvYWQuaW1hZ2UoXCJncmVlbl9hcnJvd1wiLCBcImFzc2V0cy9pbWFnZXMvbWlzYy9ncmVlbl9hcnJvdy5naWZcIik7XG4gICAgZ2FtZS5sb2FkLmltYWdlKFwidXBfYXJyb3dcIiwgXCJhc3NldHMvaW1hZ2VzL21pc2MvdXBfYXJyb3cuZ2lmXCIpO1xuICAgIGdhbWUubG9hZC5pbWFnZShcImRvd25fYXJyb3dcIiwgXCJhc3NldHMvaW1hZ2VzL21pc2MvZG93bl9hcnJvdy5naWZcIik7XG4gICAgZ2FtZS5sb2FkLmltYWdlKFwicGFnZV9hcnJvd1wiLCBcImFzc2V0cy9pbWFnZXMvbWlzYy9wYWdlX2Fycm93LnBuZ1wiKTtcbiAgICBnYW1lLmxvYWQuaW1hZ2UoXCJwc3luZXJneV9hdXJhXCIsIFwiYXNzZXRzL2ltYWdlcy9taXNjL3BzeW5lcmd5X2F1cmEucG5nXCIpO1xuICAgIGdhbWUubG9hZC5pbWFnZShcImVxdWlwcGVkXCIsIFwiYXNzZXRzL2ltYWdlcy9taXNjL2VxdWlwcGVkLmdpZlwiKTtcbiAgICBnYW1lLmxvYWQuaW1hZ2UoXCJ2ZW51c19zdGFyXCIsIFwiYXNzZXRzL2ltYWdlcy9taXNjL3ZlbnVzX3N0YXIuZ2lmXCIpO1xuICAgIGdhbWUubG9hZC5pbWFnZShcIm1lcmN1cnlfc3RhclwiLCBcImFzc2V0cy9pbWFnZXMvbWlzYy9tZXJjdXJ5X3N0YXIuZ2lmXCIpO1xuICAgIGdhbWUubG9hZC5pbWFnZShcIm1hcnNfc3RhclwiLCBcImFzc2V0cy9pbWFnZXMvbWlzYy9tYXJzX3N0YXIuZ2lmXCIpO1xuICAgIGdhbWUubG9hZC5pbWFnZShcImp1cGl0ZXJfc3RhclwiLCBcImFzc2V0cy9pbWFnZXMvbWlzYy9qdXBpdGVyX3N0YXIuZ2lmXCIpO1xuICAgIGdhbWUubG9hZC5pbWFnZShcInN0YXRfdXBcIiwgXCJhc3NldHMvaW1hZ2VzL21pc2Mvc3RhdF91cC5naWZcIik7XG4gICAgZ2FtZS5sb2FkLmltYWdlKFwic3RhdF9kb3duXCIsIFwiYXNzZXRzL2ltYWdlcy9taXNjL3N0YXRfZG93bi5naWZcIik7XG4gICAgZ2FtZS5sb2FkLmltYWdlKFwiYXJyb3dfY2hhbmdlXCIsIFwiYXNzZXRzL2ltYWdlcy9taXNjL2Fycm93X2NoYW5nZS5wbmdcIik7XG4gICAgZ2FtZS5sb2FkLmltYWdlKFwiaXRlbV9ib3JkZXJcIiwgXCJhc3NldHMvaW1hZ2VzL21pc2MvaXRlbV9ib3JkZXIucG5nXCIpO1xuICAgIGdhbWUubG9hZC5pbWFnZShcInByaWNlX3RhZ1wiLCBcImFzc2V0cy9pbWFnZXMvbWlzYy9wcmljZV90YWcucG5nXCIpO1xuICAgIGdhbWUubG9hZC5pbWFnZShcImJyb2tlblwiLCBcImFzc2V0cy9pbWFnZXMvbWlzYy9icm9rZW4ucG5nXCIpO1xuICAgIGdhbWUubG9hZC5pbWFnZShcImZyb3N0X3Nub3dmbGFrZVwiLCBcImFzc2V0cy9pbWFnZXMvaW50ZXJhY3RhYmxlX29iamVjdHMvc25vd2ZsYWtlLnBuZ1wiKTtcbiAgICBnYW1lLmxvYWQuYXRsYXNKU09OSGFzaChcbiAgICAgICAgXCJiYXR0bGVfZWZmZWN0X2ljb25zXCIsXG4gICAgICAgIFwiYXNzZXRzL2ltYWdlcy9pY29ucy9iYXR0bGVfZWZmZWN0cy9iYXR0bGVfZWZmZWN0X2ljb25zLnBuZ1wiLFxuICAgICAgICBcImFzc2V0cy9pbWFnZXMvaWNvbnMvYmF0dGxlX2VmZmVjdHMvYmF0dGxlX2VmZmVjdF9pY29ucy5qc29uXCJcbiAgICApO1xuICAgIGdhbWUubG9hZC5hdGxhc0pTT05IYXNoKFwiZHVzdFwiLCBcImFzc2V0cy9pbWFnZXMvbWlzYy9kdXN0LnBuZ1wiLCBcImFzc2V0cy9pbWFnZXMvbWlzYy9kdXN0Lmpzb25cIik7XG4gICAgZ2FtZS5sb2FkLmF0bGFzSlNPTkhhc2goXG4gICAgICAgIFwiYmF0dGxlX2N1cnNvclwiLFxuICAgICAgICBcImFzc2V0cy9pbWFnZXMvbWlzYy9iYXR0bGVfY3Vyc29yLnBuZ1wiLFxuICAgICAgICBcImFzc2V0cy9pbWFnZXMvbWlzYy9iYXR0bGVfY3Vyc29yLmpzb25cIlxuICAgICk7XG4gICAgZ2FtZS5sb2FkLmF0bGFzSlNPTkhhc2goXCJyYW5nZXNcIiwgXCJhc3NldHMvaW1hZ2VzL21pc2MvcmFuZ2VzLnBuZ1wiLCBcImFzc2V0cy9pbWFnZXMvbWlzYy9yYW5nZXMuanNvblwiKTtcbiAgICBnYW1lLmxvYWQuYXRsYXNKU09OSGFzaChcbiAgICAgICAgXCJwc3luZXJneV9wYXJ0aWNsZVwiLFxuICAgICAgICBcImFzc2V0cy9pbWFnZXMvaW50ZXJhY3RhYmxlX29iamVjdHMvcHN5bmVyZ3lfcGFydGljbGUucG5nXCIsXG4gICAgICAgIFwiYXNzZXRzL2ltYWdlcy9pbnRlcmFjdGFibGVfb2JqZWN0cy9wc3luZXJneV9wYXJ0aWNsZS5qc29uXCJcbiAgICApO1xuICAgIGdhbWUubG9hZC5hdGxhc0pTT05IYXNoKFxuICAgICAgICBcInBzeW5lcmd5X2JhbGxcIixcbiAgICAgICAgXCJhc3NldHMvaW1hZ2VzL2ludGVyYWN0YWJsZV9vYmplY3RzL3BzeW5lcmd5X2JhbGwucG5nXCIsXG4gICAgICAgIFwiYXNzZXRzL2ltYWdlcy9pbnRlcmFjdGFibGVfb2JqZWN0cy9wc3luZXJneV9iYWxsLmpzb25cIlxuICAgICk7XG59XG5cbmZ1bmN0aW9uIGxvYWRfYXNzZXRzKGdhbWUpIHtcbiAgICBnYW1lLmxvYWQuYXRsYXNKU09OSGFzaChcbiAgICAgICAgXCJiYXR0bGVfYmFja2dyb3VuZHNcIixcbiAgICAgICAgXCJhc3NldHMvaW1hZ2VzL2JhdHRsZV9iYWNrZ3JvdW5kcy9iYXR0bGVfYmFja2dyb3VuZHMucG5nXCIsXG4gICAgICAgIFwiYXNzZXRzL2ltYWdlcy9iYXR0bGVfYmFja2dyb3VuZHMvYmF0dGxlX2JhY2tncm91bmRzLmpzb25cIlxuICAgICk7XG4gICAgZ2FtZS5sb2FkLmF0bGFzSlNPTkhhc2goXCJhdmF0YXJzXCIsIFwiYXNzZXRzL2ltYWdlcy9hdmF0YXJzL2F2YXRhcnMucG5nXCIsIFwiYXNzZXRzL2ltYWdlcy9hdmF0YXJzL2F2YXRhcnMuanNvblwiKTtcbn1cblxuZnVuY3Rpb24gbG9hZF9mb250cyhnYW1lKSB7XG4gICAgZ2FtZS5sb2FkLmJpdG1hcEZvbnQoXCJncy1ibXAtZm9udFwiLCBcImFzc2V0cy9mb250L2dvbGRlbi1zdW4ucG5nXCIsIFwiYXNzZXRzL2ZvbnQvZ29sZGVuLXN1bi5mbnRcIik7XG4gICAgZ2FtZS5sb2FkLmJpdG1hcEZvbnQoXG4gICAgICAgIFwiZ3MtaXRhbGljLWJtcC1mb250XCIsXG4gICAgICAgIFwiYXNzZXRzL2ZvbnQvZ29sZGVuLXN1bi1pdGFsaWMucG5nXCIsXG4gICAgICAgIFwiYXNzZXRzL2ZvbnQvZ29sZGVuLXN1bi1pdGFsaWMuZm50XCJcbiAgICApO1xuICAgIGdhbWUubG9hZC5iaXRtYXBGb250KFwiZ3MtaXRlbS1ibXAtZm9udFwiLCBcImFzc2V0cy9mb250L2dzLWl0ZW0tZm9udC5wbmdcIiwgXCJhc3NldHMvZm9udC9ncy1pdGVtLWZvbnQuZm50XCIpO1xuICAgIGdhbWUubG9hZC5iaXRtYXBGb250KFwiZ3Mtc2hvcC1ibXAtZm9udFwiLCBcImFzc2V0cy9mb250L2dzLXNob3AtZm9udC5wbmdcIiwgXCJhc3NldHMvZm9udC9ncy1zaG9wLWZvbnQuZm50XCIpO1xufVxuXG5mdW5jdGlvbiBsb2FkX2ZpbHRlcnMoZ2FtZSkge1xuICAgIGdhbWUubG9hZC5zY3JpcHQoXCJjb2xvcl9maWx0ZXJzXCIsIFwiYXNzZXRzL2ZpbHRlcnMvY29sb3JfZmlsdGVycy5qc1wiKTtcbiAgICBnYW1lLmxvYWQuc2NyaXB0KFwibW9kZTdcIiwgXCJhc3NldHMvZmlsdGVycy9tb2RlNy5qc1wiKTtcbn1cblxuZnVuY3Rpb24gbG9hZF9wbHVnaW5zKGdhbWUpIHtcbiAgICBnYW1lLmxvYWQuc2NyaXB0KFwicGFydGljbGVzdG9ybVwiLCBcImFzc2V0cy9wbHVnaW5zL3BhcnRpY2xlLXN0b3JtLmpzXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9hZF9hbGwoZ2FtZSkge1xuICAgIGxvYWRfZGJfZmlsZXMoZ2FtZSk7XG4gICAgbG9hZF9taXNjKGdhbWUpO1xuICAgIGxvYWRfYXNzZXRzKGdhbWUpO1xuICAgIGxvYWRfYnV0dG9ucyhnYW1lKTtcbiAgICBsb2FkX2ZvbnRzKGdhbWUpO1xuICAgIGxvYWRfZmlsdGVycyhnYW1lKTtcbiAgICBsb2FkX3BsdWdpbnMoZ2FtZSk7XG59XG4iLCJpbXBvcnQge0dvbGRlblN1bn0gZnJvbSBcIi4vR29sZGVuU3VuXCI7XG5pbXBvcnQge0hlcm99IGZyb20gXCIuL0hlcm9cIjtcbmltcG9ydCB7TWFwfSBmcm9tIFwiLi9NYXBcIjtcblxuZXhwb3J0IGNsYXNzIENvbGxpc2lvbiB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBoZXJvOiBIZXJvO1xuICAgIHB1YmxpYyBoZXJvX2NvbGxpc2lvbl9ncm91cDogUGhhc2VyLlBoeXNpY3MuUDIuQ29sbGlzaW9uR3JvdXA7XG4gICAgcHVibGljIGR5bmFtaWNfZXZlbnRzX2NvbGxpc2lvbl9ncm91cDogUGhhc2VyLlBoeXNpY3MuUDIuQ29sbGlzaW9uR3JvdXA7XG4gICAgcHVibGljIG1hcF9jb2xsaXNpb25fZ3JvdXA6IFBoYXNlci5QaHlzaWNzLlAyLkNvbGxpc2lvbkdyb3VwO1xuICAgIHB1YmxpYyBucGNfY29sbGlzaW9uX2dyb3Vwczoge1tsYXllcl9pbmRleDogbnVtYmVyXTogUGhhc2VyLlBoeXNpY3MuUDIuQ29sbGlzaW9uR3JvdXB9O1xuICAgIHB1YmxpYyBpbnRlcmFjdGFibGVfb2Jqc19jb2xsaXNpb25fZ3JvdXBzOiB7W2xheWVyX2luZGV4OiBudW1iZXJdOiBQaGFzZXIuUGh5c2ljcy5QMi5Db2xsaXNpb25Hcm91cH07XG4gICAgcHVibGljIG1heF9sYXllcnNfY3JlYXRlZDogbnVtYmVyO1xuICAgIHB1YmxpYyBkeW5hbWljX2p1bXBfZXZlbnRzX2JvZGllczogUGhhc2VyLlBoeXNpY3MuUDIuQm9keVtdO1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZTogUGhhc2VyLkdhbWUsIGhlcm86IEhlcm8pIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5oZXJvID0gaGVybztcbiAgICAgICAgdGhpcy5jb25maWdfd29ybGQoKTtcbiAgICAgICAgdGhpcy5oZXJvX2NvbGxpc2lvbl9ncm91cCA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUNvbGxpc2lvbkdyb3VwKCk7XG4gICAgICAgIHRoaXMuZHluYW1pY19ldmVudHNfY29sbGlzaW9uX2dyb3VwID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlQ29sbGlzaW9uR3JvdXAoKTtcbiAgICAgICAgdGhpcy5tYXBfY29sbGlzaW9uX2dyb3VwID0gZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUNvbGxpc2lvbkdyb3VwKCk7XG4gICAgICAgIHRoaXMubnBjX2NvbGxpc2lvbl9ncm91cHMgPSB7fTtcbiAgICAgICAgdGhpcy5pbnRlcmFjdGFibGVfb2Jqc19jb2xsaXNpb25fZ3JvdXBzID0ge307XG4gICAgICAgIHRoaXMubWF4X2xheWVyc19jcmVhdGVkID0gMDtcbiAgICAgICAgdGhpcy5keW5hbWljX2p1bXBfZXZlbnRzX2JvZGllcyA9IFtdO1xuICAgIH1cblxuICAgIGNvbmZpZ193b3JsZCgpIHtcbiAgICAgICAgdGhpcy5nYW1lLnBoeXNpY3Muc3RhcnRTeXN0ZW0oUGhhc2VyLlBoeXNpY3MuUDJKUyk7XG4gICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLnNldEltcGFjdEV2ZW50cyh0cnVlKTtcbiAgICAgICAgdGhpcy5nYW1lLnBoeXNpY3MucDIud29ybGQuZGVmYXVsdENvbnRhY3RNYXRlcmlhbC5yZXN0aXR1dGlvbiA9IDA7XG4gICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLndvcmxkLmRlZmF1bHRDb250YWN0TWF0ZXJpYWwucmVsYXhhdGlvbiA9IDg7XG4gICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLndvcmxkLmRlZmF1bHRDb250YWN0TWF0ZXJpYWwuZnJpY3Rpb24gPSAwO1xuICAgICAgICB0aGlzLmdhbWUucGh5c2ljcy5wMi53b3JsZC5kZWZhdWx0Q29udGFjdE1hdGVyaWFsLmNvbnRhY3RTa2luU2l6ZSA9IDFlLTM7XG4gICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLndvcmxkLnNldEdsb2JhbFN0aWZmbmVzcygxZTUpO1xuICAgICAgICB0aGlzLmdhbWUucGh5c2ljcy5wMi5yZXN0aXR1dGlvbiA9IDA7XG4gICAgfVxuXG4gICAgY29uZmlnX2NvbGxpc2lvbl9ncm91cHMobWFwOiBNYXApIHtcbiAgICAgICAgLy9wMiBoYXMgYSBsaW1pdCBudW1iZXIgb2YgY29sbGlzaW9uIGdyb3VwcyB0aGF0IGNhbiBiZSBjcmVhdGVkLiBUaGVuLCBOUENzIGFuZCBJLiBPYmpzLiBncm91cHMgd2lsbCBiZSBjcmVhdGVkIG9uIGRlbWFuZC5cbiAgICAgICAgZm9yIChsZXQgbGF5ZXJfaW5kZXggPSB0aGlzLm1heF9sYXllcnNfY3JlYXRlZDsgbGF5ZXJfaW5kZXggPCBtYXAuY29sbGlzaW9uX2xheWVyc19udW1iZXI7ICsrbGF5ZXJfaW5kZXgpIHtcbiAgICAgICAgICAgIHRoaXMubnBjX2NvbGxpc2lvbl9ncm91cHNbbGF5ZXJfaW5kZXhdID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlQ29sbGlzaW9uR3JvdXAoKTtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJhY3RhYmxlX29ianNfY29sbGlzaW9uX2dyb3Vwc1tsYXllcl9pbmRleF0gPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5jcmVhdGVDb2xsaXNpb25Hcm91cCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWF4X2xheWVyc19jcmVhdGVkID0gTWF0aC5tYXgodGhpcy5tYXhfbGF5ZXJzX2NyZWF0ZWQsIG1hcC5jb2xsaXNpb25fbGF5ZXJzX251bWJlcik7XG4gICAgfVxuXG4gICAgY29uZmlnX2NvbGxpc2lvbnMobWFwOiBNYXAsIGNvbGxpc2lvbl9sYXllcjogbnVtYmVyLCBucGNfZ3JvdXA6IFBoYXNlci5Hcm91cCkge1xuICAgICAgICB0aGlzLmhlcm8uc3ByaXRlLmJvZHkuY29sbGlkZXModGhpcy5tYXBfY29sbGlzaW9uX2dyb3VwKTtcbiAgICAgICAgbWFwLmNvbGxpc2lvbl9zcHJpdGUuYm9keS5jb2xsaWRlcyh0aGlzLmhlcm9fY29sbGlzaW9uX2dyb3VwKTtcblxuICAgICAgICBmb3IgKGxldCBjb2xsaWRlX2luZGV4IGluIHRoaXMubnBjX2NvbGxpc2lvbl9ncm91cHMpIHtcbiAgICAgICAgICAgIHRoaXMuaGVyby5zcHJpdGUuYm9keS5yZW1vdmVDb2xsaXNpb25Hcm91cCh0aGlzLm5wY19jb2xsaXNpb25fZ3JvdXBzW2NvbGxpZGVfaW5kZXhdLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29sbGlzaW9uX2xheWVyIGluIHRoaXMubnBjX2NvbGxpc2lvbl9ncm91cHMpIHtcbiAgICAgICAgICAgIHRoaXMuaGVyby5zcHJpdGUuYm9keS5jb2xsaWRlcyh0aGlzLm5wY19jb2xsaXNpb25fZ3JvdXBzW2NvbGxpc2lvbl9sYXllcl0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgY29sbGlkZV9pbmRleCBpbiB0aGlzLmludGVyYWN0YWJsZV9vYmpzX2NvbGxpc2lvbl9ncm91cHMpIHtcbiAgICAgICAgICAgIHRoaXMuaGVyby5zcHJpdGUuYm9keS5yZW1vdmVDb2xsaXNpb25Hcm91cCh0aGlzLmludGVyYWN0YWJsZV9vYmpzX2NvbGxpc2lvbl9ncm91cHNbY29sbGlkZV9pbmRleF0sIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb2xsaXNpb25fbGF5ZXIgaW4gdGhpcy5pbnRlcmFjdGFibGVfb2Jqc19jb2xsaXNpb25fZ3JvdXBzKSB7XG4gICAgICAgICAgICB0aGlzLmhlcm8uc3ByaXRlLmJvZHkuY29sbGlkZXModGhpcy5pbnRlcmFjdGFibGVfb2Jqc19jb2xsaXNpb25fZ3JvdXBzW2NvbGxpc2lvbl9sYXllcl0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBucGNfZ3JvdXAuY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHNwcml0ZSA9IG5wY19ncm91cC5jaGlsZHJlbltpXSBhcyBQaGFzZXIuU3ByaXRlO1xuICAgICAgICAgICAgaWYgKCFzcHJpdGUuaXNfbnBjICYmICFzcHJpdGUuaXNfaW50ZXJhY3RhYmxlX29iamVjdCkgY29udGludWU7XG4gICAgICAgICAgICBpZiAoIXNwcml0ZS5ib2R5KSBjb250aW51ZTtcbiAgICAgICAgICAgIHNwcml0ZS5ib2R5LmNvbGxpZGVzKHRoaXMuaGVyb19jb2xsaXNpb25fZ3JvdXApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaGVyby5zcHJpdGUuYm9keS5jb2xsaWRlcyh0aGlzLmR5bmFtaWNfZXZlbnRzX2NvbGxpc2lvbl9ncm91cCk7XG4gICAgfVxuXG4gICAgY2hhbmdlX21hcF9ib2R5KGRhdGE6IEdvbGRlblN1biwgbmV3X2NvbGxpZGVyX2xheWVyX2luZGV4OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKGRhdGEubWFwLmNvbGxpc2lvbl9sYXllciA9PT0gbmV3X2NvbGxpZGVyX2xheWVyX2luZGV4KSByZXR1cm47XG4gICAgICAgIGRhdGEubWFwLmNvbGxpc2lvbl9sYXllciA9IG5ld19jb2xsaWRlcl9sYXllcl9pbmRleDtcbiAgICAgICAgdGhpcy5oZXJvLnNoYWRvdy5iYXNlX2NvbGxpc2lvbl9sYXllciA9IGRhdGEubWFwLmNvbGxpc2lvbl9sYXllcjtcbiAgICAgICAgdGhpcy5oZXJvLnNwcml0ZS5iYXNlX2NvbGxpc2lvbl9sYXllciA9IGRhdGEubWFwLmNvbGxpc2lvbl9sYXllcjtcbiAgICAgICAgZGF0YS5tYXAuY29uZmlnX2JvZHkodGhpcywgbmV3X2NvbGxpZGVyX2xheWVyX2luZGV4KTtcbiAgICAgICAgdGhpcy5jb25maWdfY29sbGlzaW9uX2dyb3VwcyhkYXRhLm1hcCk7XG4gICAgICAgIHRoaXMuY29uZmlnX2NvbGxpc2lvbnMoZGF0YS5tYXAsIGRhdGEubWFwLmNvbGxpc2lvbl9sYXllciwgZGF0YS5ucGNfZ3JvdXApO1xuICAgICAgICBsZXQgbGF5ZXJzID0gZGF0YS5tYXAubGF5ZXJzO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxheWVycy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgbGV0IGxheWVyID0gbGF5ZXJzW2ldO1xuICAgICAgICAgICAgaWYgKGxheWVyLnByb3BlcnRpZXMub3ZlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNfb3Zlcl9wcm9wID0gbGF5ZXIucHJvcGVydGllcy5vdmVyXG4gICAgICAgICAgICAgICAgICAgIC50b1N0cmluZygpXG4gICAgICAgICAgICAgICAgICAgIC5zcGxpdChcIixcIilcbiAgICAgICAgICAgICAgICAgICAgLm1hcChvdmVyID0+IHBhcnNlSW50KG92ZXIpKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNfb3Zlcl9wcm9wLmxlbmd0aCA8PSBkYXRhLm1hcC5jb2xsaXNpb25fbGF5ZXIpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzX292ZXIgPSBCb29sZWFuKGlzX292ZXJfcHJvcFtkYXRhLm1hcC5jb2xsaXNpb25fbGF5ZXJdKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNfb3Zlcikge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLnVuZGVybGF5ZXJfZ3JvdXAucmVtb3ZlKGxheWVyLnNwcml0ZSwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSAwO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBkYXRhLm92ZXJsYXllcl9ncm91cC5jaGlsZHJlbi5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGlsZCA9IGRhdGEub3ZlcmxheWVyX2dyb3VwLmNoaWxkcmVuW2luZGV4XSBhcyBQaGFzZXIuVGlsZW1hcExheWVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLmxheWVyX3ogPiAobGF5ZXIueiA9PT0gdW5kZWZpbmVkID8gaSA6IGxheWVyLnopKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5vdmVybGF5ZXJfZ3JvdXAuYWRkQXQobGF5ZXIuc3ByaXRlLCBpbmRleCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSBkYXRhLm92ZXJsYXllcl9ncm91cC5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEub3ZlcmxheWVyX2dyb3VwLmFkZChsYXllci5zcHJpdGUsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5vdmVybGF5ZXJfZ3JvdXAucmVtb3ZlKGxheWVyLnNwcml0ZSwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSAwO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBkYXRhLnVuZGVybGF5ZXJfZ3JvdXAuY2hpbGRyZW4ubGVuZ3RoOyArK2luZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2hpbGQgPSBkYXRhLnVuZGVybGF5ZXJfZ3JvdXAuY2hpbGRyZW5baW5kZXhdIGFzIFBoYXNlci5UaWxlbWFwTGF5ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQubGF5ZXJfeiA+IGxheWVyLnopIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnVuZGVybGF5ZXJfZ3JvdXAuYWRkQXQobGF5ZXIuc3ByaXRlLCBpbmRleCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSBkYXRhLnVuZGVybGF5ZXJfZ3JvdXAuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnVuZGVybGF5ZXJfZ3JvdXAuYWRkKGxheWVyLnNwcml0ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQge0NvbnRyb2xsYWJsZUNoYXJ9IGZyb20gXCIuL0NvbnRyb2xsYWJsZUNoYXJcIjtcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSBcIi4vbWFnaWNfbnVtYmVyc1wiO1xuaW1wb3J0IHtUaWxlRXZlbnQsIGV2ZW50X3R5cGVzfSBmcm9tIFwiLi90aWxlX2V2ZW50cy9UaWxlRXZlbnRcIjtcbmltcG9ydCB7Z2V0X3RyYW5zaXRpb25fZGlyZWN0aW9ucywgcmFuZ2VfMzYwLCBkaXJlY3Rpb25zLCBiYXNlX2FjdGlvbnN9IGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQge25vcm1hbF9wdXNofSBmcm9tIFwiLi9pbnRlcmFjdGFibGVfb2JqZWN0cy9wdXNoXCI7XG5pbXBvcnQge01hcH0gZnJvbSBcIi4vTWFwXCI7XG5pbXBvcnQge0NsaW1iRXZlbnR9IGZyb20gXCIuL3RpbGVfZXZlbnRzL0NsaW1iRXZlbnRcIjtcbmltcG9ydCB7Q29sbGlzaW9ufSBmcm9tIFwiLi9Db2xsaXNpb25cIjtcblxuZXhwb3J0IGNsYXNzIEhlcm8gZXh0ZW5kcyBDb250cm9sbGFibGVDaGFyIHtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBTUEVFRF9MSU1JVF9UT19TVE9QID0gMTM7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgU1BFRURfTElNSVRfVE9fU1RPUF9XT1JMRF9NQVAgPSA5O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IE1JTklNQUxfU0xPUEUgPSAwLjE7XG5cbiAgICAvL1JPVEFUSU9OX0tFWSBjYW4gY29udmVydCBmcm9tIHByZXNzZWRfa2V5cyB0byB0aGUgY29ycmVzcG9uZGluZyBpbi1nYW1lIHJvdGF0aW9uXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgUk9UQVRJT05fS0VZID0gW1xuICAgICAgICBudWxsLCAvL25vIGtleXMgcHJlc3NlZFxuICAgICAgICBkaXJlY3Rpb25zLnJpZ2h0LCAvL3JpZ2h0XG4gICAgICAgIGRpcmVjdGlvbnMubGVmdCwgLy9sZWZ0XG4gICAgICAgIG51bGwsIC8vcmlnaHQgYW5kIGxlZnRcbiAgICAgICAgZGlyZWN0aW9ucy51cCwgLy91cFxuICAgICAgICBkaXJlY3Rpb25zLnVwX3JpZ2h0LCAvL3VwIGFuZCByaWdodFxuICAgICAgICBkaXJlY3Rpb25zLnVwX2xlZnQsIC8vdXAgYW5kIGxlZnRcbiAgICAgICAgbnVsbCwgLy91cCwgbGVmdCwgYW5kIHJpZ2h0XG4gICAgICAgIGRpcmVjdGlvbnMuZG93biwgLy9kb3duXG4gICAgICAgIGRpcmVjdGlvbnMuZG93bl9yaWdodCwgLy9kb3duIGFuZCByaWdodFxuICAgICAgICBkaXJlY3Rpb25zLmRvd25fbGVmdCwgLy9kb3duIGFuZCBsZWZ0XG4gICAgICAgIG51bGwsIC8vZG93biwgbGVmdCwgYW5kIHJpZ2h0XG4gICAgICAgIG51bGwsIC8vZG93biBhbmQgdXBcbiAgICAgICAgbnVsbCwgLy9kb3duLCB1cCwgYW5kIHJpZ2h0XG4gICAgICAgIG51bGwsIC8vZG93biwgdXAsIGFuZCBsZWZ0XG4gICAgICAgIG51bGwsIC8vZG93biwgdXAsIGxlZnQsIGFuZCByaWdodFxuICAgIF07XG5cbiAgICAvL1JPVEFUSU9OX05PUk1BTCBjb252ZXJ0cyBmcm9tIG5vcm1hbF9hbmdsZSByZWdpb24gKGZsb29yKChhbmdsZS0xNSkvMzApKSB0byBpbi1nYW1lIHJvdGF0aW9uXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgUk9UQVRJT05fTk9STUFMID0gW1xuICAgICAgICBkaXJlY3Rpb25zLnJpZ2h0LCAvLzM0NS0xNSBkZWdyZWVzXG4gICAgICAgIGRpcmVjdGlvbnMudXBfcmlnaHQsIC8vMTUtNDUgZGVncmVlc1xuICAgICAgICBkaXJlY3Rpb25zLnVwX3JpZ2h0LCAvLzQ1LTc1IGRlZ3JlZXNcbiAgICAgICAgZGlyZWN0aW9ucy51cCwgLy83NS0xMDUgZGVncmVlc1xuICAgICAgICBkaXJlY3Rpb25zLnVwX2xlZnQsIC8vMTA1LTEzNSBkZWdyZWVzXG4gICAgICAgIGRpcmVjdGlvbnMudXBfbGVmdCwgLy8xMzUtMTY1IGRlZ3JlZXNcbiAgICAgICAgZGlyZWN0aW9ucy5sZWZ0LCAvLzE2NS0xOTUgZGVncmVlc1xuICAgICAgICBkaXJlY3Rpb25zLmRvd25fbGVmdCwgLy8xOTUtMjI1IGRlZ3JlZXNcbiAgICAgICAgZGlyZWN0aW9ucy5kb3duX2xlZnQsIC8vMjI1LTI1NSBkZWdyZWVzXG4gICAgICAgIGRpcmVjdGlvbnMuZG93biwgLy8yNTUtMjg1IGRlZ3JlZXNcbiAgICAgICAgZGlyZWN0aW9ucy5kb3duX3JpZ2h0LCAvLzI4NS0zMTUgZGVncmVlc1xuICAgICAgICBkaXJlY3Rpb25zLmRvd25fcmlnaHQsIC8vMzE1LTM0NSBkZWdyZWVzXG4gICAgXTtcblxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFNQRUVEUyA9IHtcbiAgICAgICAgW2RpcmVjdGlvbnMucmlnaHRdOiB7eDogMSwgeTogMH0sXG4gICAgICAgIFtkaXJlY3Rpb25zLmxlZnRdOiB7eDogLTEsIHk6IDB9LFxuICAgICAgICBbZGlyZWN0aW9ucy51cF06IHt4OiAwLCB5OiAtMX0sXG4gICAgICAgIFtkaXJlY3Rpb25zLnVwX3JpZ2h0XToge3g6IG51bWJlcnMuSU5WX1NRUlQyLCB5OiAtbnVtYmVycy5JTlZfU1FSVDJ9LFxuICAgICAgICBbZGlyZWN0aW9ucy51cF9sZWZ0XToge3g6IC1udW1iZXJzLklOVl9TUVJUMiwgeTogLW51bWJlcnMuSU5WX1NRUlQyfSxcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl06IHt4OiAwLCB5OiAxfSxcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl9yaWdodF06IHt4OiBudW1iZXJzLklOVl9TUVJUMiwgeTogbnVtYmVycy5JTlZfU1FSVDJ9LFxuICAgICAgICBbZGlyZWN0aW9ucy5kb3duX2xlZnRdOiB7eDogLW51bWJlcnMuSU5WX1NRUlQyLCB5OiBudW1iZXJzLklOVl9TUVJUMn0sXG4gICAgfTtcblxuICAgIHB1YmxpYyBhcnJvd19pbnB1dHM6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBnYW1lLFxuICAgICAgICBkYXRhLFxuICAgICAgICBrZXlfbmFtZSxcbiAgICAgICAgaW5pdGlhbF94LFxuICAgICAgICBpbml0aWFsX3ksXG4gICAgICAgIGluaXRpYWxfYWN0aW9uLFxuICAgICAgICBpbml0aWFsX2RpcmVjdGlvbixcbiAgICAgICAgd2Fsa19zcGVlZCxcbiAgICAgICAgZGFzaF9zcGVlZCxcbiAgICAgICAgY2xpbWJfc3BlZWRcbiAgICApIHtcbiAgICAgICAgc3VwZXIoXG4gICAgICAgICAgICBnYW1lLFxuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIGtleV9uYW1lLFxuICAgICAgICAgICAgaW5pdGlhbF94LFxuICAgICAgICAgICAgaW5pdGlhbF95LFxuICAgICAgICAgICAgaW5pdGlhbF9hY3Rpb24sXG4gICAgICAgICAgICBpbml0aWFsX2RpcmVjdGlvbixcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB3YWxrX3NwZWVkLFxuICAgICAgICAgICAgZGFzaF9zcGVlZCxcbiAgICAgICAgICAgIGNsaW1iX3NwZWVkXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuYXJyb3dfaW5wdXRzID0gbnVsbDtcbiAgICB9XG5cbiAgICBjaGVja19jb250cm9sX2lucHV0cygpIHtcbiAgICAgICAgdGhpcy5hcnJvd19pbnB1dHMgPVxuICAgICAgICAgICAgKDEgKiArdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmlzRG93bih0aGlzLmRhdGEuZ2FtZXBhZC5SSUdIVCkpIHxcbiAgICAgICAgICAgICgyICogK3RoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5pc0Rvd24odGhpcy5kYXRhLmdhbWVwYWQuTEVGVCkpIHxcbiAgICAgICAgICAgICg0ICogK3RoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5pc0Rvd24odGhpcy5kYXRhLmdhbWVwYWQuVVApKSB8XG4gICAgICAgICAgICAoOCAqICt0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuaXNEb3duKHRoaXMuZGF0YS5nYW1lcGFkLkRPV04pKTtcbiAgICAgICAgdGhpcy5yZXF1aXJlZF9kaXJlY3Rpb24gPSBIZXJvLlJPVEFUSU9OX0tFWVt0aGlzLmFycm93X2lucHV0c107XG5cbiAgICAgICAgdGhpcy5kYXNoaW5nID0gdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmlzRG93bih0aGlzLmRhdGEuZ2FtZXBhZC5CKTtcbiAgICB9XG5cbiAgICBzZXRfc3BlZWRfZmFjdG9ycyhjaGVja19vbl9ldmVudDogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIGlmIChjaGVja19vbl9ldmVudCAmJiB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLm9uX2V2ZW50KSByZXR1cm47XG4gICAgICAgIGxldCBkZXNpcmVkX2RpcmVjdGlvbiA9IEhlcm8uUk9UQVRJT05fS0VZW3RoaXMuYXJyb3dfaW5wdXRzXTtcbiAgICAgICAgaWYgKHRoaXMuY2xpbWJpbmcpIHtcbiAgICAgICAgICAgIGlmIChkZXNpcmVkX2RpcmVjdGlvbiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMueF9zcGVlZCA9IHRoaXMueV9zcGVlZCA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5pZGxlX2NsaW1iaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKChkZXNpcmVkX2RpcmVjdGlvbiAmIDEpID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vdHJhbnNmb3JtcyBkaWFnb25hbCBtb3ZlbWVudHMgaW4gbm9uLWRpYWdvbmFsXG4gICAgICAgICAgICAgICAgICAgIC0tZGVzaXJlZF9kaXJlY3Rpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuc2V0X2RpcmVjdGlvbihkZXNpcmVkX2RpcmVjdGlvbik7XG4gICAgICAgICAgICAgICAgdGhpcy5pZGxlX2NsaW1iaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy54X3NwZWVkID0gSGVyby5TUEVFRFNbZGVzaXJlZF9kaXJlY3Rpb25dLng7XG4gICAgICAgICAgICAgICAgdGhpcy55X3NwZWVkID0gSGVyby5TUEVFRFNbZGVzaXJlZF9kaXJlY3Rpb25dLnk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvL3doZW4gZm9yY2VfZGlyZWN0aW9uIGlzIHRydWUsIGl0IG1lYW5zIHRoYXQgdGhlIGhlcm8gaXMgZ29pbmcgdG8gZmFjZSBhIGRpZmZlcmVudCBkaXJlY3Rpb24gZnJvbSB0aGUgb25lIHNwZWNpZmllZCBpbiB0aGUga2V5Ym9hcmQgYXJyb3dzXG4gICAgICAgICAgICBpZiAoZGVzaXJlZF9kaXJlY3Rpb24gIT09IG51bGwgfHwgdGhpcy5mb3JjZV9kaXJlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZm9yY2VfZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudF9kaXJlY3Rpb24gPSBkZXNpcmVkX2RpcmVjdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2FtZS50aW1lLmZyYW1lcyAmIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY2hhciB0dXJuIHRpbWUgZnJhbWUgcmF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXNpcmVkX2RpcmVjdGlvbiA9IGdldF90cmFuc2l0aW9uX2RpcmVjdGlvbnModGhpcy5kZXNpcmVkX2RpcmVjdGlvbiwgZGVzaXJlZF9kaXJlY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzaXJlZF9kaXJlY3Rpb24gPSB0aGlzLmN1cnJlbnRfZGlyZWN0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnhfc3BlZWQgPSBIZXJvLlNQRUVEU1tkZXNpcmVkX2RpcmVjdGlvbl0ueDtcbiAgICAgICAgICAgICAgICB0aGlzLnlfc3BlZWQgPSBIZXJvLlNQRUVEU1tkZXNpcmVkX2RpcmVjdGlvbl0ueTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy54X3NwZWVkID0gdGhpcy55X3NwZWVkID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNoZWNrX2ludGVyYWN0YWJsZV9vYmplY3RzKG1hcDogTWFwLCBjb250YWN0OiBwMi5Db250YWN0RXF1YXRpb24pIHtcbiAgICAgICAgbGV0IGogPSAwO1xuICAgICAgICBmb3IgKGogPSAwOyBqIDwgbWFwLmludGVyYWN0YWJsZV9vYmplY3RzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAvL2NoZWNrIGlmIGhlcm8gaXMgY29sbGlkaW5nIHdpdGggYW55IGludGVyYWN0YWJsZSBvYmplY3RcbiAgICAgICAgICAgIGNvbnN0IGludGVyYWN0YWJsZV9vYmplY3RfYm9keSA9IG1hcC5pbnRlcmFjdGFibGVfb2JqZWN0c1tqXS5zcHJpdGUuYm9keTtcbiAgICAgICAgICAgIGlmICghaW50ZXJhY3RhYmxlX29iamVjdF9ib2R5KSBjb250aW51ZTtcbiAgICAgICAgICAgIGlmIChjb250YWN0LmJvZHlBID09PSBpbnRlcmFjdGFibGVfb2JqZWN0X2JvZHkuZGF0YSB8fCBjb250YWN0LmJvZHlCID09PSBpbnRlcmFjdGFibGVfb2JqZWN0X2JvZHkuZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChjb250YWN0LmJvZHlBID09PSB0aGlzLnNwcml0ZS5ib2R5LmRhdGEgfHwgY29udGFjdC5ib2R5QiA9PT0gdGhpcy5zcHJpdGUuYm9keS5kYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGludGVyYWN0YWJsZV9vYmplY3QgPSBtYXAuaW50ZXJhY3RhYmxlX29iamVjdHNbal07XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIFtiYXNlX2FjdGlvbnMuV0FMSywgYmFzZV9hY3Rpb25zLkRBU0hdLmluY2x1ZGVzKHRoaXMuY3VycmVudF9hY3Rpb24gYXMgYmFzZV9hY3Rpb25zKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLm1hcC5jb2xsaXNpb25fbGF5ZXIgPT09IGludGVyYWN0YWJsZV9vYmplY3QuYmFzZV9jb2xsaXNpb25fbGF5ZXJcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyeWluZ190b19wdXNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnB1c2hfdGltZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyeWluZ190b19wdXNoX2RpcmVjdGlvbiA9IHRoaXMuY3VycmVudF9kaXJlY3Rpb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXZlbnRzX2luX3BvcyA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcC5ldmVudHNbVGlsZUV2ZW50LmdldF9sb2NhdGlvbl9rZXkodGhpcy50aWxlX3hfcG9zLCB0aGlzLnRpbGVfeV9wb3MpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaGFzX3N0YWlyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50c19pbl9wb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzX2luX3Bvcy5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC50eXBlID09PSBldmVudF90eXBlcy5DTElNQiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChldmVudCBhcyBDbGltYkV2ZW50KS5pc19zZXQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5hY3RpdmF0aW9uX2RpcmVjdGlvbnMuaW5jbHVkZXModGhpcy50cnlpbmdfdG9fcHVzaF9kaXJlY3Rpb24pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNfc3RhaXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaGFzX3N0YWlyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpdGVtX3Bvc2l0aW9uID0gaW50ZXJhY3RhYmxlX29iamVjdC5nZXRfY3VycmVudF9wb3NpdGlvbihtYXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMudHJ5aW5nX3RvX3B1c2hfZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMudXA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbV9wb3NpdGlvbi55IC09IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMuZG93bjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtX3Bvc2l0aW9uLnkgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5sZWZ0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1fcG9zaXRpb24ueCAtPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBkaXJlY3Rpb25zLnJpZ2h0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1fcG9zaXRpb24ueCArPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnRlcmFjdGFibGVfb2JqZWN0LnBvc2l0aW9uX2FsbG93ZWQoaXRlbV9wb3NpdGlvbi54LCBpdGVtX3Bvc2l0aW9uLnkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnB1c2hfdGltZXIgPSB0aGlzLmdhbWUudGltZS5ldmVudHMuYWRkKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBoYXNlci5UaW1lci5RVUFSVEVSLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbF9wdXNoLmJpbmQodGhpcywgdGhpcy5nYW1lLCB0aGlzLmRhdGEsIGludGVyYWN0YWJsZV9vYmplY3QpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGogPT09IG1hcC5pbnRlcmFjdGFibGVfb2JqZWN0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMudHJ5aW5nX3RvX3B1c2ggPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbGxpc2lvbl9kZWFsZXIobWFwOiBNYXApIHtcbiAgICAgICAgbGV0IG5vcm1hbHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmdhbWUucGh5c2ljcy5wMi53b3JsZC5uYXJyb3dwaGFzZS5jb250YWN0RXF1YXRpb25zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBjb250YWN0ID0gdGhpcy5nYW1lLnBoeXNpY3MucDIud29ybGQubmFycm93cGhhc2UuY29udGFjdEVxdWF0aW9uc1tpXTtcbiAgICAgICAgICAgIGlmIChjb250YWN0LmJvZHlBID09PSB0aGlzLnNwcml0ZS5ib2R5LmRhdGEpIHtcbiAgICAgICAgICAgICAgICAvL2NoZWNrIGlmIGhlcm8gY29sbGlkZWQgd2l0aCBzb21ldGhpbmdcbiAgICAgICAgICAgICAgICBub3JtYWxzLnB1c2goY29udGFjdC5ub3JtYWxBKTsgLy9jb2xsaXNpb24gbm9ybWFscyAob25lIG5vcm1hbCBmb3IgZWFjaCBjb250YWN0IHBvaW50KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jaGVja19pbnRlcmFjdGFibGVfb2JqZWN0cyhtYXAsIGNvbnRhY3QpO1xuICAgICAgICB9XG4gICAgICAgIC8vbm9ybWFscyBoYXZpbmcgbGVuZ3RoLCBtZWFucyB0aGF0IGEgY29sbGlzaW9uIGlzIGhhcHBlbmluZ1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICBub3JtYWxzLmxlbmd0aCAmJlxuICAgICAgICAgICAgW2Jhc2VfYWN0aW9ucy5XQUxLLCBiYXNlX2FjdGlvbnMuREFTSCwgYmFzZV9hY3Rpb25zLkNMSU1CXS5pbmNsdWRlcyh0aGlzLmN1cnJlbnRfYWN0aW9uIGFzIGJhc2VfYWN0aW9ucylcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBjb25zdCBzcGVlZF9saW1pdCA9IHRoaXMuZGF0YS5tYXAuaXNfd29ybGRfbWFwXG4gICAgICAgICAgICAgICAgPyBIZXJvLlNQRUVEX0xJTUlUX1RPX1NUT1BfV09STERfTUFQXG4gICAgICAgICAgICAgICAgOiBIZXJvLlNQRUVEX0xJTUlUX1RPX1NUT1A7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgTWF0aC5hYnModGhpcy5zcHJpdGUuYm9keS52ZWxvY2l0eS54KSA8IHNwZWVkX2xpbWl0ICYmXG4gICAgICAgICAgICAgICAgTWF0aC5hYnModGhpcy5zcHJpdGUuYm9keS52ZWxvY2l0eS55KSA8IHNwZWVkX2xpbWl0XG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAvL3NwZWVkcyBiZWxvdyBTUEVFRF9MSU1JVF9UT19TVE9QIGFyZSBub3QgY29uc2lkZXJlZFxuICAgICAgICAgICAgICAgIGxldCBjb250YWN0X3BvaW50X2RpcmVjdGlvbnMgPSBuZXcgQXJyYXkobm9ybWFscy5sZW5ndGgpOyAvLyBhIGNvbnRhY3QgcG9pbnQgZGlyZWN0aW9uIGlzIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24gb2YgdGhlIGNvbnRhY3Qgbm9ybWFsIHZlY3RvclxuICAgICAgICAgICAgICAgIG5vcm1hbHMuZm9yRWFjaCgobm9ybWFsLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvL3Nsb3BlcyBvdXRzaWRlIHRoZSBNSU5JTUFMX1NMT1BFIHJhbmdlIHdpbGwgYmUgZGVzY29uc2lkZXJlZFxuICAgICAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMobm9ybWFsWzBdKSA8IEhlcm8uTUlOSU1BTF9TTE9QRSkgbm9ybWFsWzBdID0gMDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKG5vcm1hbFsxXSkgPCBIZXJvLk1JTklNQUxfU0xPUEUpIG5vcm1hbFsxXSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhub3JtYWxbMF0pID4gMSAtIEhlcm8uTUlOSU1BTF9TTE9QRSkgbm9ybWFsWzBdID0gTWF0aC5zaWduKG5vcm1hbFswXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhub3JtYWxbMV0pID4gMSAtIEhlcm8uTUlOSU1BTF9TTE9QRSkgbm9ybWFsWzFdID0gTWF0aC5zaWduKG5vcm1hbFsxXSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhY3RfcG9pbnRfZGlyZWN0aW9uc1tpbmRleF0gPSByYW5nZV8zNjAoTWF0aC5hdGFuMihub3JtYWxbMV0sIC1ub3JtYWxbMF0pKTsgLy9zdG9yaW5nIHRoZSBhbmdsZSBhcyBpZiBpdCBpcyBpbiB0aGUgMXN0IHF1YWRyYW50XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVzaXJlZF9kaXJlY3Rpb24gPSByYW5nZV8zNjAoXG4gICAgICAgICAgICAgICAgICAgIE1hdGguYXRhbjIoLXRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkudGVtcF95LCB0aGlzLnNwcml0ZS5ib2R5LnZlbG9jaXR5LnRlbXBfeClcbiAgICAgICAgICAgICAgICApOyAvL3N0b3JpbmcgdGhlIGFuZ2xlIGFzIGlmIGl0IGlzIGluIHRoZSAxc3QgcXVhZHJhbnRcbiAgICAgICAgICAgICAgICBjb250YWN0X3BvaW50X2RpcmVjdGlvbnMuZm9yRWFjaChkaXJlY3Rpb24gPT4ge1xuICAgICAgICAgICAgICAgICAgICAvL2NoZWNrIGlmIHRoZSBkZXNpcmVkIGRpcmVjdGlvbiBpcyBnb2luZyB0b3dhcmRzIGF0IGxlYXN0IG9uZSBjb250YWN0IGRpcmVjdGlvbiB3aXRoIGEgZXJyb3IgbWFyZ2luIG9mIDMwIGRlZ3JlZXNcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uID49IGRlc2lyZWRfZGlyZWN0aW9uIC0gbnVtYmVycy5kZWdyZWUxNSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uIDw9IGRlc2lyZWRfZGlyZWN0aW9uICsgbnVtYmVycy5kZWdyZWUxNVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgdHJ1ZSwgaXQgbWVhbnMgdGhhdCB0aGUgaGVybyBpcyBnb2luZyB0aGUgaW4gdGhlIGRpcmVjdGlvbiBvZiB0aGUgY29sbGlzaW9uIG9iZWpjdCwgdGhlbiBpdCBtdXN0IHN0b3BcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkudGVtcF94ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkudGVtcF95ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RvcF9ieV9jb2xsaWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuZm9yY2VfZGlyZWN0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY3VycmVudF9hY3Rpb24gIT09IGJhc2VfYWN0aW9ucy5DTElNQikge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RvcF9ieV9jb2xsaWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAobm9ybWFscy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9ldmVyeXRoaW5nIGluc2lkZSB0aGlzIGlmIGlzIHRvIGRlYWwgd2l0aCBkaXJlY3Rpb24gY2hhbmdpbmcgd2hlbiBjb2xsaWRpbmdcbiAgICAgICAgICAgICAgICAgICAgLy9maW5kcyB3aGljaCAzMCBkZWdyZWUgc2VjdG9yIHRoZSBub3JtYWwgYW5nbGUgbGllcyB3aXRoaW4sIGFuZCBjb252ZXJ0cyB0byBhIGRpcmVjdGlvblxuICAgICAgICAgICAgICAgICAgICBjb25zdCB3YWxsX2RpcmVjdGlvbiA9XG4gICAgICAgICAgICAgICAgICAgICAgICBIZXJvLlJPVEFUSU9OX05PUk1BTFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAocmFuZ2VfMzYwKE1hdGguYXRhbjIobm9ybWFsc1swXVsxXSwgLW5vcm1hbHNbMF1bMF0pICsgbnVtYmVycy5kZWdyZWUxNSkgL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1iZXJzLmRlZ3JlZTMwKSB8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlbGF0aXZlX2RpcmVjdGlvbiA9IChIZXJvLlJPVEFUSU9OX0tFWVt0aGlzLmFycm93X2lucHV0c10gLSB3YWxsX2RpcmVjdGlvbikgJiA3O1xuICAgICAgICAgICAgICAgICAgICAvL2lmIHBsYXllcidzIGRpcmVjdGlvbiBpcyB3aXRoaW4gMSBvZiB3YWxsX2RpcmVjdGlvblxuICAgICAgICAgICAgICAgICAgICBpZiAocmVsYXRpdmVfZGlyZWN0aW9uID09PSAxIHx8IHJlbGF0aXZlX2RpcmVjdGlvbiA9PT0gNykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JjZV9kaXJlY3Rpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRfZGlyZWN0aW9uKCh3YWxsX2RpcmVjdGlvbiArIChyZWxhdGl2ZV9kaXJlY3Rpb24gPDwgMSkpICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcmNlX2RpcmVjdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JjZV9kaXJlY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RvcF9ieV9jb2xsaWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcF9ieV9jb2xsaWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZm9yY2VfZGlyZWN0aW9uID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hcHBseV9zcGVlZCgpO1xuICAgIH1cblxuICAgIHVwZGF0ZShtYXA6IE1hcCkge1xuICAgICAgICB0aGlzLmNoZWNrX2NvbnRyb2xfaW5wdXRzKCk7IC8vY2hlY2sgd2hpY2ggYXJyb3cga2V5cyBhcmUgYmVpbmcgcHJlc3NlZFxuICAgICAgICB0aGlzLnNldF9zcGVlZF9mYWN0b3JzKHRydWUpOyAvL3NldHMgdGhlIGRpcmVjdGlvbiBvZiB0aGUgbW92ZW1lbnRcbiAgICAgICAgdGhpcy5zZXRfY3VycmVudF9hY3Rpb24oKTsgLy9jaG9vc2VzIHdoaWNoIHNwcml0ZSB0aGUgaGVybyBzaGFsbCBhc3N1bWVcbiAgICAgICAgdGhpcy5jYWxjdWxhdGVfc3BlZWQoKTsgLy9jYWxjdWxhdGVzIHRoZSBmaW5hbCBzcGVlZFxuICAgICAgICB0aGlzLmNvbGxpc2lvbl9kZWFsZXIobWFwKTsgLy9jaGVjayBpZiB0aGUgaGVybyBpcyBjb2xsaWRpbmcgYW5kIGl0cyBjb25zZXF1ZW5jZXNcbiAgICAgICAgdGhpcy5zZXRfYWN0aW9uKHRydWUpOyAvL3NldHMgdGhlIGhlcm8gc3ByaXRlXG4gICAgICAgIHRoaXMudXBkYXRlX3NoYWRvdygpOyAvL3VwZGF0ZXMgdGhlIGhlcm8ncyBzaGFkb3cgcG9zaXRpb25cbiAgICAgICAgdGhpcy51cGRhdGVfaGFsZl9jcm9wKCk7IC8vaGFsdmVzIHRoZSBoZXJvIHRleHR1cmUgaWYgbmVlZGVkXG4gICAgfVxuXG4gICAgY29uZmlnX2JvZHkoY29sbGlzaW9uX29iajogQ29sbGlzaW9uLCBib2R5X3JhZGl1czogbnVtYmVyID0gbnVtYmVycy5IRVJPX0JPRFlfUkFESVVTKSB7XG4gICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLmVuYWJsZSh0aGlzLnNwcml0ZSwgZmFsc2UpO1xuICAgICAgICB0aGlzLnJlc2V0X2FuY2hvcigpOyAvL0ltcG9ydGFudCB0byBiZSBhZnRlciB0aGUgcHJldmlvdXMgY29tbWFuZFxuICAgICAgICB0aGlzLnNwcml0ZS5ib2R5LmNsZWFyU2hhcGVzKCk7XG4gICAgICAgIHRoaXMuYm9keV9yYWRpdXMgPSBib2R5X3JhZGl1cztcbiAgICAgICAgdGhpcy5zcHJpdGUuYm9keS5zZXRDaXJjbGUodGhpcy5ib2R5X3JhZGl1cywgMCwgMCk7XG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkuc2V0Q29sbGlzaW9uR3JvdXAoY29sbGlzaW9uX29iai5oZXJvX2NvbGxpc2lvbl9ncm91cCk7XG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkubWFzcyA9IDEuMDtcbiAgICAgICAgdGhpcy5zcHJpdGUuYm9keS5kYW1waW5nID0gMDtcbiAgICAgICAgdGhpcy5zcHJpdGUuYm9keS5hbmd1bGFyRGFtcGluZyA9IDA7XG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkuaW5lcnRpYSA9IDA7XG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkuc2V0WmVyb1JvdGF0aW9uKCk7XG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkuZml4ZWRSb3RhdGlvbiA9IHRydWU7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtHb2xkZW5TdW59IGZyb20gXCIuLi9Hb2xkZW5TdW5cIjtcbmltcG9ydCB7U3ByaXRlQmFzZX0gZnJvbSBcIi4uL1Nwcml0ZUJhc2VcIjtcbmltcG9ydCB7YmFzZV9hY3Rpb25zLCBkaXJlY3Rpb25zfSBmcm9tIFwiLi4vdXRpbHNcIjtcblxuY29uc3QgRk9PVFNURVBTX1RUTCA9IFBoYXNlci5UaW1lci5TRUNPTkQgPDwgMTtcbmNvbnN0IFdBTEtJTkdfVElNRV9JTlRFUlZBTCA9IFBoYXNlci5UaW1lci5RVUFSVEVSO1xuY29uc3QgUlVOTklOR19USU1FX0lOVEVSVkFMID0gUGhhc2VyLlRpbWVyLlFVQVJURVI7XG5cbmNvbnN0IElOSVRJQUxfQUNUSU9OID0gYmFzZV9hY3Rpb25zLklETEU7XG5jb25zdCBJTklUSUFMX0RJUkVDVElPTiA9IGRpcmVjdGlvbnMuZG93bjtcblxuY29uc3QgRk9PVFNURVBTX0tFWV9OQU1FID0gXCJmb290cHJpbnRzXCI7XG5jb25zdCBGT09UU1RFUFNfQU5DSE9SID0gMC41O1xuY29uc3QgTUFYX0RFQURfU0laRSA9IDIwO1xuXG5jb25zdCBmb290X2ZvcndhcmRfdHlwZXMgPSB7XG4gICAgTk9ORTogXCJub25lXCIsXG4gICAgUklHSFQ6IFwicmlnaHRcIixcbiAgICBMRUZUOiBcImxlZnRcIixcbn07XG5cbi8qR2VuZXJhdGVzIGFuZCBtYW5hZ2VzIGZvb3RwcmludHNcbkNhbiBiZSBhcHBsaWVkIHRvIGFueSBtb3ZhYmxlIHVuaXRcblxuSW5wdXQ6IGdhbWUgW1BoYXNlcjpHYW1lXSAtIFJlZmVyZW5jZSB0byB0aGUgcnVubmluZyBnYW1lIG9iamVjdFxuICAgICAgIGRhdGEgW0dvbGRlblN1bl0gLSBSZWZlcmVuY2UgdG8gdGhlIG1haW4gSlMgQ2xhc3MgaW5zdGFuY2UqL1xuZXhwb3J0IGNsYXNzIEZvb3RzdGVwcyB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOiBHb2xkZW5TdW47XG4gICAgcHVibGljIHhfcG9zOiBudW1iZXI7XG4gICAgcHVibGljIHlfcG9zOiBudW1iZXI7XG4gICAgcHVibGljIGN1cnJlbnRfYWN0aW9uOiBzdHJpbmc7XG4gICAgcHVibGljIGN1cnJlbnRfZGlyZWN0aW9uOiBudW1iZXI7XG4gICAgcHVibGljIGFuY2hvcl94OiBudW1iZXI7XG4gICAgcHVibGljIGFuY2hvcl95OiBudW1iZXI7XG4gICAgcHVibGljIGdyb3VwOiBQaGFzZXIuR3JvdXA7XG4gICAgcHVibGljIGRlYWRfc3RlcHM6IFBoYXNlci5TcHJpdGVbXTtcbiAgICBwdWJsaWMgZGVhZF9pbmRleDogbnVtYmVyO1xuICAgIHB1YmxpYyBmb290X2ZvcndhcmQ6IHN0cmluZztcbiAgICBwdWJsaWMgY2FuX21ha2VfZm9vdHByaW50OiBib29sZWFuO1xuICAgIHB1YmxpYyBmb290c3RlcHNfdGltZV9pbnRlcnZhbDogbnVtYmVyO1xuICAgIHB1YmxpYyBuZXdfc3RlcF90aW1lcjogUGhhc2VyLlRpbWVyO1xuICAgIHB1YmxpYyBleHBpcmVfdGltZXI6IFBoYXNlci5UaW1lcjtcbiAgICBwdWJsaWMgZm9vdHN0ZXBzX3Nwcml0ZV9iYXNlOiBTcHJpdGVCYXNlO1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSkge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLnhfcG9zID0gMDtcbiAgICAgICAgdGhpcy55X3BvcyA9IDA7XG4gICAgICAgIHRoaXMuY3VycmVudF9hY3Rpb24gPSBJTklUSUFMX0FDVElPTjtcbiAgICAgICAgdGhpcy5jdXJyZW50X2RpcmVjdGlvbiA9IElOSVRJQUxfRElSRUNUSU9OO1xuICAgICAgICB0aGlzLmFuY2hvcl94ID0gRk9PVFNURVBTX0FOQ0hPUjtcbiAgICAgICAgdGhpcy5hbmNob3JfeSA9IEZPT1RTVEVQU19BTkNIT1I7XG4gICAgICAgIHRoaXMuZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XG4gICAgICAgIHRoaXMuZ3JvdXAuc2VuZF90b19iYWNrID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5ncm91cC5iYXNlX2NvbGxpc2lvbl9sYXllciA9IDA7XG5cbiAgICAgICAgdGhpcy5kZWFkX3N0ZXBzID0gbmV3IEFycmF5KE1BWF9ERUFEX1NJWkUpO1xuICAgICAgICB0aGlzLmRlYWRfaW5kZXggPSAwO1xuICAgICAgICB0aGlzLmZvb3RfZm9yd2FyZCA9IGZvb3RfZm9yd2FyZF90eXBlcy5OT05FO1xuICAgICAgICB0aGlzLmNhbl9tYWtlX2Zvb3RwcmludCA9IHRydWU7XG4gICAgICAgIHRoaXMuZm9vdHN0ZXBzX3RpbWVfaW50ZXJ2YWwgPSBXQUxLSU5HX1RJTUVfSU5URVJWQUw7XG5cbiAgICAgICAgdGhpcy5uZXdfc3RlcF90aW1lciA9IHRoaXMuZ2FtZS50aW1lLmNyZWF0ZShmYWxzZSk7XG4gICAgICAgIHRoaXMuZXhwaXJlX3RpbWVyID0gdGhpcy5nYW1lLnRpbWUuY3JlYXRlKGZhbHNlKTtcblxuICAgICAgICB0aGlzLmZvb3RzdGVwc19zcHJpdGVfYmFzZSA9IHRoaXMuZGF0YS5pbmZvLm1pc2Nfc3ByaXRlX2Jhc2VfbGlzdFtGT09UU1RFUFNfS0VZX05BTUVdO1xuICAgIH1cblxuICAgIC8qU2V0cyB0aGUgZm9vdHByaW50IGludGVydmFsIHRpbWVyKi9cbiAgICBzZXRfbmV3X3N0ZXBfdGltZXIoKSB7XG4gICAgICAgIHRoaXMuY2FuX21ha2VfZm9vdHByaW50ID0gZmFsc2U7XG4gICAgICAgIHRoaXMubmV3X3N0ZXBfdGltZXIuYWRkKHRoaXMuZm9vdHN0ZXBzX3RpbWVfaW50ZXJ2YWwsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2FuX21ha2VfZm9vdHByaW50ID0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmV3X3N0ZXBfdGltZXIuc3RhcnQoKTtcbiAgICB9XG5cbiAgICAvKlNldHMgdGhlIGZvb3RwcmludCBleHBpcmF0aW9uIHRpbWVyKi9cbiAgICBzZXRfZXhwaXJlX3RpbWVyKHNwcml0ZSwgYW5pbWF0aW9uKSB7XG4gICAgICAgIHRoaXMuZXhwaXJlX3RpbWVyLmFkZChcbiAgICAgICAgICAgIEZPT1RTVEVQU19UVEwsXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgc3ByaXRlLmFuaW1hdGlvbnMucGxheShhbmltYXRpb24pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRoaXNcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5leHBpcmVfdGltZXIuc3RhcnQoKTtcbiAgICB9XG5cbiAgICAvKkVpdGhlciBraWxscyBvciBkZXN0cm95cyBhIGdpdmVuIHN0ZXBcbiAgICBLaWxsaW5nIGxlYXZlcyB0aGUgc3ByaXRlIGluIG1lbW9yeSB0byBiZSByZWN5Y2xlZFxuXG4gICAgSW5wdXQ6IGV4cGlyZWQgW1BoYXNlcjpTcHJpdGVdOiBUaGUgc3RlcCB0byBiZSBraWxsZWQvZGVzdHJveWVkKi9cbiAgICBraWxsX3N0ZXAoZXhwaXJlZCkge1xuICAgICAgICBpZiAodGhpcy5kZWFkX2luZGV4ID09PSBNQVhfREVBRF9TSVpFKSB7XG4gICAgICAgICAgICBleHBpcmVkLmRlc3Ryb3koKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGV4cGlyZWQua2lsbCgpO1xuICAgICAgICAgICAgdGhpcy5kZWFkX3N0ZXBzW3RoaXMuZGVhZF9pbmRleCsrXSA9IGV4cGlyZWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKlJvdGF0ZXMgdGhlIHN0ZXAgYWNjb3JkaW5nIHRoZSBwYXJlbnQncyBkaXJlY3Rpb25cbiAgICBBbHNvIGZsaXBzIHRoZSBzcHJpdGUgaG9yaXpvbnRhbGx5IGlmIG5lY2Vzc2FyeVxuICAgIFxuICAgIElucHV0OiBzcHJpdGUgW1BoYXNlcjpTcHJpdGVdIC0gVGhlIHNwcml0ZSB0byBiZSBhZmZlY3RlZCovXG4gICAgcG9zaXRpb25fZm9vdHN0ZXBzKHNwcml0ZSkge1xuICAgICAgICBzcHJpdGUuc2NhbGUueCA9IHRoaXMuZm9vdF9mb3J3YXJkID09PSBmb290X2ZvcndhcmRfdHlwZXMuUklHSFQgPyAtMSA6IDE7XG4gICAgICAgIHNwcml0ZS5yb3RhdGlvbiA9ICgodGhpcy5jdXJyZW50X2RpcmVjdGlvbiArIDIpICogTWF0aC5QSSkgLyA0O1xuICAgIH1cblxuICAgIC8qRGlzcGxheXMgYSBuZXcgc3RlcCBvbiBzY3JlZW5cbiAgICBXaWxsIHJlY3ljbGUgZGVhZCBzcHJpdGVzIGlmIGF2YWlsYWJsZVxuXG4gICAgSW5wdXQ6IGRpcmVjdGlvbiBbbnVtYmVyXSA9IFRoZSBwYXJlbnQncyBjdXJyZW50IGRpcmVjdGlvblxuICAgICAgICAgICBhY3Rpb24gW3N0cmluZ10gPSBUaGUgcGFyZW50J3MgY3VycmVudCBhY3Rpb24qL1xuICAgIGNyZWF0ZV9zdGVwKGRpcmVjdGlvbiwgYWN0aW9uKSB7XG4gICAgICAgIGlmICh0aGlzLmRhdGEubnBjX2dyb3VwLmdldEluZGV4KHRoaXMuZ3JvdXApIDwgMCkge1xuICAgICAgICAgICAgdGhpcy5kYXRhLm5wY19ncm91cC5hZGQodGhpcy5ncm91cCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJyZW50X2RpcmVjdGlvbiA9IGRpcmVjdGlvbjtcbiAgICAgICAgdGhpcy5jdXJyZW50X2FjdGlvbiA9IGFjdGlvbjtcbiAgICAgICAgdGhpcy51cGRhdGVfZm9vdCgpO1xuICAgICAgICBjb25zdCBmb290c3RlcHNfdHlwZSA9IHRoaXMuY3VycmVudF9hY3Rpb24gPT09IGJhc2VfYWN0aW9ucy5JRExFID8gXCJkb3VibGVcIiA6IFwic2luZ2xlXCI7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbl9uYW1lID0gdGhpcy5mb290c3RlcHNfc3ByaXRlX2Jhc2UuZ2V0QW5pbWF0aW9uS2V5KEZPT1RTVEVQU19LRVlfTkFNRSwgZm9vdHN0ZXBzX3R5cGUpO1xuXG4gICAgICAgIGxldCBmb290c3RlcHNfc3ByaXRlO1xuICAgICAgICBpZiAodGhpcy5kZWFkX2luZGV4ID09PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBzcHJpdGVfa2V5ID0gdGhpcy5mb290c3RlcHNfc3ByaXRlX2Jhc2UuZ2V0QWN0aW9uS2V5KEZPT1RTVEVQU19LRVlfTkFNRSk7XG4gICAgICAgICAgICBmb290c3RlcHNfc3ByaXRlID0gdGhpcy5ncm91cC5jcmVhdGUoMCwgMCwgc3ByaXRlX2tleSk7XG4gICAgICAgICAgICBmb290c3RlcHNfc3ByaXRlLmFuY2hvci5zZXRUbyh0aGlzLmFuY2hvcl94LCB0aGlzLmFuY2hvcl95KTtcbiAgICAgICAgICAgIHRoaXMuZm9vdHN0ZXBzX3Nwcml0ZV9iYXNlLnNldEFuaW1hdGlvbihmb290c3RlcHNfc3ByaXRlLCBGT09UU1RFUFNfS0VZX05BTUUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9vdHN0ZXBzX3Nwcml0ZSA9IHRoaXMuZGVhZF9zdGVwc1stLXRoaXMuZGVhZF9pbmRleF07XG4gICAgICAgICAgICBmb290c3RlcHNfc3ByaXRlLnJlc2V0KDAsIDApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbl9vYmogPSBmb290c3RlcHNfc3ByaXRlLmFuaW1hdGlvbnMuZ2V0QW5pbWF0aW9uKGFuaW1hdGlvbl9uYW1lKTtcbiAgICAgICAgYW5pbWF0aW9uX29iai5zdG9wKHRydWUpO1xuICAgICAgICB0aGlzLmdyb3VwLmJhc2VfY29sbGlzaW9uX2xheWVyID0gdGhpcy5kYXRhLm1hcC5jb2xsaXNpb25fbGF5ZXI7XG4gICAgICAgIGZvb3RzdGVwc19zcHJpdGUueCA9IHRoaXMuZGF0YS5oZXJvLnNoYWRvdy54O1xuICAgICAgICBmb290c3RlcHNfc3ByaXRlLnkgPSB0aGlzLmRhdGEuaGVyby5zaGFkb3cueTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbl9mb290c3RlcHMoZm9vdHN0ZXBzX3Nwcml0ZSk7XG5cbiAgICAgICAgYW5pbWF0aW9uX29iai5vbkNvbXBsZXRlLmFkZE9uY2UoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5raWxsX3N0ZXAoZm9vdHN0ZXBzX3Nwcml0ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNldF9leHBpcmVfdGltZXIoZm9vdHN0ZXBzX3Nwcml0ZSwgYW5pbWF0aW9uX25hbWUpO1xuXG4gICAgICAgIHRoaXMuc2V0X25ld19zdGVwX3RpbWVyKCk7XG4gICAgfVxuXG4gICAgLypVcGRhdGVzIHRoZSBcImZvb3RfZm9yd2FyZFwiIHByb3BlcnR5Ki9cbiAgICB1cGRhdGVfZm9vdCgpIHtcbiAgICAgICAgdGhpcy5mb290c3RlcHNfdGltZV9pbnRlcnZhbCA9XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRfYWN0aW9uID09PSBiYXNlX2FjdGlvbnMuV0FMSyA/IFdBTEtJTkdfVElNRV9JTlRFUlZBTCA6IFJVTk5JTkdfVElNRV9JTlRFUlZBTDtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudF9hY3Rpb24gPT09IGJhc2VfYWN0aW9ucy5JRExFKSB7XG4gICAgICAgICAgICB0aGlzLmZvb3RfZm9yd2FyZCA9IGZvb3RfZm9yd2FyZF90eXBlcy5OT05FO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5mb290X2ZvcndhcmQgPVxuICAgICAgICAgICAgICAgIHRoaXMuZm9vdF9mb3J3YXJkID09PSBmb290X2ZvcndhcmRfdHlwZXMuTEVGVCA/IGZvb3RfZm9yd2FyZF90eXBlcy5SSUdIVCA6IGZvb3RfZm9yd2FyZF90eXBlcy5MRUZUO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypLaWxscyBhbGwgc3ByaXRlcyBhbmQgcmVzZXRzIHRoZSB0aW1lcnNcblxuICAgIElucHV0OiBmb3JjZV9kZXN0cm95IFtib29sZWFuXSAtIElmIHRydWUsIGRlc3Ryb3lzIHN0ZXBzIGluc3RlYWQqL1xuICAgIGNsZWFuX2FsbChmb3JjZV9kZXN0cm95ID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5uZXdfc3RlcF90aW1lci5zdG9wKHRydWUpO1xuICAgICAgICB0aGlzLmV4cGlyZV90aW1lci5zdG9wKHRydWUpO1xuICAgICAgICB0aGlzLmdyb3VwLmNoaWxkcmVuLmZvckVhY2goKHNwcml0ZTogUGhhc2VyLlNwcml0ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGZvcmNlX2Rlc3Ryb3kpIHtcbiAgICAgICAgICAgICAgICBzcHJpdGUuZGVzdHJveSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzcHJpdGUuYW5pbWF0aW9ucy5jdXJyZW50QW5pbS5zdG9wKHRydWUpO1xuICAgICAgICAgICAgICAgIHNwcml0ZS5hbmltYXRpb25zLmN1cnJlbnRBbmltLm9uQ29tcGxldGUucmVtb3ZlQWxsKCk7XG4gICAgICAgICAgICAgICAgc3ByaXRlLmtpbGwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZGVhZF9zdGVwcyA9IHRoaXMuZ3JvdXAuY2hpbGRyZW4uc2xpY2UoKSBhcyBQaGFzZXIuU3ByaXRlW107XG4gICAgICAgIHRoaXMuZGVhZF9pbmRleCA9IHRoaXMuZ3JvdXAuY2hpbGRyZW4ubGVuZ3RoO1xuICAgIH1cblxuICAgIC8qRGVzdHJveXMgdGhpcyBvYmplY3QgYW5kIGl0cyBjaGlsZHJlbiovXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5jbGVhbl9hbGwodHJ1ZSk7XG4gICAgICAgIHRoaXMubmV3X3N0ZXBfdGltZXIuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmV4cGlyZV90aW1lci5kZXN0cm95KCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtDb2xsaXNpb259IGZyb20gXCIuLi9Db2xsaXNpb25cIjtcbmltcG9ydCB7R29sZGVuU3VufSBmcm9tIFwiLi4vR29sZGVuU3VuXCI7XG5pbXBvcnQge0hlcm99IGZyb20gXCIuLi9IZXJvXCI7XG5pbXBvcnQge2Jhc2VfYWN0aW9uc30gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQge2V2ZW50X3R5cGVzLCBUaWxlRXZlbnR9IGZyb20gXCIuL1RpbGVFdmVudFwiO1xuXG5jbGFzcyBFdmVudFF1ZXVlIHtcbiAgICBwdWJsaWMgY2xpbWJfZXZlbnQ6IGJvb2xlYW47XG4gICAgcHVibGljIHF1ZXVlOiB7XG4gICAgICAgIGV2ZW50OiBUaWxlRXZlbnQ7XG4gICAgICAgIGZpcmVfZnVuY3Rpb246IEZ1bmN0aW9uO1xuICAgIH1bXTtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5jbGltYl9ldmVudCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnF1ZXVlID0gW107XG4gICAgfVxuXG4gICAgYWRkKGV2ZW50LCB0aGlzX2FjdGl2YXRpb25fZGlyZWN0aW9uLCBmaXJlX2Z1bmN0aW9uLCBmaXJlID0gZmFsc2UpIHtcbiAgICAgICAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIGV2ZW50X3R5cGVzLkNMSU1COlxuICAgICAgICAgICAgICAgIGlmIChldmVudC5hY3RpdmUgJiYgZXZlbnQuaXNfc2V0ICYmIGV2ZW50LmFjdGl2YXRpb25fZGlyZWN0aW9ucy5pbmNsdWRlcyh0aGlzX2FjdGl2YXRpb25fZGlyZWN0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsaW1iX2V2ZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpcmUpIHtcbiAgICAgICAgICAgIGZpcmVfZnVuY3Rpb24oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucXVldWUucHVzaCh7XG4gICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICAgICAgICAgIGZpcmVfZnVuY3Rpb246IGZpcmVfZnVuY3Rpb24sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb2Nlc3NfcXVldWUoKSB7XG4gICAgICAgIGlmICh0aGlzLmNsaW1iX2V2ZW50KSB7XG4gICAgICAgICAgICB0aGlzLnF1ZXVlID0gdGhpcy5xdWV1ZS5maWx0ZXIoaXRlbSA9PiBpdGVtLmV2ZW50LnR5cGUgIT09IGV2ZW50X3R5cGVzLkpVTVApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucXVldWUuZm9yRWFjaChpdGVtID0+IGl0ZW0uZmlyZV9mdW5jdGlvbigpKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUaWxlRXZlbnRNYW5hZ2VyIHtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBFVkVOVF9JTklUX0RFTEFZID0gMzUwO1xuXG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOiBHb2xkZW5TdW47XG4gICAgcHVibGljIGhlcm86IEhlcm87XG4gICAgcHVibGljIGNvbGxpc2lvbjogQ29sbGlzaW9uO1xuICAgIHB1YmxpYyBldmVudF90aW1lcnM6IHtbZXZlbnRfaWQ6IG51bWJlcl06IFBoYXNlci5UaW1lckV2ZW50fTtcbiAgICBwdWJsaWMgb25fZXZlbnQ6IGJvb2xlYW47XG4gICAgcHVibGljIHdhbGtpbmdfb25fcGlsbGFyc190aWxlczogU2V0PHN0cmluZz47XG4gICAgcHVibGljIHRyaWdnZXJlZF9ldmVudHM6IHtbZXZlbnRfaWQ6IG51bWJlcl06IFRpbGVFdmVudH07XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhLCBoZXJvLCBjb2xsaXNpb24pIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5oZXJvID0gaGVybztcbiAgICAgICAgdGhpcy5jb2xsaXNpb24gPSBjb2xsaXNpb247XG4gICAgICAgIHRoaXMuZXZlbnRfdGltZXJzID0ge307XG4gICAgICAgIHRoaXMub25fZXZlbnQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy53YWxraW5nX29uX3BpbGxhcnNfdGlsZXMgPSBuZXcgU2V0KCk7XG4gICAgICAgIHRoaXMudHJpZ2dlcmVkX2V2ZW50cyA9IHt9O1xuICAgIH1cblxuICAgIHNldF90cmlnZ2VyZWRfZXZlbnQoZXZlbnQpIHtcbiAgICAgICAgdGhpcy50cmlnZ2VyZWRfZXZlbnRzW2V2ZW50LmlkXSA9IGV2ZW50O1xuICAgIH1cblxuICAgIHVuc2V0X3RyaWdnZXJlZF9ldmVudChldmVudCkge1xuICAgICAgICBkZWxldGUgdGhpcy50cmlnZ2VyZWRfZXZlbnRzW2V2ZW50LmlkXTtcbiAgICB9XG5cbiAgICBldmVudF90cmlnZ2VyZWQoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50LmlkIGluIHRoaXMudHJpZ2dlcmVkX2V2ZW50cztcbiAgICB9XG5cbiAgICBmaXJlX3RyaWdnZXJlZF9ldmVudHMoKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMudHJpZ2dlcmVkX2V2ZW50cykuZm9yRWFjaChpZCA9PiB7XG4gICAgICAgICAgICBjb25zdCB0aGlzX2V2ZW50ID0gdGhpcy50cmlnZ2VyZWRfZXZlbnRzW2lkXTtcbiAgICAgICAgICAgIGlmICh0aGlzX2V2ZW50LnR5cGUgPT09IGV2ZW50X3R5cGVzLlNQRUVEKSB7XG4gICAgICAgICAgICAgICAgdGhpc19ldmVudC51bnNldCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzX2V2ZW50LmZpcmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZmlyZV9ldmVudChjdXJyZW50X2V2ZW50LCB0aGlzX2FjdGl2YXRpb25fZGlyZWN0aW9uKSB7XG4gICAgICAgIGlmICh0aGlzLmhlcm8uY3VycmVudF9kaXJlY3Rpb24gIT09IHRoaXNfYWN0aXZhdGlvbl9kaXJlY3Rpb24pIHJldHVybjtcbiAgICAgICAgaWYgKGN1cnJlbnRfZXZlbnQudHlwZSA9PT0gZXZlbnRfdHlwZXMuQ0xJTUIgJiYgIXRoaXMuaGVyby5pZGxlX2NsaW1iaW5nKSB7XG4gICAgICAgICAgICBjdXJyZW50X2V2ZW50LmZpcmUodGhpc19hY3RpdmF0aW9uX2RpcmVjdGlvbik7XG4gICAgICAgIH0gZWxzZSBpZiAoW2V2ZW50X3R5cGVzLlRFTEVQT1JULCBldmVudF90eXBlcy5KVU1QLCBldmVudF90eXBlcy5TTElERVJdLmluY2x1ZGVzKGN1cnJlbnRfZXZlbnQudHlwZSkpIHtcbiAgICAgICAgICAgIGN1cnJlbnRfZXZlbnQuZmlyZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2hlY2tfdGlsZV9ldmVudHMoZXZlbnRfa2V5LCBtYXApIHtcbiAgICAgICAgbGV0IGV2ZW50X3F1ZXVlID0gbmV3IEV2ZW50UXVldWUoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXAuZXZlbnRzW2V2ZW50X2tleV0ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHRoaXNfZXZlbnQgPSBtYXAuZXZlbnRzW2V2ZW50X2tleV1baV07XG4gICAgICAgICAgICBpZiAoIXRoaXNfZXZlbnQuYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzLmluY2x1ZGVzKG1hcC5jb2xsaXNpb25fbGF5ZXIpKSBjb250aW51ZTtcbiAgICAgICAgICAgIGlmICh0aGlzX2V2ZW50LnR5cGUgPT09IGV2ZW50X3R5cGVzLkpVTVApIHtcbiAgICAgICAgICAgICAgICB0aGlzX2V2ZW50Lmp1bXBfbmVhcl9jb2xsaXNpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpc19ldmVudC5pc19hY3RpdmUodGhpcy5oZXJvLmN1cnJlbnRfZGlyZWN0aW9uKSkgY29udGludWU7XG4gICAgICAgICAgICBpZiAodGhpc19ldmVudC50eXBlID09PSBldmVudF90eXBlcy5TUEVFRCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmhlcm8uZXh0cmFfc3BlZWQgIT09IHRoaXNfZXZlbnQuc3BlZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRfcXVldWUuYWRkKHRoaXNfZXZlbnQsIHRoaXMuaGVyby5jdXJyZW50X2RpcmVjdGlvbiwgdGhpc19ldmVudC5maXJlLmJpbmQodGhpc19ldmVudCksIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpc19ldmVudC50eXBlID09PSBldmVudF90eXBlcy5URUxFUE9SVCAmJiAhdGhpc19ldmVudC5hZHZhbmNlX2VmZmVjdCkge1xuICAgICAgICAgICAgICAgIGV2ZW50X3F1ZXVlLmFkZChcbiAgICAgICAgICAgICAgICAgICAgdGhpc19ldmVudCxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oZXJvLmN1cnJlbnRfZGlyZWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmVfZXZlbnQuYmluZCh0aGlzLCB0aGlzX2V2ZW50LCB0aGlzLmhlcm8uY3VycmVudF9kaXJlY3Rpb24pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgW2V2ZW50X3R5cGVzLlNURVAsIGV2ZW50X3R5cGVzLkNPTExJU0lPTl0uaW5jbHVkZXModGhpc19ldmVudC50eXBlKSAmJlxuICAgICAgICAgICAgICAgICF0aGlzLmV2ZW50X3RyaWdnZXJlZCh0aGlzX2V2ZW50KVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgZXZlbnRfcXVldWUuYWRkKHRoaXNfZXZlbnQsIHRoaXMuaGVyby5jdXJyZW50X2RpcmVjdGlvbiwgdGhpc19ldmVudC5zZXQuYmluZCh0aGlzX2V2ZW50KSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJpZ2h0X2RpcmVjdGlvbiA9IHRoaXNfZXZlbnQuYWN0aXZhdGlvbl9kaXJlY3Rpb25zLmluY2x1ZGVzKHRoaXMuaGVyby5jdXJyZW50X2RpcmVjdGlvbik7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICByaWdodF9kaXJlY3Rpb24gJiZcbiAgICAgICAgICAgICAgICAgICAgW2Jhc2VfYWN0aW9ucy5XQUxLLCBiYXNlX2FjdGlvbnMuREFTSCwgYmFzZV9hY3Rpb25zLkNMSU1CXS5pbmNsdWRlcyhcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGVyby5jdXJyZW50X2FjdGlvbiBhcyBiYXNlX2FjdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5ldmVudF90aW1lcnNbdGhpc19ldmVudC5pZF0gJiYgIXRoaXMuZXZlbnRfdGltZXJzW3RoaXNfZXZlbnQuaWRdLnRpbWVyLmV4cGlyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50X3F1ZXVlLmFkZCh0aGlzX2V2ZW50LCB0aGlzLmhlcm8uY3VycmVudF9kaXJlY3Rpb24sICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRfdGltZXJzW3RoaXNfZXZlbnQuaWRdID0gdGhpcy5nYW1lLnRpbWUuZXZlbnRzLmFkZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaWxlRXZlbnRNYW5hZ2VyLkVWRU5UX0lOSVRfREVMQVksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJlX2V2ZW50LmJpbmQodGhpcywgdGhpc19ldmVudCwgdGhpcy5oZXJvLmN1cnJlbnRfZGlyZWN0aW9uKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGV2ZW50X3F1ZXVlLnByb2Nlc3NfcXVldWUoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQge2Jhc2VfYWN0aW9ucywgZGlyZWN0aW9ucywgaXNfY2xvc2UsIHJldmVyc2VfZGlyZWN0aW9uc30gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQge0RpYWxvZ01hbmFnZXJ9IGZyb20gXCIuLi91dGlscy9EaWFsb2dNYW5hZ2VyXCI7XG5pbXBvcnQge25wY190eXBlc30gZnJvbSBcIi4uL05QQ1wiO1xuaW1wb3J0IHtHb2xkZW5TdW59IGZyb20gXCIuLi9Hb2xkZW5TdW5cIjtcblxuZXhwb3J0IGVudW0gaW50ZXJhY3Rpb25fcGF0dGVybnMge1xuICAgIFRJS19UQUtfVE9FID0gXCJ0aWtfdGFrX3RvZVwiLFxuICAgIENST1NTID0gXCJjcm9zc1wiLFxufVxuXG5leHBvcnQgY2xhc3MgR2FtZUV2ZW50TWFuYWdlciB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOiBHb2xkZW5TdW47XG4gICAgcHVibGljIG9uX2V2ZW50OiBib29sZWFuO1xuICAgIHB1YmxpYyBjb250cm9sX2VuYWJsZTogYm9vbGVhbjtcbiAgICBwdWJsaWMgZmlyZV9uZXh0X3N0ZXA6IEZ1bmN0aW9uO1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSkge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLm9uX2V2ZW50ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY29udHJvbF9lbmFibGUgPSB0cnVlO1xuICAgICAgICB0aGlzLmZpcmVfbmV4dF9zdGVwID0gKCkgPT4ge307XG4gICAgICAgIHRoaXMuc2V0X2NvbnRyb2xzKCk7XG4gICAgfVxuXG4gICAgc2V0X2NvbnRyb2xzKCkge1xuICAgICAgICBsZXQgY29udHJvbHMgPSBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAga2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5BLFxuICAgICAgICAgICAgICAgIG9uX2Rvd246ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS5oZXJvLmluX2FjdGlvbigpIHx8IHRoaXMuZGF0YS5pbl9iYXR0bGUgfHwgIXRoaXMuY29udHJvbF9lbmFibGUpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub25fZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbF9lbmFibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZV9uZXh0X3N0ZXAoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VhcmNoX2Zvcl9ucGMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdO1xuXG4gICAgICAgIHRoaXMuZGF0YS5jb250cm9sX21hbmFnZXIuc2V0X2NvbnRyb2woY29udHJvbHMsIHtwZXJzaXN0OiB0cnVlfSk7XG4gICAgfVxuXG4gICAgc2VhcmNoX2Zvcl9ucGMoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhLm1hcC5ucGNzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBucGMgPSB0aGlzLmRhdGEubWFwLm5wY3NbaV07XG4gICAgICAgICAgICBpZiAobnBjLm5wY190eXBlID09PSBucGNfdHlwZXMuU1BSSVRFKSBjb250aW51ZTtcbiAgICAgICAgICAgIGNvbnN0IGlzX2Nsb3NlX2NoZWNrID0gaXNfY2xvc2UoXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uY3VycmVudF9kaXJlY3Rpb24sXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc3ByaXRlLngsXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc3ByaXRlLnksXG4gICAgICAgICAgICAgICAgbnBjLnNwcml0ZS54LFxuICAgICAgICAgICAgICAgIG5wYy5zcHJpdGUueSxcbiAgICAgICAgICAgICAgICBucGMudGFsa19yYW5nZV9mYWN0b3JcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoaXNfY2xvc2VfY2hlY2spIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zdG9wX2NoYXIoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9uX2V2ZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuZm9yY2Vfc3RvcF9tb3ZlbWVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9sX2VuYWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0X25wY19ldmVudChucGMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0X25wY19ldmVudChucGMpIHtcbiAgICAgICAgaWYgKG5wYy5ucGNfdHlwZSA9PT0gbnBjX3R5cGVzLk5PUk1BTCkge1xuICAgICAgICAgICAgaWYgKG5wYy5tZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYW5hZ2VfbnBjX2RpYWxvZyhucGMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmVfbnBjX2V2ZW50cyhucGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG5wYy5ucGNfdHlwZSA9PT0gbnBjX3R5cGVzLlNIT1ApIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5kYXRhLnNob3Bfb3Blbikge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0X25wY19hbmRfaGVyb19kaXJlY3Rpb25zKG5wYyk7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLnNob3BfbWVudS5vcGVuX21lbnUobnBjLnNob3Bfa2V5LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25fZXZlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNldF9ucGNfZGlyZWN0aW9uKG5wYyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5mb3JjZV9zdG9wX21vdmVtZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbF9lbmFibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0X25wY19hbmRfaGVyb19kaXJlY3Rpb25zKG5wYykge1xuICAgICAgICBjb25zdCBucGNfeCA9IG5wYy5zcHJpdGUueDtcbiAgICAgICAgY29uc3QgbnBjX3kgPSBucGMuc3ByaXRlLnk7XG4gICAgICAgIGNvbnN0IGludGVyYWN0aW9uX3BhdHRlcm4gPSB0aGlzLmRhdGEuZGJzLm5wY19kYltucGMua2V5X25hbWVdLmludGVyYWN0aW9uX3BhdHRlcm47XG4gICAgICAgIGNvbnN0IGludGVyYWN0aW9uX2RpcmVjdGlvbnMgPSBHYW1lRXZlbnRNYW5hZ2VyLmdldF9pbnRlcmFjdGlvbl9kaXJlY3Rpb25zKFxuICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc3ByaXRlLngsXG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zcHJpdGUueSxcbiAgICAgICAgICAgIG5wY194LFxuICAgICAgICAgICAgbnBjX3ksXG4gICAgICAgICAgICBpbnRlcmFjdGlvbl9wYXR0ZXJuLFxuICAgICAgICAgICAgbnBjLmJvZHlfcmFkaXVzXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZGF0YS5oZXJvLnNldF9kaXJlY3Rpb24oaW50ZXJhY3Rpb25fZGlyZWN0aW9ucy5oZXJvX2RpcmVjdGlvbik7XG4gICAgICAgIHRoaXMuZGF0YS5oZXJvLnBsYXkoYmFzZV9hY3Rpb25zLklETEUsIHJldmVyc2VfZGlyZWN0aW9uc1tpbnRlcmFjdGlvbl9kaXJlY3Rpb25zLmhlcm9fZGlyZWN0aW9uXSk7XG4gICAgICAgIG5wYy5wbGF5KGJhc2VfYWN0aW9ucy5JRExFLCByZXZlcnNlX2RpcmVjdGlvbnNbaW50ZXJhY3Rpb25fZGlyZWN0aW9ucy50YXJnZXRfZGlyZWN0aW9uXSk7XG4gICAgfVxuXG4gICAgcmVzZXRfbnBjX2RpcmVjdGlvbihucGMpIHtcbiAgICAgICAgY29uc3QgaW5pdGlhbF9hY3Rpb24gPSB0aGlzLmRhdGEuZGJzLm5wY19kYltucGMua2V5X25hbWVdLmluaXRpYWxfYWN0aW9uO1xuICAgICAgICBjb25zdCBpbml0aWFsX2RpcmVjdGlvbiA9IHRoaXMuZGF0YS5kYnMubnBjX2RiW25wYy5rZXlfbmFtZV0uYWN0aW9uc1tpbml0aWFsX2FjdGlvbl0uaW5pdGlhbF9kaXJlY3Rpb247XG4gICAgICAgIG5wYy5wbGF5KGluaXRpYWxfYWN0aW9uLCBpbml0aWFsX2RpcmVjdGlvbik7XG4gICAgfVxuXG4gICAgbWFuYWdlX25wY19kaWFsb2cobnBjKSB7XG4gICAgICAgIGNvbnN0IGRpYWxvZ19tYW5hZ2VyID0gbmV3IERpYWxvZ01hbmFnZXIodGhpcy5nYW1lLCB0aGlzLmRhdGEpO1xuICAgICAgICBkaWFsb2dfbWFuYWdlci5zZXRfZGlhbG9nKG5wYy5tZXNzYWdlLCBucGMuYXZhdGFyLCB0aGlzLmRhdGEuaGVyby5jdXJyZW50X2RpcmVjdGlvbik7XG4gICAgICAgIHRoaXMuc2V0X25wY19hbmRfaGVyb19kaXJlY3Rpb25zKG5wYyk7XG4gICAgICAgIHRoaXMuZmlyZV9uZXh0X3N0ZXAgPSBkaWFsb2dfbWFuYWdlci5uZXh0LmJpbmQoZGlhbG9nX21hbmFnZXIsIGZpbmlzaGVkID0+IHtcbiAgICAgICAgICAgIGlmIChmaW5pc2hlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMub25fZXZlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuZm9yY2Vfc3RvcF9tb3ZlbWVudCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMucmVzZXRfbnBjX2RpcmVjdGlvbihucGMpO1xuICAgICAgICAgICAgICAgIHRoaXMuZmlyZV9ucGNfZXZlbnRzKG5wYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xfZW5hYmxlID0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZmlyZV9uZXh0X3N0ZXAoKTtcbiAgICB9XG5cbiAgICBmaXJlX25wY19ldmVudHMobnBjKSB7XG4gICAgICAgIG5wYy5ldmVudHMuZm9yRWFjaChldmVudCA9PiB7XG4gICAgICAgICAgICBldmVudC5maXJlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRfaW50ZXJhY3Rpb25fZGlyZWN0aW9ucyhoZXJvX3gsIGhlcm9feSwgdGFyZ2V0X3gsIHRhcmdldF95LCBpbnRlcmFjdGlvbl9wYXR0ZXJuLCB0YXJnZXRfYm9keV9yYWRpdXMpIHtcbiAgICAgICAgbGV0IHRhcmdldF9kaXJlY3Rpb247XG4gICAgICAgIGlmIChpbnRlcmFjdGlvbl9wYXR0ZXJuID09PSBpbnRlcmFjdGlvbl9wYXR0ZXJucy5DUk9TUykge1xuICAgICAgICAgICAgbGV0IHBvc2l0aXZlX2xpbWl0ID0gaGVyb194ICsgKC10YXJnZXRfeSAtIHRhcmdldF94KTtcbiAgICAgICAgICAgIGxldCBuZWdhdGl2ZV9saW1pdCA9IC1oZXJvX3ggKyAoLXRhcmdldF95ICsgdGFyZ2V0X3gpO1xuICAgICAgICAgICAgaWYgKC1oZXJvX3kgPj0gcG9zaXRpdmVfbGltaXQgJiYgLWhlcm9feSA+PSBuZWdhdGl2ZV9saW1pdCkge1xuICAgICAgICAgICAgICAgIHRhcmdldF9kaXJlY3Rpb24gPSBkaXJlY3Rpb25zLnVwO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgtaGVyb195IDw9IHBvc2l0aXZlX2xpbWl0ICYmIC1oZXJvX3kgPj0gbmVnYXRpdmVfbGltaXQpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRfZGlyZWN0aW9uID0gZGlyZWN0aW9ucy5yaWdodDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoLWhlcm9feSA8PSBwb3NpdGl2ZV9saW1pdCAmJiAtaGVyb195IDw9IG5lZ2F0aXZlX2xpbWl0KSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0X2RpcmVjdGlvbiA9IGRpcmVjdGlvbnMuZG93bjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoLWhlcm9feSA+PSBwb3NpdGl2ZV9saW1pdCAmJiAtaGVyb195IDw9IG5lZ2F0aXZlX2xpbWl0KSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0X2RpcmVjdGlvbiA9IGRpcmVjdGlvbnMubGVmdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZXJvX2RpcmVjdGlvbjtcbiAgICAgICAgaWYgKGhlcm9feCA8PSB0YXJnZXRfeCAtIHRhcmdldF9ib2R5X3JhZGl1cyAmJiBoZXJvX3kgPj0gdGFyZ2V0X3kgKyB0YXJnZXRfYm9keV9yYWRpdXMpIHtcbiAgICAgICAgICAgIGhlcm9fZGlyZWN0aW9uID0gZGlyZWN0aW9ucy51cF9yaWdodDtcbiAgICAgICAgICAgIHRhcmdldF9kaXJlY3Rpb24gPVxuICAgICAgICAgICAgICAgIGludGVyYWN0aW9uX3BhdHRlcm4gPT09IGludGVyYWN0aW9uX3BhdHRlcm5zLlRJS19UQUtfVE9FID8gZGlyZWN0aW9ucy5kb3duX2xlZnQgOiB0YXJnZXRfZGlyZWN0aW9uO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgaGVyb194IDw9IHRhcmdldF94IC0gdGFyZ2V0X2JvZHlfcmFkaXVzICYmXG4gICAgICAgICAgICBoZXJvX3kgPj0gdGFyZ2V0X3kgLSB0YXJnZXRfYm9keV9yYWRpdXMgJiZcbiAgICAgICAgICAgIGhlcm9feSA8PSB0YXJnZXRfeSArIHRhcmdldF9ib2R5X3JhZGl1c1xuICAgICAgICApIHtcbiAgICAgICAgICAgIGhlcm9fZGlyZWN0aW9uID0gZGlyZWN0aW9ucy5yaWdodDtcbiAgICAgICAgICAgIHRhcmdldF9kaXJlY3Rpb24gPVxuICAgICAgICAgICAgICAgIGludGVyYWN0aW9uX3BhdHRlcm4gPT09IGludGVyYWN0aW9uX3BhdHRlcm5zLlRJS19UQUtfVE9FID8gZGlyZWN0aW9ucy5sZWZ0IDogdGFyZ2V0X2RpcmVjdGlvbjtcbiAgICAgICAgfSBlbHNlIGlmIChoZXJvX3ggPD0gdGFyZ2V0X3ggLSB0YXJnZXRfYm9keV9yYWRpdXMgJiYgaGVyb195IDw9IHRhcmdldF95IC0gdGFyZ2V0X2JvZHlfcmFkaXVzKSB7XG4gICAgICAgICAgICBoZXJvX2RpcmVjdGlvbiA9IGRpcmVjdGlvbnMuZG93bl9yaWdodDtcbiAgICAgICAgICAgIHRhcmdldF9kaXJlY3Rpb24gPVxuICAgICAgICAgICAgICAgIGludGVyYWN0aW9uX3BhdHRlcm4gPT09IGludGVyYWN0aW9uX3BhdHRlcm5zLlRJS19UQUtfVE9FID8gZGlyZWN0aW9ucy51cF9sZWZ0IDogdGFyZ2V0X2RpcmVjdGlvbjtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIGhlcm9feCA+PSB0YXJnZXRfeCAtIHRhcmdldF9ib2R5X3JhZGl1cyAmJlxuICAgICAgICAgICAgaGVyb194IDw9IHRhcmdldF94ICsgdGFyZ2V0X2JvZHlfcmFkaXVzICYmXG4gICAgICAgICAgICBoZXJvX3kgPD0gdGFyZ2V0X3kgLSB0YXJnZXRfYm9keV9yYWRpdXNcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBoZXJvX2RpcmVjdGlvbiA9IGRpcmVjdGlvbnMuZG93bjtcbiAgICAgICAgICAgIHRhcmdldF9kaXJlY3Rpb24gPVxuICAgICAgICAgICAgICAgIGludGVyYWN0aW9uX3BhdHRlcm4gPT09IGludGVyYWN0aW9uX3BhdHRlcm5zLlRJS19UQUtfVE9FID8gZGlyZWN0aW9ucy51cCA6IHRhcmdldF9kaXJlY3Rpb247XG4gICAgICAgIH0gZWxzZSBpZiAoaGVyb194ID49IHRhcmdldF94ICsgdGFyZ2V0X2JvZHlfcmFkaXVzICYmIGhlcm9feSA8PSB0YXJnZXRfeSAtIHRhcmdldF9ib2R5X3JhZGl1cykge1xuICAgICAgICAgICAgaGVyb19kaXJlY3Rpb24gPSBkaXJlY3Rpb25zLmRvd25fbGVmdDtcbiAgICAgICAgICAgIHRhcmdldF9kaXJlY3Rpb24gPVxuICAgICAgICAgICAgICAgIGludGVyYWN0aW9uX3BhdHRlcm4gPT09IGludGVyYWN0aW9uX3BhdHRlcm5zLlRJS19UQUtfVE9FID8gZGlyZWN0aW9ucy51cF9yaWdodCA6IHRhcmdldF9kaXJlY3Rpb247XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICBoZXJvX3ggPj0gdGFyZ2V0X3ggKyB0YXJnZXRfYm9keV9yYWRpdXMgJiZcbiAgICAgICAgICAgIGhlcm9feSA+PSB0YXJnZXRfeSAtIHRhcmdldF9ib2R5X3JhZGl1cyAmJlxuICAgICAgICAgICAgaGVyb195IDw9IHRhcmdldF95ICsgdGFyZ2V0X2JvZHlfcmFkaXVzXG4gICAgICAgICkge1xuICAgICAgICAgICAgaGVyb19kaXJlY3Rpb24gPSBkaXJlY3Rpb25zLmxlZnQ7XG4gICAgICAgICAgICB0YXJnZXRfZGlyZWN0aW9uID1cbiAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbl9wYXR0ZXJuID09PSBpbnRlcmFjdGlvbl9wYXR0ZXJucy5USUtfVEFLX1RPRSA/IGRpcmVjdGlvbnMucmlnaHQgOiB0YXJnZXRfZGlyZWN0aW9uO1xuICAgICAgICB9IGVsc2UgaWYgKGhlcm9feCA+PSB0YXJnZXRfeCArIHRhcmdldF9ib2R5X3JhZGl1cyAmJiBoZXJvX3kgPj0gdGFyZ2V0X3kgKyB0YXJnZXRfYm9keV9yYWRpdXMpIHtcbiAgICAgICAgICAgIGhlcm9fZGlyZWN0aW9uID0gZGlyZWN0aW9ucy51cF9sZWZ0O1xuICAgICAgICAgICAgdGFyZ2V0X2RpcmVjdGlvbiA9XG4gICAgICAgICAgICAgICAgaW50ZXJhY3Rpb25fcGF0dGVybiA9PT0gaW50ZXJhY3Rpb25fcGF0dGVybnMuVElLX1RBS19UT0UgPyBkaXJlY3Rpb25zLmRvd25fcmlnaHQgOiB0YXJnZXRfZGlyZWN0aW9uO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgaGVyb194ID49IHRhcmdldF94IC0gdGFyZ2V0X2JvZHlfcmFkaXVzICYmXG4gICAgICAgICAgICBoZXJvX3ggPD0gdGFyZ2V0X3ggKyB0YXJnZXRfYm9keV9yYWRpdXMgJiZcbiAgICAgICAgICAgIGhlcm9feSA+PSB0YXJnZXRfeSArIHRhcmdldF9ib2R5X3JhZGl1c1xuICAgICAgICApIHtcbiAgICAgICAgICAgIGhlcm9fZGlyZWN0aW9uID0gZGlyZWN0aW9ucy51cDtcbiAgICAgICAgICAgIHRhcmdldF9kaXJlY3Rpb24gPVxuICAgICAgICAgICAgICAgIGludGVyYWN0aW9uX3BhdHRlcm4gPT09IGludGVyYWN0aW9uX3BhdHRlcm5zLlRJS19UQUtfVE9FID8gZGlyZWN0aW9ucy5kb3duIDogdGFyZ2V0X2RpcmVjdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7aGVyb19kaXJlY3Rpb246IGhlcm9fZGlyZWN0aW9uLCB0YXJnZXRfZGlyZWN0aW9uOiB0YXJnZXRfZGlyZWN0aW9ufTtcbiAgICB9XG59XG4iLCJpbXBvcnQge0JhdHRsZX0gZnJvbSBcIi4uL2JhdHRsZS9CYXR0bGVcIjtcbmltcG9ydCB7R2FtZUV2ZW50LCBldmVudF90eXBlc30gZnJvbSBcIi4vR2FtZUV2ZW50XCI7XG5cbmV4cG9ydCBjbGFzcyBCYXR0bGVFdmVudCBleHRlbmRzIEdhbWVFdmVudCB7XG4gICAgcHVibGljIGJhY2tncm91bmRfa2V5OiBzdHJpbmc7XG4gICAgcHVibGljIGVuZW15X3BhcnR5X2tleTogc3RyaW5nO1xuICAgIHB1YmxpYyBiYXR0bGU6IEJhdHRsZTtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEsIGJhY2tncm91bmRfa2V5LCBlbmVteV9wYXJ0eV9rZXkpIHtcbiAgICAgICAgc3VwZXIoZ2FtZSwgZGF0YSwgZXZlbnRfdHlwZXMuQkFUVExFKTtcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kX2tleSA9IGJhY2tncm91bmRfa2V5O1xuICAgICAgICB0aGlzLmVuZW15X3BhcnR5X2tleSA9IGVuZW15X3BhcnR5X2tleTtcbiAgICB9XG5cbiAgICBmaXJlKCkge1xuICAgICAgICB0aGlzLmRhdGEuaGVyby5zdG9wX2NoYXIodHJ1ZSk7XG4gICAgICAgIHRoaXMuYmF0dGxlID0gbmV3IEJhdHRsZSh0aGlzLmdhbWUsIHRoaXMuZGF0YSwgdGhpcy5iYWNrZ3JvdW5kX2tleSwgdGhpcy5lbmVteV9wYXJ0eV9rZXkpO1xuICAgICAgICB0aGlzLmJhdHRsZS5zdGFydF9iYXR0bGUoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gXCIuLi9tYWdpY19udW1iZXJzXCI7XG5pbXBvcnQge2FiaWxpdHlfbXNnX3R5cGVzfSBmcm9tIFwiLi4vQWJpbGl0eVwiO1xuaW1wb3J0IHtlZmZlY3RfbmFtZXMsIGVmZmVjdF90eXBlc30gZnJvbSBcIi4uL0VmZmVjdFwiO1xuaW1wb3J0IHtlbGVtZW50X25hbWVzfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCB7bWFpbl9zdGF0cywgb25fcmVtb3ZlX3N0YXR1c19tc2d9IGZyb20gXCIuLi9QbGF5ZXJcIjtcblxuY29uc3QgTE9HX1ggPSAzO1xuY29uc3QgTE9HX09VVF9ZID0gMTI3O1xuY29uc3QgTE9HXzFfWSA9IDEzOTtcbmNvbnN0IExPR18yX1kgPSAxNTE7XG5jb25zdCBBTklNX0RVUkFUSU9OID0gNTA7XG5cbmV4cG9ydCBjbGFzcyBCYXR0bGVMb2cge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgeDogbnVtYmVyO1xuICAgIHB1YmxpYyB5OiBudW1iZXI7XG4gICAgcHVibGljIGxvZ3M6IFBoYXNlci5CaXRtYXBUZXh0W107XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMueCA9IGdhbWUuY2FtZXJhLng7XG4gICAgICAgIHRoaXMueSA9IGdhbWUuY2FtZXJhLnk7XG4gICAgICAgIHRoaXMubG9ncyA9IFtdO1xuICAgICAgICB0aGlzLmxvZ3MucHVzaCh0aGlzLmNyZWF0ZSh0aGlzLnkgKyBMT0dfMV9ZKSk7XG4gICAgICAgIHRoaXMubG9ncy5wdXNoKHRoaXMuY3JlYXRlKHRoaXMueSArIExPR18yX1kpKTtcbiAgICB9XG5cbiAgICBjcmVhdGUoeV9wb3MpIHtcbiAgICAgICAgY29uc3QgbG9nX3RleHQgPSB0aGlzLmdhbWUuYWRkLmJpdG1hcFRleHQodGhpcy54ICsgTE9HX1gsIHlfcG9zLCBcImdzLWJtcC1mb250XCIsIFwiXCIsIG51bWJlcnMuRk9OVF9TSVpFKTtcbiAgICAgICAgbG9nX3RleHQudGludCA9IG51bWJlcnMuREVGQVVMVF9GT05UX0NPTE9SO1xuICAgICAgICBsb2dfdGV4dC5zbW9vdGhlZCA9IGZhbHNlO1xuICAgICAgICBsb2dfdGV4dC5hdXRvUm91bmQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gbG9nX3RleHQ7XG4gICAgfVxuXG4gICAgYWRkKHRleHQpIHtcbiAgICAgICAgbGV0IHJlc29sdmVfYW5pbTtcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZV9hbmltID0gcmVzb2x2ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0aGlzLmxvZ3NbMF0udGV4dCA9PT0gXCJcIikge1xuICAgICAgICAgICAgdGhpcy5sb2dzWzBdLnNldFRleHQodGV4dCk7XG4gICAgICAgICAgICB0aGlzLmxvZ3NbMV0uc2V0VGV4dChcIlwiKTtcbiAgICAgICAgICAgIHJlc29sdmVfYW5pbSgpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMubG9nc1sxXS50ZXh0ID09PSBcIlwiKSB7XG4gICAgICAgICAgICB0aGlzLmxvZ3NbMV0uc2V0VGV4dCh0ZXh0KTtcbiAgICAgICAgICAgIHJlc29sdmVfYW5pbSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLmxvZ3NbMF0pLnRvKFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgeTogdGhpcy55ICsgTE9HX09VVF9ZLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgQU5JTV9EVVJBVElPTixcbiAgICAgICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLFxuICAgICAgICAgICAgICAgIHRydWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLmdhbWUuYWRkXG4gICAgICAgICAgICAgICAgLnR3ZWVuKHRoaXMubG9nc1sxXSlcbiAgICAgICAgICAgICAgICAudG8oXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IHRoaXMueSArIExPR18xX1ksXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIEFOSU1fRFVSQVRJT04sXG4gICAgICAgICAgICAgICAgICAgIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsXG4gICAgICAgICAgICAgICAgICAgIHRydWVcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nc1swXS55ID0gdGhpcy55ICsgTE9HXzJfWTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dzWzBdLnNldFRleHQodGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9ncy5yZXZlcnNlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVfYW5pbSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cblxuICAgIGFzeW5jIGFkZF9hYmlsaXR5KGNhc3RlciwgYWJpbGl0eSwgaXRlbV9uYW1lLCBkamlubl9uYW1lLCBmb3JjZV91c2UgPSBmYWxzZSkge1xuICAgICAgICBjb25zdCBtc2dfdHlwZSA9IGZvcmNlX3VzZSA/IGFiaWxpdHlfbXNnX3R5cGVzLlVTRSA6IGFiaWxpdHkubXNnX3R5cGU7XG4gICAgICAgIHN3aXRjaCAobXNnX3R5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgYWJpbGl0eV9tc2dfdHlwZXMuQVRUQUNLOlxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYWRkKGAke2Nhc3Rlci5uYW1lfSBhdHRhY2tzIWApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBhYmlsaXR5X21zZ190eXBlcy5DQVNUOlxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYWRkKGAke2Nhc3Rlci5uYW1lfSBjYXN0cyAke2FiaWxpdHkubmFtZX0hYCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGFiaWxpdHlfbXNnX3R5cGVzLlVOTEVBU0g6XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hZGQoYCR7Y2FzdGVyLm5hbWV9IHVubGVhc2hlcyAke2FiaWxpdHkubmFtZX0hYCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGFiaWxpdHlfbXNnX3R5cGVzLlNVTU1PTjpcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFkZChgJHtjYXN0ZXIubmFtZX0gc3VtbW9ucyAke2FiaWxpdHkubmFtZX0hYCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGFiaWxpdHlfbXNnX3R5cGVzLlVTRTpcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFkZChgJHtjYXN0ZXIubmFtZX0gdXNlcyAke2l0ZW1fbmFtZSA/IGl0ZW1fbmFtZSA6IGFiaWxpdHkubmFtZX0hYCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGFiaWxpdHlfbXNnX3R5cGVzLkRFRkVORDpcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFkZChgJHtjYXN0ZXIubmFtZX0gaXMgZGVmZW5kaW5nIWApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBhYmlsaXR5X21zZ190eXBlcy5JVEVNX1VOTEVBU0g6XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hZGQoYCR7Y2FzdGVyLm5hbWV9J3MgJHtpdGVtX25hbWV9YCk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hZGQoYGxldHMgb3V0IGEgaG93bCEgJHthYmlsaXR5Lm5hbWV9IWApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBhYmlsaXR5X21zZ190eXBlcy5TRVRfREpJTk46XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hZGQoYCR7ZGppbm5fbmFtZX0gaXMgc2V0IHRvICR7Y2FzdGVyLm5hbWV9IWApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgYWRkX3JlY292ZXJfZWZmZWN0KGVmZmVjdCkge1xuICAgICAgICBjb25zdCBwbGF5ZXIgPSBlZmZlY3QuY2hhcjtcbiAgICAgICAgc3dpdGNoIChlZmZlY3QudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuTUFYX0hQOlxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuTUFYX1BQOlxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuQVRUQUNLOlxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuREVGRU5TRTpcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkFHSUxJVFk6XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5MVUNLOlxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYWRkKGAke3BsYXllci5uYW1lfSdzICR7ZWZmZWN0X25hbWVzW2VmZmVjdC50eXBlXX0gcmV0dXJucyB0byBub3JtYWwhYCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5QT1dFUjpcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLlJFU0lTVDpcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFkZChcbiAgICAgICAgICAgICAgICAgICAgYCR7cGxheWVyLm5hbWV9J3MgJHtlbGVtZW50X25hbWVzW2VmZmVjdC5hdHRyaWJ1dGVdfSAke1xuICAgICAgICAgICAgICAgICAgICAgICAgZWZmZWN0X25hbWVzW2VmZmVjdC50eXBlXVxuICAgICAgICAgICAgICAgICAgICB9IHJldHVybnMgdG8gbm9ybWFsIWBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuVEVNUE9SQVJZX1NUQVRVUzpcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLlBFUk1BTkVOVF9TVEFUVVM6XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hZGQob25fcmVtb3ZlX3N0YXR1c19tc2dbZWZmZWN0LnN0YXR1c19rZXlfbmFtZV0ocGxheWVyKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBhZGRfZGFtYWdlKGRhbWFnZSwgdGFyZ2V0LCBwcF9kYW1hZ2UgPSBmYWxzZSkge1xuICAgICAgICBjb25zdCBzdGF0X3N0ciA9IHBwX2RhbWFnZSA/IFwiUFBcIiA6IFwiSFBcIjtcbiAgICAgICAgY29uc3QgY3VycmVudF9wcm9wZXJ0eSA9IHBwX2RhbWFnZSA/IG1haW5fc3RhdHMuQ1VSUkVOVF9QUCA6IG1haW5fc3RhdHMuQ1VSUkVOVF9IUDtcbiAgICAgICAgY29uc3QgbWF4X3Byb3BlcnR5ID0gcHBfZGFtYWdlID8gbWFpbl9zdGF0cy5NQVhfUFAgOiBtYWluX3N0YXRzLk1BWF9IUDtcbiAgICAgICAgaWYgKGRhbWFnZSA+PSAwKSB7XG4gICAgICAgICAgICBpZiAodGFyZ2V0W2N1cnJlbnRfcHJvcGVydHldIC0gZGFtYWdlIDwgMCkge1xuICAgICAgICAgICAgICAgIGRhbWFnZSA9IHRhcmdldFtjdXJyZW50X3Byb3BlcnR5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYWRkKGAke3RhcmdldC5uYW1lfSB0YWtlcyAke2RhbWFnZS50b1N0cmluZygpfSBkYW1hZ2UhYCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGFyZ2V0W2N1cnJlbnRfcHJvcGVydHldID49IHRhcmdldFttYXhfcHJvcGVydHldKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hZGQoYCR7dGFyZ2V0Lm5hbWV9J3MgJHtzdGF0X3N0cn0gaXMgZnVsbHkgcmVzdG9yZWRgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hZGQoYCR7dGFyZ2V0Lm5hbWV9IHJlY292ZXJzICR7TWF0aC5hYnMoZGFtYWdlKS50b1N0cmluZygpfSAke3N0YXRfc3RyfSFgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLmxvZ3NbMF0uc2V0VGV4dChcIlwiKTtcbiAgICAgICAgdGhpcy5sb2dzWzFdLnNldFRleHQoXCJcIik7XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5sb2dzWzBdLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5sb2dzWzFdLmRlc3Ryb3koKTtcbiAgICB9XG59XG4iLCJpbXBvcnQge0NoYXJzU3RhdHVzV2luZG93fSBmcm9tIFwiLi4vd2luZG93cy9DaGFyc1N0YXR1c1dpbmRvd1wiO1xuaW1wb3J0IHtjYXBpdGFsaXplLCBvcmRlcmVkX2VsZW1lbnRzfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSBcIi4uL21hZ2ljX251bWJlcnNcIjtcbmltcG9ydCB7RGppbm4sIGRqaW5uX3N0YXR1c30gZnJvbSBcIi4uL0RqaW5uXCI7XG5pbXBvcnQge0JhdHRsZURlc2NyaXB0aW9uV2luZG93fSBmcm9tIFwiLi4vd2luZG93cy9iYXR0bGUvQmF0dGxlRGVzY3JpcHRpb25XaW5kb3dcIjtcbmltcG9ydCB7QmF0dGxlUHN5bmVyZ3lXaW5kb3d9IGZyb20gXCIuLi93aW5kb3dzL2JhdHRsZS9CYXR0bGVQc3luZXJneVdpbmRvd1wiO1xuaW1wb3J0IHtCYXR0bGVEamlubldpbmRvd30gZnJvbSBcIi4uL3dpbmRvd3MvYmF0dGxlL0JhdHRsZURqaW5uV2luZG93XCI7XG5pbXBvcnQge0JhdHRsZUl0ZW1XaW5kb3d9IGZyb20gXCIuLi93aW5kb3dzL2JhdHRsZS9CYXR0bGVJdGVtV2luZG93XCI7XG5pbXBvcnQge0JhdHRsZVN1bW1vbldpbmRvd30gZnJvbSBcIi4uL3dpbmRvd3MvYmF0dGxlL0JhdHRsZVN1bW1vbldpbmRvd1wiO1xuaW1wb3J0IHtCYXR0bGV9IGZyb20gXCIuLi9iYXR0bGUvQmF0dGxlXCI7XG5pbXBvcnQge3Blcm1hbmVudF9zdGF0dXN9IGZyb20gXCIuLi9QbGF5ZXJcIjtcbmltcG9ydCB7SXRlbVNsb3QsIE1haW5DaGFyfSBmcm9tIFwiLi4vTWFpbkNoYXJcIjtcbmltcG9ydCB7R29sZGVuU3VufSBmcm9tIFwiLi4vR29sZGVuU3VuXCI7XG5pbXBvcnQgKiBhcyBfIGZyb20gXCJsb2Rhc2hcIjtcbmltcG9ydCB7RW5lbXl9IGZyb20gXCIuLi9FbmVteVwiO1xuaW1wb3J0IHtIb3Jpem9udGFsTWVudX0gZnJvbSBcIi4uL3N1cHBvcnRfbWVudXMvSG9yaXpvbnRhbE1lbnVcIjtcbmltcG9ydCB7VGFyZ2V0fSBmcm9tIFwiLi4vYmF0dGxlL0JhdHRsZVN0YWdlXCI7XG5pbXBvcnQge0JhdHRsZVN0YXR1c1dpbmRvd30gZnJvbSBcIi4uL3dpbmRvd3MvYmF0dGxlL0JhdHRsZVN0YXR1c1dpbmRvd1wiO1xuaW1wb3J0IHthYmlsaXR5X2NhdGVnb3JpZXN9IGZyb20gXCIuLi9BYmlsaXR5XCI7XG5cbmNvbnN0IFNUQVJUX1RJVExFX1dJTkRPV19XSURUSCA9IDc2O1xuY29uc3QgSU5ORVJfVElUTEVfV0lORE9XX1dJRFRIID0gNjA7XG5cbmNvbnN0IEZPUldBUkQgPSAxO1xuY29uc3QgQkFDS1dBUkQgPSAtMTtcblxuZXhwb3J0IHR5cGUgUGxheWVyQWJpbGl0eSA9IHtcbiAgICBrZXlfbmFtZTogc3RyaW5nO1xuICAgIHRhcmdldHM6IFRhcmdldFtdO1xuICAgIGRqaW5uX2tleV9uYW1lPzogc3RyaW5nO1xuICAgIHNwZWVkPzogbnVtYmVyO1xuICAgIGNhc3Rlcj86IEVuZW15IHwgTWFpbkNoYXI7XG4gICAgYmF0dGxlX2FuaW1hdGlvbl9rZXk/OiBzdHJpbmc7XG4gICAgaXRlbV9zbG90PzogSXRlbVNsb3Q7XG59O1xuXG5leHBvcnQgdHlwZSBQbGF5ZXJBYmlsaXRpZXMgPSB7W2NoYXJfa2V5X25hbWU6IHN0cmluZ106IFBsYXllckFiaWxpdHlbXX07XG5cbmV4cG9ydCBjbGFzcyBNYWluQmF0dGxlTWVudSB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOiBHb2xkZW5TdW47XG4gICAgcHVibGljIG9uX2FiaWxpdGllc19jaG9vc2U6IEZ1bmN0aW9uO1xuICAgIHB1YmxpYyBjaG9vc2VfdGFyZ2V0czogRnVuY3Rpb247XG5cbiAgICBwdWJsaWMgc3RhcnRfYnV0dG9uc19rZXlzOiBzdHJpbmdbXTtcbiAgICBwdWJsaWMgc3RhcnRfaG9yaXpvbnRhbF9tZW51OiBIb3Jpem9udGFsTWVudTtcblxuICAgIHB1YmxpYyBpbm5lcl9idXR0b25zX2tleXM6IHN0cmluZ1tdO1xuICAgIHB1YmxpYyBpbm5lcl9ob3Jpem9udGFsX21lbnU6IEhvcml6b250YWxNZW51O1xuXG4gICAgcHVibGljIGNoYXJzX3N0YXR1c193aW5kb3c6IENoYXJzU3RhdHVzV2luZG93O1xuICAgIHB1YmxpYyBkZXNjcmlwdGlvbl93aW5kb3c6IEJhdHRsZURlc2NyaXB0aW9uV2luZG93O1xuICAgIHB1YmxpYyBkamlubl93aW5kb3c6IEJhdHRsZURqaW5uV2luZG93O1xuICAgIHB1YmxpYyBwc3luZXJneV93aW5kb3c6IEJhdHRsZVBzeW5lcmd5V2luZG93O1xuICAgIHB1YmxpYyBpdGVtX3dpbmRvdzogQmF0dGxlSXRlbVdpbmRvdztcbiAgICBwdWJsaWMgc3VtbW9uX3dpbmRvdzogQmF0dGxlU3VtbW9uV2luZG93O1xuICAgIHB1YmxpYyBzdGF0dXNfd2luZG93OiBCYXR0bGVTdGF0dXNXaW5kb3c7XG5cbiAgICBwdWJsaWMgZ3JvdXA6IFBoYXNlci5Hcm91cDtcbiAgICBwdWJsaWMgYXZhdGFyX3Nwcml0ZTogUGhhc2VyLlNwcml0ZTtcblxuICAgIHB1YmxpYyBhYmlsaXRpZXM6IFBsYXllckFiaWxpdGllcztcbiAgICBwdWJsaWMgY3VycmVudF9jaGFyX2luZGV4OiBudW1iZXI7XG4gICAgcHVibGljIGN1cnJlbnRfYnV0dG9uczogc3RyaW5nW107XG4gICAgcHVibGljIGRqaW5uaV9hbHJlYWR5X3VzZWQ6IHtbZWxlbWVudDogc3RyaW5nXTogbnVtYmVyfTtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWU6IFBoYXNlci5HYW1lLCBkYXRhOiBHb2xkZW5TdW4sIG9uX2FiaWxpdGllc19jaG9vc2U6IEZ1bmN0aW9uLCBjaG9vc2VfdGFyZ2V0czogRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5vbl9hYmlsaXRpZXNfY2hvb3NlID0gb25fYWJpbGl0aWVzX2Nob29zZTtcbiAgICAgICAgdGhpcy5jaG9vc2VfdGFyZ2V0cyA9IGNob29zZV90YXJnZXRzO1xuXG4gICAgICAgIHRoaXMuc3RhcnRfYnV0dG9uc19rZXlzID0gW1wiZmlnaHRcIiwgXCJmbGVlXCIsIFwic3RhdHVzXCJdO1xuICAgICAgICB0aGlzLnN0YXJ0X2hvcml6b250YWxfbWVudSA9IG5ldyBIb3Jpem9udGFsTWVudShcbiAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgIHRoaXMuZGF0YSxcbiAgICAgICAgICAgIHRoaXMuc3RhcnRfYnV0dG9uc19rZXlzLFxuICAgICAgICAgICAgdGhpcy5zdGFydF9idXR0b25zX2tleXMubWFwKGIgPT4gY2FwaXRhbGl6ZShiKSksXG4gICAgICAgICAgICB7b25fcHJlc3M6IHRoaXMuc3RhcnRfYnV0dG9uX3ByZXNzLmJpbmQodGhpcyl9LFxuICAgICAgICAgICAgU1RBUlRfVElUTEVfV0lORE9XX1dJRFRILFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuaW5uZXJfYnV0dG9uc19rZXlzID0gW1wiYXR0YWNrXCIsIFwicHN5bmVyZ3lcIiwgXCJkamlubmlcIiwgXCJzdW1tb25cIiwgXCJpdGVtXCIsIFwiZGVmZW5kXCJdO1xuICAgICAgICB0aGlzLmlubmVyX2hvcml6b250YWxfbWVudSA9IG5ldyBIb3Jpem9udGFsTWVudShcbiAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgIHRoaXMuZGF0YSxcbiAgICAgICAgICAgIHRoaXMuaW5uZXJfYnV0dG9uc19rZXlzLFxuICAgICAgICAgICAgdGhpcy5pbm5lcl9idXR0b25zX2tleXMubWFwKGIgPT4gY2FwaXRhbGl6ZShiKSksXG4gICAgICAgICAgICB7b25fcHJlc3M6IHRoaXMuaW5uZXJfYnV0dG9uX3ByZXNzLmJpbmQodGhpcyksIG9uX2NhbmNlbDogdGhpcy5pbm5lcl9tZW51X2NhbmNlbC5iaW5kKHRoaXMpfSxcbiAgICAgICAgICAgIElOTkVSX1RJVExFX1dJTkRPV19XSURUSCxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmNoYXJzX3N0YXR1c193aW5kb3cgPSBuZXcgQ2hhcnNTdGF0dXNXaW5kb3codGhpcy5nYW1lLCB0aGlzLmRhdGEsIHRydWUsIHRydWUpO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uX3dpbmRvdyA9IG5ldyBCYXR0bGVEZXNjcmlwdGlvbldpbmRvdyh0aGlzLmdhbWUpO1xuICAgICAgICB0aGlzLmRqaW5uX3dpbmRvdyA9IG5ldyBCYXR0bGVEamlubldpbmRvdyh0aGlzLmdhbWUsIHRoaXMuZGF0YSk7XG4gICAgICAgIHRoaXMucHN5bmVyZ3lfd2luZG93ID0gbmV3IEJhdHRsZVBzeW5lcmd5V2luZG93KHRoaXMuZ2FtZSwgdGhpcy5kYXRhKTtcbiAgICAgICAgdGhpcy5pdGVtX3dpbmRvdyA9IG5ldyBCYXR0bGVJdGVtV2luZG93KHRoaXMuZ2FtZSwgdGhpcy5kYXRhKTtcbiAgICAgICAgdGhpcy5zdW1tb25fd2luZG93ID0gbmV3IEJhdHRsZVN1bW1vbldpbmRvdyh0aGlzLmdhbWUsIHRoaXMuZGF0YSk7XG4gICAgICAgIHRoaXMuc3RhdHVzX3dpbmRvdyA9IG5ldyBCYXR0bGVTdGF0dXNXaW5kb3codGhpcy5nYW1lLCB0aGlzLmRhdGEpO1xuXG4gICAgICAgIHRoaXMuZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XG4gICAgICAgIHRoaXMuYXZhdGFyX3Nwcml0ZSA9IHRoaXMuZ3JvdXAuY3JlYXRlKDAsIG51bWJlcnMuR0FNRV9IRUlHSFQgLSBudW1iZXJzLkFWQVRBUl9TSVpFKTtcbiAgICAgICAgdGhpcy5hdmF0YXJfc3ByaXRlLmFscGhhID0gMDtcbiAgICB9XG5cbiAgICBzdGFydF9idXR0b25fcHJlc3MoKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5zdGFydF9idXR0b25zX2tleXNbdGhpcy5zdGFydF9ob3Jpem9udGFsX21lbnUuc2VsZWN0ZWRfYnV0dG9uX2luZGV4XSkge1xuICAgICAgICAgICAgY2FzZSBcImZpZ2h0XCI6XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydF9ob3Jpem9udGFsX21lbnUuY2xvc2UoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRfYnV0dG9ucyA9IHRoaXMuaW5uZXJfYnV0dG9uc19rZXlzO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFiaWxpdGllcyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnMuc2xpY2UoMCwgQmF0dGxlLk1BWF9DSEFSU19JTl9CQVRUTEUpLmZvckVhY2goKGNoYXI6IE1haW5DaGFyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFiaWxpdGllc1tjaGFyLmtleV9uYW1lXSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kamlubmlfYWxyZWFkeV91c2VkID0gb3JkZXJlZF9lbGVtZW50cy5yZWR1Y2UoKGEsIGIpID0+ICgoYVtiXSA9IDApLCBhKSwge30pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlubmVyX2hvcml6b250YWxfbWVudS5vcGVuKCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0aGlzX2NoYXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5jdXJyZW50X2NoYXJfaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAodGhpc19jaGFyLmlzX3BhcmFseXplZCgpIHx8IHRoaXNfY2hhci5oYXNfcGVybWFuZW50X3N0YXR1cyhwZXJtYW5lbnRfc3RhdHVzLkRPV05FRCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWJpbGl0aWVzW3RoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLmN1cnJlbnRfY2hhcl9pbmRleF0ua2V5X25hbWVdLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleV9uYW1lOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldHM6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICArK3RoaXMuY3VycmVudF9jaGFyX2luZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc19jaGFyID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuY3VycmVudF9jaGFyX2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRfY2hhcl9pbmRleCA+PSBCYXR0bGUuTUFYX0NIQVJTX0lOX0JBVFRMRSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudF9jaGFyX2luZGV4ID49IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVycy5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudF9jaGFyX2luZGV4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uX2FiaWxpdGllc19jaG9vc2UodGhpcy5hYmlsaXRpZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0X2F2YXRhcigpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInN0YXR1c1wiOlxuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRfaG9yaXpvbnRhbF9tZW51LmNsb3NlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0dXNfd2luZG93Lm9wZW4odGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzWzBdLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0X2hvcml6b250YWxfbWVudS5vcGVuKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaW5uZXJfYnV0dG9uX3ByZXNzKCkge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuY3VycmVudF9idXR0b25zW3RoaXMuaW5uZXJfaG9yaXpvbnRhbF9tZW51LnNlbGVjdGVkX2J1dHRvbl9pbmRleF0pIHtcbiAgICAgICAgICAgIGNhc2UgXCJhdHRhY2tcIjpcbiAgICAgICAgICAgICAgICB0aGlzLmlubmVyX2hvcml6b250YWxfbWVudS5kZWFjdGl2YXRlKHRydWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hvb3NlX3RhcmdldHMoXG4gICAgICAgICAgICAgICAgICAgIFwiYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgICAgICh0YXJnZXRzOiBUYXJnZXRbXSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFiaWxpdGllc1t0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5jdXJyZW50X2NoYXJfaW5kZXhdLmtleV9uYW1lXS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5X25hbWU6IFwiYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldHM6IHRhcmdldHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbm5lcl9ob3Jpem9udGFsX21lbnUuYWN0aXZhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZV9jaGFyKEZPUldBUkQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlubmVyX2hvcml6b250YWxfbWVudS5hY3RpdmF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5jdXJyZW50X2NoYXJfaW5kZXhdXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJwc3luZXJneVwiOlxuICAgICAgICAgICAgICAgIHRoaXMub25fYWJpbGl0eV9jaG9vc2UodGhpcy5wc3luZXJneV93aW5kb3csIGZhbHNlLCBcInBzeW5lcmd5XCIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImRqaW5uaVwiOlxuICAgICAgICAgICAgICAgIHRoaXMub25fYWJpbGl0eV9jaG9vc2UodGhpcy5kamlubl93aW5kb3csIHRydWUsIFwiZGppbm5pXCIsIHRoaXMucHN5bmVyZ3lfd2luZG93KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJzdW1tb25cIjpcbiAgICAgICAgICAgICAgICB0aGlzLm9uX2FiaWxpdHlfY2hvb3NlKHRoaXMuc3VtbW9uX3dpbmRvdywgdHJ1ZSwgXCJzdW1tb25cIiwgdGhpcy5kamlubmlfYWxyZWFkeV91c2VkKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJpdGVtXCI6XG4gICAgICAgICAgICAgICAgdGhpcy5vbl9hYmlsaXR5X2Nob29zZSh0aGlzLml0ZW1fd2luZG93LCBmYWxzZSwgXCJpdGVtXCIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImRlZmVuZFwiOlxuICAgICAgICAgICAgICAgIHRoaXMuaW5uZXJfaG9yaXpvbnRhbF9tZW51LmRlYWN0aXZhdGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5jaG9vc2VfdGFyZ2V0cyhcbiAgICAgICAgICAgICAgICAgICAgXCJkZWZlbmRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJkZWZlbmRcIixcbiAgICAgICAgICAgICAgICAgICAgKHRhcmdldHM6IFRhcmdldFtdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWJpbGl0aWVzW3RoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLmN1cnJlbnRfY2hhcl9pbmRleF0ua2V5X25hbWVdLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlfbmFtZTogXCJkZWZlbmRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0czogdGFyZ2V0cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlubmVyX2hvcml6b250YWxfbWVudS5hY3RpdmF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlX2NoYXIoRk9SV0FSRCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5uZXJfaG9yaXpvbnRhbF9tZW51LmFjdGl2YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLmN1cnJlbnRfY2hhcl9pbmRleF1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25fYWJpbGl0eV9jaG9vc2UoXG4gICAgICAgIHdpbmRvdzogQmF0dGxlUHN5bmVyZ3lXaW5kb3cgfCBCYXR0bGVEamlubldpbmRvdyB8IEJhdHRsZUl0ZW1XaW5kb3cgfCBCYXR0bGVTdW1tb25XaW5kb3csXG4gICAgICAgIGRlc2NyaXB0aW9uX29uX3RvcDogYm9vbGVhbixcbiAgICAgICAgYWN0aW9uX3R5cGU6IHN0cmluZyxcbiAgICAgICAgLi4uYXJnczogYW55W11cbiAgICApIHtcbiAgICAgICAgdGhpcy5pbm5lcl9ob3Jpem9udGFsX21lbnUuZGVhY3RpdmF0ZSh0cnVlKTtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbl93aW5kb3cub3BlbihkZXNjcmlwdGlvbl9vbl90b3ApO1xuXG4gICAgICAgIHdpbmRvdy5vcGVuKFxuICAgICAgICAgICAgdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuY3VycmVudF9jaGFyX2luZGV4XSxcbiAgICAgICAgICAgIChhYmlsaXR5OiBzdHJpbmcsIGl0ZW1fc2xvdDogSXRlbVNsb3QpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3VtbW9uX3VzZWRfZGppbm46IHtbZWxlbWVudDogc3RyaW5nXTogbnVtYmVyfSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkamlubl9rZXlfbmFtZTogc3RyaW5nO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbl90eXBlID09PSBcImRqaW5uaVwiICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaW5mby5kamlubmlfbGlzdFthYmlsaXR5XS5zdGF0dXMgPT09IGRqaW5uX3N0YXR1cy5TVEFOREJZXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGppbm5fa2V5X25hbWUgPSBhYmlsaXR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgYWJpbGl0eSA9IFwic2V0X2RqaW5uXCI7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uX3R5cGUgPT09IFwic3VtbW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVpcmVtZW50cyA9IHRoaXMuZGF0YS5pbmZvLnN1bW1vbnNfbGlzdFthYmlsaXR5XS5yZXF1aXJlbWVudHM7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdW1tb25fdXNlZF9kamlubiA9IF8ubWFwVmFsdWVzKHRoaXMuZGppbm5pX2FscmVhZHlfdXNlZCwgKHZhbHVlLCBlbGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlICsgcmVxdWlyZW1lbnRzW2VsZW1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGppbm5pX2FscmVhZHlfdXNlZCA9IHN1bW1vbl91c2VkX2RqaW5uO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXNjcmlwdGlvbl93aW5kb3cuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNob29zZV90YXJnZXRzKFxuICAgICAgICAgICAgICAgICAgICAgICAgYWJpbGl0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbl90eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgKHRhcmdldHM6IFRhcmdldFtdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hYmlsaXRpZXNbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5jdXJyZW50X2NoYXJfaW5kZXhdLmtleV9uYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0ucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlfbmFtZTogYWJpbGl0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldHM6IHRhcmdldHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkamlubl9rZXlfbmFtZTogZGppbm5fa2V5X25hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtX3Nsb3Q6IGl0ZW1fc2xvdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVzY3JpcHRpb25fd2luZG93LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5uZXJfaG9yaXpvbnRhbF9tZW51LmFjdGl2YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlX2NoYXIoRk9SV0FSRCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1bW1vbl91c2VkX2RqaW5uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRqaW5uaV9hbHJlYWR5X3VzZWQgPSBfLm1hcFZhbHVlcyh0aGlzLmRqaW5uaV9hbHJlYWR5X3VzZWQsICh2YWx1ZSwgZWxlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSAtIHN1bW1vbl91c2VkX2RqaW5uW2VsZW1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlc2NyaXB0aW9uX3dpbmRvdy5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLmN1cnJlbnRfY2hhcl9pbmRleF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtX3Nsb3RcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93LndpbmRvd19vcGVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVzY3JpcHRpb25fd2luZG93LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5uZXJfaG9yaXpvbnRhbF9tZW51LmFjdGl2YXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRoaXMuZGVzY3JpcHRpb25fd2luZG93LnNldF9kZXNjcmlwdGlvbi5iaW5kKHRoaXMuZGVzY3JpcHRpb25fd2luZG93KSxcbiAgICAgICAgICAgIC4uLmFyZ3NcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBjaGFuZ2VfY2hhcihzdGVwOiBudW1iZXIsIHBvcF9hYmlsaXR5OiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgY29uc3QgYmVmb3JlX2NoYXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5jdXJyZW50X2NoYXJfaW5kZXhdO1xuICAgICAgICBjb25zdCBhYmlsaXRpZXNfY291bnQgPSB0aGlzLmFiaWxpdGllc1tiZWZvcmVfY2hhci5rZXlfbmFtZV0ubGVuZ3RoO1xuICAgICAgICBpZiAoYmVmb3JlX2NoYXIudHVybnMgPT09IGFiaWxpdGllc19jb3VudCB8fCAhYWJpbGl0aWVzX2NvdW50KSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRfY2hhcl9pbmRleCArPSBzdGVwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuY3VycmVudF9jaGFyX2luZGV4ID49IEJhdHRsZS5NQVhfQ0hBUlNfSU5fQkFUVExFIHx8XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRfY2hhcl9pbmRleCA+PSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnMubGVuZ3RoXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50X2NoYXJfaW5kZXggPSAwO1xuICAgICAgICAgICAgdGhpcy5vbl9hYmlsaXRpZXNfY2hvb3NlKHRoaXMuYWJpbGl0aWVzKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmN1cnJlbnRfY2hhcl9pbmRleCA+PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBuZXh0X2NoYXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5jdXJyZW50X2NoYXJfaW5kZXhdO1xuICAgICAgICAgICAgaWYgKHBvcF9hYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYWJpbGl0eV9pbmZvID0gdGhpcy5hYmlsaXRpZXNbbmV4dF9jaGFyLmtleV9uYW1lXS5wb3AoKTtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W2FiaWxpdHlfaW5mby5rZXlfbmFtZV0uYWJpbGl0eV9jYXRlZ29yeSA9PT0gYWJpbGl0eV9jYXRlZ29yaWVzLlNVTU1PTlxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXF1aXJlbWVudHMgPSB0aGlzLmRhdGEuaW5mby5zdW1tb25zX2xpc3RbYWJpbGl0eV9pbmZvLmtleV9uYW1lXS5yZXF1aXJlbWVudHM7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGppbm5pX2FscmVhZHlfdXNlZCA9IF8ubWFwVmFsdWVzKHRoaXMuZGppbm5pX2FscmVhZHlfdXNlZCwgKHZhbHVlLCBlbGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgLSByZXF1aXJlbWVudHNbZWxlbV07XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXh0X2NoYXIuaXNfcGFyYWx5emVkKCkgfHwgbmV4dF9jaGFyLmhhc19wZXJtYW5lbnRfc3RhdHVzKHBlcm1hbmVudF9zdGF0dXMuRE9XTkVEKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlX2NoYXIoc3RlcCwgcG9wX2FiaWxpdHkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldF9hdmF0YXIoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmlubmVyX2hvcml6b250YWxfbWVudS5jbG9zZSh1bmRlZmluZWQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmlubmVyX2hvcml6b250YWxfbWVudS5vcGVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRfY2hhcl9pbmRleCA9IDA7XG4gICAgICAgICAgICB0aGlzLmlubmVyX21lbnVfY2FuY2VsKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRfYXZhdGFyKCkge1xuICAgICAgICB0aGlzLmF2YXRhcl9zcHJpdGUuYWxwaGEgPSAxO1xuICAgICAgICB0aGlzLmF2YXRhcl9zcHJpdGUubG9hZFRleHR1cmUoXCJhdmF0YXJzXCIsIHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLmN1cnJlbnRfY2hhcl9pbmRleF0ua2V5X25hbWUpO1xuICAgIH1cblxuICAgIGhpZGVfYXZhdGFyKCkge1xuICAgICAgICB0aGlzLmF2YXRhcl9zcHJpdGUuYWxwaGEgPSAwO1xuICAgIH1cblxuICAgIGlubmVyX21lbnVfY2FuY2VsKCkge1xuICAgICAgICBjb25zdCBjaGFyX2tleV9uYW1lID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuY3VycmVudF9jaGFyX2luZGV4XS5rZXlfbmFtZTtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudF9jaGFyX2luZGV4ID4gMCB8fCB0aGlzLmFiaWxpdGllc1tjaGFyX2tleV9uYW1lXS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlX2NoYXIoQkFDS1dBUkQsIHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pbm5lcl9ob3Jpem9udGFsX21lbnUuY2xvc2UoKTtcbiAgICAgICAgICAgIHRoaXMuaGlkZV9hdmF0YXIoKTtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRfaG9yaXpvbnRhbF9tZW51Lm9wZW4oKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZV9wb3NpdGlvbigpIHtcbiAgICAgICAgdGhpcy5jaGFyc19zdGF0dXNfd2luZG93LnVwZGF0ZV9wb3NpdGlvbih0cnVlKTtcbiAgICAgICAgdGhpcy5zdGFydF9ob3Jpem9udGFsX21lbnUudXBkYXRlX3Bvc2l0aW9uKCk7XG4gICAgICAgIHRoaXMuaW5uZXJfaG9yaXpvbnRhbF9tZW51LnVwZGF0ZV9wb3NpdGlvbigpO1xuXG4gICAgICAgIHRoaXMuZ3JvdXAueCA9IHRoaXMuZ2FtZS5jYW1lcmEueDtcbiAgICAgICAgdGhpcy5ncm91cC55ID0gdGhpcy5nYW1lLmNhbWVyYS55O1xuICAgIH1cblxuICAgIGlzX2FjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnRfaG9yaXpvbnRhbF9tZW51Lm1lbnVfYWN0aXZlIHx8IHRoaXMuaW5uZXJfaG9yaXpvbnRhbF9tZW51Lm1lbnVfYWN0aXZlO1xuICAgIH1cblxuICAgIG9wZW5fbWVudSgpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50X2NoYXJfaW5kZXggPSAwO1xuICAgICAgICB0aGlzLnN0YXJ0X2hvcml6b250YWxfbWVudS5vcGVuKCk7XG4gICAgICAgIHRoaXMudXBkYXRlX3Bvc2l0aW9uKCk7XG5cbiAgICAgICAgdGhpcy5jaGFyc19zdGF0dXNfd2luZG93LnVwZGF0ZV9jaGFyc19pbmZvKCk7XG4gICAgICAgIHRoaXMuY2hhcnNfc3RhdHVzX3dpbmRvdy5zaG93KCk7XG4gICAgfVxuXG4gICAgY2xvc2VfbWVudSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzX2FjdGl2ZSgpKSByZXR1cm47XG4gICAgICAgIHRoaXMuaGlkZV9hdmF0YXIoKTtcblxuICAgICAgICB0aGlzLnN0YXJ0X2hvcml6b250YWxfbWVudS5jbG9zZSgpO1xuICAgICAgICB0aGlzLmlubmVyX2hvcml6b250YWxfbWVudS5jbG9zZSgpO1xuICAgIH1cblxuICAgIGRlc3Ryb3lfbWVudSgpIHtcbiAgICAgICAgdGhpcy5jaGFyc19zdGF0dXNfd2luZG93LmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5pbm5lcl9ob3Jpem9udGFsX21lbnUuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLnN0YXJ0X2hvcml6b250YWxfbWVudS5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb25fd2luZG93LmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5kamlubl93aW5kb3cuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLnBzeW5lcmd5X3dpbmRvdy5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuaXRlbV93aW5kb3cuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLnN1bW1vbl93aW5kb3cuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmdyb3VwLmRlc3Ryb3koKTtcbiAgICB9XG59XG4iLCJpbXBvcnQge1RleHRPYmosIFdpbmRvd30gZnJvbSBcIi4uLy4uL1dpbmRvd1wiO1xuXG5jb25zdCBCQVNFX1dJTl9XSURUSCA9IDIzNjtcbmNvbnN0IEJBU0VfV0lOX0hFSUdIVCA9IDI4O1xuY29uc3QgQkFTRV9XSU5fWCA9IDA7XG5jb25zdCBCQVNFX1dJTl9ZID0gNDA7XG5jb25zdCBCQVNFX1dJTl9UT1BfWSA9IDMyO1xuY29uc3QgREVTQ1JJUFRJT05fWCA9IDg7XG5jb25zdCBERVNDUklQVElPTl9ZID0gMTI7XG5cbmV4cG9ydCBjbGFzcyBCYXR0bGVEZXNjcmlwdGlvbldpbmRvdyB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBiYXNlX3dpbmRvdzogV2luZG93O1xuICAgIHB1YmxpYyBkZXNjcmlwdGlvbjogVGV4dE9iajtcbiAgICBwdWJsaWMgaXNfb3BlbjogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWUpIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBCQVNFX1dJTl9YLCBCQVNFX1dJTl9ZLCBCQVNFX1dJTl9XSURUSCwgQkFTRV9XSU5fSEVJR0hUKTtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgREVTQ1JJUFRJT05fWCwgREVTQ1JJUFRJT05fWSk7XG4gICAgfVxuXG4gICAgdXBkYXRlX3Bvc2l0aW9uKG9uX3RvcCkge1xuICAgICAgICBpZiAob25fdG9wKSB7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV9wb3NpdGlvbih7eTogQkFTRV9XSU5fVE9QX1l9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3Bvc2l0aW9uKHt5OiBCQVNFX1dJTl9ZfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRfZGVzY3JpcHRpb24oZGVzY3JpcHRpb24pIHtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChkZXNjcmlwdGlvbiwgdGhpcy5kZXNjcmlwdGlvbik7XG4gICAgfVxuXG4gICAgb3Blbihvbl90b3AgPSBmYWxzZSkge1xuICAgICAgICB0aGlzLmlzX29wZW4gPSB0cnVlO1xuICAgICAgICB0aGlzLnVwZGF0ZV9wb3NpdGlvbihvbl90b3ApO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNob3codW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgc2hvdygpIHtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zaG93KHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgIH1cblxuICAgIGhpZGUoKSB7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY2xvc2UodW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuaXNfb3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmNsb3NlKHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuZGVzdHJveShmYWxzZSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtUZXh0T2JqLCBXaW5kb3d9IGZyb20gXCIuLi8uLi9XaW5kb3dcIjtcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSBcIi4uLy4uL21hZ2ljX251bWJlcnNcIjtcbmltcG9ydCB7dGVtcG9yYXJ5X3N0YXR1c30gZnJvbSBcIi4uLy4uL1BsYXllclwiO1xuaW1wb3J0IHtHb2xkZW5TdW59IGZyb20gXCIuLi8uLi9Hb2xkZW5TdW5cIjtcbmltcG9ydCB7TWFpbkNoYXJ9IGZyb20gXCIuLi8uLi9NYWluQ2hhclwiO1xuaW1wb3J0IHtEamlubiwgZGppbm5fc3RhdHVzfSBmcm9tIFwiLi4vLi4vRGppbm5cIjtcbmltcG9ydCB7Q3Vyc29yTWFuYWdlciwgUG9pbnRWYXJpYW50c30gZnJvbSBcIi4uLy4uL3V0aWxzL0N1cnNvck1hbmFnZXJcIjtcbmltcG9ydCB7UGFnZUluZGljYXRvck1vZGVzfSBmcm9tIFwiLi4vLi4vc3VwcG9ydF9tZW51cy9QYWdlSW5kaWNhdG9yXCI7XG5cbmNvbnN0IEJBU0VfV0lOX1dJRFRIID0gMTY0O1xuY29uc3QgQkFTRV9XSU5fSEVJR0hUID0gODQ7XG5jb25zdCBCQVNFX1dJTl9FWFBBTkRFRF9IRUlHSFQgPSAxMDg7XG5jb25zdCBCQVNFX1dJTl9YID0gNzI7XG5jb25zdCBCQVNFX1dJTl9ZID0gNzI7XG5cbmNvbnN0IEJBU0VfV0lOX0VYUEFOREVEX1ggPSAwO1xuY29uc3QgQkFTRV9XSU5fRVhQQU5ERURfWSA9IDQwO1xuXG5jb25zdCBFTEVNX1BFUl9QQUdFID0gNTtcbmNvbnN0IEVMRU1fUEFERElOR19UT1AgPSA1O1xuY29uc3QgRUxFTV9QQURESU5HX0xFRlQgPSAxMDtcbmNvbnN0IFNQQUNFX0JFVFdFRU5fSVRFTVMgPSAyO1xuY29uc3QgRUxFTV9OQU1FX0lDT05fU0hJRlQgPSA0O1xuXG5jb25zdCBQUF9YID0gOTY7XG5jb25zdCBQU1lfUFBfRU5EX1ggPSAxMjY7XG5cbmNvbnN0IFBTWV9HQUlOX0NPTE9SID0gbnVtYmVycy5ZRUxMT1dfRk9OVF9DT0xPUjtcbmNvbnN0IFBTWV9MT1NUX0NPTE9SID0gbnVtYmVycy5SRURfRk9OVF9DT0xPUjtcblxuY29uc3QgUFNZX0lORk9fMV9ZID0gODk7XG5jb25zdCBQU1lfSU5GT19YID0gNDA7XG5jb25zdCBQU1lfSU5GT18yX1kgPSBQU1lfSU5GT18xX1kgKyAxICsgbnVtYmVycy5GT05UX1NJWkU7XG5cbmNvbnN0IEJVVFRPTl9YID0gNDg7XG5jb25zdCBCVVRUT05fWSA9IDEzNjtcblxuY29uc3QgQ1VSU09SX1ggPSA2NjtcbmNvbnN0IENVUlNPUl9ZID0gODM7XG5jb25zdCBDVVJTT1JfU0hJRlQgPSAxNjtcblxuY29uc3QgU1RBUlRfWCA9IDEyOTtcbmNvbnN0IFJBTkdFX1ggPSAxMzc7XG5cbmNvbnN0IEhJR0hMSUdIVF9CQVJfV0lEVEggPSAxNTI7XG5jb25zdCBISUdITElHSFRfQkFSX0hFSUdIVCA9IDg7XG5jb25zdCBISUdITElHSFRfQkFSX1ggPSA4O1xuXG5leHBvcnQgY2xhc3MgQmF0dGxlUHN5bmVyZ3lXaW5kb3cge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgZGF0YTogR29sZGVuU3VuO1xuXG4gICAgcHVibGljIHRleHRfc3ByaXRlc19pbl93aW5kb3c6IFRleHRPYmpbXTtcbiAgICBwdWJsaWMgaWNvbl9zcHJpdGVzX2luX3dpbmRvdzogUGhhc2VyLlNwcml0ZVtdO1xuICAgIHB1YmxpYyBtaXNjX3Nwcml0ZXNfaW5fd2luZG93OiBQaGFzZXIuU3ByaXRlW107XG5cbiAgICBwdWJsaWMgYmFzZV93aW5kb3c6IFdpbmRvdztcbiAgICBwdWJsaWMgZ3JvdXA6IFBoYXNlci5Hcm91cDtcblxuICAgIHB1YmxpYyBidXR0b246IFBoYXNlci5TcHJpdGU7XG4gICAgcHVibGljIGhpZ2hsaWdodF9iYXI6IFBoYXNlci5HcmFwaGljcztcblxuICAgIHB1YmxpYyB3aW5kb3dfb3BlbjogYm9vbGVhbjtcbiAgICBwdWJsaWMgd2luZG93X2FjdGl2ZTogYm9vbGVhbjtcblxuICAgIHB1YmxpYyBleHBhbmRlZDogYm9vbGVhbjtcbiAgICBwdWJsaWMgYWJpbGl0eV9pbmRleDogbnVtYmVyO1xuICAgIHB1YmxpYyBwYWdlX2luZGV4OiBudW1iZXI7XG4gICAgcHVibGljIHBhZ2VfbnVtYmVyOiBudW1iZXI7XG5cbiAgICBwdWJsaWMgYWJpbGl0aWVzOiBzdHJpbmdbXTtcbiAgICBwdWJsaWMgYWxsX2FiaWxpdGllczogc3RyaW5nW107XG4gICAgcHVibGljIGNsb3NlX2NhbGxiYWNrOiBGdW5jdGlvbjtcblxuICAgIHB1YmxpYyBzZXRfZGVzY3JpcHRpb246IEZ1bmN0aW9uO1xuXG4gICAgcHVibGljIGNob29zZW5fYWJpbGl0eTogc3RyaW5nO1xuICAgIHB1YmxpYyBwc3lfc2VhbGVkOiBib29sZWFuO1xuICAgIHB1YmxpYyBjaGFyOiBNYWluQ2hhcjtcblxuICAgIHB1YmxpYyBnYWluZWRfYWJpbGl0aWVzOiBzdHJpbmdbXTtcbiAgICBwdWJsaWMgbG9zdF9hYmlsaXRpZXM6IHN0cmluZ1tdO1xuICAgIHB1YmxpYyBpbnRlcnNlY3Rpb25fYWJpbGl0aWVzOiBzdHJpbmdbXTtcbiAgICBwdWJsaWMgY3VycmVudF9hYmlsaXRpZXM6IHN0cmluZ1tdO1xuICAgIHB1YmxpYyBuZXh0X2FiaWxpdGllczogc3RyaW5nW107XG5cbiAgICBwdWJsaWMgcHN5X2luZm9fMV90ZXh0OiBUZXh0T2JqO1xuICAgIHB1YmxpYyBwc3lfaW5mb18yX3RleHQ6IFRleHRPYmo7XG5cbiAgICBwdWJsaWMgZGppbm5pOiBEamlubltdO1xuICAgIHB1YmxpYyBuZXh0X2RqaW5uaV9zdGF0dXM6IGRqaW5uX3N0YXR1c1tdO1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZTogUGhhc2VyLkdhbWUsIGRhdGE6IEdvbGRlblN1bikge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuXG4gICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMudGV4dF9zcHJpdGVzX2luX3dpbmRvdyA9IFtdO1xuICAgICAgICB0aGlzLmljb25fc3ByaXRlc19pbl93aW5kb3cgPSBbXTtcbiAgICAgICAgdGhpcy5taXNjX3Nwcml0ZXNfaW5fd2luZG93ID0gW107XG5cbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBCQVNFX1dJTl9YLCBCQVNFX1dJTl9ZLCBCQVNFX1dJTl9XSURUSCwgQkFTRV9XSU5fSEVJR0hUKTtcbiAgICAgICAgdGhpcy5ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcbiAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDA7XG5cbiAgICAgICAgdGhpcy5idXR0b24gPSB0aGlzLmdyb3VwLmNyZWF0ZShCVVRUT05fWCwgQlVUVE9OX1ksIFwiYnV0dG9uc1wiLCBcInBzeW5lcmd5XCIpO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIgPSB0aGlzLmdhbWUuYWRkLmdyYXBoaWNzKDAsIDApO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYmxlbmRNb2RlID0gUElYSS5ibGVuZE1vZGVzLlNDUkVFTjtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmFscGhhID0gMDtcblxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmFkZF9zcHJpdGVfdG9fZ3JvdXAodGhpcy5oaWdobGlnaHRfYmFyKTtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmJlZ2luRmlsbCh0aGlzLmJhc2Vfd2luZG93LmNvbG9yLCAxKTtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmRyYXdSZWN0KEhJR0hMSUdIVF9CQVJfWCwgMCwgSElHSExJR0hUX0JBUl9XSURUSCwgSElHSExJR0hUX0JBUl9IRUlHSFQpO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuZW5kRmlsbCgpO1xuICAgIH1cblxuICAgIHNlbGVjdF9hYmlsaXR5KGluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5hYmlsaXR5X2luZGV4ID0gaW5kZXg7XG5cbiAgICAgICAgbGV0IGN1cnNvcl94ID0gQ1VSU09SX1g7XG4gICAgICAgIGxldCBjdXJzb3JfeSA9IENVUlNPUl9ZICsgdGhpcy5hYmlsaXR5X2luZGV4ICogQ1VSU09SX1NISUZUO1xuXG4gICAgICAgIGxldCB0d2Vlbl9jb25maWcgPSB7XG4gICAgICAgICAgICB0eXBlOiBDdXJzb3JNYW5hZ2VyLkN1cnNvclR3ZWVucy5QT0lOVCxcbiAgICAgICAgICAgIHZhcmlhbnQ6IFBvaW50VmFyaWFudHMuTk9STUFMLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmRhdGEuY3Vyc29yX21hbmFnZXIubW92ZV90byh7eDogY3Vyc29yX3gsIHk6IGN1cnNvcl95fSwge2FuaW1hdGU6IGZhbHNlLCB0d2Vlbl9jb25maWc6IHR3ZWVuX2NvbmZpZ30pO1xuICAgICAgICB0aGlzLmNoYW5nZV9hYmlsaXR5KCk7XG4gICAgfVxuXG4gICAgbmV4dF9hYmlsaXR5KCkge1xuICAgICAgICBpZiAodGhpcy5hYmlsaXRpZXMubGVuZ3RoID09PSAxKSByZXR1cm47XG4gICAgICAgIHRoaXMuc2VsZWN0X2FiaWxpdHkoKHRoaXMuYWJpbGl0eV9pbmRleCArIDEpICUgdGhpcy5hYmlsaXRpZXMubGVuZ3RoKTtcbiAgICB9XG5cbiAgICBwcmV2aW91c19hYmlsaXR5KCkge1xuICAgICAgICBpZiAodGhpcy5hYmlsaXRpZXMubGVuZ3RoID09PSAxKSByZXR1cm47XG4gICAgICAgIHRoaXMuc2VsZWN0X2FiaWxpdHkoKHRoaXMuYWJpbGl0eV9pbmRleCArIHRoaXMuYWJpbGl0aWVzLmxlbmd0aCAtIDEpICUgdGhpcy5hYmlsaXRpZXMubGVuZ3RoKTtcbiAgICB9XG5cbiAgICBuZXh0X3BhZ2UoKSB7XG4gICAgICAgIGlmICh0aGlzLnBhZ2VfbnVtYmVyID09PSAxKSByZXR1cm47XG5cbiAgICAgICAgdGhpcy5wYWdlX2luZGV4ID0gKHRoaXMucGFnZV9pbmRleCArIDEpICUgdGhpcy5wYWdlX251bWJlcjtcbiAgICAgICAgdGhpcy5jaGFuZ2VfcGFnZSgpO1xuICAgIH1cblxuICAgIHByZXZpb3VzX3BhZ2UoKSB7XG4gICAgICAgIGlmICh0aGlzLnBhZ2VfbnVtYmVyID09PSAxKSByZXR1cm47XG5cbiAgICAgICAgdGhpcy5wYWdlX2luZGV4ID0gKHRoaXMucGFnZV9pbmRleCArIHRoaXMucGFnZV9udW1iZXIgLSAxKSAlIHRoaXMucGFnZV9udW1iZXI7XG4gICAgICAgIHRoaXMuY2hhbmdlX3BhZ2UoKTtcbiAgICB9XG5cbiAgICB1cGRhdGVfcG9zaXRpb24oKSB7XG4gICAgICAgIHRoaXMuZ3JvdXAueCA9IHRoaXMuZ2FtZS5jYW1lcmEueDtcbiAgICAgICAgdGhpcy5ncm91cC55ID0gdGhpcy5nYW1lLmNhbWVyYS55O1xuICAgIH1cblxuICAgIHNldF9wYWdlX251bWJlcigpIHtcbiAgICAgICAgY29uc3QgbGlzdF9sZW5ndGggPSB0aGlzLmFsbF9hYmlsaXRpZXMubGVuZ3RoO1xuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyID0gKCgobGlzdF9sZW5ndGggLSAxKSAvIEVMRU1fUEVSX1BBR0UpIHwgMCkgKyAxO1xuXG4gICAgICAgIGlmICh0aGlzLnBhZ2VfaW5kZXggPj0gdGhpcy5wYWdlX251bWJlcikge1xuICAgICAgICAgICAgdGhpcy5wYWdlX2luZGV4ID0gdGhpcy5wYWdlX251bWJlciAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5wYWdlX2luZGljYXRvci5pbml0aWFsaXplKHRoaXMucGFnZV9udW1iZXIsIHRoaXMucGFnZV9pbmRleCwgUGFnZUluZGljYXRvck1vZGVzLkZMQVNIKTtcbiAgICB9XG5cbiAgICBjaGFuZ2VfcGFnZSgpIHtcbiAgICAgICAgdGhpcy5zZXRfYWJpbGl0aWVzX2xpc3QoKTtcblxuICAgICAgICBpZiAodGhpcy5hYmlsaXR5X2luZGV4ID49IHRoaXMuYWJpbGl0aWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5hYmlsaXR5X2luZGV4ID0gdGhpcy5hYmlsaXRpZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0X2FiaWxpdHkodGhpcy5hYmlsaXR5X2luZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnNldF9kZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5zZXRfZGVzY3JpcHRpb24odGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3RbdGhpcy5hYmlsaXRpZXNbdGhpcy5hYmlsaXR5X2luZGV4XV0uZGVzY3JpcHRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRfaGlnaGxpZ2h0X2JhcigpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnBhZ2VfaW5kaWNhdG9yLnNlbGVjdF9wYWdlKHRoaXMucGFnZV9pbmRleCk7XG4gICAgfVxuXG4gICAgY2hhbmdlX2FiaWxpdHkoKSB7XG4gICAgICAgIGlmICh0aGlzLnNldF9kZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5zZXRfZGVzY3JpcHRpb24odGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3RbdGhpcy5hYmlsaXRpZXNbdGhpcy5hYmlsaXR5X2luZGV4XV0uZGVzY3JpcHRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRfaGlnaGxpZ2h0X2JhcigpO1xuICAgIH1cblxuICAgIGNoYW5nZV9kamlubmkoZGppbm5pOiBEamlubikge1xuICAgICAgICB0aGlzLmRqaW5uaSA9IFtkamlubmldO1xuXG4gICAgICAgIHRoaXMuY2xlYXJfc3ByaXRlcygpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnBhZ2VfaW5kaWNhdG9yLnRlcm1pbmFudGUoKTtcblxuICAgICAgICB0aGlzLm1vdW50X3dpbmRvdygpO1xuICAgICAgICB0aGlzLnNldF9oaWdobGlnaHRfYmFyKCk7XG4gICAgfVxuXG4gICAgc2V0X2hpZ2hsaWdodF9iYXIoKSB7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci55ID0gRUxFTV9QQURESU5HX1RPUCArIHRoaXMuYWJpbGl0eV9pbmRleCAqIChudW1iZXJzLklDT05fSEVJR0hUICsgU1BBQ0VfQkVUV0VFTl9JVEVNUykgKyA0O1xuICAgIH1cblxuICAgIHNldF9hYmlsaXRpZXNfbGlzdCgpIHtcbiAgICAgICAgdGhpcy5jbGVhcl9zcHJpdGVzKGZhbHNlKTtcbiAgICAgICAgdGhpcy5hYmlsaXRpZXMgPSB0aGlzLmFsbF9hYmlsaXRpZXMuc2xpY2UoXG4gICAgICAgICAgICB0aGlzLnBhZ2VfaW5kZXggKiBFTEVNX1BFUl9QQUdFLFxuICAgICAgICAgICAgKHRoaXMucGFnZV9pbmRleCArIDEpICogRUxFTV9QRVJfUEFHRVxuICAgICAgICApO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5hYmlsaXRpZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGtleV9uYW1lID0gdGhpcy5hYmlsaXRpZXNbaV07XG4gICAgICAgICAgICBjb25zdCB4ID0gRUxFTV9QQURESU5HX0xFRlQ7XG4gICAgICAgICAgICBjb25zdCB5ID0gRUxFTV9QQURESU5HX1RPUCArIGkgKiAobnVtYmVycy5JQ09OX0hFSUdIVCArIFNQQUNFX0JFVFdFRU5fSVRFTVMpO1xuXG4gICAgICAgICAgICBjb25zdCBpY29uX3ggPSB4ICsgKG51bWJlcnMuSUNPTl9XSURUSCA+PiAxKTtcbiAgICAgICAgICAgIGNvbnN0IGljb25feSA9IHkgKyAobnVtYmVycy5JQ09OX0hFSUdIVCA+PiAxKTtcbiAgICAgICAgICAgIGNvbnN0IHhfZWxlbV9uYW1lID0gRUxFTV9QQURESU5HX0xFRlQgKyBudW1iZXJzLklDT05fV0lEVEggKyAyO1xuICAgICAgICAgICAgbGV0IGZvbnRfY29sb3IgPSBudW1iZXJzLkRFRkFVTFRfRk9OVF9DT0xPUjtcblxuICAgICAgICAgICAgaWYgKHRoaXMucHN5X3NlYWxlZCkge1xuICAgICAgICAgICAgICAgIGZvbnRfY29sb3IgPSBudW1iZXJzLlBVUlBMRV9GT05UX0NPTE9SO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNoYXIuY3VycmVudF9wcCA8IHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W2tleV9uYW1lXS5wcF9jb3N0KSB7XG4gICAgICAgICAgICAgICAgZm9udF9jb2xvciA9IG51bWJlcnMuUkVEX0ZPTlRfQ09MT1I7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHBzeW5lcmd5X25hbWVfc3ByaXRlID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFtrZXlfbmFtZV0ubmFtZSxcbiAgICAgICAgICAgICAgICB4X2VsZW1fbmFtZSxcbiAgICAgICAgICAgICAgICB5ICsgRUxFTV9OQU1FX0lDT05fU0hJRlQsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgZm9udF9jb2xvclxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMudGV4dF9zcHJpdGVzX2luX3dpbmRvdy5wdXNoKHBzeW5lcmd5X25hbWVfc3ByaXRlKTtcblxuICAgICAgICAgICAgY29uc3QgcHBfc3ByaXRlID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgICAgICBcIlBQXCIsXG4gICAgICAgICAgICAgICAgUFBfWCxcbiAgICAgICAgICAgICAgICB5ICsgRUxFTV9OQU1FX0lDT05fU0hJRlQsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgZm9udF9jb2xvclxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMudGV4dF9zcHJpdGVzX2luX3dpbmRvdy5wdXNoKHBwX3Nwcml0ZSk7XG5cbiAgICAgICAgICAgIHRoaXMuaWNvbl9zcHJpdGVzX2luX3dpbmRvdy5wdXNoKFxuICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKGljb25feCwgaWNvbl95LCBcImFiaWxpdGllc19pY29uc1wiLCB1bmRlZmluZWQsIGtleV9uYW1lKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuaWNvbl9zcHJpdGVzX2luX3dpbmRvd1tpXS5hbmNob3Iuc2V0VG8oMC41LCAwLjUpO1xuXG4gICAgICAgICAgICB0aGlzLm1pc2Nfc3ByaXRlc19pbl93aW5kb3cucHVzaChcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChcbiAgICAgICAgICAgICAgICAgICAgU1RBUlRfWCxcbiAgICAgICAgICAgICAgICAgICAgeSArIDUsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W2tleV9uYW1lXS5lbGVtZW50ICsgXCJfc3RhclwiXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMubWlzY19zcHJpdGVzX2luX3dpbmRvdy5wdXNoKFxuICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFxuICAgICAgICAgICAgICAgICAgICBSQU5HRV9YLFxuICAgICAgICAgICAgICAgICAgICB5ICsgNCxcbiAgICAgICAgICAgICAgICAgICAgXCJyYW5nZXNcIixcbiAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFtrZXlfbmFtZV0ucmFuZ2UudG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGNvbnN0IHBzeW5lcmd5X2Nvc3Rfc3ByaXRlID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFtrZXlfbmFtZV0ucHBfY29zdCxcbiAgICAgICAgICAgICAgICBQU1lfUFBfRU5EX1gsXG4gICAgICAgICAgICAgICAgeSArIEVMRU1fTkFNRV9JQ09OX1NISUZULFxuICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgZm9udF9jb2xvclxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMudGV4dF9zcHJpdGVzX2luX3dpbmRvdy5wdXNoKHBzeW5lcmd5X2Nvc3Rfc3ByaXRlKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuZXhwYW5kZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5nYWluZWRfYWJpbGl0aWVzLmluY2x1ZGVzKGtleV9uYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X2NvbG9yKFBTWV9HQUlOX0NPTE9SLCBwc3luZXJneV9uYW1lX3Nwcml0ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfY29sb3IoUFNZX0dBSU5fQ09MT1IsIHBzeW5lcmd5X2Nvc3Rfc3ByaXRlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dF9jb2xvcihQU1lfR0FJTl9DT0xPUiwgcHBfc3ByaXRlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubG9zdF9hYmlsaXRpZXMuaW5jbHVkZXMoa2V5X25hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfY29sb3IoUFNZX0xPU1RfQ09MT1IsIHBzeW5lcmd5X25hbWVfc3ByaXRlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dF9jb2xvcihQU1lfTE9TVF9DT0xPUiwgcHN5bmVyZ3lfY29zdF9zcHJpdGUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X2NvbG9yKFBTWV9MT1NUX0NPTE9SLCBwcF9zcHJpdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldF9hYmlsaXRpZXMoKSB7XG4gICAgICAgIHRoaXMuY3VycmVudF9hYmlsaXRpZXMgPSB0aGlzLmNoYXIuYWJpbGl0aWVzLmZpbHRlcihrZXlfbmFtZSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIGtleV9uYW1lIGluIHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0ICYmIHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W2tleV9uYW1lXS5pc19iYXR0bGVfYWJpbGl0eVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYWxsX2FiaWxpdGllcyA9IHRoaXMuY3VycmVudF9hYmlsaXRpZXM7XG4gICAgICAgIGlmICh0aGlzLmV4cGFuZGVkKSB7XG4gICAgICAgICAgICBjb25zdCBwcmV2aWV3X3ZhbHVlcyA9IHRoaXMuY2hhci5wcmV2aWV3X2RqaW5uX2NoYW5nZShcbiAgICAgICAgICAgICAgICBbXSxcbiAgICAgICAgICAgICAgICB0aGlzLmRqaW5uaS5tYXAoZCA9PiBkLmtleV9uYW1lKSxcbiAgICAgICAgICAgICAgICB0aGlzLm5leHRfZGppbm5pX3N0YXR1c1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMubmV4dF9hYmlsaXRpZXMgPSBwcmV2aWV3X3ZhbHVlcy5hYmlsaXRpZXMuZmlsdGVyKGtleV9uYW1lID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBrZXlfbmFtZSBpbiB0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdCAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFtrZXlfbmFtZV0uaXNfYmF0dGxlX2FiaWxpdHlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsZXQgY3VycmVudF9zZXQgPSBuZXcgU2V0KHRoaXMuY3VycmVudF9hYmlsaXRpZXMpO1xuICAgICAgICAgICAgbGV0IG5leHRfc2V0ID0gbmV3IFNldCh0aGlzLm5leHRfYWJpbGl0aWVzKTtcbiAgICAgICAgICAgIHRoaXMuZ2FpbmVkX2FiaWxpdGllcyA9IFsuLi5uZXh0X3NldF0uZmlsdGVyKHggPT4gIWN1cnJlbnRfc2V0Lmhhcyh4KSk7XG4gICAgICAgICAgICB0aGlzLmxvc3RfYWJpbGl0aWVzID0gWy4uLmN1cnJlbnRfc2V0XS5maWx0ZXIoeCA9PiAhbmV4dF9zZXQuaGFzKHgpKTtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJzZWN0aW9uX2FiaWxpdGllcyA9IFsuLi5jdXJyZW50X3NldF0uZmlsdGVyKHggPT4gbmV4dF9zZXQuaGFzKHgpKTtcbiAgICAgICAgICAgIHRoaXMuYWxsX2FiaWxpdGllcyA9IHRoaXMuZ2FpbmVkX2FiaWxpdGllcy5jb25jYXQodGhpcy5pbnRlcnNlY3Rpb25fYWJpbGl0aWVzLCB0aGlzLmxvc3RfYWJpbGl0aWVzKTtcbiAgICAgICAgICAgIHRoaXMucHN5X2luZm9fMV90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBQU1lfSU5GT19YLCBQU1lfSU5GT18xX1kpO1xuICAgICAgICAgICAgdGhpcy5wc3lfaW5mb18yX3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIFBTWV9JTkZPX1gsIFBTWV9JTkZPXzJfWSk7XG4gICAgICAgICAgICBpZiAodGhpcy5nYWluZWRfYWJpbGl0aWVzLmxlbmd0aCA9PT0gMCAmJiB0aGlzLmxvc3RfYWJpbGl0aWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoXCIqIE5vIGNoYW5nZVwiLCB0aGlzLnBzeV9pbmZvXzFfdGV4dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dF9jb2xvcihudW1iZXJzLkRFRkFVTFRfRk9OVF9DT0xPUiwgdGhpcy5wc3lfaW5mb18xX3RleHQpO1xuICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoXCJcIiwgdGhpcy5wc3lfaW5mb18yX3RleHQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmdhaW5lZF9hYmlsaXRpZXMubGVuZ3RoICYmIHRoaXMubG9zdF9hYmlsaXRpZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChcIiogUHN5bmVyZ3kgR2FpbmVkXCIsIHRoaXMucHN5X2luZm9fMV90ZXh0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X2NvbG9yKFBTWV9HQUlOX0NPTE9SLCB0aGlzLnBzeV9pbmZvXzFfdGV4dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChcIlwiLCB0aGlzLnBzeV9pbmZvXzJfdGV4dCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZ2FpbmVkX2FiaWxpdGllcy5sZW5ndGggPT09IDAgJiYgdGhpcy5sb3N0X2FiaWxpdGllcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiKiBQc3luZXJneSBMb3N0XCIsIHRoaXMucHN5X2luZm9fMV90ZXh0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X2NvbG9yKFBTWV9MT1NUX0NPTE9SLCB0aGlzLnBzeV9pbmZvXzFfdGV4dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChcIlwiLCB0aGlzLnBzeV9pbmZvXzJfdGV4dCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZ2FpbmVkX2FiaWxpdGllcy5sZW5ndGggJiYgdGhpcy5sb3N0X2FiaWxpdGllcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiKiBQc3luZXJneSBHYWluZWRcIiwgdGhpcy5wc3lfaW5mb18xX3RleHQpO1xuICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfY29sb3IoUFNZX0dBSU5fQ09MT1IsIHRoaXMucHN5X2luZm9fMV90ZXh0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiKiBQc3luZXJneSBMb3N0XCIsIHRoaXMucHN5X2luZm9fMl90ZXh0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X2NvbG9yKFBTWV9MT1NUX0NPTE9SLCB0aGlzLnBzeV9pbmZvXzJfdGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBtb3VudF93aW5kb3coKSB7XG4gICAgICAgIHRoaXMuc2V0X2FiaWxpdGllcygpO1xuICAgICAgICB0aGlzLnNldF9hYmlsaXRpZXNfbGlzdCgpO1xuICAgICAgICB0aGlzLnNldF9wYWdlX251bWJlcigpO1xuXG4gICAgICAgIGlmICh0aGlzLmV4cGFuZGVkKSB7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV9zaXplKHtoZWlnaHQ6IEJBU0VfV0lOX0VYUEFOREVEX0hFSUdIVH0pO1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfcG9zaXRpb24oe1xuICAgICAgICAgICAgICAgIHg6IEJBU0VfV0lOX0VYUEFOREVEX1gsXG4gICAgICAgICAgICAgICAgeTogQkFTRV9XSU5fRVhQQU5ERURfWSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfc2l6ZSh7aGVpZ2h0OiBCQVNFX1dJTl9IRUlHSFR9KTtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3Bvc2l0aW9uKHt4OiBCQVNFX1dJTl9YLCB5OiBCQVNFX1dJTl9ZfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbGVhcl9zcHJpdGVzKGNsZWFyX3BzeV9nYWluID0gdHJ1ZSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaWNvbl9zcHJpdGVzX2luX3dpbmRvdy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfZnJvbV9ncm91cCh0aGlzLmljb25fc3ByaXRlc19pbl93aW5kb3dbaV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pY29uX3Nwcml0ZXNfaW5fd2luZG93ID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5taXNjX3Nwcml0ZXNfaW5fd2luZG93Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV9mcm9tX2dyb3VwKHRoaXMubWlzY19zcHJpdGVzX2luX3dpbmRvd1tpXSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1pc2Nfc3ByaXRlc19pbl93aW5kb3cgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnRleHRfc3ByaXRlc19pbl93aW5kb3cubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX3RleHQodGhpcy50ZXh0X3Nwcml0ZXNfaW5fd2luZG93W2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjbGVhcl9wc3lfZ2Fpbikge1xuICAgICAgICAgICAgaWYgKHRoaXMucHN5X2luZm9fMV90ZXh0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfdGV4dCh0aGlzLnBzeV9pbmZvXzFfdGV4dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wc3lfaW5mb18xX3RleHQgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMucHN5X2luZm9fMl90ZXh0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfdGV4dCh0aGlzLnBzeV9pbmZvXzJfdGV4dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wc3lfaW5mb18yX3RleHQgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50ZXh0X3Nwcml0ZXNfaW5fd2luZG93ID0gW107XG4gICAgfVxuXG4gICAgYWJpbGl0eV9jaG9vc2UoKSB7XG4gICAgICAgIGxldCBjb250cm9scyA9IFtcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkxFRlQsIG9uX2Rvd246IHRoaXMucHJldmlvdXNfcGFnZS5iaW5kKHRoaXMpfSxcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLlJJR0hULCBvbl9kb3duOiB0aGlzLm5leHRfcGFnZS5iaW5kKHRoaXMpfSxcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLlVQLCBvbl9kb3duOiB0aGlzLnByZXZpb3VzX2FiaWxpdHkuYmluZCh0aGlzKX0sXG4gICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5ET1dOLCBvbl9kb3duOiB0aGlzLm5leHRfYWJpbGl0eS5iaW5kKHRoaXMpfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkEsXG4gICAgICAgICAgICAgICAgb25fZG93bjogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZXhwYW5kZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hvb3Nlbl9hYmlsaXR5ID0gdGhpcy5hYmlsaXRpZXNbdGhpcy5hYmlsaXR5X2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSh0aGlzLmNsb3NlX2NhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGtleTogdGhpcy5kYXRhLmdhbWVwYWQuQixcbiAgICAgICAgICAgICAgICBvbl9kb3duOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5leHBhbmRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaG9vc2VuX2FiaWxpdHkgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSh0aGlzLmNsb3NlX2NhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdO1xuXG4gICAgICAgIHRoaXMuZGF0YS5jb250cm9sX21hbmFnZXIuc2V0X2NvbnRyb2woY29udHJvbHMsIHtcbiAgICAgICAgICAgIGxvb3BfY29uZmlnczoge3ZlcnRpY2FsOiB0cnVlLCBob3Jpem9udGFsOiB0cnVlfSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb3BlbihjaGFyLCBjbG9zZV9jYWxsYmFjaywgc2V0X2Rlc2NyaXB0aW9uLCBleHBhbmRlZCA9IGZhbHNlLCBkamlubiA9IG51bGwsIG5leHRfZGppbm5fc3RhdHVzID0gbnVsbCkge1xuICAgICAgICB0aGlzLmNoYXIgPSBjaGFyO1xuICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrID0gY2xvc2VfY2FsbGJhY2s7XG4gICAgICAgIHRoaXMuc2V0X2Rlc2NyaXB0aW9uID0gc2V0X2Rlc2NyaXB0aW9uO1xuICAgICAgICB0aGlzLmV4cGFuZGVkID0gZXhwYW5kZWQ7XG4gICAgICAgIHRoaXMuZGppbm5pID0gW2RqaW5uXTtcbiAgICAgICAgdGhpcy5uZXh0X2RqaW5uaV9zdGF0dXMgPSBbbmV4dF9kamlubl9zdGF0dXNdO1xuXG4gICAgICAgIHRoaXMucHN5X3NlYWxlZCA9IHRoaXMuY2hhci5oYXNfdGVtcG9yYXJ5X3N0YXR1cyh0ZW1wb3Jhcnlfc3RhdHVzLlNFQUwpO1xuICAgICAgICB0aGlzLmNob29zZW5fYWJpbGl0eSA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5wYWdlX2luZGV4ID0gMDtcbiAgICAgICAgdGhpcy5hYmlsaXR5X2luZGV4ID0gMDtcbiAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDE7XG5cbiAgICAgICAgdGhpcy51cGRhdGVfcG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy5tb3VudF93aW5kb3coKTtcbiAgICAgICAgdGhpcy5zZXRfaGlnaGxpZ2h0X2JhcigpO1xuXG4gICAgICAgIGlmICghdGhpcy5leHBhbmRlZCkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RfYWJpbGl0eSgwKTtcbiAgICAgICAgICAgIHRoaXMuYWJpbGl0eV9jaG9vc2UoKTtcblxuICAgICAgICAgICAgdGhpcy5idXR0b24uYWxwaGEgPSAxO1xuICAgICAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmFscGhhID0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uLmFscGhhID0gMDtcbiAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci5hbHBoYSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zZXRfZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuc2V0X2Rlc2NyaXB0aW9uKHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W3RoaXMuYWJpbGl0aWVzW3RoaXMuYWJpbGl0eV9pbmRleF1dLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2hvdygoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IHRydWU7XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBzaG93KCkge1xuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMTtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmFscGhhID0gMTtcblxuICAgICAgICB0aGlzLnNlbGVjdF9hYmlsaXR5KHRoaXMuYWJpbGl0eV9pbmRleCk7XG4gICAgICAgIHRoaXMuYWJpbGl0eV9jaG9vc2UoKTtcblxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNob3coKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGhpZGUoY2FsbGJhY2s/OiBGdW5jdGlvbikge1xuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMDtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmFscGhhID0gMDtcblxuICAgICAgICB0aGlzLmRhdGEuY3Vyc29yX21hbmFnZXIuaGlkZSgpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmNsb3NlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayh0aGlzLmNob29zZW5fYWJpbGl0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBjbG9zZShjYWxsYmFjaz86IEZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMuY2xlYXJfc3ByaXRlcygpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnBhZ2VfaW5kaWNhdG9yLnRlcm1pbmFudGUoKTtcblxuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMDtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmFscGhhID0gMDtcblxuICAgICAgICB0aGlzLmRhdGEuY3Vyc29yX21hbmFnZXIuaGlkZSgpO1xuICAgICAgICB0aGlzLmRhdGEuY29udHJvbF9tYW5hZ2VyLnJlc2V0KCk7XG5cbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5jbG9zZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sodGhpcy5jaG9vc2VuX2FiaWxpdHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5kZXN0cm95KGZhbHNlKTtcbiAgICAgICAgdGhpcy5ncm91cC5kZXN0cm95KCk7XG5cbiAgICAgICAgdGhpcy5kYXRhLmN1cnNvcl9tYW5hZ2VyLmhpZGUoKTtcbiAgICAgICAgdGhpcy5kYXRhLmNvbnRyb2xfbWFuYWdlci5yZXNldCgpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7VGV4dE9iaiwgV2luZG93fSBmcm9tIFwiLi4vLi4vV2luZG93XCI7XG5pbXBvcnQge2RqaW5uX3N0YXR1cywgZGppbm5fZm9udF9jb2xvcnN9IGZyb20gXCIuLi8uLi9EamlublwiO1xuaW1wb3J0IHtEamlublN0YXRzV2luZG93fSBmcm9tIFwiLi9EamlublN0YXRzV2luZG93XCI7XG5pbXBvcnQge0dvbGRlblN1bn0gZnJvbSBcIi4uLy4uL0dvbGRlblN1blwiO1xuaW1wb3J0IHtNYWluQ2hhcn0gZnJvbSBcIi4uLy4uL01haW5DaGFyXCI7XG5pbXBvcnQge0JhdHRsZVBzeW5lcmd5V2luZG93fSBmcm9tIFwiLi9CYXR0bGVQc3luZXJneVdpbmRvd1wiO1xuaW1wb3J0IHtDdXJzb3JNYW5hZ2VyLCBQb2ludFZhcmlhbnRzfSBmcm9tIFwiLi4vLi4vdXRpbHMvQ3Vyc29yTWFuYWdlclwiO1xuaW1wb3J0IHtQYWdlSW5kaWNhdG9yTW9kZXN9IGZyb20gXCIuLi8uLi9zdXBwb3J0X21lbnVzL1BhZ2VJbmRpY2F0b3JcIjtcblxuY29uc3QgQkFTRV9XSU5ET1dfWCA9IDE2MDtcbmNvbnN0IEJBU0VfV0lORE9XX1kgPSA3MjtcbmNvbnN0IEJBU0VfV0lORE9XX1dJRFRIID0gNzY7XG5jb25zdCBCQVNFX1dJTkRPV19IRUlHSFQgPSA4NDtcblxuY29uc3QgRUxFTV9QRVJfUEFHRSA9IDU7XG5jb25zdCBUT1BfUEFERElORyA9IDg7XG5jb25zdCBTUEFDRV9CRVRXRUVOX0lURU1TID0gODtcblxuY29uc3QgSElHSExJR0hUX0JBUl9XSURUSCA9IDY0O1xuY29uc3QgSElHSExJR0hUX0JBUl9IRUlHSFQgPSA4O1xuY29uc3QgSElHSExJR0hUX0JBUl9YID0gODtcblxuY29uc3QgQlVUVE9OX1ggPSAxNDA7XG5jb25zdCBCVVRUT05fWSA9IDEzNjtcblxuY29uc3QgU1RBUl9YID0gOTtcbmNvbnN0IERKSU5OX05BTUVfWCA9IDE3O1xuXG5jb25zdCBDVVJTT1JfWCA9IDE1NDtcbmNvbnN0IENVUlNPUl9ZID0gODQ7XG5jb25zdCBDVVJTT1JfU0hJRlQgPSAxNjtcblxuY29uc3QgUkVDT1ZFUllfTlVNQkVSX1ggPSA2NztcblxuZXhwb3J0IGNsYXNzIEJhdHRsZURqaW5uV2luZG93IHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6IEdvbGRlblN1bjtcblxuICAgIHB1YmxpYyBiYXNlX3dpbmRvdzogV2luZG93O1xuICAgIHB1YmxpYyBzdGF0c193aW5kb3c6IERqaW5uU3RhdHNXaW5kb3c7XG4gICAgcHVibGljIGdyb3VwOiBQaGFzZXIuR3JvdXA7XG5cbiAgICBwdWJsaWMgYnV0dG9uOiBQaGFzZXIuU3ByaXRlO1xuICAgIHB1YmxpYyBoaWdobGlnaHRfYmFyOiBQaGFzZXIuR3JhcGhpY3M7XG5cbiAgICBwdWJsaWMgZGppbm5fbmFtZXM6IFRleHRPYmpbXTtcbiAgICBwdWJsaWMgc3RhcnNfc3ByaXRlczogUGhhc2VyLlNwcml0ZVtdO1xuICAgIHB1YmxpYyBvcGVuX3BzeV9rZXk6IG51bWJlcjtcblxuICAgIHB1YmxpYyB3aW5kb3dfb3BlbjogYm9vbGVhbjtcbiAgICBwdWJsaWMgd2luZG93X2FjdGl2ZTogYm9vbGVhbjtcbiAgICBwdWJsaWMgcHN5bmVyZ3lfd2luZG93X29wZW46IGJvb2xlYW47XG5cbiAgICBwdWJsaWMgY2hhcjogTWFpbkNoYXI7XG4gICAgcHVibGljIGNsb3NlX2NhbGxiYWNrOiBGdW5jdGlvbjtcbiAgICBwdWJsaWMgc2V0X2Rlc2NyaXB0aW9uOiBGdW5jdGlvbjtcbiAgICBwdWJsaWMgcHN5bmVyZ3lfd2luZG93OiBCYXR0bGVQc3luZXJneVdpbmRvdztcbiAgICBwdWJsaWMgY2hvb3Nlbl9hYmlsaXR5OiBzdHJpbmc7XG5cbiAgICBwdWJsaWMgZGppbm5pOiBzdHJpbmdbXTtcbiAgICBwdWJsaWMgYWxsX2RqaW5uaTogc3RyaW5nW107XG5cbiAgICBwdWJsaWMgZGppbm5faW5kZXg6IG51bWJlcjtcbiAgICBwdWJsaWMgcGFnZV9pbmRleDogbnVtYmVyO1xuICAgIHB1YmxpYyBwYWdlX251bWJlcjogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSkge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cgPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgQkFTRV9XSU5ET1dfWCwgQkFTRV9XSU5ET1dfWSwgQkFTRV9XSU5ET1dfV0lEVEgsIEJBU0VfV0lORE9XX0hFSUdIVCk7XG4gICAgICAgIHRoaXMuc3RhdHNfd2luZG93ID0gbmV3IERqaW5uU3RhdHNXaW5kb3codGhpcy5nYW1lLCB0aGlzLmRhdGEpO1xuICAgICAgICB0aGlzLmdyb3VwID0gdGhpcy5nYW1lLmFkZC5ncm91cCgpO1xuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMDtcblxuICAgICAgICB0aGlzLmJ1dHRvbiA9IHRoaXMuZ3JvdXAuY3JlYXRlKEJVVFRPTl9YLCBCVVRUT05fWSwgXCJidXR0b25zXCIsIFwiZGppbm5pXCIpO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIgPSB0aGlzLmdhbWUuYWRkLmdyYXBoaWNzKDAsIDApO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYmxlbmRNb2RlID0gUElYSS5ibGVuZE1vZGVzLlNDUkVFTjtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmFscGhhID0gMDtcblxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmFkZF9zcHJpdGVfdG9fZ3JvdXAodGhpcy5oaWdobGlnaHRfYmFyKTtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmJlZ2luRmlsbCh0aGlzLmJhc2Vfd2luZG93LmNvbG9yLCAxKTtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmRyYXdSZWN0KEhJR0hMSUdIVF9CQVJfWCwgMCwgSElHSExJR0hUX0JBUl9XSURUSCwgSElHSExJR0hUX0JBUl9IRUlHSFQpO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuZW5kRmlsbCgpO1xuXG4gICAgICAgIHRoaXMuZGppbm5fbmFtZXMgPSBbXTtcbiAgICAgICAgdGhpcy5zdGFyc19zcHJpdGVzID0gW107XG4gICAgICAgIHRoaXMub3Blbl9wc3lfa2V5ID0gbnVsbDtcbiAgICB9XG5cbiAgICBzZWxlY3RfZGppbm4oaW5kZXg6IG51bWJlcikge1xuICAgICAgICB0aGlzLmRqaW5uX2luZGV4ID0gaW5kZXg7XG5cbiAgICAgICAgbGV0IGN1cnNvcl94ID0gQ1VSU09SX1g7XG4gICAgICAgIGxldCBjdXJzb3JfeSA9IENVUlNPUl9ZICsgdGhpcy5kamlubl9pbmRleCAqIENVUlNPUl9TSElGVDtcblxuICAgICAgICBsZXQgdHdlZW5fY29uZmlnID0ge1xuICAgICAgICAgICAgdHlwZTogQ3Vyc29yTWFuYWdlci5DdXJzb3JUd2VlbnMuUE9JTlQsXG4gICAgICAgICAgICB2YXJpYW50OiBQb2ludFZhcmlhbnRzLk5PUk1BTCxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5kYXRhLmN1cnNvcl9tYW5hZ2VyLm1vdmVfdG8oe3g6IGN1cnNvcl94LCB5OiBjdXJzb3JfeX0sIHthbmltYXRlOiBmYWxzZSwgdHdlZW5fY29uZmlnOiB0d2Vlbl9jb25maWd9KTtcbiAgICAgICAgdGhpcy5jaGFuZ2VfZGppbm4oKTtcblxuICAgICAgICBpZiAodGhpcy5wc3luZXJneV93aW5kb3dfb3BlbilcbiAgICAgICAgICAgIHRoaXMucHN5bmVyZ3lfd2luZG93LmNoYW5nZV9kamlubmkodGhpcy5kYXRhLmluZm8uZGppbm5pX2xpc3RbdGhpcy5kamlubmlbdGhpcy5kamlubl9pbmRleF1dKTtcbiAgICB9XG5cbiAgICBuZXh0X2RqaW5uKCkge1xuICAgICAgICBpZiAodGhpcy5kamlubmkubGVuZ3RoID09PSAxKSByZXR1cm47XG4gICAgICAgIHRoaXMuc2VsZWN0X2RqaW5uKCh0aGlzLmRqaW5uX2luZGV4ICsgMSkgJSB0aGlzLmRqaW5uaS5sZW5ndGgpO1xuICAgIH1cblxuICAgIHByZXZpb3VzX2RqaW5uKCkge1xuICAgICAgICBpZiAodGhpcy5kamlubmkubGVuZ3RoID09PSAxKSByZXR1cm47XG4gICAgICAgIHRoaXMuc2VsZWN0X2RqaW5uKCh0aGlzLmRqaW5uX2luZGV4ICsgdGhpcy5kamlubmkubGVuZ3RoIC0gMSkgJSB0aGlzLmRqaW5uaS5sZW5ndGgpO1xuICAgIH1cblxuICAgIG5leHRfcGFnZSgpIHtcbiAgICAgICAgaWYgKHRoaXMucGFnZV9udW1iZXIgPT09IDEpIHJldHVybjtcblxuICAgICAgICB0aGlzLnBhZ2VfaW5kZXggPSAodGhpcy5wYWdlX2luZGV4ICsgMSkgJSB0aGlzLnBhZ2VfbnVtYmVyO1xuICAgICAgICB0aGlzLmNoYW5nZV9wYWdlKCk7XG4gICAgfVxuXG4gICAgcHJldmlvdXNfcGFnZSgpIHtcbiAgICAgICAgaWYgKHRoaXMucGFnZV9udW1iZXIgPT09IDEpIHJldHVybjtcblxuICAgICAgICB0aGlzLnBhZ2VfaW5kZXggPSAodGhpcy5wYWdlX2luZGV4ICsgdGhpcy5wYWdlX251bWJlciAtIDEpICUgdGhpcy5wYWdlX251bWJlcjtcbiAgICAgICAgdGhpcy5jaGFuZ2VfcGFnZSgpO1xuICAgIH1cblxuICAgIHVwZGF0ZV9wb3NpdGlvbigpIHtcbiAgICAgICAgdGhpcy5ncm91cC54ID0gdGhpcy5nYW1lLmNhbWVyYS54O1xuICAgICAgICB0aGlzLmdyb3VwLnkgPSB0aGlzLmdhbWUuY2FtZXJhLnk7XG4gICAgfVxuXG4gICAgY2FsbF9zZXRfZGVzY3JpcHRpb24oKSB7XG4gICAgICAgIGNvbnN0IHRoaXNfZGppbm4gPSB0aGlzLmRhdGEuaW5mby5kamlubmlfbGlzdFt0aGlzLmRqaW5uaVt0aGlzLmRqaW5uX2luZGV4XV07XG4gICAgICAgIGlmICh0aGlzLnNldF9kZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzX2RqaW5uLnN0YXR1cykge1xuICAgICAgICAgICAgICAgIGNhc2UgZGppbm5fc3RhdHVzLlNFVDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRfZGVzY3JpcHRpb24odGhpc19kamlubi5kZXNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgZGppbm5fc3RhdHVzLlNUQU5EQlk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0X2Rlc2NyaXB0aW9uKFwiUmVhZHkgdG8gc3VtbW9uLiBDaG9vc2UgdG8gc2V0IGl0IGFnYWluLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBkamlubl9zdGF0dXMuUkVDT1ZFUlk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0X2Rlc2NyaXB0aW9uKFwiVGhpcyBEamlubiBpcyBzdGlsbCByZWNvdmVyaW5nLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjaGFuZ2VfcGFnZSgpIHtcbiAgICAgICAgdGhpcy5jb25maWdfcGFnZSgpO1xuICAgICAgICBpZiAodGhpcy5kamlubl9pbmRleCA+PSB0aGlzLmRqaW5uaS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuZGppbm5faW5kZXggPSB0aGlzLmRqaW5uaS5sZW5ndGggLSAxO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RfZGppbm4odGhpcy5kamlubl9pbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jYWxsX3NldF9kZXNjcmlwdGlvbigpO1xuICAgICAgICB0aGlzLnNldF9oaWdobGlnaHRfYmFyKCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cucGFnZV9pbmRpY2F0b3Iuc2VsZWN0X3BhZ2UodGhpcy5wYWdlX2luZGV4KTtcbiAgICAgICAgdGhpcy51cGRhdGVfc3RhdHMoKTtcbiAgICB9XG5cbiAgICBjaGFuZ2VfZGppbm4oKSB7XG4gICAgICAgIHRoaXMuY2FsbF9zZXRfZGVzY3JpcHRpb24oKTtcbiAgICAgICAgdGhpcy5zZXRfaGlnaGxpZ2h0X2JhcigpO1xuICAgICAgICB0aGlzLnVwZGF0ZV9zdGF0cygpO1xuICAgIH1cblxuICAgIHNldF9oaWdobGlnaHRfYmFyKCkge1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIueSA9IFRPUF9QQURESU5HICsgdGhpcy5kamlubl9pbmRleCAqIChTUEFDRV9CRVRXRUVOX0lURU1TICsgSElHSExJR0hUX0JBUl9IRUlHSFQpO1xuICAgIH1cblxuICAgIGNvbmZpZ19wYWdlKCkge1xuICAgICAgICB0aGlzLmNsZWFyX3Nwcml0ZXMoKTtcbiAgICAgICAgdGhpcy5kamlubmkgPSB0aGlzLmFsbF9kamlubmkuc2xpY2UodGhpcy5wYWdlX2luZGV4ICogRUxFTV9QRVJfUEFHRSwgKHRoaXMucGFnZV9pbmRleCArIDEpICogRUxFTV9QRVJfUEFHRSk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRqaW5uaS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgZGppbm4gPSB0aGlzLmRhdGEuaW5mby5kamlubmlfbGlzdFt0aGlzLmRqaW5uaVtpXV07XG4gICAgICAgICAgICBjb25zdCBiYXNlX3kgPSBUT1BfUEFERElORyArIGkgKiAoU1BBQ0VfQkVUV0VFTl9JVEVNUyArIEhJR0hMSUdIVF9CQVJfSEVJR0hUKTtcbiAgICAgICAgICAgIGNvbnN0IHN0YXIgPSB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChTVEFSX1gsIGJhc2VfeSArIDEsIGRqaW5uLmVsZW1lbnQgKyBcIl9zdGFyXCIpO1xuXG4gICAgICAgICAgICB0aGlzLnN0YXJzX3Nwcml0ZXMucHVzaChzdGFyKTtcbiAgICAgICAgICAgIGxldCBjb2xvcjtcblxuICAgICAgICAgICAgc3dpdGNoIChkamlubi5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIGRqaW5uX3N0YXR1cy5TRVQ6XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yID0gZGppbm5fZm9udF9jb2xvcnNbZGppbm5fc3RhdHVzLlNFVF07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgZGppbm5fc3RhdHVzLlNUQU5EQlk6XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yID0gZGppbm5fZm9udF9jb2xvcnNbZGppbm5fc3RhdHVzLlNUQU5EQlldO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGRqaW5uX3N0YXR1cy5SRUNPVkVSWTpcbiAgICAgICAgICAgICAgICAgICAgY29sb3IgPSBkamlubl9mb250X2NvbG9yc1tkamlubl9zdGF0dXMuUkVDT1ZFUlldO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oZGppbm4ubmFtZSwgREpJTk5fTkFNRV9YLCBiYXNlX3ksIGZhbHNlLCBmYWxzZSwgY29sb3IpO1xuICAgICAgICAgICAgdGhpcy5kamlubl9uYW1lcy5wdXNoKG5hbWUpO1xuXG4gICAgICAgICAgICBpZiAoZGppbm4uc3RhdHVzID09PSBkamlubl9zdGF0dXMuUkVDT1ZFUlkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZWNfbnVtYmVyID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgICAgICAgICAgKGRqaW5uLnJlY292ZXJ5X3R1cm4gKyAxKS50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBSRUNPVkVSWV9OVU1CRVJfWCxcbiAgICAgICAgICAgICAgICAgICAgYmFzZV95LFxuICAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZGppbm5fZm9udF9jb2xvcnNbZGppbm5fc3RhdHVzLlJFQ09WRVJZXVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5kamlubl9uYW1lcy5wdXNoKHJlY19udW1iZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0X3BhZ2VfbnVtYmVyKCkge1xuICAgICAgICBjb25zdCBsaXN0X2xlbmd0aCA9IHRoaXMuYWxsX2RqaW5uaS5sZW5ndGg7XG4gICAgICAgIHRoaXMucGFnZV9udW1iZXIgPSAoKChsaXN0X2xlbmd0aCAtIDEpIC8gRUxFTV9QRVJfUEFHRSkgfCAwKSArIDE7XG5cbiAgICAgICAgaWYgKHRoaXMucGFnZV9pbmRleCA+PSB0aGlzLnBhZ2VfbnVtYmVyKSB7XG4gICAgICAgICAgICB0aGlzLnBhZ2VfaW5kZXggPSB0aGlzLnBhZ2VfbnVtYmVyIC0gMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnBhZ2VfaW5kaWNhdG9yLmluaXRpYWxpemUodGhpcy5wYWdlX251bWJlciwgdGhpcy5wYWdlX2luZGV4LCBQYWdlSW5kaWNhdG9yTW9kZXMuRkxBU0gpO1xuICAgIH1cblxuICAgIGdldF9uZXh0X3N0YXR1cygpIHtcbiAgICAgICAgY29uc3QgdGhpc19kamlubiA9IHRoaXMuZGF0YS5pbmZvLmRqaW5uaV9saXN0W3RoaXMuZGppbm5pW3RoaXMuZGppbm5faW5kZXhdXTtcbiAgICAgICAgbGV0IG5leHRfc3RhdHVzOiBzdHJpbmc7XG5cbiAgICAgICAgc3dpdGNoICh0aGlzX2RqaW5uLnN0YXR1cykge1xuICAgICAgICAgICAgY2FzZSBkamlubl9zdGF0dXMuU0VUOlxuICAgICAgICAgICAgICAgIG5leHRfc3RhdHVzID0gZGppbm5fc3RhdHVzLlNUQU5EQlk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGRqaW5uX3N0YXR1cy5TVEFOREJZOlxuICAgICAgICAgICAgICAgIG5leHRfc3RhdHVzID0gZGppbm5fc3RhdHVzLlNFVDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZGppbm5fc3RhdHVzLlJFQ09WRVJZOlxuICAgICAgICAgICAgICAgIG5leHRfc3RhdHVzID0gZGppbm5fc3RhdHVzLlJFQ09WRVJZO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5leHRfc3RhdHVzO1xuICAgIH1cblxuICAgIHVwZGF0ZV9zdGF0cygpIHtcbiAgICAgICAgY29uc3QgdGhpc19kamlubiA9IHRoaXMuZGF0YS5pbmZvLmRqaW5uaV9saXN0W3RoaXMuZGppbm5pW3RoaXMuZGppbm5faW5kZXhdXTtcbiAgICAgICAgdGhpcy5zdGF0c193aW5kb3cuc2V0X2RqaW5uKHRoaXNfZGppbm4sIHRoaXMuZ2V0X25leHRfc3RhdHVzKCkpO1xuICAgIH1cblxuICAgIG1vdW50X3dpbmRvdygpIHtcbiAgICAgICAgdGhpcy5hbGxfZGppbm5pID0gdGhpcy5jaGFyLmRqaW5uaTtcbiAgICAgICAgdGhpcy5zZXRfcGFnZV9udW1iZXIoKTtcblxuICAgICAgICB0aGlzLmNvbmZpZ19wYWdlKCk7XG4gICAgICAgIHRoaXMudXBkYXRlX3N0YXRzKCk7XG4gICAgfVxuXG4gICAgY2xlYXJfc3ByaXRlcygpIHtcbiAgICAgICAgdGhpcy5zdGFyc19zcHJpdGVzLmZvckVhY2goc3ByaXRlID0+IHtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX2Zyb21fZ3JvdXAoc3ByaXRlLCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZGppbm5fbmFtZXMuZm9yRWFjaCh0ZXh0ID0+IHtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX3RleHQodGV4dCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNob3dfcHN5bmVyZ3koKSB7XG4gICAgICAgIGlmICh0aGlzLnBzeW5lcmd5X3dpbmRvd19vcGVuKSByZXR1cm47XG5cbiAgICAgICAgdGhpcy5wc3luZXJneV93aW5kb3cub3BlbihcbiAgICAgICAgICAgIHRoaXMuY2hhcixcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0aGlzLmRhdGEuaW5mby5kamlubmlfbGlzdFt0aGlzLmRqaW5uaVt0aGlzLmRqaW5uX2luZGV4XV0sXG4gICAgICAgICAgICB0aGlzLmdldF9uZXh0X3N0YXR1cygpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMucHN5bmVyZ3lfd2luZG93X29wZW4gPSB0cnVlO1xuXG4gICAgICAgIGxldCBjb250cm9scyA9IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkxFRlQsXG4gICAgICAgICAgICAgICAgb25fZG93bjogdGhpcy5wc3luZXJneV93aW5kb3cucHJldmlvdXNfcGFnZS5iaW5kKHRoaXMucHN5bmVyZ3lfd2luZG93KSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAga2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5SSUdIVCxcbiAgICAgICAgICAgICAgICBvbl9kb3duOiB0aGlzLnBzeW5lcmd5X3dpbmRvdy5uZXh0X3BhZ2UuYmluZCh0aGlzLnBzeW5lcmd5X3dpbmRvdyksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuVVAsIG9uX2Rvd246IHRoaXMucHJldmlvdXNfZGppbm4uYmluZCh0aGlzKX0sXG4gICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5ET1dOLCBvbl9kb3duOiB0aGlzLm5leHRfZGppbm4uYmluZCh0aGlzKX0sXG4gICAgICAgIF07XG5cbiAgICAgICAgdGhpcy5kYXRhLmNvbnRyb2xfbWFuYWdlci5zZXRfY29udHJvbChjb250cm9scywge1xuICAgICAgICAgICAgbG9vcF9jb25maWdzOiB7dmVydGljYWw6IHRydWUsIGhvcml6b250YWw6IHRydWV9LFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBoaWRlX3BzeW5lcmd5KCkge1xuICAgICAgICBpZiAoIXRoaXMucHN5bmVyZ3lfd2luZG93X29wZW4pIHJldHVybjtcblxuICAgICAgICB0aGlzLnBzeW5lcmd5X3dpbmRvdy5jbG9zZSgpO1xuICAgICAgICB0aGlzLnBzeW5lcmd5X3dpbmRvd19vcGVuID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5zZWxlY3RfZGppbm4odGhpcy5kamlubl9pbmRleCk7XG4gICAgICAgIHRoaXMuZGppbm5fY2hvb3NlKCk7XG4gICAgfVxuXG4gICAgZGppbm5fY2hvb3NlKCkge1xuICAgICAgICBsZXQgY29udHJvbHMgPSBbXG4gICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5MRUZULCBvbl9kb3duOiB0aGlzLnByZXZpb3VzX3BhZ2UuYmluZCh0aGlzKX0sXG4gICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5SSUdIVCwgb25fZG93bjogdGhpcy5uZXh0X3BhZ2UuYmluZCh0aGlzKX0sXG4gICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5VUCwgb25fZG93bjogdGhpcy5wcmV2aW91c19kamlubi5iaW5kKHRoaXMpfSxcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkRPV04sIG9uX2Rvd246IHRoaXMubmV4dF9kamlubi5iaW5kKHRoaXMpfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkEsXG4gICAgICAgICAgICAgICAgb25fZG93bjogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0aGlzX2RqaW5uID0gdGhpcy5kYXRhLmluZm8uZGppbm5pX2xpc3RbdGhpcy5kamlubmlbdGhpcy5kamlubl9pbmRleF1dO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpc19kamlubi5zdGF0dXMgIT09IGRqaW5uX3N0YXR1cy5SRUNPVkVSWSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaG9vc2VuX2FiaWxpdHkgPSB0aGlzX2RqaW5uLmFiaWxpdHlfa2V5X25hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUodGhpcy5jbG9zZV9jYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkIsXG4gICAgICAgICAgICAgICAgb25fZG93bjogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNob29zZW5fYWJpbGl0eSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UodGhpcy5jbG9zZV9jYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF07XG5cbiAgICAgICAgdGhpcy5kYXRhLmNvbnRyb2xfbWFuYWdlci5zZXRfY29udHJvbChjb250cm9scywge1xuICAgICAgICAgICAgbG9vcF9jb25maWdzOiB7dmVydGljYWw6IHRydWUsIGhvcml6b250YWw6IHRydWV9LFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIXRoaXMub3Blbl9wc3lfa2V5KSB7XG4gICAgICAgICAgICBsZXQgY29udHJvbCA9IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGtleTogdGhpcy5kYXRhLmdhbWVwYWQuUixcbiAgICAgICAgICAgICAgICAgICAgb25fZG93bjogdGhpcy5zaG93X3BzeW5lcmd5LmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgIG9uX3VwOiB0aGlzLmhpZGVfcHN5bmVyZ3kuYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIHRoaXMub3Blbl9wc3lfa2V5ID0gdGhpcy5kYXRhLmNvbnRyb2xfbWFuYWdlci5zZXRfY29udHJvbChjb250cm9sLCB7XG4gICAgICAgICAgICAgICAgcGVyc2lzdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBub19yZXNldDogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb3BlbihjaGFyOiBNYWluQ2hhciwgY2xvc2VfY2FsbGJhY2s6IEZ1bmN0aW9uLCBzZXRfZGVzY3JpcHRpb246IEZ1bmN0aW9uLCBwc3luZXJneV93aW5kb3c/OiBCYXR0bGVQc3luZXJneVdpbmRvdykge1xuICAgICAgICB0aGlzLmNoYXIgPSBjaGFyO1xuICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrID0gY2xvc2VfY2FsbGJhY2s7XG4gICAgICAgIHRoaXMuc2V0X2Rlc2NyaXB0aW9uID0gc2V0X2Rlc2NyaXB0aW9uO1xuICAgICAgICB0aGlzLnBzeW5lcmd5X3dpbmRvdyA9IHBzeW5lcmd5X3dpbmRvdztcblxuICAgICAgICB0aGlzLnBzeW5lcmd5X3dpbmRvd19vcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAxO1xuXG4gICAgICAgIHRoaXMuZGppbm5faW5kZXggPSAwO1xuICAgICAgICB0aGlzLnBhZ2VfaW5kZXggPSAwO1xuICAgICAgICB0aGlzLmNob29zZW5fYWJpbGl0eSA9IG51bGw7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci5hbHBoYSA9IDE7XG5cbiAgICAgICAgdGhpcy5zdGF0c193aW5kb3cub3Blbih0aGlzLmNoYXIpO1xuICAgICAgICB0aGlzLnVwZGF0ZV9wb3NpdGlvbigpO1xuICAgICAgICB0aGlzLnNldF9oaWdobGlnaHRfYmFyKCk7XG4gICAgICAgIHRoaXMubW91bnRfd2luZG93KCk7XG5cbiAgICAgICAgdGhpcy5zZWxlY3RfZGppbm4oMCk7XG4gICAgICAgIHRoaXMuZGppbm5fY2hvb3NlKCk7XG5cbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zaG93KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2luZG93X29wZW4gPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIHNob3coKSB7XG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAxO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYWxwaGEgPSAxO1xuXG4gICAgICAgIHRoaXMuc2VsZWN0X2RqaW5uKHRoaXMuZGppbm5faW5kZXgpO1xuICAgICAgICB0aGlzLnN0YXRzX3dpbmRvdy5vcGVuKHRoaXMuY2hhcik7XG4gICAgICAgIHRoaXMudXBkYXRlX3N0YXRzKCk7XG4gICAgICAgIHRoaXMuZGppbm5fY2hvb3NlKCk7XG5cbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zaG93KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IHRydWU7XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBoaWRlKGNhbGxiYWNrPzogRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDA7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci5hbHBoYSA9IDA7XG5cbiAgICAgICAgdGhpcy5zdGF0c193aW5kb3cuY2xvc2UoKTtcbiAgICAgICAgdGhpcy5kYXRhLmN1cnNvcl9tYW5hZ2VyLmhpZGUoKTtcblxuICAgICAgICB0aGlzLmRhdGEuY29udHJvbF9tYW5hZ2VyLmRldGFjaF9iaW5kaW5ncyh0aGlzLm9wZW5fcHN5X2tleSk7XG4gICAgICAgIHRoaXMub3Blbl9wc3lfa2V5ID0gbnVsbDtcblxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmNsb3NlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayh0aGlzLmNob29zZW5fYWJpbGl0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBjbG9zZShjYWxsYmFjaz86IEZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMuY2xlYXJfc3ByaXRlcygpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnBhZ2VfaW5kaWNhdG9yLnRlcm1pbmFudGUoKTtcblxuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMDtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmFscGhhID0gMDtcblxuICAgICAgICB0aGlzLmRhdGEuY3Vyc29yX21hbmFnZXIuaGlkZSgpO1xuICAgICAgICB0aGlzLmRhdGEuY29udHJvbF9tYW5hZ2VyLnJlc2V0KCk7XG5cbiAgICAgICAgdGhpcy5kYXRhLmNvbnRyb2xfbWFuYWdlci5kZXRhY2hfYmluZGluZ3ModGhpcy5vcGVuX3BzeV9rZXkpO1xuICAgICAgICB0aGlzLm9wZW5fcHN5X2tleSA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5zdGF0c193aW5kb3cuY2xvc2UoKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5jbG9zZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sodGhpcy5jaG9vc2VuX2FiaWxpdHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5kZXN0cm95KGZhbHNlKTtcbiAgICAgICAgdGhpcy5zdGF0c193aW5kb3cuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmdyb3VwLmRlc3Ryb3koKTtcblxuICAgICAgICB0aGlzLmRhdGEuY3Vyc29yX21hbmFnZXIuaGlkZSgpO1xuICAgICAgICB0aGlzLmRhdGEuY29udHJvbF9tYW5hZ2VyLnJlc2V0KCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtUZXh0T2JqLCBXaW5kb3d9IGZyb20gXCIuLi8uLi9XaW5kb3dcIjtcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSBcIi4uLy4uL21hZ2ljX251bWJlcnNcIjtcbmltcG9ydCB7R29sZGVuU3VufSBmcm9tIFwiLi4vLi4vR29sZGVuU3VuXCI7XG5pbXBvcnQge01haW5DaGFyfSBmcm9tIFwiLi4vLi4vTWFpbkNoYXJcIjtcbmltcG9ydCB7RGppbm4sIGRqaW5uX3N0YXR1c30gZnJvbSBcIi4uLy4uL0RqaW5uXCI7XG5pbXBvcnQge29yZGVyZWRfbWFpbl9zdGF0c30gZnJvbSBcIi4uLy4uL1BsYXllclwiO1xuXG5jb25zdCBCQVNFX1dJTl9YID0gMDtcbmNvbnN0IEJBU0VfV0lOX1kgPSA2NDtcbmNvbnN0IEJBU0VfV0lOX1dJRFRIID0gMTU2O1xuY29uc3QgQkFTRV9XSU5fSEVJR0hUID0gODQ7XG5jb25zdCBIUF9MQUJFTF9YID0gODtcbmNvbnN0IEhQX0xBQkVMX1kgPSAxNjtcbmNvbnN0IENMQVNTX05BTUVfWSA9IDg7XG5jb25zdCBBRlRFUl9DTEFTU19YID0gODg7XG5jb25zdCBCRUZPUkVfU1RBVF9YID0gNzg7XG5jb25zdCBBRlRFUl9TVEFUX1ggPSAxMjY7XG5jb25zdCBDTEFTU19BUlJPV19YID0gODA7XG5jb25zdCBDTEFTU19BUlJPV19ZID0gMTY7XG5jb25zdCBTVEFUX0FSUk9XX1ggPSA4MDtcbmNvbnN0IFNUQVRfQVJST1dfWSA9IDE1O1xuY29uc3QgU0hJRlRfQlVUVE9OX1ggPSAzMjtcbmNvbnN0IFNISUZUX0JVVFRPTl9ZID0gNzI7XG5jb25zdCBTSElGVF9ERVNDUklQVElPTl9YID0gNTU7XG5jb25zdCBTSElGVF9ERVNDUklQVElPTl9ZID0gNzI7XG5cbmV4cG9ydCBjbGFzcyBEamlublN0YXRzV2luZG93IHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6IEdvbGRlblN1bjtcbiAgICBwdWJsaWMgYmFzZV93aW5kb3c6IFdpbmRvdztcbiAgICBwdWJsaWMgYmVmb3JlX3N0YXRzOiB7W3N0YXQ6IHN0cmluZ106IFRleHRPYmp9O1xuICAgIHB1YmxpYyBhZnRlcl9zdGF0czoge1tzdGF0OiBzdHJpbmddOiBUZXh0T2JqfTtcbiAgICBwdWJsaWMgdXBfYXJyb3dzOiB7W3N0YXQ6IHN0cmluZ106IFBoYXNlci5TcHJpdGV9O1xuICAgIHB1YmxpYyBkb3duX2Fycm93czoge1tzdGF0OiBzdHJpbmddOiBQaGFzZXIuU3ByaXRlfTtcbiAgICBwdWJsaWMgYmVmb3JlX2NsYXNzX3RleHQ6IFRleHRPYmo7XG4gICAgcHVibGljIGFmdGVyX2NsYXNzX3RleHQ6IFRleHRPYmo7XG4gICAgcHVibGljIHdpbmRvd19vcGVuOiBib29sZWFuO1xuICAgIHB1YmxpYyBjaGFyOiBNYWluQ2hhcjtcbiAgICBwdWJsaWMgbmV4dF9kamlubmlfc3RhdHVzOiBkamlubl9zdGF0dXM7XG4gICAgcHVibGljIGRqaW5uOiBEamlubjtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEpIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBCQVNFX1dJTl9YLCBCQVNFX1dJTl9ZLCBCQVNFX1dJTl9XSURUSCwgQkFTRV9XSU5fSEVJR0hUKTtcbiAgICAgICAgY29uc3QgbGFiZWxzID0gW1wiSFBcIiwgXCJQUFwiLCBcIkF0dGFja1wiLCBcIkRlZmVuc2VcIiwgXCJBZ2lsaXR5XCIsIFwiTHVja1wiXTtcbiAgICAgICAgdGhpcy5iZWZvcmVfc3RhdHMgPSB7fTtcbiAgICAgICAgdGhpcy5hZnRlcl9zdGF0cyA9IHt9O1xuICAgICAgICB0aGlzLnVwX2Fycm93cyA9IHt9O1xuICAgICAgICB0aGlzLmRvd25fYXJyb3dzID0ge307XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3JkZXJlZF9tYWluX3N0YXRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKGxhYmVsc1tpXSwgSFBfTEFCRUxfWCwgSFBfTEFCRUxfWSArIGkgKiBudW1iZXJzLkZPTlRfU0laRSk7XG4gICAgICAgICAgICB0aGlzLmJlZm9yZV9zdGF0c1tvcmRlcmVkX21haW5fc3RhdHNbaV1dID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgICAgIEJFRk9SRV9TVEFUX1gsXG4gICAgICAgICAgICAgICAgSFBfTEFCRUxfWSArIGkgKiBudW1iZXJzLkZPTlRfU0laRSxcbiAgICAgICAgICAgICAgICB0cnVlXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5hZnRlcl9zdGF0c1tvcmRlcmVkX21haW5fc3RhdHNbaV1dID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgICAgIEFGVEVSX1NUQVRfWCxcbiAgICAgICAgICAgICAgICBIUF9MQUJFTF9ZICsgaSAqIG51bWJlcnMuRk9OVF9TSVpFLFxuICAgICAgICAgICAgICAgIHRydWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnVwX2Fycm93c1tvcmRlcmVkX21haW5fc3RhdHNbaV1dID0gdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoXG4gICAgICAgICAgICAgICAgU1RBVF9BUlJPV19YLFxuICAgICAgICAgICAgICAgIFNUQVRfQVJST1dfWSArIGkgKiBudW1iZXJzLkZPTlRfU0laRSxcbiAgICAgICAgICAgICAgICBcInN0YXRfdXBcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuZG93bl9hcnJvd3Nbb3JkZXJlZF9tYWluX3N0YXRzW2ldXSA9IHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFxuICAgICAgICAgICAgICAgIFNUQVRfQVJST1dfWCxcbiAgICAgICAgICAgICAgICBTVEFUX0FSUk9XX1kgKyBpICogbnVtYmVycy5GT05UX1NJWkUsXG4gICAgICAgICAgICAgICAgXCJzdGF0X2Rvd25cIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhpZGVfYXJyb3dzKCk7XG4gICAgICAgIHRoaXMuYmVmb3JlX2NsYXNzX3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIEhQX0xBQkVMX1gsIENMQVNTX05BTUVfWSk7XG4gICAgICAgIHRoaXMuYWZ0ZXJfY2xhc3NfdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgQUZURVJfQ0xBU1NfWCwgQ0xBU1NfTkFNRV9ZKTtcbiAgICAgICAgbGV0IGFycm93X2NoYW5nZSA9IHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKENMQVNTX0FSUk9XX1gsIENMQVNTX0FSUk9XX1ksIFwiYXJyb3dfY2hhbmdlXCIpO1xuICAgICAgICBhcnJvd19jaGFuZ2Uucm90YXRpb24gPSAtbnVtYmVycy5kZWdyZWU5MDtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoU0hJRlRfQlVUVE9OX1ggKyAxLCBTSElGVF9CVVRUT05fWSArIDEsIFwic2hpZnRfa2V5Ym9hcmRcIiwgMHgwKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoU0hJRlRfQlVUVE9OX1gsIFNISUZUX0JVVFRPTl9ZLCBcInNoaWZ0X2tleWJvYXJkXCIpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiOiBQc3kuIEdhaW5lZFwiLCBTSElGVF9ERVNDUklQVElPTl9YLCBTSElGVF9ERVNDUklQVElPTl9ZKTtcbiAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xuICAgIH1cblxuICAgIGhpZGVfYXJyb3dzKCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9yZGVyZWRfbWFpbl9zdGF0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdGhpcy5kb3duX2Fycm93c1tvcmRlcmVkX21haW5fc3RhdHNbaV1dLmFscGhhID0gMDtcbiAgICAgICAgICAgIHRoaXMudXBfYXJyb3dzW29yZGVyZWRfbWFpbl9zdGF0c1tpXV0uYWxwaGEgPSAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0X3N0YXRzKCkge1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuY2hhci5jbGFzcy5uYW1lLCB0aGlzLmJlZm9yZV9jbGFzc190ZXh0KTtcbiAgICAgICAgY29uc3QgcHJldmlld192YWx1ZXMgPSB0aGlzLmNoYXIucHJldmlld19kamlubl9jaGFuZ2UoXG4gICAgICAgICAgICBvcmRlcmVkX21haW5fc3RhdHMsXG4gICAgICAgICAgICBbdGhpcy5kamlubi5rZXlfbmFtZV0sXG4gICAgICAgICAgICBbdGhpcy5uZXh0X2RqaW5uaV9zdGF0dXNdXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQocHJldmlld192YWx1ZXMuY2xhc3NfbmFtZSwgdGhpcy5hZnRlcl9jbGFzc190ZXh0KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcmRlcmVkX21haW5fc3RhdHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRfa2V5ID0gb3JkZXJlZF9tYWluX3N0YXRzW2ldO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudF9zdGF0ID0gdGhpcy5jaGFyW3N0YXRfa2V5XTtcbiAgICAgICAgICAgIGNvbnN0IG5leHRfc3RhdCA9IHByZXZpZXdfdmFsdWVzW3N0YXRfa2V5XTtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoY3VycmVudF9zdGF0LnRvU3RyaW5nKCksIHRoaXMuYmVmb3JlX3N0YXRzW3N0YXRfa2V5XSk7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KG5leHRfc3RhdC50b1N0cmluZygpLCB0aGlzLmFmdGVyX3N0YXRzW3N0YXRfa2V5XSk7XG4gICAgICAgICAgICBpZiAoY3VycmVudF9zdGF0ID4gbmV4dF9zdGF0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kb3duX2Fycm93c1tzdGF0X2tleV0uYWxwaGEgPSAxO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50X3N0YXQgPCBuZXh0X3N0YXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwX2Fycm93c1tzdGF0X2tleV0uYWxwaGEgPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0X2RqaW5uKGRqaW5uLCBuZXh0X2RqaW5uaV9zdGF0dXMpIHtcbiAgICAgICAgdGhpcy5kamlubiA9IGRqaW5uO1xuICAgICAgICB0aGlzLm5leHRfZGppbm5pX3N0YXR1cyA9IG5leHRfZGppbm5pX3N0YXR1cztcbiAgICAgICAgdGhpcy5oaWRlX2Fycm93cygpO1xuICAgICAgICB0aGlzLnNldF9zdGF0cygpO1xuICAgIH1cblxuICAgIG9wZW4oY2hhcikge1xuICAgICAgICB0aGlzLmNoYXIgPSBjaGFyO1xuICAgICAgICB0aGlzLmRqaW5uID0gbnVsbDtcbiAgICAgICAgdGhpcy5uZXh0X2RqaW5uaV9zdGF0dXMgPSBudWxsO1xuICAgICAgICB0aGlzLmhpZGVfYXJyb3dzKCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2hvdygoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gdHJ1ZTtcbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmNsb3NlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuZGVzdHJveShmYWxzZSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtUZXh0T2JqLCBXaW5kb3d9IGZyb20gXCIuLi8uLi9XaW5kb3dcIjtcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSBcIi4uLy4uL21hZ2ljX251bWJlcnNcIjtcbmltcG9ydCB7dXNlX3R5cGVzfSBmcm9tIFwiLi4vLi4vSXRlbVwiO1xuaW1wb3J0IHtHb2xkZW5TdW59IGZyb20gXCIuLi8uLi9Hb2xkZW5TdW5cIjtcbmltcG9ydCB7SXRlbVNsb3QsIE1haW5DaGFyfSBmcm9tIFwiLi4vLi4vTWFpbkNoYXJcIjtcbmltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuaW1wb3J0IHtDdXJzb3JNYW5hZ2VyLCBQb2ludFZhcmlhbnRzfSBmcm9tIFwiLi4vLi4vdXRpbHMvQ3Vyc29yTWFuYWdlclwiO1xuaW1wb3J0IHtQYWdlSW5kaWNhdG9yTW9kZXN9IGZyb20gXCIuLi8uLi9zdXBwb3J0X21lbnVzL1BhZ2VJbmRpY2F0b3JcIjtcblxuLy9UTyBETzogZGVjcmVtZW50IGl0ZW0gcXVhbnRpdHkgd2hlbiB1c2luZyBhIGNvbnN1bWFibGUgaXRlbVxuLy9UTyBETzogdXNlIGl0ZW0gc3ByaXRlIGluc3RlYWQgb2YgYWJpbGl0eSBzcHJpdGUgZm9yIGl0ZW1zIChTcGlyaXQgUmluZylcbi8vVE8gRE86IHNob3cgYnJva2VuIGljb24gb24gYnJva2VuIGl0ZW1zXG5cbmNvbnN0IEJBU0VfV0lORE9XX1ggPSAxMjA7XG5jb25zdCBCQVNFX1dJTkRPV19ZID0gNzI7XG5jb25zdCBCQVNFX1dJTkRPV19XSURUSCA9IDExNjtcbmNvbnN0IEJBU0VfV0lORE9XX0hFSUdIVCA9IDg0O1xuXG5jb25zdCBFTEVNX1BFUl9QQUdFID0gNTtcbmNvbnN0IFRPUF9QQURESU5HID0gODtcbmNvbnN0IFNQQUNFX0JFVFdFRU5fSVRFTVMgPSA4O1xuXG5jb25zdCBISUdITElHSFRfQkFSX1dJRFRIID0gMTA0O1xuY29uc3QgSElHSExJR0hUX0JBUl9IRUlHSFQgPSA4O1xuY29uc3QgSElHSExJR0hUX0JBUl9YID0gODtcblxuY29uc3QgQlVUVE9OX1ggPSA5NjtcbmNvbnN0IEJVVFRPTl9ZID0gMTM2O1xuXG5jb25zdCBDVVJTT1JfWCA9IDExNjtcbmNvbnN0IENVUlNPUl9ZID0gODQ7XG5jb25zdCBDVVJTT1JfU0hJRlQgPSAxNjtcblxuY29uc3QgSVRFTV9OQU1FX1ggPSAyNjtcbmNvbnN0IElURU1fSUNPTl9YID0gODtcbmNvbnN0IFNVQl9JQ09OX1ggPSA3O1xuY29uc3QgU1VCX0lDT05fWSA9IDg7XG5cbmV4cG9ydCBjbGFzcyBCYXR0bGVJdGVtV2luZG93IHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6IEdvbGRlblN1bjtcblxuICAgIHB1YmxpYyBiYXNlX3dpbmRvdzogV2luZG93O1xuICAgIHB1YmxpYyBncm91cDogUGhhc2VyLkdyb3VwO1xuXG4gICAgcHVibGljIGJ1dHRvbjogUGhhc2VyLlNwcml0ZTtcbiAgICBwdWJsaWMgaGlnaGxpZ2h0X2JhcjogUGhhc2VyLkdyYXBoaWNzO1xuXG4gICAgcHVibGljIGl0ZW1fbmFtZXM6IFRleHRPYmpbXTtcbiAgICBwdWJsaWMgb3RoZXJfc3ByaXRlczogKFBoYXNlci5TcHJpdGUgfCBQaGFzZXIuR3JvdXAgfCBQaGFzZXIuQml0bWFwVGV4dClbXTtcblxuICAgIHB1YmxpYyB3aW5kb3dfb3BlbjogYm9vbGVhbjtcbiAgICBwdWJsaWMgd2luZG93X2FjdGl2ZTogYm9vbGVhbjtcblxuICAgIHB1YmxpYyBpdGVtX2luZGV4OiBudW1iZXI7XG4gICAgcHVibGljIHBhZ2VfaW5kZXg6IG51bWJlcjtcbiAgICBwdWJsaWMgcGFnZV9udW1iZXI6IG51bWJlcjtcblxuICAgIHB1YmxpYyBjbG9zZV9jYWxsYmFjazogRnVuY3Rpb247XG4gICAgcHVibGljIHNldF9kZXNjcmlwdGlvbjogRnVuY3Rpb247XG4gICAgcHVibGljIGNob29zZW5fYWJpbGl0eTogc3RyaW5nO1xuXG4gICAgcHVibGljIGl0ZW1fb2JqOiBJdGVtU2xvdDtcbiAgICBwdWJsaWMgaXRlbXM6IEl0ZW1TbG90W107XG4gICAgcHVibGljIGFsbF9pdGVtczogSXRlbVNsb3RbXTtcbiAgICBwdWJsaWMgY2hhcjogTWFpbkNoYXI7XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lOiBQaGFzZXIuR2FtZSwgZGF0YTogR29sZGVuU3VuKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG5cbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBCQVNFX1dJTkRPV19YLCBCQVNFX1dJTkRPV19ZLCBCQVNFX1dJTkRPV19XSURUSCwgQkFTRV9XSU5ET1dfSEVJR0hUKTtcbiAgICAgICAgdGhpcy5ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcbiAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDA7XG5cbiAgICAgICAgdGhpcy5idXR0b24gPSB0aGlzLmdyb3VwLmNyZWF0ZShCVVRUT05fWCwgQlVUVE9OX1ksIFwiYnV0dG9uc1wiLCBcIml0ZW1cIik7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2JhciA9IHRoaXMuZ2FtZS5hZGQuZ3JhcGhpY3MoMCwgMCk7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci5ibGVuZE1vZGUgPSBQSVhJLmJsZW5kTW9kZXMuU0NSRUVOO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYWxwaGEgPSAwO1xuXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuYWRkX3Nwcml0ZV90b19ncm91cCh0aGlzLmhpZ2hsaWdodF9iYXIpO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYmVnaW5GaWxsKHRoaXMuYmFzZV93aW5kb3cuY29sb3IsIDEpO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuZHJhd1JlY3QoSElHSExJR0hUX0JBUl9YLCAwLCBISUdITElHSFRfQkFSX1dJRFRILCBISUdITElHSFRfQkFSX0hFSUdIVCk7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci5lbmRGaWxsKCk7XG5cbiAgICAgICAgdGhpcy5pdGVtX25hbWVzID0gW107XG4gICAgICAgIHRoaXMub3RoZXJfc3ByaXRlcyA9IFtdO1xuICAgIH1cblxuICAgIHNlbGVjdF9pdGVtKGluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5pdGVtX2luZGV4ID0gaW5kZXg7XG5cbiAgICAgICAgbGV0IGN1cnNvcl94ID0gQ1VSU09SX1g7XG4gICAgICAgIGxldCBjdXJzb3JfeSA9IENVUlNPUl9ZICsgdGhpcy5pdGVtX2luZGV4ICogQ1VSU09SX1NISUZUO1xuXG4gICAgICAgIGxldCB0d2Vlbl9jb25maWcgPSB7XG4gICAgICAgICAgICB0eXBlOiBDdXJzb3JNYW5hZ2VyLkN1cnNvclR3ZWVucy5QT0lOVCxcbiAgICAgICAgICAgIHZhcmlhbnQ6IFBvaW50VmFyaWFudHMuTk9STUFMLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmRhdGEuY3Vyc29yX21hbmFnZXIubW92ZV90byh7eDogY3Vyc29yX3gsIHk6IGN1cnNvcl95fSwge2FuaW1hdGU6IGZhbHNlLCB0d2Vlbl9jb25maWc6IHR3ZWVuX2NvbmZpZ30pO1xuICAgICAgICB0aGlzLmNoYW5nZV9pdGVtKCk7XG4gICAgfVxuXG4gICAgbmV4dF9pdGVtKCkge1xuICAgICAgICBpZiAodGhpcy5pdGVtcy5sZW5ndGggPT09IDEpIHJldHVybjtcbiAgICAgICAgdGhpcy5zZWxlY3RfaXRlbSgodGhpcy5pdGVtX2luZGV4ICsgMSkgJSB0aGlzLml0ZW1zLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgcHJldmlvdXNfaXRlbSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXRlbXMubGVuZ3RoID09PSAxKSByZXR1cm47XG4gICAgICAgIHRoaXMuc2VsZWN0X2l0ZW0oKHRoaXMuaXRlbV9pbmRleCArIHRoaXMuaXRlbXMubGVuZ3RoIC0gMSkgJSB0aGlzLml0ZW1zLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgbmV4dF9wYWdlKCkge1xuICAgICAgICBpZiAodGhpcy5wYWdlX251bWJlciA9PT0gMSkgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMucGFnZV9pbmRleCA9ICh0aGlzLnBhZ2VfaW5kZXggKyAxKSAlIHRoaXMucGFnZV9udW1iZXI7XG4gICAgICAgIHRoaXMuY2hhbmdlX3BhZ2UoKTtcbiAgICB9XG5cbiAgICBwcmV2aW91c19wYWdlKCkge1xuICAgICAgICBpZiAodGhpcy5wYWdlX251bWJlciA9PT0gMSkgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMucGFnZV9pbmRleCA9ICh0aGlzLnBhZ2VfaW5kZXggKyB0aGlzLnBhZ2VfbnVtYmVyIC0gMSkgJSB0aGlzLnBhZ2VfbnVtYmVyO1xuICAgICAgICB0aGlzLmNoYW5nZV9wYWdlKCk7XG4gICAgfVxuXG4gICAgdXBkYXRlX3Bvc2l0aW9uKCkge1xuICAgICAgICB0aGlzLmdyb3VwLnggPSB0aGlzLmdhbWUuY2FtZXJhLng7XG4gICAgICAgIHRoaXMuZ3JvdXAueSA9IHRoaXMuZ2FtZS5jYW1lcmEueTtcbiAgICB9XG5cbiAgICBjaGFuZ2VfcGFnZSgpIHtcbiAgICAgICAgdGhpcy5jb25maWdfcGFnZSgpO1xuXG4gICAgICAgIGlmICh0aGlzLml0ZW1faW5kZXggPj0gdGhpcy5pdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuaXRlbV9pbmRleCA9IHRoaXMuaXRlbXMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0X2l0ZW0odGhpcy5pdGVtX2luZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnNldF9kZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5zZXRfZGVzY3JpcHRpb24odGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFt0aGlzLml0ZW1zW3RoaXMuaXRlbV9pbmRleF0ua2V5X25hbWVdLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0X2hpZ2hsaWdodF9iYXIoKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5wYWdlX2luZGljYXRvci5zZWxlY3RfcGFnZSh0aGlzLnBhZ2VfaW5kZXgpO1xuICAgIH1cblxuICAgIGNoYW5nZV9pdGVtKCkge1xuICAgICAgICBpZiAodGhpcy5zZXRfZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuc2V0X2Rlc2NyaXB0aW9uKHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbdGhpcy5pdGVtc1t0aGlzLml0ZW1faW5kZXhdLmtleV9uYW1lXS5kZXNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRfaGlnaGxpZ2h0X2JhcigpO1xuICAgIH1cblxuICAgIHNldF9oaWdobGlnaHRfYmFyKCkge1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIueSA9IFRPUF9QQURESU5HICsgdGhpcy5pdGVtX2luZGV4ICogKFNQQUNFX0JFVFdFRU5fSVRFTVMgKyBISUdITElHSFRfQkFSX0hFSUdIVCk7XG4gICAgfVxuXG4gICAgY29uZmlnX3BhZ2UoKSB7XG4gICAgICAgIHRoaXMuY2xlYXJfc3ByaXRlcygpO1xuICAgICAgICB0aGlzLml0ZW1zID0gdGhpcy5hbGxfaXRlbXMuc2xpY2UodGhpcy5wYWdlX2luZGV4ICogRUxFTV9QRVJfUEFHRSwgKHRoaXMucGFnZV9pbmRleCArIDEpICogRUxFTV9QRVJfUEFHRSk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLml0ZW1zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFt0aGlzLml0ZW1zW2ldLmtleV9uYW1lXTtcbiAgICAgICAgICAgIGNvbnN0IGJhc2VfeSA9IFRPUF9QQURESU5HICsgaSAqIChTUEFDRV9CRVRXRUVOX0lURU1TICsgSElHSExJR0hUX0JBUl9IRUlHSFQpO1xuICAgICAgICAgICAgY29uc3QgaXRlbV95ID0gYmFzZV95IC0gNDtcblxuICAgICAgICAgICAgdGhpcy5vdGhlcl9zcHJpdGVzLnB1c2goXG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoSVRFTV9JQ09OX1gsIGl0ZW1feSwgXCJpdGVtc19pY29uc1wiLCB1bmRlZmluZWQsIHRoaXMuaXRlbXNbaV0ua2V5X25hbWUpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXRlbXNbaV0uZXF1aXBwZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm90aGVyX3Nwcml0ZXMucHVzaChcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoSVRFTV9JQ09OX1ggKyBTVUJfSUNPTl9YLCBpdGVtX3kgKyBTVUJfSUNPTl9ZLCBcImVxdWlwcGVkXCIpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLml0ZW1zW2ldLnF1YW50aXR5ID4gMSkge1xuICAgICAgICAgICAgICAgIGxldCBpdGVtX2NvdW50ID0gdGhpcy5nYW1lLmFkZC5iaXRtYXBUZXh0KFxuICAgICAgICAgICAgICAgICAgICBJVEVNX0lDT05fWCArIFNVQl9JQ09OX1gsXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1feSArIFNVQl9JQ09OX1ksXG4gICAgICAgICAgICAgICAgICAgIFwiZ3MtaXRlbS1ibXAtZm9udFwiLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1zW2ldLnF1YW50aXR5LnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cuYWRkX3Nwcml0ZV90b19ncm91cChpdGVtX2NvdW50KTtcbiAgICAgICAgICAgICAgICB0aGlzLm90aGVyX3Nwcml0ZXMucHVzaChpdGVtX2NvdW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGNvbG9yID0gbnVtYmVycy5ERUZBVUxUX0ZPTlRfQ09MT1I7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgaXRlbS51c2VfdHlwZSA9PT0gdXNlX3R5cGVzLk5PX1VTRSB8fFxuICAgICAgICAgICAgICAgICF0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFtpdGVtLnVzZV9hYmlsaXR5XS5pc19iYXR0bGVfYWJpbGl0eVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgY29sb3IgPSBudW1iZXJzLllFTExPV19GT05UX0NPTE9SO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihpdGVtLm5hbWUsIElURU1fTkFNRV9YLCBiYXNlX3ksIGZhbHNlLCBmYWxzZSwgY29sb3IpO1xuICAgICAgICAgICAgdGhpcy5pdGVtX25hbWVzLnB1c2gobmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRfcGFnZV9udW1iZXIoKSB7XG4gICAgICAgIGNvbnN0IGxpc3RfbGVuZ3RoID0gdGhpcy5hbGxfaXRlbXMubGVuZ3RoO1xuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyID0gKCgobGlzdF9sZW5ndGggLSAxKSAvIEVMRU1fUEVSX1BBR0UpIHwgMCkgKyAxO1xuXG4gICAgICAgIGlmICh0aGlzLnBhZ2VfaW5kZXggPj0gdGhpcy5wYWdlX251bWJlcikge1xuICAgICAgICAgICAgdGhpcy5wYWdlX2luZGV4ID0gdGhpcy5wYWdlX251bWJlciAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5wYWdlX2luZGljYXRvci5pbml0aWFsaXplKHRoaXMucGFnZV9udW1iZXIsIHRoaXMucGFnZV9pbmRleCwgUGFnZUluZGljYXRvck1vZGVzLkZMQVNIKTtcbiAgICB9XG5cbiAgICBtb3VudF93aW5kb3coKSB7XG4gICAgICAgIHRoaXMuYWxsX2l0ZW1zID0gdGhpcy5jaGFyLml0ZW1zO1xuICAgICAgICB0aGlzLmFsbF9pdGVtcyA9IF8uc29ydEJ5KHRoaXMuYWxsX2l0ZW1zLCBbXG4gICAgICAgICAgICBpdGVtX29iaiA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFtpdGVtX29iai5rZXlfbmFtZV0udXNlX3R5cGUgPT09IHVzZV90eXBlcy5OT19VU0UgfHxcbiAgICAgICAgICAgICAgICAgICAgIXRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W3RoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbaXRlbV9vYmoua2V5X25hbWVdLnVzZV9hYmlsaXR5XVxuICAgICAgICAgICAgICAgICAgICAgICAgLmlzX2JhdHRsZV9hYmlsaXR5XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0pO1xuXG4gICAgICAgIHRoaXMuc2V0X3BhZ2VfbnVtYmVyKCk7XG4gICAgICAgIHRoaXMuY29uZmlnX3BhZ2UoKTtcbiAgICB9XG5cbiAgICBjbGVhcl9zcHJpdGVzKCkge1xuICAgICAgICB0aGlzLml0ZW1fbmFtZXMuZm9yRWFjaCh0ZXh0ID0+IHtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX3RleHQodGV4dCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm90aGVyX3Nwcml0ZXMuZm9yRWFjaChzcHJpdGUgPT4ge1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfZnJvbV9ncm91cChzcHJpdGUsIHRydWUpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpdGVtX2Nob29zZSgpIHtcbiAgICAgICAgbGV0IGNvbnRyb2xzID0gW1xuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuTEVGVCwgb25fZG93bjogdGhpcy5wcmV2aW91c19wYWdlLmJpbmQodGhpcyl9LFxuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuUklHSFQsIG9uX2Rvd246IHRoaXMubmV4dF9wYWdlLmJpbmQodGhpcyl9LFxuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuVVAsIG9uX2Rvd246IHRoaXMucHJldmlvdXNfaXRlbS5iaW5kKHRoaXMpfSxcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkRPV04sIG9uX2Rvd246IHRoaXMubmV4dF9pdGVtLmJpbmQodGhpcyl9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGtleTogdGhpcy5kYXRhLmdhbWVwYWQuQSxcbiAgICAgICAgICAgICAgICBvbl9kb3duOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRoaXNfaXRlbSA9IHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbdGhpcy5pdGVtc1t0aGlzLml0ZW1faW5kZXhdLmtleV9uYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc19pdGVtLnVzZV90eXBlICE9PSB1c2VfdHlwZXMuTk9fVVNFICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFt0aGlzX2l0ZW0udXNlX2FiaWxpdHldLmlzX2JhdHRsZV9hYmlsaXR5XG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaG9vc2VuX2FiaWxpdHkgPSB0aGlzX2l0ZW0udXNlX2FiaWxpdHk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1fb2JqID0gdGhpcy5pdGVtc1t0aGlzLml0ZW1faW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKHRoaXMuY2xvc2VfY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAga2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5CLFxuICAgICAgICAgICAgICAgIG9uX2Rvd246ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaG9vc2VuX2FiaWxpdHkgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1fb2JqID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSh0aGlzLmNsb3NlX2NhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXTtcblxuICAgICAgICB0aGlzLmRhdGEuY29udHJvbF9tYW5hZ2VyLnNldF9jb250cm9sKGNvbnRyb2xzLCB7XG4gICAgICAgICAgICBsb29wX2NvbmZpZ3M6IHt2ZXJ0aWNhbDogdHJ1ZSwgaG9yaXpvbnRhbDogdHJ1ZX0sXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9wZW4oY2hhcjogTWFpbkNoYXIsIGNsb3NlX2NhbGxiYWNrOiBGdW5jdGlvbiwgc2V0X2Rlc2NyaXB0aW9uOiBGdW5jdGlvbiwgLi4uYXJnczogYW55W10pIHtcbiAgICAgICAgdGhpcy5jaGFyID0gY2hhcjtcbiAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayA9IGNsb3NlX2NhbGxiYWNrO1xuICAgICAgICB0aGlzLnNldF9kZXNjcmlwdGlvbiA9IHNldF9kZXNjcmlwdGlvbjtcblxuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMTtcbiAgICAgICAgdGhpcy5pdGVtX2luZGV4ID0gMDtcbiAgICAgICAgdGhpcy5wYWdlX2luZGV4ID0gMDtcbiAgICAgICAgdGhpcy5jaG9vc2VuX2FiaWxpdHkgPSBudWxsO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYWxwaGEgPSAxO1xuXG4gICAgICAgIHRoaXMudXBkYXRlX3Bvc2l0aW9uKCk7XG4gICAgICAgIHRoaXMuc2V0X2hpZ2hsaWdodF9iYXIoKTtcbiAgICAgICAgdGhpcy5tb3VudF93aW5kb3coKTtcblxuICAgICAgICB0aGlzLnNlbGVjdF9pdGVtKDApO1xuICAgICAgICB0aGlzLml0ZW1fY2hvb3NlKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuc2V0X2Rlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnNldF9kZXNjcmlwdGlvbih0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W3RoaXMuaXRlbXNbdGhpcy5pdGVtX2luZGV4XS5rZXlfbmFtZV0uZGVzY3JpcHRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zaG93KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2luZG93X29wZW4gPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIHNob3coKSB7XG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAxO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYWxwaGEgPSAxO1xuXG4gICAgICAgIHRoaXMuc2VsZWN0X2l0ZW0odGhpcy5pdGVtX2luZGV4KTtcbiAgICAgICAgdGhpcy5pdGVtX2Nob29zZSgpO1xuXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2hvdygoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSB0cnVlO1xuICAgICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgaGlkZShjYWxsYmFjaz86IEZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLmRhdGEuY3Vyc29yX21hbmFnZXIuaGlkZSgpO1xuXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY2xvc2UoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRoaXMuY2hvb3Nlbl9hYmlsaXR5LCB0aGlzLml0ZW1fb2JqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGNsb3NlKGNhbGxiYWNrPzogRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5jbGVhcl9zcHJpdGVzKCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cucGFnZV9pbmRpY2F0b3IudGVybWluYW50ZSgpO1xuXG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLmRhdGEuY3Vyc29yX21hbmFnZXIuaGlkZSgpO1xuICAgICAgICB0aGlzLmRhdGEuY29udHJvbF9tYW5hZ2VyLnJlc2V0KCk7XG5cbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5jbG9zZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sodGhpcy5jaG9vc2VuX2FiaWxpdHksIHRoaXMuaXRlbV9vYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5kZXN0cm95KGZhbHNlKTtcbiAgICAgICAgdGhpcy5ncm91cC5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuZGF0YS5jdXJzb3JfbWFuYWdlci5oaWRlKCk7XG4gICAgICAgIHRoaXMuZGF0YS5jb250cm9sX21hbmFnZXIucmVzZXQoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQge1RleHRPYmosIFdpbmRvd30gZnJvbSBcIi4uLy4uL1dpbmRvd1wiO1xuaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tIFwiLi4vLi4vbWFnaWNfbnVtYmVyc1wiO1xuaW1wb3J0IHtEamlubn0gZnJvbSBcIi4uLy4uL0RqaW5uXCI7XG5pbXBvcnQge1N1bW1vbkRqaW5uU3RhbmRieVdpbmRvd30gZnJvbSBcIi4vU3VtbW9uRGppbm5TdGFuZGJ5V2luZG93XCI7XG5pbXBvcnQge0JhdHRsZX0gZnJvbSBcIi4uLy4uL2JhdHRsZS9CYXR0bGVcIjtcbmltcG9ydCB7TWFpbkNoYXJ9IGZyb20gXCIuLi8uLi9NYWluQ2hhclwiO1xuaW1wb3J0IHtHb2xkZW5TdW59IGZyb20gXCIuLi8uLi9Hb2xkZW5TdW5cIjtcbmltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuaW1wb3J0IHtDdXJzb3JNYW5hZ2VyLCBQb2ludFZhcmlhbnRzfSBmcm9tIFwiLi4vLi4vdXRpbHMvQ3Vyc29yTWFuYWdlclwiO1xuaW1wb3J0IHtQYWdlSW5kaWNhdG9yTW9kZXN9IGZyb20gXCIuLi8uLi9zdXBwb3J0X21lbnVzL1BhZ2VJbmRpY2F0b3JcIjtcblxuY29uc3QgQkFTRV9XSU5ET1dfWCA9IDEwNDtcbmNvbnN0IEJBU0VfV0lORE9XX1kgPSA4ODtcbmNvbnN0IEJBU0VfV0lORE9XX1dJRFRIID0gMTMyO1xuY29uc3QgQkFTRV9XSU5ET1dfSEVJR0hUID0gNjg7XG5cbmNvbnN0IEVMRU1fUEVSX1BBR0UgPSA0O1xuY29uc3QgVE9QX1BBRERJTkcgPSA4O1xuY29uc3QgU1BBQ0VfQkVUV0VFTl9JVEVNUyA9IDg7XG5cbmNvbnN0IEhJR0hMSUdIVF9CQVJfV0lEVEggPSAxMjA7XG5jb25zdCBISUdITElHSFRfQkFSX0hFSUdIVCA9IDg7XG5jb25zdCBISUdITElHSFRfQkFSX1ggPSA4O1xuXG5jb25zdCBCVVRUT05fWCA9IDgwO1xuY29uc3QgQlVUVE9OX1kgPSAxMzY7XG5jb25zdCBTVU1NT05fTkFNRV9YID0gMjg7XG5cbmNvbnN0IENVUlNPUl9YID0gOTg7XG5jb25zdCBDVVJTT1JfWSA9IDEwMDtcbmNvbnN0IENVUlNPUl9TSElGVCA9IDE2O1xuXG5jb25zdCBTVU1NT05fSUNPTl9YID0gMTA7XG5cbmV4cG9ydCBjbGFzcyBCYXR0bGVTdW1tb25XaW5kb3cge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgZGF0YTogR29sZGVuU3VuO1xuXG4gICAgcHVibGljIGJhc2Vfd2luZG93OiBXaW5kb3c7XG4gICAgcHVibGljIGRqaW5uX251bWJlcnNfd2luZG93OiBTdW1tb25EamlublN0YW5kYnlXaW5kb3c7XG4gICAgcHVibGljIGdyb3VwOiBQaGFzZXIuR3JvdXA7XG5cbiAgICBwdWJsaWMgYnV0dG9uOiBQaGFzZXIuU3ByaXRlO1xuICAgIHB1YmxpYyBoaWdobGlnaHRfYmFyOiBQaGFzZXIuR3JhcGhpY3M7XG5cbiAgICBwdWJsaWMgc3VtbW9uX25hbWVzOiBUZXh0T2JqW107XG4gICAgcHVibGljIG90aGVyX3Nwcml0ZXM6IChQaGFzZXIuU3ByaXRlIHwgUGhhc2VyLkdyb3VwIHwgUGhhc2VyLkJpdG1hcFRleHQpW107XG5cbiAgICBwdWJsaWMgd2luZG93X29wZW46IGJvb2xlYW47XG4gICAgcHVibGljIHdpbmRvd19hY3RpdmU6IGJvb2xlYW47XG4gICAgcHVibGljIGNsb3NlX2NhbGxiYWNrOiBGdW5jdGlvbjtcbiAgICBwdWJsaWMgc2V0X2Rlc2NyaXB0aW9uOiBGdW5jdGlvbjtcblxuICAgIHB1YmxpYyBzdW1tb25faW5kZXg6IG51bWJlcjtcbiAgICBwdWJsaWMgcGFnZV9pbmRleDogbnVtYmVyO1xuICAgIHB1YmxpYyBwYWdlX251bWJlcjogbnVtYmVyO1xuXG4gICAgcHVibGljIGNob29zZW5fYWJpbGl0eTogc3RyaW5nO1xuICAgIHB1YmxpYyBzdW1tb25zOiBhbnlbXTtcbiAgICBwdWJsaWMgYWxsX3N1bW1vbnM6IGFueVtdO1xuICAgIHB1YmxpYyBjaGFyOiBNYWluQ2hhcjtcbiAgICBwdWJsaWMgZGppbm5pX2FscmVhZHlfdXNlZDoge1tlbGVtZW50OiBzdHJpbmddOiBudW1iZXJ9O1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZTogUGhhc2VyLkdhbWUsIGRhdGE6IEdvbGRlblN1bikge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cgPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgQkFTRV9XSU5ET1dfWCwgQkFTRV9XSU5ET1dfWSwgQkFTRV9XSU5ET1dfV0lEVEgsIEJBU0VfV0lORE9XX0hFSUdIVCk7XG4gICAgICAgIHRoaXMuZGppbm5fbnVtYmVyc193aW5kb3cgPSBuZXcgU3VtbW9uRGppbm5TdGFuZGJ5V2luZG93KGdhbWUpO1xuICAgICAgICB0aGlzLmdyb3VwID0gdGhpcy5nYW1lLmFkZC5ncm91cCgpO1xuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMDtcblxuICAgICAgICB0aGlzLmJ1dHRvbiA9IHRoaXMuZ3JvdXAuY3JlYXRlKEJVVFRPTl9YLCBCVVRUT05fWSwgXCJidXR0b25zXCIsIFwic3VtbW9uXCIpO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIgPSB0aGlzLmdhbWUuYWRkLmdyYXBoaWNzKDAsIDApO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYmxlbmRNb2RlID0gUElYSS5ibGVuZE1vZGVzLlNDUkVFTjtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmFscGhhID0gMDtcblxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmFkZF9zcHJpdGVfdG9fZ3JvdXAodGhpcy5oaWdobGlnaHRfYmFyKTtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmJlZ2luRmlsbCh0aGlzLmJhc2Vfd2luZG93LmNvbG9yLCAxKTtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmRyYXdSZWN0KEhJR0hMSUdIVF9CQVJfWCwgMCwgSElHSExJR0hUX0JBUl9XSURUSCwgSElHSExJR0hUX0JBUl9IRUlHSFQpO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuZW5kRmlsbCgpO1xuXG4gICAgICAgIHRoaXMuc3VtbW9uX25hbWVzID0gW107XG4gICAgICAgIHRoaXMub3RoZXJfc3ByaXRlcyA9IFtdO1xuICAgIH1cblxuICAgIHNlbGVjdF9zdW1tb24oaW5kZXg6IG51bWJlcikge1xuICAgICAgICB0aGlzLnN1bW1vbl9pbmRleCA9IGluZGV4O1xuXG4gICAgICAgIGxldCBjdXJzb3JfeCA9IENVUlNPUl9YO1xuICAgICAgICBsZXQgY3Vyc29yX3kgPSBDVVJTT1JfWSArIHRoaXMuc3VtbW9uX2luZGV4ICogQ1VSU09SX1NISUZUO1xuXG4gICAgICAgIGxldCB0d2Vlbl9jb25maWcgPSB7XG4gICAgICAgICAgICB0eXBlOiBDdXJzb3JNYW5hZ2VyLkN1cnNvclR3ZWVucy5QT0lOVCxcbiAgICAgICAgICAgIHZhcmlhbnQ6IFBvaW50VmFyaWFudHMuTk9STUFMLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmRhdGEuY3Vyc29yX21hbmFnZXIubW92ZV90byh7eDogY3Vyc29yX3gsIHk6IGN1cnNvcl95fSwge2FuaW1hdGU6IGZhbHNlLCB0d2Vlbl9jb25maWc6IHR3ZWVuX2NvbmZpZ30pO1xuICAgICAgICB0aGlzLmNoYW5nZV9zdW1tb24oKTtcbiAgICB9XG5cbiAgICBuZXh0X3N1bW1vbigpIHtcbiAgICAgICAgaWYgKHRoaXMuc3VtbW9ucy5sZW5ndGggPT09IDEpIHJldHVybjtcbiAgICAgICAgdGhpcy5zZWxlY3Rfc3VtbW9uKCh0aGlzLnN1bW1vbl9pbmRleCArIDEpICUgdGhpcy5zdW1tb25zLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgcHJldmlvdXNfc3VtbW9uKCkge1xuICAgICAgICBpZiAodGhpcy5zdW1tb25zLmxlbmd0aCA9PT0gMSkgcmV0dXJuO1xuICAgICAgICB0aGlzLnNlbGVjdF9zdW1tb24oKHRoaXMuc3VtbW9uX2luZGV4ICsgdGhpcy5zdW1tb25zLmxlbmd0aCAtIDEpICUgdGhpcy5zdW1tb25zLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgbmV4dF9wYWdlKCkge1xuICAgICAgICBpZiAodGhpcy5wYWdlX251bWJlciA9PT0gMSkgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMucGFnZV9pbmRleCA9ICh0aGlzLnBhZ2VfaW5kZXggKyAxKSAlIHRoaXMucGFnZV9udW1iZXI7XG4gICAgICAgIHRoaXMuY2hhbmdlX3BhZ2UoKTtcbiAgICB9XG5cbiAgICBwcmV2aW91c19wYWdlKCkge1xuICAgICAgICBpZiAodGhpcy5wYWdlX251bWJlciA9PT0gMSkgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMucGFnZV9pbmRleCA9ICh0aGlzLnBhZ2VfaW5kZXggKyB0aGlzLnBhZ2VfbnVtYmVyIC0gMSkgJSB0aGlzLnBhZ2VfbnVtYmVyO1xuICAgICAgICB0aGlzLmNoYW5nZV9wYWdlKCk7XG4gICAgfVxuXG4gICAgdXBkYXRlX3Bvc2l0aW9uKCkge1xuICAgICAgICB0aGlzLmdyb3VwLnggPSB0aGlzLmdhbWUuY2FtZXJhLng7XG4gICAgICAgIHRoaXMuZ3JvdXAueSA9IHRoaXMuZ2FtZS5jYW1lcmEueTtcbiAgICB9XG5cbiAgICBjaGFuZ2VfcGFnZSgpIHtcbiAgICAgICAgdGhpcy5jb25maWdfcGFnZSgpO1xuXG4gICAgICAgIGlmICh0aGlzLnN1bW1vbl9pbmRleCA+PSB0aGlzLnN1bW1vbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnN1bW1vbl9pbmRleCA9IHRoaXMuc3VtbW9ucy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3Rfc3VtbW9uKHRoaXMuc3VtbW9uX2luZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnNldF9kZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5zZXRfZGVzY3JpcHRpb24odGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3RbdGhpcy5zdW1tb25zW3RoaXMuc3VtbW9uX2luZGV4XS5rZXlfbmFtZV0uZGVzY3JpcHRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRfaGlnaGxpZ2h0X2JhcigpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnBhZ2VfaW5kaWNhdG9yLnNlbGVjdF9wYWdlKHRoaXMucGFnZV9pbmRleCk7XG4gICAgICAgIHRoaXMuZGppbm5fbnVtYmVyc193aW5kb3cuc2V0X251bWJlcnModGhpcy5zdW1tb25zW3RoaXMuc3VtbW9uX2luZGV4XS5yZXF1aXJlbWVudHMpO1xuICAgIH1cblxuICAgIGNoYW5nZV9zdW1tb24oKSB7XG4gICAgICAgIGlmICh0aGlzLnNldF9kZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5zZXRfZGVzY3JpcHRpb24odGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3RbdGhpcy5zdW1tb25zW3RoaXMuc3VtbW9uX2luZGV4XS5rZXlfbmFtZV0uZGVzY3JpcHRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRfaGlnaGxpZ2h0X2JhcigpO1xuICAgICAgICB0aGlzLmRqaW5uX251bWJlcnNfd2luZG93LnNldF9udW1iZXJzKHRoaXMuc3VtbW9uc1t0aGlzLnN1bW1vbl9pbmRleF0ucmVxdWlyZW1lbnRzKTtcbiAgICB9XG5cbiAgICBzZXRfaGlnaGxpZ2h0X2JhcigpIHtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLnkgPSBUT1BfUEFERElORyArIHRoaXMuc3VtbW9uX2luZGV4ICogKFNQQUNFX0JFVFdFRU5fSVRFTVMgKyBISUdITElHSFRfQkFSX0hFSUdIVCk7XG4gICAgfVxuXG4gICAgY29uZmlnX3BhZ2UoKSB7XG4gICAgICAgIHRoaXMuY2xlYXJfc3ByaXRlcygpO1xuICAgICAgICB0aGlzLnN1bW1vbnMgPSB0aGlzLmFsbF9zdW1tb25zLnNsaWNlKHRoaXMucGFnZV9pbmRleCAqIEVMRU1fUEVSX1BBR0UsICh0aGlzLnBhZ2VfaW5kZXggKyAxKSAqIEVMRU1fUEVSX1BBR0UpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdW1tb25zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBhYmlsaXR5ID0gdGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3RbdGhpcy5zdW1tb25zW2ldLmtleV9uYW1lXTtcbiAgICAgICAgICAgIGNvbnN0IGJhc2VfeSA9IFRPUF9QQURESU5HICsgaSAqIChTUEFDRV9CRVRXRUVOX0lURU1TICsgSElHSExJR0hUX0JBUl9IRUlHSFQpO1xuICAgICAgICAgICAgY29uc3Qgc3VtbW9uX3kgPSBiYXNlX3kgLSAzO1xuXG4gICAgICAgICAgICB0aGlzLm90aGVyX3Nwcml0ZXMucHVzaChcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChcbiAgICAgICAgICAgICAgICAgICAgU1VNTU9OX0lDT05fWCxcbiAgICAgICAgICAgICAgICAgICAgc3VtbW9uX3ksXG4gICAgICAgICAgICAgICAgICAgIFwiYWJpbGl0aWVzX2ljb25zXCIsXG4gICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdW1tb25zW2ldLmtleV9uYW1lXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGxldCBjb2xvciA9IG51bWJlcnMuREVGQVVMVF9GT05UX0NPTE9SO1xuICAgICAgICAgICAgaWYgKCF0aGlzLnN1bW1vbnNbaV0uY2FuX2JlX3N1bW1vbmVkKSB7XG4gICAgICAgICAgICAgICAgY29sb3IgPSBudW1iZXJzLlJFRF9GT05UX0NPTE9SO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgICAgICBhYmlsaXR5Lm5hbWUsXG4gICAgICAgICAgICAgICAgU1VNTU9OX05BTUVfWCxcbiAgICAgICAgICAgICAgICBiYXNlX3ksXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgY29sb3JcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnN1bW1vbl9uYW1lcy5wdXNoKG5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0X3BhZ2VfbnVtYmVyKCkge1xuICAgICAgICBjb25zdCBsaXN0X2xlbmd0aCA9IHRoaXMuYWxsX3N1bW1vbnMubGVuZ3RoO1xuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyID0gKCgobGlzdF9sZW5ndGggLSAxKSAvIEVMRU1fUEVSX1BBR0UpIHwgMCkgKyAxO1xuXG4gICAgICAgIGlmICh0aGlzLnBhZ2VfaW5kZXggPj0gdGhpcy5wYWdlX251bWJlcikge1xuICAgICAgICAgICAgdGhpcy5wYWdlX2luZGV4ID0gdGhpcy5wYWdlX251bWJlciAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5wYWdlX2luZGljYXRvci5pbml0aWFsaXplKHRoaXMucGFnZV9udW1iZXIsIHRoaXMucGFnZV9pbmRleCwgUGFnZUluZGljYXRvck1vZGVzLkZMQVNIKTtcbiAgICB9XG5cbiAgICBtb3VudF93aW5kb3coKSB7XG4gICAgICAgIGNvbnN0IHN0YW5kYnlfZGppbm5pID0gRGppbm4uZ2V0X3N0YW5kYnlfZGppbm5pKFxuICAgICAgICAgICAgdGhpcy5kYXRhLmluZm8uZGppbm5pX2xpc3QsXG4gICAgICAgICAgICBNYWluQ2hhci5nZXRfYWN0aXZlX3BsYXllcnModGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YSwgQmF0dGxlLk1BWF9DSEFSU19JTl9CQVRUTEUpXG4gICAgICAgICk7XG4gICAgICAgIGZvciAobGV0IGVsZW0gaW4gc3RhbmRieV9kamlubmkpIHtcbiAgICAgICAgICAgIHN0YW5kYnlfZGppbm5pW2VsZW1dIC09IHRoaXMuZGppbm5pX2FscmVhZHlfdXNlZFtlbGVtXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYWxsX3N1bW1vbnMgPSBfLmZsYXRNYXAodGhpcy5kYXRhLmluZm8uc3VtbW9uc19saXN0LCBzdW1tb24gPT4ge1xuICAgICAgICAgICAgaWYgKCFzdW1tb24uYXZhaWxhYmxlKSByZXR1cm4gW107XG4gICAgICAgICAgICBjb25zdCBjYW5fYmVfc3VtbW9uZWQgPSBfLmV2ZXJ5KHN1bW1vbi5yZXF1aXJlbWVudHMsICh2YWx1ZSwgZWxlbSkgPT4gdmFsdWUgPD0gc3RhbmRieV9kamlubmlbZWxlbV0pO1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHt9LCBzdW1tb24sIHtcbiAgICAgICAgICAgICAgICAgICAgY2FuX2JlX3N1bW1vbmVkOiBjYW5fYmVfc3VtbW9uZWQsXG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiBjYW5fYmVfc3VtbW9uZWQgPyAtc3VtbW9uLmluZGV4IDogc3VtbW9uLmluZGV4LFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hbGxfc3VtbW9ucyA9IF8uc29ydEJ5KHRoaXMuYWxsX3N1bW1vbnMsIFtcbiAgICAgICAgICAgIHN1bW1vbiA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1bW1vbi5pbmRleDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0pO1xuXG4gICAgICAgIHRoaXMuc2V0X3BhZ2VfbnVtYmVyKCk7XG4gICAgICAgIHRoaXMuY29uZmlnX3BhZ2UoKTtcbiAgICB9XG5cbiAgICBjbGVhcl9zcHJpdGVzKCkge1xuICAgICAgICB0aGlzLnN1bW1vbl9uYW1lcy5mb3JFYWNoKHRleHQgPT4ge1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfdGV4dCh0ZXh0KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5vdGhlcl9zcHJpdGVzLmZvckVhY2goc3ByaXRlID0+IHtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX2Zyb21fZ3JvdXAoc3ByaXRlLCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3VtbW9uX2Nob29zZSgpIHtcbiAgICAgICAgbGV0IGNvbnRyb2xzID0gW1xuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuTEVGVCwgb25fZG93bjogdGhpcy5wcmV2aW91c19wYWdlLmJpbmQodGhpcyl9LFxuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuUklHSFQsIG9uX2Rvd246IHRoaXMubmV4dF9wYWdlLmJpbmQodGhpcyl9LFxuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuVVAsIG9uX2Rvd246IHRoaXMucHJldmlvdXNfc3VtbW9uLmJpbmQodGhpcyl9LFxuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuRE9XTiwgb25fZG93bjogdGhpcy5uZXh0X3N1bW1vbi5iaW5kKHRoaXMpfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkEsXG4gICAgICAgICAgICAgICAgb25fZG93bjogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNob29zZW5fYWJpbGl0eSA9IHRoaXMuc3VtbW9uc1t0aGlzLnN1bW1vbl9pbmRleF0ua2V5X25hbWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSh0aGlzLmNsb3NlX2NhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkIsXG4gICAgICAgICAgICAgICAgb25fZG93bjogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNob29zZW5fYWJpbGl0eSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UodGhpcy5jbG9zZV9jYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF07XG5cbiAgICAgICAgdGhpcy5kYXRhLmNvbnRyb2xfbWFuYWdlci5zZXRfY29udHJvbChjb250cm9scywge1xuICAgICAgICAgICAgbG9vcF9jb25maWdzOiB7dmVydGljYWw6IHRydWUsIGhvcml6b250YWw6IHRydWV9LFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvcGVuKFxuICAgICAgICBjaGFyOiBNYWluQ2hhcixcbiAgICAgICAgY2xvc2VfY2FsbGJhY2s6IEZ1bmN0aW9uLFxuICAgICAgICBzZXRfZGVzY3JpcHRpb246IEZ1bmN0aW9uLFxuICAgICAgICBkamlubmlfYWxyZWFkeV91c2VkPzoge1tlbGVtZW50OiBzdHJpbmddOiBudW1iZXJ9XG4gICAgKSB7XG4gICAgICAgIHRoaXMuY2hhciA9IGNoYXI7XG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBjbG9zZV9jYWxsYmFjaztcbiAgICAgICAgdGhpcy5zZXRfZGVzY3JpcHRpb24gPSBzZXRfZGVzY3JpcHRpb247XG4gICAgICAgIHRoaXMuZGppbm5pX2FscmVhZHlfdXNlZCA9IGRqaW5uaV9hbHJlYWR5X3VzZWQ7XG5cbiAgICAgICAgdGhpcy5zdW1tb25faW5kZXggPSAwO1xuICAgICAgICB0aGlzLnBhZ2VfaW5kZXggPSAwO1xuICAgICAgICB0aGlzLmNob29zZW5fYWJpbGl0eSA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmFscGhhID0gMTtcbiAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDE7XG4gICAgICAgIHRoaXMuZGppbm5fbnVtYmVyc193aW5kb3cub3BlbigpO1xuXG4gICAgICAgIHRoaXMudXBkYXRlX3Bvc2l0aW9uKCk7XG4gICAgICAgIHRoaXMuc2V0X2hpZ2hsaWdodF9iYXIoKTtcbiAgICAgICAgdGhpcy5tb3VudF93aW5kb3coKTtcblxuICAgICAgICB0aGlzLmRqaW5uX251bWJlcnNfd2luZG93LnNldF9udW1iZXJzKHRoaXMuc3VtbW9uc1t0aGlzLnN1bW1vbl9pbmRleF0ucmVxdWlyZW1lbnRzKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rfc3VtbW9uKDApO1xuICAgICAgICB0aGlzLnN1bW1vbl9jaG9vc2UoKTtcblxuICAgICAgICBpZiAodGhpcy5zZXRfZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuc2V0X2Rlc2NyaXB0aW9uKHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W3RoaXMuc3VtbW9uc1t0aGlzLnN1bW1vbl9pbmRleF0ua2V5X25hbWVdLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNob3coKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSB0cnVlO1xuICAgICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgc2hvdygpIHtcbiAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDE7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci5hbHBoYSA9IDE7XG5cbiAgICAgICAgdGhpcy5kamlubl9udW1iZXJzX3dpbmRvdy5vcGVuKCk7XG4gICAgICAgIHRoaXMuZGppbm5fbnVtYmVyc193aW5kb3cuc2V0X251bWJlcnModGhpcy5zdW1tb25zW3RoaXMuc3VtbW9uX2luZGV4XS5yZXF1aXJlbWVudHMpO1xuICAgICAgICB0aGlzLnNlbGVjdF9zdW1tb24odGhpcy5zdW1tb25faW5kZXgpO1xuICAgICAgICB0aGlzLnN1bW1vbl9jaG9vc2UoKTtcblxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNob3coKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGhpZGUoY2FsbGJhY2s/OiBGdW5jdGlvbikge1xuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMDtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmFscGhhID0gMDtcbiAgICAgICAgdGhpcy5kYXRhLmN1cnNvcl9tYW5hZ2VyLmhpZGUoKTtcblxuICAgICAgICB0aGlzLmRqaW5uX251bWJlcnNfd2luZG93LmNsb3NlKCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY2xvc2UoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRoaXMuY2hvb3Nlbl9hYmlsaXR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGNsb3NlKGNhbGxiYWNrPzogRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5jbGVhcl9zcHJpdGVzKCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cucGFnZV9pbmRpY2F0b3IudGVybWluYW50ZSgpO1xuXG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYWxwaGEgPSAwO1xuXG4gICAgICAgIHRoaXMuZGF0YS5jdXJzb3JfbWFuYWdlci5oaWRlKCk7XG4gICAgICAgIHRoaXMuZGF0YS5jb250cm9sX21hbmFnZXIucmVzZXQoKTtcblxuICAgICAgICB0aGlzLmRqaW5uX251bWJlcnNfd2luZG93LmNsb3NlKCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY2xvc2UoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRoaXMuY2hvb3Nlbl9hYmlsaXR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuZGVzdHJveShmYWxzZSk7XG4gICAgICAgIHRoaXMuZ3JvdXAuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmRqaW5uX251bWJlcnNfd2luZG93LmRlc3Ryb3koKTtcblxuICAgICAgICB0aGlzLmRhdGEuY3Vyc29yX21hbmFnZXIuaGlkZSgpO1xuICAgICAgICB0aGlzLmRhdGEuY29udHJvbF9tYW5hZ2VyLnJlc2V0KCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtUZXh0T2JqLCBXaW5kb3d9IGZyb20gXCIuLi8uLi9XaW5kb3dcIjtcbmltcG9ydCB7b3JkZXJlZF9lbGVtZW50c30gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5cbmNvbnN0IEJBU0VfV0lOX1ggPSAxNjA7XG5jb25zdCBCQVNFX1dJTl9ZID0gNjQ7XG5jb25zdCBCQVNFX1dJTl9XSURUSCA9IDc2O1xuY29uc3QgQkFTRV9XSU5fSEVJR0hUID0gMjA7XG5jb25zdCBTVEFSX0xFRlRfUEFERElORyA9IDk7XG5jb25zdCBTVEFSX1RPUF9QQURESU5HID0gOTtcbmNvbnN0IFRFWFRfTEVGVF9QQURESU5HID0gMjI7XG5jb25zdCBURVhUX1RPUF9QQURESU5HID0gODtcbmNvbnN0IFNQQUNFX0JFVFdFRU5fU1RBUlMgPSAxNjtcbmNvbnN0IFNQQUNFX0JFVFdFRU5fVEVYVFMgPSAxNjtcbmNvbnN0IEhJR0hMSUdIVF9XSURUSCA9IDE2O1xuY29uc3QgSElHSExJR0hUX0hFSUdIVCA9IDg7XG5jb25zdCBISUdITElHSFRfTEVGVF9QQURESU5HID0gODtcbmNvbnN0IEhJR0hMSUdIVF9UT1BfUEFERElORyA9IDg7XG5cbmV4cG9ydCBjbGFzcyBTdW1tb25EamlublN0YW5kYnlXaW5kb3cge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgYmFzZV93aW5kb3c6IFdpbmRvdztcbiAgICBwdWJsaWMgdGV4dHM6IHtbZWxlbWVudDogc3RyaW5nXTogVGV4dE9ian07XG4gICAgcHVibGljIGdyYXBoaWNzOiB7W2VsZW1lbnQ6IHN0cmluZ106IFBoYXNlci5HcmFwaGljc307XG4gICAgcHVibGljIHRpbWVyczoge1tlbGVtZW50OiBzdHJpbmddOiBQaGFzZXIuVGltZXJ9O1xuICAgIHB1YmxpYyB3aW5kb3dfb3BlbjogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWUpIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBCQVNFX1dJTl9YLCBCQVNFX1dJTl9ZLCBCQVNFX1dJTl9XSURUSCwgQkFTRV9XSU5fSEVJR0hUKTtcbiAgICAgICAgdGhpcy50ZXh0cyA9IHt9O1xuICAgICAgICB0aGlzLmdyYXBoaWNzID0ge307XG4gICAgICAgIHRoaXMudGltZXJzID0ge307XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3JkZXJlZF9lbGVtZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IG9yZGVyZWRfZWxlbWVudHNbaV07XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChcbiAgICAgICAgICAgICAgICBTVEFSX0xFRlRfUEFERElORyArIGkgKiBTUEFDRV9CRVRXRUVOX1NUQVJTLFxuICAgICAgICAgICAgICAgIFNUQVJfVE9QX1BBRERJTkcsXG4gICAgICAgICAgICAgICAgZWxlbWVudCArIFwiX3N0YXJcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMudGV4dHNbZWxlbWVudF0gPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICAgICAgVEVYVF9MRUZUX1BBRERJTkcgKyBpICogU1BBQ0VfQkVUV0VFTl9URVhUUyxcbiAgICAgICAgICAgICAgICBURVhUX1RPUF9QQURESU5HLFxuICAgICAgICAgICAgICAgIHRydWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLmdyYXBoaWNzW2VsZW1lbnRdID0gdGhpcy5nYW1lLmFkZC5ncmFwaGljcygwLCAwKTtcbiAgICAgICAgICAgIHRoaXMuZ3JhcGhpY3NbZWxlbWVudF0uYmxlbmRNb2RlID0gUElYSS5ibGVuZE1vZGVzLlNDUkVFTjtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cuYWRkX3Nwcml0ZV90b19ncm91cCh0aGlzLmdyYXBoaWNzW2VsZW1lbnRdKTtcbiAgICAgICAgICAgIHRoaXMuZ3JhcGhpY3NbZWxlbWVudF0uYmVnaW5GaWxsKHRoaXMuYmFzZV93aW5kb3cuY29sb3IsIDEpO1xuICAgICAgICAgICAgdGhpcy5ncmFwaGljc1tlbGVtZW50XS5kcmF3UmVjdChcbiAgICAgICAgICAgICAgICBISUdITElHSFRfTEVGVF9QQURESU5HICsgaSAqIEhJR0hMSUdIVF9XSURUSCxcbiAgICAgICAgICAgICAgICBISUdITElHSFRfVE9QX1BBRERJTkcsXG4gICAgICAgICAgICAgICAgSElHSExJR0hUX1dJRFRILFxuICAgICAgICAgICAgICAgIEhJR0hMSUdIVF9IRUlHSFRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLmdyYXBoaWNzW2VsZW1lbnRdLmVuZEZpbGwoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XG4gICAgfVxuXG4gICAgYmxpbmsoZWxlbWVudCwgc3ByaXRlKSB7XG4gICAgICAgIHRoaXMudGltZXJzW2VsZW1lbnRdID0gdGhpcy5nYW1lLnRpbWUuY3JlYXRlKGZhbHNlKTtcbiAgICAgICAgdGhpcy50aW1lcnNbZWxlbWVudF0ubG9vcCgxNTAsICgpID0+IHtcbiAgICAgICAgICAgIHNwcml0ZS5hbHBoYSA9ICshc3ByaXRlLmFscGhhO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy50aW1lcnNbZWxlbWVudF0uc3RhcnQoKTtcbiAgICB9XG5cbiAgICBzZXRfbnVtYmVycyhyZXF1aXJlbWVudHMpIHtcbiAgICAgICAgZm9yIChsZXQgZWxlbWVudCBpbiByZXF1aXJlbWVudHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGRqaW5uX251bWJlciA9IHJlcXVpcmVtZW50c1tlbGVtZW50XTtcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbWVyc1tlbGVtZW50XSkge1xuICAgICAgICAgICAgICAgIHRoaXMudGltZXJzW2VsZW1lbnRdLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWVyc1tlbGVtZW50XSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGppbm5fbnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ibGluayhlbGVtZW50LCB0aGlzLmdyYXBoaWNzW2VsZW1lbnRdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ncmFwaGljc1tlbGVtZW50XS5hbHBoYSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KGRqaW5uX251bWJlci50b1N0cmluZygpLCB0aGlzLnRleHRzW2VsZW1lbnRdKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9wZW4oKSB7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2hvdyh1bmRlZmluZWQsIGZhbHNlKTtcbiAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IHRydWU7XG4gICAgfVxuXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY2xvc2UodW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcmRlcmVkX2VsZW1lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gb3JkZXJlZF9lbGVtZW50c1tpXTtcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbWVyc1tlbGVtZW50XSkge1xuICAgICAgICAgICAgICAgIHRoaXMudGltZXJzW2VsZW1lbnRdLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWVyc1tlbGVtZW50XSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmRlc3Ryb3koZmFsc2UpO1xuICAgICAgICBmb3IgKGxldCBlbGVtZW50IGluIHRoaXMudGltZXJzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy50aW1lcnNbZWxlbWVudF0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWVyc1tlbGVtZW50XS5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQge0JhdHRsZX0gZnJvbSBcIi4uLy4uL2JhdHRsZS9CYXR0bGVcIjtcbmltcG9ydCB7R29sZGVuU3VufSBmcm9tIFwiLi4vLi4vR29sZGVuU3VuXCI7XG5pbXBvcnQge01haW5DaGFyfSBmcm9tIFwiLi4vLi4vTWFpbkNoYXJcIjtcbmltcG9ydCB7XG4gICAgdGVtcG9yYXJ5X3N0YXR1cyxcbiAgICBvcmRlcmVkX3N0YXR1c19iYXR0bGUsXG4gICAgb3JkZXJlZF9zdGF0dXNfbWVudSxcbiAgICBwZXJtYW5lbnRfc3RhdHVzLFxuICAgIGVmZmVjdF90eXBlX3N0YXQsXG59IGZyb20gXCIuLi8uLi9QbGF5ZXJcIjtcbmltcG9ydCB7VGV4dE9iaiwgV2luZG93fSBmcm9tIFwiLi4vLi4vV2luZG93XCI7XG5pbXBvcnQge2Jhc2VfYWN0aW9ucywgZWxlbWVudHN9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XG5pbXBvcnQge1N0YXR1c0NvbXBvbmVudH0gZnJvbSBcIi4uLy4uL3N1cHBvcnRfbWVudXMvU3RhdHVzQ29tcG9uZW50XCI7XG5pbXBvcnQge0JhdHRsZVN0YXR1c1N0YXRpc3RpY3N9IGZyb20gXCIuLi8uLi9zdXBwb3J0X21lbnVzL0JhdHRsZVN0YXR1c1N0YXRpc3RpY3NcIjtcbmltcG9ydCB7ZWZmZWN0X3R5cGVzfSBmcm9tIFwiLi4vLi4vRWZmZWN0XCI7XG5pbXBvcnQge0JhdHRsZVN0YXR1c1BzeW5lcmd5fSBmcm9tIFwiLi4vLi4vc3VwcG9ydF9tZW51cy9CYXR0bGVTdGF0dXNQc3luZXJneVwiO1xuaW1wb3J0IHtCYXR0bGVTdGF0dXNEamlubn0gZnJvbSBcIi4uLy4uL3N1cHBvcnRfbWVudXMvQmF0dGxlU3RhdHVzRGppbm5cIjtcbmltcG9ydCB7QmF0dGxlU3RhdHVzSXRlbXN9IGZyb20gXCIuLi8uLi9zdXBwb3J0X21lbnVzL0JhdHRsZVN0YXR1c0l0ZW1zXCI7XG5cbmV4cG9ydCB0eXBlIEJhdHRsZVN0YXR1c0VmZmVjdCA9IHtcbiAgICBrZXk6IHRlbXBvcmFyeV9zdGF0dXMgfCBwZXJtYW5lbnRfc3RhdHVzIHwgZWZmZWN0X3R5cGVzO1xuICAgIHByb3BlcnRpZXM/OiB7XG4gICAgICAgIG1vZGlmaWVyPzogc3RyaW5nO1xuICAgICAgICB0dXJucz86IG51bWJlcjtcbiAgICAgICAgdmFsdWU/OiBudW1iZXIgfCB7W2VsZW1lbnQgaW4gZWxlbWVudHNdPzogbnVtYmVyfTtcbiAgICB9O1xufTtcblxuZXhwb3J0IGVudW0gQmF0dGxlU3RhdHVzU3RhdGVzIHtcbiAgICBTVEFUSVNUSUNTLFxuICAgIFBTWU5FUkdZLFxuICAgIERKSU5OLFxuICAgIElURU1TLFxufVxuXG5leHBvcnQgY2xhc3MgQmF0dGxlU3RhdHVzV2luZG93IHtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBXSU5ET1cgPSB7XG4gICAgICAgIFdJRFRIOiAyMzYsXG4gICAgICAgIEhFSUdIVDogMTU2LFxuICAgIH07XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgU0VQQVJBVE9SID0ge1xuICAgICAgICBYOiA0LFxuICAgICAgICBZOiAxMTUsXG4gICAgICAgIFdJRFRIOiAyMzIsXG4gICAgICAgIFNISUZUOiAxNixcbiAgICB9O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEJBVFRMRVNQUklURSA9IHtcbiAgICAgICAgQ0VOVEVSX1g6IDIwNCxcbiAgICAgICAgRU5EX1k6IDEyMCxcbiAgICAgICAgU0hBRE9XX1k6IDExNCxcbiAgICB9O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IERFU0NSSVBUSU9OID0ge1xuICAgICAgICBYOiA4LFxuICAgICAgICBMSU5FMV9ZOiAxMjQsXG4gICAgICAgIExJTkUyX1k6IDE0MCxcbiAgICB9O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IE5BTUUgPSB7XG4gICAgICAgIFg6IDgsXG4gICAgICAgIFk6IDgsXG4gICAgfTtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBDTEFTU19OQU1FID0ge1xuICAgICAgICBYOiA4LFxuICAgICAgICBZOiA1NixcbiAgICB9O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEVYUCA9IHtcbiAgICAgICAgTEFCRUxfWDogOCxcbiAgICAgICAgTEFCRUxfWTogMTYsXG4gICAgICAgIFZBTFVFX0VORF9YOiAxMDksXG4gICAgICAgIFZBTFVFX1k6IDE2LFxuICAgIH07XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgTEVWRUwgPSB7XG4gICAgICAgIExBQkVMX1g6IDY0LFxuICAgICAgICBMQUJFTF9ZOiA4LFxuICAgICAgICBWQUxVRV9FTkRfWDogOTMsXG4gICAgICAgIFZBTFVFX1k6IDgsXG4gICAgfTtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBBVkFUQVIgPSB7XG4gICAgICAgIFg6IDgsXG4gICAgICAgIFk6IDI0LFxuICAgIH07XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgTk9STUFMX1NUQVRVUyA9IHtcbiAgICAgICAgWDogMTIwLFxuICAgICAgICBZOiA4LFxuICAgIH07XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgSU5fVEhFX0JBQ0sgPSB7XG4gICAgICAgIFg6IDQ4LFxuICAgICAgICBZOiAyNCxcbiAgICB9O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFNUQVRTID0ge1xuICAgICAgICBMQUJFTF9YOiAxNDQsXG4gICAgICAgIExBQkVMX1k6IDI0LFxuICAgICAgICBWQUxVRV9FTkRfWDogMjEzLFxuICAgICAgICBWQUxVRV9ZOiAyNCxcbiAgICAgICAgTElORV9TSElGVDogOCxcbiAgICB9O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEhQID0ge1xuICAgICAgICBMQUJFTF9YOiA0OCxcbiAgICAgICAgTEFCRUxfWTogMzIsXG4gICAgICAgIE1BWF9FTkRfWDogMTMzLFxuICAgICAgICBNQVhfWTogMzIsXG4gICAgICAgIENVUlJfRU5EX1g6IDEwMCxcbiAgICAgICAgQ1VSUl9ZOiAzMixcbiAgICB9O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFBQID0ge1xuICAgICAgICBMQUJFTF9YOiA0OCxcbiAgICAgICAgTEFCRUxfWTogNDAsXG4gICAgICAgIE1BWF9FTkRfWDogMTMzLFxuICAgICAgICBNQVhfWTogNDAsXG4gICAgICAgIENVUlJfRU5EX1g6IDEwMCxcbiAgICAgICAgQ1VSUl9ZOiA0MCxcbiAgICB9O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEVGRkVDVFMgPSB7XG4gICAgICAgIFg6IDExMixcbiAgICAgICAgWTogOCxcbiAgICAgICAgU0hJRlQ6IDE2LFxuICAgIH07XG5cbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBHUk9VUF9LRVkgPSBcInN0YXR1c193aW5cIjtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBNQVhfRUZGRUNUU19ESVNQTEFZRUQgPSA4O1xuXG4gICAgcHJpdmF0ZSBnYW1lOiBQaGFzZXIuR2FtZTtcbiAgICBwcml2YXRlIGRhdGE6IEdvbGRlblN1bjtcbiAgICBwcml2YXRlIGNsb3NlX2NhbGxiYWNrOiBGdW5jdGlvbjtcblxuICAgIHByaXZhdGUgZGVzY19zaGlmdGVkOiBib29sZWFuO1xuICAgIHByaXZhdGUgc2VsZWN0ZWRfY2hhcjogTWFpbkNoYXI7XG5cbiAgICBwcml2YXRlIGN1cnJlbnRfc3RhdGU6IEJhdHRsZVN0YXR1c1N0YXRlcztcbiAgICBwcml2YXRlIGN1cnJlbnRfY29tcG9uZW50OiBTdGF0dXNDb21wb25lbnQ7XG4gICAgcHJpdmF0ZSBjb21wb25lbnRzOiBTdGF0dXNDb21wb25lbnRbXTtcblxuICAgIHByaXZhdGUgYmF0dGxlX2VmZmVjdHM6IEJhdHRsZVN0YXR1c0VmZmVjdFtdO1xuICAgIHByaXZhdGUgZWZmZWN0X3Nwcml0ZXM6IFBoYXNlci5TcHJpdGVbXTtcblxuICAgIHByaXZhdGUgd2luZG93OiBXaW5kb3c7XG4gICAgcHJpdmF0ZSBiYXR0bGVfc3ByaXRlOiBQaGFzZXIuU3ByaXRlO1xuICAgIHByaXZhdGUgYXZhdGFyOiBQaGFzZXIuU3ByaXRlO1xuXG4gICAgcHJpdmF0ZSBuYW1lOiBUZXh0T2JqO1xuICAgIHByaXZhdGUgbGV2ZWxfdmFsdWU6IFRleHRPYmo7XG5cbiAgICBwcml2YXRlIGV4cF92YWx1ZTogVGV4dE9iajtcbiAgICBwcml2YXRlIG5vcm1hbF9zdGF0dXM6IFRleHRPYmo7XG5cbiAgICBwcml2YXRlIG1heF9ocDogVGV4dE9iajtcbiAgICBwcml2YXRlIGN1cnJfaHA6IFRleHRPYmo7XG5cbiAgICBwcml2YXRlIG1heF9wcDogVGV4dE9iajtcbiAgICBwcml2YXRlIGN1cnJfcHA6IFRleHRPYmo7XG5cbiAgICBwcml2YXRlIGF0a192YWx1ZTogVGV4dE9iajtcbiAgICBwcml2YXRlIGRlZl92YWx1ZTogVGV4dE9iajtcbiAgICBwcml2YXRlIGFnaV92YWx1ZTogVGV4dE9iajtcbiAgICBwcml2YXRlIGx1a192YWx1ZTogVGV4dE9iajtcblxuICAgIHByaXZhdGUgY2xhc3NfbmFtZTogVGV4dE9iajtcbiAgICBwcml2YXRlIGluX3RoZV9iYWNrOiBUZXh0T2JqO1xuXG4gICAgcHJpdmF0ZSBkZXNjX2xpbmUxOiBUZXh0T2JqO1xuICAgIHByaXZhdGUgZGVzY19saW5lMjogVGV4dE9iajtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihnYW1lOiBQaGFzZXIuR2FtZSwgZGF0YTogR29sZGVuU3VuKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuZGVzY19zaGlmdGVkID0gbnVsbDtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyID0gbnVsbDtcblxuICAgICAgICB0aGlzLmJhdHRsZV9lZmZlY3RzID0gW107XG4gICAgICAgIHRoaXMuZWZmZWN0X3Nwcml0ZXMgPSBbXTtcblxuICAgICAgICB0aGlzLndpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCAwLCAwLCBCYXR0bGVTdGF0dXNXaW5kb3cuV0lORE9XLldJRFRILCBCYXR0bGVTdGF0dXNXaW5kb3cuV0lORE9XLkhFSUdIVCk7XG4gICAgICAgIHRoaXMud2luZG93LmRlZmluZV9pbnRlcm5hbF9ncm91cChCYXR0bGVTdGF0dXNXaW5kb3cuR1JPVVBfS0VZLCB7eDogMCwgeTogMH0pO1xuXG4gICAgICAgIHRoaXMuY29tcG9uZW50cyA9IFtcbiAgICAgICAgICAgIG5ldyBCYXR0bGVTdGF0dXNTdGF0aXN0aWNzKHRoaXMuZ2FtZSwgdGhpcy5kYXRhLCB0aGlzLndpbmRvdywgdGhpcyksXG4gICAgICAgICAgICBuZXcgQmF0dGxlU3RhdHVzUHN5bmVyZ3kodGhpcy5nYW1lLCB0aGlzLmRhdGEsIHRoaXMud2luZG93LCB0aGlzKSxcbiAgICAgICAgICAgIG5ldyBCYXR0bGVTdGF0dXNEamlubih0aGlzLmdhbWUsIHRoaXMuZGF0YSwgdGhpcy53aW5kb3csIHRoaXMpLFxuICAgICAgICAgICAgbmV3IEJhdHRsZVN0YXR1c0l0ZW1zKHRoaXMuZ2FtZSwgdGhpcy5kYXRhLCB0aGlzLndpbmRvdywgdGhpcyksXG4gICAgICAgIF07XG5cbiAgICAgICAgdGhpcy5iYXR0bGVfc3ByaXRlID0gbnVsbDtcbiAgICAgICAgdGhpcy5hdmF0YXIgPSBudWxsO1xuXG4gICAgICAgIHRoaXMud2luZG93Lmdyb3VwLmJyaW5nVG9Ub3AodGhpcy53aW5kb3cuaW50ZXJuYWxfZ3JvdXBzW0JhdHRsZVN0YXR1c1dpbmRvdy5HUk9VUF9LRVldKTtcbiAgICAgICAgdGhpcy5pbml0X3RleHQoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHNlbGVjdGVkX2NoYXJhY3RlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWRfY2hhcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGJhdHRsZV9lZmZlY3RzX2FycmF5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXR0bGVfZWZmZWN0cztcbiAgICB9XG5cbiAgICBwcml2YXRlIGluaXRfdGV4dCgpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgQmF0dGxlU3RhdHVzV2luZG93Lk5BTUUuWCxcbiAgICAgICAgICAgIEJhdHRsZVN0YXR1c1dpbmRvdy5OQU1FLlksXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBCYXR0bGVTdGF0dXNXaW5kb3cuR1JPVVBfS0VZXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgXCJMdlwiLFxuICAgICAgICAgICAgQmF0dGxlU3RhdHVzV2luZG93LkxFVkVMLkxBQkVMX1gsXG4gICAgICAgICAgICBCYXR0bGVTdGF0dXNXaW5kb3cuTEVWRUwuTEFCRUxfWSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIEJhdHRsZVN0YXR1c1dpbmRvdy5HUk9VUF9LRVlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5sZXZlbF92YWx1ZSA9IHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIEJhdHRsZVN0YXR1c1dpbmRvdy5MRVZFTC5WQUxVRV9FTkRfWCxcbiAgICAgICAgICAgIEJhdHRsZVN0YXR1c1dpbmRvdy5MRVZFTC5WQUxVRV9ZLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBCYXR0bGVTdGF0dXNXaW5kb3cuR1JPVVBfS0VZXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICBcIkV4cFwiLFxuICAgICAgICAgICAgQmF0dGxlU3RhdHVzV2luZG93LkVYUC5MQUJFTF9YLFxuICAgICAgICAgICAgQmF0dGxlU3RhdHVzV2luZG93LkVYUC5MQUJFTF9ZLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgQmF0dGxlU3RhdHVzV2luZG93LkdST1VQX0tFWVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmV4cF92YWx1ZSA9IHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIEJhdHRsZVN0YXR1c1dpbmRvdy5FWFAuVkFMVUVfRU5EX1gsXG4gICAgICAgICAgICBCYXR0bGVTdGF0dXNXaW5kb3cuRVhQLlZBTFVFX1ksXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIEJhdHRsZVN0YXR1c1dpbmRvdy5HUk9VUF9LRVlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5ub3JtYWxfc3RhdHVzID0gdGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgQmF0dGxlU3RhdHVzV2luZG93Lk5PUk1BTF9TVEFUVVMuWCxcbiAgICAgICAgICAgIEJhdHRsZVN0YXR1c1dpbmRvdy5OT1JNQUxfU1RBVFVTLlksXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBCYXR0bGVTdGF0dXNXaW5kb3cuR1JPVVBfS0VZXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICBcIkhQXCIsXG4gICAgICAgICAgICBCYXR0bGVTdGF0dXNXaW5kb3cuSFAuTEFCRUxfWCxcbiAgICAgICAgICAgIEJhdHRsZVN0YXR1c1dpbmRvdy5IUC5MQUJFTF9ZLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgQmF0dGxlU3RhdHVzV2luZG93LkdST1VQX0tFWVxuICAgICAgICApO1xuICAgICAgICB0aGlzLm1heF9ocCA9IHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIEJhdHRsZVN0YXR1c1dpbmRvdy5IUC5NQVhfRU5EX1gsXG4gICAgICAgICAgICBCYXR0bGVTdGF0dXNXaW5kb3cuSFAuTUFYX1ksXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIEJhdHRsZVN0YXR1c1dpbmRvdy5HUk9VUF9LRVlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5jdXJyX2hwID0gdGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICBcIi9cIixcbiAgICAgICAgICAgIEJhdHRsZVN0YXR1c1dpbmRvdy5IUC5DVVJSX0VORF9YLFxuICAgICAgICAgICAgQmF0dGxlU3RhdHVzV2luZG93LkhQLkNVUlJfWSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgQmF0dGxlU3RhdHVzV2luZG93LkdST1VQX0tFWVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgXCJQUFwiLFxuICAgICAgICAgICAgQmF0dGxlU3RhdHVzV2luZG93LlBQLkxBQkVMX1gsXG4gICAgICAgICAgICBCYXR0bGVTdGF0dXNXaW5kb3cuUFAuTEFCRUxfWSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIEJhdHRsZVN0YXR1c1dpbmRvdy5HUk9VUF9LRVlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5tYXhfcHAgPSB0aGlzLndpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICBCYXR0bGVTdGF0dXNXaW5kb3cuUFAuTUFYX0VORF9YLFxuICAgICAgICAgICAgQmF0dGxlU3RhdHVzV2luZG93LlBQLk1BWF9ZLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBCYXR0bGVTdGF0dXNXaW5kb3cuR1JPVVBfS0VZXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuY3Vycl9wcCA9IHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgXCIvXCIsXG4gICAgICAgICAgICBCYXR0bGVTdGF0dXNXaW5kb3cuUFAuQ1VSUl9FTkRfWCxcbiAgICAgICAgICAgIEJhdHRsZVN0YXR1c1dpbmRvdy5QUC5DVVJSX1ksXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIEJhdHRsZVN0YXR1c1dpbmRvdy5HUk9VUF9LRVlcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBzaGlmdCA9IEJhdHRsZVN0YXR1c1dpbmRvdy5TVEFUUy5MSU5FX1NISUZUO1xuXG4gICAgICAgIHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgXCJBdHRhY2tcIixcbiAgICAgICAgICAgIEJhdHRsZVN0YXR1c1dpbmRvdy5TVEFUUy5MQUJFTF9YLFxuICAgICAgICAgICAgQmF0dGxlU3RhdHVzV2luZG93LlNUQVRTLkxBQkVMX1ksXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBCYXR0bGVTdGF0dXNXaW5kb3cuR1JPVVBfS0VZXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuYXRrX3ZhbHVlID0gdGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgQmF0dGxlU3RhdHVzV2luZG93LlNUQVRTLlZBTFVFX0VORF9YLFxuICAgICAgICAgICAgQmF0dGxlU3RhdHVzV2luZG93LlNUQVRTLlZBTFVFX1ksXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIEJhdHRsZVN0YXR1c1dpbmRvdy5HUk9VUF9LRVlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICBcIkRlZmVuc2VcIixcbiAgICAgICAgICAgIEJhdHRsZVN0YXR1c1dpbmRvdy5TVEFUUy5MQUJFTF9YLFxuICAgICAgICAgICAgQmF0dGxlU3RhdHVzV2luZG93LlNUQVRTLkxBQkVMX1kgKyBzaGlmdCxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIEJhdHRsZVN0YXR1c1dpbmRvdy5HUk9VUF9LRVlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5kZWZfdmFsdWUgPSB0aGlzLndpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICBCYXR0bGVTdGF0dXNXaW5kb3cuU1RBVFMuVkFMVUVfRU5EX1gsXG4gICAgICAgICAgICBCYXR0bGVTdGF0dXNXaW5kb3cuU1RBVFMuVkFMVUVfWSArIHNoaWZ0LFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBCYXR0bGVTdGF0dXNXaW5kb3cuR1JPVVBfS0VZXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgXCJBZ2lsaXR5XCIsXG4gICAgICAgICAgICBCYXR0bGVTdGF0dXNXaW5kb3cuU1RBVFMuTEFCRUxfWCxcbiAgICAgICAgICAgIEJhdHRsZVN0YXR1c1dpbmRvdy5TVEFUUy5MQUJFTF9ZICsgMiAqIHNoaWZ0LFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgQmF0dGxlU3RhdHVzV2luZG93LkdST1VQX0tFWVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmFnaV92YWx1ZSA9IHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIEJhdHRsZVN0YXR1c1dpbmRvdy5TVEFUUy5WQUxVRV9FTkRfWCxcbiAgICAgICAgICAgIEJhdHRsZVN0YXR1c1dpbmRvdy5TVEFUUy5WQUxVRV9ZICsgMiAqIHNoaWZ0LFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBCYXR0bGVTdGF0dXNXaW5kb3cuR1JPVVBfS0VZXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgXCJMdWNrXCIsXG4gICAgICAgICAgICBCYXR0bGVTdGF0dXNXaW5kb3cuU1RBVFMuTEFCRUxfWCxcbiAgICAgICAgICAgIEJhdHRsZVN0YXR1c1dpbmRvdy5TVEFUUy5MQUJFTF9ZICsgMyAqIHNoaWZ0LFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgQmF0dGxlU3RhdHVzV2luZG93LkdST1VQX0tFWVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmx1a192YWx1ZSA9IHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIEJhdHRsZVN0YXR1c1dpbmRvdy5TVEFUUy5WQUxVRV9FTkRfWCxcbiAgICAgICAgICAgIEJhdHRsZVN0YXR1c1dpbmRvdy5TVEFUUy5WQUxVRV9ZICsgMyAqIHNoaWZ0LFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBCYXR0bGVTdGF0dXNXaW5kb3cuR1JPVVBfS0VZXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5jbGFzc19uYW1lID0gdGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgQmF0dGxlU3RhdHVzV2luZG93LkNMQVNTX05BTUUuWCxcbiAgICAgICAgICAgIEJhdHRsZVN0YXR1c1dpbmRvdy5DTEFTU19OQU1FLlksXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBCYXR0bGVTdGF0dXNXaW5kb3cuR1JPVVBfS0VZXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5pbl90aGVfYmFjayA9IHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIEJhdHRsZVN0YXR1c1dpbmRvdy5JTl9USEVfQkFDSy5YLFxuICAgICAgICAgICAgQmF0dGxlU3RhdHVzV2luZG93LklOX1RIRV9CQUNLLlksXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBCYXR0bGVTdGF0dXNXaW5kb3cuR1JPVVBfS0VZXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5kZXNjX2xpbmUxID0gdGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgQmF0dGxlU3RhdHVzV2luZG93LkRFU0NSSVBUSU9OLlgsXG4gICAgICAgICAgICBCYXR0bGVTdGF0dXNXaW5kb3cuREVTQ1JJUFRJT04uTElORTFfWSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIEJhdHRsZVN0YXR1c1dpbmRvdy5HUk9VUF9LRVlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5kZXNjX2xpbmUyID0gdGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgQmF0dGxlU3RhdHVzV2luZG93LkRFU0NSSVBUSU9OLlgsXG4gICAgICAgICAgICBCYXR0bGVTdGF0dXNXaW5kb3cuREVTQ1JJUFRJT04uTElORTJfWSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIEJhdHRsZVN0YXR1c1dpbmRvdy5HUk9VUF9LRVlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZV9pbmZvKCkge1xuICAgICAgICBjb25zdCBjaGFyID0gdGhpcy5zZWxlY3RlZF9jaGFyO1xuICAgICAgICBjb25zdCBwYXJ0eSA9IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVycztcbiAgICAgICAgbGV0IGNoYXJfaW5kZXggPSAtMTtcblxuICAgICAgICB0aGlzLmJhdHRsZV9lZmZlY3RzID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgaW5kZXggaW4gcGFydHkpIHtcbiAgICAgICAgICAgIGlmIChwYXJ0eVtpbmRleF0ua2V5X25hbWUgPT09IHRoaXMuc2VsZWN0ZWRfY2hhci5rZXlfbmFtZSkgY2hhcl9pbmRleCA9IHBhcnNlSW50KGluZGV4KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy53aW5kb3cudXBkYXRlX3RleHQoY2hhci5uYW1lLCB0aGlzLm5hbWUpO1xuICAgICAgICB0aGlzLndpbmRvdy51cGRhdGVfdGV4dChjaGFyLmxldmVsLCB0aGlzLmxldmVsX3ZhbHVlKTtcbiAgICAgICAgdGhpcy53aW5kb3cudXBkYXRlX3RleHQoY2hhci5jdXJyZW50X2V4cCwgdGhpcy5leHBfdmFsdWUpO1xuXG4gICAgICAgIHRoaXMud2luZG93LnVwZGF0ZV90ZXh0KGNoYXIuY2xhc3MubmFtZSwgdGhpcy5jbGFzc19uYW1lKTtcbiAgICAgICAgdGhpcy53aW5kb3cudXBkYXRlX3RleHQoY2hhcl9pbmRleCA+PSBCYXR0bGUuTUFYX0NIQVJTX0lOX0JBVFRMRSA/IFwiSW4gdGhlIGJhY2tcIiA6IFwiXCIsIHRoaXMuaW5fdGhlX2JhY2spO1xuXG4gICAgICAgIGlmICh0aGlzLnVwZGF0ZV9lZmZlY3RzKCkgIT09IDApIHRoaXMud2luZG93LnVwZGF0ZV90ZXh0KFwiXCIsIHRoaXMubm9ybWFsX3N0YXR1cyk7XG4gICAgICAgIGVsc2UgdGhpcy53aW5kb3cudXBkYXRlX3RleHQoXCJOb3JtYWxcIiwgdGhpcy5ub3JtYWxfc3RhdHVzKTtcblxuICAgICAgICB0aGlzLndpbmRvdy51cGRhdGVfdGV4dChjaGFyLm1heF9ocCwgdGhpcy5tYXhfaHApO1xuICAgICAgICB0aGlzLndpbmRvdy51cGRhdGVfdGV4dChjaGFyLmN1cnJlbnRfaHAgKyBcIi9cIiwgdGhpcy5jdXJyX2hwKTtcbiAgICAgICAgdGhpcy53aW5kb3cudXBkYXRlX3RleHQoY2hhci5tYXhfcHAsIHRoaXMubWF4X3BwKTtcbiAgICAgICAgdGhpcy53aW5kb3cudXBkYXRlX3RleHQoY2hhci5jdXJyZW50X3BwICsgXCIvXCIsIHRoaXMuY3Vycl9wcCk7XG5cbiAgICAgICAgdGhpcy53aW5kb3cudXBkYXRlX3RleHQoY2hhci5hdGssIHRoaXMuYXRrX3ZhbHVlKTtcbiAgICAgICAgdGhpcy53aW5kb3cudXBkYXRlX3RleHQoY2hhci5kZWYsIHRoaXMuZGVmX3ZhbHVlKTtcbiAgICAgICAgdGhpcy53aW5kb3cudXBkYXRlX3RleHQoY2hhci5hZ2ksIHRoaXMuYWdpX3ZhbHVlKTtcbiAgICAgICAgdGhpcy53aW5kb3cudXBkYXRlX3RleHQoY2hhci5sdWssIHRoaXMubHVrX3ZhbHVlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZV9lZmZlY3RzKCkge1xuICAgICAgICBjb25zdCBzdGF0dXNfZWZmZWN0cyA9IHRoaXMuZ2V0X3N0YXR1c19lZmZlY3RzKCk7XG4gICAgICAgIGNvbnN0IGJ1ZmZzX2RlYnVmZnMgPSB0aGlzLmdldF9idWZmc19kZWJ1ZmZzKCk7XG5cbiAgICAgICAgY29uc3QgZWZmZWN0cyA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGluZGV4IGluIHN0YXR1c19lZmZlY3RzKSB7XG4gICAgICAgICAgICBjb25zdCBlZmZlY3Q6IEJhdHRsZVN0YXR1c0VmZmVjdCA9IHtrZXk6IG51bGwsIHByb3BlcnRpZXM6IG51bGx9O1xuXG4gICAgICAgICAgICBlZmZlY3Qua2V5ID0gc3RhdHVzX2VmZmVjdHNbaW5kZXhdO1xuXG4gICAgICAgICAgICBpZiAoc3RhdHVzX2VmZmVjdHNbaW5kZXhdID09PSB0ZW1wb3Jhcnlfc3RhdHVzLkRFQVRIX0NVUlNFKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWFpbl9jaGFyX2VmZmVjdCA9IF8uZmluZCh0aGlzLnNlbGVjdGVkX2NoYXIuZWZmZWN0cywge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXNfa2V5X25hbWU6IHRlbXBvcmFyeV9zdGF0dXMuREVBVEhfQ1VSU0UsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZWZmZWN0LnByb3BlcnRpZXMudHVybnMgPSB0aGlzLnNlbGVjdGVkX2NoYXIuZ2V0X2VmZmVjdF90dXJuc19jb3VudChtYWluX2NoYXJfZWZmZWN0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGVmZmVjdHMubGVuZ3RoIDwgQmF0dGxlU3RhdHVzV2luZG93Lk1BWF9FRkZFQ1RTX0RJU1BMQVlFRCkgZWZmZWN0cy5wdXNoKGVmZmVjdCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpbmRleCBpbiBidWZmc19kZWJ1ZmZzKSB7XG4gICAgICAgICAgICBjb25zdCBlZmZlY3Q6IEJhdHRsZVN0YXR1c0VmZmVjdCA9IHtrZXk6IG51bGwsIHByb3BlcnRpZXM6IHt2YWx1ZTogbnVsbH19O1xuXG4gICAgICAgICAgICBsZXQgbW9kaWZpZXIgPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAoYnVmZnNfZGVidWZmc1tpbmRleF0uc3RhdCA9PT0gZWZmZWN0X3R5cGVzLlJFU0lTVCB8fCBidWZmc19kZWJ1ZmZzW2luZGV4XS5zdGF0ID09PSBlZmZlY3RfdHlwZXMuUE9XRVIpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBlbGVtZW50IGluIGVsZW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChidWZmc19kZWJ1ZmZzW2luZGV4XS52YWx1ZVtlbGVtZW50c1tlbGVtZW50XV0gPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobW9kaWZpZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllciA9IFwiZG93blwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtb2RpZmllciA9PT0gXCJ1cFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZpZXIgPT09IFwidXBfZG93blwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGJ1ZmZzX2RlYnVmZnNbaW5kZXhdLnZhbHVlW2VsZW1lbnRzW2VsZW1lbnRdXSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtb2RpZmllciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWVyID0gXCJ1cFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtb2RpZmllciA9PT0gXCJkb3duXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllciA9IFwidXBfZG93blwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChidWZmc19kZWJ1ZmZzW2luZGV4XS5zdGF0IGluIGVmZmVjdF90eXBlX3N0YXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZWZmZWN0LnByb3BlcnRpZXMudmFsdWUgPj0gMCkgbW9kaWZpZXIgPSBcInVwXCI7XG4gICAgICAgICAgICAgICAgZWxzZSBtb2RpZmllciA9IFwiZG93blwiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobW9kaWZpZXIgPT09IG51bGwpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBlZmZlY3Qua2V5ID0gYnVmZnNfZGVidWZmc1tpbmRleF0uc3RhdDtcbiAgICAgICAgICAgIGVmZmVjdC5wcm9wZXJ0aWVzLm1vZGlmaWVyID0gbW9kaWZpZXI7XG4gICAgICAgICAgICBlZmZlY3QucHJvcGVydGllcy52YWx1ZSA9IGJ1ZmZzX2RlYnVmZnNbaW5kZXhdLnZhbHVlO1xuXG4gICAgICAgICAgICBpZiAoZWZmZWN0cy5sZW5ndGggPCBCYXR0bGVTdGF0dXNXaW5kb3cuTUFYX0VGRkVDVFNfRElTUExBWUVEKSBlZmZlY3RzLnB1c2goZWZmZWN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYmF0dGxlX2VmZmVjdHMgPSBlZmZlY3RzO1xuICAgICAgICByZXR1cm4gdGhpcy5iYXR0bGVfZWZmZWN0cy5sZW5ndGg7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRfYnVmZnNfZGVidWZmcygpIHtcbiAgICAgICAgY29uc3QgZWZmZWN0czoge3N0YXQ6IGVmZmVjdF90eXBlczsgdmFsdWU6IEJhdHRsZVN0YXR1c0VmZmVjdFtcInByb3BlcnRpZXNcIl1bXCJ2YWx1ZVwiXX1bXSA9IFtdO1xuXG4gICAgICAgIGNvbnN0IHN0YXRfa2V5cyA9IFtlZmZlY3RfdHlwZXMuQVRUQUNLLCBlZmZlY3RfdHlwZXMuREVGRU5TRSwgZWZmZWN0X3R5cGVzLkFHSUxJVFldO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RhdF9rZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB2YWwgPVxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfY2hhcltlZmZlY3RfdHlwZV9zdGF0W3N0YXRfa2V5c1tpXV1dIC1cbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXIucHJldmlld19zdGF0X3dpdGhvdXRfYWJpbGl0aWVzX2VmZmVjdChlZmZlY3RfdHlwZV9zdGF0W3N0YXRfa2V5c1tpXV0pO1xuICAgICAgICAgICAgaWYgKHZhbCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVmZmVjdCA9IHtzdGF0OiBzdGF0X2tleXNbaV0sIHZhbHVlOiB2YWx9O1xuICAgICAgICAgICAgICAgIGVmZmVjdHMucHVzaChlZmZlY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZWxlbWVudGFsX2Jhc2UgPSB0aGlzLnNlbGVjdGVkX2NoYXIucHJldmlld19lbGVtZW50YWxfc3RhdHNfd2l0aG91dF9hYmlsaXRpZXNfZWZmZWN0KCk7XG5cbiAgICAgICAgY29uc3QgcG93ZXJfdmFsdWU6IEJhdHRsZVN0YXR1c0VmZmVjdFtcInByb3BlcnRpZXNcIl1bXCJ2YWx1ZVwiXSA9IHtcbiAgICAgICAgICAgIFtlbGVtZW50cy5WRU5VU106IHRoaXMuc2VsZWN0ZWRfY2hhci52ZW51c19wb3dlcl9jdXJyZW50IC0gZWxlbWVudGFsX2Jhc2VbZWxlbWVudHMuVkVOVVNdLnBvd2VyLFxuICAgICAgICAgICAgW2VsZW1lbnRzLk1FUkNVUlldOiB0aGlzLnNlbGVjdGVkX2NoYXIubWVyY3VyeV9wb3dlcl9jdXJyZW50IC0gZWxlbWVudGFsX2Jhc2VbZWxlbWVudHMuTUVSQ1VSWV0ucG93ZXIsXG4gICAgICAgICAgICBbZWxlbWVudHMuTUFSU106IHRoaXMuc2VsZWN0ZWRfY2hhci5tYXJzX3Bvd2VyX2N1cnJlbnQgLSBlbGVtZW50YWxfYmFzZVtlbGVtZW50cy5NQVJTXS5wb3dlcixcbiAgICAgICAgICAgIFtlbGVtZW50cy5KVVBJVEVSXTogdGhpcy5zZWxlY3RlZF9jaGFyLmp1cGl0ZXJfcG93ZXJfY3VycmVudCAtIGVsZW1lbnRhbF9iYXNlW2VsZW1lbnRzLkpVUElURVJdLnBvd2VyLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXNpc3RfdmFsdWU6IEJhdHRsZVN0YXR1c0VmZmVjdFtcInByb3BlcnRpZXNcIl1bXCJ2YWx1ZVwiXSA9IHtcbiAgICAgICAgICAgIFtlbGVtZW50cy5WRU5VU106IHRoaXMuc2VsZWN0ZWRfY2hhci52ZW51c19yZXNpc3RfY3VycmVudCAtIGVsZW1lbnRhbF9iYXNlW2VsZW1lbnRzLlZFTlVTXS5yZXNpc3QsXG4gICAgICAgICAgICBbZWxlbWVudHMuTUVSQ1VSWV06IHRoaXMuc2VsZWN0ZWRfY2hhci5tZXJjdXJ5X3Jlc2lzdF9jdXJyZW50IC0gZWxlbWVudGFsX2Jhc2VbZWxlbWVudHMuTUVSQ1VSWV0ucmVzaXN0LFxuICAgICAgICAgICAgW2VsZW1lbnRzLk1BUlNdOiB0aGlzLnNlbGVjdGVkX2NoYXIubWFyc19yZXNpc3RfY3VycmVudCAtIGVsZW1lbnRhbF9iYXNlW2VsZW1lbnRzLk1BUlNdLnJlc2lzdCxcbiAgICAgICAgICAgIFtlbGVtZW50cy5KVVBJVEVSXTogdGhpcy5zZWxlY3RlZF9jaGFyLmp1cGl0ZXJfcmVzaXN0X2N1cnJlbnQgLSBlbGVtZW50YWxfYmFzZVtlbGVtZW50cy5KVVBJVEVSXS5yZXNpc3QsXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKF8uc29tZShwb3dlcl92YWx1ZSkpIHtcbiAgICAgICAgICAgIGVmZmVjdHMucHVzaCh7c3RhdDogZWZmZWN0X3R5cGVzLlBPV0VSLCB2YWx1ZTogcG93ZXJfdmFsdWV9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXy5zb21lKHJlc2lzdF92YWx1ZSkpIHtcbiAgICAgICAgICAgIGVmZmVjdHMucHVzaCh7c3RhdDogZWZmZWN0X3R5cGVzLlJFU0lTVCwgdmFsdWU6IHJlc2lzdF92YWx1ZX0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVmZmVjdHM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRfc3RhdHVzX2VmZmVjdHMobWVudT86IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKG1lbnUpIHtcbiAgICAgICAgICAgIHJldHVybiBfLnNvcnRCeShbLi4udGhpcy5kYXRhLmluZm8ubWFpbl9jaGFyX2xpc3RbdGhpcy5zZWxlY3RlZF9jaGFyLmtleV9uYW1lXS5wZXJtYW5lbnRfc3RhdHVzXSwgcyA9PlxuICAgICAgICAgICAgICAgIG9yZGVyZWRfc3RhdHVzX21lbnUuaW5kZXhPZihzKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBfLnNvcnRCeShcbiAgICAgICAgICAgICAgICAoWy4uLnRoaXMuZGF0YS5pbmZvLm1haW5fY2hhcl9saXN0W3RoaXMuc2VsZWN0ZWRfY2hhci5rZXlfbmFtZV0udGVtcG9yYXJ5X3N0YXR1c10gYXMgKFxuICAgICAgICAgICAgICAgICAgICB8IHBlcm1hbmVudF9zdGF0dXNcbiAgICAgICAgICAgICAgICAgICAgfCB0ZW1wb3Jhcnlfc3RhdHVzXG4gICAgICAgICAgICAgICAgKVtdKS5jb25jYXQoWy4uLnRoaXMuZGF0YS5pbmZvLm1haW5fY2hhcl9saXN0W3RoaXMuc2VsZWN0ZWRfY2hhci5rZXlfbmFtZV0ucGVybWFuZW50X3N0YXR1c10pLFxuICAgICAgICAgICAgICAgIHMgPT4gb3JkZXJlZF9zdGF0dXNfYmF0dGxlLmluZGV4T2YocylcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHNldF9zcHJpdGVzKCkge1xuICAgICAgICBpZiAodGhpcy5iYXR0bGVfc3ByaXRlKSB0aGlzLmJhdHRsZV9zcHJpdGUuZGVzdHJveSgpO1xuICAgICAgICBpZiAodGhpcy5hdmF0YXIpIHRoaXMuYXZhdGFyLmRlc3Ryb3koKTtcblxuICAgICAgICBpZiAodGhpcy5lZmZlY3Rfc3ByaXRlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCBpbiB0aGlzLmVmZmVjdF9zcHJpdGVzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lZmZlY3Rfc3ByaXRlc1tpbmRleF0uZGVzdHJveSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lZmZlY3Rfc3ByaXRlcyA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hdmF0YXIgPSB0aGlzLndpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoXG4gICAgICAgICAgICBCYXR0bGVTdGF0dXNXaW5kb3cuQVZBVEFSLlgsXG4gICAgICAgICAgICBCYXR0bGVTdGF0dXNXaW5kb3cuQVZBVEFSLlksXG4gICAgICAgICAgICBcImF2YXRhcnNcIixcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfY2hhci5rZXlfbmFtZSxcbiAgICAgICAgICAgIEJhdHRsZVN0YXR1c1dpbmRvdy5HUk9VUF9LRVlcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBzcHJpdGVfa2V5ID0gdGhpcy5zZWxlY3RlZF9jaGFyLnNwcml0ZV9iYXNlLmdldEFjdGlvbktleShiYXNlX2FjdGlvbnMuQkFUVExFKTtcbiAgICAgICAgY29uc3Qgc3ByaXRlX2Jhc2UgPSB0aGlzLmRhdGEuaW5mby5tYWluX2NoYXJfbGlzdFt0aGlzLnNlbGVjdGVkX2NoYXIua2V5X25hbWVdLnNwcml0ZV9iYXNlO1xuXG4gICAgICAgIHRoaXMuYmF0dGxlX3Nwcml0ZSA9IHRoaXMud2luZG93LmNyZWF0ZV9hdF9ncm91cChcbiAgICAgICAgICAgIEJhdHRsZVN0YXR1c1dpbmRvdy5CQVRUTEVTUFJJVEUuQ0VOVEVSX1gsXG4gICAgICAgICAgICBCYXR0bGVTdGF0dXNXaW5kb3cuQkFUVExFU1BSSVRFLkVORF9ZLFxuICAgICAgICAgICAgc3ByaXRlX2tleSxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIEJhdHRsZVN0YXR1c1dpbmRvdy5HUk9VUF9LRVlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5iYXR0bGVfc3ByaXRlLmFuY2hvci5zZXRUbygwLjUsIDEpO1xuXG4gICAgICAgIHNwcml0ZV9iYXNlLnNldEFuaW1hdGlvbih0aGlzLmJhdHRsZV9zcHJpdGUsIGJhc2VfYWN0aW9ucy5CQVRUTEUpO1xuICAgICAgICB0aGlzLmJhdHRsZV9zcHJpdGUuYW5pbWF0aW9ucy5wbGF5KHNwcml0ZV9iYXNlLmdldEFuaW1hdGlvbktleShiYXNlX2FjdGlvbnMuQkFUVExFLCBcImJhY2tcIikpO1xuXG4gICAgICAgIC8vVE8gRE86IGFkZCBzaGFkb3dcbiAgICAgICAgLy9UTyBETzogYWRkIHdlYXBvblxuXG4gICAgICAgIGlmICh0aGlzLmJhdHRsZV9lZmZlY3RzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGZvciAobGV0IGluZGV4IGluIHRoaXMuYmF0dGxlX2VmZmVjdHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlZmZlY3QgPSB0aGlzLmJhdHRsZV9lZmZlY3RzW2luZGV4XTtcbiAgICAgICAgICAgICAgICBsZXQga2V5ID0gZWZmZWN0LmtleSBhcyBTdHJpbmc7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBlZmZlY3Qua2V5IGluIGVmZmVjdF90eXBlX3N0YXQgfHxcbiAgICAgICAgICAgICAgICAgICAgZWZmZWN0LmtleSA9PT0gZWZmZWN0X3R5cGVzLlJFU0lTVCB8fFxuICAgICAgICAgICAgICAgICAgICBlZmZlY3Qua2V5ID09PSBlZmZlY3RfdHlwZXMuUE9XRVJcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAga2V5ID0ga2V5ICsgXCJfXCIgKyBlZmZlY3QucHJvcGVydGllcy5tb2RpZmllcjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCB4X3BvcyA9IEJhdHRsZVN0YXR1c1dpbmRvdy5FRkZFQ1RTLlggKyBwYXJzZUludChpbmRleCkgKiBCYXR0bGVTdGF0dXNXaW5kb3cuRUZGRUNUUy5TSElGVDtcbiAgICAgICAgICAgICAgICBjb25zdCB5X3BvcyA9IEJhdHRsZVN0YXR1c1dpbmRvdy5FRkZFQ1RTLlk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBzcHJpdGUgPSB0aGlzLndpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoXG4gICAgICAgICAgICAgICAgICAgIHhfcG9zLFxuICAgICAgICAgICAgICAgICAgICB5X3BvcyxcbiAgICAgICAgICAgICAgICAgICAgXCJiYXR0bGVfZWZmZWN0X2ljb25zXCIsXG4gICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgICAgICBCYXR0bGVTdGF0dXNXaW5kb3cuR1JPVVBfS0VZXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVmZmVjdF9zcHJpdGVzLnB1c2goc3ByaXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgY2hhbmdlX2NoYXJhY3RlcihuZXdfY2hhcjogTWFpbkNoYXIpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyID0gbmV3X2NoYXI7XG4gICAgICAgIHRoaXMudXBkYXRlX2luZm8oKTtcbiAgICAgICAgdGhpcy5zZXRfc3ByaXRlcygpO1xuXG4gICAgICAgIHRoaXMuY2hhbmdlX3N0YXRlKHRoaXMuY3VycmVudF9zdGF0ZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBuZXh0X2NoYXIoKSB7XG4gICAgICAgIGNvbnN0IHBhcnR5ID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzO1xuICAgICAgICBsZXQgY2hhcl9pbmRleCA9IC0xO1xuXG4gICAgICAgIGZvciAobGV0IGluZGV4IGluIHBhcnR5KSB7XG4gICAgICAgICAgICBpZiAocGFydHlbaW5kZXhdLmtleV9uYW1lID09PSB0aGlzLnNlbGVjdGVkX2NoYXIua2V5X25hbWUpIHtcbiAgICAgICAgICAgICAgICBjaGFyX2luZGV4ID0gcGFyc2VJbnQoaW5kZXgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jaGFuZ2VfY2hhcmFjdGVyKHBhcnR5WyhjaGFyX2luZGV4ICsgMSkgJSBwYXJ0eS5sZW5ndGhdKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHByZXZpb3VzX2NoYXIoKSB7XG4gICAgICAgIGNvbnN0IHBhcnR5ID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzO1xuICAgICAgICBsZXQgY2hhcl9pbmRleCA9IC0xO1xuXG4gICAgICAgIGZvciAobGV0IGluZGV4IGluIHBhcnR5KSB7XG4gICAgICAgICAgICBpZiAocGFydHlbaW5kZXhdLmtleV9uYW1lID09PSB0aGlzLnNlbGVjdGVkX2NoYXIua2V5X25hbWUpIHtcbiAgICAgICAgICAgICAgICBjaGFyX2luZGV4ID0gcGFyc2VJbnQoaW5kZXgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jaGFuZ2VfY2hhcmFjdGVyKHBhcnR5WyhjaGFyX2luZGV4ICsgcGFydHkubGVuZ3RoIC0gMSkgJSBwYXJ0eS5sZW5ndGhdKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ3JhbnRfY29udHJvbCgpIHtcbiAgICAgICAgY29uc3QgY29udHJvbHMgPSBbXG4gICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5BLCBvbl9kb3duOiB0aGlzLnRyaWdnZXJfc3RhdGVfY2hhbmdlLmJpbmQodGhpcyl9LFxuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuQiwgb25fZG93bjogdGhpcy5jbG9zZS5iaW5kKHRoaXMsIHRoaXMuY2xvc2VfY2FsbGJhY2spfSxcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkwsIG9uX2Rvd246IHRoaXMucHJldmlvdXNfY2hhci5iaW5kKHRoaXMpfSxcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLlIsIG9uX2Rvd246IHRoaXMubmV4dF9jaGFyLmJpbmQodGhpcyl9LFxuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuTEVGVCwgb25fZG93bjogdGhpcy5jdXJyZW50X2NvbXBvbmVudC5vbl9sZWZ0LmJpbmQodGhpcy5jdXJyZW50X2NvbXBvbmVudCl9LFxuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuUklHSFQsIG9uX2Rvd246IHRoaXMuY3VycmVudF9jb21wb25lbnQub25fcmlnaHQuYmluZCh0aGlzLmN1cnJlbnRfY29tcG9uZW50KX0sXG4gICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5VUCwgb25fZG93bjogdGhpcy5jdXJyZW50X2NvbXBvbmVudC5vbl91cC5iaW5kKHRoaXMuY3VycmVudF9jb21wb25lbnQpfSxcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkRPV04sIG9uX2Rvd246IHRoaXMuY3VycmVudF9jb21wb25lbnQub25fZG93bi5iaW5kKHRoaXMuY3VycmVudF9jb21wb25lbnQpfSxcbiAgICAgICAgXTtcblxuICAgICAgICB0aGlzLmRhdGEuY29udHJvbF9tYW5hZ2VyLnNldF9jb250cm9sKGNvbnRyb2xzLCB7XG4gICAgICAgICAgICBsb29wX2NvbmZpZ3M6IHt2ZXJ0aWNhbDogdHJ1ZSwgaG9yaXpvbnRhbDogdHJ1ZSwgc2hvdWxkZXI6IHRydWV9LFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdHJpZ2dlcl9zdGF0ZV9jaGFuZ2UoKSB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRfc3RhdGUgPT09IEJhdHRsZVN0YXR1c1N0YXRlcy5JVEVNUykgdGhpcy5jdXJyZW50X3N0YXRlID0gQmF0dGxlU3RhdHVzU3RhdGVzLlNUQVRJU1RJQ1M7XG4gICAgICAgIGVsc2UgdGhpcy5jdXJyZW50X3N0YXRlKys7XG5cbiAgICAgICAgdGhpcy5jaGFuZ2Vfc3RhdGUodGhpcy5jdXJyZW50X3N0YXRlLCB0cnVlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNoYW5nZV9zdGF0ZShuZXdfc3RhdGU6IEJhdHRsZVN0YXR1c1N0YXRlcywgcmVzZXRfcG9zOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgbGV0IHBvcyA9IHtsaW5lOiAwLCBjb2w6IDB9O1xuXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRfY29tcG9uZW50KSB7XG4gICAgICAgICAgICBpZiAoIXJlc2V0X3BvcykgcG9zID0gdGhpcy5jdXJyZW50X2NvbXBvbmVudC5jdXJyZW50X3BvcztcblxuICAgICAgICAgICAgdGhpcy5jdXJyZW50X2NvbXBvbmVudC5jbGVhcigpO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50X2NvbXBvbmVudCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmN1cnJlbnRfc3RhdGUgPSBuZXdfc3RhdGU7XG4gICAgICAgIHRoaXMuY3VycmVudF9jb21wb25lbnQgPSB0aGlzLmNvbXBvbmVudHNbdGhpcy5jdXJyZW50X3N0YXRlXTtcbiAgICAgICAgdGhpcy5jaGVja19zaGlmdCgpO1xuXG4gICAgICAgIHRoaXMuY3VycmVudF9jb21wb25lbnQucmVzZXQocG9zKTtcbiAgICAgICAgdGhpcy5ncmFudF9jb250cm9sKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjaGVja19zaGlmdCgpIHtcbiAgICAgICAgY29uc3Qgc2hpZnQgPSB0aGlzLmN1cnJlbnRfc3RhdGUgIT09IEJhdHRsZVN0YXR1c1N0YXRlcy5TVEFUSVNUSUNTO1xuICAgICAgICBpZiAodGhpcy5kZXNjX3NoaWZ0ZWQgPT09IHNoaWZ0KSByZXR1cm47XG5cbiAgICAgICAgdGhpcy53aW5kb3cuY2xlYXJfc2VwYXJhdG9ycygpO1xuXG4gICAgICAgIGNvbnN0IHNlcGFyYXRvcl94ID0gQmF0dGxlU3RhdHVzV2luZG93LlNFUEFSQVRPUi5YO1xuICAgICAgICBjb25zdCBzZXBhcmF0b3JfeSA9IEJhdHRsZVN0YXR1c1dpbmRvdy5TRVBBUkFUT1IuWSArIChzaGlmdCA/IEJhdHRsZVN0YXR1c1dpbmRvdy5TRVBBUkFUT1IuU0hJRlQgOiAwKTtcbiAgICAgICAgY29uc3Qgc2VwYXJhdG9yX3dpZHRoID0gQmF0dGxlU3RhdHVzV2luZG93LlNFUEFSQVRPUi5XSURUSDtcblxuICAgICAgICB0aGlzLndpbmRvdy5kcmF3X3NlcGFyYXRvcihzZXBhcmF0b3JfeCwgc2VwYXJhdG9yX3ksIHNlcGFyYXRvcl94ICsgc2VwYXJhdG9yX3dpZHRoLCBzZXBhcmF0b3JfeSwgZmFsc2UpO1xuXG4gICAgICAgIHRoaXMuZGVzY19zaGlmdGVkID0gc2hpZnQ7XG4gICAgfVxuXG4gICAgcHVibGljIHVwZGF0ZV9kZXNjcmlwdGlvbihsaW5lMTogc3RyaW5nLCBsaW5lMj86IHN0cmluZykge1xuICAgICAgICBpZiAobGluZTIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy53aW5kb3cudXBkYXRlX3RleHQoXCJcIiwgdGhpcy5kZXNjX2xpbmUxKTtcbiAgICAgICAgICAgIHRoaXMud2luZG93LnVwZGF0ZV90ZXh0KGxpbmUxLCB0aGlzLmRlc2NfbGluZTIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy53aW5kb3cudXBkYXRlX3RleHQobGluZTEsIHRoaXMuZGVzY19saW5lMSk7XG4gICAgICAgICAgICB0aGlzLndpbmRvdy51cGRhdGVfdGV4dChsaW5lMiwgdGhpcy5kZXNjX2xpbmUyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBvcGVuKHNlbGVjdGVkX2NoYXI/OiBNYWluQ2hhciwgY2xvc2VfY2FsbGJhY2s/OiBGdW5jdGlvbiwgb3Blbl9jYWxsYmFjaz86IEZ1bmN0aW9uKSB7XG4gICAgICAgIGlmICghc2VsZWN0ZWRfY2hhcikgdGhpcy5zZWxlY3RlZF9jaGFyID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzWzBdO1xuICAgICAgICBlbHNlIHRoaXMuc2VsZWN0ZWRfY2hhciA9IHNlbGVjdGVkX2NoYXI7XG5cbiAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayA9IGNsb3NlX2NhbGxiYWNrO1xuXG4gICAgICAgIHRoaXMud2luZG93LnNob3coKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVfaW5mbygpO1xuICAgICAgICAgICAgdGhpcy5zZXRfc3ByaXRlcygpO1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2Vfc3RhdGUoQmF0dGxlU3RhdHVzU3RhdGVzLlNUQVRJU1RJQ1MpO1xuXG4gICAgICAgICAgICBpZiAob3Blbl9jYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIG9wZW5fY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGNsZWFyX2NvbXBvbmVudCgpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50X2NvbXBvbmVudC5jbGVhcigpO1xuICAgICAgICB0aGlzLmN1cnJlbnRfc3RhdGUgPSBudWxsO1xuICAgICAgICB0aGlzLmN1cnJlbnRfY29tcG9uZW50ID0gbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2xvc2UoY2FsbGJhY2s/OiBGdW5jdGlvbikge1xuICAgICAgICB0aGlzLmNsZWFyX2NvbXBvbmVudCgpO1xuICAgICAgICB0aGlzLndpbmRvdy5jbG9zZShjYWxsYmFjayk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtTdGF0dXNDb21wb25lbnR9IGZyb20gXCIuL1N0YXR1c0NvbXBvbmVudFwiO1xuaW1wb3J0IHtXaW5kb3d9IGZyb20gXCIuLi9XaW5kb3dcIjtcbmltcG9ydCB7R29sZGVuU3VufSBmcm9tIFwiLi4vR29sZGVuU3VuXCI7XG5pbXBvcnQge0N1cnNvck1hbmFnZXIsIFBvaW50VmFyaWFudHN9IGZyb20gXCIuLi91dGlscy9DdXJzb3JNYW5hZ2VyXCI7XG5pbXBvcnQge0JhdHRsZVN0YXR1c1dpbmRvd30gZnJvbSBcIi4uL3dpbmRvd3MvYmF0dGxlL0JhdHRsZVN0YXR1c1dpbmRvd1wiO1xuaW1wb3J0IHtlZmZlY3RfdHlwZV9zdGF0LCBvcmRlcmVkX3N0YXR1c19iYXR0bGUsIHBlcm1hbmVudF9zdGF0dXMsIHRlbXBvcmFyeV9zdGF0dXN9IGZyb20gXCIuLi9QbGF5ZXJcIjtcbmltcG9ydCB7ZWxlbWVudHMsIGVsZW1lbnRfbmFtZXMsIG9yZGVyZWRfZWxlbWVudHN9IGZyb20gXCIuLi91dGlsc1wiO1xuaW1wb3J0IHtlZmZlY3RfbmFtZXMsIGVmZmVjdF90eXBlc30gZnJvbSBcIi4uL0VmZmVjdFwiO1xuaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XG5pbXBvcnQge01haW5TdGF0dXNNZW51fSBmcm9tIFwiLi4vbWFpbl9tZW51cy9NYWluU3RhdHVzTWVudVwiO1xuXG5leHBvcnQgZW51bSBCYXR0bGVTdGF0aXN0aWNzIHtcbiAgICBOQU1FLFxuICAgIEVYUCxcbiAgICBIUCxcbiAgICBQUCxcbiAgICBDTEFTUyxcbiAgICBESklOTixcbiAgICBFTEVNX0xFVkVMUyxcbiAgICBFTEVNX1BPV0VSLFxuICAgIEVMRU1fUkVTSVNULFxufVxuXG5leHBvcnQgY2xhc3MgQmF0dGxlU3RhdHVzU3RhdGlzdGljcyBleHRlbmRzIFN0YXR1c0NvbXBvbmVudCB7XG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBCYXR0bGVTdGF0dXNNc2dzID0ge1xuICAgICAgICBbdGVtcG9yYXJ5X3N0YXR1cy5ERUxVU0lPTl06IHtcbiAgICAgICAgICAgIGxpbmUxOiBcIkRlbHVzaW9ucyBtaXNkaXJlY3QgeW91ciBhdHRhY2tzLlwiLFxuICAgICAgICAgICAgbGluZTI6IFwiQ3VyZSB3aXRoIEVsaXhlciBvciBSZXN0b3JlLlwiLFxuICAgICAgICB9LFxuICAgICAgICBbdGVtcG9yYXJ5X3N0YXR1cy5TVFVOXToge1xuICAgICAgICAgICAgbGluZTE6IFwiWW91IGFyZSBzdHVubmVkIGFuZCBjYW5ub3QgYWN0LlwiLFxuICAgICAgICAgICAgbGluZTI6IFwiQ3VyZSB3aXRoIEVsaXhlciBvciBSZXN0b3JlLlwiLFxuICAgICAgICB9LFxuICAgICAgICBbdGVtcG9yYXJ5X3N0YXR1cy5TTEVFUF06IHtcbiAgICAgICAgICAgIGxpbmUxOiBcIlNsZWVwIHByZXZlbnRzIHlvdSBmcm9tIGFjdGluZy5cIixcbiAgICAgICAgICAgIGxpbmUyOiBcIldha2Ugd2l0aCBFbGl4ZXIgb3IgUmVzdG9yZS5cIixcbiAgICAgICAgfSxcbiAgICAgICAgW3RlbXBvcmFyeV9zdGF0dXMuU0VBTF06IHtcbiAgICAgICAgICAgIGxpbmUxOiBcIllvdXIgUHN5bmVyZ3kgaXMgc2VhbGVkLlwiLFxuICAgICAgICAgICAgbGluZTI6IFwiQ3VyZSB3aXRoIEVsaXhlciBvciBSZXN0b3JlLlwiLFxuICAgICAgICB9LFxuICAgICAgICBbdGVtcG9yYXJ5X3N0YXR1cy5ERUFUSF9DVVJTRV06IHtcbiAgICAgICAgICAgIGxpbmUxOiAodHVybnM6IG51bWJlcikgPT4gYFlvdSB3aWxsIGJlIGRvd25lZCBpbiAke3R1cm5zfSB0dXJucy5gLFxuICAgICAgICAgICAgbGluZTI6IFwiQ3VyZSB3dGggRWxpeGVyIG9yIFJlc3RvcmUuXCIsXG4gICAgICAgIH0sXG4gICAgICAgIFtwZXJtYW5lbnRfc3RhdHVzLkRPV05FRF06IHtcbiAgICAgICAgICAgIGxpbmUxOiBcIllvdSBhcmUgZG93bi4gSGVhbCBhdCBhIFNhbmN0dW1cIixcbiAgICAgICAgICAgIGxpbmUyOiBcIm9yIHVzZSBSZXZpdmUgb3IgV2F0ZXIgb2YgTGlmZS5cIixcbiAgICAgICAgfSxcbiAgICAgICAgW3Blcm1hbmVudF9zdGF0dXMuUE9JU09OXToge1xuICAgICAgICAgICAgbGluZTE6IFwiQSBtaWxkIHBvaXNvbiB3cmFja3MgeW91ciBib2R5LlwiLFxuICAgICAgICAgICAgbGluZTI6IFwiQ3VyZSB3aXRoIEFudGlkb3RlIG9yIEN1cmUgUG9pc29uLlwiLFxuICAgICAgICB9LFxuICAgICAgICBbcGVybWFuZW50X3N0YXR1cy5WRU5PTV06IHtcbiAgICAgICAgICAgIGxpbmUxOiBcIkEgdmlsZSBwb2lzb24gd3JhY2tzIHlvdXIgYm9keS5cIixcbiAgICAgICAgICAgIGxpbmUyOiBcIkN1cmUgd2l0aCBBbnRpZG90ZSBvciBDdXJlIFBvaXNvbi5cIixcbiAgICAgICAgfSxcbiAgICAgICAgW3Blcm1hbmVudF9zdGF0dXMuRVFVSVBfQ1VSU0VdOiB7XG4gICAgICAgICAgICBsaW5lMTogXCJBIGN1cnNlZCBpdGVtIGJpbmRzIHlvdXIgYWN0aW9ucy5cIixcbiAgICAgICAgICAgIGxpbmUyOiBcIlJlbW92ZSB0aGUgaXRlbSBhdCBhIFNhbmN0dW0uXCIsXG4gICAgICAgIH0sXG4gICAgICAgIFtwZXJtYW5lbnRfc3RhdHVzLkhBVU5UXToge1xuICAgICAgICAgICAgbGluZTE6IFwiQW4gZXZpbCBzcGlyaXQgd291bmRzIHlvdS5cIixcbiAgICAgICAgICAgIGxpbmUyOiBcIkV4b3JjaXNlIGl0IGF0IGEgU2FuY3R1bS5cIixcbiAgICAgICAgfSxcbiAgICB9O1xuXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBCYXR0bGVCdWZmTXNncyA9IHtcbiAgICAgICAgdXA6IHtcbiAgICAgICAgICAgIFtlZmZlY3RfdHlwZXMuQVRUQUNLXToge1xuICAgICAgICAgICAgICAgIGxpbmUxOiAodmFsdWU6IG51bWJlcikgPT4gYEF0dGFjayBpbmNyZWFzZWQgYnkgJHt2YWx1ZX0uYCxcbiAgICAgICAgICAgICAgICBsaW5lMjogXCJcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbZWZmZWN0X3R5cGVzLkRFRkVOU0VdOiB7XG4gICAgICAgICAgICAgICAgbGluZTE6ICh2YWx1ZTogbnVtYmVyKSA9PiBgRGVmZW5zZSBpbmNyZWFzZWQgYnkgJHt2YWx1ZX0uYCxcbiAgICAgICAgICAgICAgICBsaW5lMjogXCJcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbZWZmZWN0X3R5cGVzLkFHSUxJVFldOiB7XG4gICAgICAgICAgICAgICAgbGluZTE6ICh2YWx1ZTogbnVtYmVyKSA9PiBgQWdpbGl0eSBpbmNyZWFzZWQgYnkgJHt2YWx1ZX0uYCxcbiAgICAgICAgICAgICAgICBsaW5lMjogXCJcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIGRvd246IHtcbiAgICAgICAgICAgIFtlZmZlY3RfdHlwZXMuQVRUQUNLXToge1xuICAgICAgICAgICAgICAgIGxpbmUxOiAodmFsdWU6IG51bWJlcikgPT4gYEF0dGFjayBkcm9wcGVkIGJ5ICR7dmFsdWV9LmAsXG4gICAgICAgICAgICAgICAgbGluZTI6IFwiSW5jcmVhc2Ugd2l0aCBzcGVsbHMgbGlrZSBJbXBhY3QuXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgW2VmZmVjdF90eXBlcy5ERUZFTlNFXToge1xuICAgICAgICAgICAgICAgIGxpbmUxOiAodmFsdWU6IG51bWJlcikgPT4gYERlZmVuc2UgZHJvcHBlZCBieSAke3ZhbHVlfS5gLFxuICAgICAgICAgICAgICAgIGxpbmUyOiBcIkluY3JlYXNlIHdpdGggc3BlbGxzIGxpa2UgR3VhcmQuXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgW2VmZmVjdF90eXBlcy5BR0lMSVRZXToge1xuICAgICAgICAgICAgICAgIGxpbmUxOiAodmFsdWU6IG51bWJlcikgPT4gYEFnaWxpdHkgZHJvcHBlZCBieSAke3ZhbHVlfS5gLFxuICAgICAgICAgICAgICAgIGxpbmUyOiBcIlwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9O1xuXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBCYXR0bGVEZXNjcmlwdGlvbnMgPSB7XG4gICAgICAgIFtCYXR0bGVTdGF0aXN0aWNzLk5BTUVdOiB7bGluZTE6IFwiVXNlIHRoZSBMICYgUiBCdXR0b25zIHRvXCIsIGxpbmUyOiBcInN3aXRjaCBiZXR3ZWVuIGNoYXJhY3RlcnMuXCJ9LFxuICAgICAgICBbQmF0dGxlU3RhdGlzdGljcy5FWFBdOiB7bGluZTE6IFwiQ3VycmVudCBleHBlcmllbmNlIHBvaW50cy5cIiwgbGluZTI6IChleHA6IG51bWJlcikgPT4gYCR7ZXhwfSB0byBuZXh0IGxldmVsLmB9LFxuICAgICAgICBbQmF0dGxlU3RhdGlzdGljcy5IUF06IHtsaW5lMTogXCJZb3VyIGN1cnJlbnQgYW5kIG1heGltdW0gSFAuXCIsIGxpbmUyOiBcIkFmZmVjdGVkIGJ5IERqaW5uIGFuZCBlcXVpcG1lbnQuXCJ9LFxuICAgICAgICBbQmF0dGxlU3RhdGlzdGljcy5QUF06IHtsaW5lMTogXCJZb3VyIGN1cnJlbnQgYW5kIG1heGltdW0gUFAuXCIsIGxpbmUyOiBcIkFmZmVjdGVkIGJ5IERqaW5uIGFuZCBlcXVpcG1lbnQuXCJ9LFxuICAgICAgICBbQmF0dGxlU3RhdGlzdGljcy5DTEFTU106IHtsaW5lMTogXCJZb3VyIGN1cnJlbnQgY2xhc3MuIFlvdXJcIiwgbGluZTI6IFwiY2xhc3MgY2hhbmdlcyB3aGVuIHlvdSBzZXQgRGppbm4uXCJ9LFxuICAgICAgICBbQmF0dGxlU3RhdGlzdGljcy5ESklOTl06IHtcbiAgICAgICAgICAgIGxpbmUxOiBcIlRoZSBudW1iZXIgb2YgRGppbm4gY3VycmVudGx5IHNldFwiLFxuICAgICAgICAgICAgbGluZTI6IFwiYW5kIHlvdXIgdG90YWwgbnVtYmVyIG9mIERqaW5uLlwiLFxuICAgICAgICB9LFxuICAgICAgICBbQmF0dGxlU3RhdGlzdGljcy5FTEVNX0xFVkVMU106IHtcbiAgICAgICAgICAgIGxpbmUxOiBcIllvdXIgRWxlbWVudGFsIExldmVscy4gVGhlc2VcIixcbiAgICAgICAgICAgIGxpbmUyOiBcInJlZmxlY3QgeW91ciBza2lsbCBpbiBlYWNoIGVsZW1lbnQuXCIsXG4gICAgICAgIH0sXG4gICAgICAgIFtCYXR0bGVTdGF0aXN0aWNzLkVMRU1fUE9XRVJdOiB7bGluZTE6IFwiUG93ZXIgcmVmbGVjdHMgdGhlIGRhbWFnZSB5b3VcIiwgbGluZTI6IFwiY2FuIGRvIHdpdGggZWFjaCBlbGVtZW50LlwifSxcbiAgICAgICAgW0JhdHRsZVN0YXRpc3RpY3MuRUxFTV9SRVNJU1RdOiB7XG4gICAgICAgICAgICBsaW5lMTogXCJSZXNpc3QgcmVmbGVjdHMgeW91ciBkZWZlbnNpdmVcIixcbiAgICAgICAgICAgIGxpbmUyOiBcInN0cmVuZ3RoIGFnYWluc3QgZWFjaCBlbGVtZW50LlwiLFxuICAgICAgICB9LFxuICAgIH07XG5cbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IENVUlNPUiA9IHtcbiAgICAgICAgW0JhdHRsZVN0YXRpc3RpY3MuTkFNRV06IHtYOiAzMSwgWTogMTV9LFxuICAgICAgICBbQmF0dGxlU3RhdGlzdGljcy5FWFBdOiB7WDogNzksIFk6IDIzfSxcbiAgICAgICAgW0JhdHRsZVN0YXRpc3RpY3MuSFBdOiB7WDogMTExLCBZOiAzOX0sXG4gICAgICAgIFtCYXR0bGVTdGF0aXN0aWNzLlBQXToge1g6IDExMSwgWTogNDd9LFxuICAgICAgICBbQmF0dGxlU3RhdGlzdGljcy5DTEFTU106IHtYOiAzOSwgWTogNjN9LFxuICAgICAgICBbQmF0dGxlU3RhdGlzdGljcy5ESklOTl06IHtYOiAxMTksIFk6IDg3fSxcbiAgICAgICAgW0JhdHRsZVN0YXRpc3RpY3MuRUxFTV9MRVZFTFNdOiB7WDogMTE5LCBZOiA5NX0sXG4gICAgICAgIFtCYXR0bGVTdGF0aXN0aWNzLkVMRU1fUE9XRVJdOiB7WDogMTE5LCBZOiAxMDN9LFxuICAgICAgICBbQmF0dGxlU3RhdGlzdGljcy5FTEVNX1JFU0lTVF06IHtYOiAxMTksIFk6IDExMX0sXG4gICAgICAgIEVGRkVDVDoge1g6IDExOSwgWTogMTUsIFNISUZUOiAxNn0sXG4gICAgfTtcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEhJR0hMSUdIVCA9IHtcbiAgICAgICAgW0JhdHRsZVN0YXRpc3RpY3MuTkFNRV06IHtYOiA4LCBZOiA4LCBXSURUSDogOTYsIEhFSUdIVDogOH0sXG4gICAgICAgIFtCYXR0bGVTdGF0aXN0aWNzLkVYUF06IHtYOiA4LCBZOiAxNiwgV0lEVEg6IDEwNCwgSEVJR0hUOiA4fSxcbiAgICAgICAgW0JhdHRsZVN0YXRpc3RpY3MuSFBdOiB7WDogNDgsIFk6IDMyLCBXSURUSDogODgsIEhFSUdIVDogOH0sXG4gICAgICAgIFtCYXR0bGVTdGF0aXN0aWNzLlBQXToge1g6IDQ4LCBZOiA0MCwgV0lEVEg6IDg4LCBIRUlHSFQ6IDh9LFxuICAgICAgICBbQmF0dGxlU3RhdGlzdGljcy5DTEFTU106IHtYOiA4LCBZOiA1NiwgV0lEVEg6IDgwLCBIRUlHSFQ6IDh9LFxuICAgICAgICBbQmF0dGxlU3RhdGlzdGljcy5ESklOTl06IHtYOiA4LCBZOiA4MCwgV0lEVEg6IDE2MCwgSEVJR0hUOiA4fSxcbiAgICAgICAgW0JhdHRsZVN0YXRpc3RpY3MuRUxFTV9MRVZFTFNdOiB7WDogOCwgWTogODgsIFdJRFRIOiAxNjAsIEhFSUdIVDogOH0sXG4gICAgICAgIFtCYXR0bGVTdGF0aXN0aWNzLkVMRU1fUE9XRVJdOiB7WDogOCwgWTogOTYsIFdJRFRIOiAxNjAsIEhFSUdIVDogOH0sXG4gICAgICAgIFtCYXR0bGVTdGF0aXN0aWNzLkVMRU1fUkVTSVNUXToge1g6IDgsIFk6IDEwNCwgV0lEVEg6IDE2MCwgSEVJR0hUOiA4fSxcbiAgICAgICAgRUZGRUNUOiB7WDogMTEyLCBZOiA4LCBXSURUSDogMTYsIEhFSUdIVDogMTYsIFNISUZUOiAxNn0sXG4gICAgICAgIE5PUk1BTDoge1g6IDEyMCwgWTogOCwgV0lEVEg6IDgwLCBIRUlHSFQ6IDh9LFxuICAgIH07XG5cbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBMSU5FUyA9IDk7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgU1RBUlMgPSB7WDogNjQsIFk6IDczfTtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBTVEFSU19TSElGVCA9IDMyO1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IExBQkVMID0ge1g6IDgsIFk6IDgwfTtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBMQUJFTF9TSElGVCA9IDg7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgRUxFTV9OVU1CRVJTID0ge0VORF9YOiA2OSwgWTogODAsIFhfU0hJRlQ6IDMyLCBZX1NISUZUOiA4fTtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihcbiAgICAgICAgZ2FtZTogUGhhc2VyLkdhbWUsXG4gICAgICAgIGRhdGE6IEdvbGRlblN1bixcbiAgICAgICAgd2luZG93OiBXaW5kb3csXG4gICAgICAgIG1hbmFnZXI6IEJhdHRsZVN0YXR1c1dpbmRvdyB8IE1haW5TdGF0dXNNZW51LFxuICAgICAgICBwb3M/OiB7bGluZTogbnVtYmVyOyBjb2w6IG51bWJlcn1cbiAgICApIHtcbiAgICAgICAgc3VwZXIoZ2FtZSwgZGF0YSwgd2luZG93LCBtYW5hZ2VyLCBwb3MpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZWxlY3Rfb3B0aW9uKCkge1xuICAgICAgICBjb25zdCBoaWdobGlnaHQgPSB7eDogMCwgeTogMCwgd2lkdGg6IDAsIGhlaWdodDogMH07XG4gICAgICAgIGxldCBjdXJzb3JfeCA9IDA7XG4gICAgICAgIGxldCBjdXJzb3JfeSA9IDA7XG5cbiAgICAgICAgaWYgKHRoaXMuY3VycmVudF9jb2wgPT09IDApIHtcbiAgICAgICAgICAgIGhpZ2hsaWdodC54ID0gQmF0dGxlU3RhdHVzU3RhdGlzdGljcy5ISUdITElHSFRbdGhpcy5jdXJyZW50X2xpbmVdLlg7XG4gICAgICAgICAgICBoaWdobGlnaHQueSA9IEJhdHRsZVN0YXR1c1N0YXRpc3RpY3MuSElHSExJR0hUW3RoaXMuY3VycmVudF9saW5lXS5ZO1xuICAgICAgICAgICAgaGlnaGxpZ2h0LndpZHRoID0gQmF0dGxlU3RhdHVzU3RhdGlzdGljcy5ISUdITElHSFRbdGhpcy5jdXJyZW50X2xpbmVdLldJRFRIO1xuICAgICAgICAgICAgaGlnaGxpZ2h0LmhlaWdodCA9IEJhdHRsZVN0YXR1c1N0YXRpc3RpY3MuSElHSExJR0hUW3RoaXMuY3VycmVudF9saW5lXS5IRUlHSFQ7XG5cbiAgICAgICAgICAgIGN1cnNvcl94ID0gQmF0dGxlU3RhdHVzU3RhdGlzdGljcy5DVVJTT1JbdGhpcy5jdXJyZW50X2xpbmVdLlg7XG4gICAgICAgICAgICBjdXJzb3JfeSA9IEJhdHRsZVN0YXR1c1N0YXRpc3RpY3MuQ1VSU09SW3RoaXMuY3VycmVudF9saW5lXS5ZO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuYmF0dGxlX3N0YXR1c19lZmZlY3RzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGhpZ2hsaWdodC54ID0gQmF0dGxlU3RhdHVzU3RhdGlzdGljcy5ISUdITElHSFQuTk9STUFMLlg7XG4gICAgICAgICAgICAgICAgaGlnaGxpZ2h0LnkgPSBCYXR0bGVTdGF0dXNTdGF0aXN0aWNzLkhJR0hMSUdIVC5OT1JNQUwuWTtcbiAgICAgICAgICAgICAgICBoaWdobGlnaHQud2lkdGggPSBCYXR0bGVTdGF0dXNTdGF0aXN0aWNzLkhJR0hMSUdIVC5OT1JNQUwuV0lEVEg7XG4gICAgICAgICAgICAgICAgaGlnaGxpZ2h0LmhlaWdodCA9IEJhdHRsZVN0YXR1c1N0YXRpc3RpY3MuSElHSExJR0hULk5PUk1BTC5IRUlHSFQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBoaWdobGlnaHRfc2hpZnQgPSBCYXR0bGVTdGF0dXNTdGF0aXN0aWNzLkhJR0hMSUdIVC5FRkZFQ1QuU0hJRlQ7XG4gICAgICAgICAgICAgICAgaGlnaGxpZ2h0LnggPSBCYXR0bGVTdGF0dXNTdGF0aXN0aWNzLkhJR0hMSUdIVC5FRkZFQ1QuWCArIGhpZ2hsaWdodF9zaGlmdCAqICh0aGlzLmN1cnJlbnRfY29sIC0gMSk7XG4gICAgICAgICAgICAgICAgaGlnaGxpZ2h0LnkgPSBCYXR0bGVTdGF0dXNTdGF0aXN0aWNzLkhJR0hMSUdIVC5FRkZFQ1QuWTtcbiAgICAgICAgICAgICAgICBoaWdobGlnaHQud2lkdGggPSBCYXR0bGVTdGF0dXNTdGF0aXN0aWNzLkhJR0hMSUdIVC5FRkZFQ1QuV0lEVEg7XG4gICAgICAgICAgICAgICAgaGlnaGxpZ2h0LmhlaWdodCA9IEJhdHRsZVN0YXR1c1N0YXRpc3RpY3MuSElHSExJR0hULkVGRkVDVC5IRUlHSFQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGN1cnNvcl9zaGlmdCA9IEJhdHRsZVN0YXR1c1N0YXRpc3RpY3MuQ1VSU09SLkVGRkVDVC5TSElGVDtcbiAgICAgICAgICAgIGN1cnNvcl94ID0gQmF0dGxlU3RhdHVzU3RhdGlzdGljcy5DVVJTT1IuRUZGRUNULlggKyBjdXJzb3Jfc2hpZnQgKiAodGhpcy5jdXJyZW50X2NvbCAtIDEpO1xuICAgICAgICAgICAgY3Vyc29yX3kgPSBCYXR0bGVTdGF0dXNTdGF0aXN0aWNzLkNVUlNPUi5FRkZFQ1QuWTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZV9oaWdobGlnaHQoaGlnaGxpZ2h0KTtcblxuICAgICAgICBjb25zdCBjdXJzb3JfdHdlZW4gPSB7dHlwZTogQ3Vyc29yTWFuYWdlci5DdXJzb3JUd2VlbnMuUE9JTlQsIHZhcmlhbnQ6IFBvaW50VmFyaWFudHMuU0hPUlR9O1xuICAgICAgICB0aGlzLmRhdGEuY3Vyc29yX21hbmFnZXIubW92ZV90byhcbiAgICAgICAgICAgIHt4OiBjdXJzb3JfeCwgeTogY3Vyc29yX3l9LFxuICAgICAgICAgICAge2FuaW1hdGU6IGZhbHNlLCBmbGlwOiB0cnVlLCB0d2Vlbl9jb25maWc6IGN1cnNvcl90d2Vlbn1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25fY2hhbmdlKCkge1xuICAgICAgICB0aGlzLnNlbGVjdF9vcHRpb24oKTtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudF9jb2wgPT09IDApIHtcbiAgICAgICAgICAgIGNvbnN0IG1zZ3MgPSB7XG4gICAgICAgICAgICAgICAgbGluZTE6IEJhdHRsZVN0YXR1c1N0YXRpc3RpY3MuQmF0dGxlRGVzY3JpcHRpb25zW3RoaXMuY3VycmVudF9saW5lXS5saW5lMSxcbiAgICAgICAgICAgICAgICBsaW5lMjogQmF0dGxlU3RhdHVzU3RhdGlzdGljcy5CYXR0bGVEZXNjcmlwdGlvbnNbdGhpcy5jdXJyZW50X2xpbmVdLmxpbmUyLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudF9saW5lID09PSBCYXR0bGVTdGF0aXN0aWNzLkVYUCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoYXIgPSB0aGlzLnNlbGVjdGVkX2NoYXI7XG4gICAgICAgICAgICAgICAgY29uc3QgZXhwID0gY2hhci5leHBfY3VydmVbY2hhci5sZXZlbF0gLSBjaGFyLmN1cnJlbnRfZXhwO1xuICAgICAgICAgICAgICAgIG1zZ3MubGluZTIgPSBtc2dzLmxpbmUyKGV4cCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZV9kZXNjcmlwdGlvbihtc2dzLmxpbmUxLCBtc2dzLmxpbmUyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmJhdHRsZV9zdGF0dXNfZWZmZWN0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZV9kZXNjcmlwdGlvbihcIk5vcm1hbCBzdGF0dXMuXCIsIFwiXCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlZmZlY3QgPSB0aGlzLmJhdHRsZV9zdGF0dXNfZWZmZWN0c1t0aGlzLmN1cnJlbnRfY29sIC0gMV07XG5cbiAgICAgICAgICAgICAgICBsZXQgbXNncyA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKG9yZGVyZWRfc3RhdHVzX2JhdHRsZS5pbmNsdWRlcyhlZmZlY3Qua2V5IGFzIHRlbXBvcmFyeV9zdGF0dXMgfCBwZXJtYW5lbnRfc3RhdHVzKSkge1xuICAgICAgICAgICAgICAgICAgICBtc2dzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZTE6IEJhdHRsZVN0YXR1c1N0YXRpc3RpY3MuQmF0dGxlU3RhdHVzTXNnc1tlZmZlY3Qua2V5XS5saW5lMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUyOiBCYXR0bGVTdGF0dXNTdGF0aXN0aWNzLkJhdHRsZVN0YXR1c01zZ3NbZWZmZWN0LmtleV0ubGluZTIsXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVmZmVjdC5rZXkgPT09IHRlbXBvcmFyeV9zdGF0dXMuREVBVEhfQ1VSU0UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHR1cm5zID0gZWZmZWN0LnByb3BlcnRpZXMudHVybnMgPyBlZmZlY3QucHJvcGVydGllcy50dXJucyA6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBtc2dzLmxpbmUxID0gbXNncy5saW5lMSh0dXJucyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVmZmVjdC5rZXkgPT09IGVmZmVjdF90eXBlcy5SRVNJU1QgfHwgZWZmZWN0LmtleSA9PT0gZWZmZWN0X3R5cGVzLlBPV0VSKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVmZmVjdF9uYW1lID0gZWZmZWN0X25hbWVzW2VmZmVjdC5rZXldO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1zX3RvX3Nob3cgPSBfLmZsYXRNYXAoZWxlbWVudHMsIGVsZW1lbnQgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgIGVmZmVjdC5wcm9wZXJ0aWVzLnZhbHVlW2VsZW1lbnRdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZWZmZWN0LnByb3BlcnRpZXMudmFsdWVbZWxlbWVudF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFtdXG4gICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgbXNncyA9IHtsaW5lMTogXCJcIiwgbGluZTI6IFwiXCJ9O1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbXNfdG9fc2hvdy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1zX3RvX3Nob3dbaV0udmFsdWUgPj0gMCkgZWxlbXNfdG9fc2hvd1tpXS52YWx1ZSA9IFwiK1wiICsgZWxlbXNfdG9fc2hvd1tpXS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRfbmFtZSA9IGVsZW1lbnRfbmFtZXNbZWxlbXNfdG9fc2hvd1tpXS5lbGVtZW50XTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZSA9IGkgPCAyID8gXCJsaW5lMVwiIDogXCJsaW5lMlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgbXNnc1tsaW5lXSArPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpICUgMiAhPT0gMCA/IFwiLCBcIiA6IFwiXCIpICsgZWxlbWVudF9uYW1lICsgXCIgXCIgKyBlZmZlY3RfbmFtZSArIFwiIFwiICsgZWxlbXNfdG9fc2hvd1tpXS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChtc2dzLmxpbmUyID09PSBcIlwiKSBtc2dzLmxpbmUxICs9IFwiLlwiO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIG1zZ3MubGluZTIgKz0gXCIuXCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlZmZlY3Qua2V5IGluIGVmZmVjdF90eXBlX3N0YXQpIHtcbiAgICAgICAgICAgICAgICAgICAgbXNncyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUxOiBCYXR0bGVTdGF0dXNTdGF0aXN0aWNzLkJhdHRsZUJ1ZmZNc2dzW2VmZmVjdC5wcm9wZXJ0aWVzLm1vZGlmaWVyXVtlZmZlY3Qua2V5XS5saW5lMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUyOiBCYXR0bGVTdGF0dXNTdGF0aXN0aWNzLkJhdHRsZUJ1ZmZNc2dzW2VmZmVjdC5wcm9wZXJ0aWVzLm1vZGlmaWVyXVtlZmZlY3Qua2V5XS5saW5lMixcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGVmZmVjdC5wcm9wZXJ0aWVzLnZhbHVlID8gZWZmZWN0LnByb3BlcnRpZXMudmFsdWUgOiAwO1xuICAgICAgICAgICAgICAgICAgICBtc2dzLmxpbmUxID0gbXNncy5saW5lMSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlX2Rlc2NyaXB0aW9uKG1zZ3MubGluZTEsIG1zZ3MubGluZTIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIG9uX2xlZnQoKSB7XG4gICAgICAgIGNvbnN0IGVmZmVjdHNfY291bnQgPSB0aGlzLmJhdHRsZV9zdGF0dXNfZWZmZWN0cy5sZW5ndGg7XG5cbiAgICAgICAgaWYgKGVmZmVjdHNfY291bnQgPT09IDApIHRoaXMuY3VycmVudF9jb2wgPSB0aGlzLmN1cnJlbnRfY29sID09PSAwID8gMSA6IDA7XG4gICAgICAgIGVsc2UgdGhpcy5jdXJyZW50X2NvbCA9ICh0aGlzLmN1cnJlbnRfY29sICsgKGVmZmVjdHNfY291bnQgKyAxKSAtIDEpICUgKGVmZmVjdHNfY291bnQgKyAxKTtcblxuICAgICAgICB0aGlzLm9uX2NoYW5nZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbl9yaWdodCgpIHtcbiAgICAgICAgY29uc3QgZWZmZWN0c19jb3VudCA9IHRoaXMuYmF0dGxlX3N0YXR1c19lZmZlY3RzLmxlbmd0aDtcblxuICAgICAgICBpZiAoZWZmZWN0c19jb3VudCA9PT0gMCkgdGhpcy5jdXJyZW50X2NvbCA9IHRoaXMuY3VycmVudF9jb2wgPT09IDAgPyAxIDogMDtcbiAgICAgICAgZWxzZSB0aGlzLmN1cnJlbnRfY29sID0gKHRoaXMuY3VycmVudF9jb2wgKyAxKSAlIChlZmZlY3RzX2NvdW50ICsgMSk7XG5cbiAgICAgICAgdGhpcy5vbl9jaGFuZ2UoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25fdXAoKSB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRfY29sICE9PSAwKSB0aGlzLmN1cnJlbnRfY29sID0gMDtcbiAgICAgICAgZWxzZSB0aGlzLmN1cnJlbnRfbGluZSA9ICh0aGlzLmN1cnJlbnRfbGluZSArIEJhdHRsZVN0YXR1c1N0YXRpc3RpY3MuTElORVMgLSAxKSAlIEJhdHRsZVN0YXR1c1N0YXRpc3RpY3MuTElORVM7XG5cbiAgICAgICAgdGhpcy5vbl9jaGFuZ2UoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25fZG93bigpIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudF9jb2wgIT09IDApIHRoaXMuY3VycmVudF9jb2wgPSAwO1xuICAgICAgICBlbHNlIHRoaXMuY3VycmVudF9saW5lID0gKHRoaXMuY3VycmVudF9saW5lICsgMSkgJSBCYXR0bGVTdGF0dXNTdGF0aXN0aWNzLkxJTkVTO1xuXG4gICAgICAgIHRoaXMub25fY2hhbmdlKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGluaXRpYWxpemUoKSB7XG4gICAgICAgIGNvbnN0IHN0YXJzID0gW1widmVudXNfc3RhclwiLCBcIm1lcmN1cnlfc3RhclwiLCBcIm1hcnNfc3RhclwiLCBcImp1cGl0ZXJfc3RhclwiXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGFycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgeF9wb3MgPSBCYXR0bGVTdGF0dXNTdGF0aXN0aWNzLlNUQVJTLlggKyBpICogQmF0dGxlU3RhdHVzU3RhdGlzdGljcy5TVEFSU19TSElGVDtcbiAgICAgICAgICAgIGNvbnN0IHlfcG9zID0gQmF0dGxlU3RhdHVzU3RhdGlzdGljcy5TVEFSUy5ZO1xuXG4gICAgICAgICAgICBjb25zdCBzdGFyID0gdGhpcy53aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFxuICAgICAgICAgICAgICAgIHhfcG9zLFxuICAgICAgICAgICAgICAgIHlfcG9zLFxuICAgICAgICAgICAgICAgIHN0YXJzW2ldLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgQmF0dGxlU3RhdHVzU3RhdGlzdGljcy5HUk9VUF9LRVlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlX3Nwcml0ZXMucHVzaChzdGFyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGxhYmVscyA9IFtcIkRqaW5uXCIsIFwiTHZcIiwgXCJQb3dlclwiLCBcIlJlc2lzdFwiXTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxhYmVscy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgeF9wb3MgPSBCYXR0bGVTdGF0dXNTdGF0aXN0aWNzLkxBQkVMLlg7XG4gICAgICAgICAgICBjb25zdCB5X3BvcyA9IEJhdHRsZVN0YXR1c1N0YXRpc3RpY3MuTEFCRUwuWSArIGkgKiBCYXR0bGVTdGF0dXNTdGF0aXN0aWNzLkxBQkVMX1NISUZUO1xuXG4gICAgICAgICAgICBjb25zdCBsYWJlbCA9IHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgICAgIGxhYmVsc1tpXSxcbiAgICAgICAgICAgICAgICB4X3BvcyxcbiAgICAgICAgICAgICAgICB5X3BvcyxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgQmF0dGxlU3RhdHVzU3RhdGlzdGljcy5HUk9VUF9LRVlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlX3Nwcml0ZXMucHVzaChsYWJlbC50ZXh0LCBsYWJlbC5zaGFkb3cpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcmRlcmVkX2VsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBkamlubl9jb3VudHMgPSB0aGlzLmdldF9kamlubl9jb3VudHMob3JkZXJlZF9lbGVtZW50c1tpXSk7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50YWxfc3RhdHMgPSB0aGlzLmdldF9lbGVtZW50YWxfc3RhdHMob3JkZXJlZF9lbGVtZW50c1tpXSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHhfcG9zID0gQmF0dGxlU3RhdHVzU3RhdGlzdGljcy5FTEVNX05VTUJFUlMuRU5EX1ggKyBpICogQmF0dGxlU3RhdHVzU3RhdGlzdGljcy5FTEVNX05VTUJFUlMuWF9TSElGVDtcbiAgICAgICAgICAgIGxldCB5X3BvcyA9IEJhdHRsZVN0YXR1c1N0YXRpc3RpY3MuRUxFTV9OVU1CRVJTLlk7XG4gICAgICAgICAgICBsZXQgdGV4dCA9IGRqaW5uX2NvdW50cy5zZXQgKyBcIi9cIiArIGRqaW5uX2NvdW50cy50b3RhbDtcblxuICAgICAgICAgICAgbGV0IG51bWJlcnMgPSB0aGlzLndpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgICAgIHhfcG9zLFxuICAgICAgICAgICAgICAgIHlfcG9zLFxuICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIEJhdHRsZVN0YXR1c1N0YXRpc3RpY3MuR1JPVVBfS0VZXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZV9zcHJpdGVzLnB1c2gobnVtYmVycy50ZXh0LCBudW1iZXJzLnNoYWRvdyk7XG5cbiAgICAgICAgICAgIHlfcG9zICs9IEJhdHRsZVN0YXR1c1N0YXRpc3RpY3MuRUxFTV9OVU1CRVJTLllfU0hJRlQ7XG4gICAgICAgICAgICB0ZXh0ID0gU3RyaW5nKGVsZW1lbnRhbF9zdGF0cy5sZXZlbCk7XG5cbiAgICAgICAgICAgIG51bWJlcnMgPSB0aGlzLndpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgICAgIHhfcG9zLFxuICAgICAgICAgICAgICAgIHlfcG9zLFxuICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIEJhdHRsZVN0YXR1c1N0YXRpc3RpY3MuR1JPVVBfS0VZXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZV9zcHJpdGVzLnB1c2gobnVtYmVycy50ZXh0LCBudW1iZXJzLnNoYWRvdyk7XG5cbiAgICAgICAgICAgIHlfcG9zICs9IEJhdHRsZVN0YXR1c1N0YXRpc3RpY3MuRUxFTV9OVU1CRVJTLllfU0hJRlQ7XG4gICAgICAgICAgICB0ZXh0ID0gU3RyaW5nKGVsZW1lbnRhbF9zdGF0cy5wb3dlcik7XG5cbiAgICAgICAgICAgIG51bWJlcnMgPSB0aGlzLndpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgICAgIHhfcG9zLFxuICAgICAgICAgICAgICAgIHlfcG9zLFxuICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIEJhdHRsZVN0YXR1c1N0YXRpc3RpY3MuR1JPVVBfS0VZXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZV9zcHJpdGVzLnB1c2gobnVtYmVycy50ZXh0LCBudW1iZXJzLnNoYWRvdyk7XG5cbiAgICAgICAgICAgIHlfcG9zICs9IEJhdHRsZVN0YXR1c1N0YXRpc3RpY3MuRUxFTV9OVU1CRVJTLllfU0hJRlQ7XG4gICAgICAgICAgICB0ZXh0ID0gU3RyaW5nKGVsZW1lbnRhbF9zdGF0cy5yZXNpc3RhbmNlKTtcblxuICAgICAgICAgICAgbnVtYmVycyA9IHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICAgICAgeF9wb3MsXG4gICAgICAgICAgICAgICAgeV9wb3MsXG4gICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgQmF0dGxlU3RhdHVzU3RhdGlzdGljcy5HUk9VUF9LRVlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlX3Nwcml0ZXMucHVzaChudW1iZXJzLnRleHQsIG51bWJlcnMuc2hhZG93KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7U3RhdHVzQ29tcG9uZW50fSBmcm9tIFwiLi9TdGF0dXNDb21wb25lbnRcIjtcbmltcG9ydCB7V2luZG93fSBmcm9tIFwiLi4vV2luZG93XCI7XG5pbXBvcnQge0dvbGRlblN1bn0gZnJvbSBcIi4uL0dvbGRlblN1blwiO1xuaW1wb3J0IHtDdXJzb3JNYW5hZ2VyLCBQb2ludFZhcmlhbnRzfSBmcm9tIFwiLi4vdXRpbHMvQ3Vyc29yTWFuYWdlclwiO1xuaW1wb3J0IHtCYXR0bGVTdGF0dXNXaW5kb3d9IGZyb20gXCIuLi93aW5kb3dzL2JhdHRsZS9CYXR0bGVTdGF0dXNXaW5kb3dcIjtcbmltcG9ydCB7QWJpbGl0eX0gZnJvbSBcIi4uL0FiaWxpdHlcIjtcbmltcG9ydCB7UGFnZUluZGljYXRvck1vZGVzfSBmcm9tIFwiLi9QYWdlSW5kaWNhdG9yXCI7XG5cbmV4cG9ydCBjbGFzcyBCYXR0bGVTdGF0dXNQc3luZXJneSBleHRlbmRzIFN0YXR1c0NvbXBvbmVudCB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgQ1VSU09SID0ge1xuICAgICAgICBYOiAwLFxuICAgICAgICBZOiA3OSxcbiAgICB9O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEhJR0hMSUdIVCA9IHtcbiAgICAgICAgWDogOCxcbiAgICAgICAgWTogNzIsXG4gICAgICAgIFdJRFRIOiAxNjAsXG4gICAgICAgIEhFSUdIVDogOCxcbiAgICB9O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFBTWU5FUkdZID0ge1xuICAgICAgICBJQ09OX1g6IDksXG4gICAgICAgIElDT05fWTogNzAsXG4gICAgICAgIE5BTUVfWDogMjQsXG4gICAgICAgIE5BTUVfWTogNzIsXG4gICAgICAgIFBQX0xBQkVMX1g6IDk2LFxuICAgICAgICBQUF9MQUJFTF9ZOiA3MixcbiAgICAgICAgUFBfVkFMVUVfRU5EX1g6IDEyNSxcbiAgICAgICAgUFBfVkFMVUVfWTogNzIsXG4gICAgICAgIFNUQVJfWDogMTI5LFxuICAgICAgICBTVEFSX1k6IDczLFxuICAgICAgICBSQU5HRV9DRU5URVJfWDogMTQ4LFxuICAgICAgICBSQU5HRV9ZOiA3MixcbiAgICB9O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFBBR0VfSU5ESUNBVE9SX0FOQ0hPUiA9IHtcbiAgICAgICAgWDogMTcxLFxuICAgICAgICBZOiA2NCxcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgTUFYX0xJTkVTID0gNDtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBTSElGVCA9IDE2O1xuXG4gICAgcHJpdmF0ZSBiYXR0bGVfYWJpbGl0aWVzOiBBYmlsaXR5W11bXTtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihcbiAgICAgICAgZ2FtZTogUGhhc2VyLkdhbWUsXG4gICAgICAgIGRhdGE6IEdvbGRlblN1bixcbiAgICAgICAgd2luZG93OiBXaW5kb3csXG4gICAgICAgIG1hbmFnZXI6IEJhdHRsZVN0YXR1c1dpbmRvdyxcbiAgICAgICAgcG9zPzoge2xpbmU6IG51bWJlcjsgY29sOiBudW1iZXJ9XG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGdhbWUsIGRhdGEsIHdpbmRvdywgbWFuYWdlciwgcG9zKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2VsZWN0X29wdGlvbigpIHtcbiAgICAgICAgY29uc3QgaGlnaGxpZ2h0ID0ge1xuICAgICAgICAgICAgeDogQmF0dGxlU3RhdHVzUHN5bmVyZ3kuSElHSExJR0hULlgsXG4gICAgICAgICAgICB5OiBCYXR0bGVTdGF0dXNQc3luZXJneS5ISUdITElHSFQuWSArIEJhdHRsZVN0YXR1c1BzeW5lcmd5LlNISUZUICogdGhpcy5jdXJyZW50X2xpbmUsXG4gICAgICAgICAgICB3aWR0aDogQmF0dGxlU3RhdHVzUHN5bmVyZ3kuSElHSExJR0hULldJRFRILFxuICAgICAgICAgICAgaGVpZ2h0OiBCYXR0bGVTdGF0dXNQc3luZXJneS5ISUdITElHSFQuSEVJR0hULFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnVwZGF0ZV9oaWdobGlnaHQoaGlnaGxpZ2h0KTtcblxuICAgICAgICBjb25zdCBjdXJzb3JfeCA9IEJhdHRsZVN0YXR1c1BzeW5lcmd5LkNVUlNPUi5YO1xuICAgICAgICBjb25zdCBjdXJzb3JfeSA9IEJhdHRsZVN0YXR1c1BzeW5lcmd5LkNVUlNPUi5ZICsgQmF0dGxlU3RhdHVzUHN5bmVyZ3kuU0hJRlQgKiB0aGlzLmN1cnJlbnRfbGluZTtcblxuICAgICAgICBjb25zdCBjdXJzb3JfdHdlZW4gPSB7dHlwZTogQ3Vyc29yTWFuYWdlci5DdXJzb3JUd2VlbnMuUE9JTlQsIHZhcmlhbnQ6IFBvaW50VmFyaWFudHMuU0hPUlR9O1xuICAgICAgICB0aGlzLmRhdGEuY3Vyc29yX21hbmFnZXIubW92ZV90byh7eDogY3Vyc29yX3gsIHk6IGN1cnNvcl95fSwge2FuaW1hdGU6IGZhbHNlLCB0d2Vlbl9jb25maWc6IGN1cnNvcl90d2Vlbn0pO1xuXG4gICAgICAgIHRoaXMud2luZG93LnBhZ2VfaW5kaWNhdG9yLnNlbGVjdF9wYWdlKHRoaXMuY3VycmVudF9jb2wpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbl9jaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0X29wdGlvbigpO1xuXG4gICAgICAgIGNvbnN0IGNob3Nlbl9hYmlsaXR5ID0gdGhpcy5iYXR0bGVfYWJpbGl0aWVzW3RoaXMuY3VycmVudF9jb2xdW3RoaXMuY3VycmVudF9saW5lXTtcbiAgICAgICAgdGhpcy51cGRhdGVfZGVzY3JpcHRpb24oY2hvc2VuX2FiaWxpdHkuZGVzY3JpcHRpb24pO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbl9sZWZ0KCkge1xuICAgICAgICBpZiAodGhpcy5iYXR0bGVfYWJpbGl0aWVzLmxlbmd0aCA8PSAxKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgcGFnZXMgPSB0aGlzLmJhdHRsZV9hYmlsaXRpZXMubGVuZ3RoO1xuICAgICAgICB0aGlzLmN1cnJlbnRfY29sID0gKHRoaXMuY3VycmVudF9jb2wgKyBwYWdlcyAtIDEpICUgcGFnZXM7XG5cbiAgICAgICAgaWYgKCF0aGlzLmJhdHRsZV9hYmlsaXRpZXNbdGhpcy5jdXJyZW50X2NvbF1bdGhpcy5jdXJyZW50X2xpbmVdKVxuICAgICAgICAgICAgdGhpcy5jdXJyZW50X2xpbmUgPSB0aGlzLmJhdHRsZV9hYmlsaXRpZXNbdGhpcy5jdXJyZW50X2NvbF0ubGVuZ3RoIC0gMTtcblxuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfVxuXG4gICAgcHVibGljIG9uX3JpZ2h0KCkge1xuICAgICAgICBpZiAodGhpcy5iYXR0bGVfYWJpbGl0aWVzLmxlbmd0aCA8PSAxKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgcGFnZXMgPSB0aGlzLmJhdHRsZV9hYmlsaXRpZXMubGVuZ3RoO1xuICAgICAgICB0aGlzLmN1cnJlbnRfY29sID0gKHRoaXMuY3VycmVudF9jb2wgKyAxKSAlIHBhZ2VzO1xuXG4gICAgICAgIGlmICghdGhpcy5iYXR0bGVfYWJpbGl0aWVzW3RoaXMuY3VycmVudF9jb2xdW3RoaXMuY3VycmVudF9saW5lXSlcbiAgICAgICAgICAgIHRoaXMuY3VycmVudF9saW5lID0gdGhpcy5iYXR0bGVfYWJpbGl0aWVzW3RoaXMuY3VycmVudF9jb2xdLmxlbmd0aCAtIDE7XG5cbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbl91cCgpIHtcbiAgICAgICAgaWYgKHRoaXMuYmF0dGxlX2FiaWxpdGllc1t0aGlzLmN1cnJlbnRfY29sXS5sZW5ndGggPD0gMSkgcmV0dXJuO1xuXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRfbGluZSA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudF9jb2wgPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRfY29sID0gdGhpcy5iYXR0bGVfYWJpbGl0aWVzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50X2xpbmUgPSB0aGlzLmJhdHRsZV9hYmlsaXRpZXNbdGhpcy5iYXR0bGVfYWJpbGl0aWVzLmxlbmd0aCAtIDFdLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudF9jb2wgPSB0aGlzLmN1cnJlbnRfY29sIC0gMTtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRfbGluZSA9IHRoaXMuYmF0dGxlX2FiaWxpdGllc1t0aGlzLmN1cnJlbnRfY29sXS5sZW5ndGggLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50X2xpbmUtLTtcbiAgICAgICAgICAgIHRoaXMub25fY2hhbmdlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgb25fZG93bigpIHtcbiAgICAgICAgaWYgKHRoaXMuYmF0dGxlX2FiaWxpdGllc1t0aGlzLmN1cnJlbnRfY29sXS5sZW5ndGggPD0gMSkgcmV0dXJuO1xuXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRfbGluZSArIDEgPT09IHRoaXMuYmF0dGxlX2FiaWxpdGllc1t0aGlzLmN1cnJlbnRfY29sXS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRfY29sID09PSB0aGlzLmJhdHRsZV9hYmlsaXRpZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudF9jb2wgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudF9saW5lID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50X2NvbCA9IHRoaXMuY3VycmVudF9jb2wgKyAxO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudF9saW5lID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudF9saW5lKys7XG4gICAgICAgICAgICB0aGlzLm9uX2NoYW5nZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGluaXRpYWxpemUoKSB7XG4gICAgICAgIGNvbnN0IHBhZ2VfaW5kaWNhdG9yX2FuY2hvciA9IHtcbiAgICAgICAgICAgIHg6IEJhdHRsZVN0YXR1c1BzeW5lcmd5LlBBR0VfSU5ESUNBVE9SX0FOQ0hPUi5YLFxuICAgICAgICAgICAgeTogQmF0dGxlU3RhdHVzUHN5bmVyZ3kuUEFHRV9JTkRJQ0FUT1JfQU5DSE9SLlksXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudXBkYXRlX2FiaWxpdGllcygpO1xuXG4gICAgICAgIGNvbnN0IGFiaWxpdGllcyA9IHRoaXMuYmF0dGxlX2FiaWxpdGllc1t0aGlzLmN1cnJlbnRfY29sXTtcblxuICAgICAgICBhYmlsaXRpZXMuZm9yRWFjaCgoYWJpbGl0eSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGljb25fa2V5ID0gYWJpbGl0eS5rZXlfbmFtZTtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBhYmlsaXR5Lm5hbWU7XG4gICAgICAgICAgICBjb25zdCBwcF9jb3N0ID0gYWJpbGl0eS5wcF9jb3N0O1xuICAgICAgICAgICAgY29uc3Qgc3Rhcl9rZXkgPSBhYmlsaXR5LmVsZW1lbnQgKyBcIl9zdGFyXCI7XG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IFN0cmluZyhhYmlsaXR5LnJhbmdlKTtcblxuICAgICAgICAgICAgbGV0IHhfcG9zID0gQmF0dGxlU3RhdHVzUHN5bmVyZ3kuUFNZTkVSR1kuSUNPTl9YO1xuICAgICAgICAgICAgbGV0IHlfcG9zID0gQmF0dGxlU3RhdHVzUHN5bmVyZ3kuUFNZTkVSR1kuSUNPTl9ZICsgaW5kZXggKiBCYXR0bGVTdGF0dXNQc3luZXJneS5TSElGVDtcblxuICAgICAgICAgICAgY29uc3QgaWNvbiA9IHRoaXMud2luZG93LmNyZWF0ZV9hdF9ncm91cChcbiAgICAgICAgICAgICAgICB4X3BvcyxcbiAgICAgICAgICAgICAgICB5X3BvcyxcbiAgICAgICAgICAgICAgICBcImFiaWxpdGllc19pY29uc1wiLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBpY29uX2tleSxcbiAgICAgICAgICAgICAgICBCYXR0bGVTdGF0dXNQc3luZXJneS5HUk9VUF9LRVlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlX3Nwcml0ZXMucHVzaChpY29uKTtcblxuICAgICAgICAgICAgeF9wb3MgPSBCYXR0bGVTdGF0dXNQc3luZXJneS5QU1lORVJHWS5OQU1FX1g7XG4gICAgICAgICAgICB5X3BvcyA9IEJhdHRsZVN0YXR1c1BzeW5lcmd5LlBTWU5FUkdZLk5BTUVfWSArIGluZGV4ICogQmF0dGxlU3RhdHVzUHN5bmVyZ3kuU0hJRlQ7XG5cbiAgICAgICAgICAgIGNvbnN0IG5hbWVfdGV4dCA9IHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgeF9wb3MsXG4gICAgICAgICAgICAgICAgeV9wb3MsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIEJhdHRsZVN0YXR1c1BzeW5lcmd5LkdST1VQX0tFWVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVfc3ByaXRlcy5wdXNoKG5hbWVfdGV4dC50ZXh0LCBuYW1lX3RleHQuc2hhZG93KTtcblxuICAgICAgICAgICAgeF9wb3MgPSBCYXR0bGVTdGF0dXNQc3luZXJneS5QU1lORVJHWS5QUF9MQUJFTF9YO1xuICAgICAgICAgICAgeV9wb3MgPSBCYXR0bGVTdGF0dXNQc3luZXJneS5QU1lORVJHWS5QUF9MQUJFTF9ZICsgaW5kZXggKiBCYXR0bGVTdGF0dXNQc3luZXJneS5TSElGVDtcblxuICAgICAgICAgICAgY29uc3QgcHBfbGFiZWwgPSB0aGlzLndpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgICAgICBcIlBQXCIsXG4gICAgICAgICAgICAgICAgeF9wb3MsXG4gICAgICAgICAgICAgICAgeV9wb3MsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIEJhdHRsZVN0YXR1c1BzeW5lcmd5LkdST1VQX0tFWVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVfc3ByaXRlcy5wdXNoKHBwX2xhYmVsLnRleHQsIHBwX2xhYmVsLnNoYWRvdyk7XG5cbiAgICAgICAgICAgIHhfcG9zID0gQmF0dGxlU3RhdHVzUHN5bmVyZ3kuUFNZTkVSR1kuUFBfVkFMVUVfRU5EX1g7XG4gICAgICAgICAgICB5X3BvcyA9IEJhdHRsZVN0YXR1c1BzeW5lcmd5LlBTWU5FUkdZLlBQX1ZBTFVFX1kgKyBpbmRleCAqIEJhdHRsZVN0YXR1c1BzeW5lcmd5LlNISUZUO1xuXG4gICAgICAgICAgICBjb25zdCBwcF92YWx1ZSA9IHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgICAgIHBwX2Nvc3QsXG4gICAgICAgICAgICAgICAgeF9wb3MsXG4gICAgICAgICAgICAgICAgeV9wb3MsXG4gICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgQmF0dGxlU3RhdHVzUHN5bmVyZ3kuR1JPVVBfS0VZXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZV9zcHJpdGVzLnB1c2gocHBfdmFsdWUudGV4dCwgcHBfdmFsdWUuc2hhZG93KTtcblxuICAgICAgICAgICAgeF9wb3MgPSBCYXR0bGVTdGF0dXNQc3luZXJneS5QU1lORVJHWS5TVEFSX1g7XG4gICAgICAgICAgICB5X3BvcyA9IEJhdHRsZVN0YXR1c1BzeW5lcmd5LlBTWU5FUkdZLlNUQVJfWSArIGluZGV4ICogQmF0dGxlU3RhdHVzUHN5bmVyZ3kuU0hJRlQ7XG5cbiAgICAgICAgICAgIGNvbnN0IHN0YXIgPSB0aGlzLndpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoXG4gICAgICAgICAgICAgICAgeF9wb3MsXG4gICAgICAgICAgICAgICAgeV9wb3MsXG4gICAgICAgICAgICAgICAgc3Rhcl9rZXksXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBCYXR0bGVTdGF0dXNQc3luZXJneS5HUk9VUF9LRVlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlX3Nwcml0ZXMucHVzaChzdGFyKTtcblxuICAgICAgICAgICAgeF9wb3MgPSBCYXR0bGVTdGF0dXNQc3luZXJneS5QU1lORVJHWS5SQU5HRV9DRU5URVJfWDtcbiAgICAgICAgICAgIHlfcG9zID0gQmF0dGxlU3RhdHVzUHN5bmVyZ3kuUFNZTkVSR1kuUkFOR0VfWSArIGluZGV4ICogQmF0dGxlU3RhdHVzUHN5bmVyZ3kuU0hJRlQ7XG5cbiAgICAgICAgICAgIGNvbnN0IHJhbmdlX2ljb24gPSB0aGlzLndpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoXG4gICAgICAgICAgICAgICAgeF9wb3MsXG4gICAgICAgICAgICAgICAgeV9wb3MsXG4gICAgICAgICAgICAgICAgXCJyYW5nZXNcIixcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgcmFuZ2UsXG4gICAgICAgICAgICAgICAgQmF0dGxlU3RhdHVzUHN5bmVyZ3kuR1JPVVBfS0VZXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmFuZ2VfaWNvbi54IC09IChyYW5nZV9pY29uLndpZHRoIC8gMikgfCAwO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZV9zcHJpdGVzLnB1c2gocmFuZ2VfaWNvbik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMud2luZG93LnBhZ2VfaW5kaWNhdG9yLnBvc2l0aW9uID0gcGFnZV9pbmRpY2F0b3JfYW5jaG9yO1xuICAgICAgICB0aGlzLndpbmRvdy5wYWdlX2luZGljYXRvci5pbml0aWFsaXplKFxuICAgICAgICAgICAgdGhpcy5iYXR0bGVfYWJpbGl0aWVzLmxlbmd0aCxcbiAgICAgICAgICAgIHRoaXMuY3VycmVudF9saW5lLFxuICAgICAgICAgICAgUGFnZUluZGljYXRvck1vZGVzLkZMQVNIXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc2VsZWN0X29wdGlvbigpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlX2FiaWxpdGllcygpIHtcbiAgICAgICAgY29uc3QgYWxsX2FiaWxpdGllcyA9IHRoaXMuc2VsZWN0ZWRfY2hhci5hYmlsaXRpZXM7XG5cbiAgICAgICAgbGV0IHBhZ2VfYWJpbGl0aWVzID0gW107XG4gICAgICAgIHRoaXMuYmF0dGxlX2FiaWxpdGllcyA9IFtdO1xuXG4gICAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICAgIGFsbF9hYmlsaXRpZXMuZm9yRWFjaChrZXlfbmFtZSA9PiB7XG4gICAgICAgICAgICBpZiAoY291bnQgPT09IEJhdHRsZVN0YXR1c1BzeW5lcmd5Lk1BWF9MSU5FUykge1xuICAgICAgICAgICAgICAgIHRoaXMuYmF0dGxlX2FiaWxpdGllcy5wdXNoKHBhZ2VfYWJpbGl0aWVzKTtcbiAgICAgICAgICAgICAgICBwYWdlX2FiaWxpdGllcyA9IFtdO1xuICAgICAgICAgICAgICAgIGNvdW50ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3Rba2V5X25hbWVdKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiQWJpbGl0eSBcIiArICdcIicgKyBrZXlfbmFtZSArICdcIicgKyBcIiBkb2VzIG5vdCBleGlzdCBpbiB0aGUgZGF0YWJhc2UuXCIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFtrZXlfbmFtZV0uaXNfYmF0dGxlX2FiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICBwYWdlX2FiaWxpdGllcy5wdXNoKHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W2tleV9uYW1lXSk7XG4gICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChwYWdlX2FiaWxpdGllcy5sZW5ndGggPiAwKSB0aGlzLmJhdHRsZV9hYmlsaXRpZXMucHVzaChwYWdlX2FiaWxpdGllcyk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtTdGF0dXNDb21wb25lbnR9IGZyb20gXCIuL1N0YXR1c0NvbXBvbmVudFwiO1xuaW1wb3J0IHtXaW5kb3d9IGZyb20gXCIuLi9XaW5kb3dcIjtcbmltcG9ydCB7R29sZGVuU3VufSBmcm9tIFwiLi4vR29sZGVuU3VuXCI7XG5pbXBvcnQge0N1cnNvck1hbmFnZXIsIFBvaW50VmFyaWFudHN9IGZyb20gXCIuLi91dGlscy9DdXJzb3JNYW5hZ2VyXCI7XG5pbXBvcnQge0JhdHRsZVN0YXR1c1dpbmRvd30gZnJvbSBcIi4uL3dpbmRvd3MvYmF0dGxlL0JhdHRsZVN0YXR1c1dpbmRvd1wiO1xuaW1wb3J0IHtEamlubiwgZGppbm5fc3RhdHVzfSBmcm9tIFwiLi4vRGppbm5cIjtcbmltcG9ydCB7REVGQVVMVF9GT05UX0NPTE9SLCBSRURfRk9OVF9DT0xPUiwgWUVMTE9XX0ZPTlRfQ09MT1J9IGZyb20gXCIuLi9tYWdpY19udW1iZXJzXCI7XG5cbmV4cG9ydCBjbGFzcyBCYXR0bGVTdGF0dXNEamlubiBleHRlbmRzIFN0YXR1c0NvbXBvbmVudCB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgQ1VSU09SID0ge1xuICAgICAgICBYOiAxLFxuICAgICAgICBZOiA4NyxcbiAgICB9O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEhJR0hMSUdIVCA9IHtcbiAgICAgICAgWDogOCxcbiAgICAgICAgWTogODAsXG4gICAgICAgIFdJRFRIOiA1NixcbiAgICAgICAgSEVJR0hUOiA4LFxuICAgIH07XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgREpJTk4gPSB7XG4gICAgICAgIFNUQVJfWDogOSxcbiAgICAgICAgU1RBUl9ZOiA4MSxcbiAgICAgICAgTkFNRV9YOiAxNixcbiAgICAgICAgTkFNRV9ZOiA4MCxcbiAgICAgICAgUkVDT1ZFUllfRU5EX1g6IDU4LFxuICAgICAgICBSRUNPVkVSWV9ZOiA4MCxcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgU0hJRlRfWCA9IDU2O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFNISUZUX1kgPSAxNjtcblxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IE1BWF9MSU5FUyA9IDM7XG5cbiAgICBwcml2YXRlIGNoYXJfZGppbm46IERqaW5uW11bXTtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihcbiAgICAgICAgZ2FtZTogUGhhc2VyLkdhbWUsXG4gICAgICAgIGRhdGE6IEdvbGRlblN1bixcbiAgICAgICAgd2luZG93OiBXaW5kb3csXG4gICAgICAgIG1hbmFnZXI6IEJhdHRsZVN0YXR1c1dpbmRvdyxcbiAgICAgICAgcG9zPzoge2xpbmU6IG51bWJlcjsgY29sOiBudW1iZXJ9XG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGdhbWUsIGRhdGEsIHdpbmRvdywgbWFuYWdlciwgcG9zKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2VsZWN0X29wdGlvbigpIHtcbiAgICAgICAgY29uc3QgaGlnaGxpZ2h0ID0ge1xuICAgICAgICAgICAgeDogQmF0dGxlU3RhdHVzRGppbm4uSElHSExJR0hULlggKyBCYXR0bGVTdGF0dXNEamlubi5TSElGVF9YICogdGhpcy5jdXJyZW50X2NvbCxcbiAgICAgICAgICAgIHk6IEJhdHRsZVN0YXR1c0RqaW5uLkhJR0hMSUdIVC5ZICsgQmF0dGxlU3RhdHVzRGppbm4uU0hJRlRfWSAqIHRoaXMuY3VycmVudF9saW5lLFxuICAgICAgICAgICAgd2lkdGg6IEJhdHRsZVN0YXR1c0RqaW5uLkhJR0hMSUdIVC5XSURUSCxcbiAgICAgICAgICAgIGhlaWdodDogQmF0dGxlU3RhdHVzRGppbm4uSElHSExJR0hULkhFSUdIVCxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy51cGRhdGVfaGlnaGxpZ2h0KGhpZ2hsaWdodCk7XG5cbiAgICAgICAgY29uc3QgY3Vyc29yX3ggPSBCYXR0bGVTdGF0dXNEamlubi5DVVJTT1IuWCArIEJhdHRsZVN0YXR1c0RqaW5uLlNISUZUX1ggKiB0aGlzLmN1cnJlbnRfY29sO1xuICAgICAgICBjb25zdCBjdXJzb3JfeSA9IEJhdHRsZVN0YXR1c0RqaW5uLkNVUlNPUi5ZICsgQmF0dGxlU3RhdHVzRGppbm4uU0hJRlRfWSAqIHRoaXMuY3VycmVudF9saW5lO1xuXG4gICAgICAgIGNvbnN0IGN1cnNvcl90d2VlbiA9IHt0eXBlOiBDdXJzb3JNYW5hZ2VyLkN1cnNvclR3ZWVucy5QT0lOVCwgdmFyaWFudDogUG9pbnRWYXJpYW50cy5TSE9SVH07XG4gICAgICAgIHRoaXMuZGF0YS5jdXJzb3JfbWFuYWdlci5tb3ZlX3RvKHt4OiBjdXJzb3JfeCwgeTogY3Vyc29yX3l9LCB7YW5pbWF0ZTogZmFsc2UsIHR3ZWVuX2NvbmZpZzogY3Vyc29yX3R3ZWVufSk7XG5cbiAgICAgICAgdGhpcy53aW5kb3cucGFnZV9pbmRpY2F0b3Iuc2VsZWN0X3BhZ2UodGhpcy5jdXJyZW50X2NvbCk7XG4gICAgfVxuXG4gICAgcHVibGljIG9uX2NoYW5nZSgpIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rfb3B0aW9uKCk7XG5cbiAgICAgICAgY29uc3QgY2hvc2VuX2RqaW5uID0gdGhpcy5jaGFyX2RqaW5uW3RoaXMuY3VycmVudF9jb2xdW3RoaXMuY3VycmVudF9saW5lXTtcbiAgICAgICAgY29uc3QgbXNnID0gY2hvc2VuX2RqaW5uLnN0YXR1cyA9PT0gZGppbm5fc3RhdHVzLlNUQU5EQlkgPyBcIlJlYWR5IHRvIHN1bW1vbi5cIiA6IGNob3Nlbl9kamlubi5kZXNjcmlwdGlvbjtcblxuICAgICAgICB0aGlzLnVwZGF0ZV9kZXNjcmlwdGlvbihtc2cpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbl9sZWZ0KCkge1xuICAgICAgICBpZiAodGhpcy5jaGFyX2RqaW5uLmxlbmd0aCA8PSAxKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgcGFnZXMgPSB0aGlzLmNoYXJfZGppbm4ubGVuZ3RoO1xuICAgICAgICB0aGlzLmN1cnJlbnRfY29sID0gKHRoaXMuY3VycmVudF9jb2wgKyBwYWdlcyAtIDEpICUgcGFnZXM7XG5cbiAgICAgICAgaWYgKCF0aGlzLmNoYXJfZGppbm5bdGhpcy5jdXJyZW50X2NvbF1bdGhpcy5jdXJyZW50X2xpbmVdKVxuICAgICAgICAgICAgdGhpcy5jdXJyZW50X2xpbmUgPSB0aGlzLmNoYXJfZGppbm5bdGhpcy5jdXJyZW50X2NvbF0ubGVuZ3RoIC0gMTtcblxuICAgICAgICB0aGlzLm9uX2NoYW5nZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbl9yaWdodCgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2hhcl9kamlubi5sZW5ndGggPD0gMSkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IHBhZ2VzID0gdGhpcy5jaGFyX2RqaW5uLmxlbmd0aDtcbiAgICAgICAgdGhpcy5jdXJyZW50X2NvbCA9ICh0aGlzLmN1cnJlbnRfY29sICsgMSkgJSBwYWdlcztcblxuICAgICAgICBpZiAoIXRoaXMuY2hhcl9kamlublt0aGlzLmN1cnJlbnRfY29sXVt0aGlzLmN1cnJlbnRfbGluZV0pXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRfbGluZSA9IHRoaXMuY2hhcl9kamlublt0aGlzLmN1cnJlbnRfY29sXS5sZW5ndGggLSAxO1xuXG4gICAgICAgIHRoaXMub25fY2hhbmdlKCk7XG4gICAgfVxuXG4gICAgcHVibGljIG9uX3VwKCkge1xuICAgICAgICBpZiAodGhpcy5jaGFyX2RqaW5uW3RoaXMuY3VycmVudF9jb2xdLmxlbmd0aCA8PSAxKSByZXR1cm47XG5cbiAgICAgICAgaWYgKHRoaXMuY3VycmVudF9saW5lID09PSAwKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50X2NvbCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudF9jb2wgPSB0aGlzLmNoYXJfZGppbm4ubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRfbGluZSA9IHRoaXMuY2hhcl9kamlublt0aGlzLmNoYXJfZGppbm4ubGVuZ3RoIC0gMV0ubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50X2NvbCA9IHRoaXMuY3VycmVudF9jb2wgLSAxO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudF9saW5lID0gdGhpcy5jaGFyX2RqaW5uW3RoaXMuY3VycmVudF9jb2xdLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRfbGluZS0tO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vbl9jaGFuZ2UoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25fZG93bigpIHtcbiAgICAgICAgaWYgKHRoaXMuY2hhcl9kamlublt0aGlzLmN1cnJlbnRfY29sXS5sZW5ndGggPD0gMSkgcmV0dXJuO1xuXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRfbGluZSArIDEgPT09IHRoaXMuY2hhcl9kamlublt0aGlzLmN1cnJlbnRfY29sXS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRfY29sID09PSB0aGlzLmNoYXJfZGppbm4ubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudF9jb2wgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudF9saW5lID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50X2NvbCA9IHRoaXMuY3VycmVudF9jb2wgKyAxO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudF9saW5lID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudF9saW5lKys7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm9uX2NoYW5nZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBpbml0aWFsaXplKCkge1xuICAgICAgICB0aGlzLnVwZGF0ZV9kamlubigpO1xuXG4gICAgICAgIHRoaXMuY2hhcl9kamlubi5mb3JFYWNoKChjb2wsIGNvbF9pbmRleCkgPT4ge1xuICAgICAgICAgICAgY29sLmZvckVhY2goKGRqaW5uLCBsaW5lX2luZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IGRqaW5uLm5hbWU7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3Rhcl9rZXkgPSBkamlubi5lbGVtZW50ICsgXCJfc3RhclwiO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlY292ZXJ5ID0gZGppbm4ucmVjb3ZlcnlfdHVybiArIDE7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdHVzID0gZGppbm4uc3RhdHVzO1xuXG4gICAgICAgICAgICAgICAgbGV0IHhfcG9zID0gQmF0dGxlU3RhdHVzRGppbm4uREpJTk4uU1RBUl9YICsgY29sX2luZGV4ICogQmF0dGxlU3RhdHVzRGppbm4uU0hJRlRfWDtcbiAgICAgICAgICAgICAgICBsZXQgeV9wb3MgPSBCYXR0bGVTdGF0dXNEamlubi5ESklOTi5TVEFSX1kgKyBsaW5lX2luZGV4ICogQmF0dGxlU3RhdHVzRGppbm4uU0hJRlRfWTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXIgPSB0aGlzLndpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoXG4gICAgICAgICAgICAgICAgICAgIHhfcG9zLFxuICAgICAgICAgICAgICAgICAgICB5X3BvcyxcbiAgICAgICAgICAgICAgICAgICAgc3Rhcl9rZXksXG4gICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBCYXR0bGVTdGF0dXNEamlubi5HUk9VUF9LRVlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVfc3ByaXRlcy5wdXNoKHN0YXIpO1xuXG4gICAgICAgICAgICAgICAgbGV0IGZvbnRfY29sb3IgPSBERUZBVUxUX0ZPTlRfQ09MT1I7XG5cbiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09PSBkamlubl9zdGF0dXMuUkVDT1ZFUlkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9udF9jb2xvciA9IFlFTExPV19GT05UX0NPTE9SO1xuXG4gICAgICAgICAgICAgICAgICAgIHhfcG9zID0gQmF0dGxlU3RhdHVzRGppbm4uREpJTk4uUkVDT1ZFUllfRU5EX1ggKyBjb2xfaW5kZXggKiBCYXR0bGVTdGF0dXNEamlubi5TSElGVF9YO1xuICAgICAgICAgICAgICAgICAgICB5X3BvcyA9IEJhdHRsZVN0YXR1c0RqaW5uLkRKSU5OLlJFQ09WRVJZX1kgKyBsaW5lX2luZGV4ICogQmF0dGxlU3RhdHVzRGppbm4uU0hJRlRfWTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWNvdmVyeV90ZXh0ID0gdGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICAgICAgICAgICAgICByZWNvdmVyeSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHhfcG9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgeV9wb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250X2NvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBCYXR0bGVTdGF0dXNEamlubi5HUk9VUF9LRVlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZV9zcHJpdGVzLnB1c2gocmVjb3ZlcnlfdGV4dC50ZXh0LCByZWNvdmVyeV90ZXh0LnNoYWRvdyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT09IGRqaW5uX3N0YXR1cy5TVEFOREJZKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRfY29sb3IgPSBSRURfRk9OVF9DT0xPUjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB4X3BvcyA9IEJhdHRsZVN0YXR1c0RqaW5uLkRKSU5OLk5BTUVfWCArIGNvbF9pbmRleCAqIEJhdHRsZVN0YXR1c0RqaW5uLlNISUZUX1g7XG4gICAgICAgICAgICAgICAgeV9wb3MgPSBCYXR0bGVTdGF0dXNEamlubi5ESklOTi5OQU1FX1kgKyBsaW5lX2luZGV4ICogQmF0dGxlU3RhdHVzRGppbm4uU0hJRlRfWTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IG5hbWVfdGV4dCA9IHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgICAgICB4X3BvcyxcbiAgICAgICAgICAgICAgICAgICAgeV9wb3MsXG4gICAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZm9udF9jb2xvcixcbiAgICAgICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIEJhdHRsZVN0YXR1c0RqaW5uLkdST1VQX0tFWVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZV9zcHJpdGVzLnB1c2gobmFtZV90ZXh0LnRleHQsIG5hbWVfdGV4dC5zaGFkb3cpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuc2VsZWN0X29wdGlvbigpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlX2RqaW5uKCkge1xuICAgICAgICBjb25zdCBkamlubl9saXN0ID0gdGhpcy5zZWxlY3RlZF9jaGFyLmRqaW5uaTtcblxuICAgICAgICBsZXQgY29sX2RqaW5uID0gW107XG4gICAgICAgIHRoaXMuY2hhcl9kamlubiA9IFtdO1xuXG4gICAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICAgIGRqaW5uX2xpc3QuZm9yRWFjaChrZXlfbmFtZSA9PiB7XG4gICAgICAgICAgICBpZiAoY291bnQgPT09IEJhdHRsZVN0YXR1c0RqaW5uLk1BWF9MSU5FUykge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhcl9kamlubi5wdXNoKGNvbF9kamlubik7XG4gICAgICAgICAgICAgICAgY29sX2RqaW5uID0gW107XG4gICAgICAgICAgICAgICAgY291bnQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29sX2RqaW5uLnB1c2godGhpcy5kYXRhLmluZm8uZGppbm5pX2xpc3Rba2V5X25hbWVdKTtcbiAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoY29sX2RqaW5uLmxlbmd0aCA+IDApIHRoaXMuY2hhcl9kamlubi5wdXNoKGNvbF9kamlubik7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtTdGF0dXNDb21wb25lbnR9IGZyb20gXCIuL1N0YXR1c0NvbXBvbmVudFwiO1xuaW1wb3J0IHtXaW5kb3d9IGZyb20gXCIuLi9XaW5kb3dcIjtcbmltcG9ydCB7R29sZGVuU3VufSBmcm9tIFwiLi4vR29sZGVuU3VuXCI7XG5pbXBvcnQge0N1cnNvck1hbmFnZXIsIFBvaW50VmFyaWFudHN9IGZyb20gXCIuLi91dGlscy9DdXJzb3JNYW5hZ2VyXCI7XG5pbXBvcnQge0JhdHRsZVN0YXR1c1dpbmRvd30gZnJvbSBcIi4uL3dpbmRvd3MvYmF0dGxlL0JhdHRsZVN0YXR1c1dpbmRvd1wiO1xuaW1wb3J0IHtQYWdlSW5kaWNhdG9yTW9kZXN9IGZyb20gXCIuL1BhZ2VJbmRpY2F0b3JcIjtcbmltcG9ydCB7SXRlbVNsb3R9IGZyb20gXCIuLi9NYWluQ2hhclwiO1xuaW1wb3J0IHt1c2VfdHlwZXN9IGZyb20gXCIuLi9JdGVtXCI7XG5pbXBvcnQge0RFRkFVTFRfRk9OVF9DT0xPUiwgUkVEX0ZPTlRfQ09MT1IsIFlFTExPV19GT05UX0NPTE9SfSBmcm9tIFwiLi4vbWFnaWNfbnVtYmVyc1wiO1xuXG5leHBvcnQgY2xhc3MgQmF0dGxlU3RhdHVzSXRlbXMgZXh0ZW5kcyBTdGF0dXNDb21wb25lbnQge1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IENVUlNPUiA9IHtcbiAgICAgICAgWDogMTAsXG4gICAgICAgIFk6IDc5LFxuICAgIH07XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgSElHSExJR0hUID0ge1xuICAgICAgICBYOiA4LFxuICAgICAgICBZOiA3MixcbiAgICAgICAgV0lEVEg6IDE2MCxcbiAgICAgICAgSEVJR0hUOiA4LFxuICAgIH07XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgSVRFTSA9IHtcbiAgICAgICAgSUNPTl9YOiAyMyxcbiAgICAgICAgSUNPTl9ZOiA2OCxcbiAgICAgICAgTkFNRV9YOiA0MCxcbiAgICAgICAgTkFNRV9ZOiA3MixcbiAgICB9O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFBBR0VfSU5ESUNBVE9SX0FOQ0hPUiA9IHtcbiAgICAgICAgWDogMTcxLFxuICAgICAgICBZOiA2NCxcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgTUFYX0xJTkVTID0gNDtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBTSElGVCA9IDE2O1xuXG4gICAgcHJpdmF0ZSBjaGFyX2l0ZW1zOiBJdGVtU2xvdFtdW107XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoXG4gICAgICAgIGdhbWU6IFBoYXNlci5HYW1lLFxuICAgICAgICBkYXRhOiBHb2xkZW5TdW4sXG4gICAgICAgIHdpbmRvdzogV2luZG93LFxuICAgICAgICBtYW5hZ2VyOiBCYXR0bGVTdGF0dXNXaW5kb3csXG4gICAgICAgIHBvcz86IHtsaW5lOiBudW1iZXI7IGNvbDogbnVtYmVyfVxuICAgICkge1xuICAgICAgICBzdXBlcihnYW1lLCBkYXRhLCB3aW5kb3csIG1hbmFnZXIsIHBvcyk7XG4gICAgfVxuXG4gICAgcHVibGljIHNlbGVjdF9vcHRpb24oKSB7XG4gICAgICAgIGNvbnN0IGhpZ2hsaWdodCA9IHtcbiAgICAgICAgICAgIHg6IEJhdHRsZVN0YXR1c0l0ZW1zLkhJR0hMSUdIVC5YLFxuICAgICAgICAgICAgeTogQmF0dGxlU3RhdHVzSXRlbXMuSElHSExJR0hULlkgKyBCYXR0bGVTdGF0dXNJdGVtcy5TSElGVCAqIHRoaXMuY3VycmVudF9saW5lLFxuICAgICAgICAgICAgd2lkdGg6IEJhdHRsZVN0YXR1c0l0ZW1zLkhJR0hMSUdIVC5XSURUSCxcbiAgICAgICAgICAgIGhlaWdodDogQmF0dGxlU3RhdHVzSXRlbXMuSElHSExJR0hULkhFSUdIVCxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy51cGRhdGVfaGlnaGxpZ2h0KGhpZ2hsaWdodCk7XG5cbiAgICAgICAgY29uc3QgY3Vyc29yX3ggPSBCYXR0bGVTdGF0dXNJdGVtcy5DVVJTT1IuWDtcbiAgICAgICAgY29uc3QgY3Vyc29yX3kgPSBCYXR0bGVTdGF0dXNJdGVtcy5DVVJTT1IuWSArIEJhdHRsZVN0YXR1c0l0ZW1zLlNISUZUICogdGhpcy5jdXJyZW50X2xpbmU7XG5cbiAgICAgICAgY29uc3QgY3Vyc29yX3R3ZWVuID0ge3R5cGU6IEN1cnNvck1hbmFnZXIuQ3Vyc29yVHdlZW5zLlBPSU5ULCB2YXJpYW50OiBQb2ludFZhcmlhbnRzLlNIT1JUfTtcbiAgICAgICAgdGhpcy5kYXRhLmN1cnNvcl9tYW5hZ2VyLm1vdmVfdG8oe3g6IGN1cnNvcl94LCB5OiBjdXJzb3JfeX0sIHthbmltYXRlOiBmYWxzZSwgdHdlZW5fY29uZmlnOiBjdXJzb3JfdHdlZW59KTtcblxuICAgICAgICB0aGlzLndpbmRvdy5wYWdlX2luZGljYXRvci5zZWxlY3RfcGFnZSh0aGlzLmN1cnJlbnRfY29sKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25fY2hhbmdlKCkge1xuICAgICAgICB0aGlzLnNlbGVjdF9vcHRpb24oKTtcblxuICAgICAgICBjb25zdCBjaG9zZW5faXRlbSA9IHRoaXMuY2hhcl9pdGVtc1t0aGlzLmN1cnJlbnRfY29sXVt0aGlzLmN1cnJlbnRfbGluZV07XG4gICAgICAgIHRoaXMudXBkYXRlX2Rlc2NyaXB0aW9uKHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbY2hvc2VuX2l0ZW0ua2V5X25hbWVdLmRlc2NyaXB0aW9uKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25fbGVmdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2hhcl9pdGVtcy5sZW5ndGggPD0gMSkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IHBhZ2VzID0gdGhpcy5jaGFyX2l0ZW1zLmxlbmd0aDtcbiAgICAgICAgdGhpcy5jdXJyZW50X2NvbCA9ICh0aGlzLmN1cnJlbnRfY29sICsgcGFnZXMgLSAxKSAlIHBhZ2VzO1xuXG4gICAgICAgIGlmICghdGhpcy5jaGFyX2l0ZW1zW3RoaXMuY3VycmVudF9jb2xdW3RoaXMuY3VycmVudF9saW5lXSlcbiAgICAgICAgICAgIHRoaXMuY3VycmVudF9saW5lID0gdGhpcy5jaGFyX2l0ZW1zW3RoaXMuY3VycmVudF9jb2xdLmxlbmd0aCAtIDE7XG5cbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbl9yaWdodCgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2hhcl9pdGVtcy5sZW5ndGggPD0gMSkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IHBhZ2VzID0gdGhpcy5jaGFyX2l0ZW1zLmxlbmd0aDtcbiAgICAgICAgdGhpcy5jdXJyZW50X2NvbCA9ICh0aGlzLmN1cnJlbnRfY29sICsgMSkgJSBwYWdlcztcblxuICAgICAgICBpZiAoIXRoaXMuY2hhcl9pdGVtc1t0aGlzLmN1cnJlbnRfY29sXVt0aGlzLmN1cnJlbnRfbGluZV0pXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRfbGluZSA9IHRoaXMuY2hhcl9pdGVtc1t0aGlzLmN1cnJlbnRfY29sXS5sZW5ndGggLSAxO1xuXG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25fdXAoKSB7XG4gICAgICAgIGlmICh0aGlzLmNoYXJfaXRlbXNbdGhpcy5jdXJyZW50X2NvbF0ubGVuZ3RoIDw9IDEpIHJldHVybjtcblxuICAgICAgICBpZiAodGhpcy5jdXJyZW50X2xpbmUgPT09IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRfY29sID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50X2NvbCA9IHRoaXMuY2hhcl9pdGVtcy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudF9saW5lID0gdGhpcy5jaGFyX2l0ZW1zW3RoaXMuY2hhcl9pdGVtcy5sZW5ndGggLSAxXS5sZW5ndGggLSAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRfY29sID0gdGhpcy5jdXJyZW50X2NvbCAtIDE7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50X2xpbmUgPSB0aGlzLmNoYXJfaXRlbXNbdGhpcy5jdXJyZW50X2NvbF0ubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudF9saW5lLS07XG4gICAgICAgICAgICB0aGlzLm9uX2NoYW5nZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIG9uX2Rvd24oKSB7XG4gICAgICAgIGlmICh0aGlzLmNoYXJfaXRlbXNbdGhpcy5jdXJyZW50X2NvbF0ubGVuZ3RoIDw9IDEpIHJldHVybjtcblxuICAgICAgICBpZiAodGhpcy5jdXJyZW50X2xpbmUgKyAxID09PSB0aGlzLmNoYXJfaXRlbXNbdGhpcy5jdXJyZW50X2NvbF0ubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50X2NvbCA9PT0gdGhpcy5jaGFyX2l0ZW1zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRfY29sID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRfbGluZSA9IDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudF9jb2wgPSB0aGlzLmN1cnJlbnRfY29sICsgMTtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRfbGluZSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRfbGluZSsrO1xuICAgICAgICAgICAgdGhpcy5vbl9jaGFuZ2UoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBpbml0aWFsaXplKCkge1xuICAgICAgICBjb25zdCBwYWdlX2luZGljYXRvcl9hbmNob3IgPSB7XG4gICAgICAgICAgICB4OiBCYXR0bGVTdGF0dXNJdGVtcy5QQUdFX0lORElDQVRPUl9BTkNIT1IuWCxcbiAgICAgICAgICAgIHk6IEJhdHRsZVN0YXR1c0l0ZW1zLlBBR0VfSU5ESUNBVE9SX0FOQ0hPUi5ZLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnVwZGF0ZV9hYmlsaXRpZXMoKTtcblxuICAgICAgICBjb25zdCBpdGVtcyA9IHRoaXMuY2hhcl9pdGVtc1t0aGlzLmN1cnJlbnRfY29sXTtcblxuICAgICAgICBpdGVtcy5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaXRlbV9rZXkgPSBpdGVtLmtleV9uYW1lO1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbaXRlbS5rZXlfbmFtZV0ubmFtZTtcbiAgICAgICAgICAgIGNvbnN0IGJyb2tlbiA9IGl0ZW0uYnJva2VuO1xuICAgICAgICAgICAgY29uc3QgZXF1aXBwZWQgPSBpdGVtLmVxdWlwcGVkO1xuICAgICAgICAgICAgY29uc3QgcXVhbnRpdHkgPSBpdGVtLnF1YW50aXR5IDw9IDEgPyB1bmRlZmluZWQgOiBpdGVtLnF1YW50aXR5O1xuXG4gICAgICAgICAgICBsZXQgeF9wb3MgPSBCYXR0bGVTdGF0dXNJdGVtcy5JVEVNLklDT05fWDtcbiAgICAgICAgICAgIGxldCB5X3BvcyA9IEJhdHRsZVN0YXR1c0l0ZW1zLklURU0uSUNPTl9ZICsgaW5kZXggKiBCYXR0bGVTdGF0dXNJdGVtcy5TSElGVDtcblxuICAgICAgICAgICAgY29uc3QgaXRlbV9vYmogPSB0aGlzLndpbmRvdy5tYWtlX2l0ZW1fb2JqKFxuICAgICAgICAgICAgICAgIGl0ZW1fa2V5LFxuICAgICAgICAgICAgICAgIHt4OiB4X3BvcywgeTogeV9wb3N9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYnJva2VuOiBicm9rZW4sXG4gICAgICAgICAgICAgICAgICAgIGVxdWlwcGVkOiBlcXVpcHBlZCxcbiAgICAgICAgICAgICAgICAgICAgcXVhbnRpdHk6IHF1YW50aXR5LFxuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbF9ncm91cDogQmF0dGxlU3RhdHVzSXRlbXMuR1JPVVBfS0VZLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBmb3IgKGxldCBvYmogaW4gaXRlbV9vYmopIHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbV9vYmpbb2JqXSkgdGhpcy5zdGF0ZV9zcHJpdGVzLnB1c2goaXRlbV9vYmpbb2JqXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHhfcG9zID0gQmF0dGxlU3RhdHVzSXRlbXMuSVRFTS5OQU1FX1g7XG4gICAgICAgICAgICB5X3BvcyA9IEJhdHRsZVN0YXR1c0l0ZW1zLklURU0uTkFNRV9ZICsgaW5kZXggKiBCYXR0bGVTdGF0dXNJdGVtcy5TSElGVDtcblxuICAgICAgICAgICAgbGV0IGZvbnRfY29sb3IgPSBZRUxMT1dfRk9OVF9DT0xPUjtcbiAgICAgICAgICAgIGlmIChpdGVtLmJyb2tlbikge1xuICAgICAgICAgICAgICAgIGZvbnRfY29sb3IgPSBSRURfRk9OVF9DT0xPUjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFtpdGVtLmtleV9uYW1lXS51c2VfdHlwZSAhPT0gdXNlX3R5cGVzLk5PX1VTRSkge1xuICAgICAgICAgICAgICAgIGZvbnRfY29sb3IgPSBERUZBVUxUX0ZPTlRfQ09MT1I7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IG5hbWVfdGV4dCA9IHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgeF9wb3MsXG4gICAgICAgICAgICAgICAgeV9wb3MsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgZm9udF9jb2xvcixcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICBCYXR0bGVTdGF0dXNJdGVtcy5HUk9VUF9LRVlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlX3Nwcml0ZXMucHVzaChuYW1lX3RleHQudGV4dCwgbmFtZV90ZXh0LnNoYWRvdyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMud2luZG93LnBhZ2VfaW5kaWNhdG9yLnBvc2l0aW9uID0gcGFnZV9pbmRpY2F0b3JfYW5jaG9yO1xuICAgICAgICB0aGlzLndpbmRvdy5wYWdlX2luZGljYXRvci5pbml0aWFsaXplKHRoaXMuY2hhcl9pdGVtcy5sZW5ndGgsIHRoaXMuY3VycmVudF9saW5lLCBQYWdlSW5kaWNhdG9yTW9kZXMuRkxBU0gpO1xuICAgICAgICB0aGlzLnNlbGVjdF9vcHRpb24oKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZV9hYmlsaXRpZXMoKSB7XG4gICAgICAgIGNvbnN0IGFsbF9pdGVtcyA9IFsuLi50aGlzLnNlbGVjdGVkX2NoYXIuaXRlbXNdO1xuXG4gICAgICAgIHRoaXMuY2hhcl9pdGVtcyA9IFtdO1xuICAgICAgICBsZXQgc29ydGVkX2l0ZW1zID0gW107XG5cbiAgICAgICAgYWxsX2l0ZW1zLmZvckVhY2goKGl0ZW1fc2xvdCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W2l0ZW1fc2xvdC5rZXlfbmFtZV0udXNlX3R5cGUgIT09IHVzZV90eXBlcy5OT19VU0UpIHtcbiAgICAgICAgICAgICAgICBzb3J0ZWRfaXRlbXMucHVzaChhbGxfaXRlbXMuc3BsaWNlKGluZGV4LCAxKVswXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCBwYWdlX2l0ZW1zID0gW107XG4gICAgICAgIGxldCBjb3VudCA9IDA7XG5cbiAgICAgICAgc29ydGVkX2l0ZW1zID0gc29ydGVkX2l0ZW1zLmNvbmNhdChhbGxfaXRlbXMpO1xuICAgICAgICBzb3J0ZWRfaXRlbXMuZm9yRWFjaChpdGVtX3Nsb3QgPT4ge1xuICAgICAgICAgICAgaWYgKGNvdW50ID09PSBCYXR0bGVTdGF0dXNJdGVtcy5NQVhfTElORVMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJfaXRlbXMucHVzaChwYWdlX2l0ZW1zKTtcbiAgICAgICAgICAgICAgICBwYWdlX2l0ZW1zID0gW107XG4gICAgICAgICAgICAgICAgY291bnQgPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwYWdlX2l0ZW1zLnB1c2goaXRlbV9zbG90KTtcbiAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocGFnZV9pdGVtcy5sZW5ndGggPiAwKSB0aGlzLmNoYXJfaXRlbXMucHVzaChwYWdlX2l0ZW1zKTtcbiAgICB9XG59XG4iLCJpbXBvcnQge1Nwcml0ZUJhc2V9IGZyb20gXCIuL1Nwcml0ZUJhc2VcIjtcbmltcG9ydCB7UGxheWVyLCBmaWdodGVyX3R5cGVzfSBmcm9tIFwiLi9QbGF5ZXJcIjtcbmltcG9ydCB7b3JkZXJlZF9lbGVtZW50c30gZnJvbSBcIi4vdXRpbHNcIjtcbmltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tIFwiLi9tYWdpY19udW1iZXJzXCI7XG5pbXBvcnQge2VmZmVjdF90eXBlc30gZnJvbSBcIi4vRWZmZWN0XCI7XG5cbmV4cG9ydCBjbGFzcyBFbmVteSBleHRlbmRzIFBsYXllciB7XG4gICAgcHVibGljIGl0ZW1zOiB7XG4gICAgICAgIGtleV9uYW1lOiBzdHJpbmc7XG4gICAgICAgIHF1YW50aXR5OiBudW1iZXI7XG4gICAgICAgIHVzZV93ZWlnaHQ6IG51bWJlcjtcbiAgICB9W107XG4gICAgcHVibGljIGFiaWxpdGllczoge1xuICAgICAgICBrZXlfbmFtZTogc3RyaW5nO1xuICAgICAgICB1c2Vfd2VpZ2h0OiBudW1iZXI7XG4gICAgfVtdO1xuICAgIHB1YmxpYyBjb2luc19yZXdhcmQ6IG51bWJlcjtcbiAgICBwdWJsaWMgaXRlbV9yZXdhcmQ6IHN0cmluZztcbiAgICBwdWJsaWMgaXRlbV9yZXdhcmRfY2hhbmNlOiBudW1iZXI7XG4gICAgcHVibGljIGV4cF9yZXdhcmQ6IG51bWJlcjtcbiAgICBwdWJsaWMgdmVudXNfbGV2ZWw6IG51bWJlcjtcbiAgICBwdWJsaWMgbWVyY3VyeV9sZXZlbDogbnVtYmVyO1xuICAgIHB1YmxpYyBtYXJzX2xldmVsOiBudW1iZXI7XG4gICAgcHVibGljIGp1cGl0ZXJfbGV2ZWw6IG51bWJlcjtcbiAgICBwdWJsaWMgdmVudXNfcG93ZXI6IG51bWJlcjtcbiAgICBwdWJsaWMgbWVyY3VyeV9wb3dlcjogbnVtYmVyO1xuICAgIHB1YmxpYyBtYXJzX3Bvd2VyOiBudW1iZXI7XG4gICAgcHVibGljIGp1cGl0ZXJfcG93ZXI6IG51bWJlcjtcbiAgICBwdWJsaWMgdmVudXNfcmVzaXN0OiBudW1iZXI7XG4gICAgcHVibGljIG1lcmN1cnlfcmVzaXN0OiBudW1iZXI7XG4gICAgcHVibGljIG1hcnNfcmVzaXN0OiBudW1iZXI7XG4gICAgcHVibGljIGp1cGl0ZXJfcmVzaXN0OiBudW1iZXI7XG4gICAgcHVibGljIGNsYXNzOiBhbnk7XG4gICAgcHVibGljIGN1cnJlbnRfaHBfcmVjb3Zlcnk6IG51bWJlcjtcbiAgICBwdWJsaWMgY3VycmVudF9wcF9yZWNvdmVyeTogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoZW5lbXlfZGF0YSwgbmFtZSkge1xuICAgICAgICBzdXBlcihlbmVteV9kYXRhLmtleV9uYW1lLCBuYW1lID8gbmFtZSA6IGVuZW15X2RhdGEubmFtZSk7XG4gICAgICAgIHRoaXMubGV2ZWwgPSBlbmVteV9kYXRhLmxldmVsO1xuICAgICAgICB0aGlzLnR1cm5zID0gZW5lbXlfZGF0YS50dXJucztcbiAgICAgICAgdGhpcy5tYXhfaHAgPSBlbmVteV9kYXRhLm1heF9ocDtcbiAgICAgICAgdGhpcy5tYXhfcHAgPSBlbmVteV9kYXRhLm1heF9wcDtcbiAgICAgICAgdGhpcy5ocF9yZWNvdmVyeSA9IGVuZW15X2RhdGEuaHBfcmVjb3Zlcnk7XG4gICAgICAgIHRoaXMucHBfcmVjb3ZlcnkgPSBlbmVteV9kYXRhLnBwX3JlY292ZXJ5O1xuICAgICAgICB0aGlzLmF0ayA9IGVuZW15X2RhdGEuYXRrO1xuICAgICAgICB0aGlzLmRlZiA9IGVuZW15X2RhdGEuZGVmO1xuICAgICAgICB0aGlzLmFnaSA9IGVuZW15X2RhdGEuYWdpO1xuICAgICAgICB0aGlzLmx1ayA9IGVuZW15X2RhdGEubHVrO1xuICAgICAgICB0aGlzLml0ZW1zID0gZW5lbXlfZGF0YS5pdGVtcztcbiAgICAgICAgdGhpcy5hYmlsaXRpZXMgPSBlbmVteV9kYXRhLmFiaWxpdGllcztcbiAgICAgICAgdGhpcy5jb2luc19yZXdhcmQgPSBlbmVteV9kYXRhLmNvaW5zX3Jld2FyZDtcbiAgICAgICAgdGhpcy5pdGVtX3Jld2FyZCA9IGVuZW15X2RhdGEuaXRlbV9yZXdhcmQ7XG4gICAgICAgIHRoaXMuaXRlbV9yZXdhcmRfY2hhbmNlID0gZW5lbXlfZGF0YS5pdGVtX3Jld2FyZF9jaGFuY2U7XG4gICAgICAgIHRoaXMuZXhwX3Jld2FyZCA9IGVuZW15X2RhdGEuZXhwX3Jld2FyZDtcbiAgICAgICAgdGhpcy52ZW51c19sZXZlbCA9IGVuZW15X2RhdGEudmVudXNfbGV2ZWw7XG4gICAgICAgIHRoaXMubWVyY3VyeV9sZXZlbCA9IGVuZW15X2RhdGEubWVyY3VyeV9sZXZlbDtcbiAgICAgICAgdGhpcy5tYXJzX2xldmVsID0gZW5lbXlfZGF0YS5tYXJzX2xldmVsO1xuICAgICAgICB0aGlzLmp1cGl0ZXJfbGV2ZWwgPSBlbmVteV9kYXRhLmp1cGl0ZXJfbGV2ZWw7XG4gICAgICAgIHRoaXMudmVudXNfcG93ZXIgPSBlbmVteV9kYXRhLnZlbnVzX3Bvd2VyO1xuICAgICAgICB0aGlzLm1lcmN1cnlfcG93ZXIgPSBlbmVteV9kYXRhLm1lcmN1cnlfcG93ZXI7XG4gICAgICAgIHRoaXMubWFyc19wb3dlciA9IGVuZW15X2RhdGEubWFyc19wb3dlcjtcbiAgICAgICAgdGhpcy5qdXBpdGVyX3Bvd2VyID0gZW5lbXlfZGF0YS5qdXBpdGVyX3Bvd2VyO1xuICAgICAgICB0aGlzLnZlbnVzX3Jlc2lzdCA9IGVuZW15X2RhdGEudmVudXNfcmVzaXN0O1xuICAgICAgICB0aGlzLm1lcmN1cnlfcmVzaXN0ID0gZW5lbXlfZGF0YS5tZXJjdXJ5X3Jlc2lzdDtcbiAgICAgICAgdGhpcy5tYXJzX3Jlc2lzdCA9IGVuZW15X2RhdGEubWFyc19yZXNpc3Q7XG4gICAgICAgIHRoaXMuanVwaXRlcl9yZXNpc3QgPSBlbmVteV9kYXRhLmp1cGl0ZXJfcmVzaXN0O1xuICAgICAgICB0aGlzLmJhdHRsZV9zY2FsZSA9IGVuZW15X2RhdGEuYmF0dGxlX3NjYWxlO1xuICAgICAgICB0aGlzLmJhdHRsZV9hbmltYXRpb25zX3ZhcmlhdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBlbmVteV9kYXRhLmJhdHRsZV9hbmltYXRpb25zX3ZhcmlhdGlvbnMpO1xuICAgICAgICB0aGlzLmZpZ2h0ZXJfdHlwZSA9IGZpZ2h0ZXJfdHlwZXMuRU5FTVk7XG4gICAgICAgIHRoaXMuY2xhc3MgPSB7XG4gICAgICAgICAgICBuYW1lOiBcIk5vIENsYXNzXCIsXG4gICAgICAgICAgICB2dWxuZXJhYmlsaXRpZXM6IGVuZW15X2RhdGEudnVsbmVyYWJpbGl0aWVzID09PSB1bmRlZmluZWQgPyBbXSA6IGVuZW15X2RhdGEudnVsbmVyYWJpbGl0aWVzLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmN1cnJlbnRfZXhwID0gLTE7XG4gICAgICAgIHRoaXMuZWZmZWN0cyA9IFtdO1xuICAgICAgICB0aGlzLnNldF9iYXNlX2F0dHJpYnV0ZXMoKTtcbiAgICB9XG5cbiAgICBzZXRfYmFzZV9hdHRyaWJ1dGVzKCkge1xuICAgICAgICB0aGlzLmN1cnJlbnRfaHAgPSB0aGlzLm1heF9ocDtcbiAgICAgICAgdGhpcy5jdXJyZW50X3BwID0gdGhpcy5tYXhfcHA7XG4gICAgICAgIHRoaXMuY3VycmVudF9ocF9yZWNvdmVyeSA9IHRoaXMuaHBfcmVjb3Zlcnk7XG4gICAgICAgIHRoaXMuY3VycmVudF9wcF9yZWNvdmVyeSA9IHRoaXMucHBfcmVjb3Zlcnk7XG4gICAgICAgIHRoaXMudmVudXNfbGV2ZWxfY3VycmVudCA9IHRoaXMudmVudXNfbGV2ZWw7XG4gICAgICAgIHRoaXMubWVyY3VyeV9sZXZlbF9jdXJyZW50ID0gdGhpcy5tZXJjdXJ5X2xldmVsO1xuICAgICAgICB0aGlzLm1hcnNfbGV2ZWxfY3VycmVudCA9IHRoaXMubWFyc19sZXZlbDtcbiAgICAgICAgdGhpcy5qdXBpdGVyX2xldmVsX2N1cnJlbnQgPSB0aGlzLmp1cGl0ZXJfbGV2ZWw7XG4gICAgICAgIHRoaXMudmVudXNfcG93ZXJfY3VycmVudCA9IHRoaXMudmVudXNfcG93ZXI7XG4gICAgICAgIHRoaXMubWVyY3VyeV9wb3dlcl9jdXJyZW50ID0gdGhpcy5tZXJjdXJ5X3Bvd2VyO1xuICAgICAgICB0aGlzLm1hcnNfcG93ZXJfY3VycmVudCA9IHRoaXMubWFyc19wb3dlcjtcbiAgICAgICAgdGhpcy5qdXBpdGVyX3Bvd2VyX2N1cnJlbnQgPSB0aGlzLmp1cGl0ZXJfcG93ZXI7XG4gICAgICAgIHRoaXMudmVudXNfcmVzaXN0X2N1cnJlbnQgPSB0aGlzLnZlbnVzX3Jlc2lzdDtcbiAgICAgICAgdGhpcy5tZXJjdXJ5X3Jlc2lzdF9jdXJyZW50ID0gdGhpcy5tZXJjdXJ5X3Jlc2lzdDtcbiAgICAgICAgdGhpcy5tYXJzX3Jlc2lzdF9jdXJyZW50ID0gdGhpcy5tYXJzX3Jlc2lzdDtcbiAgICAgICAgdGhpcy5qdXBpdGVyX3Jlc2lzdF9jdXJyZW50ID0gdGhpcy5qdXBpdGVyX3Jlc2lzdDtcbiAgICB9XG5cbiAgICB1cGRhdGVfYWxsKCkge1xuICAgICAgICB0aGlzLnNldF9iYXNlX2F0dHJpYnV0ZXMoKTtcbiAgICAgICAgdGhpcy5lZmZlY3RzLmZvckVhY2goZWZmZWN0ID0+IHtcbiAgICAgICAgICAgIHN3aXRjaCAoZWZmZWN0LnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5QT1dFUjpcbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5SRVNJU1Q6XG4gICAgICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuTUFYX0hQOlxuICAgICAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLk1BWF9QUDpcbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5BVFRBQ0s6XG4gICAgICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuREVGRU5TRTpcbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5BR0lMSVRZOlxuICAgICAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkxVQ0s6XG4gICAgICAgICAgICAgICAgICAgIGVmZmVjdC5hcHBseV9lZmZlY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9yZGVyZWRfZWxlbWVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBvcmRlcmVkX2VsZW1lbnRzW2ldO1xuICAgICAgICAgICAgY29uc3QgcG93ZXJfa2V5ID0gZWxlbWVudCArIFwiX3Bvd2VyX2N1cnJlbnRcIjtcbiAgICAgICAgICAgIGNvbnN0IHJlc2lzdF9rZXkgPSBlbGVtZW50ICsgXCJfcmVzaXN0X2N1cnJlbnRcIjtcbiAgICAgICAgICAgIHRoaXNbcG93ZXJfa2V5XSA9IF8uY2xhbXAodGhpc1twb3dlcl9rZXldLCBudW1iZXJzLkVMRU1fQVRUUl9NSU4sIG51bWJlcnMuRUxFTV9BVFRSX01BWCk7XG4gICAgICAgICAgICB0aGlzW3Jlc2lzdF9rZXldID0gXy5jbGFtcCh0aGlzW3Jlc2lzdF9rZXldLCBudW1iZXJzLkVMRU1fQVRUUl9NSU4sIG51bWJlcnMuRUxFTV9BVFRSX01BWCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRfZW5lbXlfaW5zdGFuY2UoZW5lbXlfZGF0YSwgc3VmZml4KSB7XG4gICAgcmV0dXJuIG5ldyBFbmVteShlbmVteV9kYXRhLCBlbmVteV9kYXRhLm5hbWUgKyBzdWZmaXgpO1xufVxuIiwiaW1wb3J0IHtUZXh0T2JqLCBXaW5kb3d9IGZyb20gXCIuLi8uLi9XaW5kb3dcIjtcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSBcIi4uLy4uL21hZ2ljX251bWJlcnNcIjtcbmltcG9ydCB7ZWxlbWVudHMsIG9yZGVyZWRfZWxlbWVudHN9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuaW1wb3J0IHtHb2xkZW5TdW59IGZyb20gXCIuLi8uLi9Hb2xkZW5TdW5cIjtcbmltcG9ydCB7SXRlbVNsb3R9IGZyb20gXCIuLi8uLi9NYWluQ2hhclwiO1xuaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XG5cbmNvbnN0IEJBU0VfV0lOX0hFSUdIVCA9IDIwO1xuY29uc3QgQkFTRV9XSU5fWSA9IDEzNjtcbmNvbnN0IEFCSUxJVFlfTkFNRV9ZID0gODtcbmNvbnN0IElDT05fWCA9IDk7XG5jb25zdCBJQ09OX1kgPSA1O1xuXG5jb25zdCBBQklMSVRZX05BTUVfWCA9IDI0O1xuY29uc3QgQUJJTElUWV9OQU1FX0lURU1fWCA9IDMyO1xuXG5jb25zdCBCQVNFX1dJTl9YX0FUSyA9IDg4O1xuY29uc3QgQkFTRV9XSU5fV0lEVEhfQVRLID0gODQ7XG5jb25zdCBCQVNFX1dJTl9YX1BTWSA9IDY0O1xuY29uc3QgQkFTRV9XSU5fV0lEVEhfUFNZID0gMTQwO1xuY29uc3QgQkFTRV9XSU5fWF9ESklOTiA9IDg4O1xuY29uc3QgQkFTRV9XSU5fV0lEVEhfREpJTk4gPSA3NjtcbmNvbnN0IEJBU0VfV0lOX1hfU1VNTU9OID0gODA7XG5jb25zdCBCQVNFX1dJTl9XSURUSF9TVU1NT04gPSAxMzI7XG5jb25zdCBCQVNFX1dJTl9YX0lURU0gPSA3MjtcbmNvbnN0IEJBU0VfV0lOX1dJRFRIX0lURU0gPSAxMjQ7XG5jb25zdCBCVVRUT05fV0lEVEggPSAyNDtcblxuY29uc3QgU1RBUl9XSURUSCA9IDY7XG5jb25zdCBTVEFSX1kgPSA5O1xuY29uc3QgU1RBUl9YX1BTWSA9IDEyOTtcbmNvbnN0IFNUQVJfWF9ESklOTiA9IDk7XG5jb25zdCBTVEFSX1hfU1VNT09OXzEgPSA5NztcbmNvbnN0IFNUQVJfWF9TVU1PT05fMiA9IDExMztcblxuY29uc3QgUFBfWCA9IDEyMztcbmNvbnN0IFBQX1kgPSA4O1xuY29uc3QgUFBfVEVYVF9YID0gOTY7XG5cbmNvbnN0IFNVQl9JQ09OX1ggPSAwO1xuY29uc3QgU1VCX0lDT05fWSA9IDA7XG5cbmV4cG9ydCBjbGFzcyBDaG9vc2luZ1RhcmdldFdpbmRvdyB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOiBHb2xkZW5TdW47XG4gICAgcHVibGljIGJhc2Vfd2luZG93OiBXaW5kb3c7XG4gICAgcHVibGljIHdpbmRvd19vcGVuOiBib29sZWFuO1xuICAgIHB1YmxpYyBncm91cDogUGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyBzcHJpdGVzOiBQaGFzZXIuU3ByaXRlW107XG4gICAgcHVibGljIGFjdGlvbjogc3RyaW5nO1xuICAgIHB1YmxpYyB0ZXh0czogVGV4dE9ialtdO1xuICAgIHB1YmxpYyBlbGVtZW50OiBzdHJpbmc7XG4gICAgcHVibGljIGFiaWxpdHlfbmFtZTogc3RyaW5nO1xuICAgIHB1YmxpYyBhYmlsaXR5X25hbWVfeDogbnVtYmVyO1xuICAgIHB1YmxpYyB3aW5kb3dfc3ByaXRlczogKFBoYXNlci5TcHJpdGUgfCBQaGFzZXIuR3JvdXApW107XG4gICAgcHVibGljIHN0YXJfeDogbnVtYmVyO1xuICAgIHB1YmxpYyBpY29uX3Nwcml0ZV9zaGVldDogc3RyaW5nO1xuICAgIHB1YmxpYyBhYmlsaXR5X2tleV9uYW1lOiBzdHJpbmc7XG4gICAgcHVibGljIGljb25fZ3JvdXA6IFBoYXNlci5Hcm91cDtcbiAgICBwdWJsaWMgaXRlbV9vYmo6IEl0ZW1TbG90O1xuICAgIHB1YmxpYyBxdWFudGl0aWVzOiBudW1iZXJbXTtcbiAgICBwdWJsaWMgd2lkdGg6IG51bWJlcjtcbiAgICBwdWJsaWMgeDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSkge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93ID0gbmV3IFdpbmRvdyh0aGlzLmdhbWUsIDAsIEJBU0VfV0lOX1ksIDAsIEJBU0VfV0lOX0hFSUdIVCk7XG4gICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcbiAgICB9XG5cbiAgICB1cGRhdGVfcG9zaXRpb24oKSB7XG4gICAgICAgIHRoaXMuZ3JvdXAueCA9IHRoaXMuZ2FtZS5jYW1lcmEueDtcbiAgICAgICAgdGhpcy5ncm91cC55ID0gdGhpcy5nYW1lLmNhbWVyYS55O1xuICAgIH1cblxuICAgIHNldF9idXR0b24oKSB7XG4gICAgICAgIGNvbnN0IGJ1dHRvbiA9IHRoaXMuZ3JvdXAuY3JlYXRlKHRoaXMueCAtIEJVVFRPTl9XSURUSCwgQkFTRV9XSU5fWSwgXCJidXR0b25zXCIsIHRoaXMuYWN0aW9uKTtcbiAgICAgICAgdGhpcy5zcHJpdGVzLnB1c2goYnV0dG9uKTtcbiAgICB9XG5cbiAgICBzZXRfaW5mbygpIHtcbiAgICAgICAgY29uc3QgZGlzcGxheV9uYW1lID1cbiAgICAgICAgICAgIHRoaXMuYWN0aW9uID09PSBcIml0ZW1cIiA/IHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbdGhpcy5pdGVtX29iai5rZXlfbmFtZV0ubmFtZSA6IHRoaXMuYWJpbGl0eV9uYW1lO1xuICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihkaXNwbGF5X25hbWUsIHRoaXMuYWJpbGl0eV9uYW1lX3gsIEFCSUxJVFlfTkFNRV9ZKTtcbiAgICAgICAgdGhpcy50ZXh0cy5wdXNoKG5hbWUpO1xuICAgICAgICBpZiAodGhpcy5lbGVtZW50ICYmIHRoaXMuZWxlbWVudCAhPT0gZWxlbWVudHMuTk9fRUxFTUVOVCAmJiAhW1wic3VtbW9uXCIsIFwiaXRlbVwiXS5pbmNsdWRlcyh0aGlzLmFjdGlvbikpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXIgPSB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cCh0aGlzLnN0YXJfeCwgU1RBUl9ZLCB0aGlzLmVsZW1lbnQgKyBcIl9zdGFyXCIpO1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfc3ByaXRlcy5wdXNoKHN0YXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmljb25fc3ByaXRlX3NoZWV0ICYmIHRoaXMuYWN0aW9uICE9PSBcIml0ZW1cIikge1xuICAgICAgICAgICAgY29uc3QgaWNvbiA9IHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFxuICAgICAgICAgICAgICAgIElDT05fWCxcbiAgICAgICAgICAgICAgICBJQ09OX1ksXG4gICAgICAgICAgICAgICAgdGhpcy5pY29uX3Nwcml0ZV9zaGVldCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdGhpcy5hYmlsaXR5X2tleV9uYW1lXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfc3ByaXRlcy5wdXNoKGljb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmFjdGlvbiA9PT0gXCJwc3luZXJneVwiKSB7XG4gICAgICAgICAgICBjb25zdCBwcF92YWx1ZSA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24odGhpcy5xdWFudGl0aWVzWzBdLnRvU3RyaW5nKCksIFBQX1gsIFBQX1ksIHRydWUpO1xuICAgICAgICAgICAgdGhpcy50ZXh0cy5wdXNoKHBwX3ZhbHVlKTtcbiAgICAgICAgICAgIGNvbnN0IHBwX3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiUFBcIiwgUFBfVEVYVF9YLCBQUF9ZKTtcbiAgICAgICAgICAgIHRoaXMudGV4dHMucHVzaChwcF90ZXh0KTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmFjdGlvbiA9PT0gXCJzdW1tb25cIikge1xuICAgICAgICAgICAgY29uc3QgcmVxcyA9IF8ucGlja0J5KHRoaXMuZGF0YS5pbmZvLnN1bW1vbnNfbGlzdFt0aGlzLmFiaWxpdHlfa2V5X25hbWVdLnJlcXVpcmVtZW50cywgcmVxID0+IHJlcSk7XG4gICAgICAgICAgICBsZXQgY291bnRlciA9IDA7XG4gICAgICAgICAgICBvcmRlcmVkX2VsZW1lbnRzLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCEoZWxlbWVudCBpbiByZXFzKSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJfeCA9IGNvdW50ZXIgPT09IDAgPyBTVEFSX1hfU1VNT09OXzEgOiBTVEFSX1hfU1VNT09OXzI7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhciA9IHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKHN0YXJfeCwgU1RBUl9ZLCBlbGVtZW50ICsgXCJfc3RhclwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLndpbmRvd19zcHJpdGVzLnB1c2goc3Rhcik7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVxX3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgICAgICAgICByZXFzW2VsZW1lbnRdLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIHN0YXJfeCArIFNUQVJfV0lEVEggKyAxLFxuICAgICAgICAgICAgICAgICAgICBBQklMSVRZX05BTUVfWVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0cy5wdXNoKHJlcV90ZXh0KTtcbiAgICAgICAgICAgICAgICArK2NvdW50ZXI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmFjdGlvbiA9PT0gXCJpdGVtXCIpIHtcbiAgICAgICAgICAgIHRoaXMuaWNvbl9ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcbiAgICAgICAgICAgIGxldCBpY29uX3Nwcml0ZSA9IHRoaXMuaWNvbl9ncm91cC5jcmVhdGUoMCwgMCwgdGhpcy5pY29uX3Nwcml0ZV9zaGVldCwgdGhpcy5pdGVtX29iai5rZXlfbmFtZSk7XG4gICAgICAgICAgICBpY29uX3Nwcml0ZS5hbmNob3Iuc2V0VG8oMC41LCAwLjUpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXRlbV9vYmouZXF1aXBwZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmljb25fZ3JvdXAuY3JlYXRlKFNVQl9JQ09OX1gsIFNVQl9JQ09OX1ksIFwiZXF1aXBwZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5pdGVtX29iai5xdWFudGl0eSA+IDEpIHtcbiAgICAgICAgICAgICAgICBsZXQgaXRlbV9jb3VudCA9IHRoaXMuZ2FtZS5hZGQuYml0bWFwVGV4dChcbiAgICAgICAgICAgICAgICAgICAgU1VCX0lDT05fWCxcbiAgICAgICAgICAgICAgICAgICAgU1VCX0lDT05fWSxcbiAgICAgICAgICAgICAgICAgICAgXCJncy1pdGVtLWJtcC1mb250XCIsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbV9vYmoucXVhbnRpdHkudG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5pY29uX2dyb3VwLmFkZChpdGVtX2NvdW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cuYWRkX3Nwcml0ZV90b19ncm91cCh0aGlzLmljb25fZ3JvdXApO1xuICAgICAgICAgICAgdGhpcy5pY29uX2dyb3VwLnggPSBJQ09OX1ggKyAobnVtYmVycy5JQ09OX1dJRFRIID4+IDEpO1xuICAgICAgICAgICAgdGhpcy5pY29uX2dyb3VwLnkgPSBJQ09OX1kgKyAobnVtYmVycy5JQ09OX0hFSUdIVCA+PiAxKTtcbiAgICAgICAgICAgIHRoaXMud2luZG93X3Nwcml0ZXMucHVzaCh0aGlzLmljb25fZ3JvdXApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb3BlbihhY3Rpb24sIGFiaWxpdHlfbmFtZSwgZWxlbWVudCwgYWJpbGl0eV9rZXlfbmFtZSwgcXVhbnRpdGllcywgaXRlbV9vYmopIHtcbiAgICAgICAgdGhpcy5hY3Rpb24gPSBhY3Rpb247XG4gICAgICAgIHRoaXMuYWJpbGl0eV9uYW1lID0gYWJpbGl0eV9uYW1lO1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB0aGlzLmFiaWxpdHlfa2V5X25hbWUgPSBhYmlsaXR5X2tleV9uYW1lO1xuICAgICAgICB0aGlzLnF1YW50aXRpZXMgPSBxdWFudGl0aWVzO1xuICAgICAgICBzd2l0Y2ggKHRoaXMuYWN0aW9uKSB7XG4gICAgICAgICAgICBjYXNlIFwiYXR0YWNrXCI6XG4gICAgICAgICAgICAgICAgdGhpcy53aWR0aCA9IEJBU0VfV0lOX1dJRFRIX0FUSztcbiAgICAgICAgICAgICAgICB0aGlzLnggPSBCQVNFX1dJTl9YX0FUSztcbiAgICAgICAgICAgICAgICB0aGlzLmFiaWxpdHlfbmFtZV94ID0gQUJJTElUWV9OQU1FX1g7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwicHN5bmVyZ3lcIjpcbiAgICAgICAgICAgICAgICB0aGlzLndpZHRoID0gQkFTRV9XSU5fV0lEVEhfUFNZO1xuICAgICAgICAgICAgICAgIHRoaXMueCA9IEJBU0VfV0lOX1hfUFNZO1xuICAgICAgICAgICAgICAgIHRoaXMuYWJpbGl0eV9uYW1lX3ggPSBBQklMSVRZX05BTUVfWDtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJfeCA9IFNUQVJfWF9QU1k7XG4gICAgICAgICAgICAgICAgdGhpcy5pY29uX3Nwcml0ZV9zaGVldCA9IFwiYWJpbGl0aWVzX2ljb25zXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGppbm5pXCI6XG4gICAgICAgICAgICAgICAgdGhpcy53aWR0aCA9IEJBU0VfV0lOX1dJRFRIX0RKSU5OO1xuICAgICAgICAgICAgICAgIHRoaXMueCA9IEJBU0VfV0lOX1hfREpJTk47XG4gICAgICAgICAgICAgICAgdGhpcy5hYmlsaXR5X25hbWVfeCA9IEFCSUxJVFlfTkFNRV9YO1xuICAgICAgICAgICAgICAgIHRoaXMuc3Rhcl94ID0gU1RBUl9YX0RKSU5OO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInN1bW1vblwiOlxuICAgICAgICAgICAgICAgIHRoaXMud2lkdGggPSBCQVNFX1dJTl9XSURUSF9TVU1NT047XG4gICAgICAgICAgICAgICAgdGhpcy54ID0gQkFTRV9XSU5fWF9TVU1NT047XG4gICAgICAgICAgICAgICAgdGhpcy5hYmlsaXR5X25hbWVfeCA9IEFCSUxJVFlfTkFNRV9YO1xuICAgICAgICAgICAgICAgIHRoaXMuaWNvbl9zcHJpdGVfc2hlZXQgPSBcImFiaWxpdGllc19pY29uc1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIml0ZW1cIjpcbiAgICAgICAgICAgICAgICB0aGlzLndpZHRoID0gQkFTRV9XSU5fV0lEVEhfSVRFTTtcbiAgICAgICAgICAgICAgICB0aGlzLnggPSBCQVNFX1dJTl9YX0lURU07XG4gICAgICAgICAgICAgICAgdGhpcy5hYmlsaXR5X25hbWVfeCA9IEFCSUxJVFlfTkFNRV9JVEVNX1g7XG4gICAgICAgICAgICAgICAgdGhpcy5pY29uX3Nwcml0ZV9zaGVldCA9IFwiaXRlbXNfaWNvbnNcIjtcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1fb2JqID0gaXRlbV9vYmo7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfc2l6ZSh7d2lkdGg6IHRoaXMud2lkdGh9KTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfcG9zaXRpb24oe3g6IHRoaXMueH0pO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNob3codW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuc3ByaXRlcyA9IFtdO1xuICAgICAgICB0aGlzLndpbmRvd19zcHJpdGVzID0gW107XG4gICAgICAgIHRoaXMudGV4dHMgPSBbXTtcbiAgICAgICAgdGhpcy51cGRhdGVfcG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy5zZXRfYnV0dG9uKCk7XG4gICAgICAgIHRoaXMuc2V0X2luZm8oKTtcbiAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IHRydWU7XG4gICAgfVxuXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuc3ByaXRlcy5mb3JFYWNoKHNwcml0ZSA9PiB7XG4gICAgICAgICAgICBzcHJpdGUuZGVzdHJveSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy50ZXh0cy5mb3JFYWNoKHRleHQgPT4ge1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfdGV4dCh0ZXh0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMud2luZG93X3Nwcml0ZXMuZm9yRWFjaChzcHJpdGUgPT4ge1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfZnJvbV9ncm91cChzcHJpdGUsIHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zcHJpdGVzID0gW107XG4gICAgICAgIHRoaXMud2luZG93X3Nwcml0ZXMgPSBbXTtcbiAgICAgICAgdGhpcy50ZXh0cyA9IFtdO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmNsb3NlKHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgICAgICBpZiAodGhpcy5pY29uX2dyb3VwKSB7XG4gICAgICAgICAgICB0aGlzLmljb25fZ3JvdXAuZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5pY29uX2dyb3VwID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5pY29uX3Nwcml0ZV9zaGVldCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmRlc3Ryb3koZmFsc2UpO1xuICAgICAgICB0aGlzLmdyb3VwLmRlc3Ryb3koKTtcbiAgICAgICAgaWYgKHRoaXMuaWNvbl9ncm91cCkge1xuICAgICAgICAgICAgdGhpcy5pY29uX2dyb3VwLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8vIEVuZW15IHRhcmdldCByb2xsaW5nOiBodHRwOi8vZm9ydW0uZ29sZGVuc3VuaGFja2luZy5uZXQvaW5kZXgucGhwP3RvcGljPTI3OTMuMFxuXG5pbXBvcnQge3Blcm1hbmVudF9zdGF0dXN9IGZyb20gXCIuLi9QbGF5ZXJcIjtcblxuZXhwb3J0IGNsYXNzIEVuZW15QUkge1xuICAgIHN0YXRpYyByb2xsX2FjdGlvbihjYXN0ZXIsIGFsbGllcywgZW5lbWllcykge1xuICAgICAgICAvL2hhcmQgY29kZWQgdG8gYXR0YWNrIG9ubHkgdGhlIGZpcnN0IGNoYXIgYWx3YXlzLiBXSVBcbiAgICAgICAgbGV0IGNoYXJfY2hvc2VuID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBrZXlfbmFtZTogXCJhdHRhY2tcIixcbiAgICAgICAgICAgIHRhcmdldHM6IGFsbGllcy5tYXAoKGFsbHksIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGF2YWlsYWJsZV90YXJnZXQgPSBhbGx5Lmhhc19wZXJtYW5lbnRfc3RhdHVzKHBlcm1hbmVudF9zdGF0dXMuRE9XTkVEKSA/IGZhbHNlIDogdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXRzID0ge1xuICAgICAgICAgICAgICAgICAgICBtYWduaXR1ZGU6IGF2YWlsYWJsZV90YXJnZXQgJiYgIWNoYXJfY2hvc2VuID8gMSA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2U6IGF2YWlsYWJsZV90YXJnZXQgJiYgIWNoYXJfY2hvc2VuID8gYWxseSA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlX3RhcmdldCAmJiAhY2hhcl9jaG9zZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhcl9jaG9zZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0cztcbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9O1xuICAgIH1cbn1cbiIsIi8vcGxlYXNlIGNoZWNrIGh0dHA6Ly9mb3J1bS5nb2xkZW5zdW5oYWNraW5nLm5ldC9pbmRleC5waHA/dG9waWM9MjQ2MFxuXG5pbXBvcnQge2VsZW1lbnRzfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCB7cGVybWFuZW50X3N0YXR1c30gZnJvbSBcIi4uL1BsYXllclwiO1xuaW1wb3J0IHtFTEVNX0FUVFJfTUFYLCBFTEVNX0FUVFJfTUlOfSBmcm9tIFwiLi4vbWFnaWNfbnVtYmVyc1wiO1xuaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XG5cbmV4cG9ydCBjb25zdCBDUklUSUNBTF9DSEFOQ0UgPSAxIC8gMzI7XG5cbi8vIDEvMzIgY2hhbmNlIHRvIG1pc3Mgd2l0aCBhIHN0YW5kYXJkIGF0dGFjaywgb3IgYSByb3VnaGx5IDY2JSBjaGFuY2UgdG8gbWlzcyB3aXRoIERlbHVzaW9uLlxuZXhwb3J0IGNvbnN0IEVWQVNJT05fQ0hBTkNFID0gMSAvIDMyO1xuZXhwb3J0IGNvbnN0IERFTFVTSU9OX01JU1NfQ0hBTkNFID0gNjYgLyAxMDA7XG5cbmV4cG9ydCBjbGFzcyBCYXR0bGVGb3JtdWxhcyB7XG4gICAgc3RhdGljIHBsYXllcl90dXJuX3NwZWVkKGFnaWxpdHksIHByaW9yaXR5X21vdmUgPSBmYWxzZSwgbXVsdGlfdHVybiA9IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiAoYWdpbGl0eSArICgoYWdpbGl0eSAqIF8ucmFuZG9tKDAsIDY1NTM1KSkgPj4gMjApKSAqIChtdWx0aV90dXJuID8gMC41IDogMSkgKyAocHJpb3JpdHlfbW92ZSA/IDFlNCA6IDApO1xuICAgIH1cblxuICAgIHN0YXRpYyBlbmVteV90dXJuX3NwZWVkKGFnaWxpdHksIHR1cm5fbnVtYmVyLCB0dXJuX3F1YW50aXR5LCBwcmlvcml0eV9tb3ZlID0gZmFsc2UpIHtcbiAgICAgICAgY29uc3QgcHJpb3JpdHkgPSBwcmlvcml0eV9tb3ZlID8gMWU0IDogMDtcbiAgICAgICAgaWYgKHR1cm5fbnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gYWdpbGl0eSArIHByaW9yaXR5O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0dXJuX3F1YW50aXR5ID09PSAyKSB7XG4gICAgICAgICAgICByZXR1cm4gKGFnaWxpdHkgPj4gMSkgKyBwcmlvcml0eTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHVybl9xdWFudGl0eSA9PT0gMykge1xuICAgICAgICAgICAgc3dpdGNoICh0dXJuX251bWJlcikge1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChhZ2lsaXR5ICogMykgLyA0ICsgcHJpb3JpdHk7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGFnaWxpdHkgPj4gMSkgKyBwcmlvcml0eTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHVybl9xdWFudGl0eSA9PT0gNCkge1xuICAgICAgICAgICAgc3dpdGNoICh0dXJuX251bWJlcikge1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgKGFnaWxpdHkgKiA1KSAvIDYgKyBwcmlvcml0eTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIChhZ2lsaXR5ICogNCkgLyA2ICsgcHJpb3JpdHk7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAoYWdpbGl0eSA+PiAxKSArIHByaW9yaXR5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoYWdpbGl0eSA+PiAxKSArIHByaW9yaXR5O1xuICAgIH1cblxuICAgIHN0YXRpYyBiYXNlX2RhbWFnZShjYXN0ZXIsIHRhcmdldCkge1xuICAgICAgICBjb25zdCByZWxhdGl2ZV9hdGsgPSBjYXN0ZXIuYXRrIC0gdGFyZ2V0LmRlZjtcbiAgICAgICAgcmV0dXJuIChyZWxhdGl2ZV9hdGsgPCAwID8gMCA6IHJlbGF0aXZlX2F0aykgLyAyLjA7XG4gICAgfVxuXG4gICAgc3RhdGljIHNwZWNpYWxfcGh5c2ljYWxfYXR0YWNrKGNhc3RlciwgdGFyZ2V0LCBtdWx0X21vZCwgYWRkX21vZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlX2RhbWFnZShjYXN0ZXIsIHRhcmdldCkgKiBtdWx0X21vZCArIGFkZF9tb2Q7XG4gICAgfVxuXG4gICAgc3RhdGljIHBvd2VyX211bHRpcGxpZXIoY2FzdGVyLCB0YXJnZXQsIGVsZW1lbnQsIGlzX3BzeW5lcmd5ID0gdHJ1ZSkge1xuICAgICAgICBsZXQgY2FzdGVyX3Bvd2VyID0gMTAwLjAsXG4gICAgICAgICAgICB0YXJnZXRfcmVzaXN0ID0gMTAwLjA7XG4gICAgICAgIGlmIChlbGVtZW50ICE9PSBlbGVtZW50cy5OT19FTEVNRU5UKSB7XG4gICAgICAgICAgICBjb25zdCByZXNpc3Rfa2V5ID0gZWxlbWVudCArIFwiX3Jlc2lzdF9jdXJyZW50XCI7XG4gICAgICAgICAgICB0YXJnZXRfcmVzaXN0ID0gdGFyZ2V0W3Jlc2lzdF9rZXldO1xuICAgICAgICAgICAgaWYgKGNhc3RlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG93ZXJfa2V5ID0gZWxlbWVudCArIFwiX3Bvd2VyX2N1cnJlbnRcIjtcbiAgICAgICAgICAgICAgICBjYXN0ZXJfcG93ZXIgPSBjYXN0ZXJbcG93ZXJfa2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZWxhdGl2ZV9wb3dlciA9IF8uY2xhbXAoY2FzdGVyX3Bvd2VyIC0gdGFyZ2V0X3Jlc2lzdCwgRUxFTV9BVFRSX01JTiwgRUxFTV9BVFRSX01BWCk7XG4gICAgICAgIHJldHVybiAxICsgcmVsYXRpdmVfcG93ZXIgLyAoaXNfcHN5bmVyZ3kgPyAyMDAuMCA6IDQwMC4wKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgcGh5c2ljYWxfYXR0YWNrKGNhc3RlciwgdGFyZ2V0LCBtdWx0X21vZCwgYWRkX21vZCwgZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy5zcGVjaWFsX3BoeXNpY2FsX2F0dGFjayhjYXN0ZXIsIHRhcmdldCwgbXVsdF9tb2QsIGFkZF9tb2QpICpcbiAgICAgICAgICAgIHRoaXMucG93ZXJfbXVsdGlwbGllcihjYXN0ZXIsIHRhcmdldCwgZWxlbWVudCwgZmFsc2UpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgc3RhdGljIHBzeW5lcmd5X2RhbWFnZShjYXN0ZXIsIHRhcmdldCwgcG93ZXIsIGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHBvd2VyICsgdGhpcy5wb3dlcl9tdWx0aXBsaWVyKGNhc3RlciwgdGFyZ2V0LCBlbGVtZW50LCB0cnVlKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgaXRlbV9kYW1hZ2UodGFyZ2V0LCBwb3dlciwgZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gcG93ZXIgKyB0aGlzLnBvd2VyX211bHRpcGxpZXIodW5kZWZpbmVkLCB0YXJnZXQsIGVsZW1lbnQsIHRydWUpO1xuICAgIH1cblxuICAgIHN0YXRpYyBoZWFsX2FiaWxpdHkoY2FzdGVyLCBwb3dlciwgZWxlbWVudCkge1xuICAgICAgICBsZXQgY2FzdGVyX3Bvd2VyID0gMTAwLjA7XG4gICAgICAgIGlmIChlbGVtZW50ICE9PSBlbGVtZW50cy5OT19FTEVNRU5UKSB7XG4gICAgICAgICAgICBjb25zdCBwb3dlcl9rZXkgPSBlbGVtZW50ICsgXCJfcG93ZXJfY3VycmVudFwiO1xuICAgICAgICAgICAgY2FzdGVyX3Bvd2VyID0gY2FzdGVyW3Bvd2VyX2tleV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChwb3dlciAqIGNhc3Rlcl9wb3dlcikgLyAxMDAuMDtcbiAgICB9XG5cbiAgICBzdGF0aWMgc3VtbW9uX2RhbWFnZSh0YXJnZXQsIHBvd2VyLCBkamlubmlfdXNlZCkge1xuICAgICAgICByZXR1cm4gcG93ZXIgKyB0YXJnZXQubWF4X2hwICogZGppbm5pX3VzZWQgKiAwLjAzO1xuICAgIH1cblxuICAgIHN0YXRpYyBhaWxtZW50X3N1Y2Nlc3MoY2FzdGVyLCB0YXJnZXQsIGJhc2VfY2hhbmNlLCBtYWduaXR1ZGUsIGVsZW1lbnQsIHZ1bG5lcmFiaXR5KSB7XG4gICAgICAgIGNvbnN0IGxldmVsX2tleSA9IGVsZW1lbnQgKyBcIl9sZXZlbF9jdXJyZW50XCI7XG4gICAgICAgIGNvbnN0IHJlbGF0aXZlX2xldmVsID0gY2FzdGVyW2xldmVsX2tleV0gLSB0YXJnZXRbbGV2ZWxfa2V5XTtcbiAgICAgICAgY29uc3QgbHVja19mYWN0b3IgPSB0YXJnZXQubHVrID4+IDE7XG4gICAgICAgIHZ1bG5lcmFiaXR5ID0gdnVsbmVyYWJpdHkgPT09IHVuZGVmaW5lZCA/IDAgOiB2dWxuZXJhYml0eTtcbiAgICAgICAgY29uc3QgY2hhbmNlID0gKChyZWxhdGl2ZV9sZXZlbCAtIGx1Y2tfZmFjdG9yKSAqIDMpIC8gMTAwICsgYmFzZV9jaGFuY2UgKyB2dWxuZXJhYml0eSAqIG1hZ25pdHVkZTtcbiAgICAgICAgcmV0dXJuIGNoYW5jZSA+PSBNYXRoLnJhbmRvbSgpO1xuICAgIH1cblxuICAgIHN0YXRpYyBhaWxtZW50X3JlY292ZXJ5KHBsYXllciwgdHVybl9udW1iZXIsIGJhc2VfY2hhbmNlKSB7XG4gICAgICAgIHJldHVybiAocGxheWVyLmx1ayAqIDMgLSB0dXJuX251bWJlciAqIDUgKyBiYXNlX2NoYW5jZSAqIDEwMCkgKiA2NTUgPj0gXy5yYW5kb20oMCwgMHhmZmZmKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgYmF0dGxlX3BvaXNvbl9kYW1hZ2UocGxheWVyLCBwb2lzb25fdHlwZSkge1xuICAgICAgICBsZXQgcG9pc29uX2ZhY3RvciA9IDA7XG4gICAgICAgIHN3aXRjaCAocG9pc29uX3R5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgcGVybWFuZW50X3N0YXR1cy5QT0lTT046XG4gICAgICAgICAgICAgICAgcG9pc29uX2ZhY3RvciA9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHBlcm1hbmVudF9zdGF0dXMuVkVOT006XG4gICAgICAgICAgICAgICAgcG9pc29uX2ZhY3RvciA9IDI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgocG9pc29uX2ZhY3RvciAqIHBsYXllci5tYXhfaHApIC8gMTApIHwgMDtcbiAgICB9XG5cbiAgICBzdGF0aWMgc3VtbW9uX3Bvd2VyKGRqaW5uX251bWJlcikge1xuICAgICAgICBkamlubl9udW1iZXIgPSBfLmNsYW1wKGRqaW5uX251bWJlciwgMCwgNCk7XG4gICAgICAgIHJldHVybiAoZGppbm5fbnVtYmVyICogZGppbm5fbnVtYmVyICsgZGppbm5fbnVtYmVyKSAqIDU7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtHb2xkZW5TdW59IGZyb20gXCIuLi9Hb2xkZW5TdW5cIjtcbmltcG9ydCB7QmF0dGxlQW5pbWF0aW9ufSBmcm9tIFwiLi9CYXR0bGVBbmltYXRpb25cIjtcblxuY29uc3QgQU5JTUFUSU9OU19CQVNFX1BBVEggPSBcImFzc2V0cy9pbWFnZXMvYWJpbGl0aWVzX2FuaW1hdGlvbnMvXCI7XG5jb25zdCBBTklNQVRJT05TX0RCX1BBVEggPSBcImFzc2V0cy9kYnMvYWJpbGl0aWVzX2FuaW1hdGlvbnMvXCI7XG5jb25zdCBBTklNQVRJT05fU1VGRklYID0gXCJfYmF0dGxlX2FuaW1hdGlvblwiO1xuY29uc3QgUkVDSVBFX1NVRkZJWCA9IFwiX2JhdHRsZV9yZWNpcGVcIjtcblxuZXhwb3J0IGNsYXNzIEJhdHRsZUFuaW1hdGlvbk1hbmFnZXIge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgZGF0YTogR29sZGVuU3VuO1xuICAgIHB1YmxpYyBhbmltYXRpb25zOiB7W2JhdHRsZV9hbmltX2tleTogc3RyaW5nXTogQmF0dGxlQW5pbWF0aW9ufTtcbiAgICBwdWJsaWMgbm90X2F2YWlsYWJsZTogU2V0PHN0cmluZz47XG4gICAgcHVibGljIHJlbmRlcl9mdW5jdGlvbjogRnVuY3Rpb247XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9ucyA9IHt9O1xuICAgICAgICB0aGlzLm5vdF9hdmFpbGFibGUgPSBuZXcgU2V0KCk7XG4gICAgICAgIHRoaXMucmVuZGVyX2Z1bmN0aW9uID0gbnVsbDtcbiAgICB9XG5cbiAgICBhc3luYyBsb2FkX2FuaW1hdGlvbihiYXR0bGVfYW5pbV9rZXkpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgYmF0dGxlX2FuaW1fa2V5IGluIHRoaXMuYW5pbWF0aW9ucyB8fFxuICAgICAgICAgICAgdGhpcy5ub3RfYXZhaWxhYmxlLmhhcyhiYXR0bGVfYW5pbV9rZXkpIHx8XG4gICAgICAgICAgICBiYXR0bGVfYW5pbV9rZXkgPT09IFwibm9fYW5pbWF0aW9uXCJcbiAgICAgICAgKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBzcHJpdGVfa2V5ID0gYmF0dGxlX2FuaW1fa2V5ICsgQU5JTUFUSU9OX1NVRkZJWDtcbiAgICAgICAgY29uc3QgcmVjaXBlX2tleSA9IGJhdHRsZV9hbmltX2tleSArIFJFQ0lQRV9TVUZGSVg7XG4gICAgICAgIGNvbnN0IHNwcml0ZV9sb2FkZXIgPSB0aGlzLmdhbWUubG9hZC5hdGxhc0pTT05IYXNoKFxuICAgICAgICAgICAgc3ByaXRlX2tleSxcbiAgICAgICAgICAgIGAke0FOSU1BVElPTlNfQkFTRV9QQVRIfSR7YmF0dGxlX2FuaW1fa2V5fS5wbmdgLFxuICAgICAgICAgICAgYCR7QU5JTUFUSU9OU19CQVNFX1BBVEh9JHtiYXR0bGVfYW5pbV9rZXl9Lmpzb25gXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IHJlY2lwZV9sb2FkZXIgPSB0aGlzLmdhbWUubG9hZC5qc29uKHJlY2lwZV9rZXksIGAke0FOSU1BVElPTlNfREJfUEFUSH0ke2JhdHRsZV9hbmltX2tleX1fZGIuanNvbmApO1xuXG4gICAgICAgIGxldCBhbGxfc3VjY2VlZCA9IHRydWU7XG4gICAgICAgIGxldCBzcHJpdGVfbG9hZGVyX3Byb21pc2VfcmVzb2x2ZTtcbiAgICAgICAgY29uc3Qgc3ByaXRlX2xvYWRlcl9wcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICBzcHJpdGVfbG9hZGVyX3Byb21pc2VfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgIH0pO1xuICAgICAgICBzcHJpdGVfbG9hZGVyLm9uRmlsZUNvbXBsZXRlLmFkZE9uY2UoKHByb2dyZXNzLCBmaWxla2V5LCBzdWNjZXNzKSA9PiB7XG4gICAgICAgICAgICBhbGxfc3VjY2VlZCA9IGFsbF9zdWNjZWVkICYmIHN1Y2Nlc3M7XG4gICAgICAgICAgICBzcHJpdGVfbG9hZGVyX3Byb21pc2VfcmVzb2x2ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHJlY2lwZV9sb2FkZXJfcHJvbWlzZV9yZXNvbHZlO1xuICAgICAgICBjb25zdCByZWNpcGVfbG9hZGVyX3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIHJlY2lwZV9sb2FkZXJfcHJvbWlzZV9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJlY2lwZV9sb2FkZXIub25GaWxlQ29tcGxldGUuYWRkT25jZSgocHJvZ3Jlc3MsIGZpbGVrZXksIHN1Y2Nlc3MpID0+IHtcbiAgICAgICAgICAgIGFsbF9zdWNjZWVkID0gYWxsX3N1Y2NlZWQgJiYgc3VjY2VzcztcbiAgICAgICAgICAgIHJlY2lwZV9sb2FkZXJfcHJvbWlzZV9yZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCBsb2FkX2NvbXBsZXRlX3Byb21pc2VfcmVzb2x2ZTtcbiAgICAgICAgY29uc3QgbG9hZF9jb21wbGV0ZV9wcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiAobG9hZF9jb21wbGV0ZV9wcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlKSk7XG4gICAgICAgIHRoaXMuZ2FtZS5sb2FkLm9uTG9hZENvbXBsZXRlLmFkZE9uY2UobG9hZF9jb21wbGV0ZV9wcm9taXNlX3Jlc29sdmUpO1xuICAgICAgICB0aGlzLmdhbWUubG9hZC5zdGFydCgpO1xuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbc3ByaXRlX2xvYWRlcl9wcm9taXNlLCByZWNpcGVfbG9hZGVyX3Byb21pc2UsIGxvYWRfY29tcGxldGVfcHJvbWlzZV0pO1xuICAgICAgICBpZiAoYWxsX3N1Y2NlZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGFuaW1hdGlvbl9yZWNpcGUgPSB0aGlzLmdhbWUuY2FjaGUuZ2V0SlNPTihiYXR0bGVfYW5pbV9rZXkgKyBSRUNJUEVfU1VGRklYKTtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uc1tiYXR0bGVfYW5pbV9rZXldID0gbmV3IEJhdHRsZUFuaW1hdGlvbihcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUsXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLFxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9yZWNpcGUua2V5X25hbWUsXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX3JlY2lwZS5zcHJpdGVzLFxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9yZWNpcGUueF9zZXF1ZW5jZSxcbiAgICAgICAgICAgICAgICBhbmltYXRpb25fcmVjaXBlLnlfc2VxdWVuY2UsXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX3JlY2lwZS54X2VsbGlwc2VfYXhpc19mYWN0b3Jfc2VxdWVuY2UsXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX3JlY2lwZS55X2VsbGlwc2VfYXhpc19mYWN0b3Jfc2VxdWVuY2UsXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX3JlY2lwZS54X3NjYWxlX3NlcXVlbmNlLFxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9yZWNpcGUueV9zY2FsZV9zZXF1ZW5jZSxcbiAgICAgICAgICAgICAgICBhbmltYXRpb25fcmVjaXBlLnhfYW5jaG9yX3NlcXVlbmNlLFxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9yZWNpcGUueV9hbmNob3Jfc2VxdWVuY2UsXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX3JlY2lwZS5hbHBoYV9zZXF1ZW5jZSxcbiAgICAgICAgICAgICAgICBhbmltYXRpb25fcmVjaXBlLnJvdGF0aW9uX3NlcXVlbmNlLFxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9yZWNpcGUuc3RhZ2VfYW5nbGVfc2VxdWVuY2UsXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX3JlY2lwZS5odWVfYW5nbGVfc2VxdWVuY2UsXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX3JlY2lwZS50aW50X3NlcXVlbmNlLFxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9yZWNpcGUuZ3JheXNjYWxlX3NlcXVlbmNlLFxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9yZWNpcGUuY29sb3JpemVfc2VxdWVuY2UsXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX3JlY2lwZS5jdXN0b21fZmlsdGVyX3NlcXVlbmNlLFxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9yZWNpcGUucGxheV9zZXF1ZW5jZSxcbiAgICAgICAgICAgICAgICBhbmltYXRpb25fcmVjaXBlLnNldF9mcmFtZV9zZXF1ZW5jZSxcbiAgICAgICAgICAgICAgICBhbmltYXRpb25fcmVjaXBlLmJsZW5kX21vZGVfc2VxdWVuY2UsXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX3JlY2lwZS5wYXJ0aWNsZXNfc2VxdWVuY2UsXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX3JlY2lwZS5pc19wYXJ0eV9hbmltYXRpb25cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm5vdF9hdmFpbGFibGUuYWRkKGJhdHRsZV9hbmltX2tleSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhbmltYXRpb25fYXZhaWxhYmxlKGJhdHRsZV9hbmltX2tleSkge1xuICAgICAgICByZXR1cm4gYmF0dGxlX2FuaW1fa2V5IGluIHRoaXMuYW5pbWF0aW9ucztcbiAgICB9XG5cbiAgICBhc3luYyBwbGF5KGJhdHRsZV9hbmltX2tleSwgY2FzdGVyX3Nwcml0ZSwgdGFyZ2V0c19zcHJpdGVzLCBncm91cF9jYXN0ZXIsIGdyb3VwX3Rha2VyLCBiYXR0bGVfc3RhZ2UpIHtcbiAgICAgICAgaWYgKCEoYmF0dGxlX2FuaW1fa2V5IGluIHRoaXMuYW5pbWF0aW9ucykpIHJldHVybjtcbiAgICAgICAgY29uc3Qgc3ByaXRlX2tleSA9IGJhdHRsZV9hbmltX2tleSArIEFOSU1BVElPTl9TVUZGSVg7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uc1tiYXR0bGVfYW5pbV9rZXldLmluaXRpYWxpemUoXG4gICAgICAgICAgICBzcHJpdGVfa2V5LFxuICAgICAgICAgICAgY2FzdGVyX3Nwcml0ZSxcbiAgICAgICAgICAgIHRhcmdldHNfc3ByaXRlcyxcbiAgICAgICAgICAgIGdyb3VwX2Nhc3RlcixcbiAgICAgICAgICAgIGdyb3VwX3Rha2VyLFxuICAgICAgICAgICAgYmF0dGxlX3N0YWdlLmJhdHRsZV9ncm91cCxcbiAgICAgICAgICAgIGJhdHRsZV9zdGFnZS5jYW1lcmFfYW5nbGUsXG4gICAgICAgICAgICBbYmF0dGxlX3N0YWdlLmJhdHRsZV9iZywgYmF0dGxlX3N0YWdlLmJhdHRsZV9iZzJdXG4gICAgICAgICk7XG4gICAgICAgIGxldCBwbGF5X3Byb21pc2VfcmVzb2x2ZTtcbiAgICAgICAgY29uc3QgcGxheV9wcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICBwbGF5X3Byb21pc2VfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJlbmRlcl9mdW5jdGlvbiA9IHRoaXMuYW5pbWF0aW9uc1tiYXR0bGVfYW5pbV9rZXldLnJlbmRlci5iaW5kKHRoaXMuYW5pbWF0aW9uc1tiYXR0bGVfYW5pbV9rZXldKTtcbiAgICAgICAgdGhpcy5hbmltYXRpb25zW2JhdHRsZV9hbmltX2tleV0ucGxheShwbGF5X3Byb21pc2VfcmVzb2x2ZSk7XG4gICAgICAgIGF3YWl0IHBsYXlfcHJvbWlzZTtcbiAgICAgICAgdGhpcy5yZW5kZXJfZnVuY3Rpb24gPSBudWxsO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgaWYgKHRoaXMucmVuZGVyX2Z1bmN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcl9mdW5jdGlvbigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgZm9yIChsZXQgYmF0dGxlX2FuaW1fa2V5IGluIHRoaXMuYW5pbWF0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5nYW1lLmNhY2hlLnJlbW92ZVRleHR1cmVBdGxhcyhiYXR0bGVfYW5pbV9rZXkgKyBBTklNQVRJT05fU1VGRklYKTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5jYWNoZS5yZW1vdmVKU09OKGJhdHRsZV9hbmltX2tleSArIFJFQ0lQRV9TVUZGSVgpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHtHb2xkZW5TdW59IGZyb20gXCIuLi9Hb2xkZW5TdW5cIjtcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSBcIi4uL21hZ2ljX251bWJlcnNcIjtcbmltcG9ydCB7cmFuZ2VfMzYwfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCB7Q2FtZXJhQW5nbGUsIERFRkFVTFRfUE9TX0FOR0xFfSBmcm9tIFwiLi9CYXR0bGVTdGFnZVwiO1xuaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XG5cbnR5cGUgRGVmYXVsdEF0dHIgPSB7XG4gICAgc3RhcnRfZGVsYXk6IG51bWJlciB8IG51bWJlcltdO1xuICAgIHRvOiBzdHJpbmcgfCBudW1iZXIgfCBudW1iZXJbXTtcbiAgICBpc19hYnNvbHV0ZTogYm9vbGVhbjtcbiAgICB0d2Vlbjogc3RyaW5nO1xuICAgIGR1cmF0aW9uOiBudW1iZXI7XG4gICAgc3ByaXRlX2luZGV4Pzogc3RyaW5nIHwgbnVtYmVyIHwgbnVtYmVyW107XG4gICAgeW95bz86IGJvb2xlYW47XG4gICAgc2hpZnQ/OiBudW1iZXIgfCBudW1iZXJbXTtcbiAgICBmb3JjZV9zdGFnZV91cGRhdGU/OiBib29sZWFuO1xuICAgIGRpcmVjdGlvbj86IGJvb2xlYW47XG59O1xuXG50eXBlIEFkdlBhcnRpY2xlVmFsdWUgPVxuICAgIHwgbnVtYmVyXG4gICAgfCB7bWluOiBudW1iZXI7IG1heDogbnVtYmVyfVxuICAgIHwge1xuICAgICAgICAgIGluaXRpYWw/OiBudW1iZXIgfCB7bWluOiBudW1iZXI7IG1heDogbnVtYmVyfTtcbiAgICAgICAgICB2YWx1ZTogbnVtYmVyIHwge21pbjogbnVtYmVyOyBtYXg6IG51bWJlcn07XG4gICAgICAgICAgZGVsdGE6IG51bWJlciB8IHttaW46IG51bWJlcjsgbWF4OiBudW1iZXJ9O1xuICAgICAgICAgIHJhZGlhbDoge2FyY1N0YXJ0OiBudW1iZXI7IGFyY0VuZDogbnVtYmVyfTtcbiAgICAgICAgICBjb250cm9sOiB7eDogbnVtYmVyOyB5OiBudW1iZXJ9W10gfCBcImxpbmVhclwiIHwgXCJyZXZlcnNlXCIgfCBcInlveW9cIjtcbiAgICAgIH07XG5cbnR5cGUgUGFydGljbGVPYmplY3QgPSB7XG4gICAgbGlmZXNwYW46IEFkdlBhcnRpY2xlVmFsdWU7XG4gICAgcmVkOiBBZHZQYXJ0aWNsZVZhbHVlO1xuICAgIGdyZWVuOiBBZHZQYXJ0aWNsZVZhbHVlO1xuICAgIGJsdWU6IEFkdlBhcnRpY2xlVmFsdWU7XG4gICAgdng6IEFkdlBhcnRpY2xlVmFsdWU7XG4gICAgdnk6IEFkdlBhcnRpY2xlVmFsdWU7XG4gICAgYXg6IEFkdlBhcnRpY2xlVmFsdWU7XG4gICAgYXk6IEFkdlBhcnRpY2xlVmFsdWU7XG4gICAgYWxwaGE6IEFkdlBhcnRpY2xlVmFsdWU7XG4gICAgc2NhbGU6IEFkdlBhcnRpY2xlVmFsdWU7XG4gICAgcm90YXRpb246IEFkdlBhcnRpY2xlVmFsdWU7XG4gICAgaW1hZ2U6IHN0cmluZyB8IHN0cmluZ1tdO1xuICAgIGZyYW1lOiBzdHJpbmcgfCBzdHJpbmdbXTtcbiAgICBibGVuZE1vZGU6IHN0cmluZztcbiAgICB2aXNpYmxlOiBib29sZWFuO1xuICAgIHNlbmRUb0JhY2s6IGJvb2xlYW47XG4gICAgYnJpbmdUb1RvcDogYm9vbGVhbjtcbiAgICBoc3Y6IEFkdlBhcnRpY2xlVmFsdWU7XG4gICAgdGFyZ2V0OiB7XG4gICAgICAgIHg6IG51bWJlcjtcbiAgICAgICAgeTogbnVtYmVyO1xuICAgICAgICB6b25lX2tleT86IHN0cmluZztcbiAgICAgICAgem9uZT86IFBoYXNlci5QYXJ0aWNsZVN0b3JtLlpvbmVzLkJhc2U7XG4gICAgICAgIHNwZWVkPzogXCJ5b3lvXCIgfCBcInJldmVyc2VcIiB8IFwibGluZWFyXCI7XG4gICAgfTtcbn07XG5cbmVudW0gWm9uZVR5cGVzIHtcbiAgICBSRUNUQU5HTEUgPSBcInJlY3RhbmdsZVwiLFxuICAgIFBPSU5UID0gXCJwb2ludFwiLFxuICAgIExJTkUgPSBcImxpbmVcIixcbiAgICBFTExJUFNFID0gXCJlbGxpcHNlXCIsXG4gICAgQ0lSQ0xFID0gXCJjaXJjbGVcIixcbn1cblxudHlwZSBQYXJ0aWNsZXNab25lID0ge1xuICAgIHR5cGU6IFpvbmVUeXBlcztcbiAgICByYWRpdXM6IG51bWJlcjtcbiAgICB3aWR0aDogbnVtYmVyO1xuICAgIGhlaWdodDogbnVtYmVyO1xuICAgIHBvaW50czoge3g6IG51bWJlcjsgeTogbnVtYmVyfVtdO1xufTtcblxudHlwZSBFbWl0dGVyID0ge1xuICAgIGVtaXR0ZXJfZGF0YV9rZXk6IHN0cmluZztcbiAgICByZW5kZXJfdHlwZTogXCJwaXhlbFwiIHwgXCJzcHJpdGVcIjtcbiAgICB4OiBudW1iZXIgfCBzdHJpbmc7XG4gICAgeTogbnVtYmVyIHwgc3RyaW5nO1xuICAgIHBvc2l0aW9uOiBcImJlaGluZFwiIHwgXCJiZXR3ZWVuXCIgfCBcIm92ZXJcIjtcbiAgICBzaGlmdF94OiBudW1iZXI7XG4gICAgc2hpZnRfeTogbnVtYmVyO1xuICAgIHRvdGFsOiBudW1iZXI7XG4gICAgcmVwZWF0OiBudW1iZXI7XG4gICAgZnJlcXVlbmN5OiBudW1iZXI7XG4gICAgeF9zdGVwOiBudW1iZXI7XG4gICAgeV9zdGVwOiBudW1iZXI7XG4gICAgZGVsYXk6IHtcbiAgICAgICAgc3RhcnQ6IG51bWJlcjtcbiAgICAgICAgc3RlcDogbnVtYmVyO1xuICAgICAgICB2aXNpYmxlOiBib29sZWFuO1xuICAgIH07XG4gICAgcGFydGljbGVzX2Rpc3BsYXlfYmxlbmRfbW9kZTogc3RyaW5nO1xuICAgIHJlbmRlcl93aGl0ZV9jb3JlOiBib29sZWFuO1xuICAgIHpvbmVfa2V5OiBzdHJpbmc7XG4gICAgcmFuZG9tX2luX3pvbmU6IGJvb2xlYW47XG4gICAgc3BhY2luZzogbnVtYmVyIHwgbnVtYmVyW107XG4gICAgZm9yY2U6IHt4OiBudW1iZXI7IHk6IG51bWJlcn07XG4gICAgcmFkaWF0ZToge1xuICAgICAgICB2ZWxvY2l0eTogbnVtYmVyO1xuICAgICAgICBmcm9tOiBudW1iZXI7XG4gICAgICAgIHRvOiBudW1iZXI7XG4gICAgfTtcbiAgICByYWRpYXRlRnJvbToge1xuICAgICAgICB4OiBudW1iZXI7XG4gICAgICAgIHk6IG51bWJlcjtcbiAgICAgICAgdmVsb2NpdHk6IG51bWJlcjtcbiAgICB9O1xuICAgIHNob3dfdHJhaWxzOiBib29sZWFuO1xuICAgIHRyYWlsc19jbGVhcl9mYWN0b3I6IG51bWJlcjtcbiAgICBwaXhlbF9zaXplOiBudW1iZXI7XG4gICAgcGl4ZWxfcmVkdWNpbmdfZmFjdG9yOiBudW1iZXI7XG4gICAgcGl4ZWxfaXNfcmVjdDogYm9vbGVhbjtcbiAgICBncmF2aXR5X3dlbGw6IHtcbiAgICAgICAgeDogbnVtYmVyO1xuICAgICAgICB5OiBudW1iZXI7XG4gICAgICAgIHBvd2VyOiBudW1iZXI7XG4gICAgICAgIGVwc2lsb246IG51bWJlcjtcbiAgICAgICAgZ3Jhdml0eTogbnVtYmVyO1xuICAgIH07XG4gICAgYW5pbWF0aW9uOiB7XG4gICAgICAgIGFuaW1hdGlvbl9rZXk6IHN0cmluZztcbiAgICAgICAgZnJhbWVfcmF0ZTogbnVtYmVyO1xuICAgICAgICBsb29wOiBib29sZWFuO1xuICAgIH07XG59O1xuXG5leHBvcnQgY2xhc3MgQmF0dGxlQW5pbWF0aW9uIHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6IEdvbGRlblN1bjtcbiAgICBwdWJsaWMga2V5X25hbWU6IHN0cmluZztcbiAgICBwdWJsaWMgc3ByaXRlc19rZXlzOiB7XG4gICAgICAgIGtleV9uYW1lOiBzdHJpbmc7XG4gICAgICAgIHBlcl90YXJnZXQ6IGJvb2xlYW47XG4gICAgICAgIHBvc2l0aW9uOiBzdHJpbmc7XG4gICAgICAgIGNvdW50OiBudW1iZXI7XG4gICAgICAgIHRyYWlsczogYm9vbGVhbjtcbiAgICAgICAgdHJhaWxzX21vZGU6IHN0cmluZztcbiAgICAgICAgdHJhaWxfZnJhbWVfZGlmZjogbnVtYmVyO1xuICAgIH1bXTtcbiAgICBwdWJsaWMgeF9zZXF1ZW5jZTogRGVmYXVsdEF0dHJbXSA9IFtdO1xuICAgIHB1YmxpYyB5X3NlcXVlbmNlOiBEZWZhdWx0QXR0cltdID0gW107XG4gICAgcHVibGljIHhfZWxsaXBzZV9heGlzX2ZhY3Rvcl9zZXF1ZW5jZTogRGVmYXVsdEF0dHJbXSA9IFtdO1xuICAgIHB1YmxpYyB5X2VsbGlwc2VfYXhpc19mYWN0b3Jfc2VxdWVuY2U6IERlZmF1bHRBdHRyW10gPSBbXTtcbiAgICBwdWJsaWMgeF9zY2FsZV9zZXF1ZW5jZTogRGVmYXVsdEF0dHJbXSA9IFtdO1xuICAgIHB1YmxpYyB5X3NjYWxlX3NlcXVlbmNlOiBEZWZhdWx0QXR0cltdID0gW107XG4gICAgcHVibGljIHhfYW5jaG9yX3NlcXVlbmNlOiBEZWZhdWx0QXR0cltdID0gW107XG4gICAgcHVibGljIHlfYW5jaG9yX3NlcXVlbmNlOiBEZWZhdWx0QXR0cltdID0gW107XG4gICAgcHVibGljIGFscGhhX3NlcXVlbmNlOiBEZWZhdWx0QXR0cltdID0gW107XG4gICAgcHVibGljIHJvdGF0aW9uX3NlcXVlbmNlOiBEZWZhdWx0QXR0cltdID0gW107XG4gICAgcHVibGljIHN0YWdlX2FuZ2xlX3NlcXVlbmNlOiBEZWZhdWx0QXR0cltdID0gW107XG4gICAgcHVibGljIGh1ZV9hbmdsZV9zZXF1ZW5jZTogRGVmYXVsdEF0dHJbXSA9IFtdO1xuICAgIHB1YmxpYyB0aW50X3NlcXVlbmNlOiB7XG4gICAgICAgIHN0YXJ0X2RlbGF5OiBudW1iZXIgfCBudW1iZXJbXTtcbiAgICAgICAgc3ByaXRlX2luZGV4OiBzdHJpbmcgfCBudW1iZXIgfCBudW1iZXJbXTtcbiAgICAgICAgdmFsdWU6IFtyOiBudW1iZXIsIGc6IG51bWJlciwgYjogbnVtYmVyXTtcbiAgICB9W10gPSBbXTtcbiAgICBwdWJsaWMgZ3JheXNjYWxlX3NlcXVlbmNlOiBEZWZhdWx0QXR0cltdID0gW107XG4gICAgcHVibGljIGNvbG9yaXplX3NlcXVlbmNlOiB7XG4gICAgICAgIHN0YXJ0X2RlbGF5OiBudW1iZXIgfCBudW1iZXJbXTtcbiAgICAgICAgc3ByaXRlX2luZGV4OiBzdHJpbmcgfCBudW1iZXIgfCBudW1iZXJbXTtcbiAgICAgICAgdmFsdWU6IG51bWJlcjtcbiAgICAgICAgY29sb3JpemVfaW50ZW5zaXR5OiBudW1iZXI7XG4gICAgfVtdID0gW107XG4gICAgcHVibGljIGN1c3RvbV9maWx0ZXJfc2VxdWVuY2U6IHtcbiAgICAgICAgc3RhcnRfZGVsYXk6IG51bWJlciB8IG51bWJlcltdO1xuICAgICAgICBzcHJpdGVfaW5kZXg6IHN0cmluZyB8IG51bWJlciB8IG51bWJlcltdO1xuICAgICAgICBmaWx0ZXI6IHN0cmluZztcbiAgICAgICAgdmFsdWU6IGFueTtcbiAgICB9W10gPSBbXTtcbiAgICBwdWJsaWMgcGxheV9zZXF1ZW5jZToge1xuICAgICAgICBzdGFydF9kZWxheTogbnVtYmVyIHwgbnVtYmVyW107XG4gICAgICAgIHNwcml0ZV9pbmRleDogc3RyaW5nIHwgbnVtYmVyIHwgbnVtYmVyW107XG4gICAgICAgIHJldmVyc2U6IGJvb2xlYW47XG4gICAgICAgIGZyYW1lX3JhdGU6IG51bWJlcjtcbiAgICAgICAgcmVwZWF0OiBib29sZWFuO1xuICAgICAgICBhbmltYXRpb25fa2V5OiBzdHJpbmc7XG4gICAgICAgIHdhaXQ6IGJvb2xlYW47XG4gICAgICAgIGhpZGVfb25fY29tcGxldGU6IGJvb2xlYW47XG4gICAgfVtdID0gW107XG4gICAgcHVibGljIHNldF9mcmFtZV9zZXF1ZW5jZTogYW55W10gPSBbXTtcbiAgICBwdWJsaWMgYmxlbmRfbW9kZV9zZXF1ZW5jZToge1xuICAgICAgICBzdGFydF9kZWxheTogbnVtYmVyIHwgbnVtYmVyW107XG4gICAgICAgIHNwcml0ZV9pbmRleDogc3RyaW5nIHwgbnVtYmVyIHwgbnVtYmVyW107XG4gICAgICAgIG1vZGU6IHN0cmluZztcbiAgICB9W10gPSBbXTtcbiAgICBwdWJsaWMgcGFydGljbGVzX3NlcXVlbmNlOiB7XG4gICAgICAgIGRhdGE6IHtbZW1pdHRlcl9kYXRhX2tleTogc3RyaW5nXTogUGFydGljbGVPYmplY3R9O1xuICAgICAgICB6b25lczoge1t6b25lX2tleTogc3RyaW5nXTogUGFydGljbGVzWm9uZX07XG4gICAgICAgIGVtaXR0ZXJzOiBFbWl0dGVyW107XG4gICAgICAgIGVtaXNzaW9uX2ZpbmlzaDogbnVtYmVyO1xuICAgIH1bXTtcbiAgICBwdWJsaWMgaXNfcGFydHlfYW5pbWF0aW9uOiBib29sZWFuO1xuICAgIHB1YmxpYyBydW5uaW5nOiBib29sZWFuO1xuICAgIHB1YmxpYyBzcHJpdGVzOiBQaGFzZXIuU3ByaXRlW107XG4gICAgcHVibGljIHNwcml0ZXNfcHJldl9wcm9wZXJ0aWVzOiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IHtcbiAgICAgICAgICAgIFtwcm9wZXJ0eTogc3RyaW5nXTogYW55O1xuICAgICAgICB9O1xuICAgIH07XG4gICAgcHVibGljIHN0YWdlX3ByZXZfdmFsdWU6IG51bWJlcjtcbiAgICBwdWJsaWMgeDA6IG51bWJlcjtcbiAgICBwdWJsaWMgeTA6IG51bWJlcjtcbiAgICBwdWJsaWMgY2FzdGVyX3Nwcml0ZTogUGhhc2VyLlNwcml0ZTtcbiAgICBwdWJsaWMgdGFyZ2V0c19zcHJpdGVzOiBQaGFzZXIuU3ByaXRlW107XG4gICAgcHVibGljIGJhY2tncm91bmRfc3ByaXRlczogUGhhc2VyLlNwcml0ZVtdO1xuICAgIHB1YmxpYyBncm91cF9jYXN0ZXI6IFBoYXNlci5Hcm91cDtcbiAgICBwdWJsaWMgZ3JvdXBfZW5lbXk6IFBoYXNlci5Hcm91cDtcbiAgICBwdWJsaWMgc3VwZXJfZ3JvdXA6IFBoYXNlci5Hcm91cDtcbiAgICBwdWJsaWMgYmFja19ncm91cDogUGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyBmcm9udF9ncm91cDogUGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyBzdGFnZV9jYW1lcmE6IENhbWVyYUFuZ2xlO1xuICAgIHB1YmxpYyB0cmFpbHNfb2JqczogKFBoYXNlci5SZW5kZXJUZXh0dXJlIHwgUGhhc2VyLlNwcml0ZSlbXTtcbiAgICBwdWJsaWMgY2FzdGVyX2ZpbHRlcjogYW55O1xuICAgIHB1YmxpYyB0YXJnZXRzX2ZpbHRlcjogYW55O1xuICAgIHB1YmxpYyBiYWNrZ3JvdW5kX2ZpbHRlcjogYW55O1xuICAgIHB1YmxpYyBzcHJpdGVzX2ZpbHRlcnM6IGFueVtdO1xuICAgIHB1YmxpYyBwcm9taXNlczogUHJvbWlzZTxhbnk+W107XG4gICAgcHVibGljIHJlbmRlcl9jYWxsYmFja3M6IHtbY2FsbGJhY2tfa2V5OiBzdHJpbmddOiBGdW5jdGlvbn07XG5cbiAgICAvL3R3ZWVuIHR5cGUgY2FuIGJlICdpbml0aWFsJyBmb3IgZmlyc3QgcG9zaXRpb25cbiAgICAvL3Nwcml0ZV9pbmRleDogXCJ0YXJnZXRzXCIgaXMgdGhlIHRhcmdldCwgXCJjYXN0ZXJcIiBpcyB0aGUgY2FzdGVyLCBcImJhY2tncm91bmRcIiBpcyB0aGUgYmFja2dyb3VuZCBzcHJpdGUsIDAuLi5uIGlzIHRoZSBzcHJpdGVzX2tleV9uYW1lcyBpbmRleFxuICAgIC8vcHJvcGVydHkgXCJ0b1wiIHZhbHVlIGNhbiBiZSBcInRhcmdldFwiIG9yIGFuIGFjdHVhbCB2YWx1ZS4gSW4gdGhlIGNhc2Ugb2YgXCJ0YXJnZXRcIiBpcyB0aGUgdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdmFsdWUuIEluIHRoZSBjYXNlIG9mIHVzaW5nIFwidGFyZ2V0XCIsIGEgXCJzaGlmdFwiIHByb3BlcnR5IGlzIGF2YWlsYWJsZSB0byBiZSBhZGRlZCB0byB0aGUgcmVzdWx0aW5nIHZhbHVlXG4gICAgLy92YWx1ZXMgaW4gcmFkIGNhbiBoYXZlIFwiZGlyZWN0aW9uXCIgc2V0IHRvIFwiY2xvY2t3aXNlXCIsIFwiY291bnRlcl9jbG9ja3dpc2VcIiBvciBcImNsb3Nlc3RcIiBpZiBcImFic29sdXRlXCIgaXMgdHJ1ZVxuICAgIC8vaW4gc3ByaXRlX2tleXMsIHBvc2l0aW9uIGNhbiBiZTogXCJiZXR3ZWVuXCIsIFwib3ZlclwiIG9yIFwiYmVoaW5kXCJcbiAgICAvL1wiZHVyYXRpb25cIiBzZXQgdG8gXCJpbnN0YW50bHlcIiBtdXN0IGhhdmUgdGhlIFwic3RhcnRfZGVsYXlcIiB2YWx1ZSBzZXQgYXMgYWJzb2x1dGVcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgZ2FtZSxcbiAgICAgICAgZGF0YSxcbiAgICAgICAga2V5X25hbWUsXG4gICAgICAgIHNwcml0ZXNfa2V5cywgLy97a2V5X25hbWU6IHN0cmluZywgcGVyX3RhcmdldDogYm9vbCwgcG9zaXRpb246IHZhbHVlfVxuICAgICAgICB4X3NlcXVlbmNlLCAvL3tzdGFydF9kZWxheTogdmFsdWUsIHNwcml0ZV9pbmRleDogaW5kZXgsIHRvOiB2YWx1ZSwgaXNfYWJzb2x1dGU6IGJvb2wsIHR3ZWVuOiB0eXBlLCB5b3lvOiBib29sLCBkdXJhdGlvbjogdmFsdWUsIHNoaWZ0OiB2YWx1ZX1cbiAgICAgICAgeV9zZXF1ZW5jZSwgLy97c3RhcnRfZGVsYXk6IHZhbHVlLCBzcHJpdGVfaW5kZXg6IGluZGV4LCB0bzogdmFsdWUsIGlzX2Fic29sdXRlOiBib29sLCB0d2VlbjogdHlwZSwgeW95bzogYm9vbCwgZHVyYXRpb246IHZhbHVlLCBzaGlmdDogdmFsdWV9XG4gICAgICAgIHhfZWxsaXBzZV9heGlzX2ZhY3Rvcl9zZXF1ZW5jZSwgLy97c3RhcnRfZGVsYXk6IHZhbHVlLCBzcHJpdGVfaW5kZXg6IGluZGV4LCB0bzogdmFsdWUsIGlzX2Fic29sdXRlOiBib29sLCB0d2VlbjogdHlwZSwgeW95bzogYm9vbCwgZHVyYXRpb246IHZhbHVlLCBmb3JjZV9zdGFnZV91cGRhdGU6IGJvb2wsIHNoaWZ0OiB2YWx1ZX1cbiAgICAgICAgeV9lbGxpcHNlX2F4aXNfZmFjdG9yX3NlcXVlbmNlLCAvL3tzdGFydF9kZWxheTogdmFsdWUsIHNwcml0ZV9pbmRleDogaW5kZXgsIHRvOiB2YWx1ZSwgaXNfYWJzb2x1dGU6IGJvb2wsIHR3ZWVuOiB0eXBlLCB5b3lvOiBib29sLCBkdXJhdGlvbjogdmFsdWUsIGZvcmNlX3N0YWdlX3VwZGF0ZTogYm9vbCwgc2hpZnQ6IHZhbHVlfVxuICAgICAgICB4X3NjYWxlX3NlcXVlbmNlLCAvL3tzdGFydF9kZWxheTogdmFsdWUsIHNwcml0ZV9pbmRleDogaW5kZXgsIHRvOiB2YWx1ZSwgaXNfYWJzb2x1dGU6IGJvb2wsIHR3ZWVuOiB0eXBlLCB5b3lvOiBib29sLCBkdXJhdGlvbjogdmFsdWUsIHNoaWZ0OiB2YWx1ZX1cbiAgICAgICAgeV9zY2FsZV9zZXF1ZW5jZSwgLy97c3RhcnRfZGVsYXk6IHZhbHVlLCBzcHJpdGVfaW5kZXg6IGluZGV4LCB0bzogdmFsdWUsIGlzX2Fic29sdXRlOiBib29sLCB0d2VlbjogdHlwZSwgeW95bzogYm9vbCwgZHVyYXRpb246IHZhbHVlLCBzaGlmdDogdmFsdWV9XG4gICAgICAgIHhfYW5jaG9yX3NlcXVlbmNlLCAvL3tzdGFydF9kZWxheTogdmFsdWUsIHNwcml0ZV9pbmRleDogaW5kZXgsIHRvOiB2YWx1ZSwgaXNfYWJzb2x1dGU6IGJvb2wsIHR3ZWVuOiB0eXBlLCB5b3lvOiBib29sLCBkdXJhdGlvbjogdmFsdWUsIHNoaWZ0OiB2YWx1ZX1cbiAgICAgICAgeV9hbmNob3Jfc2VxdWVuY2UsIC8ve3N0YXJ0X2RlbGF5OiB2YWx1ZSwgc3ByaXRlX2luZGV4OiBpbmRleCwgdG86IHZhbHVlLCBpc19hYnNvbHV0ZTogYm9vbCwgdHdlZW46IHR5cGUsIHlveW86IGJvb2wsIGR1cmF0aW9uOiB2YWx1ZSwgc2hpZnQ6IHZhbHVlfVxuICAgICAgICBhbHBoYV9zZXF1ZW5jZSwgLy97c3RhcnRfZGVsYXk6IHZhbHVlLCBzcHJpdGVfaW5kZXg6IGluZGV4LCB0bzogdmFsdWUsIGlzX2Fic29sdXRlOiBib29sLCB0d2VlbjogdHlwZSwgeW95bzogYm9vbCwgZHVyYXRpb246IHZhbHVlLCBzaGlmdDogdmFsdWV9XG4gICAgICAgIHJvdGF0aW9uX3NlcXVlbmNlLCAvL3tzdGFydF9kZWxheTogdmFsdWUsIHNwcml0ZV9pbmRleDogaW5kZXgsIHRvOiB2YWx1ZSwgaXNfYWJzb2x1dGU6IGJvb2wsIHR3ZWVuOiB0eXBlLCB5b3lvOiBib29sLCBkdXJhdGlvbjogdmFsdWUsIGRpcmVjdGlvbjogdmFsdWUsIHNoaWZ0OiB2YWx1ZX1cbiAgICAgICAgc3RhZ2VfYW5nbGVfc2VxdWVuY2UsIC8ve3N0YXJ0X2RlbGF5OiB2YWx1ZSwgdG86IHZhbHVlLCBpc19hYnNvbHV0ZTogYm9vbCwgdHdlZW46IHR5cGUsIGR1cmF0aW9uOiB2YWx1ZSwgZGlyZWN0aW9uOiB2YWx1ZX1cbiAgICAgICAgaHVlX2FuZ2xlX3NlcXVlbmNlLCAvL3tzdGFydF9kZWxheTogdmFsdWUsIHNwcml0ZV9pbmRleDogaW5kZXgsIHRvOiB2YWx1ZSwgaXNfYWJzb2x1dGU6IGJvb2wsIHR3ZWVuOiB0eXBlLCB5b3lvOiBib29sLCBkdXJhdGlvbjogdmFsdWUsIGRpcmVjdGlvbjogdmFsdWUsIHNoaWZ0OiB2YWx1ZX1cbiAgICAgICAgdGludF9zZXF1ZW5jZSwgLy97c3RhcnRfZGVsYXk6IHZhbHVlLCBzcHJpdGVfaW5kZXg6IGluZGV4LCB2YWx1ZTogJXJnYiBhcnJheX1cbiAgICAgICAgZ3JheXNjYWxlX3NlcXVlbmNlLCAvL3tzdGFydF9kZWxheTogdmFsdWUsIHNwcml0ZV9pbmRleDogaW5kZXgsIHRvOiB2YWx1ZSwgaXNfYWJzb2x1dGU6IGJvb2wsIHR3ZWVuOiB0eXBlLCB5b3lvOiBib29sLCBkdXJhdGlvbjogdmFsdWUsIHNoaWZ0OiB2YWx1ZX1cbiAgICAgICAgY29sb3JpemVfc2VxdWVuY2UsIC8ve3N0YXJ0X2RlbGF5OiB2YWx1ZSwgc3ByaXRlX2luZGV4OiBpbmRleCwgdmFsdWU6IHZhbHVlLCBjb2xvcml6ZV9pbnRlbnNpdHk6IHZhbHVlfVxuICAgICAgICBjdXN0b21fZmlsdGVyX3NlcXVlbmNlLCAvL3tzdGFydF9kZWxheTogdmFsdWUsIHNwcml0ZV9pbmRleDogaW5kZXgsIGZpbHRlcjoga2V5LCB2YWx1ZTogdmFsdWV9XG4gICAgICAgIHBsYXlfc2VxdWVuY2UsIC8ve3N0YXJ0X2RlbGF5OiB2YWx1ZSwgc3ByaXRlX2luZGV4OiBpbmRleCwgcmV2ZXJzZTogYm9vbCwgZnJhbWVfcmF0ZTogdmFsdWUsIHJlcGVhdDogYm9vbCwgYW5pbWF0aW9uX2tleToga2V5LCB3YWl0OiBib29sLCBoaWRlX29uX2NvbXBsZXRlOiBib29sfVxuICAgICAgICBzZXRfZnJhbWVfc2VxdWVuY2UsIC8ve3N0YXJ0X2RlbGF5OiB2YWx1ZSwgZnJhbWU6IHN0cmluZywgc3ByaXRlX2luZGV4OiBpbmRleH1cbiAgICAgICAgYmxlbmRfbW9kZV9zZXF1ZW5jZSwgLy97c3RhcnRfZGVsYXk6IHZhbHVlLCBtb2RlOiB0eXBlLCBzcHJpdGVfaW5kZXg6IGluZGV4fVxuICAgICAgICBwYXJ0aWNsZXNfc2VxdWVuY2UsXG4gICAgICAgIGlzX3BhcnR5X2FuaW1hdGlvblxuICAgICkge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLmtleV9uYW1lID0ga2V5X25hbWU7XG4gICAgICAgIHRoaXMuc3ByaXRlc19rZXlzID0gc3ByaXRlc19rZXlzO1xuICAgICAgICB0aGlzLnhfc2VxdWVuY2UgPSB4X3NlcXVlbmNlID09PSB1bmRlZmluZWQgPyBbXSA6IHhfc2VxdWVuY2U7XG4gICAgICAgIHRoaXMueV9zZXF1ZW5jZSA9IHlfc2VxdWVuY2UgPT09IHVuZGVmaW5lZCA/IFtdIDogeV9zZXF1ZW5jZTtcbiAgICAgICAgdGhpcy54X2VsbGlwc2VfYXhpc19mYWN0b3Jfc2VxdWVuY2UgPVxuICAgICAgICAgICAgeF9lbGxpcHNlX2F4aXNfZmFjdG9yX3NlcXVlbmNlID09PSB1bmRlZmluZWQgPyBbXSA6IHhfZWxsaXBzZV9heGlzX2ZhY3Rvcl9zZXF1ZW5jZTtcbiAgICAgICAgdGhpcy55X2VsbGlwc2VfYXhpc19mYWN0b3Jfc2VxdWVuY2UgPVxuICAgICAgICAgICAgeV9lbGxpcHNlX2F4aXNfZmFjdG9yX3NlcXVlbmNlID09PSB1bmRlZmluZWQgPyBbXSA6IHlfZWxsaXBzZV9heGlzX2ZhY3Rvcl9zZXF1ZW5jZTtcbiAgICAgICAgdGhpcy54X3NjYWxlX3NlcXVlbmNlID0geF9zY2FsZV9zZXF1ZW5jZSA9PT0gdW5kZWZpbmVkID8gW10gOiB4X3NjYWxlX3NlcXVlbmNlO1xuICAgICAgICB0aGlzLnlfc2NhbGVfc2VxdWVuY2UgPSB5X3NjYWxlX3NlcXVlbmNlID09PSB1bmRlZmluZWQgPyBbXSA6IHlfc2NhbGVfc2VxdWVuY2U7XG4gICAgICAgIHRoaXMueF9hbmNob3Jfc2VxdWVuY2UgPSB4X2FuY2hvcl9zZXF1ZW5jZSA9PT0gdW5kZWZpbmVkID8gW10gOiB4X2FuY2hvcl9zZXF1ZW5jZTtcbiAgICAgICAgdGhpcy55X2FuY2hvcl9zZXF1ZW5jZSA9IHlfYW5jaG9yX3NlcXVlbmNlID09PSB1bmRlZmluZWQgPyBbXSA6IHlfYW5jaG9yX3NlcXVlbmNlO1xuICAgICAgICB0aGlzLmFscGhhX3NlcXVlbmNlID0gYWxwaGFfc2VxdWVuY2UgPT09IHVuZGVmaW5lZCA/IFtdIDogYWxwaGFfc2VxdWVuY2U7XG4gICAgICAgIHRoaXMucm90YXRpb25fc2VxdWVuY2UgPSByb3RhdGlvbl9zZXF1ZW5jZSA9PT0gdW5kZWZpbmVkID8gW10gOiByb3RhdGlvbl9zZXF1ZW5jZTtcbiAgICAgICAgdGhpcy5zdGFnZV9hbmdsZV9zZXF1ZW5jZSA9IHN0YWdlX2FuZ2xlX3NlcXVlbmNlID09PSB1bmRlZmluZWQgPyBbXSA6IHN0YWdlX2FuZ2xlX3NlcXVlbmNlO1xuICAgICAgICB0aGlzLmh1ZV9hbmdsZV9zZXF1ZW5jZSA9IGh1ZV9hbmdsZV9zZXF1ZW5jZSA9PT0gdW5kZWZpbmVkID8gW10gOiBodWVfYW5nbGVfc2VxdWVuY2U7XG4gICAgICAgIHRoaXMudGludF9zZXF1ZW5jZSA9IHRpbnRfc2VxdWVuY2UgPT09IHVuZGVmaW5lZCA/IFtdIDogdGludF9zZXF1ZW5jZTtcbiAgICAgICAgdGhpcy5ncmF5c2NhbGVfc2VxdWVuY2UgPSBncmF5c2NhbGVfc2VxdWVuY2UgPT09IHVuZGVmaW5lZCA/IFtdIDogZ3JheXNjYWxlX3NlcXVlbmNlO1xuICAgICAgICB0aGlzLmNvbG9yaXplX3NlcXVlbmNlID0gY29sb3JpemVfc2VxdWVuY2UgPT09IHVuZGVmaW5lZCA/IFtdIDogY29sb3JpemVfc2VxdWVuY2U7XG4gICAgICAgIHRoaXMuY3VzdG9tX2ZpbHRlcl9zZXF1ZW5jZSA9IGN1c3RvbV9maWx0ZXJfc2VxdWVuY2UgPT09IHVuZGVmaW5lZCA/IFtdIDogY3VzdG9tX2ZpbHRlcl9zZXF1ZW5jZTtcbiAgICAgICAgdGhpcy5wbGF5X3NlcXVlbmNlID0gcGxheV9zZXF1ZW5jZSA9PT0gdW5kZWZpbmVkID8gW10gOiBwbGF5X3NlcXVlbmNlO1xuICAgICAgICB0aGlzLnNldF9mcmFtZV9zZXF1ZW5jZSA9IHNldF9mcmFtZV9zZXF1ZW5jZSA9PT0gdW5kZWZpbmVkID8gW10gOiBzZXRfZnJhbWVfc2VxdWVuY2U7XG4gICAgICAgIHRoaXMuYmxlbmRfbW9kZV9zZXF1ZW5jZSA9IGJsZW5kX21vZGVfc2VxdWVuY2UgPT09IHVuZGVmaW5lZCA/IFtdIDogYmxlbmRfbW9kZV9zZXF1ZW5jZTtcbiAgICAgICAgdGhpcy5wYXJ0aWNsZXNfc2VxdWVuY2UgPSBwYXJ0aWNsZXNfc2VxdWVuY2UgPT09IHVuZGVmaW5lZCA/IFtdIDogcGFydGljbGVzX3NlcXVlbmNlO1xuICAgICAgICB0aGlzLmlzX3BhcnR5X2FuaW1hdGlvbiA9IGlzX3BhcnR5X2FuaW1hdGlvbjtcbiAgICAgICAgdGhpcy5ydW5uaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmVuZGVyX2NhbGxiYWNrcyA9IHt9O1xuICAgIH1cblxuICAgIGluaXRpYWxpemUoXG4gICAgICAgIHNwcml0ZV9rZXksXG4gICAgICAgIGNhc3Rlcl9zcHJpdGUsXG4gICAgICAgIHRhcmdldHNfc3ByaXRlcyxcbiAgICAgICAgZ3JvdXBfY2FzdGVyLFxuICAgICAgICBncm91cF9lbmVteSxcbiAgICAgICAgc3VwZXJfZ3JvdXAsXG4gICAgICAgIHN0YWdlX2NhbWVyYSxcbiAgICAgICAgYmFja2dyb3VuZF9zcHJpdGVzXG4gICAgKSB7XG4gICAgICAgIHRoaXMuc3ByaXRlcyA9IFtdO1xuICAgICAgICB0aGlzLnNwcml0ZXNfcHJldl9wcm9wZXJ0aWVzID0ge307XG4gICAgICAgIHRoaXMuc3RhZ2VfcHJldl92YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy54MCA9IHRoaXMuZ2FtZS5jYW1lcmEueDtcbiAgICAgICAgdGhpcy55MCA9IHRoaXMuZ2FtZS5jYW1lcmEueTtcbiAgICAgICAgdGhpcy5jYXN0ZXJfc3ByaXRlID0gY2FzdGVyX3Nwcml0ZTtcbiAgICAgICAgdGhpcy50YXJnZXRzX3Nwcml0ZXMgPSB0YXJnZXRzX3Nwcml0ZXM7XG4gICAgICAgIHRoaXMuYmFja2dyb3VuZF9zcHJpdGVzID0gYmFja2dyb3VuZF9zcHJpdGVzO1xuICAgICAgICB0aGlzLmdyb3VwX2Nhc3RlciA9IGdyb3VwX2Nhc3RlcjtcbiAgICAgICAgdGhpcy5ncm91cF9lbmVteSA9IGdyb3VwX2VuZW15O1xuICAgICAgICB0aGlzLnN1cGVyX2dyb3VwID0gc3VwZXJfZ3JvdXA7XG4gICAgICAgIHRoaXMuc3RhZ2VfY2FtZXJhID0gc3RhZ2VfY2FtZXJhO1xuICAgICAgICB0aGlzLnRyYWlsc19vYmpzID0gW107XG4gICAgICAgIGlmIChzdXBlcl9ncm91cC5nZXRDaGlsZEluZGV4KGdyb3VwX2Nhc3RlcikgPCBzdXBlcl9ncm91cC5nZXRDaGlsZEluZGV4KGdyb3VwX2VuZW15KSkge1xuICAgICAgICAgICAgdGhpcy5iYWNrX2dyb3VwID0gZ3JvdXBfY2FzdGVyO1xuICAgICAgICAgICAgdGhpcy5mcm9udF9ncm91cCA9IGdyb3VwX2VuZW15O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5iYWNrX2dyb3VwID0gZ3JvdXBfZW5lbXk7XG4gICAgICAgICAgICB0aGlzLmZyb250X2dyb3VwID0gZ3JvdXBfY2FzdGVyO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zcHJpdGVzX2tleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHNwcml0ZV9pbmZvID0gdGhpcy5zcHJpdGVzX2tleXNbaV07XG4gICAgICAgICAgICBsZXQgdHJhaWxzX2luZm87XG4gICAgICAgICAgICBpZiAoc3ByaXRlX2luZm8udHJhaWxzKSB7XG4gICAgICAgICAgICAgICAgdHJhaWxzX2luZm8gPSB0aGlzLmluaXRpYWxpemVfdHJhaWxfdGV4dHVyZXMoc3ByaXRlX2luZm8udHJhaWxfZnJhbWVfZGlmZiwgc3ByaXRlX2luZm8udHJhaWxzX21vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzcHJpdGVfaW5mby5wZXJfdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY291bnQgPSBzcHJpdGVfaW5mby5jb3VudCA/IHNwcml0ZV9pbmZvLmNvdW50IDogMTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvdW50OyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHN5X3Nwcml0ZSA9IHRoaXMuZ2FtZS5hZGQuc3ByaXRlKHRoaXMueDAsIHRoaXMueTAsIHNwcml0ZV9rZXkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3ByaXRlX2luZm8ucG9zaXRpb24gPT09IFwib3ZlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdXBlcl9ncm91cC5hZGRDaGlsZChwc3lfc3ByaXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzcHJpdGVfaW5mby5wb3NpdGlvbiA9PT0gXCJiZXR3ZWVuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1cGVyX2dyb3VwLmFkZENoaWxkQXQocHN5X3Nwcml0ZSwgc3VwZXJfZ3JvdXAuZ2V0Q2hpbGRJbmRleCh0aGlzLmZyb250X2dyb3VwKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3ByaXRlX2luZm8ucG9zaXRpb24gPT09IFwiYmVoaW5kXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1cGVyX2dyb3VwLmFkZENoaWxkQXQocHN5X3Nwcml0ZSwgc3VwZXJfZ3JvdXAuZ2V0Q2hpbGRJbmRleCh0aGlzLmJhY2tfZ3JvdXApKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmcmFtZXMgPSBQaGFzZXIuQW5pbWF0aW9uLmdlbmVyYXRlRnJhbWVOYW1lcyhcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwcml0ZV9pbmZvLmtleV9uYW1lICsgXCIvXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHN5X3Nwcml0ZS5hbmltYXRpb25zLmZyYW1lVG90YWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgM1xuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBwc3lfc3ByaXRlLmFuaW1hdGlvbnMuYWRkKHNwcml0ZV9pbmZvLmtleV9uYW1lLCBmcmFtZXMpO1xuICAgICAgICAgICAgICAgICAgICBwc3lfc3ByaXRlLmFuaW1hdGlvbnMuZnJhbWVOYW1lID0gZnJhbWVzWzBdO1xuICAgICAgICAgICAgICAgICAgICBwc3lfc3ByaXRlLmRhdGEuYmF0dGxlX2luZGV4ID0gdGhpcy5zcHJpdGVzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgcHN5X3Nwcml0ZS5kYXRhLnRyYWlscyA9IHNwcml0ZV9pbmZvLnRyYWlscztcbiAgICAgICAgICAgICAgICAgICAgcHN5X3Nwcml0ZS5kYXRhLnRyYWlsc19pbmZvID0gdHJhaWxzX2luZm87XG4gICAgICAgICAgICAgICAgICAgIGlmIChzcHJpdGVfaW5mby50cmFpbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBzeV9zcHJpdGUuZGF0YS54X2hpc3RvcnkgPSBuZXcgQXJyYXkodHJhaWxzX2luZm8uZnJhbWVfZGlmZiArIDEpLmZpbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHN5X3Nwcml0ZS54IC0gdGhpcy5nYW1lLmNhbWVyYS54XG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHN5X3Nwcml0ZS5kYXRhLnlfaGlzdG9yeSA9IG5ldyBBcnJheSh0cmFpbHNfaW5mby5mcmFtZV9kaWZmICsgMSkuZmlsbChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwc3lfc3ByaXRlLnkgLSB0aGlzLmdhbWUuY2FtZXJhLnlcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zcHJpdGVzLnB1c2gocHN5X3Nwcml0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0X2ZpbHRlcnMoKTtcbiAgICB9XG5cbiAgICBpbml0aWFsaXplX3RyYWlsX3RleHR1cmVzKGZyYW1lX2RpZmYsIGJsZW5kX21vZGUpIHtcbiAgICAgICAgc3dpdGNoIChibGVuZF9tb2RlKSB7XG4gICAgICAgICAgICBjYXNlIFwic2NyZWVuXCI6XG4gICAgICAgICAgICAgICAgYmxlbmRfbW9kZSA9IFBJWEkuYmxlbmRNb2Rlcy5TQ1JFRU47XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwibm9ybWFsXCI6XG4gICAgICAgICAgICAgICAgYmxlbmRfbW9kZSA9IFBJWEkuYmxlbmRNb2Rlcy5OT1JNQUw7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdHJhaWxfdGV4dHVyZSA9IHRoaXMuZ2FtZS5hZGQucmVuZGVyVGV4dHVyZShudW1iZXJzLkdBTUVfV0lEVEgsIG51bWJlcnMuR0FNRV9IRUlHSFQpO1xuICAgICAgICBsZXQgdHJhaWxfc3ByaXRlID0gdGhpcy5nYW1lLmFkZC5zcHJpdGUodGhpcy5nYW1lLmNhbWVyYS54LCB0aGlzLmdhbWUuY2FtZXJhLnksIHRyYWlsX3RleHR1cmUpO1xuICAgICAgICB0cmFpbF9zcHJpdGUuYmxlbmRNb2RlID0gYmxlbmRfbW9kZTtcbiAgICAgICAgdHJhaWxfc3ByaXRlLmFscGhhID0gMC42O1xuICAgICAgICBjb25zdCB0cmFpbF90ZXh0dXJlXzIgPSB0aGlzLmdhbWUuYWRkLnJlbmRlclRleHR1cmUobnVtYmVycy5HQU1FX1dJRFRILCBudW1iZXJzLkdBTUVfSEVJR0hUKTtcbiAgICAgICAgbGV0IHRyYWlsX3Nwcml0ZV8yID0gdGhpcy5nYW1lLmFkZC5zcHJpdGUodGhpcy5nYW1lLmNhbWVyYS54LCB0aGlzLmdhbWUuY2FtZXJhLnksIHRyYWlsX3RleHR1cmVfMik7XG4gICAgICAgIHRyYWlsX3Nwcml0ZV8yLmJsZW5kTW9kZSA9IGJsZW5kX21vZGU7XG4gICAgICAgIHRyYWlsX3Nwcml0ZV8yLmFscGhhID0gMC40O1xuICAgICAgICB0aGlzLnRyYWlsc19vYmpzID0gdGhpcy50cmFpbHNfb2Jqcy5jb25jYXQodHJhaWxfdGV4dHVyZSwgdHJhaWxfdGV4dHVyZV8yLCB0cmFpbF9zcHJpdGUsIHRyYWlsX3Nwcml0ZV8yKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRleHR1cmVfMTogdHJhaWxfdGV4dHVyZSxcbiAgICAgICAgICAgIHRleHR1cmVfMjogdHJhaWxfdGV4dHVyZV8yLFxuICAgICAgICAgICAgZnJhbWVfZGlmZjogZnJhbWVfZGlmZixcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBzZXRfZmlsdGVycygpIHtcbiAgICAgICAgdGhpcy5jYXN0ZXJfZmlsdGVyID0gdGhpcy5nYW1lLmFkZC5maWx0ZXIoXCJDb2xvckZpbHRlcnNcIik7XG4gICAgICAgIHRoaXMudGFyZ2V0c19maWx0ZXIgPSB0aGlzLmdhbWUuYWRkLmZpbHRlcihcIkNvbG9yRmlsdGVyc1wiKTtcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kX2ZpbHRlciA9IHRoaXMuZ2FtZS5hZGQuZmlsdGVyKFwiQ29sb3JGaWx0ZXJzXCIpO1xuICAgICAgICB0aGlzLnNwcml0ZXNfZmlsdGVycyA9IFtdO1xuICAgICAgICB0aGlzLmNhc3Rlcl9zcHJpdGUuZmlsdGVycyA9IFt0aGlzLmNhc3Rlcl9maWx0ZXJdO1xuICAgICAgICB0aGlzLnRhcmdldHNfc3ByaXRlcy5mb3JFYWNoKHNwcml0ZSA9PiB7XG4gICAgICAgICAgICBzcHJpdGUuZmlsdGVycyA9IFt0aGlzLnRhcmdldHNfZmlsdGVyXTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYmFja2dyb3VuZF9zcHJpdGVzLmZvckVhY2goc3ByaXRlID0+IHtcbiAgICAgICAgICAgIHNwcml0ZS5maWx0ZXJzID0gW3RoaXMuYmFja2dyb3VuZF9maWx0ZXJdO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zcHJpdGVzLmZvckVhY2goKHNwcml0ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlc19maWx0ZXJzLnB1c2godGhpcy5nYW1lLmFkZC5maWx0ZXIoXCJDb2xvckZpbHRlcnNcIikpO1xuICAgICAgICAgICAgc3ByaXRlLmZpbHRlcnMgPSBbdGhpcy5zcHJpdGVzX2ZpbHRlcnNbaW5kZXhdXTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcGxheShmaW5pc2hfY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5ydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5wcm9taXNlcyA9IFtdO1xuICAgICAgICB0aGlzLnBsYXlfbnVtYmVyX3Byb3BlcnR5X3NlcXVlbmNlKHRoaXMueF9zZXF1ZW5jZSwgXCJ4XCIpO1xuICAgICAgICB0aGlzLnBsYXlfbnVtYmVyX3Byb3BlcnR5X3NlcXVlbmNlKHRoaXMueV9zZXF1ZW5jZSwgXCJ5XCIpO1xuICAgICAgICB0aGlzLnBsYXlfbnVtYmVyX3Byb3BlcnR5X3NlcXVlbmNlKHRoaXMueF9lbGxpcHNlX2F4aXNfZmFjdG9yX3NlcXVlbmNlLCBcImVsbGlwc2VzX3NlbWlfbWFqb3JcIik7XG4gICAgICAgIHRoaXMucGxheV9udW1iZXJfcHJvcGVydHlfc2VxdWVuY2UodGhpcy55X2VsbGlwc2VfYXhpc19mYWN0b3Jfc2VxdWVuY2UsIFwiZWxsaXBzZXNfc2VtaV9taW5vclwiKTtcbiAgICAgICAgdGhpcy5wbGF5X251bWJlcl9wcm9wZXJ0eV9zZXF1ZW5jZSh0aGlzLmFscGhhX3NlcXVlbmNlLCBcImFscGhhXCIpO1xuICAgICAgICB0aGlzLnBsYXlfbnVtYmVyX3Byb3BlcnR5X3NlcXVlbmNlKHRoaXMucm90YXRpb25fc2VxdWVuY2UsIFwicm90YXRpb25cIik7XG4gICAgICAgIHRoaXMucGxheV9udW1iZXJfcHJvcGVydHlfc2VxdWVuY2UodGhpcy54X3NjYWxlX3NlcXVlbmNlLCBcInhcIiwgXCJzY2FsZVwiKTtcbiAgICAgICAgdGhpcy5wbGF5X251bWJlcl9wcm9wZXJ0eV9zZXF1ZW5jZSh0aGlzLnlfc2NhbGVfc2VxdWVuY2UsIFwieVwiLCBcInNjYWxlXCIpO1xuICAgICAgICB0aGlzLnBsYXlfbnVtYmVyX3Byb3BlcnR5X3NlcXVlbmNlKHRoaXMueF9hbmNob3Jfc2VxdWVuY2UsIFwieFwiLCBcImFuY2hvclwiKTtcbiAgICAgICAgdGhpcy5wbGF5X251bWJlcl9wcm9wZXJ0eV9zZXF1ZW5jZSh0aGlzLnlfYW5jaG9yX3NlcXVlbmNlLCBcInlcIiwgXCJhbmNob3JcIik7XG4gICAgICAgIHRoaXMucGxheV9udW1iZXJfcHJvcGVydHlfc2VxdWVuY2UodGhpcy5odWVfYW5nbGVfc2VxdWVuY2UsIFwiaHVlX2FkanVzdFwiLCBcImZpbHRlclwiKTtcbiAgICAgICAgdGhpcy5wbGF5X251bWJlcl9wcm9wZXJ0eV9zZXF1ZW5jZSh0aGlzLmdyYXlzY2FsZV9zZXF1ZW5jZSwgXCJncmF5XCIsIFwiZmlsdGVyXCIpO1xuICAgICAgICB0aGlzLnBsYXlfc3ByaXRlX3NlcXVlbmNlKCk7XG4gICAgICAgIHRoaXMucGxheV9ibGVuZF9tb2RlcygpO1xuICAgICAgICB0aGlzLnBsYXlfZmlsdGVyX3Byb3BlcnR5KHRoaXMudGludF9zZXF1ZW5jZSwgXCJ0aW50XCIpO1xuICAgICAgICB0aGlzLnBsYXlfZmlsdGVyX3Byb3BlcnR5KHRoaXMuY29sb3JpemVfc2VxdWVuY2UsIFwiY29sb3JpemVcIiwgXCJjb2xvcml6ZV9pbnRlbnNpdHlcIik7XG4gICAgICAgIHRoaXMucGxheV9maWx0ZXJfcHJvcGVydHkodGhpcy5jdXN0b21fZmlsdGVyX3NlcXVlbmNlKTtcbiAgICAgICAgdGhpcy5wbGF5X3N0YWdlX2FuZ2xlX3NlcXVlbmNlKCk7XG4gICAgICAgIHRoaXMucGxheV9wYXJ0aWNsZXMoKTtcbiAgICAgICAgdGhpcy51bm1vdW50X2FuaW1hdGlvbihmaW5pc2hfY2FsbGJhY2spO1xuICAgIH1cblxuICAgIHVubW91bnRfYW5pbWF0aW9uKGZpbmlzaF9jYWxsYmFjaykge1xuICAgICAgICBQcm9taXNlLmFsbCh0aGlzLnByb21pc2VzKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2FzdGVyX2ZpbHRlciA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnRhcmdldHNfZmlsdGVyID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZF9maWx0ZXIgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5zcHJpdGVzX2ZpbHRlcnMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuY2FzdGVyX3Nwcml0ZS5maWx0ZXJzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy50YXJnZXRzX3Nwcml0ZXMuZm9yRWFjaChzcHJpdGUgPT4ge1xuICAgICAgICAgICAgICAgIHNwcml0ZS5maWx0ZXJzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmRfc3ByaXRlcy5mb3JFYWNoKHNwcml0ZSA9PiB7XG4gICAgICAgICAgICAgICAgc3ByaXRlLmZpbHRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlcy5mb3JFYWNoKHNwcml0ZSA9PiB7XG4gICAgICAgICAgICAgICAgc3ByaXRlLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy50cmFpbHNfb2Jqcy5mb3JFYWNoKG9iaiA9PiB7XG4gICAgICAgICAgICAgICAgb2JqLmRlc3Ryb3kodHJ1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGZpbmlzaF9jYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZmluaXNoX2NhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldF9zcHJpdGVzKHNlcSwgaW5uZXJfcHJvcGVydHk/KSB7XG4gICAgICAgIGlmIChpbm5lcl9wcm9wZXJ0eSkge1xuICAgICAgICAgICAgaWYgKHNlcS5zcHJpdGVfaW5kZXggPT09IFwiYmFja2dyb3VuZFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlubmVyX3Byb3BlcnR5ID09PSBcImZpbHRlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbdGhpcy5iYWNrZ3JvdW5kX2ZpbHRlcl07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYmFja2dyb3VuZF9zcHJpdGVzLmZvckVhY2goc3ByaXRlID0+IHNwcml0ZVtpbm5lcl9wcm9wZXJ0eV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VxLnNwcml0ZV9pbmRleCA9PT0gXCJjYXN0ZXJcIikge1xuICAgICAgICAgICAgICAgIGlmIChpbm5lcl9wcm9wZXJ0eSA9PT0gXCJmaWx0ZXJcIikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3RoaXMuY2FzdGVyX2ZpbHRlcl07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0aGlzLmNhc3Rlcl9zcHJpdGVbaW5uZXJfcHJvcGVydHldXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNlcS5zcHJpdGVfaW5kZXggPT09IFwidGFyZ2V0c1wiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlubmVyX3Byb3BlcnR5ID09PSBcImZpbHRlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbdGhpcy50YXJnZXRzX2ZpbHRlcl07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0c19zcHJpdGVzLmZvckVhY2goc3ByaXRlID0+IHNwcml0ZVtpbm5lcl9wcm9wZXJ0eV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGlubmVyX3Byb3BlcnR5ID09PSBcImZpbHRlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNlcS5zcHJpdGVfaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VxLnNwcml0ZV9pbmRleC5tYXAoaW5kZXggPT4gdGhpcy5zcHJpdGVzX2ZpbHRlcnNbaW5kZXhdKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbdGhpcy5zcHJpdGVzX2ZpbHRlcnNbc2VxLnNwcml0ZV9pbmRleF1dO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2VxLnNwcml0ZV9pbmRleCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXEuc3ByaXRlX2luZGV4Lm1hcChpbmRleCA9PiB0aGlzLnNwcml0ZXNbaW5kZXhdW2lubmVyX3Byb3BlcnR5XSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3RoaXMuc3ByaXRlc1tzZXEuc3ByaXRlX2luZGV4XVtpbm5lcl9wcm9wZXJ0eV1dO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHNlcS5zcHJpdGVfaW5kZXggPT09IFwiYmFja2dyb3VuZFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYmFja2dyb3VuZF9zcHJpdGVzO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzZXEuc3ByaXRlX2luZGV4ID09PSBcImNhc3RlclwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFt0aGlzLmNhc3Rlcl9zcHJpdGVdO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzZXEuc3ByaXRlX2luZGV4ID09PSBcInRhcmdldHNcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRhcmdldHNfc3ByaXRlcztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShzZXEuc3ByaXRlX2luZGV4KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZXEuc3ByaXRlX2luZGV4Lm1hcChpbmRleCA9PiB0aGlzLnNwcml0ZXNbaW5kZXhdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFt0aGlzLnNwcml0ZXNbc2VxLnNwcml0ZV9pbmRleF1dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcGxheV9udW1iZXJfcHJvcGVydHlfc2VxdWVuY2Uoc2VxdWVuY2UsIHRhcmdldF9wcm9wZXJ0eSwgaW5uZXJfcHJvcGVydHk/KSB7XG4gICAgICAgIGxldCBjaGFpbmVkX3R3ZWVucyA9IHt9O1xuICAgICAgICBsZXQgYXV0b19zdGFydF90d2VlbiA9IHt9O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcXVlbmNlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBzZXEgPSBzZXF1ZW5jZVtpXTtcbiAgICAgICAgICAgIGlmICghKHNlcS5zcHJpdGVfaW5kZXggaW4gYXV0b19zdGFydF90d2VlbikpIGF1dG9fc3RhcnRfdHdlZW5bc2VxLnNwcml0ZV9pbmRleF0gPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHNlcS5zcHJpdGVfaW5kZXggaW4gY2hhaW5lZF90d2VlbnMpIHtcbiAgICAgICAgICAgICAgICBhdXRvX3N0YXJ0X3R3ZWVuW3NlcS5zcHJpdGVfaW5kZXhdID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgc3ByaXRlcyA9IHRoaXMuZ2V0X3Nwcml0ZXMoc2VxLCBpbm5lcl9wcm9wZXJ0eSk7XG4gICAgICAgICAgICBsZXQgcHJvbWlzZXNfc2V0ID0gZmFsc2U7XG4gICAgICAgICAgICBzcHJpdGVzLmZvckVhY2goKHRoaXNfc3ByaXRlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB1bmlxX2tleTtcbiAgICAgICAgICAgICAgICBpZiAodGhpc19zcHJpdGUuZGF0YSAmJiB0aGlzX3Nwcml0ZS5kYXRhLmhhc093blByb3BlcnR5KFwiYmF0dGxlX2luZGV4XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHVuaXFfa2V5ID0gdGhpc19zcHJpdGUua2V5ICsgXCJfXCIgKyB0aGlzX3Nwcml0ZS5kYXRhLmJhdHRsZV9pbmRleDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB1bmlxX2tleSA9IHRoaXNfc3ByaXRlLmtleSArIFwiX1wiICsgaW5kZXg7IC8vcG90ZW50aWFsIGJ1Z1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zcHJpdGVzX3ByZXZfcHJvcGVydGllc1t1bmlxX2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNwcml0ZXNfcHJldl9wcm9wZXJ0aWVzW3VuaXFfa2V5XSA9IHt9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zcHJpdGVzX3ByZXZfcHJvcGVydGllc1t1bmlxX2tleV1bdGFyZ2V0X3Byb3BlcnR5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3ByaXRlc19wcmV2X3Byb3BlcnRpZXNbdW5pcV9rZXldW3RhcmdldF9wcm9wZXJ0eV0gPSB0aGlzX3Nwcml0ZVt0YXJnZXRfcHJvcGVydHldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBzZXFfdG8gPSBBcnJheS5pc0FycmF5KHNlcS50bykgPyBzZXEudG9baW5kZXhdIDogc2VxLnRvO1xuICAgICAgICAgICAgICAgIGxldCB0b192YWx1ZSA9IHNlcV90bztcbiAgICAgICAgICAgICAgICBpZiAoc2VxX3RvID09PSBcInRhcmdldFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNoaWZ0ID0gQXJyYXkuaXNBcnJheShzZXEuc2hpZnQpID8gc2VxLnNoaWZ0W2luZGV4XSA6IHNlcS5zaGlmdDtcbiAgICAgICAgICAgICAgICAgICAgdG9fdmFsdWUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXRzX3Nwcml0ZXNbdGhpcy50YXJnZXRzX3Nwcml0ZXMubGVuZ3RoID4+IDFdW3RhcmdldF9wcm9wZXJ0eV0gK1xuICAgICAgICAgICAgICAgICAgICAgICAgKHNoaWZ0ID09PSB1bmRlZmluZWQgPyAwIDogc2hpZnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoW1wicm90YXRpb25cIiwgXCJodWVfYWRqdXN0XCJdLmluY2x1ZGVzKHRhcmdldF9wcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zcHJpdGVzX3ByZXZfcHJvcGVydGllc1t1bmlxX2tleV1bdGFyZ2V0X3Byb3BlcnR5XSA9IHJhbmdlXzM2MChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3ByaXRlc19wcmV2X3Byb3BlcnRpZXNbdW5pcV9rZXldW3RhcmdldF9wcm9wZXJ0eV1cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpc19zcHJpdGVbdGFyZ2V0X3Byb3BlcnR5XSA9IHRoaXMuc3ByaXRlc19wcmV2X3Byb3BlcnRpZXNbdW5pcV9rZXldW3RhcmdldF9wcm9wZXJ0eV07XG4gICAgICAgICAgICAgICAgICAgIHRvX3ZhbHVlID0gQmF0dGxlQW5pbWF0aW9uLmdldF9hbmdsZV9ieV9kaXJlY3Rpb24oXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNwcml0ZXNfcHJldl9wcm9wZXJ0aWVzW3VuaXFfa2V5XVt0YXJnZXRfcHJvcGVydHldLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VxX3RvLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VxLmRpcmVjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldF9wcm9wZXJ0eSA9PT0gXCJyb3RhdGlvblwiXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguYWJzKHRoaXMuc3ByaXRlc19wcmV2X3Byb3BlcnRpZXNbdW5pcV9rZXldW3RhcmdldF9wcm9wZXJ0eV0gLSB0b192YWx1ZSkgPiBudW1iZXJzLmRlZ3JlZTM2MFxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvX3ZhbHVlIC09IE1hdGguc2lnbih0b192YWx1ZSkgKiBudW1iZXJzLmRlZ3JlZTM2MDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0b192YWx1ZSA9IHNlcS5pc19hYnNvbHV0ZVxuICAgICAgICAgICAgICAgICAgICA/IHRvX3ZhbHVlXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5zcHJpdGVzX3ByZXZfcHJvcGVydGllc1t1bmlxX2tleV1bdGFyZ2V0X3Byb3BlcnR5XSArIHNlcV90bztcbiAgICAgICAgICAgICAgICB0aGlzLnNwcml0ZXNfcHJldl9wcm9wZXJ0aWVzW3VuaXFfa2V5XVt0YXJnZXRfcHJvcGVydHldID0gdG9fdmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKHNlcS50d2VlbiA9PT0gXCJpbml0aWFsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc19zcHJpdGVbdGFyZ2V0X3Byb3BlcnR5XSA9IHRvX3ZhbHVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHNlcS5zcHJpdGVfaW5kZXggaW4gY2hhaW5lZF90d2VlbnMpKSBjaGFpbmVkX3R3ZWVuc1tzZXEuc3ByaXRlX2luZGV4XSA9IHtbaW5kZXhdOiBbXX07XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGluZGV4IGluIGNoYWluZWRfdHdlZW5zW3NlcS5zcHJpdGVfaW5kZXhdKSkgY2hhaW5lZF90d2VlbnNbc2VxLnNwcml0ZV9pbmRleF1baW5kZXhdID0gW107XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0X2RlbGF5ID0gQXJyYXkuaXNBcnJheShzZXEuc3RhcnRfZGVsYXkpID8gc2VxLnN0YXJ0X2RlbGF5W2luZGV4XSA6IHNlcS5zdGFydF9kZWxheTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlcS5kdXJhdGlvbiA9PT0gXCJpbnN0YW50bHlcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlc29sdmVfZnVuY3Rpb247XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXByb21pc2VzX3NldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0aGlzX3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZV9mdW5jdGlvbiA9IHJlc29sdmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9taXNlcy5wdXNoKHRoaXNfcHJvbWlzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZXNfc2V0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5hZGQoc3RhcnRfZGVsYXksICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzX3Nwcml0ZVt0YXJnZXRfcHJvcGVydHldID0gdG9fdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlcS5mb3JjZV9zdGFnZV91cGRhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFnZV9jYW1lcmEudXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZXEuaXNfYWJzb2x1dGUgJiYgW1wicm90YXRpb25cIiwgXCJodWVfYWRqdXN0XCJdLmluY2x1ZGVzKHRhcmdldF9wcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc19zcHJpdGVbdGFyZ2V0X3Byb3BlcnR5XSA9IHJhbmdlXzM2MCh0aGlzX3Nwcml0ZVt0YXJnZXRfcHJvcGVydHldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc29sdmVfZnVuY3Rpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlX2Z1bmN0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0d2VlbiA9IHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpc19zcHJpdGUpLnRvKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtbdGFyZ2V0X3Byb3BlcnR5XTogdG9fdmFsdWV9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkoc2VxLmR1cmF0aW9uKSA/IHNlcS5kdXJhdGlvbltpbmRleF0gOiBzZXEuZHVyYXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VxLnR3ZWVuLnNwbGl0KFwiLlwiKS5yZWR1Y2UoKHAsIHByb3ApID0+IHBbcHJvcF0sIFBoYXNlci5FYXNpbmcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9fc3RhcnRfdHdlZW5bc2VxLnNwcml0ZV9pbmRleF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRfZGVsYXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXEueW95byA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBzZXEueW95b1xuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcHJvbWlzZXNfc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlc29sdmVfZnVuY3Rpb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRoaXNfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlX2Z1bmN0aW9uID0gcmVzb2x2ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb21pc2VzLnB1c2godGhpc19wcm9taXNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0d2Vlbi5vblN0YXJ0LmFkZE9uY2UoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VxLmZvcmNlX3N0YWdlX3VwZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFnZV9jYW1lcmEuc3BpbmluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0d2Vlbi5vbkNvbXBsZXRlLmFkZE9uY2UoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VxLmlzX2Fic29sdXRlICYmIFtcInJvdGF0aW9uXCIsIFwiaHVlX2FkanVzdFwiXS5pbmNsdWRlcyh0YXJnZXRfcHJvcGVydHkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzX3Nwcml0ZVt0YXJnZXRfcHJvcGVydHldID0gcmFuZ2VfMzYwKHRoaXNfc3ByaXRlW3RhcmdldF9wcm9wZXJ0eV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVfZnVuY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlcS5mb3JjZV9zdGFnZV91cGRhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhZ2VfY2FtZXJhLnNwaW5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2VzX3NldCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhaW5lZF90d2VlbnNbc2VxLnNwcml0ZV9pbmRleF1baW5kZXhdLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYWluZWRfdHdlZW5zW3NlcS5zcHJpdGVfaW5kZXhdW2luZGV4XVtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhaW5lZF90d2VlbnNbc2VxLnNwcml0ZV9pbmRleF1baW5kZXhdLmxlbmd0aCAtIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLmNoYWluKHR3ZWVuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYWluZWRfdHdlZW5zW3NlcS5zcHJpdGVfaW5kZXhdW2luZGV4XS5wdXNoKHR3ZWVuKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcGxheV9zcHJpdGVfc2VxdWVuY2UoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wbGF5X3NlcXVlbmNlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBwbGF5X3NlcSA9IHRoaXMucGxheV9zZXF1ZW5jZVtpXTtcbiAgICAgICAgICAgIGxldCBzcHJpdGVzID0gdGhpcy5nZXRfc3ByaXRlcyhwbGF5X3NlcSk7XG4gICAgICAgICAgICBzcHJpdGVzLmZvckVhY2goKHNwcml0ZTogUGhhc2VyLlNwcml0ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgcmVzb2x2ZV9mdW5jdGlvbjtcbiAgICAgICAgICAgICAgICBsZXQgdGhpc19wcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVfZnVuY3Rpb24gPSByZXNvbHZlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMucHJvbWlzZXMucHVzaCh0aGlzX3Byb21pc2UpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0X2RlbGF5ID0gQXJyYXkuaXNBcnJheShwbGF5X3NlcS5zdGFydF9kZWxheSlcbiAgICAgICAgICAgICAgICAgICAgPyBwbGF5X3NlcS5zdGFydF9kZWxheVtpbmRleF1cbiAgICAgICAgICAgICAgICAgICAgOiBwbGF5X3NlcS5zdGFydF9kZWxheTtcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUudGltZS5ldmVudHMuYWRkKHN0YXJ0X2RlbGF5LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFuaW0gPSBzcHJpdGUuYW5pbWF0aW9ucy5nZXRBbmltYXRpb24ocGxheV9zZXEuYW5pbWF0aW9uX2tleSk7XG4gICAgICAgICAgICAgICAgICAgIGFuaW0ucmV2ZXJzZWQgPSBwbGF5X3NlcS5yZXZlcnNlID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IHBsYXlfc2VxLnJldmVyc2U7XG4gICAgICAgICAgICAgICAgICAgIGFuaW0uc3RvcCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgc3ByaXRlLmFuaW1hdGlvbnMucGxheShwbGF5X3NlcS5hbmltYXRpb25fa2V5LCBwbGF5X3NlcS5mcmFtZV9yYXRlLCBwbGF5X3NlcS5yZXBlYXQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGxheV9zZXEud2FpdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ByaXRlLmFuaW1hdGlvbnMuY3VycmVudEFuaW0ub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGxheV9zZXEuaGlkZV9vbl9jb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcHJpdGUuYWxwaGEgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlX2Z1bmN0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVfZnVuY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwbGF5X2JsZW5kX21vZGVzKCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYmxlbmRfbW9kZV9zZXF1ZW5jZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgYmxlbmRfbW9kZV9zZXEgPSB0aGlzLmJsZW5kX21vZGVfc2VxdWVuY2VbaV07XG4gICAgICAgICAgICBsZXQgc3ByaXRlcyA9IHRoaXMuZ2V0X3Nwcml0ZXMoYmxlbmRfbW9kZV9zZXEpO1xuICAgICAgICAgICAgc3ByaXRlcy5mb3JFYWNoKChzcHJpdGUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHJlc29sdmVfZnVuY3Rpb247XG4gICAgICAgICAgICAgICAgbGV0IHRoaXNfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlX2Z1bmN0aW9uID0gcmVzb2x2ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnByb21pc2VzLnB1c2godGhpc19wcm9taXNlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydF9kZWxheSA9IEFycmF5LmlzQXJyYXkoYmxlbmRfbW9kZV9zZXEuc3RhcnRfZGVsYXkpXG4gICAgICAgICAgICAgICAgICAgID8gYmxlbmRfbW9kZV9zZXEuc3RhcnRfZGVsYXlbaW5kZXhdXG4gICAgICAgICAgICAgICAgICAgIDogYmxlbmRfbW9kZV9zZXEuc3RhcnRfZGVsYXk7XG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLnRpbWUuZXZlbnRzLmFkZChzdGFydF9kZWxheSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGJsZW5kX21vZGVfc2VxLm1vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzY3JlZW5cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcHJpdGUuYmxlbmRNb2RlID0gUElYSS5ibGVuZE1vZGVzLlNDUkVFTjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJub3JtYWxcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcHJpdGUuYmxlbmRNb2RlID0gUElYSS5ibGVuZE1vZGVzLk5PUk1BTDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJlc29sdmVfZnVuY3Rpb24oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcGxheV9maWx0ZXJfcHJvcGVydHkoc2VxdWVuY2UsIHByb3BlcnR5PywgLi4uc2Vjb25kYXJ5X3Byb3BlcnRpZXMpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXF1ZW5jZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgZmlsdGVyX3NlcSA9IHNlcXVlbmNlW2ldO1xuICAgICAgICAgICAgbGV0IHNwcml0ZXMgPSB0aGlzLmdldF9zcHJpdGVzKGZpbHRlcl9zZXEpO1xuICAgICAgICAgICAgc3ByaXRlcy5mb3JFYWNoKChzcHJpdGUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHJlc29sdmVfZnVuY3Rpb247XG4gICAgICAgICAgICAgICAgbGV0IHRoaXNfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlX2Z1bmN0aW9uID0gcmVzb2x2ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnByb21pc2VzLnB1c2godGhpc19wcm9taXNlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydF9kZWxheSA9IEFycmF5LmlzQXJyYXkoZmlsdGVyX3NlcS5zdGFydF9kZWxheSlcbiAgICAgICAgICAgICAgICAgICAgPyBmaWx0ZXJfc2VxLnN0YXJ0X2RlbGF5W2luZGV4XVxuICAgICAgICAgICAgICAgICAgICA6IGZpbHRlcl9zZXEuc3RhcnRfZGVsYXk7XG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLnRpbWUuZXZlbnRzLmFkZChzdGFydF9kZWxheSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0aGlzX3Byb3BlcnR5ID0gZmlsdGVyX3NlcS5maWx0ZXIgIT09IHVuZGVmaW5lZCA/IGZpbHRlcl9zZXEuZmlsdGVyIDogcHJvcGVydHk7XG4gICAgICAgICAgICAgICAgICAgIHNwcml0ZS5maWx0ZXJzWzBdW3RoaXNfcHJvcGVydHldID0gZmlsdGVyX3NlcS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5X3Byb3BlcnRpZXMuZm9yRWFjaChzZWNvbmRhcnlfcHJvcGVydHkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ByaXRlLmZpbHRlcnNbMF1bc2Vjb25kYXJ5X3Byb3BlcnR5XSA9IGZpbHRlcl9zZXFbc2Vjb25kYXJ5X3Byb3BlcnR5XTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZV9mdW5jdGlvbigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwbGF5X3N0YWdlX2FuZ2xlX3NlcXVlbmNlKCkge1xuICAgICAgICBsZXQgY2hhaW5lZF90d2VlbnMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnN0YWdlX2FuZ2xlX3NlcXVlbmNlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBzdGFnZV9hbmdsZV9zZXEgPSB0aGlzLnN0YWdlX2FuZ2xlX3NlcXVlbmNlW2ldO1xuICAgICAgICAgICAgbGV0IHRvX3ZhbHVlO1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RhZ2VfcHJldl92YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFnZV9wcmV2X3ZhbHVlID0gdGhpcy5zdGFnZV9jYW1lcmEucmFkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YWdlX2FuZ2xlX3NlcS50byA9PT0gXCJkZWZhdWx0XCIpIHtcbiAgICAgICAgICAgICAgICB0b192YWx1ZSA9IERFRkFVTFRfUE9TX0FOR0xFO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RhZ2VfYW5nbGVfc2VxLmlzX2Fic29sdXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhZ2VfcHJldl92YWx1ZSA9IHJhbmdlXzM2MCh0aGlzLnN0YWdlX3ByZXZfdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YWdlX2NhbWVyYS5yYWQgPSB0aGlzLnN0YWdlX3ByZXZfdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHRvX3ZhbHVlID0gQmF0dGxlQW5pbWF0aW9uLmdldF9hbmdsZV9ieV9kaXJlY3Rpb24oXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YWdlX3ByZXZfdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFnZV9hbmdsZV9zZXEudG8sXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFnZV9hbmdsZV9zZXEuZGlyZWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnModGhpcy5zdGFnZV9wcmV2X3ZhbHVlIC0gdG9fdmFsdWUpID4gbnVtYmVycy5kZWdyZWUzNjApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvX3ZhbHVlIC09IE1hdGguc2lnbih0b192YWx1ZSkgKiBudW1iZXJzLmRlZ3JlZTM2MDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRvX3ZhbHVlID0gdGhpcy5zdGFnZV9wcmV2X3ZhbHVlICsgKHN0YWdlX2FuZ2xlX3NlcS50byBhcyBudW1iZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3RhZ2VfcHJldl92YWx1ZSA9IHRvX3ZhbHVlO1xuICAgICAgICAgICAgaWYgKHN0YWdlX2FuZ2xlX3NlcS50d2VlbiA9PT0gXCJpbml0aWFsXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RhZ2VfYW5nbGVfc2VxLmlzX2Fic29sdXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhZ2VfY2FtZXJhLnJhZCA9IHRvX3ZhbHVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhZ2VfY2FtZXJhLnJhZCArPSB0b192YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHR3ZWVuID0gdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLnN0YWdlX2NhbWVyYSkudG8oXG4gICAgICAgICAgICAgICAgICAgIHtyYWQ6IHRvX3ZhbHVlfSxcbiAgICAgICAgICAgICAgICAgICAgc3RhZ2VfYW5nbGVfc2VxLmR1cmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICBzdGFnZV9hbmdsZV9zZXEudHdlZW4uc3BsaXQoXCIuXCIpLnJlZHVjZSgocCwgcHJvcCkgPT4gcFtwcm9wXSwgUGhhc2VyLkVhc2luZyksXG4gICAgICAgICAgICAgICAgICAgIGNoYWluZWRfdHdlZW5zLmxlbmd0aCA9PT0gMCxcbiAgICAgICAgICAgICAgICAgICAgc3RhZ2VfYW5nbGVfc2VxLnN0YXJ0X2RlbGF5IGFzIG51bWJlclxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgbGV0IHJlc29sdmVfZnVuY3Rpb247XG4gICAgICAgICAgICAgICAgbGV0IHRoaXNfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlX2Z1bmN0aW9uID0gcmVzb2x2ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnByb21pc2VzLnB1c2godGhpc19wcm9taXNlKTtcbiAgICAgICAgICAgICAgICB0d2Vlbi5vblN0YXJ0LmFkZE9uY2UoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YWdlX2NhbWVyYS5zcGluaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0d2Vlbi5vbkNvbXBsZXRlLmFkZE9uY2UoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhZ2VfYW5nbGVfc2VxLmlzX2Fic29sdXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YWdlX2NhbWVyYS5yYWQgPSByYW5nZV8zNjAodGhpcy5zdGFnZV9jYW1lcmEucmFkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YWdlX2NhbWVyYS5zcGluaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVfZnVuY3Rpb24oKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoY2hhaW5lZF90d2VlbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYWluZWRfdHdlZW5zW2NoYWluZWRfdHdlZW5zLmxlbmd0aCAtIDFdLmNoYWluKHR3ZWVuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2hhaW5lZF90d2VlbnMucHVzaCh0d2Vlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRfc3ByaXRlX3h5X3BvcyhcbiAgICAgICAgeDogbnVtYmVyIHwgc3RyaW5nLFxuICAgICAgICB5OiBudW1iZXIgfCBzdHJpbmcsXG4gICAgICAgIHNoaWZ0X3g6IG51bWJlcixcbiAgICAgICAgc2hpZnRfeTogbnVtYmVyXG4gICAgKToge3g6IG51bWJlcjsgeTogbnVtYmVyfSB7XG4gICAgICAgIGlmICh4ID09PSBcImNhc3RlclwiKSB7XG4gICAgICAgICAgICB4ID0gdGhpcy5jYXN0ZXJfc3ByaXRlLng7XG4gICAgICAgIH0gZWxzZSBpZiAoeCA9PT0gXCJ0YXJnZXRzXCIpIHtcbiAgICAgICAgICAgIF8ubWVhbih0aGlzLnRhcmdldHNfc3ByaXRlcy5tYXAodGFyZ2V0ID0+IHRhcmdldC54KSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHkgPT09IFwiY2FzdGVyXCIpIHtcbiAgICAgICAgICAgIHkgPSB0aGlzLmNhc3Rlcl9zcHJpdGUueTtcbiAgICAgICAgfSBlbHNlIGlmICh5ID09PSBcInRhcmdldHNcIikge1xuICAgICAgICAgICAgXy5tZWFuKHRoaXMudGFyZ2V0c19zcHJpdGVzLm1hcCh0YXJnZXQgPT4gdGFyZ2V0LnkpKTtcbiAgICAgICAgfVxuICAgICAgICAoeCBhcyBudW1iZXIpICs9IHNoaWZ0X3ggPyBzaGlmdF94IDogMDtcbiAgICAgICAgKHkgYXMgbnVtYmVyKSArPSBzaGlmdF95ID8gc2hpZnRfeSA6IDA7XG4gICAgICAgIHJldHVybiB7eDogeCBhcyBudW1iZXIsIHk6IHkgYXMgbnVtYmVyfTtcbiAgICB9XG5cbiAgICBwbGF5X3BhcnRpY2xlcygpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBhcnRpY2xlc19zZXF1ZW5jZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgbGV0IHJlc29sdmVfZnVuY3Rpb247XG4gICAgICAgICAgICBjb25zdCB0aGlzX3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgICAgICByZXNvbHZlX2Z1bmN0aW9uID0gcmVzb2x2ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5wcm9taXNlcy5wdXNoKHRoaXNfcHJvbWlzZSk7XG4gICAgICAgICAgICBjb25zdCBhZHZfcGFydGljbGVzX3NlcSA9IHRoaXMucGFydGljbGVzX3NlcXVlbmNlW2ldO1xuXG4gICAgICAgICAgICBjb25zdCB6b25lX29ianM6IHtbem9uZV9rZXk6IHN0cmluZ106IFBoYXNlci5QYXJ0aWNsZVN0b3JtLlpvbmVzLkJhc2V9ID0ge307XG4gICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gYWR2X3BhcnRpY2xlc19zZXEuem9uZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB6b25lX2luZm8gPSBhZHZfcGFydGljbGVzX3NlcS56b25lc1trZXldO1xuICAgICAgICAgICAgICAgIGxldCB6b25lOiBQaGFzZXIuUGFydGljbGVTdG9ybS5ab25lcy5CYXNlO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoem9uZV9pbmZvLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBab25lVHlwZXMuQ0lSQ0xFOlxuICAgICAgICAgICAgICAgICAgICAgICAgem9uZSA9IHRoaXMuZGF0YS5wYXJ0aWNsZV9tYW5hZ2VyLmNyZWF0ZUNpcmNsZVpvbmUoem9uZV9pbmZvLnJhZGl1cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBab25lVHlwZXMuRUxMSVBTRTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHpvbmUgPSB0aGlzLmRhdGEucGFydGljbGVfbWFuYWdlci5jcmVhdGVFbGxpcHNlWm9uZSh6b25lX2luZm8ud2lkdGgsIHpvbmVfaW5mby5oZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgWm9uZVR5cGVzLkxJTkU6XG4gICAgICAgICAgICAgICAgICAgICAgICB6b25lID0gdGhpcy5kYXRhLnBhcnRpY2xlX21hbmFnZXIuY3JlYXRlTGluZVpvbmUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgem9uZV9pbmZvLnBvaW50c1swXS54LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpvbmVfaW5mby5wb2ludHNbMF0ueSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB6b25lX2luZm8ucG9pbnRzWzFdLngsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgem9uZV9pbmZvLnBvaW50c1sxXS55XG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgWm9uZVR5cGVzLlBPSU5UOlxuICAgICAgICAgICAgICAgICAgICAgICAgem9uZSA9IHRoaXMuZGF0YS5wYXJ0aWNsZV9tYW5hZ2VyLmNyZWF0ZVBvaW50Wm9uZSh6b25lX2luZm8ucG9pbnRzWzBdLngsIHpvbmVfaW5mby5wb2ludHNbMF0ueSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBab25lVHlwZXMuUkVDVEFOR0xFOlxuICAgICAgICAgICAgICAgICAgICAgICAgem9uZSA9IHRoaXMuZGF0YS5wYXJ0aWNsZV9tYW5hZ2VyLmNyZWF0ZVJlY3RhbmdsZVpvbmUoem9uZV9pbmZvLndpZHRoLCB6b25lX2luZm8uaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB6b25lX29ianNba2V5XSA9IHpvbmU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiBhZHZfcGFydGljbGVzX3NlcS5kYXRhKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IF8uY2xvbmVEZWVwKGFkdl9wYXJ0aWNsZXNfc2VxLmRhdGFba2V5XSk7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEudGFyZ2V0Py56b25lX2tleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEudGFyZ2V0LnpvbmUgPSB6b25lX29ianNbZGF0YS50YXJnZXQuem9uZV9rZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEucGFydGljbGVfbWFuYWdlci5hZGREYXRhKGtleSwgZGF0YSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHJlbmRlcl9jYWxsYmFja3MgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IGVtaXR0ZXJzOiBQaGFzZXIuUGFydGljbGVTdG9ybS5FbWl0dGVyW10gPSBbXTtcbiAgICAgICAgICAgIGFkdl9wYXJ0aWNsZXNfc2VxLmVtaXR0ZXJzLmZvckVhY2goKGVtaXR0ZXJfaW5mbywgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbWl0dGVyID0gdGhpcy5kYXRhLnBhcnRpY2xlX21hbmFnZXIuY3JlYXRlRW1pdHRlcihcbiAgICAgICAgICAgICAgICAgICAgZW1pdHRlcl9pbmZvLnJlbmRlcl90eXBlLFxuICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgZW1pdHRlcl9pbmZvLnJlbmRlcl93aGl0ZV9jb3JlXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBlbWl0dGVyLmZvcmNlLnggPSBlbWl0dGVyX2luZm8uZm9yY2U/LnggPT09IHVuZGVmaW5lZCA/IGVtaXR0ZXIuZm9yY2UueCA6IGVtaXR0ZXJfaW5mby5mb3JjZS54O1xuICAgICAgICAgICAgICAgIGVtaXR0ZXIuZm9yY2UueSA9IGVtaXR0ZXJfaW5mby5mb3JjZT8ueSA9PT0gdW5kZWZpbmVkID8gZW1pdHRlci5mb3JjZS55IDogZW1pdHRlcl9pbmZvLmZvcmNlLnk7XG5cbiAgICAgICAgICAgICAgICAoZW1pdHRlci5yZW5kZXJlciBhcyBQaGFzZXIuUGFydGljbGVTdG9ybS5SZW5kZXJlci5QaXhlbCkuYXV0b0NsZWFyID0gIWVtaXR0ZXJfaW5mby5zaG93X3RyYWlscztcbiAgICAgICAgICAgICAgICBpZiAoZW1pdHRlcl9pbmZvLnNob3dfdHJhaWxzIHx8IGVtaXR0ZXJfaW5mby5waXhlbF9yZWR1Y2luZ19mYWN0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gYGFkdmFuY2VkX3BhcnRpY2xlc19zZXF1ZW5jZV8ke2l9XyR7aW5kZXh9YDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJfY2FsbGJhY2tzW2tleV0gPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW1pdHRlcl9pbmZvLnJlbmRlcl90eXBlID09PSBcInBpeGVsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW1pdHRlcl9pbmZvLnNob3dfdHJhaWxzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChlbWl0dGVyLnJlbmRlcmVyIGFzIFBoYXNlci5QYXJ0aWNsZVN0b3JtLlJlbmRlcmVyLlBpeGVsKS5jbGVhcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtaXR0ZXJfaW5mby50cmFpbHNfY2xlYXJfZmFjdG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbWl0dGVyX2luZm8ucGl4ZWxfcmVkdWNpbmdfZmFjdG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoZW1pdHRlciBhcyBhbnkpLl9kZWxheS53YWl0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZW1pdHRlci5yZW5kZXJlciBhcyBQaGFzZXIuUGFydGljbGVTdG9ybS5SZW5kZXJlci5QaXhlbCkucGl4ZWxTaXplIC09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1pdHRlcl9pbmZvLnBpeGVsX3JlZHVjaW5nX2ZhY3RvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyX2NhbGxiYWNrcy5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGVtaXR0ZXJfaW5mby5yZW5kZXJfdHlwZSA9PT0gXCJwaXhlbFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIChlbWl0dGVyLnJlbmRlcmVyIGFzIFBoYXNlci5QYXJ0aWNsZVN0b3JtLlJlbmRlcmVyLlBpeGVsKS5waXhlbFNpemUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgZW1pdHRlcl9pbmZvLnBpeGVsX3NpemUgPT09IHVuZGVmaW5lZCA/IDIgOiBlbWl0dGVyX2luZm8ucGl4ZWxfc2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgKGVtaXR0ZXIucmVuZGVyZXIgYXMgUGhhc2VyLlBhcnRpY2xlU3Rvcm0uUmVuZGVyZXIuUGl4ZWwpLnVzZVJlY3QgPVxuICAgICAgICAgICAgICAgICAgICAgICAgZW1pdHRlcl9pbmZvLnBpeGVsX2lzX3JlY3QgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogZW1pdHRlcl9pbmZvLnBpeGVsX2lzX3JlY3Q7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVtaXR0ZXJfaW5mby5wYXJ0aWNsZXNfZGlzcGxheV9ibGVuZF9tb2RlID09PSBcInNjcmVlblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAoZW1pdHRlci5yZW5kZXJlciBhcyBQaGFzZXIuUGFydGljbGVTdG9ybS5SZW5kZXJlci5QaXhlbCkuZGlzcGxheS5ibGVuZE1vZGUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBoYXNlci5ibGVuZE1vZGVzLlNDUkVFTjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAoZW1pdHRlci5yZW5kZXJlciBhcyBQaGFzZXIuUGFydGljbGVTdG9ybS5SZW5kZXJlci5QaXhlbCkucmVzaXplKFxuICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVycy5HQU1FX1dJRFRIIDw8IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBudW1iZXJzLkdBTUVfSEVJR0hUXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgZGlzcGxheXMgPSBlbWl0dGVyLmFkZFRvV29ybGQodGhpcy5zdXBlcl9ncm91cCk7XG4gICAgICAgICAgICAgICAgZGlzcGxheXMuZm9yRWFjaChkaXNwbGF5ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkaXNwbGF5KSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbWl0dGVyX2luZm8ucG9zaXRpb24gPT09IFwib3ZlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN1cGVyX2dyb3VwLmFkZENoaWxkKGRpc3BsYXkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVtaXR0ZXJfaW5mby5wb3NpdGlvbiA9PT0gXCJiZXR3ZWVuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3VwZXJfZ3JvdXAuc2V0Q2hpbGRJbmRleChkaXNwbGF5LCB0aGlzLnN1cGVyX2dyb3VwLmdldENoaWxkSW5kZXgodGhpcy5mcm9udF9ncm91cCkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVtaXR0ZXJfaW5mby5wb3NpdGlvbiA9PT0gXCJiZWhpbmRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdXBlcl9ncm91cC5zZXRDaGlsZEluZGV4KGRpc3BsYXksIHRoaXMuc3VwZXJfZ3JvdXAuZ2V0Q2hpbGRJbmRleCh0aGlzLmJhY2tfZ3JvdXApKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChlbWl0dGVyX2luZm8uZ3Jhdml0eV93ZWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGVtaXR0ZXIuY3JlYXRlR3Jhdml0eVdlbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICBlbWl0dGVyX2luZm8uZ3Jhdml0eV93ZWxsLngsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbWl0dGVyX2luZm8uZ3Jhdml0eV93ZWxsLnksXG4gICAgICAgICAgICAgICAgICAgICAgICBlbWl0dGVyX2luZm8uZ3Jhdml0eV93ZWxsLnBvd2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW1pdHRlcl9pbmZvLmdyYXZpdHlfd2VsbC5lcHNpbG9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW1pdHRlcl9pbmZvLmdyYXZpdHlfd2VsbC5ncmF2aXR5XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHt4LCB5fSA9IHRoaXMuZ2V0X3Nwcml0ZV94eV9wb3MoXG4gICAgICAgICAgICAgICAgICAgIGVtaXR0ZXJfaW5mby54LFxuICAgICAgICAgICAgICAgICAgICBlbWl0dGVyX2luZm8ueSxcbiAgICAgICAgICAgICAgICAgICAgZW1pdHRlcl9pbmZvLnNoaWZ0X3gsXG4gICAgICAgICAgICAgICAgICAgIGVtaXR0ZXJfaW5mby5zaGlmdF95XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBlbWl0dGVyLmVtaXQoZW1pdHRlcl9pbmZvLmVtaXR0ZXJfZGF0YV9rZXksIHgsIHksIHtcbiAgICAgICAgICAgICAgICAgICAgLi4uKGVtaXR0ZXJfaW5mby50b3RhbCAhPT0gdW5kZWZpbmVkICYmIHt0b3RhbDogZW1pdHRlcl9pbmZvLnRvdGFsfSksXG4gICAgICAgICAgICAgICAgICAgIC4uLihlbWl0dGVyX2luZm8ucmVwZWF0ICE9PSB1bmRlZmluZWQgJiYge3JlcGVhdDogZW1pdHRlcl9pbmZvLnJlcGVhdH0pLFxuICAgICAgICAgICAgICAgICAgICAuLi4oZW1pdHRlcl9pbmZvLmZyZXF1ZW5jeSAhPT0gdW5kZWZpbmVkICYmIHtmcmVxdWVuY3k6IGVtaXR0ZXJfaW5mby5mcmVxdWVuY3l9KSxcbiAgICAgICAgICAgICAgICAgICAgLi4uKGVtaXR0ZXJfaW5mby54X3N0ZXAgIT09IHVuZGVmaW5lZCAmJiB7eFN0ZXA6IGVtaXR0ZXJfaW5mby54X3N0ZXB9KSxcbiAgICAgICAgICAgICAgICAgICAgLi4uKGVtaXR0ZXJfaW5mby55X3N0ZXAgIT09IHVuZGVmaW5lZCAmJiB7eVN0ZXA6IGVtaXR0ZXJfaW5mby55X3N0ZXB9KSxcbiAgICAgICAgICAgICAgICAgICAgLi4uKGVtaXR0ZXJfaW5mby5kZWxheSAhPT0gdW5kZWZpbmVkICYmIHtkZWxheTogZW1pdHRlcl9pbmZvLmRlbGF5fSksXG4gICAgICAgICAgICAgICAgICAgIC4uLihlbWl0dGVyX2luZm8uem9uZV9rZXkgIT09IHVuZGVmaW5lZCAmJiB7em9uZTogem9uZV9vYmpzW2VtaXR0ZXJfaW5mby56b25lX2tleV19KSxcbiAgICAgICAgICAgICAgICAgICAgLi4uKGVtaXR0ZXJfaW5mby5yYW5kb21faW5fem9uZSAhPT0gdW5kZWZpbmVkICYmIHtyYW5kb206IGVtaXR0ZXJfaW5mby5yYW5kb21faW5fem9uZX0pLFxuICAgICAgICAgICAgICAgICAgICAuLi4oZW1pdHRlcl9pbmZvLnNwYWNpbmcgIT09IHVuZGVmaW5lZCAmJiB7c3BhY2luZzogZW1pdHRlcl9pbmZvLnNwYWNpbmd9KSxcbiAgICAgICAgICAgICAgICAgICAgLi4uKGVtaXR0ZXJfaW5mby5yYWRpYXRlICE9PSB1bmRlZmluZWQgJiYge3JhZGlhdGU6IGVtaXR0ZXJfaW5mby5yYWRpYXRlfSksXG4gICAgICAgICAgICAgICAgICAgIC4uLihlbWl0dGVyX2luZm8ucmFkaWF0ZUZyb20gIT09IHVuZGVmaW5lZCAmJiB7cmFkaWF0ZUZyb206IGVtaXR0ZXJfaW5mby5yYWRpYXRlRnJvbX0pLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChlbWl0dGVyX2luZm8uYW5pbWF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFydGljbGVfa2V5ID0gYWR2X3BhcnRpY2xlc19zZXEuZGF0YVtlbWl0dGVyX2luZm8uZW1pdHRlcl9kYXRhX2tleV0uaW1hZ2UgYXMgc3RyaW5nO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJ0aWNsZV9zcHJpdGVfYmFzZSA9IHRoaXMuZGF0YS5pbmZvLm1pc2Nfc3ByaXRlX2Jhc2VfbGlzdFtwYXJ0aWNsZV9rZXldO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhbmltX2tleSA9IHBhcnRpY2xlX3Nwcml0ZV9iYXNlLmdldEFuaW1hdGlvbktleShcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRpY2xlX2tleSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtaXR0ZXJfaW5mby5hbmltYXRpb24uYW5pbWF0aW9uX2tleVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBlbWl0dGVyLmZvckVhY2goKHBhcnRpY2xlOiBQaGFzZXIuU3ByaXRlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJ0aWNsZV9zcHJpdGVfYmFzZS5zZXRBbmltYXRpb24ocGFydGljbGUsIHBhcnRpY2xlX2tleSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBlbWl0dGVyLm9uRW1pdCA9IG5ldyBQaGFzZXIuU2lnbmFsKCk7XG4gICAgICAgICAgICAgICAgICAgIGVtaXR0ZXIub25FbWl0LmFkZCgoZW1pdHRlcjogUGhhc2VyLlBhcnRpY2xlU3Rvcm0uRW1pdHRlciwgcGFydGljbGU6IFBoYXNlci5TcHJpdGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRpY2xlLmFuaW1hdGlvbnMucGxheShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltX2tleSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbWl0dGVyX2luZm8uYW5pbWF0aW9uLmZyYW1lX3JhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1pdHRlcl9pbmZvLmFuaW1hdGlvbi5sb29wXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZW1pdHRlcnMucHVzaChlbWl0dGVyKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLmdhbWUudGltZS5ldmVudHMuYWRkKGFkdl9wYXJ0aWNsZXNfc2VxLmVtaXNzaW9uX2ZpbmlzaCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlbmRlcl9jYWxsYmFja3MuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5yZW5kZXJfY2FsbGJhY2tzW2tleV07XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZW1pdHRlcnMuZm9yRWFjaChlbWl0dGVyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLnBhcnRpY2xlX21hbmFnZXIucmVtb3ZlRW1pdHRlcihlbWl0dGVyKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVtaXR0ZXIub25FbWl0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbWl0dGVyLm9uRW1pdC5yZW1vdmVBbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbWl0dGVyLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gYWR2X3BhcnRpY2xlc19zZXEuZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEucGFydGljbGVfbWFuYWdlci5jbGVhckRhdGEoa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzb2x2ZV9mdW5jdGlvbigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGxldCBjbGVhciA9IHRydWU7XG4gICAgICAgIHRoaXMuc3ByaXRlcy5mb3JFYWNoKHNwcml0ZSA9PiB7XG4gICAgICAgICAgICBpZiAoIXNwcml0ZS5kYXRhLnRyYWlscykgcmV0dXJuO1xuICAgICAgICAgICAgc3ByaXRlLmRhdGEueF9oaXN0b3J5LnVuc2hpZnQoc3ByaXRlLngpO1xuICAgICAgICAgICAgc3ByaXRlLmRhdGEueV9oaXN0b3J5LnVuc2hpZnQoc3ByaXRlLnkpO1xuICAgICAgICAgICAgaWYgKGNsZWFyKSB7XG4gICAgICAgICAgICAgICAgc3ByaXRlLmRhdGEudHJhaWxzX2luZm8udGV4dHVyZV8xLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgc3ByaXRlLmRhdGEudHJhaWxzX2luZm8udGV4dHVyZV8yLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgY2xlYXIgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNwcml0ZS5kYXRhLnRyYWlsc19pbmZvLnRleHR1cmVfMS5yZW5kZXJYWShcbiAgICAgICAgICAgICAgICBzcHJpdGUsXG4gICAgICAgICAgICAgICAgc3ByaXRlLmRhdGEueF9oaXN0b3J5W3Nwcml0ZS5kYXRhLnRyYWlsc19pbmZvLmZyYW1lX2RpZmYgPj4gMV0sXG4gICAgICAgICAgICAgICAgc3ByaXRlLmRhdGEueV9oaXN0b3J5W3Nwcml0ZS5kYXRhLnRyYWlsc19pbmZvLmZyYW1lX2RpZmYgPj4gMV1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBzcHJpdGUuZGF0YS50cmFpbHNfaW5mby50ZXh0dXJlXzIucmVuZGVyWFkoXG4gICAgICAgICAgICAgICAgc3ByaXRlLFxuICAgICAgICAgICAgICAgIHNwcml0ZS5kYXRhLnhfaGlzdG9yeS5wb3AoKSxcbiAgICAgICAgICAgICAgICBzcHJpdGUuZGF0YS55X2hpc3RvcnkucG9wKClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5yZW5kZXJfY2FsbGJhY2tzKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcl9jYWxsYmFja3Nba2V5XSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGdldF9hbmdsZV9ieV9kaXJlY3Rpb24oY3VycmVudF9hbmdsZSwgdGFyZ2V0X2FuZ2xlLCBkaXJlY3Rpb24sIGZvdXJ0aF9xdWFkcmFudCA9IGZhbHNlKSB7XG4gICAgICAgIGxldCB0aGlzX2RpcmVjdGlvbjtcbiAgICAgICAgaWYgKGZvdXJ0aF9xdWFkcmFudCkge1xuICAgICAgICAgICAgdGFyZ2V0X2FuZ2xlID0gbnVtYmVycy5kZWdyZWUzNjAgLSB0YXJnZXRfYW5nbGU7XG4gICAgICAgICAgICB0aGlzX2RpcmVjdGlvbiA9IHRhcmdldF9hbmdsZSA8IGN1cnJlbnRfYW5nbGUgPyBcImNvdW50ZXJfY2xvY2t3aXNlXCIgOiBcImNsb2Nrd2lzZVwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpc19kaXJlY3Rpb24gPSB0YXJnZXRfYW5nbGUgPiBjdXJyZW50X2FuZ2xlID8gXCJjb3VudGVyX2Nsb2Nrd2lzZVwiIDogXCJjbG9ja3dpc2VcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpc19kaXJlY3Rpb24gPT09IGRpcmVjdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHRhcmdldF9hbmdsZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkaWZmID0gKHRhcmdldF9hbmdsZSAlIG51bWJlcnMuZGVncmVlMzYwKSAtIChjdXJyZW50X2FuZ2xlICUgbnVtYmVycy5kZWdyZWUzNjApO1xuICAgICAgICBjb25zdCBzaGlmdCA9IE1hdGguc2lnbihkaWZmKSAqIG51bWJlcnMuZGVncmVlMzYwIC0gZGlmZjtcbiAgICAgICAgY29uc3QgbmV3X3RhcmdldCA9IChjdXJyZW50X2FuZ2xlICUgbnVtYmVycy5kZWdyZWUzNjApIC0gc2hpZnQ7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09IFwiY2xvc2VzdFwiKSB7XG4gICAgICAgICAgICBsZXQgdGFyZ2V0X2RlbHRhLCBuZXdfdGFyZ2V0X2RlbHRhO1xuICAgICAgICAgICAgaWYgKG5ld190YXJnZXQgPiAwKSB7XG4gICAgICAgICAgICAgICAgbmV3X3RhcmdldF9kZWx0YSA9IG5ld190YXJnZXQgLSByYW5nZV8zNjAoY3VycmVudF9hbmdsZSk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0X2RlbHRhID0gbnVtYmVycy5kZWdyZWUzNjAgLSBuZXdfdGFyZ2V0X2RlbHRhO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRfZGVsdGEgPSB0YXJnZXRfYW5nbGUgLSByYW5nZV8zNjAoY3VycmVudF9hbmdsZSk7XG4gICAgICAgICAgICAgICAgbmV3X3RhcmdldF9kZWx0YSA9IG51bWJlcnMuZGVncmVlMzYwIC0gdGFyZ2V0X2RlbHRhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKE1hdGguYWJzKHRhcmdldF9kZWx0YSkgPCBNYXRoLmFicyhuZXdfdGFyZ2V0X2RlbHRhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXRfYW5nbGU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXdfdGFyZ2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdfdGFyZ2V0O1xuICAgIH1cbn1cbiIsImltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZF9kYXRhYmFzZXMoZ2FtZSwgZGJzKSB7XG4gICAgLy8gaW5pdGlhbGl6aW5nIGpzb24gZGF0YWJhc2UgZGF0YVxuICAgIGRicy5pbml0X2RiID0gZ2FtZS5jYWNoZS5nZXRKU09OKFwiaW5pdF9kYlwiKTtcbiAgICBkYnMubnBjX2RiID0gZ2FtZS5jYWNoZS5nZXRKU09OKFwibnBjX2RiXCIpO1xuICAgIGRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYiA9IGdhbWUuY2FjaGUuZ2V0SlNPTihcImludGVyYWN0YWJsZV9vYmplY3RzX2RiXCIpO1xuICAgIGRicy5taXNjX2FuaW1hdGlvbnNfZGIgPSBnYW1lLmNhY2hlLmdldEpTT04oXCJtaXNjX2FuaW1hdGlvbnNfZGJcIik7XG4gICAgZGJzLmNsYXNzZXNfZGIgPSBnYW1lLmNhY2hlLmdldEpTT04oXCJjbGFzc2VzX2RiXCIpO1xuICAgIGRicy5hYmlsaXRpZXNfZGIgPSBnYW1lLmNhY2hlLmdldEpTT04oXCJhYmlsaXRpZXNfZGJcIik7XG4gICAgZGJzLml0ZW1zX2RiID0gZ2FtZS5jYWNoZS5nZXRKU09OKFwiaXRlbXNfZGJcIik7XG4gICAgZGJzLmRqaW5uaV9kYiA9IGdhbWUuY2FjaGUuZ2V0SlNPTihcImRqaW5uaV9kYlwiKTtcbiAgICBkYnMuZW5lbWllc19kYiA9IGdhbWUuY2FjaGUuZ2V0SlNPTihcImVuZW1pZXNfZGJcIik7XG4gICAgZGJzLmVuZW1pZXNfcGFydGllc19kYiA9IGdhbWUuY2FjaGUuZ2V0SlNPTihcImVuZW1pZXNfcGFydGllc19kYlwiKTtcbiAgICBkYnMubWFwc19kYiA9IGdhbWUuY2FjaGUuZ2V0SlNPTihcIm1hcHNfZGJcIik7XG4gICAgZGJzLm1haW5fY2hhcnNfZGIgPSBnYW1lLmNhY2hlLmdldEpTT04oXCJtYWluX2NoYXJzX2RiXCIpO1xuICAgIGRicy5zdW1tb25zX2RiID0gZ2FtZS5jYWNoZS5nZXRKU09OKFwic3VtbW9uc19kYlwiKTtcbiAgICBkYnMuc2hvcGtlZXBfZGlhbG9nX2RiID0gZ2FtZS5jYWNoZS5nZXRKU09OKFwic2hvcGtlZXBfZGlhbG9nX2RiXCIpO1xuICAgIGRicy5zaG9wc19kYiA9IGdhbWUuY2FjaGUuZ2V0SlNPTihcInNob3BzX2RiXCIpO1xuXG4gICAgLy9mb3JtYXQgc29tZSBkYiBzdHJ1Y3R1cmVzXG4gICAgZGJzLnNob3BrZWVwX2RpYWxvZ19kYiA9IF8ubWFwS2V5cyhkYnMuc2hvcGtlZXBfZGlhbG9nX2RiLCBzaG9wa2VlcF9kaWFsb2cgPT4gc2hvcGtlZXBfZGlhbG9nLmtleV9uYW1lKTtcbiAgICBkYnMuaW50ZXJhY3RhYmxlX29iamVjdHNfZGIgPSBfLm1hcEtleXMoXG4gICAgICAgIGRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYixcbiAgICAgICAgaW50ZXJhY3RhYmxlX29iamVjdF9kYXRhID0+IGludGVyYWN0YWJsZV9vYmplY3RfZGF0YS5rZXlfbmFtZVxuICAgICk7XG4gICAgZGJzLmVuZW1pZXNfcGFydGllc19kYiA9IF8ubWFwS2V5cyhkYnMuZW5lbWllc19wYXJ0aWVzX2RiLCBlbmVteV9wYXJ0eV9kYXRhID0+IGVuZW15X3BhcnR5X2RhdGEua2V5X25hbWUpO1xuICAgIGRicy5ucGNfZGIgPSBfLm1hcEtleXMoZGJzLm5wY19kYiwgbnBjX2RhdGEgPT4gbnBjX2RhdGEua2V5X25hbWUpO1xufVxuIiwiaW1wb3J0IHtpbml0aWFsaXplX21haW5fY2hhcnMsIGluaXRpYWxpemVfY2xhc3Nlc30gZnJvbSBcIi4vbWFpbl9jaGFyc1wiO1xuaW1wb3J0IHtpbml0aWFsaXplX2FiaWxpdGllcywgaW5pdGlhbGl6ZV9maWVsZF9hYmlsaXRpZXN9IGZyb20gXCIuL2FiaWxpdGllc1wiO1xuaW1wb3J0IHtpbml0aWFsaXplX2l0ZW1zfSBmcm9tIFwiLi9pdGVtc1wiO1xuaW1wb3J0IHtpbml0aWFsaXplX2RqaW5uaSwgaW5pdGlhbGl6ZV9kamlubmlfc3ByaXRlc30gZnJvbSBcIi4vZGppbm5pXCI7XG5pbXBvcnQge2luaXRpYWxpemVfZW5lbWllc30gZnJvbSBcIi4vZW5lbWllc1wiO1xuaW1wb3J0IHtpbml0aWFsaXplX21hcHN9IGZyb20gXCIuL21hcHNcIjtcbmltcG9ydCB7aW5pdGlhbGl6ZV9taXNjX2RhdGF9IGZyb20gXCIuL21pc2NfZGF0YVwiO1xuaW1wb3J0IHtpbml0aWFsaXplX3Nob3BzfSBmcm9tIFwiLi9zaG9wc1wiO1xuaW1wb3J0IHtpbml0aWFsaXplX2ludGVyYWN0YWJsZV9vYmpzX2RhdGF9IGZyb20gXCIuL2ludGVyYWN0YWJsZV9vYmplY3RzXCI7XG5pbXBvcnQge01haW5DaGFyfSBmcm9tIFwiLi4vTWFpbkNoYXJcIjtcbmltcG9ydCB7Q2xhc3Nlc30gZnJvbSBcIi4uL0NsYXNzZXNcIjtcbmltcG9ydCB7TWFwfSBmcm9tIFwiLi4vTWFwXCI7XG5pbXBvcnQge1Nwcml0ZUJhc2V9IGZyb20gXCIuLi9TcHJpdGVCYXNlXCI7XG5pbXBvcnQge0RqaW5ufSBmcm9tIFwiLi4vRGppbm5cIjtcbmltcG9ydCB7QWJpbGl0eX0gZnJvbSBcIi4uL0FiaWxpdHlcIjtcbmltcG9ydCB7SXRlbX0gZnJvbSBcIi4uL0l0ZW1cIjtcbmltcG9ydCB7U2hvcH0gZnJvbSBcIi4uL1Nob3BcIjtcbmltcG9ydCB7RmllbGRBYmlsaXRpZXN9IGZyb20gXCIuLi9maWVsZF9hYmlsaXRpZXMvRmllbGRBYmlsaXRpZXNcIjtcbmltcG9ydCB7U3VtbW9ufSBmcm9tIFwiLi4vU3VtbW9uXCI7XG5pbXBvcnQge0dvbGRlblN1bn0gZnJvbSBcIi4uL0dvbGRlblN1blwiO1xuaW1wb3J0IHtpbml0aWFsaXplX3N1bW1vbnN9IGZyb20gXCIuL3N1bW1vbnNcIjtcblxuZXhwb3J0IHR5cGUgUGFydHlEYXRhID0ge1xuICAgIG1lbWJlcnM6IE1haW5DaGFyW107XG4gICAgY29pbnM6IG51bWJlcjtcbiAgICBnYW1lX3RpY2tldHM6IHtcbiAgICAgICAgY29pbnNfcmVtYWluaW5nOiBudW1iZXI7XG4gICAgICAgIHRpY2tldHNfYm91Z2h0OiBudW1iZXI7XG4gICAgfTtcbn07XG5cbmV4cG9ydCB0eXBlIEdhbWVJbmZvID0ge1xuICAgIG1hcHNfbGlzdDoge1ttYXBfa2V5OiBzdHJpbmddOiBNYXB9O1xuICAgIGNsYXNzZXNfbGlzdDoge1tjbGFzc19rZXk6IHN0cmluZ106IENsYXNzZXN9O1xuICAgIGVuZW1pZXNfbGlzdDoge1xuICAgICAgICBbZW5lbXlfa2V5OiBzdHJpbmddOiB7XG4gICAgICAgICAgICBkYXRhOiBhbnk7XG4gICAgICAgICAgICBzcHJpdGVfYmFzZTogU3ByaXRlQmFzZTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGRqaW5uaV9saXN0OiB7W2RqaW5uX2tleTogc3RyaW5nXTogRGppbm59O1xuICAgIGRqaW5uaV9zcHJpdGVzOiB7W2RqaW5uX2tleTogc3RyaW5nXTogU3ByaXRlQmFzZX07XG4gICAgYWJpbGl0aWVzX2xpc3Q6IHtbYWJpbGl0eV9rZXk6IHN0cmluZ106IEFiaWxpdHl9O1xuICAgIGl0ZW1zX2xpc3Q6IHtbaXRlbV9rZXk6IHN0cmluZ106IEl0ZW19O1xuICAgIHBhcnR5X2RhdGE6IFBhcnR5RGF0YTtcbiAgICBtYWluX2NoYXJfbGlzdDoge1ttYWluX2NoYXJfa2V5OiBzdHJpbmddOiBNYWluQ2hhcn07XG4gICAgbWlzY19zcHJpdGVfYmFzZV9saXN0OiB7W21pc2Nfa2V5OiBzdHJpbmddOiBTcHJpdGVCYXNlfTtcbiAgICBpdGVyX29ianNfc3ByaXRlX2Jhc2VfbGlzdDoge1tpdGVyX29ial9rZXk6IHN0cmluZ106IFNwcml0ZUJhc2V9O1xuICAgIHNob3BzX2xpc3Q6IHtbc2hvcF9rZXk6IHN0cmluZ106IFNob3B9O1xuICAgIHN1bW1vbnNfbGlzdDoge1tzdW1tb25fa2V5OiBzdHJpbmddOiBTdW1tb259O1xuICAgIGZpZWxkX2FiaWxpdGllc19saXN0OiB7W2ZpZWxkX3BzeW5lcmd5X2tleTogc3RyaW5nXTogRmllbGRBYmlsaXRpZXN9O1xufTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluaXRpYWxpemVfZ2FtZV9kYXRhKGdhbWU6IFBoYXNlci5HYW1lLCBkYXRhOiBHb2xkZW5TdW4pIHtcbiAgICBsZXQgbG9hZF9tYXBzX3Byb21pc2VfcmVzb2x2ZTtcbiAgICBjb25zdCBsb2FkX21hcHNfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICBsb2FkX21hcHNfcHJvbWlzZV9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KTtcbiAgICBkYXRhLmluZm8ubWFwc19saXN0ID0gaW5pdGlhbGl6ZV9tYXBzKGdhbWUsIGRhdGEsIGRhdGEuZGJzLm1hcHNfZGIsIGxvYWRfbWFwc19wcm9taXNlX3Jlc29sdmUpO1xuICAgIGF3YWl0IGxvYWRfbWFwc19wcm9taXNlO1xuXG4gICAgZGF0YS5pbmZvLmNsYXNzZXNfbGlzdCA9IGluaXRpYWxpemVfY2xhc3NlcyhkYXRhLmRicy5jbGFzc2VzX2RiKTtcblxuICAgIGxldCBsb2FkX2VuZW1pZXNfc3ByaXRlc19wcm9taXNlX3Jlc29sdmU7XG4gICAgY29uc3QgbG9hZF9lbmVtaWVzX3Nwcml0ZXNfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICBsb2FkX2VuZW1pZXNfc3ByaXRlc19wcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgIH0pO1xuICAgIGRhdGEuaW5mby5lbmVtaWVzX2xpc3QgPSBpbml0aWFsaXplX2VuZW1pZXMoZ2FtZSwgZGF0YS5kYnMuZW5lbWllc19kYiwgbG9hZF9lbmVtaWVzX3Nwcml0ZXNfcHJvbWlzZV9yZXNvbHZlKTtcbiAgICBhd2FpdCBsb2FkX2VuZW1pZXNfc3ByaXRlc19wcm9taXNlO1xuXG4gICAgZGF0YS5pbmZvLmRqaW5uaV9saXN0ID0gaW5pdGlhbGl6ZV9kamlubmkoZGF0YS5kYnMuZGppbm5pX2RiKTtcblxuICAgIGxldCBsb2FkX2RqaW5uaV9zcHJpdGVzX3Byb21pc2VfcmVzb2x2ZTtcbiAgICBjb25zdCBsb2FkX2RqaW5uaV9zcHJpdGVzX3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgbG9hZF9kamlubmlfc3ByaXRlc19wcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgIH0pO1xuICAgIGRhdGEuaW5mby5kamlubmlfc3ByaXRlcyA9IGluaXRpYWxpemVfZGppbm5pX3Nwcml0ZXMoZ2FtZSwgbG9hZF9kamlubmlfc3ByaXRlc19wcm9taXNlX3Jlc29sdmUpO1xuICAgIGF3YWl0IGxvYWRfZGppbm5pX3Nwcml0ZXNfcHJvbWlzZTtcblxuICAgIGxldCBsb2FkX2FiaWxpdGllc19wcm9taXNlX3Jlc29sdmU7XG4gICAgY29uc3QgbG9hZF9hYmlsaXRpZXNfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICBsb2FkX2FiaWxpdGllc19wcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgIH0pO1xuICAgIGRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdCA9IGluaXRpYWxpemVfYWJpbGl0aWVzKGdhbWUsIGRhdGEuZGJzLmFiaWxpdGllc19kYiwgbG9hZF9hYmlsaXRpZXNfcHJvbWlzZV9yZXNvbHZlKTtcbiAgICBhd2FpdCBsb2FkX2FiaWxpdGllc19wcm9taXNlO1xuXG4gICAgbGV0IGxvYWRfaXRlbXNfcHJvbWlzZV9yZXNvbHZlO1xuICAgIGNvbnN0IGxvYWRfaXRlbXNfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICBsb2FkX2l0ZW1zX3Byb21pc2VfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgfSk7XG4gICAgZGF0YS5pbmZvLml0ZW1zX2xpc3QgPSBpbml0aWFsaXplX2l0ZW1zKGdhbWUsIGRhdGEuZGJzLml0ZW1zX2RiLCBsb2FkX2l0ZW1zX3Byb21pc2VfcmVzb2x2ZSk7XG4gICAgYXdhaXQgbG9hZF9pdGVtc19wcm9taXNlO1xuXG4gICAgZGF0YS5pbmZvLnBhcnR5X2RhdGEgPSB7XG4gICAgICAgIG1lbWJlcnM6IFtdLFxuICAgICAgICBjb2luczogZGF0YS5kYnMuaW5pdF9kYi5jb2lucyxcbiAgICAgICAgZ2FtZV90aWNrZXRzOiB7Y29pbnNfcmVtYWluaW5nOiAzMDAsIHRpY2tldHNfYm91Z2h0OiAwfSxcbiAgICB9O1xuXG4gICAgbGV0IGxvYWRfY2hhcnNfcHJvbWlzZV9yZXNvbHZlO1xuICAgIGNvbnN0IGxvYWRfY2hhcnNfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICBsb2FkX2NoYXJzX3Byb21pc2VfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgfSk7XG4gICAgZGF0YS5pbmZvLm1haW5fY2hhcl9saXN0ID0gaW5pdGlhbGl6ZV9tYWluX2NoYXJzKFxuICAgICAgICBnYW1lLFxuICAgICAgICBkYXRhLmluZm8sXG4gICAgICAgIGRhdGEuZGJzLm1haW5fY2hhcnNfZGIsXG4gICAgICAgIGRhdGEuZGJzLmNsYXNzZXNfZGIsXG4gICAgICAgIGxvYWRfY2hhcnNfcHJvbWlzZV9yZXNvbHZlXG4gICAgKTtcbiAgICBhd2FpdCBsb2FkX2NoYXJzX3Byb21pc2U7XG5cbiAgICBsZXQgbG9hZF9taXNjX3Byb21pc2VfcmVzb2x2ZTtcbiAgICBjb25zdCBsb2FkX21pc2NfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICBsb2FkX21pc2NfcHJvbWlzZV9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KTtcbiAgICBkYXRhLmluZm8ubWlzY19zcHJpdGVfYmFzZV9saXN0ID0gaW5pdGlhbGl6ZV9taXNjX2RhdGEoXG4gICAgICAgIGdhbWUsXG4gICAgICAgIGRhdGEuZGJzLm1pc2NfYW5pbWF0aW9uc19kYixcbiAgICAgICAgbG9hZF9taXNjX3Byb21pc2VfcmVzb2x2ZVxuICAgICk7XG4gICAgYXdhaXQgbG9hZF9taXNjX3Byb21pc2U7XG5cbiAgICBsZXQgbG9hZF9pdGVyX29ianNfcHJvbWlzZV9yZXNvbHZlO1xuICAgIGNvbnN0IGxvYWRfaXRlcl9vYmpzX3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgbG9hZF9pdGVyX29ianNfcHJvbWlzZV9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KTtcbiAgICBkYXRhLmluZm8uaXRlcl9vYmpzX3Nwcml0ZV9iYXNlX2xpc3QgPSBpbml0aWFsaXplX2ludGVyYWN0YWJsZV9vYmpzX2RhdGEoXG4gICAgICAgIGdhbWUsXG4gICAgICAgIGRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiLFxuICAgICAgICBsb2FkX2l0ZXJfb2Jqc19wcm9taXNlX3Jlc29sdmVcbiAgICApO1xuICAgIGF3YWl0IGxvYWRfaXRlcl9vYmpzX3Byb21pc2U7XG5cbiAgICBkYXRhLmluZm8uc2hvcHNfbGlzdCA9IGluaXRpYWxpemVfc2hvcHMoZGF0YS5kYnMuc2hvcHNfZGIpO1xuXG4gICAgZGF0YS5pbmZvLnN1bW1vbnNfbGlzdCA9IGluaXRpYWxpemVfc3VtbW9ucyhkYXRhLmRicy5zdW1tb25zX2RiKTtcblxuICAgIGRhdGEuaW5mby5maWVsZF9hYmlsaXRpZXNfbGlzdCA9IGluaXRpYWxpemVfZmllbGRfYWJpbGl0aWVzKGdhbWUsIGRhdGEpO1xufVxuIiwiaW1wb3J0IHtDbGFzc2VzfSBmcm9tIFwiLi4vQ2xhc3Nlc1wiO1xuaW1wb3J0IHtNYWluQ2hhcn0gZnJvbSBcIi4uL01haW5DaGFyXCI7XG5pbXBvcnQge1Nwcml0ZUJhc2V9IGZyb20gXCIuLi9TcHJpdGVCYXNlXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplX2NsYXNzZXMoY2xhc3Nlc19kYikge1xuICAgIGxldCBjbGFzc2VzX2xpc3QgPSB7fTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNsYXNzZXNfZGIuY2xhc3Nlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCBjbGFzc19kYXRhID0gY2xhc3Nlc19kYi5jbGFzc2VzW2ldO1xuICAgICAgICBjbGFzc2VzX2xpc3RbY2xhc3NfZGF0YS5rZXlfbmFtZV0gPSBuZXcgQ2xhc3NlcyhcbiAgICAgICAgICAgIGNsYXNzX2RhdGEua2V5X25hbWUsXG4gICAgICAgICAgICBjbGFzc19kYXRhLm5hbWUsXG4gICAgICAgICAgICBjbGFzc19kYXRhLnJlcXVpcmVkX3ZlbnVzX2xldmVsLFxuICAgICAgICAgICAgY2xhc3NfZGF0YS5yZXF1aXJlZF9tZXJjdXJ5X2xldmVsLFxuICAgICAgICAgICAgY2xhc3NfZGF0YS5yZXF1aXJlZF9tYXJzX2xldmVsLFxuICAgICAgICAgICAgY2xhc3NfZGF0YS5yZXF1aXJlZF9qdXBpdGVyX2xldmVsLFxuICAgICAgICAgICAgY2xhc3NfZGF0YS5ocF9ib29zdCxcbiAgICAgICAgICAgIGNsYXNzX2RhdGEucHBfYm9vc3QsXG4gICAgICAgICAgICBjbGFzc19kYXRhLmF0a19ib29zdCxcbiAgICAgICAgICAgIGNsYXNzX2RhdGEuZGVmX2Jvb3N0LFxuICAgICAgICAgICAgY2xhc3NfZGF0YS5hZ2lfYm9vc3QsXG4gICAgICAgICAgICBjbGFzc19kYXRhLmx1a19ib29zdCxcbiAgICAgICAgICAgIGNsYXNzX2RhdGEuYWJpbGl0eV9sZXZlbF9wYWlycyxcbiAgICAgICAgICAgIGNsYXNzX2RhdGEuY2xhc3NfdHlwZSxcbiAgICAgICAgICAgIGNsYXNzX2RhdGEudnVsbmVyYWJpbGl0aWVzXG4gICAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBjbGFzc2VzX2xpc3Q7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplX21haW5fY2hhcnMoZ2FtZSwgaW5mbywgbWFpbl9jaGFyc19kYiwgY2xhc3Nlc19kYiwgbG9hZF9wcm9taXNlX3Jlc29sdmUpIHtcbiAgICBsZXQgbG9hZF9wcm9taXNlcyA9IFtdO1xuICAgIGxldCBtYWluX2NoYXJfbGlzdCA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWFpbl9jaGFyc19kYi5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCBjaGFyX2RhdGEgPSBtYWluX2NoYXJzX2RiW2ldO1xuICAgICAgICBjb25zdCBzcHJpdGVfYmFzZSA9IG5ldyBTcHJpdGVCYXNlKFxuICAgICAgICAgICAgY2hhcl9kYXRhLmtleV9uYW1lLFxuICAgICAgICAgICAgY2hhcl9kYXRhLmFjdGlvbnMubWFwKGFjdGlvbiA9PiBhY3Rpb24ua2V5KVxuICAgICAgICApO1xuICAgICAgICBtYWluX2NoYXJfbGlzdFtjaGFyX2RhdGEua2V5X25hbWVdID0gbmV3IE1haW5DaGFyKFxuICAgICAgICAgICAgY2hhcl9kYXRhLmtleV9uYW1lLFxuICAgICAgICAgICAgaW5mbyxcbiAgICAgICAgICAgIHNwcml0ZV9iYXNlLFxuICAgICAgICAgICAgY2hhcl9kYXRhLndhbGtfc3BlZWQsXG4gICAgICAgICAgICBjaGFyX2RhdGEuZGFzaF9zcGVlZCxcbiAgICAgICAgICAgIGNoYXJfZGF0YS5jbGltYl9zcGVlZCxcbiAgICAgICAgICAgIGNoYXJfZGF0YS5uYW1lLFxuICAgICAgICAgICAgY2hhcl9kYXRhLmhwX2N1cnZlLFxuICAgICAgICAgICAgY2hhcl9kYXRhLnBwX2N1cnZlLFxuICAgICAgICAgICAgY2hhcl9kYXRhLmF0a19jdXJ2ZSxcbiAgICAgICAgICAgIGNoYXJfZGF0YS5kZWZfY3VydmUsXG4gICAgICAgICAgICBjaGFyX2RhdGEuYWdpX2N1cnZlLFxuICAgICAgICAgICAgY2hhcl9kYXRhLmx1a19jdXJ2ZSxcbiAgICAgICAgICAgIGNoYXJfZGF0YS5leHBfY3VydmUsXG4gICAgICAgICAgICBjaGFyX2RhdGEuc3RhcnRpbmdfbGV2ZWwsXG4gICAgICAgICAgICBjbGFzc2VzX2RiLmNsYXNzX3RhYmxlLFxuICAgICAgICAgICAgY2hhcl9kYXRhLmJhdHRsZV9zY2FsZSxcbiAgICAgICAgICAgIGNoYXJfZGF0YS52ZW51c19sZXZlbF9iYXNlLFxuICAgICAgICAgICAgY2hhcl9kYXRhLm1lcmN1cnlfbGV2ZWxfYmFzZSxcbiAgICAgICAgICAgIGNoYXJfZGF0YS5tYXJzX2xldmVsX2Jhc2UsXG4gICAgICAgICAgICBjaGFyX2RhdGEuanVwaXRlcl9sZXZlbF9iYXNlLFxuICAgICAgICAgICAgY2hhcl9kYXRhLnZlbnVzX3Bvd2VyX2Jhc2UsXG4gICAgICAgICAgICBjaGFyX2RhdGEubWVyY3VyeV9wb3dlcl9iYXNlLFxuICAgICAgICAgICAgY2hhcl9kYXRhLm1hcnNfcG93ZXJfYmFzZSxcbiAgICAgICAgICAgIGNoYXJfZGF0YS5qdXBpdGVyX3Bvd2VyX2Jhc2UsXG4gICAgICAgICAgICBjaGFyX2RhdGEudmVudXNfcmVzaXN0X2Jhc2UsXG4gICAgICAgICAgICBjaGFyX2RhdGEubWVyY3VyeV9yZXNpc3RfYmFzZSxcbiAgICAgICAgICAgIGNoYXJfZGF0YS5tYXJzX3Jlc2lzdF9iYXNlLFxuICAgICAgICAgICAgY2hhcl9kYXRhLmp1cGl0ZXJfcmVzaXN0X2Jhc2UsXG4gICAgICAgICAgICBjaGFyX2RhdGEuaW5uYXRlX2FiaWxpdGllcyxcbiAgICAgICAgICAgIGNoYXJfZGF0YS5pbl9wYXJ0eSxcbiAgICAgICAgICAgIGNoYXJfZGF0YS5kamlubmksXG4gICAgICAgICAgICBjaGFyX2RhdGEuaXRlbXMsXG4gICAgICAgICAgICBjaGFyX2RhdGEuYmF0dGxlX2FuaW1hdGlvbnNfdmFyaWF0aW9uc1xuICAgICAgICApO1xuICAgICAgICBpZiAoY2hhcl9kYXRhLmluX3BhcnR5KSB7XG4gICAgICAgICAgICBpbmZvLnBhcnR5X2RhdGEubWVtYmVycy5wdXNoKG1haW5fY2hhcl9saXN0W2NoYXJfZGF0YS5rZXlfbmFtZV0pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY2hhcl9kYXRhLmFjdGlvbnMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgIGNvbnN0IGFjdGlvbiA9IGNoYXJfZGF0YS5hY3Rpb25zW2pdO1xuICAgICAgICAgICAgc3ByaXRlX2Jhc2Uuc2V0QWN0aW9uU3ByaXRlc2hlZXQoYWN0aW9uLmtleSwgYWN0aW9uLnNwcml0ZXNoZWV0X2ltZywgYWN0aW9uLnNwcml0ZXNoZWV0KTtcbiAgICAgICAgICAgIHNwcml0ZV9iYXNlLnNldEFjdGlvbkRpcmVjdGlvbnMoYWN0aW9uLmtleSwgYWN0aW9uLmRpcmVjdGlvbnMsIGFjdGlvbi5kaXJlY3Rpb25zX2ZyYW1lc19udW1iZXIpO1xuICAgICAgICAgICAgc3ByaXRlX2Jhc2Uuc2V0QWN0aW9uRnJhbWVSYXRlKGFjdGlvbi5rZXksIGFjdGlvbi5mcmFtZV9yYXRlKTtcbiAgICAgICAgICAgIHNwcml0ZV9iYXNlLnNldEFjdGlvbkxvb3AoYWN0aW9uLmtleSwgYWN0aW9uLmxvb3ApO1xuICAgICAgICB9XG4gICAgICAgIHNwcml0ZV9iYXNlLmdlbmVyYXRlQWxsRnJhbWVzKCk7XG5cbiAgICAgICAgbGV0IGxvYWRfc3ByaXRlc2hlZXRfcHJvbWlzZV9yZXNvbHZlO1xuICAgICAgICBjb25zdCBsb2FkX3Nwcml0ZXNoZWV0X3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIGxvYWRfc3ByaXRlc2hlZXRfcHJvbWlzZV9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGxvYWRfcHJvbWlzZXMucHVzaChsb2FkX3Nwcml0ZXNoZWV0X3Byb21pc2UpO1xuICAgICAgICBzcHJpdGVfYmFzZS5sb2FkU3ByaXRlc2hlZXRzKGdhbWUsIHRydWUsIGxvYWRfc3ByaXRlc2hlZXRfcHJvbWlzZV9yZXNvbHZlKTtcbiAgICB9XG4gICAgUHJvbWlzZS5hbGwobG9hZF9wcm9taXNlcykudGhlbihsb2FkX3Byb21pc2VfcmVzb2x2ZSk7XG4gICAgcmV0dXJuIG1haW5fY2hhcl9saXN0O1xufVxuIiwiaW1wb3J0IHtBYmlsaXR5fSBmcm9tIFwiLi4vQWJpbGl0eVwiO1xuaW1wb3J0IHtNb3ZlRmllbGRQc3luZXJneX0gZnJvbSBcIi4uL2ZpZWxkX2FiaWxpdGllcy9Nb3ZlRmllbGRQc3luZXJneVwiO1xuaW1wb3J0IHtGcm9zdEZpZWxkUHN5bmVyZ3l9IGZyb20gXCIuLi9maWVsZF9hYmlsaXRpZXMvRnJvc3RGaWVsZFBzeW5lcmd5XCI7XG5pbXBvcnQge0dyb3d0aEZpZWxkUHN5bmVyZ3l9IGZyb20gXCIuLi9maWVsZF9hYmlsaXRpZXMvR3Jvd3RoRmllbGRQc3luZXJneVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZV9hYmlsaXRpZXMoZ2FtZSwgYWJpbGl0aWVzX2RiLCBsb2FkX3Byb21pc2VfcmVzb2x2ZSkge1xuICAgIGxldCBhYmlsaXRpZXNfbGlzdCA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWJpbGl0aWVzX2RiLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IGFiaWxpdHlfZGF0YSA9IGFiaWxpdGllc19kYltpXTtcbiAgICAgICAgYWJpbGl0aWVzX2xpc3RbYWJpbGl0eV9kYXRhLmtleV9uYW1lXSA9IG5ldyBBYmlsaXR5KFxuICAgICAgICAgICAgYWJpbGl0eV9kYXRhLmtleV9uYW1lLFxuICAgICAgICAgICAgYWJpbGl0eV9kYXRhLm5hbWUsXG4gICAgICAgICAgICBhYmlsaXR5X2RhdGEuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBhYmlsaXR5X2RhdGEudHlwZSxcbiAgICAgICAgICAgIGFiaWxpdHlfZGF0YS5lbGVtZW50LFxuICAgICAgICAgICAgYWJpbGl0eV9kYXRhLmJhdHRsZV90YXJnZXQsXG4gICAgICAgICAgICBhYmlsaXR5X2RhdGEucmFuZ2UsXG4gICAgICAgICAgICBhYmlsaXR5X2RhdGEucHBfY29zdCxcbiAgICAgICAgICAgIGFiaWxpdHlfZGF0YS5hYmlsaXR5X3Bvd2VyLFxuICAgICAgICAgICAgYWJpbGl0eV9kYXRhLmVmZmVjdHNfb3V0c2lkZV9iYXR0bGUsXG4gICAgICAgICAgICBhYmlsaXR5X2RhdGEuaXNfYmF0dGxlX2FiaWxpdHksXG4gICAgICAgICAgICBhYmlsaXR5X2RhdGEuaXNfZmllbGRfcHN5bmVyZ3ksXG4gICAgICAgICAgICBhYmlsaXR5X2RhdGEuZWZmZWN0cyxcbiAgICAgICAgICAgIGFiaWxpdHlfZGF0YS5hYmlsaXR5X2NhdGVnb3J5LFxuICAgICAgICAgICAgYWJpbGl0eV9kYXRhLmJhdHRsZV9hbmltYXRpb25fa2V5LFxuICAgICAgICAgICAgYWJpbGl0eV9kYXRhLnByaW9yaXR5X21vdmUsXG4gICAgICAgICAgICBhYmlsaXR5X2RhdGEuaGFzX2NyaXRpY2FsLFxuICAgICAgICAgICAgYWJpbGl0eV9kYXRhLmNyaXRfbXVsdF9mYWN0b3IsXG4gICAgICAgICAgICBhYmlsaXR5X2RhdGEuY2FuX3N3aXRjaF90b191bmxlYXNoLFxuICAgICAgICAgICAgYWJpbGl0eV9kYXRhLmNhbl9iZV9ldmFkZWQsXG4gICAgICAgICAgICBhYmlsaXR5X2RhdGEudXNlX2RpbWluaXNoaW5nX3JhdGlvLFxuICAgICAgICAgICAgYWJpbGl0eV9kYXRhLm1zZ190eXBlLFxuICAgICAgICAgICAgYWJpbGl0eV9kYXRhLmFmZmVjdHNfcHAsXG4gICAgICAgICAgICBhYmlsaXR5X2RhdGEuaGFzX2FuaW1hdGlvbl92YXJpYXRpb25cbiAgICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgbG9hZGVyID0gZ2FtZS5sb2FkLmF0bGFzSlNPTkhhc2goXG4gICAgICAgIFwiYWJpbGl0aWVzX2ljb25zXCIsXG4gICAgICAgIFwiYXNzZXRzL2ltYWdlcy9pY29ucy9hYmlsaXRpZXMvYWJpbGl0aWVzX2ljb25zLnBuZ1wiLFxuICAgICAgICBcImFzc2V0cy9pbWFnZXMvaWNvbnMvYWJpbGl0aWVzL2FiaWxpdGllc19pY29ucy5qc29uXCJcbiAgICApO1xuICAgIGxvYWRlci5vbkxvYWRDb21wbGV0ZS5hZGRPbmNlKGxvYWRfcHJvbWlzZV9yZXNvbHZlKTtcbiAgICBnYW1lLmxvYWQuc3RhcnQoKTtcbiAgICByZXR1cm4gYWJpbGl0aWVzX2xpc3Q7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplX2ZpZWxkX2FiaWxpdGllcyhnYW1lLCBkYXRhKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbW92ZTogbmV3IE1vdmVGaWVsZFBzeW5lcmd5KGdhbWUsIGRhdGEpLFxuICAgICAgICBmcm9zdDogbmV3IEZyb3N0RmllbGRQc3luZXJneShnYW1lLCBkYXRhKSxcbiAgICAgICAgZ3Jvd3RoOiBuZXcgR3Jvd3RoRmllbGRQc3luZXJneShnYW1lLCBkYXRhKSxcbiAgICB9O1xufVxuIiwiaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tIFwiLi4vbWFnaWNfbnVtYmVyc1wiO1xuaW1wb3J0IHt0YXJnZXRfb25seV9wdXNofSBmcm9tIFwiLi4vaW50ZXJhY3RhYmxlX29iamVjdHMvcHVzaFwiO1xuaW1wb3J0IHtkaXJlY3Rpb25zLCByZXZlcnNlX2RpcmVjdGlvbnMsIGpvaW5fZGlyZWN0aW9ucywgYmFzZV9hY3Rpb25zfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCB7RmllbGRBYmlsaXRpZXN9IGZyb20gXCIuL0ZpZWxkQWJpbGl0aWVzXCI7XG5pbXBvcnQge1Nwcml0ZUJhc2V9IGZyb20gXCIuLi9TcHJpdGVCYXNlXCI7XG5cbmV4cG9ydCBjbGFzcyBNb3ZlRmllbGRQc3luZXJneSBleHRlbmRzIEZpZWxkQWJpbGl0aWVzIHtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBBQklMSVRZX0tFWV9OQU1FID0gXCJtb3ZlXCI7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgQUNUSU9OX0tFWV9OQU1FID0gXCJjYXN0XCI7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgTUFYX0hBTkRfVFJBTlNMQVRFID0gMTY7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgTU9WRV9NQVhfUkFOR0UgPSAyNjtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBNT1ZFX0hBTkRfS0VZX05BTUUgPSBcIm1vdmVfaGFuZFwiO1xuXG4gICAgcHVibGljIGhhbmRfc3ByaXRlX2Jhc2U6IFNwcml0ZUJhc2U7XG4gICAgcHVibGljIGhhbmRfc3ByaXRlOiBQaGFzZXIuU3ByaXRlO1xuICAgIHB1YmxpYyBlbWl0dGVyOiBQaGFzZXIuUGFydGljbGVzLkFyY2FkZS5FbWl0dGVyO1xuICAgIHB1YmxpYyBmaW5hbF9lbWl0dGVyOiBQaGFzZXIuUGFydGljbGVzLkFyY2FkZS5FbWl0dGVyO1xuICAgIHB1YmxpYyB0YXJnZXRfaHVlc2hpZnRfdGltZXI6IFBoYXNlci5UaW1lcjtcbiAgICBwdWJsaWMgZmluYWxfZW1pdHRlcl9wYXJ0aWNsZXNfY291bnQ6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEpIHtcbiAgICAgICAgc3VwZXIoXG4gICAgICAgICAgICBnYW1lLFxuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIE1vdmVGaWVsZFBzeW5lcmd5LkFCSUxJVFlfS0VZX05BTUUsXG4gICAgICAgICAgICBNb3ZlRmllbGRQc3luZXJneS5NT1ZFX01BWF9SQU5HRSxcbiAgICAgICAgICAgIE1vdmVGaWVsZFBzeW5lcmd5LkFDVElPTl9LRVlfTkFNRSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zZXRfYm9vdHN0cmFwX21ldGhvZCh0aGlzLmluaXRfbW92ZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5zZXRfY2FzdF9maW5pc2hlcl9tZXRob2QodGhpcy51bnNldF9odWVfc2hpZnRlci5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5oYW5kX3Nwcml0ZV9iYXNlID0gdGhpcy5kYXRhLmluZm8ubWlzY19zcHJpdGVfYmFzZV9saXN0W01vdmVGaWVsZFBzeW5lcmd5Lk1PVkVfSEFORF9LRVlfTkFNRV07XG4gICAgICAgIGNvbnN0IHNwcml0ZV9rZXkgPSB0aGlzLmhhbmRfc3ByaXRlX2Jhc2UuZ2V0QWN0aW9uS2V5KE1vdmVGaWVsZFBzeW5lcmd5Lk1PVkVfSEFORF9LRVlfTkFNRSk7XG4gICAgICAgIHRoaXMuaGFuZF9zcHJpdGUgPSB0aGlzLmdhbWUuYWRkLnNwcml0ZSgwLCAwLCBzcHJpdGVfa2V5KTtcbiAgICAgICAgdGhpcy5oYW5kX3Nwcml0ZS52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaGFuZF9zcHJpdGVfYmFzZS5zZXRBbmltYXRpb24odGhpcy5oYW5kX3Nwcml0ZSwgTW92ZUZpZWxkUHN5bmVyZ3kuTU9WRV9IQU5EX0tFWV9OQU1FKTtcbiAgICAgICAgdGhpcy5lbWl0dGVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5maW5hbF9lbWl0dGVyID0gbnVsbDtcbiAgICB9XG5cbiAgICBzZXRfY29udHJvbHMoKSB7XG4gICAgICAgIGxldCBjb250cm9scyA9IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkxFRlQsXG4gICAgICAgICAgICAgICAgb25fZG93bjogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnRyeWluZ190b19wdXNoX2RpcmVjdGlvbiA9IGRpcmVjdGlvbnMubGVmdDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJlX3B1c2goKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLlJJR0hULFxuICAgICAgICAgICAgICAgIG9uX2Rvd246ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhci50cnlpbmdfdG9fcHVzaF9kaXJlY3Rpb24gPSBkaXJlY3Rpb25zLnJpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmVfcHVzaCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGtleTogdGhpcy5kYXRhLmdhbWVwYWQuVVAsXG4gICAgICAgICAgICAgICAgb25fZG93bjogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnRyeWluZ190b19wdXNoX2RpcmVjdGlvbiA9IGRpcmVjdGlvbnMudXA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZV9wdXNoKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAga2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5ET1dOLFxuICAgICAgICAgICAgICAgIG9uX2Rvd246ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhci50cnlpbmdfdG9fcHVzaF9kaXJlY3Rpb24gPSBkaXJlY3Rpb25zLmRvd247XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZV9wdXNoKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAga2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5CLFxuICAgICAgICAgICAgICAgIG9uX2Rvd246ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maW5pc2hfaGFuZCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc2V0X2hlcm9fY2FzdF9hbmltKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF07XG5cbiAgICAgICAgdGhpcy5kYXRhLmNvbnRyb2xfbWFuYWdlci5zZXRfY29udHJvbChjb250cm9scyk7XG4gICAgfVxuXG4gICAgZmlyZV9wdXNoKCkge1xuICAgICAgICBpZiAodGhpcy5kYXRhLm1hcC5jb2xsaXNpb25fbGF5ZXIgPT09IHRoaXMudGFyZ2V0X29iamVjdC5iYXNlX2NvbGxpc2lvbl9sYXllcikge1xuICAgICAgICAgICAgbGV0IGl0ZW1fcG9zaXRpb24gPSB0aGlzLnRhcmdldF9vYmplY3QuZ2V0X2N1cnJlbnRfcG9zaXRpb24odGhpcy5kYXRhLm1hcCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuY29udHJvbGxhYmxlX2NoYXIudHJ5aW5nX3RvX3B1c2hfZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBkaXJlY3Rpb25zLnVwOlxuICAgICAgICAgICAgICAgICAgICBpdGVtX3Bvc2l0aW9uLnkgLT0gMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBkaXJlY3Rpb25zLmRvd246XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1fcG9zaXRpb24ueSArPSAxO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMubGVmdDpcbiAgICAgICAgICAgICAgICAgICAgaXRlbV9wb3NpdGlvbi54IC09IDE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5yaWdodDpcbiAgICAgICAgICAgICAgICAgICAgaXRlbV9wb3NpdGlvbi54ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHBvc2l0aW9uX2FsbG93ZWQgPSB0aGlzLnRhcmdldF9vYmplY3QucG9zaXRpb25fYWxsb3dlZChpdGVtX3Bvc2l0aW9uLngsIGl0ZW1fcG9zaXRpb24ueSk7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgcG9zaXRpb25fYWxsb3dlZCAmJlxuICAgICAgICAgICAgICAgICEoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbGxhYmxlX2NoYXIudGlsZV94X3BvcyA9PT0gaXRlbV9wb3NpdGlvbi54ICYmXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbGxhYmxlX2NoYXIudGlsZV95X3BvcyA9PT0gaXRlbV9wb3NpdGlvbi55XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmNvbnRyb2xfbWFuYWdlci5yZXNldCgpO1xuICAgICAgICAgICAgICAgIHRhcmdldF9vbmx5X3B1c2goXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldF9vYmplY3QsXG4gICAgICAgICAgICAgICAgICAgICh4X3NoaWZ0LCB5X3NoaWZ0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB4X3RhcmdldCA9IHRoaXMuaGFuZF9zcHJpdGUueCArIHhfc2hpZnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB5X3RhcmdldCA9IHRoaXMuaGFuZF9zcHJpdGUueSArIHlfc2hpZnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWUuYWRkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnR3ZWVuKHRoaXMuaGFuZF9zcHJpdGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRvKHt4OiB4X3RhcmdldCwgeTogeV90YXJnZXR9LCBudW1iZXJzLlBVU0hfVElNRSwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWUudGltZS5ldmVudHMuYWRkKG51bWJlcnMuUFVTSF9USU1FID4+IDEsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmVlZF9jaGFuZ2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtkaXJlY3Rpb25zLnVwLCBkaXJlY3Rpb25zLmRvd25dLmluY2x1ZGVzKHRoaXMuY2FzdF9kaXJlY3Rpb24pICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtkaXJlY3Rpb25zLmxlZnQsIGRpcmVjdGlvbnMucmlnaHRdLmluY2x1ZGVzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhci50cnlpbmdfdG9fcHVzaF9kaXJlY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhc3RfZGlyZWN0aW9uID0gam9pbl9kaXJlY3Rpb25zKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYXN0X2RpcmVjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbGxhYmxlX2NoYXIudHJ5aW5nX3RvX3B1c2hfZGlyZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5lZWRfY2hhbmdlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbZGlyZWN0aW9ucy51cCwgZGlyZWN0aW9ucy5kb3duXS5pbmNsdWRlcyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbGxhYmxlX2NoYXIudHJ5aW5nX3RvX3B1c2hfZGlyZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2RpcmVjdGlvbnMubGVmdCwgZGlyZWN0aW9ucy5yaWdodF0uaW5jbHVkZXModGhpcy5jYXN0X2RpcmVjdGlvbilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYXN0X2RpcmVjdGlvbiA9IGpvaW5fZGlyZWN0aW9ucyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbGxhYmxlX2NoYXIudHJ5aW5nX3RvX3B1c2hfZGlyZWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYXN0X2RpcmVjdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZWVkX2NoYW5nZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbmVlZF9jaGFuZ2UpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNldF9kaXJlY3Rpb24odGhpcy5jYXN0X2RpcmVjdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUuYW5pbWF0aW9ucy5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVzdF9kaXJlY3Rpb24gPSByZXZlcnNlX2RpcmVjdGlvbnNbdGhpcy5jYXN0X2RpcmVjdGlvbl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5pbV9rZXkgPSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZV9pbmZvLmdldEFuaW1hdGlvbktleShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFzZV9hY3Rpb25zLkNBU1QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RfZGlyZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS5hbmltYXRpb25zLnBsYXkoYW5pbV9rZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLmFuaW1hdGlvbnMuY3VycmVudEFuaW0uc3RvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZyYW1lX25hbWUgPSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZV9pbmZvLmdldEZyYW1lTmFtZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFzZV9hY3Rpb25zLkNBU1QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RfZGlyZWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS5hbmltYXRpb25zLmZyYW1lTmFtZSA9IGZyYW1lX25hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9zX3Nxcl9kaXN0YW5jZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5wb3codGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUuYm9keS54IC0gdGhpcy50YXJnZXRfb2JqZWN0LnNwcml0ZS5ib2R5LngsIDIpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLnBvdyh0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS5ib2R5LnkgLSB0aGlzLnRhcmdldF9vYmplY3Quc3ByaXRlLmJvZHkueSwgMik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByYWRfc3FyX2Rpc3RhbmNlID0gTWF0aC5wb3coXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVycy5IRVJPX0JPRFlfUkFESVVTICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYlt0aGlzLnRhcmdldF9vYmplY3Qua2V5X25hbWVdLmJvZHlfcmFkaXVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zX3Nxcl9kaXN0YW5jZSA8PSByYWRfc3FyX2Rpc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUuYm9keS54ID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuY29udHJvbGxhYmxlX2NoYXIudGlsZV94X3BvcyArIDAuNSkgKiB0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUuYm9keS55ID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuY29udHJvbGxhYmxlX2NoYXIudGlsZV95X3BvcyArIDAuNSkgKiB0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc2hhZG93LnggPSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS5ib2R5Lng7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhci5zaGFkb3cueSA9IHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLmJvZHkueTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLmJvZHkudmVsb2NpdHkueCA9IHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLmJvZHkudmVsb2NpdHkueSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbmlzaF9oYW5kKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc2V0X2hlcm9fY2FzdF9hbmltKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEubWFwLnNvcnRfc3ByaXRlcygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldF9oYW5kKCkge1xuICAgICAgICB0aGlzLmRhdGEub3ZlcmxheWVyX2dyb3VwLmFkZCh0aGlzLmhhbmRfc3ByaXRlKTtcbiAgICAgICAgdGhpcy5kYXRhLm92ZXJsYXllcl9ncm91cC5icmluZ1RvVG9wKHRoaXMuaGFuZF9zcHJpdGUpO1xuICAgICAgICB0aGlzLmhhbmRfc3ByaXRlLnZpc2libGUgPSB0cnVlO1xuICAgICAgICB0aGlzLmhhbmRfc3ByaXRlLnNjYWxlLnNldFRvKDEsIDEpO1xuICAgICAgICB0aGlzLmhhbmRfc3ByaXRlLnNlbmRfdG9fZnJvbnQgPSB0cnVlO1xuICAgICAgICB0aGlzLmhhbmRfc3ByaXRlLmJhc2VfY29sbGlzaW9uX2xheWVyID0gdGhpcy5kYXRhLm1hcC5jb2xsaXNpb25fbGF5ZXI7XG4gICAgICAgIHRoaXMuaGFuZF9zcHJpdGUuYW5pbWF0aW9ucy5jdXJyZW50QW5pbS5zdG9wKHRydWUpO1xuICAgICAgICB0aGlzLmhhbmRfc3ByaXRlLmZyYW1lTmFtZSA9IHRoaXMuaGFuZF9zcHJpdGVfYmFzZS5nZXRGcmFtZU5hbWUoXG4gICAgICAgICAgICBNb3ZlRmllbGRQc3luZXJneS5NT1ZFX0hBTkRfS0VZX05BTUUsXG4gICAgICAgICAgICByZXZlcnNlX2RpcmVjdGlvbnNbdGhpcy5jYXN0X2RpcmVjdGlvbl0sXG4gICAgICAgICAgICAwXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuaGFuZF9zcHJpdGUuYW5jaG9yLnggPSAwLjU7XG4gICAgICAgIHRoaXMuaGFuZF9zcHJpdGUuY2VudGVyWCA9IHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLmNlbnRlclg7XG4gICAgICAgIHRoaXMuaGFuZF9zcHJpdGUuY2VudGVyWSA9IHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLmNlbnRlclk7XG4gICAgfVxuXG4gICAgdHJhbnNsYXRlX2hhbmQoKSB7XG4gICAgICAgIGxldCB0cmFuc2xhdGVfeCA9IHRoaXMuaGFuZF9zcHJpdGUuY2VudGVyWDtcbiAgICAgICAgbGV0IHRyYW5zbGF0ZV95ID0gdGhpcy5oYW5kX3Nwcml0ZS5jZW50ZXJZO1xuICAgICAgICBzd2l0Y2ggKHRoaXMuY2FzdF9kaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy51cDpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50YXJnZXRfZm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlX3ggPSB0aGlzLnRhcmdldF9vYmplY3Quc3ByaXRlLmNlbnRlclg7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZV95ID0gdGhpcy50YXJnZXRfb2JqZWN0LnNwcml0ZS55O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZV95IC09IE1vdmVGaWVsZFBzeW5lcmd5Lk1BWF9IQU5EX1RSQU5TTEFURTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMuZG93bjpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50YXJnZXRfZm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlX3ggPSB0aGlzLnRhcmdldF9vYmplY3Quc3ByaXRlLmNlbnRlclg7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZV95ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0X29iamVjdC5zcHJpdGUueSAtXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldF9vYmplY3Quc3ByaXRlLmhlaWdodCArXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiW3RoaXMudGFyZ2V0X29iamVjdC5rZXlfbmFtZV0uYm9keV9yYWRpdXM7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlX3kgKz0gTW92ZUZpZWxkUHN5bmVyZ3kuTUFYX0hBTkRfVFJBTlNMQVRFO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5yaWdodDpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50YXJnZXRfZm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlX3ggPVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXRfb2JqZWN0LnNwcml0ZS54IC1cbiAgICAgICAgICAgICAgICAgICAgICAgIDIgKiB0aGlzLmRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiW3RoaXMudGFyZ2V0X29iamVjdC5rZXlfbmFtZV0uYm9keV9yYWRpdXM7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZV95ID0gdGhpcy50YXJnZXRfb2JqZWN0LnNwcml0ZS5jZW50ZXJZO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZV94ICs9IE1vdmVGaWVsZFBzeW5lcmd5Lk1BWF9IQU5EX1RSQU5TTEFURTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMubGVmdDpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50YXJnZXRfZm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlX3ggPVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXRfb2JqZWN0LnNwcml0ZS54ICtcbiAgICAgICAgICAgICAgICAgICAgICAgIDIgKiB0aGlzLmRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiW3RoaXMudGFyZ2V0X29iamVjdC5rZXlfbmFtZV0uYm9keV9yYWRpdXM7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZV95ID0gdGhpcy50YXJnZXRfb2JqZWN0LnNwcml0ZS5jZW50ZXJZO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZV94IC09IE1vdmVGaWVsZFBzeW5lcmd5Lk1BWF9IQU5EX1RSQU5TTEFURTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5nYW1lLmFkZFxuICAgICAgICAgICAgLnR3ZWVuKHRoaXMuaGFuZF9zcHJpdGUpXG4gICAgICAgICAgICAudG8oe2NlbnRlclg6IHRyYW5zbGF0ZV94LCBjZW50ZXJZOiB0cmFuc2xhdGVfeX0sIDIwMCwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSwgdHJ1ZSlcbiAgICAgICAgICAgIC5vbkNvbXBsZXRlLmFkZE9uY2UoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFuaW1fa2V5ID0gdGhpcy5oYW5kX3Nwcml0ZV9iYXNlLmdldEFuaW1hdGlvbktleShcbiAgICAgICAgICAgICAgICAgICAgTW92ZUZpZWxkUHN5bmVyZ3kuTU9WRV9IQU5EX0tFWV9OQU1FLFxuICAgICAgICAgICAgICAgICAgICByZXZlcnNlX2RpcmVjdGlvbnNbdGhpcy5jYXN0X2RpcmVjdGlvbl1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuaGFuZF9zcHJpdGUuYW5pbWF0aW9ucy5wbGF5KGFuaW1fa2V5KTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50YXJnZXRfZm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXRfb2JqZWN0LnNwcml0ZS5maWx0ZXJzID0gW3RoaXMudGFyZ2V0X29iamVjdC5jb2xvcl9maWx0ZXJdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldF9odWVzaGlmdF90aW1lciA9IHRoaXMuZ2FtZS50aW1lLmNyZWF0ZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0X2h1ZXNoaWZ0X3RpbWVyLmxvb3AoNSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXRfb2JqZWN0LmNvbG9yX2ZpbHRlci5odWVfYWRqdXN0ID0gTWF0aC5yYW5kb20oKSAqIDIgKiBNYXRoLlBJO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXRfaHVlc2hpZnRfdGltZXIuc3RhcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRfY29udHJvbHMoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWUudGltZS5ldmVudHMuYWRkKDcwMCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maW5pc2hfaGFuZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51bnNldF9oZXJvX2Nhc3RfYW5pbSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmaW5pc2hfaGFuZCgpIHtcbiAgICAgICAgdGhpcy5kYXRhLmNvbnRyb2xfbWFuYWdlci5yZXNldCgpO1xuICAgICAgICBsZXQgZmxpcF90aW1lciA9IHRoaXMuZ2FtZS50aW1lLmNyZWF0ZShmYWxzZSk7XG4gICAgICAgIGxldCBmYWtlX2hhbmRfc2NhbGUgPSB7eDogMX07XG4gICAgICAgIGZsaXBfdGltZXIubG9vcCg0MCwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5oYW5kX3Nwcml0ZS5zY2FsZS54ID0gdGhpcy5oYW5kX3Nwcml0ZS5zY2FsZS54ID4gMCA/IC1mYWtlX2hhbmRfc2NhbGUueCA6IGZha2VfaGFuZF9zY2FsZS54O1xuICAgICAgICB9KTtcbiAgICAgICAgZmxpcF90aW1lci5zdGFydCgpO1xuICAgICAgICBsZXQgeV9zaGlmdCA9IHRoaXMuaGFuZF9zcHJpdGUueSAtIDEwO1xuICAgICAgICB0aGlzLmdhbWUuYWRkLnR3ZWVuKHRoaXMuaGFuZF9zcHJpdGUpLnRvKHt5OiB5X3NoaWZ0fSwgMzUwLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLCB0cnVlKTtcbiAgICAgICAgdGhpcy5nYW1lLmFkZC50d2VlbihmYWtlX2hhbmRfc2NhbGUpLnRvKHt4OiAwfSwgMzUwLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLCB0cnVlKTtcbiAgICAgICAgdGhpcy5nYW1lLmFkZFxuICAgICAgICAgICAgLnR3ZWVuKHRoaXMuaGFuZF9zcHJpdGUuc2NhbGUpXG4gICAgICAgICAgICAudG8oe3k6IDB9LCAzNTAsIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsIHRydWUpXG4gICAgICAgICAgICAub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0X2ZpbmFsX2VtaXR0ZXIodGhpcy5oYW5kX3Nwcml0ZS54LCB0aGlzLmhhbmRfc3ByaXRlLnkpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RvcF9jYXN0aW5nKCk7XG4gICAgICAgICAgICAgICAgZmxpcF90aW1lci5zdG9wKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLm92ZXJsYXllcl9ncm91cC5yZW1vdmUodGhpcy5oYW5kX3Nwcml0ZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIHRoaXMudW5zZXRfZW1pdHRlcigpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2V0X2VtaXR0ZXIoKSB7XG4gICAgICAgIGxldCB4X3NoaWZ0ID0gMDtcbiAgICAgICAgbGV0IHlfc2hpZnQgPSAwO1xuICAgICAgICBzd2l0Y2ggKHRoaXMuY2FzdF9kaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy51cDpcbiAgICAgICAgICAgICAgICB5X3NoaWZ0ID0gLU1vdmVGaWVsZFBzeW5lcmd5Lk1BWF9IQU5EX1RSQU5TTEFURTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5kb3duOlxuICAgICAgICAgICAgICAgIHlfc2hpZnQgPSBNb3ZlRmllbGRQc3luZXJneS5NQVhfSEFORF9UUkFOU0xBVEU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMubGVmdDpcbiAgICAgICAgICAgICAgICB4X3NoaWZ0ID0gLU1vdmVGaWVsZFBzeW5lcmd5Lk1BWF9IQU5EX1RSQU5TTEFURTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5yaWdodDpcbiAgICAgICAgICAgICAgICB4X3NoaWZ0ID0gTW92ZUZpZWxkUHN5bmVyZ3kuTUFYX0hBTkRfVFJBTlNMQVRFO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW1pdHRlciA9IHRoaXMuZ2FtZS5hZGQuZW1pdHRlcihcbiAgICAgICAgICAgIHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLmNlbnRlclggKyB4X3NoaWZ0LFxuICAgICAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUuY2VudGVyWSArIHlfc2hpZnQsXG4gICAgICAgICAgICAxNTBcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5lbWl0dGVyLm1ha2VQYXJ0aWNsZXMoXCJwc3luZXJneV9wYXJ0aWNsZVwiKTtcbiAgICAgICAgdGhpcy5lbWl0dGVyLm1pblBhcnRpY2xlU3BlZWQuc2V0VG8oLTE1LCAtMTUpO1xuICAgICAgICB0aGlzLmVtaXR0ZXIubWF4UGFydGljbGVTcGVlZC5zZXRUbygxNSwgMTUpO1xuICAgICAgICB0aGlzLmVtaXR0ZXIuZ3Jhdml0eSA9IDA7XG4gICAgICAgIHRoaXMuZW1pdHRlci53aWR0aCA9IDIgKiBNb3ZlRmllbGRQc3luZXJneS5NT1ZFX01BWF9SQU5HRTtcbiAgICAgICAgdGhpcy5lbWl0dGVyLmhlaWdodCA9IDIgKiBNb3ZlRmllbGRQc3luZXJneS5NT1ZFX01BWF9SQU5HRTtcbiAgICAgICAgdGhpcy5lbWl0dGVyLmZvckVhY2gocGFydGljbGUgPT4ge1xuICAgICAgICAgICAgcGFydGljbGUuYW5pbWF0aW9ucy5hZGQoXCJ2YW5pc2hcIiwgbnVsbCwgNCwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGFydF9lbWl0dGVyKCkge1xuICAgICAgICB0aGlzLmVtaXR0ZXIuc3RhcnQoZmFsc2UsIFBoYXNlci5UaW1lci5RVUFSVEVSLCAxNSwgMCk7XG4gICAgICAgIHRoaXMuZW1pdHRlci5mb3JFYWNoKHBhcnRpY2xlID0+IHtcbiAgICAgICAgICAgIHBhcnRpY2xlLmFuaW1hdGlvbnMucGxheShcInZhbmlzaFwiKTtcbiAgICAgICAgICAgIHBhcnRpY2xlLmFuaW1hdGlvbnMuY3VycmVudEFuaW0uc2V0RnJhbWUoKE1hdGgucmFuZG9tKCkgKiBwYXJ0aWNsZS5hbmltYXRpb25zLmZyYW1lVG90YWwpIHwgMCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHVuc2V0X2VtaXR0ZXIoKSB7XG4gICAgICAgIHRoaXMuZW1pdHRlci5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgc2V0X2ZpbmFsX2VtaXR0ZXIoKSB7XG4gICAgICAgIHRoaXMuZmluYWxfZW1pdHRlcl9wYXJ0aWNsZXNfY291bnQgPSA4O1xuICAgICAgICB0aGlzLmZpbmFsX2VtaXR0ZXIgPSB0aGlzLmdhbWUuYWRkLmVtaXR0ZXIoMCwgMCwgdGhpcy5maW5hbF9lbWl0dGVyX3BhcnRpY2xlc19jb3VudCk7XG4gICAgICAgIHRoaXMuZmluYWxfZW1pdHRlci5tYWtlUGFydGljbGVzKFwicHN5bmVyZ3lfcGFydGljbGVcIik7XG4gICAgICAgIHRoaXMuZmluYWxfZW1pdHRlci5ncmF2aXR5ID0gMzAwO1xuICAgICAgICB0aGlzLmZpbmFsX2VtaXR0ZXIuZm9yRWFjaChwYXJ0aWNsZSA9PiB7XG4gICAgICAgICAgICBwYXJ0aWNsZS5hbmltYXRpb25zLmFkZChcInZhbmlzaFwiLCBudWxsLCA0LCB0cnVlLCBmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXJ0X2ZpbmFsX2VtaXR0ZXIoeCwgeSkge1xuICAgICAgICB0aGlzLmZpbmFsX2VtaXR0ZXIueCA9IHg7XG4gICAgICAgIHRoaXMuZmluYWxfZW1pdHRlci55ID0geTtcbiAgICAgICAgY29uc3QgbGlmZXRpbWUgPSBQaGFzZXIuVGltZXIuUVVBUlRFUjtcbiAgICAgICAgdGhpcy5maW5hbF9lbWl0dGVyLnN0YXJ0KHRydWUsIGxpZmV0aW1lLCBudWxsLCB0aGlzLmZpbmFsX2VtaXR0ZXJfcGFydGljbGVzX2NvdW50KTtcbiAgICAgICAgdGhpcy5maW5hbF9lbWl0dGVyLmZvckVhY2gocGFydGljbGUgPT4ge1xuICAgICAgICAgICAgcGFydGljbGUuYW5pbWF0aW9ucy5wbGF5KFwidmFuaXNoXCIpO1xuICAgICAgICAgICAgcGFydGljbGUuYW5pbWF0aW9ucy5jdXJyZW50QW5pbS5zZXRGcmFtZSgoTWF0aC5yYW5kb20oKSAqIHBhcnRpY2xlLmFuaW1hdGlvbnMuZnJhbWVUb3RhbCkgfCAwKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5hZGQobGlmZXRpbWUsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudW5zZXRfZmluYWxfZW1pdHRlcigpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB1bnNldF9maW5hbF9lbWl0dGVyKCkge1xuICAgICAgICB0aGlzLmZpbmFsX2VtaXR0ZXIuZGVzdHJveSgpO1xuICAgIH1cblxuICAgIHVuc2V0X2h1ZV9zaGlmdGVyKCkge1xuICAgICAgICBpZiAodGhpcy50YXJnZXRfZm91bmQpIHtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0X29iamVjdC5zcHJpdGUuZmlsdGVycyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0X2h1ZXNoaWZ0X3RpbWVyLnN0b3AoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGluaXRfbW92ZSgpIHtcbiAgICAgICAgdGhpcy5zZXRfZW1pdHRlcigpO1xuICAgICAgICB0aGlzLnNldF9maW5hbF9lbWl0dGVyKCk7XG4gICAgICAgIHRoaXMuc2VhcmNoX2Zvcl90YXJnZXQoKTtcbiAgICAgICAgdGhpcy5zZXRfaGFuZCgpO1xuICAgICAgICB0aGlzLmZpZWxkX3BzeW5lcmd5X3dpbmRvdy5jbG9zZSgpO1xuICAgICAgICB0aGlzLnRyYW5zbGF0ZV9oYW5kKCk7XG4gICAgICAgIHRoaXMuc3RhcnRfZW1pdHRlcigpO1xuICAgIH1cbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBpbml0X2Nhc3RfYXVyYShcbiAgICBnYW1lOiBQaGFzZXIuR2FtZSxcbiAgICBzcHJpdGU6IFBoYXNlci5TcHJpdGUsXG4gICAgZ3JvdXA6IFBoYXNlci5Hcm91cCxcbiAgICBmaWx0ZXIsXG4gICAgYWZ0ZXJfaW5pdCxcbiAgICBhZnRlcl9kZXN0cm95LFxuICAgIGJlZm9yZV9kZXN0cm95XG4pIHtcbiAgICBjb25zdCByaW5nX3VwX3RpbWUgPSA3NTA7XG4gICAgY29uc3QgcmluZ191cF90aW1lX2hhbGYgPSByaW5nX3VwX3RpbWUgPj4gMTtcbiAgICBjb25zdCBzdGVwX3RpbWUgPSAocmluZ191cF90aW1lIC8gMykgfCAwO1xuICAgIHNwcml0ZS5maWx0ZXJzID0gW2ZpbHRlcl07XG4gICAgY29uc3QgYXVyYXNfbnVtYmVyID0gMjtcbiAgICBsZXQgdHdlZW5zID0gW107XG4gICAgbGV0IHN0b3BfYXNrZWQgPSBmYWxzZTtcbiAgICBsZXQgcHJvbWlzZXMgPSBbXTtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGF1cmFzX251bWJlcjsgKytqKSB7XG4gICAgICAgIGxldCBiYWNrX2F1cmEgPSBncm91cC5jcmVhdGUoMCwgMCwgXCJwc3luZXJneV9hdXJhXCIpO1xuICAgICAgICBsZXQgZnJvbnRfYXVyYSA9IGdyb3VwLmNyZWF0ZSgwLCAwLCBcInBzeW5lcmd5X2F1cmFcIik7XG4gICAgICAgIGJhY2tfYXVyYS5iYXNlX2NvbGxpc2lvbl9sYXllciA9IHNwcml0ZS5iYXNlX2NvbGxpc2lvbl9sYXllcjtcbiAgICAgICAgZnJvbnRfYXVyYS5iYXNlX2NvbGxpc2lvbl9sYXllciA9IHNwcml0ZS5iYXNlX2NvbGxpc2lvbl9sYXllcjtcbiAgICAgICAgYmFja19hdXJhLnNvcnRfZnVuY3Rpb24gPSAoKSA9PiB7XG4gICAgICAgICAgICBncm91cC5zZXRDaGlsZEluZGV4KGJhY2tfYXVyYSwgZ3JvdXAuZ2V0Q2hpbGRJbmRleChzcHJpdGUpKTtcbiAgICAgICAgfTtcbiAgICAgICAgYmFja19hdXJhLnNvcnRfZnVuY3Rpb24oKTtcbiAgICAgICAgZnJvbnRfYXVyYS5zb3J0X2Z1bmN0aW9uID0gKCkgPT4ge1xuICAgICAgICAgICAgZ3JvdXAuc2V0Q2hpbGRJbmRleChmcm9udF9hdXJhLCBncm91cC5nZXRDaGlsZEluZGV4KHNwcml0ZSkgKyAxKTtcbiAgICAgICAgfTtcbiAgICAgICAgZnJvbnRfYXVyYS5zb3J0X2Z1bmN0aW9uKCk7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHNwcml0ZS5oZWlnaHQgKyBmcm9udF9hdXJhLmhlaWdodCAtIDg7XG4gICAgICAgIGNvbnN0IHN0ZXBfaGVpZ2h0ID0gKGhlaWdodCAvIDMpIHwgMDtcbiAgICAgICAgZnJvbnRfYXVyYS5hbmNob3Iuc2V0VG8oMC41LCAwKTtcbiAgICAgICAgZnJvbnRfYXVyYS5jZW50ZXJYID0gc3ByaXRlLmNlbnRlclg7XG4gICAgICAgIGZyb250X2F1cmEuY2VudGVyWSA9IHNwcml0ZS5jZW50ZXJZICsgKHNwcml0ZS5oZWlnaHQgPj4gMSkgKyAoZnJvbnRfYXVyYS5oZWlnaHQgPj4gMSk7XG4gICAgICAgIGNvbnN0IGluaXRpYWxfZnJvbnRfeSA9IGZyb250X2F1cmEueTtcbiAgICAgICAgZnJvbnRfYXVyYS5zY2FsZS5zZXRUbygwLCAwKTtcbiAgICAgICAgYmFja19hdXJhLmFuY2hvci5zZXRUbygwLjUsIDApO1xuICAgICAgICBiYWNrX2F1cmEuY2VudGVyWCA9IHNwcml0ZS5jZW50ZXJYO1xuICAgICAgICBiYWNrX2F1cmEuY2VudGVyWSA9IHNwcml0ZS5jZW50ZXJZICsgKHNwcml0ZS5oZWlnaHQgPj4gMSkgKyAoYmFja19hdXJhLmhlaWdodCA+PiAxKTtcbiAgICAgICAgY29uc3QgaW5pdGlhbF9iYWNrX3kgPSBiYWNrX2F1cmEueTtcbiAgICAgICAgYmFja19hdXJhLnNjYWxlLnNldFRvKDAsIDApO1xuICAgICAgICBsZXQgYXVyYXMgPSBbXG4gICAgICAgICAgICB7YXVyYTogZnJvbnRfYXVyYSwgaW5pdGlhbF95OiBpbml0aWFsX2Zyb250X3ksIHNjYWxlX2ZhY3RvcjogMX0sXG4gICAgICAgICAgICB7YXVyYTogYmFja19hdXJhLCBpbml0aWFsX3k6IGluaXRpYWxfYmFja195LCBzY2FsZV9mYWN0b3I6IC0xfSxcbiAgICAgICAgXTtcbiAgICAgICAgdHdlZW5zLnB1c2goW10pO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGF1cmFzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBsZXQgYXVyYSA9IGF1cmFzW2ldLmF1cmE7XG4gICAgICAgICAgICBsZXQgaW5pdGlhbF95ID0gYXVyYXNbaV0uaW5pdGlhbF95O1xuICAgICAgICAgICAgbGV0IHNjYWxlX2ZhY3RvciA9IGF1cmFzW2ldLnNjYWxlX2ZhY3RvcjtcbiAgICAgICAgICAgIGxldCB0d2Vlbl9hID0gZ2FtZS5hZGQudHdlZW4oYXVyYSkudG8oe3k6IGluaXRpYWxfeSAtIHN0ZXBfaGVpZ2h0fSwgc3RlcF90aW1lLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lKTtcbiAgICAgICAgICAgIGxldCB0d2Vlbl9iID0gZ2FtZS5hZGRcbiAgICAgICAgICAgICAgICAudHdlZW4oYXVyYSlcbiAgICAgICAgICAgICAgICAudG8oe3k6IGluaXRpYWxfeSAtIDIgKiBzdGVwX2hlaWdodH0sIHN0ZXBfdGltZSwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSk7XG4gICAgICAgICAgICBsZXQgdHdlZW5fYyA9IGdhbWUuYWRkXG4gICAgICAgICAgICAgICAgLnR3ZWVuKGF1cmEpXG4gICAgICAgICAgICAgICAgLnRvKHt5OiBpbml0aWFsX3kgLSAzICogc3RlcF9oZWlnaHR9LCBzdGVwX3RpbWUsIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUpO1xuICAgICAgICAgICAgbGV0IHByb21pc2VfcmVzb2x2ZTtcbiAgICAgICAgICAgIHByb21pc2VzLnB1c2goXG4gICAgICAgICAgICAgICAgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHByb21pc2VfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0d2Vlbl9jLm9uQ29tcGxldGUuYWRkKCgpID0+IHtcbiAgICAgICAgICAgICAgICBhdXJhLnkgPSBpbml0aWFsX3k7XG4gICAgICAgICAgICAgICAgaWYgKCFzdG9wX2Fza2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHR3ZWVuX2Euc3RhcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgdHdlZW5fYWEuc3RhcnQoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwcm9taXNlX3Jlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxldCB0d2Vlbl9hYSA9IGdhbWUuYWRkXG4gICAgICAgICAgICAgICAgLnR3ZWVuKGF1cmEuc2NhbGUpXG4gICAgICAgICAgICAgICAgLnRvKHt4OiBzY2FsZV9mYWN0b3IsIHk6IHNjYWxlX2ZhY3Rvcn0sIHJpbmdfdXBfdGltZV9oYWxmLCBQaGFzZXIuRWFzaW5nLlF1YWRyYXRpYy5PdXQpO1xuICAgICAgICAgICAgbGV0IHR3ZWVuX2NjID0gZ2FtZS5hZGQudHdlZW4oYXVyYS5zY2FsZSkudG8oe3g6IDAsIHk6IDB9LCByaW5nX3VwX3RpbWVfaGFsZiwgUGhhc2VyLkVhc2luZy5RdWFkcmF0aWMuT3V0KTtcbiAgICAgICAgICAgIHR3ZWVuc1tqXS5wdXNoKHtcbiAgICAgICAgICAgICAgICBhdXJhOiBhdXJhLFxuICAgICAgICAgICAgICAgIHR3ZWVuX2E6IHR3ZWVuX2EsXG4gICAgICAgICAgICAgICAgdHdlZW5fYWE6IHR3ZWVuX2FhLFxuICAgICAgICAgICAgICAgIHR3ZWVuX2I6IHR3ZWVuX2IsXG4gICAgICAgICAgICAgICAgdHdlZW5fYzogdHdlZW5fYyxcbiAgICAgICAgICAgICAgICB0d2Vlbl9jYzogdHdlZW5fY2MsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHR3ZWVuX2EuY2hhaW4odHdlZW5fYik7XG4gICAgICAgICAgICB0d2Vlbl9iLmNoYWluKHR3ZWVuX2MpO1xuICAgICAgICAgICAgdHdlZW5fYWEuY2hhaW4odHdlZW5fY2MpO1xuICAgICAgICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgICAgICAgICAgdHdlZW5fYWEub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdHdlZW5zWzBdW2ldLmF1cmEueSA9IGluaXRpYWxfeTtcbiAgICAgICAgICAgICAgICAgICAgdHdlZW5zWzBdW2ldLnR3ZWVuX2Euc3RhcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgdHdlZW5zWzBdW2ldLnR3ZWVuX2FhLnN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdHdlZW5fYS5zdGFydCgpO1xuICAgICAgICAgICAgICAgIHR3ZWVuX2FhLnN0YXJ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IGJsaW5rX2NvdW50ZXIgPSAxNjtcbiAgICBsZXQgYmxpbmtfdGltZXIgPSBnYW1lLnRpbWUuY3JlYXRlKGZhbHNlKTtcbiAgICBsZXQgaHVlX3RpbWVyID0gZ2FtZS50aW1lLmNyZWF0ZShmYWxzZSk7XG4gICAgYmxpbmtfdGltZXIubG9vcCg1MCwgKCkgPT4ge1xuICAgICAgICBpZiAoYmxpbmtfY291bnRlciAlIDIgPT09IDApIHtcbiAgICAgICAgICAgIGZpbHRlci50aW50ID0gWzEsIDEsIDFdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZmlsdGVyLnRpbnQgPSBbLTEsIC0xLCAtMV07XG4gICAgICAgIH1cbiAgICAgICAgLS1ibGlua19jb3VudGVyO1xuICAgICAgICBpZiAoYmxpbmtfY291bnRlciA9PT0gMCkge1xuICAgICAgICAgICAgZmlsdGVyLmdyYXkgPSAwLjQ7XG4gICAgICAgICAgICBibGlua190aW1lci5zdG9wKCk7XG4gICAgICAgICAgICBpZiAoYWZ0ZXJfaW5pdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgYWZ0ZXJfaW5pdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaHVlX3RpbWVyLnN0YXJ0KCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBodWVfdGltZXIubG9vcCgxMDAsICgpID0+IHtcbiAgICAgICAgZmlsdGVyLmh1ZV9hZGp1c3QgPSBNYXRoLnJhbmRvbSgpICogMiAqIE1hdGguUEk7XG4gICAgfSk7XG4gICAgYmxpbmtfdGltZXIuc3RhcnQoKTtcbiAgICByZXR1cm4gYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZiAoYmVmb3JlX2Rlc3Ryb3kgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgYmVmb3JlX2Rlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICBzdG9wX2Fza2VkID0gdHJ1ZTtcbiAgICAgICAgaHVlX3RpbWVyLnN0b3AoKTtcbiAgICAgICAgYmxpbmtfdGltZXIuc3RvcCgpO1xuICAgICAgICBmaWx0ZXIudGludCA9IFstMSwgLTEsIC0xXTtcbiAgICAgICAgZmlsdGVyLmdyYXkgPSAwO1xuICAgICAgICBmaWx0ZXIuaHVlX2FkanVzdCA9IDA7XG4gICAgICAgIHNwcml0ZS5maWx0ZXJzID0gdW5kZWZpbmVkO1xuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHdlZW5zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHR3ZWVuc1tpXS5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgIHR3ZWVuc1tpXVtqXS50d2Vlbl9hLnN0b3AoKTtcbiAgICAgICAgICAgICAgICB0d2VlbnNbaV1bal0udHdlZW5fYWEuc3RvcCgpO1xuICAgICAgICAgICAgICAgIHR3ZWVuc1tpXVtqXS50d2Vlbl9iLnN0b3AoKTtcbiAgICAgICAgICAgICAgICB0d2VlbnNbaV1bal0udHdlZW5fYy5zdG9wKCk7XG4gICAgICAgICAgICAgICAgdHdlZW5zW2ldW2pdLnR3ZWVuX2NjLnN0b3AoKTtcbiAgICAgICAgICAgICAgICBncm91cC5yZW1vdmUodHdlZW5zW2ldW2pdLmF1cmEsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChhZnRlcl9kZXN0cm95ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGFmdGVyX2Rlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aW50X21hcF9sYXllcnMoZ2FtZSwgbWFwLCBmaWx0ZXIsIGFmdGVyX2Rlc3Ryb3k/KSB7XG4gICAgZmlsdGVyLmNvbG9yaXplX2ludGVuc2l0eSA9IDA7XG4gICAgZmlsdGVyLmdyYXkgPSAwO1xuICAgIGZpbHRlci5jb2xvcml6ZSA9IE1hdGgucmFuZG9tKCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXAubGF5ZXJzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIG1hcC5sYXllcnNbaV0uc3ByaXRlLmZpbHRlcnMgPSBbZmlsdGVyXTtcbiAgICB9XG4gICAgZ2FtZS5hZGRcbiAgICAgICAgLnR3ZWVuKGZpbHRlcilcbiAgICAgICAgLnRvKHtjb2xvcml6ZV9pbnRlbnNpdHk6IDAuNCwgZ3JheTogMX0sIFBoYXNlci5UaW1lci5RVUFSVEVSLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLCB0cnVlKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBnYW1lLmFkZFxuICAgICAgICAgICAgLnR3ZWVuKGZpbHRlcilcbiAgICAgICAgICAgIC50byh7Y29sb3JpemVfaW50ZW5zaXR5OiAwLCBncmF5OiAwfSwgUGhhc2VyLlRpbWVyLlFVQVJURVIsIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsIHRydWUpXG4gICAgICAgICAgICAub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcbiAgICAgICAgICAgICAgICBmaWx0ZXIuY29sb3JpemUgPSAtMTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hcC5sYXllcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgbWFwLmxheWVyc1tpXS5zcHJpdGUuZmlsdGVycyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFmdGVyX2Rlc3Ryb3kgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBhZnRlcl9kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgfTtcbn1cbiIsImltcG9ydCB7VGV4dE9iaiwgV2luZG93fSBmcm9tIFwiLi4vV2luZG93XCI7XG5pbXBvcnQge2NhcGl0YWxpemUsIGdldF90ZXh0X3dpZHRofSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSBcIi4uL21hZ2ljX251bWJlcnNcIjtcbmltcG9ydCB7R29sZGVuU3VufSBmcm9tIFwiLi4vR29sZGVuU3VuXCI7XG5cbmNvbnN0IEJBU0VfV0lEVEggPSAxMDtcbmNvbnN0IEJBU0VfSEVJR0hUID0gMjA7XG5jb25zdCBQT1NfWCA9IChudW1iZXJzLkdBTUVfV0lEVEggPj4gMSkgLSAoQkFTRV9XSURUSCA+PiAxKTtcbmNvbnN0IFBPU19ZID0gKG51bWJlcnMuR0FNRV9IRUlHSFQgPj4gMSkgKyBudW1iZXJzLkhFUk9fQk9EWV9SQURJVVMgKyA2O1xuY29uc3QgRElGRl9USFJFU0hPTEQgPSA5MDtcbmNvbnN0IERJRkZfQ09SUkVDVElPTiA9IDU2O1xuXG4vKlRoZSB3aW5kb3cgc2hvd2luZyBjYXN0IHBzeW5lcmd5J3MgbmFtZSBvbiB0aGUgZmllbGRcblxuSW5wdXQ6IGdhbWUgW1BoYXNlcjpHYW1lXSAtIFJlZmVyZW5jZSB0byB0aGUgcnVubmluZyBnYW1lIG9iamVjdFxuICAgICAgIGRhdGEgW0dvbGRlblN1bl0gLSBSZWZlcmVuY2UgdG8gdGhlIG1haW4gSlMgQ2xhc3MgaW5zdGFuY2UqL1xuZXhwb3J0IGNsYXNzIEZpZWxkUHN5bmVyZ3lXaW5kb3cge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgZGF0YTogR29sZGVuU3VuO1xuICAgIHB1YmxpYyB3aW5kb3c6IFdpbmRvdztcbiAgICBwdWJsaWMgdGV4dDogVGV4dE9iajtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEpIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy53aW5kb3cgPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgUE9TX1gsIFBPU19ZLCBCQVNFX1dJRFRILCBCQVNFX0hFSUdIVCk7XG4gICAgICAgIHRoaXMudGV4dCA9IHRoaXMud2luZG93LnNldF9zaW5nbGVfbGluZV90ZXh0KFwiXCIsIGZhbHNlLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKkNhbGN1bGF0ZXMgYSB2ZXJ0aWNhbCBvZmZzZXQgc28gdGhlIHdpbmRvdyBkb2Vzbid0IGNvdmVyIHRoZSBoZXJvXG5cbiAgICBPdXRwdXQ6IFtudW1iZXJdIC0gVGhlIHZlcnRpY2FsIG9mZnNldCB0byBhcHBseSovXG4gICAgdmVydGljYWxfYWRqdXN0KCkge1xuICAgICAgICBsZXQgZGlmZiA9IHRoaXMuZGF0YS5oZXJvLnNwcml0ZS55IC0gdGhpcy5nYW1lLmNhbWVyYS55O1xuICAgICAgICByZXR1cm4gZGlmZiA+IERJRkZfVEhSRVNIT0xEID8gLURJRkZfQ09SUkVDVElPTiArIChkaWZmIC0gRElGRl9USFJFU0hPTEQpIDogMDtcbiAgICB9XG5cbiAgICAvKk9wZW5zIHRoZSB3aW5kb3cgd2l0aCB0aGUgcHN5bmVyZ3kgbmFtZVxuXG4gICAgSW5wdXQ6IHRleHQgW3N0cmluZ10gLSBUaGUgcHN5bmVyZ3kgbmFtZSB0byBzaG93XG4gICAgICAgICAgIGNhbGxiYWNrIFtmdW5jdGlvbl0gLSBDYWxsYmFjayBmdW5jdGlvbiAoT3B0aW9uYWwpKi9cbiAgICBvcGVuKHRleHQsIGNhbGxiYWNrPykge1xuICAgICAgICBjb25zdCBuZXdfdGV4dCA9IGNhcGl0YWxpemUodGV4dCk7XG4gICAgICAgIHRoaXMud2luZG93LnVwZGF0ZV90ZXh0KG5ld190ZXh0LCB0aGlzLnRleHQpO1xuICAgICAgICB0aGlzLndpbmRvdy51cGRhdGVfc2l6ZSh7d2lkdGg6IEJBU0VfV0lEVEggKyB0aGlzLnRleHQudGV4dC53aWR0aCwgaGVpZ2h0OiBCQVNFX0hFSUdIVH0pO1xuICAgICAgICB0aGlzLndpbmRvdy51cGRhdGVfcG9zaXRpb24oe1xuICAgICAgICAgICAgeDogKFBPU19YIC0gKHRoaXMudGV4dC50ZXh0LndpZHRoID4+IDEpKSB8IDAsXG4gICAgICAgICAgICB5OiAoUE9TX1kgKyB0aGlzLnZlcnRpY2FsX2FkanVzdCgpKSB8IDAsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMud2luZG93LnNob3coKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgLypDbG9zZXMgdGhlIHdpbmRvd1xuXG4gICAgSW5wdXQ6IGNhbGxiYWNrIFtmdW5jdGlvbl0gLSBDYWxsYmFjayBmdW5jdGlvbiAoT3B0aW9uYWwpKi9cbiAgICBjbG9zZShjYWxsYmFjaz8pIHtcbiAgICAgICAgdGhpcy53aW5kb3cuY2xvc2UoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmYWxzZSk7XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tIFwiLi4vbWFnaWNfbnVtYmVyc1wiO1xuaW1wb3J0IHtnZXRfc3Vycm91bmRpbmdzLCBkaXJlY3Rpb25zfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCB7SnVtcEV2ZW50fSBmcm9tIFwiLi4vdGlsZV9ldmVudHMvSnVtcEV2ZW50XCI7XG5pbXBvcnQge0ZpZWxkQWJpbGl0aWVzfSBmcm9tIFwiLi9GaWVsZEFiaWxpdGllc1wiO1xuaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XG5cbi8qSGFuZGxlcyB0aGUgXCJGcm9zdFwiIGZpZWxkIHBzeW5lcmd5XG5Eb2VzIG5vdCBoYW5kbGUgdGhlIGluLWJhdHRsZSBjb21tYW5kXG5cbklucHV0OmdhbWUgW1BoYXNlcjpHYW1lXSAtIFJlZmVyZW5jZSB0byB0aGUgcnVubmluZyBnYW1lIG9iamVjdFxuICAgICAgIGRhdGEgW0dvbGRlblN1bl0gLSBSZWZlcmVuY2UgdG8gdGhlIG1haW4gSlMgQ2xhc3MgaW5zdGFuY2UqL1xuZXhwb3J0IGNsYXNzIEZyb3N0RmllbGRQc3luZXJneSBleHRlbmRzIEZpZWxkQWJpbGl0aWVzIHtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBBQklMSVRZX0tFWV9OQU1FID0gXCJmcm9zdFwiO1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEFDVElPTl9LRVlfTkFNRSA9IFwiY2FzdFwiO1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEZST1NUX01BWF9SQU5HRSA9IDEyO1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFNOT1dGTEFLRVNfQ09VTlQgPSAxNjtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBUT1RBTF9UVVJOU19TTk9XRkxBS0VTID0gTWF0aC5QSSAqIDc7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgUE9MQVJfU0xPUEUgPSAwLjE1O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFNQSVJBTF9JTlRFTlNJVFkgPSA4O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFNOT1dGTEFLRV9EVVJBVElPTiA9IDE2NTA7XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhKSB7XG4gICAgICAgIHN1cGVyKFxuICAgICAgICAgICAgZ2FtZSxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICBGcm9zdEZpZWxkUHN5bmVyZ3kuQUJJTElUWV9LRVlfTkFNRSxcbiAgICAgICAgICAgIEZyb3N0RmllbGRQc3luZXJneS5GUk9TVF9NQVhfUkFOR0UsXG4gICAgICAgICAgICBGcm9zdEZpZWxkUHN5bmVyZ3kuQUNUSU9OX0tFWV9OQU1FLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnNldF9ib290c3RyYXBfbWV0aG9kKHRoaXMuaW5pdF9zbm93Zmxha2VzLmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIC8qQmVnaW5zIHRoZSBzbm93Zmxha2UgZWZmZWN0c1xuICAgIFVwb24gZmluaXNoaW5nLCB0cmlnZ2VycyB0aGUgcGlsbGFyJ3MgZ3Jvd3RoKi9cbiAgICBpbml0X3Nub3dmbGFrZXMoKSB7XG4gICAgICAgIHRoaXMuZmllbGRfcHN5bmVyZ3lfd2luZG93LmNsb3NlKCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgRnJvc3RGaWVsZFBzeW5lcmd5LlNOT1dGTEFLRVNfQ09VTlQ7ICsraSkge1xuICAgICAgICAgICAgbGV0IHNub3dmbGFrZV9zcHJpdGUgPSB0aGlzLmRhdGEub3ZlcmxheWVyX2dyb3VwLmNyZWF0ZSgwLCAwLCBcImZyb3N0X3Nub3dmbGFrZVwiKTtcbiAgICAgICAgICAgIHNub3dmbGFrZV9zcHJpdGUuYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcbiAgICAgICAgICAgIGNvbnN0IHNjYWxlX2ZhY3RvciA9IF8ucmFuZG9tKDUsIDgpIC8gMTAuMDtcbiAgICAgICAgICAgIGNvbnN0IHJvdGF0aW9uX2ZhY3RvciA9IE1hdGgucmFuZG9tKCkgKiBudW1iZXJzLmRlZ3JlZTM2MDtcbiAgICAgICAgICAgIHNub3dmbGFrZV9zcHJpdGUuc2NhbGUuc2V0VG8oc2NhbGVfZmFjdG9yLCBzY2FsZV9mYWN0b3IpO1xuICAgICAgICAgICAgc25vd2ZsYWtlX3Nwcml0ZS5yb3RhdGlvbiA9IHJvdGF0aW9uX2ZhY3RvcjtcbiAgICAgICAgICAgIGxldCB4X2Rlc3QgPSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS5jZW50ZXJYO1xuICAgICAgICAgICAgbGV0IHlfZGVzdCA9IHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLmNlbnRlclkgKyAxMjtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5jYXN0X2RpcmVjdGlvbikge1xuICAgICAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5sZWZ0OlxuICAgICAgICAgICAgICAgICAgICB4X2Rlc3QgLT0gMTY7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5yaWdodDpcbiAgICAgICAgICAgICAgICAgICAgeF9kZXN0ICs9IDE2O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMudXA6XG4gICAgICAgICAgICAgICAgICAgIHlfZGVzdCAtPSAxNDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBkaXJlY3Rpb25zLmRvd246XG4gICAgICAgICAgICAgICAgICAgIHlfZGVzdCArPSAxMjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgc3BpcmFsX2FuZ2xlID0ge3JhZDogRnJvc3RGaWVsZFBzeW5lcmd5LlRPVEFMX1RVUk5TX1NOT1dGTEFLRVN9O1xuICAgICAgICAgICAgY29uc3Qgc2lnbl94ID0gTWF0aC5zaWduKE1hdGgucmFuZG9tKCkgLSAwLjUpO1xuICAgICAgICAgICAgY29uc3Qgc2lnbl95ID0gTWF0aC5zaWduKE1hdGgucmFuZG9tKCkgLSAwLjUpO1xuICAgICAgICAgICAgY29uc3QgdHdlZW4gPSB0aGlzLmdhbWUuYWRkXG4gICAgICAgICAgICAgICAgLnR3ZWVuKHNwaXJhbF9hbmdsZSlcbiAgICAgICAgICAgICAgICAudG8oXG4gICAgICAgICAgICAgICAgICAgIHtyYWQ6IC1NYXRoLlBJfSxcbiAgICAgICAgICAgICAgICAgICAgRnJvc3RGaWVsZFBzeW5lcmd5LlNOT1dGTEFLRV9EVVJBVElPTixcbiAgICAgICAgICAgICAgICAgICAgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSxcbiAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgaSAqIChQaGFzZXIuVGltZXIuUVVBUlRFUiAvIDUpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHR3ZWVuLm9uVXBkYXRlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNub3dmbGFrZV9zcHJpdGUuY2VudGVyWCA9XG4gICAgICAgICAgICAgICAgICAgIHNpZ25feCAqXG4gICAgICAgICAgICAgICAgICAgICAgICBGcm9zdEZpZWxkUHN5bmVyZ3kuU1BJUkFMX0lOVEVOU0lUWSAqXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRoLmV4cChGcm9zdEZpZWxkUHN5bmVyZ3kuUE9MQVJfU0xPUEUgKiBzcGlyYWxfYW5nbGUucmFkKSAqXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRoLmNvcyhzcGlyYWxfYW5nbGUucmFkKSArXG4gICAgICAgICAgICAgICAgICAgIHhfZGVzdDtcbiAgICAgICAgICAgICAgICBzbm93Zmxha2Vfc3ByaXRlLmNlbnRlclkgPVxuICAgICAgICAgICAgICAgICAgICBzaWduX3kgKlxuICAgICAgICAgICAgICAgICAgICAgICAgRnJvc3RGaWVsZFBzeW5lcmd5LlNQSVJBTF9JTlRFTlNJVFkgKlxuICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5leHAoRnJvc3RGaWVsZFBzeW5lcmd5LlBPTEFSX1NMT1BFICogc3BpcmFsX2FuZ2xlLnJhZCkgKlxuICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5zaW4oc3BpcmFsX2FuZ2xlLnJhZCkgK1xuICAgICAgICAgICAgICAgICAgICB5X2Rlc3Q7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHR3ZWVuLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgc25vd2ZsYWtlX3Nwcml0ZS5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IEZyb3N0RmllbGRQc3luZXJneS5TTk9XRkxBS0VTX0NPVU5UIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50YXJnZXRfZm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5pdF9waWxsYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudW5zZXRfaGVyb19jYXN0X2FuaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcF9jYXN0aW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qQ2hhbmdlcyB0aGUgcG9vbCBpbnRvIGEgcGlsbGFyXG4gICAgV2lsbCBjaGFuZ2UgaXRzIHByb3BlcnRpZXMgYW5kIGFuaW1hdGlvbiovXG4gICAgaW5pdF9waWxsYXIoKSB7XG4gICAgICAgIHRoaXMudGFyZ2V0X29iamVjdC5nZXRfZXZlbnRzKCkuZm9yRWFjaCgoZXZlbnQ6IEp1bXBFdmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmlzX3NldCkge1xuICAgICAgICAgICAgICAgIGV2ZW50LmRlYWN0aXZhdGUoKTtcbiAgICAgICAgICAgICAgICBldmVudC5pc19zZXQgPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZXZlbnQuYWN0aXZhdGUoKTtcbiAgICAgICAgICAgICAgICBldmVudC5pc19zZXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIEp1bXBFdmVudC5hY3RpdmVfanVtcF9zdXJyb3VuZGluZ3MoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0X3N1cnJvdW5kaW5ncyhldmVudC54LCBldmVudC55LCBmYWxzZSwgMiksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0X29iamVjdC5jb2xsaWRlcl9sYXllcl9zaGlmdCArIHRoaXMudGFyZ2V0X29iamVjdC5iYXNlX2NvbGxpc2lvbl9sYXllclxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRhcmdldF9vYmplY3Quc3ByaXRlLnNlbmRfdG9fYmFjayA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRhdGEubWFwLnNvcnRfc3ByaXRlcygpO1xuICAgICAgICB0aGlzLnRhcmdldF9vYmplY3QuY3VzdG9tX2RhdGEuY29sb3JfZmlsdGVycyA9IHRoaXMuZ2FtZS5hZGQuZmlsdGVyKFwiQ29sb3JGaWx0ZXJzXCIpO1xuICAgICAgICB0aGlzLnRhcmdldF9vYmplY3Quc3ByaXRlLmZpbHRlcnMgPSBbdGhpcy50YXJnZXRfb2JqZWN0LmN1c3RvbV9kYXRhLmNvbG9yX2ZpbHRlcnNdO1xuICAgICAgICBsZXQgYmxpbmtfY291bnRlciA9IDE2O1xuICAgICAgICBsZXQgYmxpbmtfdGltZXIgPSB0aGlzLmdhbWUudGltZS5jcmVhdGUoZmFsc2UpO1xuICAgICAgICBibGlua190aW1lci5sb29wKDUwLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoYmxpbmtfY291bnRlciAlIDIgPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldF9vYmplY3QuY3VzdG9tX2RhdGEuY29sb3JfZmlsdGVycy50aW50ID0gWzEsIDEsIDFdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldF9vYmplY3QuY3VzdG9tX2RhdGEuY29sb3JfZmlsdGVycy50aW50ID0gWy0xLCAtMSwgLTFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLS1ibGlua19jb3VudGVyO1xuICAgICAgICAgICAgaWYgKGJsaW5rX2NvdW50ZXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICBibGlua190aW1lci5zdG9wKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5ncm93X3BpbGxhcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYmxpbmtfdGltZXIuc3RhcnQoKTtcbiAgICB9XG5cbiAgICAvKlBsYXlzIHRoZSBwaWxsYXIncyBncm93aW5nIGFuaW1hdGlvbiovXG4gICAgZ3Jvd19waWxsYXIoKSB7XG4gICAgICAgIHRoaXMudGFyZ2V0X29iamVjdC5zcHJpdGUuYW5pbWF0aW9ucy5wbGF5KFwiZnJvc3RfcG9vbF9waWxsYXJcIik7XG4gICAgICAgIHRoaXMudGFyZ2V0X29iamVjdC5zcHJpdGUuYW5pbWF0aW9ucy5jdXJyZW50QW5pbS5vbkNvbXBsZXRlLmFkZE9uY2UoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXRfcGVybWFuZW50X2JsaW5rKCk7XG4gICAgICAgICAgICB0aGlzLnVuc2V0X2hlcm9fY2FzdF9hbmltKCk7XG4gICAgICAgICAgICB0aGlzLnN0b3BfY2FzdGluZygpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKkVuYWJsZXMgdGhlIHBpbGxhcidzIGJsaW5raW5nIHN0YXRlKi9cbiAgICBzZXRfcGVybWFuZW50X2JsaW5rKCkge1xuICAgICAgICBsZXQgYmxpbmtfdGltZXIgPSB0aGlzLmdhbWUudGltZS5jcmVhdGUoZmFsc2UpO1xuICAgICAgICBsZXQgdGFyZ2V0X29iamVjdCA9IHRoaXMudGFyZ2V0X29iamVjdDtcbiAgICAgICAgYmxpbmtfdGltZXIubG9vcCgxNTAsICgpID0+IHtcbiAgICAgICAgICAgIHRhcmdldF9vYmplY3QuY3VzdG9tX2RhdGEuY29sb3JfZmlsdGVycy5odWVfYWRqdXN0ID0gNS4zO1xuICAgICAgICAgICAgdGhpcy5nYW1lLnRpbWUuZXZlbnRzLmFkZCgyMCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRhcmdldF9vYmplY3QuY3VzdG9tX2RhdGEuY29sb3JfZmlsdGVycy5odWVfYWRqdXN0ID0gMDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgYmxpbmtfdGltZXIuc3RhcnQoKTtcbiAgICAgICAgdGFyZ2V0X29iamVjdC5zcHJpdGUuZXZlbnRzLm9uRGVzdHJveS5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgYmxpbmtfdGltZXIuZGVzdHJveSgpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJpbXBvcnQge2RpcmVjdGlvbnN9IGZyb20gXCIuLi91dGlsc1wiO1xuaW1wb3J0IHtGaWVsZEFiaWxpdGllc30gZnJvbSBcIi4vRmllbGRBYmlsaXRpZXNcIjtcbmltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuaW1wb3J0IHtTcHJpdGVCYXNlfSBmcm9tIFwiLi4vU3ByaXRlQmFzZVwiO1xuXG5leHBvcnQgY2xhc3MgR3Jvd3RoRmllbGRQc3luZXJneSBleHRlbmRzIEZpZWxkQWJpbGl0aWVzIHtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBBQklMSVRZX0tFWV9OQU1FID0gXCJncm93dGhcIjtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBBQ1RJT05fS0VZX05BTUUgPSBcImNhc3RcIjtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBHUk9XVEhfTUFYX1JBTkdFID0gMTI7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgTUFYX1BBUlRJQ0xFX1NQRUVEID0gNjA7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgTUlOX1BBUlRJQ0xFX1NQRUVEID0gNTU7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgWF9QQVJUSUNMRV9TUEVFRCA9IDM1O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFlfUEFSVElDTEVfU1BFRUQgPSAzNTtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBOT19UQVJHRVRfU1BST1VUX0NPVU5UID0gNTtcblxuICAgIHByaXZhdGUgaW5jcmVhc2VfZHVyYXRpb246IG51bWJlcjtcbiAgICBwcml2YXRlIGVtaXR0ZXI6IFBoYXNlci5QYXJ0aWNsZXMuQXJjYWRlLkVtaXR0ZXI7XG4gICAgcHJpdmF0ZSBwYXJ0aWNsZV9maWx0ZXI6IGFueTtcbiAgICBwcml2YXRlIHNwcml0ZV9iYXNlOiBTcHJpdGVCYXNlO1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSkge1xuICAgICAgICBzdXBlcihcbiAgICAgICAgICAgIGdhbWUsXG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgR3Jvd3RoRmllbGRQc3luZXJneS5BQklMSVRZX0tFWV9OQU1FLFxuICAgICAgICAgICAgR3Jvd3RoRmllbGRQc3luZXJneS5HUk9XVEhfTUFYX1JBTkdFLFxuICAgICAgICAgICAgR3Jvd3RoRmllbGRQc3luZXJneS5BQ1RJT05fS0VZX05BTUUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc2V0X2Jvb3RzdHJhcF9tZXRob2QodGhpcy5pbml0X2J1YmJsZXMuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuc3ByaXRlX2Jhc2UgPSB0aGlzLmRhdGEuaW5mby5pdGVyX29ianNfc3ByaXRlX2Jhc2VfbGlzdFtHcm93dGhGaWVsZFBzeW5lcmd5LkFCSUxJVFlfS0VZX05BTUVdO1xuICAgIH1cblxuICAgIHNldF9lbWl0dGVyKCkge1xuICAgICAgICBsZXQgbWF4X3hfc3BlZWQgPSAwO1xuICAgICAgICBsZXQgbWF4X3lfc3BlZWQgPSAwO1xuICAgICAgICBsZXQgbWluX3hfc3BlZWQgPSAwO1xuICAgICAgICBsZXQgbWluX3lfc3BlZWQgPSAwO1xuICAgICAgICBsZXQgeF9kZXN0ID0gdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUuY2VudGVyWDtcbiAgICAgICAgbGV0IHlfZGVzdCA9IHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLmNlbnRlclkgKyA1O1xuICAgICAgICBsZXQgZW1pdHRlcl93aWR0aCA9IDA7XG4gICAgICAgIGxldCBlbWl0dGVyX2hlaWdodCA9IDA7XG4gICAgICAgIHRoaXMuaW5jcmVhc2VfZHVyYXRpb24gPSAwO1xuICAgICAgICBzd2l0Y2ggKHRoaXMuY2FzdF9kaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy51cDpcbiAgICAgICAgICAgICAgICBtYXhfeV9zcGVlZCA9IC1Hcm93dGhGaWVsZFBzeW5lcmd5Lk1BWF9QQVJUSUNMRV9TUEVFRDtcbiAgICAgICAgICAgICAgICBtaW5feV9zcGVlZCA9IC1Hcm93dGhGaWVsZFBzeW5lcmd5Lk1JTl9QQVJUSUNMRV9TUEVFRDtcbiAgICAgICAgICAgICAgICBtYXhfeF9zcGVlZCA9IG1pbl94X3NwZWVkID0gR3Jvd3RoRmllbGRQc3luZXJneS5YX1BBUlRJQ0xFX1NQRUVEO1xuICAgICAgICAgICAgICAgIHlfZGVzdCAtPSA3O1xuICAgICAgICAgICAgICAgIGVtaXR0ZXJfd2lkdGggPSBHcm93dGhGaWVsZFBzeW5lcmd5LkdST1dUSF9NQVhfUkFOR0UgPj4gMTtcbiAgICAgICAgICAgICAgICBlbWl0dGVyX2hlaWdodCA9IDEuNSAqIEdyb3d0aEZpZWxkUHN5bmVyZ3kuR1JPV1RIX01BWF9SQU5HRTtcbiAgICAgICAgICAgICAgICB0aGlzLmluY3JlYXNlX2R1cmF0aW9uID0gODA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMuZG93bjpcbiAgICAgICAgICAgICAgICBtYXhfeV9zcGVlZCA9IEdyb3d0aEZpZWxkUHN5bmVyZ3kuTUFYX1BBUlRJQ0xFX1NQRUVEO1xuICAgICAgICAgICAgICAgIG1pbl95X3NwZWVkID0gR3Jvd3RoRmllbGRQc3luZXJneS5NSU5fUEFSVElDTEVfU1BFRUQ7XG4gICAgICAgICAgICAgICAgbWF4X3hfc3BlZWQgPSBtaW5feF9zcGVlZCA9IEdyb3d0aEZpZWxkUHN5bmVyZ3kuWF9QQVJUSUNMRV9TUEVFRDtcbiAgICAgICAgICAgICAgICB5X2Rlc3QgKz0gMTI7XG4gICAgICAgICAgICAgICAgZW1pdHRlcl93aWR0aCA9IEdyb3d0aEZpZWxkUHN5bmVyZ3kuR1JPV1RIX01BWF9SQU5HRSA+PiAxO1xuICAgICAgICAgICAgICAgIGVtaXR0ZXJfaGVpZ2h0ID0gMS41ICogR3Jvd3RoRmllbGRQc3luZXJneS5HUk9XVEhfTUFYX1JBTkdFO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5jcmVhc2VfZHVyYXRpb24gPSA4MDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5sZWZ0OlxuICAgICAgICAgICAgICAgIG1heF94X3NwZWVkID0gLUdyb3d0aEZpZWxkUHN5bmVyZ3kuTUFYX1BBUlRJQ0xFX1NQRUVEO1xuICAgICAgICAgICAgICAgIG1pbl94X3NwZWVkID0gLUdyb3d0aEZpZWxkUHN5bmVyZ3kuTUlOX1BBUlRJQ0xFX1NQRUVEO1xuICAgICAgICAgICAgICAgIG1heF95X3NwZWVkID0gbWluX3lfc3BlZWQgPSBHcm93dGhGaWVsZFBzeW5lcmd5LllfUEFSVElDTEVfU1BFRUQ7XG4gICAgICAgICAgICAgICAgeF9kZXN0IC09IDE2O1xuICAgICAgICAgICAgICAgIGVtaXR0ZXJfd2lkdGggPSAxLjUgKiBHcm93dGhGaWVsZFBzeW5lcmd5LkdST1dUSF9NQVhfUkFOR0U7XG4gICAgICAgICAgICAgICAgZW1pdHRlcl9oZWlnaHQgPSBHcm93dGhGaWVsZFBzeW5lcmd5LkdST1dUSF9NQVhfUkFOR0U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMucmlnaHQ6XG4gICAgICAgICAgICAgICAgbWF4X3hfc3BlZWQgPSBHcm93dGhGaWVsZFBzeW5lcmd5Lk1BWF9QQVJUSUNMRV9TUEVFRDtcbiAgICAgICAgICAgICAgICBtaW5feF9zcGVlZCA9IEdyb3d0aEZpZWxkUHN5bmVyZ3kuTUlOX1BBUlRJQ0xFX1NQRUVEO1xuICAgICAgICAgICAgICAgIG1heF95X3NwZWVkID0gbWluX3lfc3BlZWQgPSBHcm93dGhGaWVsZFBzeW5lcmd5LllfUEFSVElDTEVfU1BFRUQ7XG4gICAgICAgICAgICAgICAgeF9kZXN0ICs9IDE2O1xuICAgICAgICAgICAgICAgIGVtaXR0ZXJfd2lkdGggPSAxLjUgKiBHcm93dGhGaWVsZFBzeW5lcmd5LkdST1dUSF9NQVhfUkFOR0U7XG4gICAgICAgICAgICAgICAgZW1pdHRlcl9oZWlnaHQgPSBHcm93dGhGaWVsZFBzeW5lcmd5LkdST1dUSF9NQVhfUkFOR0U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbWl0dGVyID0gdGhpcy5nYW1lLmFkZC5lbWl0dGVyKHhfZGVzdCwgeV9kZXN0LCAyMCk7XG4gICAgICAgIHRoaXMuZW1pdHRlci5tYWtlUGFydGljbGVzKFwicHN5bmVyZ3lfYmFsbFwiKTtcbiAgICAgICAgdGhpcy5lbWl0dGVyLm1pblBhcnRpY2xlU3BlZWQuc2V0VG8obWluX3hfc3BlZWQsIG1pbl95X3NwZWVkKTtcbiAgICAgICAgdGhpcy5lbWl0dGVyLm1heFBhcnRpY2xlU3BlZWQuc2V0VG8obWF4X3hfc3BlZWQsIG1heF95X3NwZWVkKTtcbiAgICAgICAgdGhpcy5lbWl0dGVyLmdyYXZpdHkgPSAwO1xuICAgICAgICB0aGlzLmVtaXR0ZXIud2lkdGggPSBlbWl0dGVyX3dpZHRoO1xuICAgICAgICB0aGlzLmVtaXR0ZXIuaGVpZ2h0ID0gZW1pdHRlcl9oZWlnaHQ7XG4gICAgICAgIHRoaXMucGFydGljbGVfZmlsdGVyID0gdGhpcy5nYW1lLmFkZC5maWx0ZXIoXCJDb2xvckZpbHRlcnNcIik7XG4gICAgICAgIHRoaXMucGFydGljbGVfZmlsdGVyLmh1ZV9hZGp1c3QgPSAzO1xuICAgICAgICB0aGlzLmVtaXR0ZXIubWF4UGFydGljbGVTY2FsZSA9IDAuNTtcbiAgICAgICAgdGhpcy5lbWl0dGVyLm1pblBhcnRpY2xlU2NhbGUgPSAwLjQ7XG4gICAgICAgIHRoaXMuZW1pdHRlci5mb3JFYWNoKHBhcnRpY2xlID0+IHtcbiAgICAgICAgICAgIHBhcnRpY2xlLmZpbHRlcnMgPSBbdGhpcy5wYXJ0aWNsZV9maWx0ZXJdO1xuICAgICAgICAgICAgcGFydGljbGUuYW5pbWF0aW9ucy5hZGQoXCJzaGluZVwiLCBbXCJiYWxsLzAxXCIsIFwiYmFsbC8wMlwiLCBcImJhbGwvMDNcIl0sIDQsIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGluaXRfYnViYmxlcygpIHtcbiAgICAgICAgdGhpcy5maWVsZF9wc3luZXJneV93aW5kb3cuY2xvc2UoKTtcbiAgICAgICAgdGhpcy5zZXRfZW1pdHRlcigpO1xuICAgICAgICB0aGlzLmVtaXR0ZXIuc3RhcnQoZmFsc2UsIDEwMCArIHRoaXMuaW5jcmVhc2VfZHVyYXRpb24sIDgsIDApO1xuICAgICAgICB0aGlzLmVtaXR0ZXIuZm9yRWFjaChwYXJ0aWNsZSA9PiB7XG4gICAgICAgICAgICBwYXJ0aWNsZS5hbmltYXRpb25zLnBsYXkoXCJzaGluZVwiKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5hZGQoUGhhc2VyLlRpbWVyLlNFQ09ORCwgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMudGFyZ2V0X2ZvdW5kKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ncm93X3Nwcm91dCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1pc3NfdGFyZ2V0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdyb3dfc3Byb3V0KCkge1xuICAgICAgICB0aGlzLmVtaXR0ZXIuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLnRhcmdldF9vYmplY3QuZ2V0X2V2ZW50cygpLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgICAgICAgZXZlbnQuYWN0aXZhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGFuaW1fa2V5ID0gdGhpcy5zcHJpdGVfYmFzZS5nZXRBbmltYXRpb25LZXkoR3Jvd3RoRmllbGRQc3luZXJneS5BQklMSVRZX0tFWV9OQU1FLCBcImdyb3dpbmdcIik7XG4gICAgICAgIHRoaXMudGFyZ2V0X29iamVjdC5zcHJpdGUuYW5pbWF0aW9ucy5wbGF5KGFuaW1fa2V5KTtcbiAgICAgICAgdGhpcy50YXJnZXRfb2JqZWN0LnNwcml0ZS5hbmltYXRpb25zLmN1cnJlbnRBbmltLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVuc2V0X2hlcm9fY2FzdF9hbmltKCk7XG4gICAgICAgICAgICB0aGlzLnN0b3BfY2FzdGluZygpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBtaXNzX3RhcmdldCgpIHtcbiAgICAgICAgdGhpcy5lbWl0dGVyLmRlc3Ryb3koKTtcbiAgICAgICAgbGV0IGdyb3dfY2VudGVyX3ggPSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS5jZW50ZXJYO1xuICAgICAgICBsZXQgZ3Jvd19jZW50ZXJfeSA9IHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLmNlbnRlclkgKyAxNztcbiAgICAgICAgc3dpdGNoICh0aGlzLmNhc3RfZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMudXA6XG4gICAgICAgICAgICAgICAgZ3Jvd19jZW50ZXJfeSAtPSAxNjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5kb3duOlxuICAgICAgICAgICAgICAgIGdyb3dfY2VudGVyX3kgKz0gMTY7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMubGVmdDpcbiAgICAgICAgICAgICAgICBncm93X2NlbnRlcl94IC09IDE2O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBkaXJlY3Rpb25zLnJpZ2h0OlxuICAgICAgICAgICAgICAgIGdyb3dfY2VudGVyX3ggKz0gMTY7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHByb21pc2VzID0gbmV3IEFycmF5KEdyb3d0aEZpZWxkUHN5bmVyZ3kuTk9fVEFSR0VUX1NQUk9VVF9DT1VOVCk7XG4gICAgICAgIGNvbnN0IHZhcmlhdGlvbiA9IDEzO1xuICAgICAgICBjb25zdCBhY3Rpb25fa2V5ID0gdGhpcy5zcHJpdGVfYmFzZS5nZXRBY3Rpb25LZXkoR3Jvd3RoRmllbGRQc3luZXJneS5BQklMSVRZX0tFWV9OQU1FKTtcbiAgICAgICAgY29uc3QgYW5pbV9rZXkgPSB0aGlzLnNwcml0ZV9iYXNlLmdldEFuaW1hdGlvbktleShHcm93dGhGaWVsZFBzeW5lcmd5LkFCSUxJVFlfS0VZX05BTUUsIFwibm9fdGFyZ2V0XCIpO1xuICAgICAgICBjb25zdCBmaXJzdF9mcmFtZV9uYW1lID0gdGhpcy5zcHJpdGVfYmFzZS5nZXRGcmFtZU5hbWUoR3Jvd3RoRmllbGRQc3luZXJneS5BQklMSVRZX0tFWV9OQU1FLCBcIm5vX3RhcmdldFwiLCAwKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBHcm93dGhGaWVsZFBzeW5lcmd5Lk5PX1RBUkdFVF9TUFJPVVRfQ09VTlQ7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgY2VudGVyX3ggPSBncm93X2NlbnRlcl94ICsgXy5yYW5kb20oLXZhcmlhdGlvbiwgdmFyaWF0aW9uKTtcbiAgICAgICAgICAgIGNvbnN0IGNlbnRlcl95ID0gZ3Jvd19jZW50ZXJfeSArIF8ucmFuZG9tKC12YXJpYXRpb24sIHZhcmlhdGlvbik7XG4gICAgICAgICAgICBjb25zdCBtaXNzX3RhcmdldF9zcHJpdGU6IFBoYXNlci5TcHJpdGUgPSB0aGlzLmRhdGEub3ZlcmxheWVyX2dyb3VwLmNyZWF0ZShjZW50ZXJfeCwgY2VudGVyX3ksIGFjdGlvbl9rZXkpO1xuICAgICAgICAgICAgbWlzc190YXJnZXRfc3ByaXRlLmFuY2hvci5zZXRUbygwLjUsIDEpO1xuICAgICAgICAgICAgdGhpcy5zcHJpdGVfYmFzZS5zZXRBbmltYXRpb24obWlzc190YXJnZXRfc3ByaXRlLCBHcm93dGhGaWVsZFBzeW5lcmd5LkFCSUxJVFlfS0VZX05BTUUpO1xuICAgICAgICAgICAgbWlzc190YXJnZXRfc3ByaXRlLmZyYW1lTmFtZSA9IGZpcnN0X2ZyYW1lX25hbWU7XG4gICAgICAgICAgICBsZXQgcmVzb2x2ZV9mdW5jO1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaChcbiAgICAgICAgICAgICAgICBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZV9mdW5jID0gcmVzb2x2ZTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5hZGQoaSAqIDQwLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbWlzc190YXJnZXRfc3ByaXRlLmFuaW1hdGlvbnMucGxheShhbmltX2tleSk7XG4gICAgICAgICAgICAgICAgbWlzc190YXJnZXRfc3ByaXRlLmFuaW1hdGlvbnMuY3VycmVudEFuaW0ub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbWlzc190YXJnZXRfc3ByaXRlLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZV9mdW5jKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVuc2V0X2hlcm9fY2FzdF9hbmltKCk7XG4gICAgICAgICAgICB0aGlzLnN0b3BfY2FzdGluZygpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJpbXBvcnQge0l0ZW19IGZyb20gXCIuLi9JdGVtXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplX2l0ZW1zKGdhbWUsIGl0ZW1zX2RiLCBsb2FkX3Byb21pc2VfcmVzb2x2ZSkge1xuICAgIGxldCBpdGVtc19saXN0ID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtc19kYi5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCBpdGVtX2RhdGEgPSBpdGVtc19kYltpXTtcbiAgICAgICAgaXRlbXNfbGlzdFtpdGVtX2RhdGEua2V5X25hbWVdID0gbmV3IEl0ZW0oXG4gICAgICAgICAgICBpdGVtX2RhdGEua2V5X25hbWUsXG4gICAgICAgICAgICBpdGVtX2RhdGEubmFtZSxcbiAgICAgICAgICAgIGl0ZW1fZGF0YS50eXBlLFxuICAgICAgICAgICAgaXRlbV9kYXRhLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgaXRlbV9kYXRhLnVzZV90eXBlLFxuICAgICAgICAgICAgaXRlbV9kYXRhLmN1cnNlc193aGVuX2VxdWlwcGVkLFxuICAgICAgICAgICAgaXRlbV9kYXRhLmNhbnRfYmVfcmVtb3ZlZCxcbiAgICAgICAgICAgIGl0ZW1fZGF0YS5yYXJlX2l0ZW0sXG4gICAgICAgICAgICBpdGVtX2RhdGEuaW1wb3J0YW50X2l0ZW0sXG4gICAgICAgICAgICBpdGVtX2RhdGEuY2FycnlfdXBfdG9fMzAsXG4gICAgICAgICAgICBpdGVtX2RhdGEuZWZmZWN0cyxcbiAgICAgICAgICAgIGl0ZW1fZGF0YS5hdHRyaWJ1dGUsXG4gICAgICAgICAgICBpdGVtX2RhdGEudW5sZWFzaF9hYmlsaXR5LFxuICAgICAgICAgICAgaXRlbV9kYXRhLnVubGVhc2hfcmF0ZSxcbiAgICAgICAgICAgIGl0ZW1fZGF0YS51c2VfYWJpbGl0eSxcbiAgICAgICAgICAgIGl0ZW1fZGF0YS5lcXVpcGFibGVfY2hhcnMsXG4gICAgICAgICAgICBpdGVtX2RhdGEucHJpY2UsXG4gICAgICAgICAgICBpdGVtX2RhdGEuZ3JhbnRlZF9hYmlsaXR5XG4gICAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IGxvYWRlciA9IGdhbWUubG9hZC5hdGxhc0pTT05IYXNoKFxuICAgICAgICBcIml0ZW1zX2ljb25zXCIsXG4gICAgICAgIFwiYXNzZXRzL2ltYWdlcy9pY29ucy9pdGVtcy9pdGVtc19pY29ucy5wbmdcIixcbiAgICAgICAgXCJhc3NldHMvaW1hZ2VzL2ljb25zL2l0ZW1zL2l0ZW1zX2ljb25zLmpzb25cIlxuICAgICk7XG4gICAgbG9hZGVyLm9uTG9hZENvbXBsZXRlLmFkZE9uY2UobG9hZF9wcm9taXNlX3Jlc29sdmUpO1xuICAgIGdhbWUubG9hZC5zdGFydCgpO1xuICAgIHJldHVybiBpdGVtc19saXN0O1xufVxuIiwiaW1wb3J0IHtEamlubn0gZnJvbSBcIi4uL0RqaW5uXCI7XG5pbXBvcnQge1Nwcml0ZUJhc2V9IGZyb20gXCIuLi9TcHJpdGVCYXNlXCI7XG5pbXBvcnQge2VsZW1lbnRzfSBmcm9tIFwiLi4vdXRpbHNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVfZGppbm5pKGRqaW5uaV9kYikge1xuICAgIGxldCBkamlubmlfbGlzdCA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGppbm5pX2RiLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IGRqaW5uX2RhdGEgPSBkamlubmlfZGJbaV07XG4gICAgICAgIGRqaW5uaV9saXN0W2RqaW5uX2RhdGEua2V5X25hbWVdID0gbmV3IERqaW5uKFxuICAgICAgICAgICAgZGppbm5fZGF0YS5rZXlfbmFtZSxcbiAgICAgICAgICAgIGRqaW5uX2RhdGEubmFtZSxcbiAgICAgICAgICAgIGRqaW5uX2RhdGEuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBkamlubl9kYXRhLmVsZW1lbnQsXG4gICAgICAgICAgICBkamlubl9kYXRhLmFiaWxpdHlfa2V5X25hbWUsXG4gICAgICAgICAgICBkamlubl9kYXRhLmhwX2Jvb3N0LFxuICAgICAgICAgICAgZGppbm5fZGF0YS5wcF9ib29zdCxcbiAgICAgICAgICAgIGRqaW5uX2RhdGEuYXRrX2Jvb3N0LFxuICAgICAgICAgICAgZGppbm5fZGF0YS5kZWZfYm9vc3QsXG4gICAgICAgICAgICBkamlubl9kYXRhLmFnaV9ib29zdCxcbiAgICAgICAgICAgIGRqaW5uX2RhdGEubHVrX2Jvb3N0LFxuICAgICAgICAgICAgaVxuICAgICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gZGppbm5pX2xpc3Q7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplX2RqaW5uaV9zcHJpdGVzKGdhbWUsIGxvYWRfcHJvbWlzZV9yZXNvbHZlKSB7XG4gICAgY29uc3QgYWN0aW9ucyA9IFtcInNldFwiLCBcInN0YW5kYnlcIl07XG4gICAgY29uc3QgZGlyZWN0aW9ucyA9IHtcbiAgICAgICAgc2V0OiBbXCJkb3duXCJdLFxuICAgICAgICBzdGFuZGJ5OiBbXCJsZWZ0XCIsIFwiZG93blwiXSxcbiAgICB9O1xuICAgIGNvbnN0IGZyYW1lc19udW1iZXIgPSA0O1xuICAgIGNvbnN0IGZyYW1lc19yYXRlID0ge1xuICAgICAgICBzZXQ6IDYsXG4gICAgICAgIHN0YW5kYnk6IDIsXG4gICAgfTtcbiAgICBjb25zdCBiYXNlX3BhdGggPSBcImFzc2V0cy9pbWFnZXMvc3ByaXRlc2hlZXRzL2RqaW5uL1wiO1xuICAgIGxldCBsb2FkX3Byb21pc2VzID0gW107XG4gICAgbGV0IGRqaW5uaV9zcHJpdGVzID0ge307XG4gICAgZm9yIChsZXQga2V5IGluIGVsZW1lbnRzKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBlbGVtZW50c1trZXldO1xuICAgICAgICBpZiAoZWxlbWVudCA9PT0gZWxlbWVudHMuTk9fRUxFTUVOVCkgY29udGludWU7XG4gICAgICAgIGRqaW5uaV9zcHJpdGVzW2VsZW1lbnRdID0gbmV3IFNwcml0ZUJhc2UoZWxlbWVudCArIFwiX2RqaW5uXCIsIGFjdGlvbnMpO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGFjdGlvbnMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgIGNvbnN0IGFjdGlvbiA9IGFjdGlvbnNbal07XG4gICAgICAgICAgICBkamlubmlfc3ByaXRlc1tlbGVtZW50XS5zZXRBY3Rpb25TcHJpdGVzaGVldChcbiAgICAgICAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgICAgICAgYCR7YmFzZV9wYXRofSR7ZWxlbWVudH1fZGppbm4ucG5nYCxcbiAgICAgICAgICAgICAgICBgJHtiYXNlX3BhdGh9JHtlbGVtZW50fV9kamlubi5qc29uYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGRqaW5uaV9zcHJpdGVzW2VsZW1lbnRdLnNldEFjdGlvbkRpcmVjdGlvbnMoXG4gICAgICAgICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbnNbYWN0aW9uXSxcbiAgICAgICAgICAgICAgICBuZXcgQXJyYXkoZGlyZWN0aW9uc1thY3Rpb25dLmxlbmd0aCkuZmlsbChmcmFtZXNfbnVtYmVyKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGRqaW5uaV9zcHJpdGVzW2VsZW1lbnRdLnNldEFjdGlvbkZyYW1lUmF0ZShhY3Rpb24sIGZyYW1lc19yYXRlW2FjdGlvbl0pO1xuICAgICAgICB9XG4gICAgICAgIGRqaW5uaV9zcHJpdGVzW2VsZW1lbnRdLmdlbmVyYXRlQWxsRnJhbWVzKCk7XG5cbiAgICAgICAgbGV0IGxvYWRfc3ByaXRlc2hlZXRfcHJvbWlzZV9yZXNvbHZlO1xuICAgICAgICBjb25zdCBsb2FkX3Nwcml0ZXNoZWV0X3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIGxvYWRfc3ByaXRlc2hlZXRfcHJvbWlzZV9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGxvYWRfcHJvbWlzZXMucHVzaChsb2FkX3Nwcml0ZXNoZWV0X3Byb21pc2UpO1xuICAgICAgICBkamlubmlfc3ByaXRlc1tlbGVtZW50XS5sb2FkU3ByaXRlc2hlZXRzKGdhbWUsIHRydWUsIGxvYWRfc3ByaXRlc2hlZXRfcHJvbWlzZV9yZXNvbHZlKTtcbiAgICB9XG4gICAgUHJvbWlzZS5hbGwobG9hZF9wcm9taXNlcykudGhlbihsb2FkX3Byb21pc2VfcmVzb2x2ZSk7XG4gICAgcmV0dXJuIGRqaW5uaV9zcHJpdGVzO1xufVxuIiwiaW1wb3J0IHtTcHJpdGVCYXNlfSBmcm9tIFwiLi4vU3ByaXRlQmFzZVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZV9lbmVtaWVzKGdhbWUsIGVuZW1pZXNfZGIsIGxvYWRfcHJvbWlzZV9yZXNvbHZlKSB7XG4gICAgbGV0IGxvYWRfcHJvbWlzZXMgPSBbXTtcbiAgICBsZXQgZW5lbWllc19saXN0ID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbmVtaWVzX2RiLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGxldCBpbmZvID0ge1xuICAgICAgICAgICAgZGF0YTogZW5lbWllc19kYltpXSxcbiAgICAgICAgICAgIHNwcml0ZV9iYXNlOiBudWxsLFxuICAgICAgICB9O1xuICAgICAgICBpbmZvLnNwcml0ZV9iYXNlID0gbmV3IFNwcml0ZUJhc2UoaW5mby5kYXRhLmtleV9uYW1lLCBbXCJiYXR0bGVcIl0pO1xuXG4gICAgICAgIGNvbnN0IGFjdGlvbiA9IGluZm8uZGF0YS5iYXR0bGVfc3ByaXRlc2hlZXQ7XG4gICAgICAgIGlmIChhY3Rpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaW5mby5zcHJpdGVfYmFzZS5zZXRBY3Rpb25TcHJpdGVzaGVldChcImJhdHRsZVwiLCBhY3Rpb24uc3ByaXRlc2hlZXRfaW1nLCBhY3Rpb24uc3ByaXRlc2hlZXQpO1xuICAgICAgICAgICAgaW5mby5zcHJpdGVfYmFzZS5zZXRBY3Rpb25EaXJlY3Rpb25zKFwiYmF0dGxlXCIsIGFjdGlvbi5wb3NpdGlvbnMsIGFjdGlvbi5mcmFtZXNfbnVtYmVyKTtcbiAgICAgICAgICAgIGluZm8uc3ByaXRlX2Jhc2Uuc2V0QWN0aW9uRnJhbWVSYXRlKFwiYmF0dGxlXCIsIGFjdGlvbi5mcmFtZV9yYXRlKTtcbiAgICAgICAgICAgIGluZm8uc3ByaXRlX2Jhc2Uuc2V0QWN0aW9uTG9vcChcImJhdHRsZVwiLCBhY3Rpb24ubG9vcCk7XG4gICAgICAgICAgICBpbmZvLnNwcml0ZV9iYXNlLmdlbmVyYXRlQWxsRnJhbWVzKCk7XG5cbiAgICAgICAgICAgIGxldCBsb2FkX3Nwcml0ZXNoZWV0X3Byb21pc2VfcmVzb2x2ZTtcbiAgICAgICAgICAgIGNvbnN0IGxvYWRfc3ByaXRlc2hlZXRfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgICAgIGxvYWRfc3ByaXRlc2hlZXRfcHJvbWlzZV9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbG9hZF9wcm9taXNlcy5wdXNoKGxvYWRfc3ByaXRlc2hlZXRfcHJvbWlzZSk7XG4gICAgICAgICAgICBpbmZvLnNwcml0ZV9iYXNlLmxvYWRTcHJpdGVzaGVldHMoZ2FtZSwgdHJ1ZSwgbG9hZF9zcHJpdGVzaGVldF9wcm9taXNlX3Jlc29sdmUpO1xuICAgICAgICB9XG4gICAgICAgIGVuZW1pZXNfbGlzdFtpbmZvLmRhdGEua2V5X25hbWVdID0gaW5mbztcbiAgICB9XG4gICAgUHJvbWlzZS5hbGwobG9hZF9wcm9taXNlcykudGhlbihsb2FkX3Byb21pc2VfcmVzb2x2ZSk7XG4gICAgcmV0dXJuIGVuZW1pZXNfbGlzdDtcbn1cbiIsImltcG9ydCB7TWFwfSBmcm9tIFwiLi4vTWFwXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplX21hcHMoZ2FtZSwgZGF0YSwgbWFwc19kYiwgbG9hZF9wcm9taXNlX3Jlc29sdmUpIHtcbiAgICBsZXQgbWFwcyA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWFwc19kYi5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCBtYXBfZGF0YSA9IG1hcHNfZGJbaV07XG4gICAgICAgIG1hcHNbbWFwX2RhdGEua2V5X25hbWVdID0gbmV3IE1hcChcbiAgICAgICAgICAgIGdhbWUsXG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgbWFwX2RhdGEubmFtZSxcbiAgICAgICAgICAgIG1hcF9kYXRhLmtleV9uYW1lLFxuICAgICAgICAgICAgbWFwX2RhdGEudGlsZXNldF9rZXlfbmFtZSxcbiAgICAgICAgICAgIG1hcF9kYXRhLmNvbGxpc2lvbl9rZXlfbmFtZXMsXG4gICAgICAgICAgICBtYXBfZGF0YS50aWxlc2V0X2ZpbGVzLmltYWdlLFxuICAgICAgICAgICAgbWFwX2RhdGEudGlsZXNldF9maWxlcy5qc29uLFxuICAgICAgICAgICAgbWFwX2RhdGEuY29sbGlzaW9uX2ZpbGVzLFxuICAgICAgICAgICAgbWFwX2RhdGEubGF6eV9sb2FkLFxuICAgICAgICAgICAgbWFwX2RhdGEuY29sbGlzaW9uX2VtYmVkZGVkXG4gICAgICAgICk7XG4gICAgfVxuICAgIGxldCBsb2FkX3Byb21pc2VzID0gW107XG4gICAgZm9yIChsZXQgbWFwIGluIG1hcHMpIHtcbiAgICAgICAgaWYgKG1hcHNbbWFwXS5sYXp5X2xvYWQpIGNvbnRpbnVlO1xuICAgICAgICBsZXQgbG9hZF9tYXBfcHJvbWlzZV9yZXNvbHZlO1xuICAgICAgICBjb25zdCBsb2FkX21hcF9wcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICBsb2FkX21hcF9wcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgICAgICB9KTtcbiAgICAgICAgbG9hZF9wcm9taXNlcy5wdXNoKGxvYWRfbWFwX3Byb21pc2UpO1xuICAgICAgICBtYXBzW21hcF0ubG9hZF9tYXBfYXNzZXRzKHRydWUsIGxvYWRfbWFwX3Byb21pc2VfcmVzb2x2ZSk7XG4gICAgfVxuICAgIFByb21pc2UuYWxsKGxvYWRfcHJvbWlzZXMpLnRoZW4obG9hZF9wcm9taXNlX3Jlc29sdmUpO1xuICAgIHJldHVybiBtYXBzO1xufVxuIiwiaW1wb3J0IHtkaXJlY3Rpb25zLCBtYXBfZGlyZWN0aW9uc30gZnJvbSBcIi4vdXRpbHNcIjtcbmltcG9ydCB7TlBDfSBmcm9tIFwiLi9OUENcIjtcbmltcG9ydCB7SW50ZXJhY3RhYmxlT2JqZWN0cywgaW50ZXJhY3RhYmxlX29iamVjdF9pbnRlcmFjdGlvbl90eXBlc30gZnJvbSBcIi4vSW50ZXJhY3RhYmxlT2JqZWN0c1wiO1xuaW1wb3J0IHtUaWxlRXZlbnQsIGV2ZW50X3R5cGVzIGFzIHRpbGVfZXZlbnRfdHlwZXN9IGZyb20gXCIuL3RpbGVfZXZlbnRzL1RpbGVFdmVudFwiO1xuaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tIFwiLi9tYWdpY19udW1iZXJzXCI7XG5pbXBvcnQge0p1bXBFdmVudH0gZnJvbSBcIi4vdGlsZV9ldmVudHMvSnVtcEV2ZW50XCI7XG5pbXBvcnQge1RlbGVwb3J0RXZlbnR9IGZyb20gXCIuL3RpbGVfZXZlbnRzL1RlbGVwb3J0RXZlbnRcIjtcbmltcG9ydCB7Q2xpbWJFdmVudH0gZnJvbSBcIi4vdGlsZV9ldmVudHMvQ2xpbWJFdmVudFwiO1xuaW1wb3J0IHtTdGVwRXZlbnR9IGZyb20gXCIuL3RpbGVfZXZlbnRzL1N0ZXBFdmVudFwiO1xuaW1wb3J0IHtDb2xsaXNpb25FdmVudH0gZnJvbSBcIi4vdGlsZV9ldmVudHMvQ29sbGlzaW9uRXZlbnRcIjtcbmltcG9ydCB7U3BlZWRFdmVudH0gZnJvbSBcIi4vdGlsZV9ldmVudHMvU3BlZWRFdmVudFwiO1xuaW1wb3J0IHtHYW1lRXZlbnR9IGZyb20gXCIuL2dhbWVfZXZlbnRzL0dhbWVFdmVudFwiO1xuaW1wb3J0IHtHb2xkZW5TdW59IGZyb20gXCIuL0dvbGRlblN1blwiO1xuaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XG5pbXBvcnQge1NsaWRlckV2ZW50fSBmcm9tIFwiLi90aWxlX2V2ZW50cy9TbGlkZXJFdmVudFwiO1xuaW1wb3J0IHtTcHJpdGVCYXNlfSBmcm9tIFwiLi9TcHJpdGVCYXNlXCI7XG5pbXBvcnQge0NvbGxpc2lvbn0gZnJvbSBcIi4vQ29sbGlzaW9uXCI7XG5pbXBvcnQge0NvbnRyb2xsYWJsZUNoYXJ9IGZyb20gXCIuL0NvbnRyb2xsYWJsZUNoYXJcIjtcblxuZXhwb3J0IGNsYXNzIE1hcCB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgTUFYX0NBTUVSQV9ST1RBVElPTiA9IDAuMDM1O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IENBTUVSQV9ST1RBVElPTl9TVEVQID0gMC4wMDM7XG5cbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6IEdvbGRlblN1bjtcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nO1xuICAgIHB1YmxpYyBrZXlfbmFtZTogc3RyaW5nO1xuICAgIHB1YmxpYyB0aWxlc2V0X25hbWU6IHN0cmluZztcbiAgICBwdWJsaWMgcGh5c2ljc19uYW1lczogc3RyaW5nO1xuICAgIHB1YmxpYyB0aWxlc2V0X2ltYWdlX3VybDogc3RyaW5nO1xuICAgIHB1YmxpYyB0aWxlc2V0X2pzb25fdXJsOiBzdHJpbmc7XG4gICAgcHVibGljIHBoeXNpY3NfanNvbnNfdXJsOiBzdHJpbmc7XG4gICAgcHVibGljIHNwcml0ZTogUGhhc2VyLlRpbGVtYXA7XG4gICAgcHVibGljIGV2ZW50czoge1tsb2NhdGlvbl9rZXk6IHN0cmluZ106IFRpbGVFdmVudFtdfTtcbiAgICBwdWJsaWMgbnBjczogTlBDW107XG4gICAgcHVibGljIGludGVyYWN0YWJsZV9vYmplY3RzOiBJbnRlcmFjdGFibGVPYmplY3RzW107XG4gICAgcHVibGljIGNvbGxpc2lvbl9sYXllcnNfbnVtYmVyOiBudW1iZXI7XG4gICAgcHVibGljIGNvbGxpc2lvbl9zcHJpdGU6IFBoYXNlci5TcHJpdGU7XG4gICAgcHVibGljIGNvbG9yX2ZpbHRlcjogYW55O1xuICAgIHB1YmxpYyBtb2RlN19maWx0ZXI6IGFueTtcbiAgICBwdWJsaWMgY29sbGlzaW9uX2xheWVyOiBudW1iZXI7XG4gICAgcHVibGljIHNob3dfZm9vdHN0ZXBzOiBib29sZWFuO1xuICAgIHB1YmxpYyBhc3NldHNfbG9hZGVkOiBib29sZWFuO1xuICAgIHB1YmxpYyBsYXp5X2xvYWQ6IGJvb2xlYW47XG4gICAgcHVibGljIGxheWVyczogYW55W107XG4gICAgcHVibGljIGNvbGxpc2lvbl9lbWJlZGRlZDogYm9vbGVhbjtcbiAgICBwdWJsaWMgaXNfd29ybGRfbWFwOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGdhbWUsXG4gICAgICAgIGRhdGEsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIGtleV9uYW1lLFxuICAgICAgICB0aWxlc2V0X25hbWUsXG4gICAgICAgIHBoeXNpY3NfbmFtZXMsXG4gICAgICAgIHRpbGVzZXRfaW1hZ2VfdXJsLFxuICAgICAgICB0aWxlc2V0X2pzb25fdXJsLFxuICAgICAgICBwaHlzaWNzX2pzb25zX3VybCxcbiAgICAgICAgbGF6eV9sb2FkLFxuICAgICAgICBjb2xsaXNpb25fZW1iZWRkZWRcbiAgICApIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5rZXlfbmFtZSA9IGtleV9uYW1lO1xuICAgICAgICB0aGlzLnRpbGVzZXRfbmFtZSA9IHRpbGVzZXRfbmFtZTtcbiAgICAgICAgdGhpcy5waHlzaWNzX25hbWVzID0gcGh5c2ljc19uYW1lcyA9PT0gdW5kZWZpbmVkID8gW10gOiBwaHlzaWNzX25hbWVzO1xuICAgICAgICB0aGlzLnRpbGVzZXRfaW1hZ2VfdXJsID0gdGlsZXNldF9pbWFnZV91cmw7XG4gICAgICAgIHRoaXMudGlsZXNldF9qc29uX3VybCA9IHRpbGVzZXRfanNvbl91cmw7XG4gICAgICAgIHRoaXMucGh5c2ljc19qc29uc191cmwgPSBwaHlzaWNzX2pzb25zX3VybCA9PT0gdW5kZWZpbmVkID8gW10gOiBwaHlzaWNzX2pzb25zX3VybDtcbiAgICAgICAgdGhpcy5zcHJpdGUgPSBudWxsO1xuICAgICAgICB0aGlzLmV2ZW50cyA9IHt9O1xuICAgICAgICB0aGlzLm5wY3MgPSBbXTtcbiAgICAgICAgdGhpcy5pbnRlcmFjdGFibGVfb2JqZWN0cyA9IFtdO1xuICAgICAgICB0aGlzLmNvbGxpc2lvbl9sYXllcnNfbnVtYmVyID0gdGhpcy5waHlzaWNzX25hbWVzLmxlbmd0aDtcbiAgICAgICAgdGhpcy5jb2xsaXNpb25fc3ByaXRlID0gdGhpcy5nYW1lLmFkZC5zcHJpdGUoMCwgMCk7XG4gICAgICAgIHRoaXMuY29sbGlzaW9uX3Nwcml0ZS53aWR0aCA9IHRoaXMuY29sbGlzaW9uX3Nwcml0ZS5oZWlnaHQgPSAwO1xuICAgICAgICB0aGlzLmNvbG9yX2ZpbHRlciA9IHRoaXMuZ2FtZS5hZGQuZmlsdGVyKFwiQ29sb3JGaWx0ZXJzXCIpO1xuICAgICAgICB0aGlzLm1vZGU3X2ZpbHRlciA9IHRoaXMuZ2FtZS5hZGQuZmlsdGVyKFwiTW9kZTdcIik7XG4gICAgICAgIHRoaXMuY29sbGlzaW9uX2xheWVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5zaG93X2Zvb3RzdGVwcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmFzc2V0c19sb2FkZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5sYXp5X2xvYWQgPSBsYXp5X2xvYWQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogbGF6eV9sb2FkO1xuICAgICAgICB0aGlzLmxheWVycyA9IFtdO1xuICAgICAgICB0aGlzLmNvbGxpc2lvbl9lbWJlZGRlZCA9IGNvbGxpc2lvbl9lbWJlZGRlZCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBjb2xsaXNpb25fZW1iZWRkZWQ7XG4gICAgICAgIHRoaXMuaXNfd29ybGRfbWFwID0gZmFsc2U7XG4gICAgfVxuXG4gICAgc29ydF9zcHJpdGVzKCkge1xuICAgICAgICBsZXQgc2VuZF90b19iYWNrX2xpc3QgPSBuZXcgQXJyYXkodGhpcy5kYXRhLm5wY19ncm91cC5jaGlsZHJlbi5sZW5ndGgpO1xuICAgICAgICBsZXQgc2VuZF90b19mcm9udF9saXN0ID0gbmV3IEFycmF5KHRoaXMuZGF0YS5ucGNfZ3JvdXAuY2hpbGRyZW4ubGVuZ3RoKTtcbiAgICAgICAgbGV0IGhhc19zb3J0X2Z1bmN0aW9uID0gbmV3IEFycmF5KHRoaXMuZGF0YS5ucGNfZ3JvdXAuY2hpbGRyZW4ubGVuZ3RoKTtcbiAgICAgICAgdGhpcy5kYXRhLm5wY19ncm91cC5jaGlsZHJlbi5mb3JFYWNoKChzcHJpdGU6IFBoYXNlci5TcHJpdGUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBzcHJpdGUueV9zb3J0ID0gcGFyc2VJbnQoc3ByaXRlLmJhc2VfY29sbGlzaW9uX2xheWVyLnRvU3RyaW5nKCkgKyBzcHJpdGUueS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIGlmIChzcHJpdGUuc29ydF9mdW5jdGlvbikge1xuICAgICAgICAgICAgICAgIGhhc19zb3J0X2Z1bmN0aW9uW2luZGV4XSA9IHNwcml0ZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNwcml0ZS5zZW5kX3RvX2JhY2spIHtcbiAgICAgICAgICAgICAgICBzZW5kX3RvX2JhY2tfbGlzdFtpbmRleF0gPSBzcHJpdGU7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzcHJpdGUuc2VuZF90b19mcm9udCkge1xuICAgICAgICAgICAgICAgIHNlbmRfdG9fZnJvbnRfbGlzdFtpbmRleF0gPSBzcHJpdGU7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kYXRhLm5wY19ncm91cC5zb3J0KFwieV9zb3J0XCIsIFBoYXNlci5Hcm91cC5TT1JUX0FTQ0VORElORyk7XG4gICAgICAgIGxldCBzaGFkb3dfaW5kZXggPSB0aGlzLmRhdGEubnBjX2dyb3VwLmdldENoaWxkSW5kZXgodGhpcy5kYXRhLmhlcm8uc3ByaXRlKSAtIDE7XG4gICAgICAgIGlmIChzaGFkb3dfaW5kZXggPj0gLTEgJiYgc2hhZG93X2luZGV4IDwgdGhpcy5kYXRhLm5wY19ncm91cC5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChzaGFkb3dfaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgc2hhZG93X2luZGV4ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGF0YS5ucGNfZ3JvdXAuc2V0Q2hpbGRJbmRleCh0aGlzLmRhdGEuaGVyby5zaGFkb3csIHNoYWRvd19pbmRleCk7IC8vbWFraW5nIHN1cmUgdGhhdCBzaGFkb3cgaXMgYWx3YXlzIGJlaGluZCB0aGUgaGVyb1xuICAgICAgICB9XG4gICAgICAgIHNlbmRfdG9fYmFja19saXN0LmZvckVhY2goc3ByaXRlID0+IHtcbiAgICAgICAgICAgIGlmIChzcHJpdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEubnBjX2dyb3VwLnNlbmRUb0JhY2soc3ByaXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHNlbmRfdG9fZnJvbnRfbGlzdC5mb3JFYWNoKHNwcml0ZSA9PiB7XG4gICAgICAgICAgICBpZiAoc3ByaXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLm5wY19ncm91cC5icmluZ1RvVG9wKHNwcml0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBoYXNfc29ydF9mdW5jdGlvbi5mb3JFYWNoKHNwcml0ZSA9PiB7XG4gICAgICAgICAgICBpZiAoc3ByaXRlKSB7XG4gICAgICAgICAgICAgICAgc3ByaXRlLnNvcnRfZnVuY3Rpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnJlZXplX2JvZHkoKSB7XG4gICAgICAgIHRoaXMuY29sbGlzaW9uX3Nwcml0ZS5ib2R5LnZlbG9jaXR5LnkgPSB0aGlzLmNvbGxpc2lvbl9zcHJpdGUuYm9keS52ZWxvY2l0eS54ID0gMDtcbiAgICB9XG5cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIHRoaXMuZnJlZXplX2JvZHkoKTtcbiAgICAgICAgdGhpcy5ucGNzLmZvckVhY2gobnBjID0+IG5wYy51cGRhdGUoKSk7XG4gICAgICAgIHRoaXMuc29ydF9zcHJpdGVzKCk7XG4gICAgICAgIHRoaXMudXBkYXRlX21hcF9yb3RhdGlvbigpO1xuICAgIH1cblxuICAgIHVwZGF0ZV9tYXBfcm90YXRpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmlzX3dvcmxkX21hcCkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWVfY2hlY2sgPVxuICAgICAgICAgICAgICAgIE1hdGguYWJzKHRoaXMubW9kZTdfZmlsdGVyLmFuZ2xlKSA8IE1hcC5NQVhfQ0FNRVJBX1JPVEFUSU9OICogTWF0aC5hYnModGhpcy5kYXRhLmhlcm8ueF9zcGVlZCk7XG4gICAgICAgICAgICBjb25zdCBzaWduX2NoZWNrID0gTWF0aC5zaWduKHRoaXMubW9kZTdfZmlsdGVyLmFuZ2xlKSA9PT0gdGhpcy5kYXRhLmhlcm8ueF9zcGVlZDtcbiAgICAgICAgICAgIGlmICh0aGlzLmRhdGEuaGVyby54X3NwZWVkICYmICh2YWx1ZV9jaGVjayB8fCBzaWduX2NoZWNrKSkge1xuICAgICAgICAgICAgICAgIHRoaXMubW9kZTdfZmlsdGVyLmFuZ2xlIC09IE1hdGguc2lnbih0aGlzLmRhdGEuaGVyby54X3NwZWVkKSAqIE1hcC5DQU1FUkFfUk9UQVRJT05fU1RFUDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuZGF0YS5oZXJvLnhfc3BlZWQgJiYgTWF0aC5hYnModGhpcy5tb2RlN19maWx0ZXIuYW5nbGUpID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMubW9kZTdfZmlsdGVyLmFuZ2xlIC09IE1hdGguc2lnbih0aGlzLm1vZGU3X2ZpbHRlci5hbmdsZSkgKiBNYXAuQ0FNRVJBX1JPVEFUSU9OX1NURVA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsb2FkX21hcF9hc3NldHMoZm9yY2VfbG9hZDogYm9vbGVhbiwgb25fY29tcGxldGU6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgbGV0IGxvYWRfdGlsZW1hcF9wcm9taXNlX3Jlc29sdmU7XG4gICAgICAgIGxldCBsb2FkX3RpbGVtYXBfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgbG9hZF90aWxlbWFwX3Byb21pc2VfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmdhbWUubG9hZFxuICAgICAgICAgICAgLnRpbGVtYXAodGhpcy5rZXlfbmFtZSwgdGhpcy50aWxlc2V0X2pzb25fdXJsLCBudWxsLCBQaGFzZXIuVGlsZW1hcC5USUxFRF9KU09OKVxuICAgICAgICAgICAgLm9uTG9hZENvbXBsZXRlLmFkZE9uY2UobG9hZF90aWxlbWFwX3Byb21pc2VfcmVzb2x2ZSk7XG5cbiAgICAgICAgbGV0IGxvYWRfaW1hZ2VfcHJvbWlzZV9yZXNvbHZlO1xuICAgICAgICBsZXQgbG9hZF9pbWFnZV9wcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICBsb2FkX2ltYWdlX3Byb21pc2VfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmdhbWUubG9hZC5pbWFnZSh0aGlzLmtleV9uYW1lLCB0aGlzLnRpbGVzZXRfaW1hZ2VfdXJsKS5vbkxvYWRDb21wbGV0ZS5hZGRPbmNlKGxvYWRfaW1hZ2VfcHJvbWlzZV9yZXNvbHZlKTtcblxuICAgICAgICBsZXQgcGh5c2ljc19wcm9taXNlcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGh5c2ljc19uYW1lcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgbGV0IGxvYWRfcGh5c2ljc19wcm9taXNlX3Jlc29sdmU7XG4gICAgICAgICAgICBsZXQgbG9hZF9waHlzaWNzX3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgICAgICBsb2FkX3BoeXNpY3NfcHJvbWlzZV9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcGh5c2ljc19wcm9taXNlcy5wdXNoKGxvYWRfcGh5c2ljc19wcm9taXNlKTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5sb2FkXG4gICAgICAgICAgICAgICAgLnBoeXNpY3ModGhpcy5waHlzaWNzX25hbWVzW2ldLCB0aGlzLnBoeXNpY3NfanNvbnNfdXJsW2ldKVxuICAgICAgICAgICAgICAgIC5vbkxvYWRDb21wbGV0ZS5hZGRPbmNlKGxvYWRfcGh5c2ljc19wcm9taXNlX3Jlc29sdmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JjZV9sb2FkKSB7XG4gICAgICAgICAgICBQcm9taXNlLmFsbChbbG9hZF90aWxlbWFwX3Byb21pc2UsIGxvYWRfaW1hZ2VfcHJvbWlzZSwgLi4ucGh5c2ljc19wcm9taXNlc10pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYXNzZXRzX2xvYWRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgb25fY29tcGxldGUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5nYW1lLmxvYWQuc3RhcnQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbmZpZ19ib2R5KGNvbGxpc2lvbl9vYmo6IENvbGxpc2lvbiwgY29sbGlzaW9uX2xheWVyOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5nYW1lLnBoeXNpY3MucDIuZW5hYmxlKHRoaXMuY29sbGlzaW9uX3Nwcml0ZSwgZmFsc2UpO1xuICAgICAgICB0aGlzLmNvbGxpc2lvbl9zcHJpdGUuYm9keS5jbGVhclNoYXBlcygpO1xuICAgICAgICBpZiAodGhpcy5jb2xsaXNpb25fZW1iZWRkZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY29sbGlzaW9uX3Nwcml0ZS53aWR0aCA9IHRoaXMuc3ByaXRlLndpZHRoSW5QaXhlbHM7XG4gICAgICAgICAgICB0aGlzLmNvbGxpc2lvbl9zcHJpdGUuaGVpZ2h0ID0gdGhpcy5zcHJpdGUuaGVpZ2h0SW5QaXhlbHM7XG4gICAgICAgICAgICB0aGlzLmNvbGxpc2lvbl9zcHJpdGUuYW5jaG9yLnNldFRvKDAsIDApO1xuICAgICAgICAgICAgY29uc3QgY29sbGlzaW9uX2xheWVyX29iamVjdHMgPSB0aGlzLnNwcml0ZS5vYmplY3RzW3RoaXMuY29sbGlzaW9uX2xheWVyXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29sbGlzaW9uX2xheWVyX29iamVjdHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2xsaXNpb25fb2JqZWN0ID0gY29sbGlzaW9uX2xheWVyX29iamVjdHNbaV07XG4gICAgICAgICAgICAgICAgaWYgKGNvbGxpc2lvbl9vYmplY3QucG9seWdvbikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdfcG9seWdvbiA9IGNvbGxpc2lvbl9vYmplY3QucG9seWdvbi5tYXAoKHBvaW50OiBudW1iZXJbXSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3X3BvaW50ID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgucm91bmQoY29sbGlzaW9uX29iamVjdC54ICsgcG9pbnRbMF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgucm91bmQoY29sbGlzaW9uX29iamVjdC55ICsgcG9pbnRbMV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdfcG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbGxpc2lvbl9zcHJpdGUuYm9keS5hZGRQb2x5Z29uKFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGltYWxEZWNvbXA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraXBTaW1wbGVDaGVjazogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ29sbGluZWFyUG9pbnRzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkanVzdENlbnRlck9mTWFzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3X3BvbHlnb25cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvbGxpc2lvbl9vYmplY3QucmVjdGFuZ2xlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29sbGlzaW9uX3Nwcml0ZS5ib2R5LmFkZFJlY3RhbmdsZShcbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgucm91bmQoY29sbGlzaW9uX29iamVjdC53aWR0aCksXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRoLnJvdW5kKGNvbGxpc2lvbl9vYmplY3QuaGVpZ2h0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgucm91bmQoY29sbGlzaW9uX29iamVjdC54KSArIChNYXRoLnJvdW5kKGNvbGxpc2lvbl9vYmplY3Qud2lkdGgpID4+IDEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5yb3VuZChjb2xsaXNpb25fb2JqZWN0LnkpICsgKE1hdGgucm91bmQoY29sbGlzaW9uX29iamVjdC5oZWlnaHQpID4+IDEpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb2xsaXNpb25fb2JqZWN0LmVsbGlwc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2xsaXNpb25fc3ByaXRlLmJvZHkuYWRkQ2lyY2xlKFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sbGlzaW9uX29iamVjdC53aWR0aCA+PiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5yb3VuZChjb2xsaXNpb25fb2JqZWN0LngpICsgKE1hdGgucm91bmQoY29sbGlzaW9uX29iamVjdC53aWR0aCkgPj4gMSksXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRoLnJvdW5kKGNvbGxpc2lvbl9vYmplY3QueSkgKyAoTWF0aC5yb3VuZChjb2xsaXNpb25fb2JqZWN0LmhlaWdodCkgPj4gMSlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNvbGxpc2lvbl9zcHJpdGUuYm9keS5sb2FkUG9seWdvbihcbiAgICAgICAgICAgICAgICAvL2xvYWQgbWFwIHBoeXNpY3MgZGF0YSBqc29uIGZpbGVzXG4gICAgICAgICAgICAgICAgdGhpcy5waHlzaWNzX25hbWVzW2NvbGxpc2lvbl9sYXllcl0sXG4gICAgICAgICAgICAgICAgdGhpcy5waHlzaWNzX25hbWVzW2NvbGxpc2lvbl9sYXllcl1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb2xsaXNpb25fc3ByaXRlLmJvZHkuc2V0Q29sbGlzaW9uR3JvdXAoY29sbGlzaW9uX29iai5tYXBfY29sbGlzaW9uX2dyb3VwKTtcbiAgICAgICAgdGhpcy5jb2xsaXNpb25fc3ByaXRlLmJvZHkuZGFtcGluZyA9IG51bWJlcnMuTUFQX0RBTVBJTkc7XG4gICAgICAgIHRoaXMuY29sbGlzaW9uX3Nwcml0ZS5ib2R5LmFuZ3VsYXJEYW1waW5nID0gbnVtYmVycy5NQVBfREFNUElORztcbiAgICAgICAgdGhpcy5jb2xsaXNpb25fc3ByaXRlLmJvZHkuc2V0WmVyb1JvdGF0aW9uKCk7XG4gICAgICAgIHRoaXMuY29sbGlzaW9uX3Nwcml0ZS5ib2R5LmR5bmFtaWMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jb2xsaXNpb25fc3ByaXRlLmJvZHkuc3RhdGljID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25maWdfYWxsX2JvZGllcyhjb2xsaXNpb25fb2JqOiBDb2xsaXNpb24sIGNvbGxpc2lvbl9sYXllcjogbnVtYmVyKSB7XG4gICAgICAgIGlmICghdGhpcy5pc193b3JsZF9tYXApIHtcbiAgICAgICAgICAgIHRoaXMubnBjcy5mb3JFYWNoKG5wYyA9PiBucGMuY29uZmlnX2JvZHkoY29sbGlzaW9uX29iaikpO1xuICAgICAgICAgICAgdGhpcy5pbnRlcmFjdGFibGVfb2JqZWN0cy5mb3JFYWNoKGludGVyYWN0YWJsZV9vYmogPT4gaW50ZXJhY3RhYmxlX29iai5jb25maWdfYm9keShjb2xsaXNpb25fb2JqKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb25maWdfYm9keShjb2xsaXNpb25fb2JqLCBjb2xsaXNpb25fbGF5ZXIpO1xuICAgIH1cblxuICAgIGdldF9jdXJyZW50X3RpbGUoY29udHJvbGxhYmxlX2NoYXI6IENvbnRyb2xsYWJsZUNoYXIsIGxheWVyPykge1xuICAgICAgICBpZiAobGF5ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3ByaXRlLmdldFRpbGUoY29udHJvbGxhYmxlX2NoYXIudGlsZV94X3BvcywgY29udHJvbGxhYmxlX2NoYXIudGlsZV95X3BvcywgbGF5ZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGF5ZXJzXG4gICAgICAgICAgICAgICAgLm1hcChsYXllciA9PlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNwcml0ZS5nZXRUaWxlKGNvbnRyb2xsYWJsZV9jaGFyLnRpbGVfeF9wb3MsIGNvbnRyb2xsYWJsZV9jaGFyLnRpbGVfeV9wb3MsIGxheWVyLm5hbWUpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIodGlsZSA9PiB0aWxlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldF9sYXllcihuYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIF8uZmluZCh0aGlzLmxheWVycywge25hbWU6IG5hbWV9KTtcbiAgICB9XG5cbiAgICBjcmVhdGVfdGlsZV9ldmVudHMocmF3X3Byb3BlcnR5KSB7XG4gICAgICAgIGNvbnN0IHByb3BlcnR5X2luZm8gPSBKU09OLnBhcnNlKHJhd19wcm9wZXJ0eSk7XG4gICAgICAgIGNvbnN0IHRoaXNfZXZlbnRfbG9jYXRpb25fa2V5ID0gVGlsZUV2ZW50LmdldF9sb2NhdGlvbl9rZXkocHJvcGVydHlfaW5mby54LCBwcm9wZXJ0eV9pbmZvLnkpO1xuICAgICAgICBpZiAoISh0aGlzX2V2ZW50X2xvY2F0aW9uX2tleSBpbiB0aGlzLmV2ZW50cykpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzW3RoaXNfZXZlbnRfbG9jYXRpb25fa2V5XSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wZXJ0eV9pbmZvLnR5cGUgPT09IHRpbGVfZXZlbnRfdHlwZXMuQ0xJTUIpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld19ldmVudCA9IG5ldyBDbGltYkV2ZW50KFxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby54LFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8ueSxcbiAgICAgICAgICAgICAgICBtYXBfZGlyZWN0aW9ucyhwcm9wZXJ0eV9pbmZvLmFjdGl2YXRpb25fZGlyZWN0aW9ucyksXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby5hY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMgPyBwcm9wZXJ0eV9pbmZvLmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycyA6IFswXSxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmFjdGl2ZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IHByb3BlcnR5X2luZm8uYWN0aXZlLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8uY2hhbmdlX3RvX2NvbGxpc2lvbl9sYXllciA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHByb3BlcnR5X2luZm8uY2hhbmdlX3RvX2NvbGxpc2lvbl9sYXllclxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzW3RoaXNfZXZlbnRfbG9jYXRpb25fa2V5XS5wdXNoKG5ld19ldmVudCk7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvcGVydHlfaW5mby50eXBlID09PSB0aWxlX2V2ZW50X3R5cGVzLlNQRUVEKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdfZXZlbnQgPSBuZXcgU3BlZWRFdmVudChcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUsXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8ueCxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLnksXG4gICAgICAgICAgICAgICAgbWFwX2RpcmVjdGlvbnMocHJvcGVydHlfaW5mby5hY3RpdmF0aW9uX2RpcmVjdGlvbnMpLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8uYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzID8gcHJvcGVydHlfaW5mby5hY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMgOiBbMF0sXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby5hY3RpdmUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBwcm9wZXJ0eV9pbmZvLmFjdGl2ZSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLnNwZWVkXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5ldmVudHNbdGhpc19ldmVudF9sb2NhdGlvbl9rZXldLnB1c2gobmV3X2V2ZW50KTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0eV9pbmZvLnR5cGUgPT09IHRpbGVfZXZlbnRfdHlwZXMuVEVMRVBPUlQpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld19ldmVudCA9IG5ldyBUZWxlcG9ydEV2ZW50KFxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby54LFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8ueSxcbiAgICAgICAgICAgICAgICBtYXBfZGlyZWN0aW9ucyhwcm9wZXJ0eV9pbmZvLmFjdGl2YXRpb25fZGlyZWN0aW9ucyksXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby5hY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMgPyBwcm9wZXJ0eV9pbmZvLmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycyA6IFswXSxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmFjdGl2ZSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLnRhcmdldCxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLnhfdGFyZ2V0LFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8ueV90YXJnZXQsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby5hZHZhbmNlX2VmZmVjdCxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmRlc3RfY29sbGlzaW9uX2xheWVyID8gcHJvcGVydHlfaW5mby5kZXN0X2NvbGxpc2lvbl9sYXllciA6IDBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLmV2ZW50c1t0aGlzX2V2ZW50X2xvY2F0aW9uX2tleV0ucHVzaChuZXdfZXZlbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKHByb3BlcnR5X2luZm8udHlwZSA9PT0gdGlsZV9ldmVudF90eXBlcy5TTElERVIpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld19ldmVudCA9IG5ldyBTbGlkZXJFdmVudChcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUsXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8ueCxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLnksXG4gICAgICAgICAgICAgICAgbWFwX2RpcmVjdGlvbnMocHJvcGVydHlfaW5mby5hY3RpdmF0aW9uX2RpcmVjdGlvbnMpLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8uYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzID8gcHJvcGVydHlfaW5mby5hY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMgOiBbMF0sXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby5hY3RpdmUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBwcm9wZXJ0eV9pbmZvLmFjdGl2ZSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLnhfdGFyZ2V0LFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8ueV90YXJnZXQsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby5kZXN0X2NvbGxpc2lvbl9sYXllciA/IHByb3BlcnR5X2luZm8uZGVzdF9jb2xsaXNpb25fbGF5ZXIgOiAwLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8uc2hvd19kdXN0XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5ldmVudHNbdGhpc19ldmVudF9sb2NhdGlvbl9rZXldLnB1c2gobmV3X2V2ZW50KTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0eV9pbmZvLnR5cGUgPT09IHRpbGVfZXZlbnRfdHlwZXMuSlVNUCkge1xuICAgICAgICAgICAgY29uc3QgbmV3X2V2ZW50ID0gbmV3IEp1bXBFdmVudChcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUsXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8ueCxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLnksXG4gICAgICAgICAgICAgICAgbWFwX2RpcmVjdGlvbnMocHJvcGVydHlfaW5mby5hY3RpdmF0aW9uX2RpcmVjdGlvbnMpLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8uYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzID8gcHJvcGVydHlfaW5mby5hY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMgOiBbMF0sXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby5pbml0aWFsbHlfYWN0aXZlID09PSB1bmRlZmluZWQgPyB0cnVlIDogcHJvcGVydHlfaW5mby5pbml0aWFsbHlfYWN0aXZlLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8uaXNfc2V0ID09PSB1bmRlZmluZWQgPyB0cnVlIDogcHJvcGVydHlfaW5mby5pc19zZXRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLmV2ZW50c1t0aGlzX2V2ZW50X2xvY2F0aW9uX2tleV0ucHVzaChuZXdfZXZlbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKHByb3BlcnR5X2luZm8udHlwZSA9PT0gdGlsZV9ldmVudF90eXBlcy5TVEVQKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdfZXZlbnQgPSBuZXcgU3RlcEV2ZW50KFxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby54LFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8ueSxcbiAgICAgICAgICAgICAgICBtYXBfZGlyZWN0aW9ucyhwcm9wZXJ0eV9pbmZvLmFjdGl2YXRpb25fZGlyZWN0aW9ucyksXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby5hY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMgPyBwcm9wZXJ0eV9pbmZvLmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycyA6IFswXSxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmFjdGl2ZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IHByb3BlcnR5X2luZm8uYWN0aXZlLFxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbnNbcHJvcGVydHlfaW5mby5zdGVwX2RpcmVjdGlvbl1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLmV2ZW50c1t0aGlzX2V2ZW50X2xvY2F0aW9uX2tleV0ucHVzaChuZXdfZXZlbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKHByb3BlcnR5X2luZm8udHlwZSA9PT0gdGlsZV9ldmVudF90eXBlcy5DT0xMSVNJT04pIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld19ldmVudCA9IG5ldyBDb2xsaXNpb25FdmVudChcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUsXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8ueCxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLnksXG4gICAgICAgICAgICAgICAgbWFwX2RpcmVjdGlvbnMocHJvcGVydHlfaW5mby5hY3RpdmF0aW9uX2RpcmVjdGlvbnMpLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8uYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzID8gcHJvcGVydHlfaW5mby5hY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMgOiBbMF0sXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby5hY3RpdmUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBwcm9wZXJ0eV9pbmZvLmFjdGl2ZSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmRlc3RfY29sbGlzaW9uX2xheWVyXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5ldmVudHNbdGhpc19ldmVudF9sb2NhdGlvbl9rZXldLnB1c2gobmV3X2V2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZV9ucGNzKHJhd19wcm9wZXJ0eSkge1xuICAgICAgICBjb25zdCBwcm9wZXJ0eV9pbmZvID0gSlNPTi5wYXJzZShyYXdfcHJvcGVydHkpO1xuICAgICAgICBjb25zdCBucGNfZGIgPSB0aGlzLmRhdGEuZGJzLm5wY19kYltwcm9wZXJ0eV9pbmZvLmtleV9uYW1lXTtcbiAgICAgICAgY29uc3QgaW5pdGlhbF9hY3Rpb24gPSBucGNfZGIuaW5pdGlhbF9hY3Rpb247XG4gICAgICAgIGNvbnN0IGluaXRpYWxfYW5pbWF0aW9uID1cbiAgICAgICAgICAgIHByb3BlcnR5X2luZm8uYW5pbWF0aW9uX2tleSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBwcm9wZXJ0eV9pbmZvLmFuaW1hdGlvbl9rZXlcbiAgICAgICAgICAgICAgICA6IG5wY19kYi5hY3Rpb25zW2luaXRpYWxfYWN0aW9uXS5pbml0aWFsX2RpcmVjdGlvbjtcbiAgICAgICAgdGhpcy5ucGNzLnB1c2goXG4gICAgICAgICAgICBuZXcgTlBDKFxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby5rZXlfbmFtZSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmluaXRpYWxfeCxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmluaXRpYWxfeSxcbiAgICAgICAgICAgICAgICBpbml0aWFsX2FjdGlvbixcbiAgICAgICAgICAgICAgICBpbml0aWFsX2FuaW1hdGlvbixcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmVuYWJsZV9mb290c3RlcHMsXG4gICAgICAgICAgICAgICAgbnBjX2RiLndhbGtfc3BlZWQsXG4gICAgICAgICAgICAgICAgbnBjX2RiLmRhc2hfc3BlZWQsXG4gICAgICAgICAgICAgICAgbnBjX2RiLmNsaW1iX3NwZWVkLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8ubnBjX3R5cGUsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby5tb3ZlbWVudF90eXBlLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8ubWVzc2FnZSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLnRob3VnaHRfbWVzc2FnZSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmF2YXRhciA/IHByb3BlcnR5X2luZm8uYXZhdGFyIDogbnVsbCxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLnNob3Bfa2V5LFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8uYmFzZV9jb2xsaXNpb25fbGF5ZXIgPT09IHVuZGVmaW5lZCA/IDAgOiBwcm9wZXJ0eV9pbmZvLmJhc2VfY29sbGlzaW9uX2xheWVyLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8udGFsa19yYW5nZV9mYWN0b3IsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby5ldmVudHMgPT09IHVuZGVmaW5lZCA/IFtdIDogcHJvcGVydHlfaW5mby5ldmVudHMsXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmRicy5ucGNfZGJbcHJvcGVydHlfaW5mby5rZXlfbmFtZV0ubm9fc2hhZG93XG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgY3JlYXRlX2ludGVyYWN0YWJsZV9vYmplY3RzKHJhd19wcm9wZXJ0eSkge1xuICAgICAgICBjb25zdCBwcm9wZXJ0eV9pbmZvID0gSlNPTi5wYXJzZShyYXdfcHJvcGVydHkpO1xuICAgICAgICBjb25zdCBpbnRlcmFjdGFibGVfb2JqZWN0ID0gbmV3IEludGVyYWN0YWJsZU9iamVjdHMoXG4gICAgICAgICAgICB0aGlzLmdhbWUsXG4gICAgICAgICAgICB0aGlzLmRhdGEsXG4gICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmtleV9uYW1lLFxuICAgICAgICAgICAgcHJvcGVydHlfaW5mby54LFxuICAgICAgICAgICAgcHJvcGVydHlfaW5mby55LFxuICAgICAgICAgICAgcHJvcGVydHlfaW5mby5hbGxvd2VkX3RpbGVzID09PSB1bmRlZmluZWQgPyBbXSA6IHByb3BlcnR5X2luZm8uYWxsb3dlZF90aWxlcyxcbiAgICAgICAgICAgIHByb3BlcnR5X2luZm8uYmFzZV9jb2xsaXNpb25fbGF5ZXIgPT09IHVuZGVmaW5lZCA/IDAgOiBwcm9wZXJ0eV9pbmZvLmJhc2VfY29sbGlzaW9uX2xheWVyLFxuICAgICAgICAgICAgcHJvcGVydHlfaW5mby5jb2xsaWRlcl9sYXllcl9zaGlmdCxcbiAgICAgICAgICAgIHByb3BlcnR5X2luZm8ubm90X2FsbG93ZWRfdGlsZXMsXG4gICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLm9iamVjdF9kcm9wX3RpbGVzLFxuICAgICAgICAgICAgcHJvcGVydHlfaW5mby5pbnRlcm1lZGlhdGVfY29sbGlkZXJfbGF5ZXJfc2hpZnRcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5pbnRlcmFjdGFibGVfb2JqZWN0cy5wdXNoKGludGVyYWN0YWJsZV9vYmplY3QpO1xuICAgICAgICBmb3IgKGxldCBwc3luZXJneV9rZXkgaW4gdGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYltwcm9wZXJ0eV9pbmZvLmtleV9uYW1lXS5wc3luZXJneV9rZXlzKSB7XG4gICAgICAgICAgICBjb25zdCBwc3luZXJneV9wcm9wZXJ0aWVzID0gdGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYltwcm9wZXJ0eV9pbmZvLmtleV9uYW1lXS5wc3luZXJneV9rZXlzW1xuICAgICAgICAgICAgICAgIHBzeW5lcmd5X2tleVxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGlmIChwc3luZXJneV9wcm9wZXJ0aWVzLmludGVyYWN0aW9uX3R5cGUgPT09IGludGVyYWN0YWJsZV9vYmplY3RfaW50ZXJhY3Rpb25fdHlwZXMuT05DRSkge1xuICAgICAgICAgICAgICAgIGludGVyYWN0YWJsZV9vYmplY3QuY3VzdG9tX2RhdGFbcHN5bmVyZ3lfa2V5ICsgXCJfY2FzdGVkXCJdID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYltwcm9wZXJ0eV9pbmZvLmtleV9uYW1lXS5wdXNoYWJsZSAmJlxuICAgICAgICAgICAgcHJvcGVydHlfaW5mby5ibG9ja19zdGFpcl9jb2xsaWRlcl9sYXllcl9zaGlmdCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICkge1xuICAgICAgICAgICAgaW50ZXJhY3RhYmxlX29iamVjdC5jdXN0b21fZGF0YS5ibG9ja19zdGFpcl9jb2xsaWRlcl9sYXllcl9zaGlmdCA9XG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby5ibG9ja19zdGFpcl9jb2xsaWRlcl9sYXllcl9zaGlmdDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbmZpZ19pbnRlcmFjdGFibGVfb2JqZWN0KCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaW50ZXJhY3RhYmxlX29iamVjdHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGludGVyYWN0YWJsZV9vYmplY3QgPSB0aGlzLmludGVyYWN0YWJsZV9vYmplY3RzW2ldO1xuICAgICAgICAgICAgaW50ZXJhY3RhYmxlX29iamVjdC5zcHJpdGVfaW5mbyA9IHRoaXMuZGF0YS5pbmZvLml0ZXJfb2Jqc19zcHJpdGVfYmFzZV9saXN0W2ludGVyYWN0YWJsZV9vYmplY3Qua2V5X25hbWVdO1xuICAgICAgICAgICAgaW50ZXJhY3RhYmxlX29iamVjdC5pbml0aWFsX2NvbmZpZyh0aGlzLnNwcml0ZSk7XG4gICAgICAgICAgICBpbnRlcmFjdGFibGVfb2JqZWN0LmluaXRpYWxpemVfcmVsYXRlZF9ldmVudHModGhpcy5ldmVudHMsIHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgY29uZmlnX25wYygpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm5wY3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IG5wYyA9IHRoaXMubnBjc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IG5wY19kYiA9IHRoaXMuZGF0YS5kYnMubnBjX2RiW25wYy5rZXlfbmFtZV07XG4gICAgICAgICAgICBsZXQgYWN0aW9ucyA9IE9iamVjdC5rZXlzKG5wY19kYi5hY3Rpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IG5wY19zcHJpdGVfaW5mbyA9IG5ldyBTcHJpdGVCYXNlKG5wYy5rZXlfbmFtZSwgYWN0aW9ucyk7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGFjdGlvbnMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhY3Rpb24gPSBhY3Rpb25zW2pdO1xuICAgICAgICAgICAgICAgIG5wY19zcHJpdGVfaW5mby5zZXRBY3Rpb25TcHJpdGVzaGVldChcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICBucGNfZGIuYWN0aW9uc1thY3Rpb25dLnNwcml0ZXNoZWV0LmltYWdlLFxuICAgICAgICAgICAgICAgICAgICBucGNfZGIuYWN0aW9uc1thY3Rpb25dLnNwcml0ZXNoZWV0Lmpzb25cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIG5wY19zcHJpdGVfaW5mby5zZXRBY3Rpb25EaXJlY3Rpb25zKFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgIG5wY19kYi5hY3Rpb25zW2FjdGlvbl0uZGlyZWN0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgbnBjX2RiLmFjdGlvbnNbYWN0aW9uXS5mcmFtZXNfY291bnRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIG5wY19zcHJpdGVfaW5mby5zZXRBY3Rpb25GcmFtZVJhdGUoYWN0aW9uLCBucGNfZGIuYWN0aW9uc1thY3Rpb25dLmZyYW1lX3JhdGUpO1xuICAgICAgICAgICAgICAgIG5wY19zcHJpdGVfaW5mby5zZXRBY3Rpb25Mb29wKGFjdGlvbiwgbnBjX2RiLmFjdGlvbnNbYWN0aW9uXS5sb29wKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5wY19zcHJpdGVfaW5mby5nZW5lcmF0ZUFsbEZyYW1lcygpO1xuICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICAgICAgbnBjX3Nwcml0ZV9pbmZvLmxvYWRTcHJpdGVzaGVldHModGhpcy5nYW1lLCB0cnVlLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghbnBjLm5vX3NoYWRvdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbnBjLnNldF9zaGFkb3coXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnBjX2RiLnNoYWRvd19rZXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLm5wY19ncm91cCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBucGMuYmFzZV9jb2xsaXNpb25fbGF5ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnBjX2RiLnNoYWRvd19hbmNob3JfeCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBucGNfZGIuc2hhZG93X2FuY2hvcl95XG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG5wYy5zZXRfc3ByaXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLm5wY19ncm91cCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5wY19zcHJpdGVfaW5mbyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3ByaXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbnBjLmJhc2VfY29sbGlzaW9uX2xheWVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgbnBjX2RiLmFuY2hvcl94LFxuICAgICAgICAgICAgICAgICAgICAgICAgbnBjX2RiLmFuY2hvcl95LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc193b3JsZF9tYXBcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS5kYnMubnBjX2RiW25wYy5rZXlfbmFtZV0uaWdub3JlX3dvcmxkX21hcF9zY2FsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbnBjLnNwcml0ZS5zY2FsZS5zZXRUbygxLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChucGMuc2hhZG93KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnBjLnNoYWRvdy5zY2FsZS5zZXRUbygxLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBucGMuc2V0X3Nwcml0ZV9hc19ucGMoKTtcbiAgICAgICAgICAgICAgICAgICAgbnBjLnBsYXkobnBjLmN1cnJlbnRfYWN0aW9uLCBucGMuY3VycmVudF9kaXJlY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbmZpZ19sYXllcnMob3ZlcmxheWVyX2dyb3VwOiBQaGFzZXIuR3JvdXAsIHVuZGVybGF5ZXJfZ3JvdXA6IFBoYXNlci5Hcm91cCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGF5ZXJzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBsZXQgbGF5ZXIgPSB0aGlzLnNwcml0ZS5jcmVhdGVMYXllcih0aGlzLmxheWVyc1tpXS5uYW1lKTtcbiAgICAgICAgICAgIHRoaXMubGF5ZXJzW2ldLnNwcml0ZSA9IGxheWVyO1xuICAgICAgICAgICAgbGF5ZXIubGF5ZXJfeiA9IHRoaXMubGF5ZXJzW2ldLnByb3BlcnRpZXMueiA9PT0gdW5kZWZpbmVkID8gaSA6IHRoaXMubGF5ZXJzW2ldLnByb3BlcnRpZXMuejtcbiAgICAgICAgICAgIGxheWVyLnJlc2l6ZVdvcmxkKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5sYXllcnNbaV0ucHJvcGVydGllcy5ibGVuZE1vZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxheWVyLmJsZW5kTW9kZSA9IChQSVhJLmJsZW5kTW9kZXNbdGhpcy5sYXllcnNbaV0ucHJvcGVydGllcy5ibGVuZE1vZGVdIGFzIHVua25vd24pIGFzIFBJWEkuYmxlbmRNb2RlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmxheWVyc1tpXS5hbHBoYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbGF5ZXIuYWxwaGEgPSB0aGlzLmxheWVyc1tpXS5hbHBoYTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGlzX292ZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0aGlzLmxheWVyc1tpXS5wcm9wZXJ0aWVzLm92ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzX292ZXJfcHJvcCA9IHRoaXMubGF5ZXJzW2ldLnByb3BlcnRpZXMub3ZlclxuICAgICAgICAgICAgICAgICAgICAudG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgICAgICAuc3BsaXQoXCIsXCIpXG4gICAgICAgICAgICAgICAgICAgIC5tYXAob3ZlciA9PiBwYXJzZUludChvdmVyKSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzX292ZXJfcHJvcC5sZW5ndGggPiB0aGlzLmNvbGxpc2lvbl9sYXllcikge1xuICAgICAgICAgICAgICAgICAgICBpc19vdmVyID0gQm9vbGVhbihpc19vdmVyX3Byb3BbdGhpcy5jb2xsaXNpb25fbGF5ZXJdKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpc19vdmVyID0gQm9vbGVhbihpc19vdmVyX3Byb3BbMF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc19vdmVyKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmxheWVyX2dyb3VwLmFkZChsYXllcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHVuZGVybGF5ZXJfZ3JvdXAuYWRkKGxheWVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIG1vdW50X21hcChjb2xsaXNpb25fbGF5ZXI6IG51bWJlcikge1xuICAgICAgICBpZiAoIXRoaXMuYXNzZXRzX2xvYWRlZCkge1xuICAgICAgICAgICAgbGV0IGxvYWRfcHJvbWlzZV9yZXNvbHZlO1xuICAgICAgICAgICAgY29uc3QgbG9hZF9wcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiAobG9hZF9wcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlKSk7XG4gICAgICAgICAgICB0aGlzLmxvYWRfbWFwX2Fzc2V0cyh0cnVlLCBsb2FkX3Byb21pc2VfcmVzb2x2ZSk7XG4gICAgICAgICAgICBhd2FpdCBsb2FkX3Byb21pc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb2xsaXNpb25fbGF5ZXIgPSBjb2xsaXNpb25fbGF5ZXI7XG4gICAgICAgIHRoaXMuZXZlbnRzID0ge307XG4gICAgICAgIFRpbGVFdmVudC5yZXNldCgpO1xuICAgICAgICBHYW1lRXZlbnQucmVzZXQoKTtcbiAgICAgICAgdGhpcy5zcHJpdGUgPSB0aGlzLmdhbWUuYWRkLnRpbGVtYXAodGhpcy5rZXlfbmFtZSk7XG4gICAgICAgIGlmICh0aGlzLnNwcml0ZS5wcm9wZXJ0aWVzLndvcmxkX21hcCkge1xuICAgICAgICAgICAgdGhpcy5pc193b3JsZF9tYXAgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zcHJpdGUuYWRkVGlsZXNldEltYWdlKHRoaXMudGlsZXNldF9uYW1lLCB0aGlzLmtleV9uYW1lKTtcbiAgICAgICAgdGhpcy5zcHJpdGUub2JqZWN0cyA9IF8ubWFwS2V5cyh0aGlzLnNwcml0ZS5vYmplY3RzLCAob2JqOiBhbnksIGNvbGxpc2lvbl9pbmRleDogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoY29sbGlzaW9uX2luZGV4KTtcbiAgICAgICAgfSkgYXMgYW55O1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zcHJpdGUudGlsZXNldHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHRpbGVzZXQgPSB0aGlzLnNwcml0ZS50aWxlc2V0c1tpXTtcbiAgICAgICAgICAgIGZvciAobGV0IHRpbGVfaW5kZXggaW4gdGlsZXNldC50aWxlUHJvcGVydGllcykge1xuICAgICAgICAgICAgICAgIHRpbGVzZXQudGlsZVByb3BlcnRpZXNbdGlsZV9pbmRleF0uaW5kZXggPSB0aWxlX2luZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgcHJvcGVydHkgaW4gdGhpcy5zcHJpdGUucHJvcGVydGllcykge1xuICAgICAgICAgICAgY29uc3QgcmF3X3Byb3BlcnR5ID0gdGhpcy5zcHJpdGUucHJvcGVydGllc1twcm9wZXJ0eV07XG4gICAgICAgICAgICBpZiAocHJvcGVydHkuc3RhcnRzV2l0aChcImV2ZW50XCIpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVfdGlsZV9ldmVudHMocmF3X3Byb3BlcnR5KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvcGVydHkuc3RhcnRzV2l0aChcIm5wY1wiKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlX25wY3MocmF3X3Byb3BlcnR5KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvcGVydHkuc3RhcnRzV2l0aChcImludGVyYWN0YWJsZV9vYmplY3RcIikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZV9pbnRlcmFjdGFibGVfb2JqZWN0cyhyYXdfcHJvcGVydHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5sYXllcnMgPSB0aGlzLnNwcml0ZS5sYXllcnMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgaWYgKGEucHJvcGVydGllcy5vdmVyICE9PSBiLnByb3BlcnRpZXMub3ZlcikgcmV0dXJuIGEgLSBiO1xuICAgICAgICAgICAgaWYgKGEucHJvcGVydGllcy56ICE9PSBiLnByb3BlcnRpZXMueikgcmV0dXJuIGEgLSBiO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmNvbmZpZ19sYXllcnModGhpcy5kYXRhLm92ZXJsYXllcl9ncm91cCwgdGhpcy5kYXRhLnVuZGVybGF5ZXJfZ3JvdXApO1xuICAgICAgICB0aGlzLmNvbmZpZ19pbnRlcmFjdGFibGVfb2JqZWN0KCk7XG4gICAgICAgIGF3YWl0IHRoaXMuY29uZmlnX25wYygpO1xuXG4gICAgICAgIGlmICh0aGlzLnNwcml0ZS5wcm9wZXJ0aWVzLmZvb3RwcmludCkge1xuICAgICAgICAgICAgdGhpcy5zaG93X2Zvb3RzdGVwcyA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNvbmZpZ193b3JsZF9tYXAoKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjb25maWdfd29ybGRfbWFwKCkge1xuICAgICAgICBsZXQgbmV4dF9ib2R5X3JhZGl1cyA9IG51bWJlcnMuSEVST19CT0RZX1JBRElVUztcbiAgICAgICAgaWYgKHRoaXMuaXNfd29ybGRfbWFwKSB7XG4gICAgICAgICAgICB0aGlzLmxheWVycy5mb3JFYWNoKGwgPT4gKGwuc3ByaXRlLmZpbHRlcnMgPSBbdGhpcy5tb2RlN19maWx0ZXJdKSk7XG4gICAgICAgICAgICB0aGlzLmdhbWUuY2FtZXJhLmJvdW5kcyA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLm5wY3MuZm9yRWFjaChucGMgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5kYXRhLmRicy5ucGNfZGJbbnBjLmtleV9uYW1lXS5pZ25vcmVfd29ybGRfbWFwX3NjYWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIG5wYy5zcHJpdGUuc2NhbGUuc2V0VG8obnVtYmVycy5XT1JMRF9NQVBfU1BSSVRFX1NDQUxFX1gsIG51bWJlcnMuV09STERfTUFQX1NQUklURV9TQ0FMRV9ZKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbnBjLnNwcml0ZS5kYXRhLm1vZGU3ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBucGMuc3ByaXRlLmRhdGEubWFwID0gdGhpcztcbiAgICAgICAgICAgICAgICBpZiAobnBjLnNoYWRvdykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZGF0YS5kYnMubnBjX2RiW25wYy5rZXlfbmFtZV0uaWdub3JlX3dvcmxkX21hcF9zY2FsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbnBjLnNoYWRvdy5zY2FsZS5zZXRUbyhudW1iZXJzLldPUkxEX01BUF9TUFJJVEVfU0NBTEVfWCwgbnVtYmVycy5XT1JMRF9NQVBfU1BSSVRFX1NDQUxFX1kpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG5wYy5zaGFkb3cuZGF0YS5tb2RlNyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIG5wYy5zaGFkb3cuZGF0YS5tYXAgPSB0aGlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5pbnRlcmFjdGFibGVfb2JqZWN0cy5mb3JFYWNoKG9iaiA9PiAob2JqLnNwcml0ZS5kYXRhLm1vZGU3ID0gdHJ1ZSkpO1xuICAgICAgICAgICAgbmV4dF9ib2R5X3JhZGl1cyA9IG51bWJlcnMuSEVST19CT0RZX1JBRElVU19NNztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5jYW1lcmEuYm91bmRzID0gbmV3IFBoYXNlci5SZWN0YW5nbGUoKTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5jYW1lcmEuYm91bmRzLmNvcHlGcm9tKHRoaXMuZ2FtZS53b3JsZC5ib3VuZHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZGF0YS5oZXJvICYmIG5leHRfYm9keV9yYWRpdXMgIT09IHRoaXMuZGF0YS5oZXJvLmJvZHlfcmFkaXVzKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5jb25maWdfYm9keShcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuY29sbGlzaW9uLFxuICAgICAgICAgICAgICAgIHRoaXMuaXNfd29ybGRfbWFwID8gbnVtYmVycy5IRVJPX0JPRFlfUkFESVVTX003IDogbnVtYmVycy5IRVJPX0JPRFlfUkFESVVTXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNfd29ybGRfbWFwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc3ByaXRlLnNjYWxlLnNldFRvKG51bWJlcnMuV09STERfTUFQX1NQUklURV9TQ0FMRV9YLCBudW1iZXJzLldPUkxEX01BUF9TUFJJVEVfU0NBTEVfWSk7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc2hhZG93LnNjYWxlLnNldFRvKG51bWJlcnMuV09STERfTUFQX1NQUklURV9TQ0FMRV9YLCBudW1iZXJzLldPUkxEX01BUF9TUFJJVEVfU0NBTEVfWSk7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uY3JlYXRlX2hhbGZfY3JvcF9tYXNrKHRoaXMuaXNfd29ybGRfbWFwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc3ByaXRlLnNjYWxlLnNldFRvKDEsIDEpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnNoYWRvdy5zY2FsZS5zZXRUbygxLCAxKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zcHJpdGUubWFzay5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc3ByaXRlLm1hc2sgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdW5zZXRfbWFwKCkge1xuICAgICAgICB0aGlzLmRhdGEudW5kZXJsYXllcl9ncm91cC5yZW1vdmVBbGwoKTtcbiAgICAgICAgdGhpcy5kYXRhLm92ZXJsYXllcl9ncm91cC5yZW1vdmVBbGwoKTtcblxuICAgICAgICB0aGlzLmNvbGxpc2lvbl9zcHJpdGUuYm9keS5jbGVhclNoYXBlcygpO1xuXG4gICAgICAgIGlmICh0aGlzLnNob3dfZm9vdHN0ZXBzKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5mb290c3RlcHMuY2xlYW5fYWxsKCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc3ByaXRlc190b19yZW1vdmUgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRhdGEubnBjX2dyb3VwLmNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBsZXQgc3ByaXRlID0gdGhpcy5kYXRhLm5wY19ncm91cC5jaGlsZHJlbltpXSBhcyBQaGFzZXIuU3ByaXRlO1xuICAgICAgICAgICAgaWYgKCFzcHJpdGUuaXNfbnBjICYmICFzcHJpdGUuaXNfaW50ZXJhY3RhYmxlX29iamVjdCkgY29udGludWU7XG4gICAgICAgICAgICBpZiAoc3ByaXRlLmlzX2ludGVyYWN0YWJsZV9vYmplY3QgJiYgc3ByaXRlLmludGVyYWN0YWJsZV9vYmplY3QuY3VzdG9tX2RhdGEuYmxvY2tpbmdfc3RhaXJfYmxvY2spIHtcbiAgICAgICAgICAgICAgICBzcHJpdGUuaW50ZXJhY3RhYmxlX29iamVjdC5jdXN0b21fZGF0YS5ibG9ja2luZ19zdGFpcl9ibG9jay5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgc3ByaXRlLmludGVyYWN0YWJsZV9vYmplY3QuY3VzdG9tX2RhdGEuYmxvY2tpbmdfc3RhaXJfYmxvY2sgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzcHJpdGVzX3RvX3JlbW92ZS5wdXNoKHNwcml0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzcHJpdGVzX3RvX3JlbW92ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgbGV0IHNwcml0ZSA9IHNwcml0ZXNfdG9fcmVtb3ZlW2ldO1xuICAgICAgICAgICAgdGhpcy5kYXRhLm5wY19ncm91cC5yZW1vdmUoc3ByaXRlLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubnBjcyA9IFtdO1xuICAgICAgICB0aGlzLmludGVyYWN0YWJsZV9vYmplY3RzID0gW107XG4gICAgICAgIHRoaXMuZGF0YS5ucGNfZ3JvdXAucmVtb3ZlQWxsKCk7XG4gICAgICAgIHRoaXMuZGF0YS5ucGNfZ3JvdXAuYWRkKHRoaXMuZGF0YS5oZXJvLnNoYWRvdyk7XG4gICAgICAgIHRoaXMuZGF0YS5ucGNfZ3JvdXAuYWRkKHRoaXMuZGF0YS5oZXJvLnNwcml0ZSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtiYXNlX2FjdGlvbnMsIGRpcmVjdGlvbnMsIHJldmVyc2VfZGlyZWN0aW9uc30gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQge2V2ZW50X3R5cGVzLCBUaWxlRXZlbnR9IGZyb20gXCIuL1RpbGVFdmVudFwiO1xuaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tIFwiLi4vbWFnaWNfbnVtYmVyc1wiO1xuaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XG5cbmV4cG9ydCBjbGFzcyBUZWxlcG9ydEV2ZW50IGV4dGVuZHMgVGlsZUV2ZW50IHtcbiAgICBwdWJsaWMgdGFyZ2V0OiBzdHJpbmc7XG4gICAgcHVibGljIHhfdGFyZ2V0OiBudW1iZXI7XG4gICAgcHVibGljIHlfdGFyZ2V0OiBudW1iZXI7XG4gICAgcHVibGljIGFkdmFuY2VfZWZmZWN0OiBib29sZWFuO1xuICAgIHB1YmxpYyBkZXN0X2NvbGxpc2lvbl9sYXllcjogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGdhbWUsXG4gICAgICAgIGRhdGEsXG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIGFjdGl2YXRpb25fZGlyZWN0aW9ucyxcbiAgICAgICAgYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzLFxuICAgICAgICBkeW5hbWljLFxuICAgICAgICBhY3RpdmUsXG4gICAgICAgIHRhcmdldCxcbiAgICAgICAgeF90YXJnZXQsXG4gICAgICAgIHlfdGFyZ2V0LFxuICAgICAgICBhZHZhbmNlX2VmZmVjdCxcbiAgICAgICAgZGVzdF9jb2xsaXNpb25fbGF5ZXJcbiAgICApIHtcbiAgICAgICAgc3VwZXIoXG4gICAgICAgICAgICBnYW1lLFxuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIGV2ZW50X3R5cGVzLlRFTEVQT1JULFxuICAgICAgICAgICAgeCxcbiAgICAgICAgICAgIHksXG4gICAgICAgICAgICBhY3RpdmF0aW9uX2RpcmVjdGlvbnMsXG4gICAgICAgICAgICBhY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMsXG4gICAgICAgICAgICBkeW5hbWljLFxuICAgICAgICAgICAgYWN0aXZlLFxuICAgICAgICAgICAgbnVsbFxuICAgICAgICApO1xuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgdGhpcy54X3RhcmdldCA9IHhfdGFyZ2V0O1xuICAgICAgICB0aGlzLnlfdGFyZ2V0ID0geV90YXJnZXQ7XG4gICAgICAgIHRoaXMuYWR2YW5jZV9lZmZlY3QgPSBhZHZhbmNlX2VmZmVjdDtcbiAgICAgICAgdGhpcy5kZXN0X2NvbGxpc2lvbl9sYXllciA9IGRlc3RfY29sbGlzaW9uX2xheWVyO1xuICAgIH1cblxuICAgIGZpcmUoKSB7XG4gICAgICAgIGlmICghdGhpcy5jaGVja19wb3NpdGlvbigpIHx8ICF0aGlzLmRhdGEuaGVyb19tb3ZlbWVudF9hbGxvd2VkKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLm9uX2V2ZW50ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kYXRhLmhlcm8udGVsZXBvcnRpbmcgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5hZHZhbmNlX2VmZmVjdCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmRhdGEuaGVyby5zdG9wX2J5X2NvbGxpZGluZykge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS50aWxlX2V2ZW50X21hbmFnZXIub25fZXZlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaGVyby50ZWxlcG9ydGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnBsYXkoYmFzZV9hY3Rpb25zLldBTEssIHJldmVyc2VfZGlyZWN0aW9uc1tkaXJlY3Rpb25zLnVwXSk7XG4gICAgICAgICAgICB0aGlzLm9wZW5fZG9vcigpO1xuICAgICAgICAgICAgdGhpcy5nYW1lLnBoeXNpY3MucDIucGF1c2UoKTtcbiAgICAgICAgICAgIGNvbnN0IHRpbWUgPSA0MDA7XG4gICAgICAgICAgICBjb25zdCB0d2Vlbl94ID0gdGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZVdpZHRoICogKHRoaXMueCArIDAuNSk7XG4gICAgICAgICAgICBjb25zdCB0d2Vlbl95ID0gdGhpcy5kYXRhLmhlcm8uc3ByaXRlLnkgLSAxNTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcy5kYXRhLmhlcm8uc2hhZG93KS50byhcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHg6IHR3ZWVuX3gsXG4gICAgICAgICAgICAgICAgICAgIHk6IHR3ZWVuX3ksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0aW1lLFxuICAgICAgICAgICAgICAgIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsXG4gICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5hZGRcbiAgICAgICAgICAgICAgICAudHdlZW4odGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkpXG4gICAgICAgICAgICAgICAgLnRvKFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiB0d2Vlbl94LFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogdHdlZW5feSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdGltZSxcbiAgICAgICAgICAgICAgICAgICAgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSxcbiAgICAgICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW1lcmFfZmFkZV9pbigpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jYW1lcmFfZmFkZV9pbigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2FtZXJhX2ZhZGVfaW4oKSB7XG4gICAgICAgIHRoaXMuZGF0YS5oZXJvLnN0b3BfY2hhcih0cnVlKTtcbiAgICAgICAgdGhpcy5nYW1lLmNhbWVyYS5mYWRlKCk7XG4gICAgICAgIHRoaXMuZ2FtZS5jYW1lcmEub25GYWRlQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zZXRfZGlyZWN0aW9uKHRoaXMuYWN0aXZhdGlvbl9kaXJlY3Rpb25zWzBdKTtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnBsYXkoYmFzZV9hY3Rpb25zLklETEUsIHJldmVyc2VfZGlyZWN0aW9uc1t0aGlzLmRhdGEuaGVyby5jdXJyZW50X2RpcmVjdGlvbl0pO1xuICAgICAgICAgICAgdGhpcy5nYW1lLmNhbWVyYS5sZXJwLnNldFRvKDEsIDEpO1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VfbWFwKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFzeW5jIGNoYW5nZV9tYXAoKSB7XG4gICAgICAgIHRoaXMuZGF0YS5tYXAudW5zZXRfbWFwKCk7XG4gICAgICAgIGNvbnN0IG5leHRfbWFwX2tleV9uYW1lID0gdGhpcy50YXJnZXQ7XG4gICAgICAgIGNvbnN0IHRhcmdldF9jb2xsaXNpb25fbGF5ZXIgPSB0aGlzLmRlc3RfY29sbGlzaW9uX2xheWVyO1xuICAgICAgICB0aGlzLmRhdGEuaGVyby5zaGFkb3cuYmFzZV9jb2xsaXNpb25fbGF5ZXIgPSB0YXJnZXRfY29sbGlzaW9uX2xheWVyO1xuICAgICAgICB0aGlzLmRhdGEuaGVyby5zcHJpdGUuYmFzZV9jb2xsaXNpb25fbGF5ZXIgPSB0YXJnZXRfY29sbGlzaW9uX2xheWVyO1xuICAgICAgICB0aGlzLmRhdGEubWFwID0gYXdhaXQgdGhpcy5kYXRhLmluZm8ubWFwc19saXN0W25leHRfbWFwX2tleV9uYW1lXS5tb3VudF9tYXAodGFyZ2V0X2NvbGxpc2lvbl9sYXllcik7XG4gICAgICAgIHRoaXMuZ2FtZS5jYW1lcmEuc2V0Qm91bmRzVG9Xb3JsZCgpO1xuICAgICAgICBpZiAodGhpcy5nYW1lLmNhbWVyYS5ib3VuZHM/LndpZHRoIDwgbnVtYmVycy5HQU1FX1dJRFRIKSB7XG4gICAgICAgICAgICB0aGlzLmdhbWUuY2FtZXJhLmJvdW5kcy53aWR0aCA9IG51bWJlcnMuR0FNRV9XSURUSDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5nYW1lLmNhbWVyYS5ib3VuZHM/LmhlaWdodCA8IG51bWJlcnMuR0FNRV9IRUlHSFQpIHtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5jYW1lcmEuYm91bmRzLmhlaWdodCA9IG51bWJlcnMuR0FNRV9IRUlHSFQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kYXRhLmNvbGxpc2lvbi5jb25maWdfY29sbGlzaW9uX2dyb3Vwcyh0aGlzLmRhdGEubWFwKTtcbiAgICAgICAgdGhpcy5kYXRhLm1hcC5jb25maWdfYWxsX2JvZGllcyh0aGlzLmRhdGEuY29sbGlzaW9uLCB0aGlzLmRhdGEubWFwLmNvbGxpc2lvbl9sYXllcik7XG4gICAgICAgIHRoaXMuZGF0YS5jb2xsaXNpb24uY29uZmlnX2NvbGxpc2lvbnModGhpcy5kYXRhLm1hcCwgdGhpcy5kYXRhLm1hcC5jb2xsaXNpb25fbGF5ZXIsIHRoaXMuZGF0YS5ucGNfZ3JvdXApO1xuICAgICAgICB0aGlzLmdhbWUucGh5c2ljcy5wMi51cGRhdGVCb3VuZHNDb2xsaXNpb25Hcm91cCgpO1xuICAgICAgICB0aGlzLmRhdGEuZGVidWcudXBkYXRlX2RlYnVnX3BoeXNpY3ModGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkuZGVidWcpO1xuICAgICAgICB0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keS54ID0gKHRoaXMueF90YXJnZXQgKyAwLjUpICogdGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZVdpZHRoO1xuICAgICAgICB0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keS55ID0gKHRoaXMueV90YXJnZXQgKyAwLjUpICogdGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZUhlaWdodDtcbiAgICAgICAgdGhpcy5nYW1lLnBoeXNpY3MucDIucmVzdW1lKCk7XG4gICAgICAgIHRoaXMuY2FtZXJhX2ZhZGVfb3V0KCk7XG4gICAgfVxuXG4gICAgY2FtZXJhX2ZhZGVfb3V0KCkge1xuICAgICAgICB0aGlzLmRhdGEuaGVyby51cGRhdGVfc2hhZG93KCk7XG4gICAgICAgIHRoaXMuZGF0YS5oZXJvLnVwZGF0ZV9oYWxmX2Nyb3AodHJ1ZSk7XG4gICAgICAgIHRoaXMuZGF0YS5tYXAuc29ydF9zcHJpdGVzKCk7XG4gICAgICAgIHRoaXMuZGF0YS5tYXAubnBjcy5mb3JFYWNoKG5wYyA9PiBucGMudXBkYXRlKCkpO1xuICAgICAgICB0aGlzLmdhbWUuY2FtZXJhLmZsYXNoKDB4MCk7XG4gICAgICAgIHRoaXMuZ2FtZS5jYW1lcmEub25GbGFzaENvbXBsZXRlLmFkZE9uY2UoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5nYW1lLmNhbWVyYS5sZXJwLnNldFRvKG51bWJlcnMuQ0FNRVJBX0xFUlAsIG51bWJlcnMuQ0FNRVJBX0xFUlApO1xuICAgICAgICAgICAgdGhpcy5kYXRhLnRpbGVfZXZlbnRfbWFuYWdlci5vbl9ldmVudCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8udGVsZXBvcnRpbmcgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb3Blbl9kb29yKCkge1xuICAgICAgICBjb25zdCBsYXllciA9IF8uZmluZCh0aGlzLmRhdGEubWFwLnNwcml0ZS5sYXllcnMsIHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMuZGF0YS5tYXAuc3ByaXRlLnByb3BlcnRpZXMuZG9vcl9sYXllcixcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHNhbXBsZV90aWxlID0gdGhpcy5kYXRhLm1hcC5zcHJpdGUuZ2V0VGlsZSh0aGlzLngsIHRoaXMueSAtIDEsIGxheWVyLm5hbWUpO1xuICAgICAgICBjb25zdCBkb29yX3R5cGVfaW5kZXggPSBzYW1wbGVfdGlsZS5wcm9wZXJ0aWVzLmRvb3JfdHlwZTtcbiAgICAgICAgY29uc3QgdGlsZXMgPSBfLmZpbHRlcih0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlc2V0c1swXS50aWxlUHJvcGVydGllcywga2V5ID0+IHtcbiAgICAgICAgICAgIHJldHVybiBrZXkuZG9vcl90eXBlID09PSBkb29yX3R5cGVfaW5kZXggJiYgXCJjbG9zZV9kb29yXCIgaW4ga2V5ICYmIGtleS5pZCA9PT0gc2FtcGxlX3RpbGUucHJvcGVydGllcy5pZDtcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCB0aWxlLCBzb3VyY2VfaW5kZXgsIGNsb3NlX2Rvb3JfaW5kZXgsIG9mZnNldHMsIGJhc2VfeCwgYmFzZV95LCB0YXJnZXRfaW5kZXg7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGlsZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHRpbGUgPSB0aWxlc1tpXTtcbiAgICAgICAgICAgIHNvdXJjZV9pbmRleCA9ICh0aWxlLmluZGV4IHwgMCkgKyAxO1xuICAgICAgICAgICAgY2xvc2VfZG9vcl9pbmRleCA9IHRpbGUuY2xvc2VfZG9vcjtcbiAgICAgICAgICAgIG9mZnNldHMgPSB0aWxlLmJhc2Vfb2Zmc2V0LnNwbGl0KFwiLFwiKTtcbiAgICAgICAgICAgIGJhc2VfeCA9IHRoaXMueCArIChvZmZzZXRzWzBdIHwgMCk7XG4gICAgICAgICAgICBiYXNlX3kgPSB0aGlzLnkgKyAob2Zmc2V0c1sxXSB8IDApIC0gMTtcbiAgICAgICAgICAgIHRhcmdldF9pbmRleCA9XG4gICAgICAgICAgICAgICAgcGFyc2VJbnQoXG4gICAgICAgICAgICAgICAgICAgIF8uZmluZEtleSh0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlc2V0c1swXS50aWxlUHJvcGVydGllcywge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3Blbl9kb29yOiBjbG9zZV9kb29yX2luZGV4LFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICkgKyAxO1xuICAgICAgICAgICAgdGhpcy5kYXRhLm1hcC5zcHJpdGUucmVwbGFjZShzb3VyY2VfaW5kZXgsIHRhcmdldF9pbmRleCwgYmFzZV94LCBiYXNlX3ksIDEsIDEsIGxheWVyLm5hbWUpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHtkaXJlY3Rpb25zfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCB7VGlsZUV2ZW50LCBldmVudF90eXBlc30gZnJvbSBcIi4vVGlsZUV2ZW50XCI7XG5cbmV4cG9ydCBjbGFzcyBTdGVwRXZlbnQgZXh0ZW5kcyBUaWxlRXZlbnQge1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFNURVBfU0hJRlRfRkFDVE9SID0gMztcblxuICAgIHB1YmxpYyBzdGVwX2RpcmVjdGlvbjogbnVtYmVyO1xuICAgIHB1YmxpYyBuZXh0X3g6IG51bWJlcjtcbiAgICBwdWJsaWMgbmV4dF95OiBudW1iZXI7XG4gICAgcHVibGljIHNoaWZ0X3k6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEsIHgsIHksIGFjdGl2YXRpb25fZGlyZWN0aW9ucywgYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzLCBkeW5hbWljLCBhY3RpdmUsIHN0ZXBfZGlyZWN0aW9uKSB7XG4gICAgICAgIHN1cGVyKFxuICAgICAgICAgICAgZ2FtZSxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICBldmVudF90eXBlcy5TVEVQLFxuICAgICAgICAgICAgeCxcbiAgICAgICAgICAgIHksXG4gICAgICAgICAgICBhY3RpdmF0aW9uX2RpcmVjdGlvbnMsXG4gICAgICAgICAgICBhY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMsXG4gICAgICAgICAgICBkeW5hbWljLFxuICAgICAgICAgICAgYWN0aXZlLFxuICAgICAgICAgICAgbnVsbFxuICAgICAgICApO1xuICAgICAgICB0aGlzLnN0ZXBfZGlyZWN0aW9uID0gc3RlcF9kaXJlY3Rpb247XG4gICAgICAgIHRoaXMubmV4dF94ID0gMDtcbiAgICAgICAgdGhpcy5uZXh0X3kgPSAwO1xuICAgICAgICB0aGlzLnNoaWZ0X3kgPSAwO1xuICAgIH1cblxuICAgIHNldCgpIHtcbiAgICAgICAgbGV0IG5leHRfeCxcbiAgICAgICAgICAgIG5leHRfeSA9IHRoaXMueSxcbiAgICAgICAgICAgIHNoaWZ0X3k7XG4gICAgICAgIGlmICh0aGlzLnN0ZXBfZGlyZWN0aW9uID09PSBkaXJlY3Rpb25zLnVwKSB7XG4gICAgICAgICAgICBzaGlmdF95ID0gLSgodGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZUhlaWdodCAvIFN0ZXBFdmVudC5TVEVQX1NISUZUX0ZBQ1RPUikgfCAwKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN0ZXBfZGlyZWN0aW9uID09PSBkaXJlY3Rpb25zLmRvd24pIHtcbiAgICAgICAgICAgIHNoaWZ0X3kgPSAodGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZUhlaWdodCAvIFN0ZXBFdmVudC5TVEVQX1NISUZUX0ZBQ1RPUikgfCAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmFjdGl2YXRpb25fZGlyZWN0aW9uc1swXSA9PT0gZGlyZWN0aW9ucy5sZWZ0KSB7XG4gICAgICAgICAgICBuZXh0X3ggPSB0aGlzLnggLSAxO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuYWN0aXZhdGlvbl9kaXJlY3Rpb25zWzBdID09PSBkaXJlY3Rpb25zLnJpZ2h0KSB7XG4gICAgICAgICAgICBuZXh0X3ggPSB0aGlzLnggKyAxO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubmV4dF94ID0gbmV4dF94O1xuICAgICAgICB0aGlzLm5leHRfeSA9IG5leHRfeTtcbiAgICAgICAgdGhpcy5zaGlmdF95ID0gc2hpZnRfeTtcbiAgICAgICAgdGhpcy5kYXRhLnRpbGVfZXZlbnRfbWFuYWdlci5zZXRfdHJpZ2dlcmVkX2V2ZW50KHRoaXMpO1xuICAgIH1cblxuICAgIGZpcmUoKSB7XG4gICAgICAgIGlmICh0aGlzLmRhdGEuaGVyby50aWxlX3hfcG9zID09PSB0aGlzLm5leHRfeCAmJiB0aGlzLmRhdGEuaGVyby50aWxlX3lfcG9zID09PSB0aGlzLm5leHRfeSkge1xuICAgICAgICAgICAgdGhpcy5kYXRhLnRpbGVfZXZlbnRfbWFuYWdlci51bnNldF90cmlnZ2VyZWRfZXZlbnQodGhpcyk7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zaGFkb3dfZm9sbG93aW5nID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zaGFkb3cueSArPSB0aGlzLnNoaWZ0X3k7XG4gICAgICAgICAgICBjb25zdCB0d2VlbiA9IHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkpLnRvKFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgeTogdGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkueSArIHRoaXMuc2hpZnRfeSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRoaXMuc2hpZnRfeSA+IDAgPyA4MCA6IDUwLFxuICAgICAgICAgICAgICAgIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsXG4gICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHR3ZWVuLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc2hhZG93X2ZvbGxvd2luZyA9IHRydWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHR3ZWVuLm9uVXBkYXRlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnNoYWRvdy54ID0gdGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkueDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmNoZWNrX3Bvc2l0aW9uKCkpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS50aWxlX2V2ZW50X21hbmFnZXIudW5zZXRfdHJpZ2dlcmVkX2V2ZW50KHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHtkaXJlY3Rpb25zfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCB7VGlsZUV2ZW50LCBldmVudF90eXBlc30gZnJvbSBcIi4vVGlsZUV2ZW50XCI7XG5cbmV4cG9ydCBjbGFzcyBDb2xsaXNpb25FdmVudCBleHRlbmRzIFRpbGVFdmVudCB7XG4gICAgcHVibGljIGRlc3RfY29sbGlzaW9uX2xheWVyOiBudW1iZXI7XG4gICAgcHVibGljIG5leHRfeDogbnVtYmVyO1xuICAgIHB1YmxpYyBuZXh0X3k6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBnYW1lLFxuICAgICAgICBkYXRhLFxuICAgICAgICB4LFxuICAgICAgICB5LFxuICAgICAgICBhY3RpdmF0aW9uX2RpcmVjdGlvbnMsXG4gICAgICAgIGFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycyxcbiAgICAgICAgZHluYW1pYyxcbiAgICAgICAgYWN0aXZlLFxuICAgICAgICBkZXN0X2NvbGxpc2lvbl9sYXllclxuICAgICkge1xuICAgICAgICBzdXBlcihcbiAgICAgICAgICAgIGdhbWUsXG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgZXZlbnRfdHlwZXMuQ09MTElTSU9OLFxuICAgICAgICAgICAgeCxcbiAgICAgICAgICAgIHksXG4gICAgICAgICAgICBhY3RpdmF0aW9uX2RpcmVjdGlvbnMsXG4gICAgICAgICAgICBhY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMsXG4gICAgICAgICAgICBkeW5hbWljLFxuICAgICAgICAgICAgYWN0aXZlLFxuICAgICAgICAgICAgbnVsbFxuICAgICAgICApO1xuICAgICAgICB0aGlzLmRlc3RfY29sbGlzaW9uX2xheWVyID0gZGVzdF9jb2xsaXNpb25fbGF5ZXI7XG4gICAgICAgIHRoaXMubmV4dF94ID0gMDtcbiAgICAgICAgdGhpcy5uZXh0X3kgPSAwO1xuICAgIH1cblxuICAgIHNldCgpIHtcbiAgICAgICAgbGV0IG5leHRfeCA9IHRoaXMueCxcbiAgICAgICAgICAgIG5leHRfeSA9IHRoaXMueTtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZhdGlvbl9kaXJlY3Rpb25zWzBdID09PSBkaXJlY3Rpb25zLmxlZnQpIHtcbiAgICAgICAgICAgIG5leHRfeCA9IHRoaXMueCAtIDE7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5hY3RpdmF0aW9uX2RpcmVjdGlvbnNbMF0gPT09IGRpcmVjdGlvbnMucmlnaHQpIHtcbiAgICAgICAgICAgIG5leHRfeCA9IHRoaXMueCArIDE7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5hY3RpdmF0aW9uX2RpcmVjdGlvbnNbMF0gPT09IGRpcmVjdGlvbnMudXApIHtcbiAgICAgICAgICAgIG5leHRfeSA9IHRoaXMueSAtIDE7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5hY3RpdmF0aW9uX2RpcmVjdGlvbnNbMF0gPT09IGRpcmVjdGlvbnMuZG93bikge1xuICAgICAgICAgICAgbmV4dF95ID0gdGhpcy55ICsgMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5leHRfeCA9IG5leHRfeDtcbiAgICAgICAgdGhpcy5uZXh0X3kgPSBuZXh0X3k7XG4gICAgICAgIHRoaXMuZGF0YS50aWxlX2V2ZW50X21hbmFnZXIuc2V0X3RyaWdnZXJlZF9ldmVudCh0aGlzKTtcbiAgICB9XG5cbiAgICBmaXJlKCkge1xuICAgICAgICBpZiAodGhpcy5kYXRhLmhlcm8udGlsZV94X3BvcyA9PT0gdGhpcy5uZXh0X3ggJiYgdGhpcy5kYXRhLmhlcm8udGlsZV95X3BvcyA9PT0gdGhpcy5uZXh0X3kpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS50aWxlX2V2ZW50X21hbmFnZXIudW5zZXRfdHJpZ2dlcmVkX2V2ZW50KHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5kYXRhLmNvbGxpc2lvbi5jaGFuZ2VfbWFwX2JvZHkodGhpcy5kYXRhLCB0aGlzLmRlc3RfY29sbGlzaW9uX2xheWVyKTtcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5jaGVja19wb3NpdGlvbigpKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLnVuc2V0X3RyaWdnZXJlZF9ldmVudCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7VGlsZUV2ZW50LCBldmVudF90eXBlc30gZnJvbSBcIi4vVGlsZUV2ZW50XCI7XG5cbmV4cG9ydCBjbGFzcyBTcGVlZEV2ZW50IGV4dGVuZHMgVGlsZUV2ZW50IHtcbiAgICBwdWJsaWMgc3BlZWQ6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEsIHgsIHksIGFjdGl2YXRpb25fZGlyZWN0aW9ucywgYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzLCBkeW5hbWljLCBhY3RpdmUsIHNwZWVkKSB7XG4gICAgICAgIHN1cGVyKFxuICAgICAgICAgICAgZ2FtZSxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICBldmVudF90eXBlcy5TUEVFRCxcbiAgICAgICAgICAgIHgsXG4gICAgICAgICAgICB5LFxuICAgICAgICAgICAgYWN0aXZhdGlvbl9kaXJlY3Rpb25zLFxuICAgICAgICAgICAgYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzLFxuICAgICAgICAgICAgZHluYW1pYyxcbiAgICAgICAgICAgIGFjdGl2ZSxcbiAgICAgICAgICAgIG51bGxcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zcGVlZCA9IHNwZWVkO1xuICAgIH1cblxuICAgIHVuc2V0KCkge1xuICAgICAgICBpZiAodGhpcy5kYXRhLnRpbGVfZXZlbnRfbWFuYWdlci5ldmVudF90cmlnZ2VyZWQodGhpcykgJiYgIXRoaXMuY2hlY2tfcG9zaXRpb24oKSkge1xuICAgICAgICAgICAgdGhpcy5kYXRhLnRpbGVfZXZlbnRfbWFuYWdlci51bnNldF90cmlnZ2VyZWRfZXZlbnQodGhpcyk7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5leHRyYV9zcGVlZCAtPSB0aGlzLnNwZWVkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZmlyZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLmV2ZW50X3RyaWdnZXJlZCh0aGlzKSkge1xuICAgICAgICAgICAgdGhpcy5kYXRhLnRpbGVfZXZlbnRfbWFuYWdlci5zZXRfdHJpZ2dlcmVkX2V2ZW50KHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uZXh0cmFfc3BlZWQgKz0gdGhpcy5zcGVlZDtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7YmFzZV9hY3Rpb25zLCBkaXJlY3Rpb25zLCByZXZlcnNlX2RpcmVjdGlvbnN9IGZyb20gXCIuLi91dGlsc1wiO1xuaW1wb3J0IHtldmVudF90eXBlcywgVGlsZUV2ZW50fSBmcm9tIFwiLi9UaWxlRXZlbnRcIjtcblxuZXhwb3J0IGNsYXNzIFNsaWRlckV2ZW50IGV4dGVuZHMgVGlsZUV2ZW50IHtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBUSU1FX1BFUl9USUxFID0gNjA7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgRFVTVF9DT1VOVCA9IDY7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgRFVTVF9LRVkgPSBcImR1c3RcIjtcblxuICAgIHB1YmxpYyB4X3RhcmdldDogbnVtYmVyO1xuICAgIHB1YmxpYyB5X3RhcmdldDogbnVtYmVyO1xuICAgIHB1YmxpYyBkZXN0X2NvbGxpc2lvbl9sYXllcjogbnVtYmVyO1xuICAgIHB1YmxpYyBzaG93X2R1c3Q6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGdhbWUsXG4gICAgICAgIGRhdGEsXG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIGFjdGl2YXRpb25fZGlyZWN0aW9ucyxcbiAgICAgICAgYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzLFxuICAgICAgICBkeW5hbWljLFxuICAgICAgICBhY3RpdmUsXG4gICAgICAgIHhfdGFyZ2V0LFxuICAgICAgICB5X3RhcmdldCxcbiAgICAgICAgZGVzdF9jb2xsaXNpb25fbGF5ZXIsXG4gICAgICAgIHNob3dfZHVzdFxuICAgICkge1xuICAgICAgICBzdXBlcihcbiAgICAgICAgICAgIGdhbWUsXG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgZXZlbnRfdHlwZXMuU0xJREVSLFxuICAgICAgICAgICAgeCxcbiAgICAgICAgICAgIHksXG4gICAgICAgICAgICBhY3RpdmF0aW9uX2RpcmVjdGlvbnMsXG4gICAgICAgICAgICBhY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMsXG4gICAgICAgICAgICBkeW5hbWljLFxuICAgICAgICAgICAgYWN0aXZlLFxuICAgICAgICAgICAgbnVsbFxuICAgICAgICApO1xuICAgICAgICB0aGlzLnhfdGFyZ2V0ID0geF90YXJnZXQ7XG4gICAgICAgIHRoaXMueV90YXJnZXQgPSB5X3RhcmdldDtcbiAgICAgICAgdGhpcy5kZXN0X2NvbGxpc2lvbl9sYXllciA9IGRlc3RfY29sbGlzaW9uX2xheWVyO1xuICAgICAgICB0aGlzLnNob3dfZHVzdCA9IHNob3dfZHVzdCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IHNob3dfZHVzdDtcbiAgICB9XG5cbiAgICBmaXJlKCkge1xuICAgICAgICBpZiAoIXRoaXMuZGF0YS5oZXJvLnN0b3BfYnlfY29sbGlkaW5nIHx8ICF0aGlzLmNoZWNrX3Bvc2l0aW9uKCkgfHwgIXRoaXMuZGF0YS5oZXJvX21vdmVtZW50X2FsbG93ZWQoZmFsc2UpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kYXRhLnRpbGVfZXZlbnRfbWFuYWdlci5vbl9ldmVudCA9IHRydWU7XG4gICAgICAgIHRoaXMuZGF0YS5oZXJvLnNsaWRpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLmdhbWUucGh5c2ljcy5wMi5wYXVzZSgpO1xuXG4gICAgICAgIGNvbnN0IGluaXRpYWxfeCA9IHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVXaWR0aCAqICh0aGlzLnggKyAwLjUpO1xuICAgICAgICBjb25zdCBpbml0aWFsX3kgPSB0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlSGVpZ2h0ICogKHRoaXMueSArIDAuNik7XG4gICAgICAgIGNvbnN0IGp1bXBfeSA9IHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVIZWlnaHQgKiB0aGlzLnk7XG4gICAgICAgIHRoaXMuZGF0YS5oZXJvLnBsYXkoYmFzZV9hY3Rpb25zLkpVTVAsIHJldmVyc2VfZGlyZWN0aW9uc1tkaXJlY3Rpb25zLmRvd25dLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5hZGQoMjAwLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zaGFkb3cudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uY3VycmVudF9hY3Rpb24gPSBiYXNlX2FjdGlvbnMuSURMRTtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnBsYXkoYmFzZV9hY3Rpb25zLklETEUsIHJldmVyc2VfZGlyZWN0aW9uc1tkaXJlY3Rpb25zLmRvd25dLCBmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLmdhbWUuYWRkXG4gICAgICAgICAgICAgICAgLnR3ZWVuKHRoaXMuZGF0YS5oZXJvLnNwcml0ZS5ib2R5KVxuICAgICAgICAgICAgICAgIC50byh7eDogaW5pdGlhbF94LCB5OiBbanVtcF95LCBpbml0aWFsX3ldfSwgMTUwLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLCB0cnVlKVxuICAgICAgICAgICAgICAgIC5vbkNvbXBsZXRlLmFkZE9uY2UoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zaG93X2R1c3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZHVzdF9hbmltYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaXR0bGVfc3RlcCA9IGluaXRpYWxfeSArIHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVIZWlnaHQgKiAxLjI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5hZGRcbiAgICAgICAgICAgICAgICAgICAgICAgIC50d2Vlbih0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC50byh7eTogbGl0dGxlX3N0ZXB9LCA3MCwgUGhhc2VyLkVhc2luZy5RdWFkcmF0aWMuT3V0LCB0cnVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc2V0X2ZyYW1lKGRpcmVjdGlvbnMuZG93bl9yaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lLnRpbWUuZXZlbnRzLmFkZCg0MCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zZXRfZnJhbWUoZGlyZWN0aW9ucy5kb3duX2xlZnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWUudGltZS5ldmVudHMuYWRkKDQwLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zZXRfZnJhbWUoZGlyZWN0aW9ucy5kb3duKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0X3ggPSB0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlV2lkdGggKiAodGhpcy54X3RhcmdldCArIDAuNSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0X3kgPSB0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlSGVpZ2h0ICogKHRoaXMueV90YXJnZXQgKyAwLjUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNsaWRlX3RpbWUgPSBNYXRoLmFicyh0aGlzLnlfdGFyZ2V0IC0gdGhpcy55KSAqIFNsaWRlckV2ZW50LlRJTUVfUEVSX1RJTEU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lLmFkZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudHdlZW4odGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50byh7eDogdGFyZ2V0X3gsIHk6IHRhcmdldF95fSwgc2xpZGVfdGltZSwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5wbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaGVyby51cGRhdGVfc2hhZG93KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zaGFkb3cudmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kZXN0X2NvbGxpc2lvbl9sYXllciAhPT0gdGhpcy5kYXRhLm1hcC5jb2xsaXNpb25fbGF5ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuY29sbGlzaW9uLmNoYW5nZV9tYXBfYm9keSh0aGlzLmRhdGEsIHRoaXMuZGVzdF9jb2xsaXNpb25fbGF5ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lLnRpbWUuZXZlbnRzLmFkZCg4MCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnNsaWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWUucGh5c2ljcy5wMi5yZXN1bWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLm9uX2V2ZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZHVzdF9hbmltYXRpb24oKSB7XG4gICAgICAgIGNvbnN0IGR1c3Rfc3ByaXRlX2Jhc2UgPSB0aGlzLmRhdGEuaW5mby5taXNjX3Nwcml0ZV9iYXNlX2xpc3RbU2xpZGVyRXZlbnQuRFVTVF9LRVldO1xuICAgICAgICBjb25zdCBpbml0aWFsX3ggPSB0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlV2lkdGggKiAodGhpcy54ICsgMC41KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBTbGlkZXJFdmVudC5EVVNUX0NPVU5UOyArK2kpIHtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5hZGQoNDAgKiBpLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnRfeCA9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnNwcml0ZS5ib2R5LnggLVxuICAgICAgICAgICAgICAgICAgICBNYXRoLnJhbmRvbSgpICogdGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZVdpZHRoICtcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVXaWR0aCA+PiAxKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydF95ID1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkueSAtXG4gICAgICAgICAgICAgICAgICAgIE1hdGgucmFuZG9tKCkgKiB0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlSGVpZ2h0ICtcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVIZWlnaHQgPj4gMSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZHVzdF9zcHJpdGU6IFBoYXNlci5TcHJpdGUgPSB0aGlzLmRhdGEubnBjX2dyb3VwLmNyZWF0ZShzdGFydF94LCBzdGFydF95LCBTbGlkZXJFdmVudC5EVVNUX0tFWSk7XG4gICAgICAgICAgICAgICAgZHVzdF9zcHJpdGUuYmFzZV9jb2xsaXNpb25fbGF5ZXIgPSB0aGlzLmRlc3RfY29sbGlzaW9uX2xheWVyO1xuICAgICAgICAgICAgICAgIGR1c3Rfc3ByaXRlLmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLmFkZC50d2VlbihkdXN0X3Nwcml0ZSkudG8oXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IHN0YXJ0X3ggKyAoc3RhcnRfeCA8IGluaXRpYWxfeCA/IC0xIDogMSkgKiAodGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZUhlaWdodCAvIDMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogc3RhcnRfeSAtICh0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlSGVpZ2h0ID4+IDEpLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICA0MDAsXG4gICAgICAgICAgICAgICAgICAgIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsXG4gICAgICAgICAgICAgICAgICAgIHRydWVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5ucGNfZ3JvdXAuc2V0Q2hpbGRJbmRleChcbiAgICAgICAgICAgICAgICAgICAgZHVzdF9zcHJpdGUsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5ucGNfZ3JvdXAuZ2V0Q2hpbGRJbmRleCh0aGlzLmRhdGEuaGVyby5zcHJpdGUpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBkdXN0X3Nwcml0ZV9iYXNlLnNldEFuaW1hdGlvbihkdXN0X3Nwcml0ZSwgU2xpZGVyRXZlbnQuRFVTVF9LRVkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFuaW1hdGlvbl9rZXkgPSBkdXN0X3Nwcml0ZV9iYXNlLmdldEFuaW1hdGlvbktleShTbGlkZXJFdmVudC5EVVNUX0tFWSwgXCJzcHJlYWRcIik7XG4gICAgICAgICAgICAgICAgZHVzdF9zcHJpdGUuYW5pbWF0aW9ucy5nZXRBbmltYXRpb24oYW5pbWF0aW9uX2tleSkub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZHVzdF9zcHJpdGUuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGR1c3Rfc3ByaXRlLmFuaW1hdGlvbnMucGxheShhbmltYXRpb25fa2V5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHtTcHJpdGVCYXNlfSBmcm9tIFwiLi4vU3ByaXRlQmFzZVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZV9taXNjX2RhdGEoZ2FtZSwgbWlzY19kYiwgbG9hZF9wcm9taXNlX3Jlc29sdmUpIHtcbiAgICBsZXQgbWlzY19zcHJpdGVfYmFzZV9saXN0ID0ge307XG4gICAgbGV0IGxvYWRfcHJvbWlzZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1pc2NfZGIubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3QgbWlzY19kYXRhID0gbWlzY19kYltpXTtcbiAgICAgICAgY29uc3Qgc3ByaXRlX2Jhc2UgPSBuZXcgU3ByaXRlQmFzZShcbiAgICAgICAgICAgIG1pc2NfZGF0YS5rZXlfbmFtZSxcbiAgICAgICAgICAgIG1pc2NfZGF0YS5hY3Rpb25zLm1hcChhY3Rpb24gPT4gYWN0aW9uLmtleV9uYW1lKVxuICAgICAgICApO1xuICAgICAgICBtaXNjX3Nwcml0ZV9iYXNlX2xpc3RbbWlzY19kYXRhLmtleV9uYW1lXSA9IHNwcml0ZV9iYXNlO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG1pc2NfZGF0YS5hY3Rpb25zLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICBjb25zdCBhY3Rpb24gPSBtaXNjX2RhdGEuYWN0aW9uc1tqXTtcbiAgICAgICAgICAgIHNwcml0ZV9iYXNlLnNldEFjdGlvblNwcml0ZXNoZWV0KGFjdGlvbi5rZXlfbmFtZSwgYWN0aW9uLnNwcml0ZXNoZWV0LmltYWdlLCBhY3Rpb24uc3ByaXRlc2hlZXQuanNvbik7XG4gICAgICAgICAgICBzcHJpdGVfYmFzZS5zZXRBY3Rpb25EaXJlY3Rpb25zKGFjdGlvbi5rZXlfbmFtZSwgYWN0aW9uLmFuaW1hdGlvbnMsIGFjdGlvbi5mcmFtZXNfY291bnQpO1xuICAgICAgICAgICAgc3ByaXRlX2Jhc2Uuc2V0QWN0aW9uRnJhbWVSYXRlKGFjdGlvbi5rZXlfbmFtZSwgYWN0aW9uLmZyYW1lX3JhdGUpO1xuICAgICAgICAgICAgc3ByaXRlX2Jhc2Uuc2V0QWN0aW9uTG9vcChhY3Rpb24ua2V5X25hbWUsIGFjdGlvbi5sb29wKTtcbiAgICAgICAgfVxuICAgICAgICBzcHJpdGVfYmFzZS5nZW5lcmF0ZUFsbEZyYW1lcygpO1xuICAgICAgICBsZXQgbG9hZF9zcHJpdGVzaGVldF9wcm9taXNlX3Jlc29sdmU7XG4gICAgICAgIGNvbnN0IGxvYWRfc3ByaXRlc2hlZXRfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgbG9hZF9zcHJpdGVzaGVldF9wcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgICAgICB9KTtcbiAgICAgICAgbG9hZF9wcm9taXNlcy5wdXNoKGxvYWRfc3ByaXRlc2hlZXRfcHJvbWlzZSk7XG4gICAgICAgIHNwcml0ZV9iYXNlLmxvYWRTcHJpdGVzaGVldHMoZ2FtZSwgdHJ1ZSwgbG9hZF9zcHJpdGVzaGVldF9wcm9taXNlX3Jlc29sdmUpO1xuICAgIH1cbiAgICBQcm9taXNlLmFsbChsb2FkX3Byb21pc2VzKS50aGVuKGxvYWRfcHJvbWlzZV9yZXNvbHZlKTtcbiAgICByZXR1cm4gbWlzY19zcHJpdGVfYmFzZV9saXN0O1xufVxuIiwiaW1wb3J0IHtTaG9wfSBmcm9tIFwiLi4vU2hvcFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZV9zaG9wcyhzaG9wc19kYikge1xuICAgIGxldCBzaG9wc19saXN0ID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaG9wc19kYi5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCBzaG9wX2RhdGEgPSBzaG9wc19kYltpXTtcbiAgICAgICAgc2hvcHNfbGlzdFtzaG9wX2RhdGEua2V5X25hbWVdID0gbmV3IFNob3AoXG4gICAgICAgICAgICBzaG9wX2RhdGEua2V5X25hbWUsXG4gICAgICAgICAgICBzaG9wX2RhdGEuZGlhbG9nX2tleSxcbiAgICAgICAgICAgIHNob3BfZGF0YS5hdmF0YXJfa2V5LFxuICAgICAgICAgICAgc2hvcF9kYXRhLml0ZW1fbGlzdFxuICAgICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gc2hvcHNfbGlzdDtcbn1cbiIsImV4cG9ydCB0eXBlIFNob3BJdGVtID0ge1xuICAgIGtleV9uYW1lOiBzdHJpbmc7XG4gICAgcXVhbnRpdHk6IG51bWJlcjtcbn07XG5cbmV4cG9ydCBjbGFzcyBTaG9wIHtcbiAgICBwdWJsaWMga2V5X25hbWU6IHN0cmluZztcbiAgICBwdWJsaWMgZGlhbG9nX2tleTogc3RyaW5nO1xuICAgIHB1YmxpYyBhdmF0YXJfa2V5OiBzdHJpbmc7XG4gICAgcHVibGljIGl0ZW1fbGlzdDogU2hvcEl0ZW1bXTtcbiAgICBjb25zdHJ1Y3RvcihrZXlfbmFtZTogc3RyaW5nLCBkaWFsb2dfa2V5OiBzdHJpbmcsIGF2YXRhcl9rZXk6IHN0cmluZywgaXRlbV9saXN0OiBTaG9wSXRlbVtdKSB7XG4gICAgICAgIHRoaXMua2V5X25hbWUgPSBrZXlfbmFtZTtcbiAgICAgICAgdGhpcy5kaWFsb2dfa2V5ID0gZGlhbG9nX2tleTtcbiAgICAgICAgdGhpcy5hdmF0YXJfa2V5ID0gYXZhdGFyX2tleTtcbiAgICAgICAgdGhpcy5pdGVtX2xpc3QgPSBpdGVtX2xpc3Q7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtTcHJpdGVCYXNlfSBmcm9tIFwiLi4vU3ByaXRlQmFzZVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZV9pbnRlcmFjdGFibGVfb2Jqc19kYXRhKGdhbWUsIGludGVyYWN0YWJsZV9vYmplY3RzX2RiLCBsb2FkX3Byb21pc2VfcmVzb2x2ZSkge1xuICAgIGxldCBpdGVyX29ial9zcHJpdGVfYmFzZV9saXN0ID0ge307XG4gICAgbGV0IGxvYWRfcHJvbWlzZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpbnRlcmFjdGFibGVfb2JqZWN0c19rZXkgaW4gaW50ZXJhY3RhYmxlX29iamVjdHNfZGIpIHtcbiAgICAgICAgY29uc3QgaXRlcl9vYmpfZGF0YSA9IGludGVyYWN0YWJsZV9vYmplY3RzX2RiW2ludGVyYWN0YWJsZV9vYmplY3RzX2tleV07XG4gICAgICAgIGNvbnN0IHNwcml0ZV9iYXNlID0gbmV3IFNwcml0ZUJhc2UoaXRlcl9vYmpfZGF0YS5rZXlfbmFtZSwgW2l0ZXJfb2JqX2RhdGEua2V5X25hbWVdKTtcbiAgICAgICAgaXRlcl9vYmpfc3ByaXRlX2Jhc2VfbGlzdFtpdGVyX29ial9kYXRhLmtleV9uYW1lXSA9IHNwcml0ZV9iYXNlO1xuICAgICAgICBzcHJpdGVfYmFzZS5zZXRBY3Rpb25TcHJpdGVzaGVldChcbiAgICAgICAgICAgIGl0ZXJfb2JqX2RhdGEua2V5X25hbWUsXG4gICAgICAgICAgICBpdGVyX29ial9kYXRhLnNwcml0ZXNoZWV0LmltYWdlLFxuICAgICAgICAgICAgaXRlcl9vYmpfZGF0YS5zcHJpdGVzaGVldC5qc29uXG4gICAgICAgICk7XG4gICAgICAgIHNwcml0ZV9iYXNlLnNldEFjdGlvbkRpcmVjdGlvbnMoXG4gICAgICAgICAgICBpdGVyX29ial9kYXRhLmtleV9uYW1lLFxuICAgICAgICAgICAgaXRlcl9vYmpfZGF0YS5hY3Rpb25zLmFuaW1hdGlvbnMsXG4gICAgICAgICAgICBpdGVyX29ial9kYXRhLmFjdGlvbnMuZnJhbWVzX2NvdW50XG4gICAgICAgICk7XG4gICAgICAgIHNwcml0ZV9iYXNlLnNldEFjdGlvbkZyYW1lUmF0ZShpdGVyX29ial9kYXRhLmtleV9uYW1lLCBpdGVyX29ial9kYXRhLmFjdGlvbnMuZnJhbWVfcmF0ZSk7XG4gICAgICAgIHNwcml0ZV9iYXNlLnNldEFjdGlvbkxvb3AoaXRlcl9vYmpfZGF0YS5rZXlfbmFtZSwgaXRlcl9vYmpfZGF0YS5hY3Rpb25zLmxvb3ApO1xuICAgICAgICBzcHJpdGVfYmFzZS5nZW5lcmF0ZUFsbEZyYW1lcygpO1xuICAgICAgICBsZXQgbG9hZF9zcHJpdGVzaGVldF9wcm9taXNlX3Jlc29sdmU7XG4gICAgICAgIGNvbnN0IGxvYWRfc3ByaXRlc2hlZXRfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgbG9hZF9zcHJpdGVzaGVldF9wcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgICAgICB9KTtcbiAgICAgICAgbG9hZF9wcm9taXNlcy5wdXNoKGxvYWRfc3ByaXRlc2hlZXRfcHJvbWlzZSk7XG4gICAgICAgIHNwcml0ZV9iYXNlLmxvYWRTcHJpdGVzaGVldHMoZ2FtZSwgdHJ1ZSwgbG9hZF9zcHJpdGVzaGVldF9wcm9taXNlX3Jlc29sdmUpO1xuICAgIH1cbiAgICBQcm9taXNlLmFsbChsb2FkX3Byb21pc2VzKS50aGVuKGxvYWRfcHJvbWlzZV9yZXNvbHZlKTtcbiAgICByZXR1cm4gaXRlcl9vYmpfc3ByaXRlX2Jhc2VfbGlzdDtcbn1cbiIsImltcG9ydCB7U3VtbW9ufSBmcm9tIFwiLi4vU3VtbW9uXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplX3N1bW1vbnMoc3VtbW9uc19kYikge1xuICAgIGxldCBzdW1tb25zX2xpc3QgPSB7fTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN1bW1vbnNfZGIubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3Qgc3VtbW9uX2RhdGEgPSBzdW1tb25zX2RiW2ldO1xuICAgICAgICBzdW1tb25zX2xpc3Rbc3VtbW9uX2RhdGEua2V5X25hbWVdID0gbmV3IFN1bW1vbihcbiAgICAgICAgICAgIHN1bW1vbl9kYXRhLmtleV9uYW1lLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIHN1bW1vbl9kYXRhLnJlcXVpcmVtZW50cyxcbiAgICAgICAgICAgIHN1bW1vbl9kYXRhLmF2YWlsYWJsZVxuICAgICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gc3VtbW9uc19saXN0O1xufVxuIiwidHlwZSBSZXF1aXJlbWVudHMgPSB7XG4gICAgdmVudXM6IG51bWJlcjtcbiAgICBtZXJjdXJ5OiBudW1iZXI7XG4gICAgbWFyczogbnVtYmVyO1xuICAgIGp1cGl0ZXI6IG51bWJlcjtcbn07XG5cbmV4cG9ydCBjbGFzcyBTdW1tb24ge1xuICAgIHB1YmxpYyBrZXlfbmFtZTogc3RyaW5nO1xuICAgIHB1YmxpYyBpbmRleDogbnVtYmVyO1xuICAgIHB1YmxpYyByZXF1aXJlbWVudHM6IFJlcXVpcmVtZW50cztcbiAgICBwdWJsaWMgYXZhaWxhYmxlOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3Ioa2V5X25hbWU6IHN0cmluZywgaW5kZXg6IG51bWJlciwgcmVxdWlyZW1lbnRzOiBSZXF1aXJlbWVudHMsIGF2YWlsYWJsZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLmtleV9uYW1lID0ga2V5X25hbWU7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICAgICAgdGhpcy5yZXF1aXJlbWVudHMgPSByZXF1aXJlbWVudHM7XG4gICAgICAgIHRoaXMuYXZhaWxhYmxlID0gYXZhaWxhYmxlO1xuICAgIH1cbn1cbiIsImltcG9ydCB7Y2FwaXRhbGl6ZX0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQge01haW5Qc3luZXJneU1lbnV9IGZyb20gXCIuL01haW5Qc3luZXJneU1lbnVcIjtcbmltcG9ydCB7TWFpbkl0ZW1NZW51fSBmcm9tIFwiLi9NYWluSXRlbU1lbnVcIjtcbmltcG9ydCB7TWFpbkRqaW5uTWVudX0gZnJvbSBcIi4vTWFpbkRqaW5uTWVudVwiO1xuaW1wb3J0IHtNYWluU3RhdHVzTWVudX0gZnJvbSBcIi4vTWFpblN0YXR1c01lbnVcIjtcbmltcG9ydCB7Q2hhcnNTdGF0dXNXaW5kb3d9IGZyb20gXCIuLi93aW5kb3dzL0NoYXJzU3RhdHVzV2luZG93XCI7XG5pbXBvcnQge0dvbGRlblN1bn0gZnJvbSBcIi4uL0dvbGRlblN1blwiO1xuaW1wb3J0IHtIb3Jpem9udGFsTWVudX0gZnJvbSBcIi4uL3N1cHBvcnRfbWVudXMvSG9yaXpvbnRhbE1lbnVcIjtcblxuZXhwb3J0IGNsYXNzIE1haW5NZW51IHtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBUSVRMRV9XSU5ET1dfV0lEVEggPSA3MDtcbiAgICBwcml2YXRlIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHByaXZhdGUgZGF0YTogR29sZGVuU3VuO1xuXG4gICAgcHJpdmF0ZSBidXR0b25zX2tleXM6IHN0cmluZ1tdO1xuICAgIHByaXZhdGUgY3VycmVudF9pbmRleDogbnVtYmVyO1xuXG4gICAgcHJpdmF0ZSBjaGFyc19zdGF0dXNfd2luZG93OiBDaGFyc1N0YXR1c1dpbmRvdztcbiAgICBwcml2YXRlIGhvcml6b250YWxfbWVudTogSG9yaXpvbnRhbE1lbnU7XG4gICAgcHJpdmF0ZSBwc3luZXJneV9tZW51OiBNYWluUHN5bmVyZ3lNZW51O1xuICAgIHByaXZhdGUgaXRlbV9tZW51OiBNYWluSXRlbU1lbnU7XG4gICAgcHJpdmF0ZSBkamlubl9tZW51OiBNYWluRGppbm5NZW51O1xuICAgIHByaXZhdGUgc3RhdHVzX21lbnU6IE1haW5TdGF0dXNNZW51O1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGdhbWU6IFBoYXNlci5HYW1lLCBkYXRhOiBHb2xkZW5TdW4pIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcblxuICAgICAgICB0aGlzLmJ1dHRvbnNfa2V5cyA9IFtcInBzeW5lcmd5XCIsIFwiZGppbm5pXCIsIFwiaXRlbVwiLCBcInN0YXR1c1wiXTtcbiAgICAgICAgdGhpcy5jdXJyZW50X2luZGV4ID0gMDtcblxuICAgICAgICB0aGlzLmNoYXJzX3N0YXR1c193aW5kb3cgPSBuZXcgQ2hhcnNTdGF0dXNXaW5kb3codGhpcy5nYW1lLCB0aGlzLmRhdGEpO1xuICAgICAgICB0aGlzLmhvcml6b250YWxfbWVudSA9IG5ldyBIb3Jpem9udGFsTWVudShcbiAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgIHRoaXMuZGF0YSxcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uc19rZXlzLFxuICAgICAgICAgICAgdGhpcy5idXR0b25zX2tleXMubWFwKGIgPT4gY2FwaXRhbGl6ZShiKSksXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb25fcHJlc3M6IHRoaXMuYnV0dG9uX3ByZXNzLmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgb25fY2FuY2VsOiB0aGlzLmNsb3NlX21lbnUuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBNYWluTWVudS5USVRMRV9XSU5ET1dfV0lEVEhcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5wc3luZXJneV9tZW51ID0gbmV3IE1haW5Qc3luZXJneU1lbnUodGhpcy5nYW1lLCB0aGlzLmRhdGEpO1xuICAgICAgICB0aGlzLml0ZW1fbWVudSA9IG5ldyBNYWluSXRlbU1lbnUodGhpcy5nYW1lLCB0aGlzLmRhdGEpO1xuICAgICAgICB0aGlzLmRqaW5uX21lbnUgPSBuZXcgTWFpbkRqaW5uTWVudSh0aGlzLmdhbWUsIHRoaXMuZGF0YSk7XG4gICAgICAgIHRoaXMuc3RhdHVzX21lbnUgPSBuZXcgTWFpblN0YXR1c01lbnUodGhpcy5nYW1lLCB0aGlzLmRhdGEpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgaXNfYWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ob3Jpem9udGFsX21lbnUubWVudV9hY3RpdmU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBidXR0b25fcHJlc3MoKSB7XG4gICAgICAgIHRoaXMuY3VycmVudF9pbmRleCA9IHRoaXMuaG9yaXpvbnRhbF9tZW51LnNlbGVjdGVkX2J1dHRvbl9pbmRleDtcblxuICAgICAgICBzd2l0Y2ggKHRoaXMuYnV0dG9uc19rZXlzW3RoaXMuaG9yaXpvbnRhbF9tZW51LnNlbGVjdGVkX2J1dHRvbl9pbmRleF0pIHtcbiAgICAgICAgICAgIGNhc2UgXCJwc3luZXJneVwiOlxuICAgICAgICAgICAgICAgIHRoaXMuYnV0dG9uX3ByZXNzX2FjdGlvbih0aGlzLnBzeW5lcmd5X21lbnUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImRqaW5uaVwiOlxuICAgICAgICAgICAgICAgIHRoaXMuYnV0dG9uX3ByZXNzX2FjdGlvbih0aGlzLmRqaW5uX21lbnUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIml0ZW1cIjpcbiAgICAgICAgICAgICAgICB0aGlzLmJ1dHRvbl9wcmVzc19hY3Rpb24odGhpcy5pdGVtX21lbnUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInN0YXR1c1wiOlxuICAgICAgICAgICAgICAgIHRoaXMuYnV0dG9uX3ByZXNzX2FjdGlvbih0aGlzLnN0YXR1c19tZW51KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYnV0dG9uX3ByZXNzX2FjdGlvbihtZW51OiBNYWluUHN5bmVyZ3lNZW51IHwgTWFpbkRqaW5uTWVudSB8IE1haW5JdGVtTWVudSB8IE1haW5TdGF0dXNNZW51KSB7XG4gICAgICAgIHRoaXMuaG9yaXpvbnRhbF9tZW51LmNsb3NlKCgpID0+IHtcbiAgICAgICAgICAgIG1lbnUub3Blbl9tZW51KChjbG9zZV90aGlzX21lbnU6IGJvb2xlYW4pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY2xvc2VfdGhpc19tZW51KSB0aGlzLmNsb3NlX21lbnUoKTtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFyc19zdGF0dXNfd2luZG93LnVwZGF0ZV9jaGFyc19pbmZvKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaG9yaXpvbnRhbF9tZW51Lm9wZW4odW5kZWZpbmVkLCB0aGlzLmN1cnJlbnRfaW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgcHVibGljIHVwZGF0ZV9wb3NpdGlvbigpIHtcbiAgICAgICAgdGhpcy5jaGFyc19zdGF0dXNfd2luZG93LnVwZGF0ZV9wb3NpdGlvbih0cnVlKTtcbiAgICAgICAgdGhpcy5ob3Jpem9udGFsX21lbnUudXBkYXRlX3Bvc2l0aW9uKCk7XG4gICAgfVxuXG4gICAgcHVibGljIG9wZW5fbWVudSgpIHtcbiAgICAgICAgdGhpcy5jaGFyc19zdGF0dXNfd2luZG93LnVwZGF0ZV9jaGFyc19pbmZvKCk7XG4gICAgICAgIHRoaXMuY2hhcnNfc3RhdHVzX3dpbmRvdy51cGRhdGVfcG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy5jaGFyc19zdGF0dXNfd2luZG93LnNob3coKTtcbiAgICAgICAgdGhpcy5ob3Jpem9udGFsX21lbnUub3BlbigpO1xuICAgIH1cblxuICAgIHB1YmxpYyBjbG9zZV9tZW51KCkge1xuICAgICAgICBpZiAoIXRoaXMuaG9yaXpvbnRhbF9tZW51Lm1lbnVfYWN0aXZlKSByZXR1cm47XG4gICAgICAgIHRoaXMuZGF0YS5jb250cm9sX21hbmFnZXIucmVzZXQoKTtcbiAgICAgICAgdGhpcy5kYXRhLmN1cnNvcl9tYW5hZ2VyLmhpZGUoKTtcblxuICAgICAgICBsZXQgcHJvbWlzZXM6IFByb21pc2U8dm9pZD5bXSA9IFtdO1xuXG4gICAgICAgIGxldCBjbG9zZWQ6ICgpID0+IHZvaWQ7XG4gICAgICAgIGxldCBwcm9taXNlID0gbmV3IFByb21pc2U8dm9pZD4ocmVzb2x2ZSA9PiAoY2xvc2VkID0gcmVzb2x2ZSkpO1xuICAgICAgICBwcm9taXNlcy5wdXNoKHByb21pc2UpO1xuXG4gICAgICAgIHRoaXMuaG9yaXpvbnRhbF9tZW51LmNsb3NlKGNsb3NlZCk7XG4gICAgICAgIHRoaXMuY2hhcnNfc3RhdHVzX3dpbmRvdy5jbG9zZShjbG9zZWQpO1xuXG4gICAgICAgIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5tZW51X29wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudF9pbmRleCA9IDA7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVfbWVudShnYW1lOiBQaGFzZXIuR2FtZSwgZGF0YTogR29sZGVuU3VuKSB7XG4gICAgbGV0IHRyaWdnZXJfbWVudSA9ICgpID0+IHtcbiAgICAgICAgaWYgKGRhdGEuaGVyby5pbl9hY3Rpb24oKSB8fCBkYXRhLmluX2JhdHRsZSB8fCAhZGF0YS5jcmVhdGVkIHx8IGRhdGEuZ2FtZV9ldmVudF9tYW5hZ2VyLm9uX2V2ZW50KSByZXR1cm47XG4gICAgICAgIGlmICghZGF0YS5tZW51X29wZW4pIHtcbiAgICAgICAgICAgIGRhdGEubWVudV9vcGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIGRhdGEuaGVyby5zdG9wX2NoYXIoKTtcbiAgICAgICAgICAgIGRhdGEuaGVyby51cGRhdGVfc2hhZG93KCk7XG4gICAgICAgICAgICBkYXRhLm1haW5fbWVudS5vcGVuX21lbnUoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBsZXQgY29udHJvbHMgPSBbXG4gICAgICAgIHtrZXk6IGRhdGEuZ2FtZXBhZC5BLCBvbl9kb3duOiB0cmlnZ2VyX21lbnV9LFxuICAgICAgICB7a2V5OiBkYXRhLmdhbWVwYWQuU0VMRUNULCBvbl9kb3duOiB0cmlnZ2VyX21lbnV9LFxuICAgIF07XG5cbiAgICBkYXRhLmNvbnRyb2xfbWFuYWdlci5zZXRfY29udHJvbChjb250cm9scywge3BlcnNpc3Q6IHRydWV9KTtcblxuICAgIHJldHVybiBuZXcgTWFpbk1lbnUoZ2FtZSwgZGF0YSk7XG59XG4iLCJpbXBvcnQge0Jhc2ljSW5mb1dpbmRvd30gZnJvbSBcIi4uL3dpbmRvd3MvQmFzaWNJbmZvV2luZG93XCI7XG5pbXBvcnQge0l0ZW1Qc3luZXJneUNob29zZVdpbmRvd30gZnJvbSBcIi4uL3dpbmRvd3MvSXRlbVBzeW5lcmd5Q2hvb3NlV2luZG93XCI7XG5pbXBvcnQge1RleHRPYmosIFdpbmRvd30gZnJvbSBcIi4uL1dpbmRvd1wiO1xuaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tIFwiLi4vbWFnaWNfbnVtYmVyc1wiO1xuaW1wb3J0IHtHb2xkZW5TdW59IGZyb20gXCIuLi9Hb2xkZW5TdW5cIjtcbmltcG9ydCB7Q2hhcnNNZW51LCBDaGFyc01lbnVNb2Rlc30gZnJvbSBcIi4uL3N1cHBvcnRfbWVudXMvQ2hhcnNNZW51XCI7XG5pbXBvcnQge0FiaWxpdHl9IGZyb20gXCIuLi9BYmlsaXR5XCI7XG5cbmNvbnN0IEdVSURFX1dJTkRPV19YID0gMTA0O1xuY29uc3QgR1VJREVfV0lORE9XX1kgPSAwO1xuY29uc3QgR1VJREVfV0lORE9XX1dJRFRIID0gMTMyO1xuY29uc3QgR1VJREVfV0lORE9XX0hFSUdIVCA9IDIwO1xuY29uc3QgREVTQ1JJUFRJT05fV0lORE9XX1ggPSAwO1xuY29uc3QgREVTQ1JJUFRJT05fV0lORE9XX1kgPSAxMzY7XG5jb25zdCBERVNDUklQVElPTl9XSU5ET1dfV0lEVEggPSAyMzY7XG5jb25zdCBERVNDUklQVElPTl9XSU5ET1dfSEVJR0hUID0gMjA7XG5jb25zdCBQU1lfT1ZFUlZJRVdfV0lOX1ggPSAxMDQ7XG5jb25zdCBQU1lfT1ZFUlZJRVdfV0lOX1kgPSAyNDtcbmNvbnN0IFBTWV9PVkVSVklFV19XSU5fV0lEVEggPSAxMzI7XG5jb25zdCBQU1lfT1ZFUlZJRVdfV0lOX0hFSUdIVCA9IDc2O1xuY29uc3QgU0hPUlRDVVRTX1dJTkRPV19YID0gMTA0O1xuY29uc3QgU0hPUlRDVVRTX1dJTkRPV19ZID0gMTA0O1xuY29uc3QgU0hPUlRDVVRTX1dJTkRPV19XSURUSCA9IDEzMjtcbmNvbnN0IFNIT1JUQ1VUU19XSU5ET1dfSEVJR0hUID0gMjg7XG5cbmNvbnN0IFRPVEFMX0JPUkRFUiA9IG51bWJlcnMuSU5TSURFX0JPUkRFUl9XSURUSCArIG51bWJlcnMuT1VUU0lERV9CT1JERVJfV0lEVEg7XG5jb25zdCBQU1lfT1ZFUlZJRVdfV0lOX0lOU0lERV9QQURESU5HX0ggPSAxO1xuY29uc3QgUFNZX09WRVJWSUVXX1dJTl9JTlNJREVfUEFERElOR19WID0gNTtcbmNvbnN0IFBTWV9PVkVSVklFV19XSU5fSUNPTlNfUEVSX0xJTkUgPSA4O1xuY29uc3QgUFNZX09WRVJWSUVXX1dJTl9TUEFDRV9CRVRXTl9MSU5FID0gMztcbmNvbnN0IFBTWV9PVkVSVklFV19XSU5fU1BBQ0VfQkVUV05fSUNPID1cbiAgICAoUFNZX09WRVJWSUVXX1dJTl9XSURUSCAtXG4gICAgICAgIDIgKiAobnVtYmVycy5JTlNJREVfQk9SREVSX1dJRFRIICsgUFNZX09WRVJWSUVXX1dJTl9JTlNJREVfUEFERElOR19IKSAtXG4gICAgICAgIFBTWV9PVkVSVklFV19XSU5fSUNPTlNfUEVSX0xJTkUgKiBudW1iZXJzLklDT05fV0lEVEgpIC9cbiAgICAoUFNZX09WRVJWSUVXX1dJTl9JQ09OU19QRVJfTElORSAtIDEpO1xuXG5leHBvcnQgY2xhc3MgTWFpblBzeW5lcmd5TWVudSB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOiBHb2xkZW5TdW47XG5cbiAgICBwdWJsaWMgc2VsZWN0ZWRfY2hhcl9pbmRleDogbnVtYmVyO1xuICAgIHB1YmxpYyBpc19vcGVuOiBib29sZWFuO1xuICAgIHB1YmxpYyBjaG9vc2luZ19wc3luZXJneTogYm9vbGVhbjtcbiAgICBwdWJsaWMgY2xvc2VfY2FsbGJhY2s6IEZ1bmN0aW9uO1xuXG4gICAgcHVibGljIGd1aWRlX3dpbmRvd19tc2dzOiB7Y2hvb3NpbmdfY2hhcjogc3RyaW5nOyBjaG9vc2luZ19wc3luZXJneTogc3RyaW5nfTtcblxuICAgIHB1YmxpYyBwc3luZXJneV9jaG9vc2Vfd2luZG93OiBJdGVtUHN5bmVyZ3lDaG9vc2VXaW5kb3c7XG4gICAgcHVibGljIGNoYXJzX21lbnU6IENoYXJzTWVudTtcbiAgICBwdWJsaWMgYmFzaWNfaW5mb193aW5kb3c6IEJhc2ljSW5mb1dpbmRvdztcblxuICAgIHB1YmxpYyBkZXNjcmlwdGlvbl93aW5kb3c6IFdpbmRvdztcbiAgICBwdWJsaWMgZ3VpZGVfd2luZG93OiBXaW5kb3c7XG4gICAgcHVibGljIHBzeW5lcmd5X292ZXJ2aWV3X3dpbmRvdzogV2luZG93O1xuICAgIHB1YmxpYyBzaG9ydGN1dHNfd2luZG93OiBXaW5kb3c7XG5cbiAgICBwdWJsaWMgZ3VpZGVfd2luZG93X3RleHQ6IFRleHRPYmo7XG4gICAgcHVibGljIGRlc2NyaXB0aW9uX3dpbmRvd190ZXh0OiBUZXh0T2JqO1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZTogUGhhc2VyLkdhbWUsIGRhdGE6IEdvbGRlblN1bikge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCA9IDA7XG4gICAgICAgIHRoaXMuaXNfb3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNob29zaW5nX3BzeW5lcmd5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuZ3VpZGVfd2luZG93X21zZ3MgPSB7XG4gICAgICAgICAgICBjaG9vc2luZ19jaGFyOiBcIldob3NlIFBzeW5lcmd5P1wiLFxuICAgICAgICAgICAgY2hvb3NpbmdfcHN5bmVyZ3k6IFwiV2hpY2ggUHN5bmVyZ3k/XCIsXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5wc3luZXJneV9jaG9vc2Vfd2luZG93ID0gbmV3IEl0ZW1Qc3luZXJneUNob29zZVdpbmRvdyhcbiAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgIHRoaXMuZGF0YSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0aGlzLnBzeW5lcmd5X2NoYW5nZS5iaW5kKHRoaXMpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuY2hhcnNfbWVudSA9IG5ldyBDaGFyc01lbnUodGhpcy5nYW1lLCB0aGlzLmRhdGEsIHRoaXMuY2hhcl9jaGFuZ2UuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuYmFzaWNfaW5mb193aW5kb3cgPSBuZXcgQmFzaWNJbmZvV2luZG93KHRoaXMuZ2FtZSk7XG5cbiAgICAgICAgdGhpcy5ndWlkZV93aW5kb3cgPSBuZXcgV2luZG93KFxuICAgICAgICAgICAgdGhpcy5nYW1lLFxuICAgICAgICAgICAgR1VJREVfV0lORE9XX1gsXG4gICAgICAgICAgICBHVUlERV9XSU5ET1dfWSxcbiAgICAgICAgICAgIEdVSURFX1dJTkRPV19XSURUSCxcbiAgICAgICAgICAgIEdVSURFX1dJTkRPV19IRUlHSFRcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbl93aW5kb3cgPSBuZXcgV2luZG93KFxuICAgICAgICAgICAgdGhpcy5nYW1lLFxuICAgICAgICAgICAgREVTQ1JJUFRJT05fV0lORE9XX1gsXG4gICAgICAgICAgICBERVNDUklQVElPTl9XSU5ET1dfWSxcbiAgICAgICAgICAgIERFU0NSSVBUSU9OX1dJTkRPV19XSURUSCxcbiAgICAgICAgICAgIERFU0NSSVBUSU9OX1dJTkRPV19IRUlHSFRcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5wc3luZXJneV9vdmVydmlld193aW5kb3cgPSBuZXcgV2luZG93KFxuICAgICAgICAgICAgdGhpcy5nYW1lLFxuICAgICAgICAgICAgUFNZX09WRVJWSUVXX1dJTl9YLFxuICAgICAgICAgICAgUFNZX09WRVJWSUVXX1dJTl9ZLFxuICAgICAgICAgICAgUFNZX09WRVJWSUVXX1dJTl9XSURUSCxcbiAgICAgICAgICAgIFBTWV9PVkVSVklFV19XSU5fSEVJR0hUXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc2hvcnRjdXRzX3dpbmRvdyA9IG5ldyBXaW5kb3coXG4gICAgICAgICAgICB0aGlzLmdhbWUsXG4gICAgICAgICAgICBTSE9SVENVVFNfV0lORE9XX1gsXG4gICAgICAgICAgICBTSE9SVENVVFNfV0lORE9XX1ksXG4gICAgICAgICAgICBTSE9SVENVVFNfV0lORE9XX1dJRFRILFxuICAgICAgICAgICAgU0hPUlRDVVRTX1dJTkRPV19IRUlHSFRcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmd1aWRlX3dpbmRvd190ZXh0ID0gdGhpcy5ndWlkZV93aW5kb3cuc2V0X3NpbmdsZV9saW5lX3RleHQoXCJcIik7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb25fd2luZG93X3RleHQgPSB0aGlzLmRlc2NyaXB0aW9uX3dpbmRvdy5zZXRfc2luZ2xlX2xpbmVfdGV4dChcIlwiKTtcbiAgICAgICAgdGhpcy5zaG9ydGN1dHNfd2luZG93LnNldF90ZXh0KFtcIlVzZSBhIGtleWJvYXJkIG51bWJlclwiLCBcInRvIHNldCBhIHNob3JjdXQuXCJdLCB1bmRlZmluZWQsIDcsIDMpO1xuICAgIH1cblxuICAgIGNoYXJfY2hhbmdlKCkge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4ID09PSB0aGlzLmNoYXJzX21lbnUuc2VsZWN0ZWRfaW5kZXgpIHJldHVybjtcblxuICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXggPSB0aGlzLmNoYXJzX21lbnUuc2VsZWN0ZWRfaW5kZXg7XG4gICAgICAgIHRoaXMuYmFzaWNfaW5mb193aW5kb3cuc2V0X2NoYXIodGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuY2hhcnNfbWVudS5zZWxlY3RlZF9pbmRleF0pO1xuICAgICAgICB0aGlzLnNldF9wc3luZXJneV9pY29ucygpO1xuXG4gICAgICAgIGlmICh0aGlzLnBzeW5lcmd5X2Nob29zZV93aW5kb3cud2luZG93X29wZW4pIHtcbiAgICAgICAgICAgIHRoaXMucHN5bmVyZ3lfY2hvb3NlX3dpbmRvdy5jbG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5wc3luZXJneV9jaG9vc2Vfd2luZG93Lm9wZW4odGhpcy5jaGFyc19tZW51LnNlbGVjdGVkX2luZGV4KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNoYXJfY2hvb3NlKCkge1xuICAgICAgICBpZiAodGhpcy5zaG9ydGN1dHNfd2luZG93Lm9wZW4pIHRoaXMuc2hvcnRjdXRzX3dpbmRvdy5jbG9zZSh1bmRlZmluZWQsIGZhbHNlKTtcbiAgICAgICAgaWYgKHRoaXMucHN5bmVyZ3lfb3ZlcnZpZXdfd2luZG93Lm9wZW4pIHRoaXMucHN5bmVyZ3lfb3ZlcnZpZXdfd2luZG93LmNsb3NlKHVuZGVmaW5lZCwgZmFsc2UpO1xuXG4gICAgICAgIGlmICh0aGlzLmNoYXJzX21lbnUuaXNfYWN0aXZlKSB0aGlzLmNoYXJzX21lbnUuZGVhY3RpdmF0ZSgpO1xuICAgICAgICB0aGlzLmNob29zaW5nX3BzeW5lcmd5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zZXRfZ3VpZGVfd2luZG93X3RleHQoKTtcblxuICAgICAgICBpZiAoIXRoaXMucHN5bmVyZ3lfY2hvb3NlX3dpbmRvdy53aW5kb3dfb3Blbikge1xuICAgICAgICAgICAgdGhpcy5wc3luZXJneV9jaG9vc2Vfd2luZG93Lm9wZW4odGhpcy5jaGFyc19tZW51LnNlbGVjdGVkX2luZGV4LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaG9vc2luZ19wc3luZXJneSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhcnNfbWVudS5hY3RpdmF0ZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0X2d1aWRlX3dpbmRvd190ZXh0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRfZGVzY3JpcHRpb25fd2luZG93X3RleHQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wc3luZXJneV9jaG9vc2Vfd2luZG93LmdyYW50X2NvbnRyb2woXG4gICAgICAgICAgICB0aGlzLm9wZW5fY2hhcl9zZWxlY3QuYmluZCh0aGlzKSxcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgcHN5X3dpbiA9IHRoaXMucHN5bmVyZ3lfY2hvb3NlX3dpbmRvdztcbiAgICAgICAgICAgICAgICBsZXQgc2VsZWN0ZWRfcHN5ID0gcHN5X3dpbi5lbGVtZW50X2xpc3RbcHN5X3dpbi5lbGVtZW50c1twc3lfd2luLnNlbGVjdGVkX2VsZW1lbnRfaW5kZXhdIGFzIHN0cmluZ107XG4gICAgICAgICAgICAgICAgdGhpcy5wc3luZXJneV9jaG9vc2Uoc2VsZWN0ZWRfcHN5KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aGlzLmNoYXJzX21lbnUubmV4dF9jaGFyLmJpbmQodGhpcy5jaGFyc19tZW51KSxcbiAgICAgICAgICAgIHRoaXMuY2hhcnNfbWVudS5wcmV2aW91c19jaGFyLmJpbmQodGhpcy5jaGFyc19tZW51KVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHBzeW5lcmd5X2NoYW5nZShhYmlsaXR5OiBBYmlsaXR5KSB7XG4gICAgICAgIHRoaXMuc2V0X2Rlc2NyaXB0aW9uX3dpbmRvd190ZXh0KGFiaWxpdHkuZGVzY3JpcHRpb24pO1xuICAgIH1cblxuICAgIHBzeW5lcmd5X2Nob29zZShhYmlsaXR5OiBBYmlsaXR5KSB7XG4gICAgICAgIGlmIChhYmlsaXR5LmtleV9uYW1lIGluIHRoaXMuZGF0YS5pbmZvLmZpZWxkX2FiaWxpdGllc19saXN0KSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlX21lbnUodHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaW5mby5maWVsZF9hYmlsaXRpZXNfbGlzdFthYmlsaXR5LmtleV9uYW1lXS5jYXN0KFxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLFxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXhdLmtleV9uYW1lXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgdGhpcy5jaGFyX2Nob29zZSgpO1xuICAgIH1cblxuICAgIHNldF9ndWlkZV93aW5kb3dfdGV4dCgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2hvb3NpbmdfcHN5bmVyZ3kpIHtcbiAgICAgICAgICAgIHRoaXMuZ3VpZGVfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuZ3VpZGVfd2luZG93X21zZ3MuY2hvb3NpbmdfcHN5bmVyZ3ksIHRoaXMuZ3VpZGVfd2luZG93X3RleHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5ndWlkZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5ndWlkZV93aW5kb3dfbXNncy5jaG9vc2luZ19jaGFyLCB0aGlzLmd1aWRlX3dpbmRvd190ZXh0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldF9kZXNjcmlwdGlvbl93aW5kb3dfdGV4dChkZXNjcmlwdGlvbj86IHN0cmluZykge1xuICAgICAgICBpZiAodGhpcy5jaG9vc2luZ19wc3luZXJneSkge1xuICAgICAgICAgICAgdGhpcy5kZXNjcmlwdGlvbl93aW5kb3cudXBkYXRlX3RleHQoZGVzY3JpcHRpb24sIHRoaXMuZGVzY3JpcHRpb25fd2luZG93X3RleHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kZXNjcmlwdGlvbl93aW5kb3cudXBkYXRlX3RleHQoXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5jb2lucyArIFwiICAgIENvaW5zXCIsXG4gICAgICAgICAgICAgICAgdGhpcy5kZXNjcmlwdGlvbl93aW5kb3dfdGV4dFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldF9wc3luZXJneV9pY29ucygpIHtcbiAgICAgICAgdGhpcy5wc3luZXJneV9vdmVydmlld193aW5kb3cucmVtb3ZlX2Zyb21fZ3JvdXAoKTtcblxuICAgICAgICBsZXQgY291bnRlciA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleF0uYWJpbGl0aWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBhYmlsaXR5X2tleV9uYW1lID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleF0uYWJpbGl0aWVzW2ldO1xuICAgICAgICAgICAgaWYgKGFiaWxpdHlfa2V5X25hbWUgaW4gdGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3QpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhYmlsaXR5ID0gdGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3RbYWJpbGl0eV9rZXlfbmFtZV07XG4gICAgICAgICAgICAgICAgaWYgKGFiaWxpdHkuaXNfZmllbGRfcHN5bmVyZ3kgfHwgYWJpbGl0eS5lZmZlY3RzX291dHNpZGVfYmF0dGxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHggPVxuICAgICAgICAgICAgICAgICAgICAgICAgVE9UQUxfQk9SREVSICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFBTWV9PVkVSVklFV19XSU5fSU5TSURFX1BBRERJTkdfSCArXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRoLmNlaWwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNvdW50ZXIgJSBQU1lfT1ZFUlZJRVdfV0lOX0lDT05TX1BFUl9MSU5FKSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChQU1lfT1ZFUlZJRVdfV0lOX1NQQUNFX0JFVFdOX0lDTyArIG51bWJlcnMuSUNPTl9XSURUSClcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHkgPVxuICAgICAgICAgICAgICAgICAgICAgICAgVE9UQUxfQk9SREVSICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFBTWV9PVkVSVklFV19XSU5fSU5TSURFX1BBRERJTkdfViArXG4gICAgICAgICAgICAgICAgICAgICAgICAoKGNvdW50ZXIgLyBQU1lfT1ZFUlZJRVdfV0lOX0lDT05TX1BFUl9MSU5FKSB8IDApICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoUFNZX09WRVJWSUVXX1dJTl9TUEFDRV9CRVRXTl9MSU5FICsgbnVtYmVycy5JQ09OX0hFSUdIVCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHN5bmVyZ3lfb3ZlcnZpZXdfd2luZG93LmNyZWF0ZV9hdF9ncm91cCh4LCB5LCBcImFiaWxpdGllc19pY29uc1wiLCB1bmRlZmluZWQsIGFiaWxpdHlfa2V5X25hbWUpO1xuICAgICAgICAgICAgICAgICAgICArK2NvdW50ZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgb3Blbl9jaGFyX3NlbGVjdCgpIHtcbiAgICAgICAgaWYgKHRoaXMucHN5bmVyZ3lfY2hvb3NlX3dpbmRvdy53aW5kb3dfb3BlbikgdGhpcy5wc3luZXJneV9jaG9vc2Vfd2luZG93LmNsb3NlKCk7XG5cbiAgICAgICAgaWYgKCF0aGlzLnBzeW5lcmd5X292ZXJ2aWV3X3dpbmRvdy5vcGVuKSB0aGlzLnBzeW5lcmd5X292ZXJ2aWV3X3dpbmRvdy5zaG93KHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgICAgICBpZiAoIXRoaXMuc2hvcnRjdXRzX3dpbmRvdy5vcGVuKSB0aGlzLnNob3J0Y3V0c193aW5kb3cuc2hvdyh1bmRlZmluZWQsIGZhbHNlKTtcbiAgICAgICAgaWYgKCF0aGlzLmNoYXJzX21lbnUuaXNfb3BlbikgdGhpcy5jaGFyc19tZW51Lm9wZW4odGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4LCBDaGFyc01lbnVNb2Rlcy5NRU5VKTtcblxuICAgICAgICB0aGlzLmNoYXJzX21lbnUuc2VsZWN0X2NoYXIodGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4KTtcbiAgICAgICAgdGhpcy5jaGFyc19tZW51LmdyYW50X2NvbnRyb2wodGhpcy5jbG9zZV9tZW51LmJpbmQodGhpcyksIHRoaXMuY2hhcl9jaG9vc2UuYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgb3Blbl9tZW51KGNsb3NlX2NhbGxiYWNrOiBGdW5jdGlvbikge1xuICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrID0gY2xvc2VfY2FsbGJhY2s7XG4gICAgICAgIHRoaXMuYmFzaWNfaW5mb193aW5kb3cub3Blbih0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4XSk7XG5cbiAgICAgICAgdGhpcy5pc19vcGVuID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLnNldF9wc3luZXJneV9pY29ucygpO1xuICAgICAgICB0aGlzLnNldF9ndWlkZV93aW5kb3dfdGV4dCgpO1xuICAgICAgICB0aGlzLnNldF9kZXNjcmlwdGlvbl93aW5kb3dfdGV4dCgpO1xuXG4gICAgICAgIHRoaXMuZ3VpZGVfd2luZG93LnNob3codW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb25fd2luZG93LnNob3codW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgIHRoaXMucHN5bmVyZ3lfb3ZlcnZpZXdfd2luZG93LnNob3codW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuc2hvcnRjdXRzX3dpbmRvdy5zaG93KHVuZGVmaW5lZCwgZmFsc2UpO1xuXG4gICAgICAgIHRoaXMub3Blbl9jaGFyX3NlbGVjdCgpO1xuICAgIH1cblxuICAgIGNsb3NlX21lbnUoY2xvc2VfbWVudV9iZWxvdzogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuZGF0YS5jdXJzb3JfbWFuYWdlci5oaWRlKCk7XG4gICAgICAgIHRoaXMuZGF0YS5jb250cm9sX21hbmFnZXIucmVzZXQoKTtcblxuICAgICAgICB0aGlzLmNoYXJzX21lbnUuY2xvc2UoKTtcbiAgICAgICAgdGhpcy5iYXNpY19pbmZvX3dpbmRvdy5jbG9zZSgpO1xuXG4gICAgICAgIHRoaXMuaXNfb3BlbiA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuZ3VpZGVfd2luZG93LmNsb3NlKHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uX3dpbmRvdy5jbG9zZSh1bmRlZmluZWQsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5wc3luZXJneV9vdmVydmlld193aW5kb3cuY2xvc2UodW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuc2hvcnRjdXRzX3dpbmRvdy5jbG9zZSh1bmRlZmluZWQsIGZhbHNlKTtcbiAgICAgICAgaWYgKHRoaXMucHN5bmVyZ3lfY2hvb3NlX3dpbmRvdy53aW5kb3dfb3BlbikgdGhpcy5wc3luZXJneV9jaG9vc2Vfd2luZG93LmNsb3NlKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuY2xvc2VfY2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2soY2xvc2VfbWVudV9iZWxvdyk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQge0Jhc2ljSW5mb1dpbmRvd30gZnJvbSBcIi4uL3dpbmRvd3MvQmFzaWNJbmZvV2luZG93XCI7XG5pbXBvcnQge0l0ZW1Qc3luZXJneUNob29zZVdpbmRvd30gZnJvbSBcIi4uL3dpbmRvd3MvSXRlbVBzeW5lcmd5Q2hvb3NlV2luZG93XCI7XG5pbXBvcnQge1RleHRPYmosIFdpbmRvd30gZnJvbSBcIi4uL1dpbmRvd1wiO1xuaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tIFwiLi4vbWFnaWNfbnVtYmVyc1wiO1xuaW1wb3J0IHtJdGVtT3B0aW9uc1dpbmRvd30gZnJvbSBcIi4uL3dpbmRvd3MvaXRlbS9JdGVtT3B0aW9uc1dpbmRvd1wiO1xuaW1wb3J0IHtTdGF0c0NoZWNrV2l0aEl0ZW1XaW5kb3d9IGZyb20gXCIuLi93aW5kb3dzL2l0ZW0vU3RhdHNDaGVja1dpdGhJdGVtV2luZG93XCI7XG5pbXBvcnQge0l0ZW0sIGl0ZW1fdHlwZXN9IGZyb20gXCIuLi9JdGVtXCI7XG5pbXBvcnQge0dvbGRlblN1bn0gZnJvbSBcIi4uL0dvbGRlblN1blwiO1xuaW1wb3J0IHtDaGFyc01lbnUsIENoYXJzTWVudU1vZGVzfSBmcm9tIFwiLi4vc3VwcG9ydF9tZW51cy9DaGFyc01lbnVcIjtcbmltcG9ydCB7SXRlbVNsb3R9IGZyb20gXCIuLi9NYWluQ2hhclwiO1xuaW1wb3J0IHtJdGVtUXVhbnRpdHlNYW5hZ2VyV2luZG93fSBmcm9tIFwiLi4vd2luZG93cy9pdGVtL0l0ZW1RdWFudGl0eU1hbmFnZXJXaW5kb3dcIjtcblxuY29uc3QgR1VJREVfV0lORE9XX1ggPSAxMDQ7XG5jb25zdCBHVUlERV9XSU5ET1dfWSA9IDA7XG5jb25zdCBHVUlERV9XSU5ET1dfV0lEVEggPSAxMzI7XG5jb25zdCBHVUlERV9XSU5ET1dfSEVJR0hUID0gMjA7XG5cbmNvbnN0IERFU0NSSVBUSU9OX1dJTkRPV19YID0gMDtcbmNvbnN0IERFU0NSSVBUSU9OX1dJTkRPV19ZID0gMTM2O1xuY29uc3QgREVTQ1JJUFRJT05fV0lORE9XX1dJRFRIID0gMjM2O1xuY29uc3QgREVTQ1JJUFRJT05fV0lORE9XX0hFSUdIVCA9IDIwO1xuXG5jb25zdCBJVEVNX09WRVJWSUVXX1dJTl9YID0gMTA0O1xuY29uc3QgSVRFTV9PVkVSVklFV19XSU5fWSA9IDI0O1xuY29uc3QgSVRFTV9PVkVSVklFV19XSU5fV0lEVEggPSAxMzI7XG5jb25zdCBJVEVNX09WRVJWSUVXX1dJTl9IRUlHSFQgPSA3NjtcblxuY29uc3QgQVJSQU5HRV9XSU5ET1dfWCA9IDEwNDtcbmNvbnN0IEFSUkFOR0VfV0lORE9XX1kgPSAxMDQ7XG5jb25zdCBBUlJBTkdFX1dJTkRPV19XSURUSCA9IDEzMjtcbmNvbnN0IEFSUkFOR0VfV0lORE9XX0hFSUdIVCA9IDI4O1xuXG5jb25zdCBUT1RBTF9CT1JERVIgPSBudW1iZXJzLklOU0lERV9CT1JERVJfV0lEVEggKyBudW1iZXJzLk9VVFNJREVfQk9SREVSX1dJRFRIO1xuY29uc3QgSVRFTV9PVkVSVklFV19XSU5fSU5TSURFX1BBRERJTkdfSCA9IDExO1xuY29uc3QgSVRFTV9PVkVSVklFV19XSU5fSU5TSURFX1BBRERJTkdfViA9IDEyO1xuY29uc3QgSVRFTV9PVkVSVklFV19XSU5fSUNPTlNfUEVSX0xJTkUgPSA1O1xuY29uc3QgSVRFTV9PVkVSVklFV19XSU5fU1BBQ0VfQkVUV05fTElORSA9IDM7XG5jb25zdCBJVEVNX09WRVJWSUVXX1dJTl9TUEFDRV9CRVRXTl9JQ08gPVxuICAgIChJVEVNX09WRVJWSUVXX1dJTl9XSURUSCAtXG4gICAgICAgIDIgKiAobnVtYmVycy5JTlNJREVfQk9SREVSX1dJRFRIICsgSVRFTV9PVkVSVklFV19XSU5fSU5TSURFX1BBRERJTkdfSCkgLVxuICAgICAgICBJVEVNX09WRVJWSUVXX1dJTl9JQ09OU19QRVJfTElORSAqIG51bWJlcnMuSUNPTl9XSURUSCkgL1xuICAgIChJVEVNX09WRVJWSUVXX1dJTl9JQ09OU19QRVJfTElORSAtIDEpO1xuXG5jb25zdCBTVUJfSUNPTl9YID0gNztcbmNvbnN0IFNVQl9JQ09OX1kgPSA4O1xuY29uc3QgSVRFTV9PVkVSVklFV19ZX1NISUZUID0gMTY7XG5jb25zdCBJVEVNX09WRVJWSUVXX0hFSUdIVF9TSElGVCA9IDE2O1xuXG5leHBvcnQgY2xhc3MgTWFpbkl0ZW1NZW51IHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6IEdvbGRlblN1bjtcblxuICAgIHB1YmxpYyBjaGFyc19tZW51OiBDaGFyc01lbnU7XG4gICAgcHVibGljIGJhc2ljX2luZm9fd2luZG93OiBCYXNpY0luZm9XaW5kb3c7XG4gICAgcHVibGljIGl0ZW1fY2hhbmdlX3N0YXRzX3dpbmRvdzogU3RhdHNDaGVja1dpdGhJdGVtV2luZG93O1xuXG4gICAgcHVibGljIHNlbGVjdGVkX2NoYXJfaW5kZXg6IG51bWJlcjtcbiAgICBwdWJsaWMgc2VsZWN0ZWRfaXRlbV9wb3M6IHtwYWdlOiBudW1iZXI7IGluZGV4OiBudW1iZXJ9O1xuICAgIHB1YmxpYyBpc19vcGVuOiBib29sZWFuO1xuICAgIHB1YmxpYyBjaG9vc2luZ19naXZlX2Rlc3RpbmF0aW9uOiBib29sZWFuO1xuICAgIHB1YmxpYyBvdmVydmlld19zaGlmdGVkOiBib29sZWFuO1xuICAgIHB1YmxpYyBjbG9zZV9jYWxsYmFjazogRnVuY3Rpb247XG5cbiAgICBwdWJsaWMgZ3VpZGVfd2luZG93OiBXaW5kb3c7XG4gICAgcHVibGljIGd1aWRlX3dpbmRvd190ZXh0OiBUZXh0T2JqO1xuICAgIHB1YmxpYyBjaG9vc2luZ19pdGVtOiBib29sZWFuO1xuICAgIHB1YmxpYyBndWlkZV93aW5kb3dfbXNnczoge1xuICAgICAgICBjaG9vc2luZ19jaGFyOiBzdHJpbmc7XG4gICAgICAgIGNob29zaW5nX2l0ZW06IHN0cmluZztcbiAgICB9O1xuICAgIHB1YmxpYyBkZXNjcmlwdGlvbl93aW5kb3c6IFdpbmRvdztcbiAgICBwdWJsaWMgZGVzY3JpcHRpb25fd2luZG93X3RleHQ6IFRleHRPYmo7XG4gICAgcHVibGljIGFycmFuZ2Vfd2luZG93OiBXaW5kb3c7XG4gICAgcHVibGljIGFycmFuZ2Vfd2luZG93X3RleHQ6IFRleHRPYmo7XG4gICAgcHVibGljIGl0ZW1fb3ZlcnZpZXdfd2luZG93OiBXaW5kb3c7XG4gICAgcHVibGljIGl0ZW1fY2hvb3NlX3dpbmRvdzogSXRlbVBzeW5lcmd5Q2hvb3NlV2luZG93O1xuICAgIHB1YmxpYyBpdGVtX29wdGlvbnNfd2luZG93OiBJdGVtT3B0aW9uc1dpbmRvdztcbiAgICBwdWJsaWMgaXRlbV9xdWFudF93aW46IEl0ZW1RdWFudGl0eU1hbmFnZXJXaW5kb3c7XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lOiBQaGFzZXIuR2FtZSwgZGF0YTogR29sZGVuU3VuKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG5cbiAgICAgICAgdGhpcy5jaGFyc19tZW51ID0gbmV3IENoYXJzTWVudSh0aGlzLmdhbWUsIHRoaXMuZGF0YSwgdGhpcy5jaGFyX2NoYW5nZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5iYXNpY19pbmZvX3dpbmRvdyA9IG5ldyBCYXNpY0luZm9XaW5kb3codGhpcy5nYW1lKTtcbiAgICAgICAgdGhpcy5pdGVtX2NoYW5nZV9zdGF0c193aW5kb3cgPSBuZXcgU3RhdHNDaGVja1dpdGhJdGVtV2luZG93KHRoaXMuZ2FtZSwgdGhpcy5kYXRhKTtcblxuICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXggPSAwO1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2l0ZW1fcG9zID0ge3BhZ2U6IDAsIGluZGV4OiAwfTtcbiAgICAgICAgdGhpcy5pc19vcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY2hvb3NpbmdfZ2l2ZV9kZXN0aW5hdGlvbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLm92ZXJ2aWV3X3NoaWZ0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5ndWlkZV93aW5kb3cgPSBuZXcgV2luZG93KFxuICAgICAgICAgICAgdGhpcy5nYW1lLFxuICAgICAgICAgICAgR1VJREVfV0lORE9XX1gsXG4gICAgICAgICAgICBHVUlERV9XSU5ET1dfWSxcbiAgICAgICAgICAgIEdVSURFX1dJTkRPV19XSURUSCxcbiAgICAgICAgICAgIEdVSURFX1dJTkRPV19IRUlHSFRcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5ndWlkZV93aW5kb3dfdGV4dCA9IHRoaXMuZ3VpZGVfd2luZG93LnNldF9zaW5nbGVfbGluZV90ZXh0KFwiXCIpO1xuICAgICAgICB0aGlzLmNob29zaW5nX2l0ZW0gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5ndWlkZV93aW5kb3dfbXNncyA9IHtcbiAgICAgICAgICAgIGNob29zaW5nX2NoYXI6IFwiV2hvc2UgaXRlbT9cIixcbiAgICAgICAgICAgIGNob29zaW5nX2l0ZW06IFwiV2hpY2ggaXRlbT9cIixcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbl93aW5kb3cgPSBuZXcgV2luZG93KFxuICAgICAgICAgICAgdGhpcy5nYW1lLFxuICAgICAgICAgICAgREVTQ1JJUFRJT05fV0lORE9XX1gsXG4gICAgICAgICAgICBERVNDUklQVElPTl9XSU5ET1dfWSxcbiAgICAgICAgICAgIERFU0NSSVBUSU9OX1dJTkRPV19XSURUSCxcbiAgICAgICAgICAgIERFU0NSSVBUSU9OX1dJTkRPV19IRUlHSFRcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbl93aW5kb3dfdGV4dCA9IHRoaXMuZGVzY3JpcHRpb25fd2luZG93LnNldF9zaW5nbGVfbGluZV90ZXh0KFwiXCIpO1xuICAgICAgICB0aGlzLmFycmFuZ2Vfd2luZG93ID0gbmV3IFdpbmRvdyhcbiAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgIEFSUkFOR0VfV0lORE9XX1gsXG4gICAgICAgICAgICBBUlJBTkdFX1dJTkRPV19ZLFxuICAgICAgICAgICAgQVJSQU5HRV9XSU5ET1dfV0lEVEgsXG4gICAgICAgICAgICBBUlJBTkdFX1dJTkRPV19IRUlHSFRcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5hcnJhbmdlX3dpbmRvd190ZXh0ID0gdGhpcy5hcnJhbmdlX3dpbmRvdy5zZXRfdGV4dChbXCJBcnJhbmdlIGluZm8gaGVyZS4uLlwiXSwgdW5kZWZpbmVkLCA3LCAzKTtcbiAgICAgICAgdGhpcy5pdGVtX292ZXJ2aWV3X3dpbmRvdyA9IG5ldyBXaW5kb3coXG4gICAgICAgICAgICB0aGlzLmdhbWUsXG4gICAgICAgICAgICBJVEVNX09WRVJWSUVXX1dJTl9YLFxuICAgICAgICAgICAgSVRFTV9PVkVSVklFV19XSU5fWSxcbiAgICAgICAgICAgIElURU1fT1ZFUlZJRVdfV0lOX1dJRFRILFxuICAgICAgICAgICAgSVRFTV9PVkVSVklFV19XSU5fSEVJR0hUXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuaXRlbV9jaG9vc2Vfd2luZG93ID0gbmV3IEl0ZW1Qc3luZXJneUNob29zZVdpbmRvdyhcbiAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgIHRoaXMuZGF0YSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdGhpcy5pdGVtX2NoYW5nZS5iaW5kKHRoaXMpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuaXRlbV9vcHRpb25zX3dpbmRvdyA9IG5ldyBJdGVtT3B0aW9uc1dpbmRvdyh0aGlzLmdhbWUsIHRoaXMuZGF0YSk7XG4gICAgICAgIHRoaXMuaXRlbV9xdWFudF93aW4gPSBuZXcgSXRlbVF1YW50aXR5TWFuYWdlcldpbmRvdyh0aGlzLmdhbWUsIHRoaXMuZGF0YSk7XG4gICAgfVxuXG4gICAgc2hpZnRfaXRlbV9vdmVydmlldyhkb3duOiBib29sZWFuLCBoaWRlX3N1Yl9tZW51czogYm9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgaWYgKHRoaXMub3ZlcnZpZXdfc2hpZnRlZCA9PT0gZG93bikgcmV0dXJuO1xuXG4gICAgICAgIGlmIChoaWRlX3N1Yl9tZW51cykge1xuICAgICAgICAgICAgaWYgKGRvd24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1fY2hvb3NlX3dpbmRvdy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtX29wdGlvbnNfd2luZG93LmhpZGUoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtX2Nob29zZV93aW5kb3cuc2hvdygpO1xuICAgICAgICAgICAgICAgIHRoaXMuaXRlbV9vcHRpb25zX3dpbmRvdy5zaG93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLml0ZW1fb3ZlcnZpZXdfd2luZG93LnVwZGF0ZV9wb3NpdGlvbih7eTogSVRFTV9PVkVSVklFV19XSU5fWSArIChkb3duID8gSVRFTV9PVkVSVklFV19ZX1NISUZUIDogMCl9KTtcbiAgICAgICAgdGhpcy5pdGVtX292ZXJ2aWV3X3dpbmRvdy51cGRhdGVfc2l6ZSh7XG4gICAgICAgICAgICBoZWlnaHQ6IElURU1fT1ZFUlZJRVdfV0lOX0hFSUdIVCArIChkb3duID8gSVRFTV9PVkVSVklFV19IRUlHSFRfU0hJRlQgOiAwKSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMub3ZlcnZpZXdfc2hpZnRlZCA9IGRvd247XG4gICAgfVxuXG4gICAgY2hhcl9jaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCA9IHRoaXMuY2hhcnNfbWVudS5zZWxlY3RlZF9pbmRleDtcbiAgICAgICAgdGhpcy5iYXNpY19pbmZvX3dpbmRvdy5zZXRfY2hhcih0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4XSk7XG4gICAgICAgIHRoaXMuc2V0X2l0ZW1faWNvbnMoKTtcblxuICAgICAgICBpZiAodGhpcy5jaG9vc2luZ19naXZlX2Rlc3RpbmF0aW9uKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pdGVtX29wdGlvbnNfd2luZG93Lml0ZW0udHlwZSA9PT0gaXRlbV90eXBlcy5BQklMSVRZX0dSQU5UT1IpIHtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pdGVtX29wdGlvbnNfd2luZG93Lml0ZW0udHlwZSAhPT0gaXRlbV90eXBlcy5HRU5FUkFMX0lURU0pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2aWV3X29iaiA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuaXRlbV9vcHRpb25zX3dpbmRvdy5pdGVtX29iaiwge2VxdWlwcGVkOiBmYWxzZX0pO1xuICAgICAgICAgICAgICAgIHRoaXMuaXRlbV9jaGFuZ2Vfc3RhdHNfd2luZG93Lm9wZW4oXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXhdLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1fb3B0aW9uc193aW5kb3cuaXRlbSxcbiAgICAgICAgICAgICAgICAgICAgcHJldmlld19vYmpcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuaXRlbV9jaGFuZ2Vfc3RhdHNfd2luZG93LmNvbXBhcmVfaXRlbXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLml0ZW1fY2hvb3NlX3dpbmRvdy53aW5kb3dfb3BlbiAmJiAhdGhpcy5pdGVtX29wdGlvbnNfd2luZG93LndpbmRvd19vcGVuKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtX2Nob29zZV93aW5kb3cuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1fY2hvb3NlX3dpbmRvdy5vcGVuKHRoaXMuY2hhcnNfbWVudS5zZWxlY3RlZF9pbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjaGFyX2Nob29zZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2hvb3NpbmdfZ2l2ZV9kZXN0aW5hdGlvbikge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXhdLmtleV9uYW1lID09PVxuICAgICAgICAgICAgICAgIHRoaXMuaXRlbV9vcHRpb25zX3dpbmRvdy5jaGFyLmtleV9uYW1lXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5jaGFyc19tZW51LmRlYWN0aXZhdGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2hhcnNfbWVudS5kZWFjdGl2YXRlKCk7XG4gICAgICAgICAgICB0aGlzLmNob29zaW5nX2l0ZW0gPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5zZXRfZ3VpZGVfd2luZG93X3RleHQoKTtcbiAgICAgICAgICAgIHRoaXMuaXRlbV9jaG9vc2Vfd2luZG93Lm9wZW4oXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4LFxuICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbl9pdGVtX2Nob29zZV9jbG9zZSgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfaXRlbV9wb3NcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLml0ZW1fY2hvb3NlX3dpbmRvdy5ncmFudF9jb250cm9sKFxuICAgICAgICAgICAgdGhpcy5vcGVuX2NoYXJfc2VsZWN0LmJpbmQodGhpcyksXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbV93aW4gPSB0aGlzLml0ZW1fY2hvb3NlX3dpbmRvdztcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2l0ZW1fcG9zID0ge3BhZ2U6IGl0ZW1fd2luLnBhZ2VfaW5kZXgsIGluZGV4OiBpdGVtX3dpbi5zZWxlY3RlZF9lbGVtZW50X2luZGV4fTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkX2l0ZW0gPVxuICAgICAgICAgICAgICAgICAgICBpdGVtX3dpbi5lbGVtZW50X2xpc3RbKGl0ZW1fd2luLmVsZW1lbnRzW2l0ZW1fd2luLnNlbGVjdGVkX2VsZW1lbnRfaW5kZXhdIGFzIEl0ZW1TbG90KS5rZXlfbmFtZV07XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRfaXRlbV9vYmogPSBpdGVtX3dpbi5pdGVtX29ianNbaXRlbV93aW4uc2VsZWN0ZWRfZWxlbWVudF9pbmRleF07XG5cbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1fY2hvb3NlKHNlbGVjdGVkX2l0ZW0sIHNlbGVjdGVkX2l0ZW1fb2JqKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aGlzLmNoYXJzX21lbnUubmV4dF9jaGFyLmJpbmQodGhpcy5jaGFyc19tZW51KSxcbiAgICAgICAgICAgIHRoaXMuY2hhcnNfbWVudS5wcmV2aW91c19jaGFyLmJpbmQodGhpcy5jaGFyc19tZW51KVxuICAgICAgICApO1xuICAgIH1cblxuICAgIG9uX2l0ZW1fY2hvb3NlX2Nsb3NlKCkge1xuICAgICAgICB0aGlzLmNob29zaW5nX2l0ZW0gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jaGFyc19tZW51LmFjdGl2YXRlKCk7XG4gICAgICAgIHRoaXMuc2V0X2d1aWRlX3dpbmRvd190ZXh0KCk7XG4gICAgICAgIHRoaXMuc2V0X2Rlc2NyaXB0aW9uX3dpbmRvd190ZXh0KCk7XG4gICAgICAgIHRoaXMuc2V0X2l0ZW1faWNvbnMoKTtcbiAgICAgICAgaWYgKHRoaXMuaXRlbV9jaGFuZ2Vfc3RhdHNfd2luZG93LndpbmRvd19vcGVuKSB7XG4gICAgICAgICAgICB0aGlzLml0ZW1fY2hhbmdlX3N0YXRzX3dpbmRvdy5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXRlbV9jaGFuZ2UoaXRlbTogSXRlbSwgaXRlbV9vYmo6IEl0ZW1TbG90KSB7XG4gICAgICAgIHRoaXMuc2V0X2Rlc2NyaXB0aW9uX3dpbmRvd190ZXh0KGl0ZW0uZGVzY3JpcHRpb24pO1xuICAgICAgICBpZiAodGhpcy5pdGVtX2NoYW5nZV9zdGF0c193aW5kb3cud2luZG93X29wZW4pIHtcbiAgICAgICAgICAgIHRoaXMuaXRlbV9jaGFuZ2Vfc3RhdHNfd2luZG93LmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gaXRlbV90eXBlcy5BQklMSVRZX0dSQU5UT1IpIHtcbiAgICAgICAgfSBlbHNlIGlmIChpdGVtLnR5cGUgIT09IGl0ZW1fdHlwZXMuR0VORVJBTF9JVEVNKSB7XG4gICAgICAgICAgICB0aGlzLml0ZW1fY2hhbmdlX3N0YXRzX3dpbmRvdy5vcGVuKFxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXhdLFxuICAgICAgICAgICAgICAgIGl0ZW0sXG4gICAgICAgICAgICAgICAgaXRlbV9vYmpcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpdGVtX2Nob29zZShpdGVtOiBJdGVtLCBpdGVtX29iajogSXRlbVNsb3QpIHtcbiAgICAgICAgdGhpcy5kYXRhLmNvbnRyb2xfbWFuYWdlci5yZXNldCgpO1xuXG4gICAgICAgIHRoaXMuaXRlbV9vcHRpb25zX3dpbmRvdy5vcGVuKFxuICAgICAgICAgICAgaXRlbV9vYmosXG4gICAgICAgICAgICBpdGVtLFxuICAgICAgICAgICAgdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleF0sXG4gICAgICAgICAgICB0aGlzLml0ZW1fY2hhbmdlX3N0YXRzX3dpbmRvdyxcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAoaXRlbV9naXZlbj86IGJvb2xlYW4sIGNoYXJfaW5kZXg/OiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNoaWZ0X2l0ZW1fb3ZlcnZpZXcoZmFsc2UpO1xuICAgICAgICAgICAgICAgIGlmIChpdGVtX2dpdmVuKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCA9IGNoYXJfaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3Blbl9jaGFyX3NlbGVjdCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLmNoYXJfY2hvb3NlKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09IGl0ZW1fdHlwZXMuQUJJTElUWV9HUkFOVE9SKSB7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtLnR5cGUgIT09IGl0ZW1fdHlwZXMuR0VORVJBTF9JVEVNKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbV9jaGFuZ2Vfc3RhdHNfd2luZG93LnVwZGF0ZV9pbmZvKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pdGVtX2NoYW5nZV9zdGF0c193aW5kb3cuaGlkZV9hcnJvd3MoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5pdGVtX2Nob29zZV93aW5kb3cuZGVhY3RpdmF0ZSgpO1xuICAgIH1cblxuICAgIHNldF9ndWlkZV93aW5kb3dfdGV4dCgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2hvb3NpbmdfaXRlbSkge1xuICAgICAgICAgICAgdGhpcy5ndWlkZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5ndWlkZV93aW5kb3dfbXNncy5jaG9vc2luZ19pdGVtLCB0aGlzLmd1aWRlX3dpbmRvd190ZXh0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZ3VpZGVfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuZ3VpZGVfd2luZG93X21zZ3MuY2hvb3NpbmdfY2hhciwgdGhpcy5ndWlkZV93aW5kb3dfdGV4dCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRfZGVzY3JpcHRpb25fd2luZG93X3RleHQoZGVzY3JpcHRpb24/OiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMuY2hvb3NpbmdfaXRlbSkge1xuICAgICAgICAgICAgdGhpcy5kZXNjcmlwdGlvbl93aW5kb3cudXBkYXRlX3RleHQoZGVzY3JpcHRpb24sIHRoaXMuZGVzY3JpcHRpb25fd2luZG93X3RleHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kZXNjcmlwdGlvbl93aW5kb3cudXBkYXRlX3RleHQoXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5jb2lucyArIFwiICAgIENvaW5zXCIsXG4gICAgICAgICAgICAgICAgdGhpcy5kZXNjcmlwdGlvbl93aW5kb3dfdGV4dFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldF9pdGVtX2ljb25zKCkge1xuICAgICAgICB0aGlzLml0ZW1fb3ZlcnZpZXdfd2luZG93LnJlbW92ZV9mcm9tX2dyb3VwKCk7XG4gICAgICAgIGxldCBjb3VudGVyID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4XS5pdGVtcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgaXRlbV9vYmogPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4XS5pdGVtc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1fa2V5X25hbWUgPSBpdGVtX29iai5rZXlfbmFtZTtcbiAgICAgICAgICAgIGlmIChpdGVtX2tleV9uYW1lIGluIHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3QpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB4ID1cbiAgICAgICAgICAgICAgICAgICAgVE9UQUxfQk9SREVSICtcbiAgICAgICAgICAgICAgICAgICAgSVRFTV9PVkVSVklFV19XSU5fSU5TSURFX1BBRERJTkdfSCArXG4gICAgICAgICAgICAgICAgICAgIE1hdGguY2VpbChcbiAgICAgICAgICAgICAgICAgICAgICAgIChjb3VudGVyICUgSVRFTV9PVkVSVklFV19XSU5fSUNPTlNfUEVSX0xJTkUpICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoSVRFTV9PVkVSVklFV19XSU5fU1BBQ0VfQkVUV05fSUNPICsgbnVtYmVycy5JQ09OX1dJRFRIKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGNvbnN0IHkgPVxuICAgICAgICAgICAgICAgICAgICBUT1RBTF9CT1JERVIgK1xuICAgICAgICAgICAgICAgICAgICBJVEVNX09WRVJWSUVXX1dJTl9JTlNJREVfUEFERElOR19WICtcbiAgICAgICAgICAgICAgICAgICAgKChjb3VudGVyIC8gSVRFTV9PVkVSVklFV19XSU5fSUNPTlNfUEVSX0xJTkUpIHwgMCkgKlxuICAgICAgICAgICAgICAgICAgICAgICAgKElURU1fT1ZFUlZJRVdfV0lOX1NQQUNFX0JFVFdOX0xJTkUgKyBudW1iZXJzLklDT05fSEVJR0hUKTtcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1fb3ZlcnZpZXdfd2luZG93LmNyZWF0ZV9hdF9ncm91cCh4LCB5LCBcIml0ZW1zX2ljb25zXCIsIHVuZGVmaW5lZCwgaXRlbV9rZXlfbmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1fb2JqLmVxdWlwcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbV9vdmVydmlld193aW5kb3cuY3JlYXRlX2F0X2dyb3VwKHggKyBTVUJfSUNPTl9YLCB5ICsgU1VCX0lDT05fWSwgXCJlcXVpcHBlZFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1fb2JqLnF1YW50aXR5ID4gMSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaXRlbV9jb3VudCA9IHRoaXMuZ2FtZS5hZGQuYml0bWFwVGV4dChcbiAgICAgICAgICAgICAgICAgICAgICAgIHggKyBTVUJfSUNPTl9YLFxuICAgICAgICAgICAgICAgICAgICAgICAgeSArIFNVQl9JQ09OX1ksXG4gICAgICAgICAgICAgICAgICAgICAgICBcImdzLWl0ZW0tYm1wLWZvbnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1fb2JqLnF1YW50aXR5LnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pdGVtX292ZXJ2aWV3X3dpbmRvdy5hZGRfc3ByaXRlX3RvX2dyb3VwKGl0ZW1fY291bnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICArK2NvdW50ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvcGVuX2NoYXJfc2VsZWN0KCkge1xuICAgICAgICBpZiAodGhpcy5pdGVtX2Nob29zZV93aW5kb3cud2luZG93X29wZW4pIHRoaXMuaXRlbV9jaG9vc2Vfd2luZG93LmNsb3NlKCk7XG4gICAgICAgIGlmICh0aGlzLml0ZW1fY2hhbmdlX3N0YXRzX3dpbmRvdy53aW5kb3dfb3BlbikgdGhpcy5pdGVtX2NoYW5nZV9zdGF0c193aW5kb3cuY2xvc2UoKTtcblxuICAgICAgICBpZiAoIXRoaXMuaXRlbV9vdmVydmlld193aW5kb3cub3BlbikgdGhpcy5pdGVtX292ZXJ2aWV3X3dpbmRvdy5zaG93KHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgICAgICBpZiAoIXRoaXMuYXJyYW5nZV93aW5kb3cub3BlbikgdGhpcy5hcnJhbmdlX3dpbmRvdy5zaG93KHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgICAgICBpZiAoIXRoaXMuY2hhcnNfbWVudS5pc19vcGVuKSB0aGlzLmNoYXJzX21lbnUub3Blbih0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXgsIENoYXJzTWVudU1vZGVzLk1FTlUpO1xuXG4gICAgICAgIHRoaXMuc2hpZnRfaXRlbV9vdmVydmlldyhmYWxzZSk7XG5cbiAgICAgICAgdGhpcy5jaGFyc19tZW51LnNlbGVjdF9jaGFyKHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCk7XG4gICAgICAgIHRoaXMuY2hhcnNfbWVudS5ncmFudF9jb250cm9sKHRoaXMuY2xvc2VfbWVudS5iaW5kKHRoaXMpLCB0aGlzLmNoYXJfY2hvb3NlLmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIG9wZW5fbWVudShjbG9zZV9jYWxsYmFjaz86IEZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMuYmFzaWNfaW5mb193aW5kb3cub3Blbih0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4XSk7XG5cbiAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayA9IGNsb3NlX2NhbGxiYWNrO1xuICAgICAgICB0aGlzLmlzX29wZW4gPSB0cnVlO1xuXG4gICAgICAgIHRoaXMuc2V0X2l0ZW1faWNvbnMoKTtcbiAgICAgICAgdGhpcy5zZXRfZ3VpZGVfd2luZG93X3RleHQoKTtcbiAgICAgICAgdGhpcy5zZXRfZGVzY3JpcHRpb25fd2luZG93X3RleHQoKTtcblxuICAgICAgICB0aGlzLmd1aWRlX3dpbmRvdy5zaG93KHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uX3dpbmRvdy5zaG93KHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgICAgICB0aGlzLml0ZW1fb3ZlcnZpZXdfd2luZG93LnNob3codW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuYXJyYW5nZV93aW5kb3cuc2hvdyh1bmRlZmluZWQsIGZhbHNlKTtcblxuICAgICAgICB0aGlzLm9wZW5fY2hhcl9zZWxlY3QoKTtcbiAgICB9XG5cbiAgICBjbG9zZV9tZW51KGNsb3NlX21lbnVfYmVsb3c6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICB0aGlzLmRhdGEuY3Vyc29yX21hbmFnZXIuaGlkZSgpO1xuICAgICAgICB0aGlzLmRhdGEuY29udHJvbF9tYW5hZ2VyLnJlc2V0KCk7XG5cbiAgICAgICAgdGhpcy5jaGFyc19tZW51LmNsb3NlKCk7XG4gICAgICAgIHRoaXMuYmFzaWNfaW5mb193aW5kb3cuY2xvc2UoKTtcbiAgICAgICAgdGhpcy5pdGVtX2NoYW5nZV9zdGF0c193aW5kb3cuY2xvc2UoKTtcblxuICAgICAgICB0aGlzLmlzX29wZW4gPSBmYWxzZTtcblxuICAgICAgICB0aGlzLmd1aWRlX3dpbmRvdy5jbG9zZSh1bmRlZmluZWQsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbl93aW5kb3cuY2xvc2UodW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuaXRlbV9vdmVydmlld193aW5kb3cuY2xvc2UodW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuYXJyYW5nZV93aW5kb3cuY2xvc2UodW5kZWZpbmVkLCBmYWxzZSk7XG5cbiAgICAgICAgaWYgKHRoaXMuY2xvc2VfY2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2soY2xvc2VfbWVudV9iZWxvdyk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQge1RleHRPYmosIFdpbmRvd30gZnJvbSBcIi4uLy4uL1dpbmRvd1wiO1xuaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tIFwiLi4vLi4vbWFnaWNfbnVtYmVyc1wiO1xuaW1wb3J0IHtEcm9wSXRlbVdpbmRvd30gZnJvbSBcIi4vRHJvcEl0ZW1XaW5kb3dcIjtcbmltcG9ydCB7SXRlbVF1YW50aXR5TWFuYWdlcldpbmRvd30gZnJvbSBcIi4vSXRlbVF1YW50aXR5TWFuYWdlcldpbmRvd1wiO1xuaW1wb3J0IHtHaXZlSXRlbVdpbmRvd30gZnJvbSBcIi4vR2l2ZUl0ZW1XaW5kb3dcIjtcbmltcG9ydCB7R29sZGVuU3VufSBmcm9tIFwiLi4vLi4vR29sZGVuU3VuXCI7XG5pbXBvcnQge0l0ZW1TbG90LCBNYWluQ2hhcn0gZnJvbSBcIi4uLy4uL01haW5DaGFyXCI7XG5pbXBvcnQge0l0ZW0sIGl0ZW1fdHlwZXN9IGZyb20gXCIuLi8uLi9JdGVtXCI7XG5pbXBvcnQge1N0YXRzQ2hlY2tXaXRoSXRlbVdpbmRvd30gZnJvbSBcIi4vU3RhdHNDaGVja1dpdGhJdGVtV2luZG93XCI7XG5pbXBvcnQge01haW5JdGVtTWVudX0gZnJvbSBcIi4uLy4uL21haW5fbWVudXMvTWFpbkl0ZW1NZW51XCI7XG5pbXBvcnQge0N1cnNvck1hbmFnZXIsIFBvaW50VmFyaWFudHN9IGZyb20gXCIuLi8uLi91dGlscy9DdXJzb3JNYW5hZ2VyXCI7XG5cbmNvbnN0IFdJTl9XSURUSCA9IDEzMjtcbmNvbnN0IFdJTl9IRUlHSFQgPSA1MjtcbmNvbnN0IFdJTl9YID0gMTA0O1xuY29uc3QgV0lOX1kgPSAwO1xuXG5jb25zdCBPUFRJT05fVEVYVF9IT1JJWk9OVEFMX1BBRERJTkcgPSA4O1xuY29uc3QgT1BUSU9OX1RFWFRfTUFYX1dJREhUID0gNDA7XG5jb25zdCBPUFRJT05fVEVYVF9ZX1BPUyA9IDMyO1xuXG5jb25zdCBNQVhfSE9SSVpPTlRBTCA9IDM7XG5jb25zdCBNQVhfVkVSVElDQUwgPSAyO1xuXG5jb25zdCBDSEFSX05BTUVfWCA9IDI3O1xuY29uc3QgQ0hBUl9OQU1FX1kgPSA4O1xuXG5jb25zdCBJVEVNX05BTUVfWCA9IDI3O1xuY29uc3QgSVRFTV9OQU1FX1kgPSBDSEFSX05BTUVfWSArIG51bWJlcnMuRk9OVF9TSVpFO1xuY29uc3QgSVRFTV9JQ09OX1ggPSA4O1xuY29uc3QgSVRFTV9JQ09OX1kgPSA4O1xuXG5jb25zdCBTVUJfSUNPTl9YID0gNztcbmNvbnN0IFNVQl9JQ09OX1kgPSA4O1xuXG5jb25zdCBESVNBQkxFX0NPTE9SID0gMHg2MDYwNjA7XG5jb25zdCBFTkFCTEVfQ09MT1IgPSAweGZmZmZmZjtcblxuY29uc3QgQUNUSU9OX1dJTkRPV19NU0dfWCA9IDEyMjtcbmNvbnN0IEFDVElPTl9XSU5ET1dfTVNHX1kgPSA2NjtcbmNvbnN0IEFDVElPTl9XSU5ET1dfTVNHX1dJRFRIID0gNjc7XG5jb25zdCBBQ1RJT05fV0lORE9XX01TR19IRUlHSFQgPSAyMDtcblxuY29uc3QgQ1VSU09SX1hfUE9TID0gWzk2LCAxMzYsIDE3Nl07XG5jb25zdCBDVVJTT1JfWV9QT1MgPSBbMzYsIDQ0XTtcblxuZXhwb3J0IGNsYXNzIEl0ZW1PcHRpb25zV2luZG93IHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6IEdvbGRlblN1bjtcbiAgICBwdWJsaWMgaXRlbV9vYmo6IEl0ZW1TbG90O1xuICAgIHB1YmxpYyBpdGVtOiBJdGVtO1xuICAgIHB1YmxpYyBjaGFyOiBNYWluQ2hhcjtcbiAgICBwdWJsaWMgY2xvc2VfY2FsbGJhY2s6IEZ1bmN0aW9uO1xuXG4gICAgcHVibGljIHdpbmRvd19vcGVuOiBib29sZWFuO1xuICAgIHB1YmxpYyB3aW5kb3dfYWN0aXZlOiBib29sZWFuO1xuICAgIHB1YmxpYyB4OiBudW1iZXI7XG4gICAgcHVibGljIHk6IG51bWJlcjtcbiAgICBwdWJsaWMgYmFzZV93aW5kb3c6IFdpbmRvdztcbiAgICBwdWJsaWMgZ3JvdXA6IFBoYXNlci5Hcm91cDtcblxuICAgIHB1YmxpYyB0ZXh0X3Nwcml0ZXM6IHtcbiAgICAgICAgdXNlOiBUZXh0T2JqO1xuICAgICAgICBlcXVpcDogVGV4dE9iajtcbiAgICAgICAgZGV0YWlsczogVGV4dE9iajtcbiAgICAgICAgZ2l2ZTogVGV4dE9iajtcbiAgICAgICAgcmVtb3ZlOiBUZXh0T2JqO1xuICAgICAgICBkcm9wOiBUZXh0T2JqO1xuICAgIH07XG5cbiAgICBwdWJsaWMgaG9yaXpvbnRhbF9pbmRleDogbnVtYmVyO1xuICAgIHB1YmxpYyB2ZXJ0aWNhbF9pbmRleDogbnVtYmVyO1xuXG4gICAgcHVibGljIG9wdGlvbl9hY3RpdmU6IHtcbiAgICAgICAgdXNlOiBib29sZWFuO1xuICAgICAgICBlcXVpcDogYm9vbGVhbjtcbiAgICAgICAgZGV0YWlsczogYm9vbGVhbjtcbiAgICAgICAgZ2l2ZTogYm9vbGVhbjtcbiAgICAgICAgcmVtb3ZlOiBib29sZWFuO1xuICAgICAgICBkcm9wOiBib29sZWFuO1xuICAgIH07XG5cbiAgICBwdWJsaWMgZ2l2ZV9pdGVtX29wdGlvbnNfd2luZG93OiBHaXZlSXRlbVdpbmRvdztcbiAgICBwdWJsaWMgaXRlbV9xdWFudGl0eV9tYW5hZ2VyX3dpbmRvdzogSXRlbVF1YW50aXR5TWFuYWdlcldpbmRvdztcbiAgICBwdWJsaWMgZHJvcF9pdGVtX3dpbmRvdzogRHJvcEl0ZW1XaW5kb3c7XG4gICAgcHVibGljIGFjdGlvbl9tZXNzYWdlX3dpbmRvdzogV2luZG93O1xuXG4gICAgcHVibGljIGljb25fc3ByaXRlOiBQaGFzZXIuU3ByaXRlO1xuICAgIHB1YmxpYyBjaGFyX25hbWU6IFRleHRPYmo7XG4gICAgcHVibGljIGl0ZW1fbmFtZTogVGV4dE9iajtcblxuICAgIHB1YmxpYyBlcXVpcF9zcHJpdGU6IFBoYXNlci5TcHJpdGU7XG4gICAgcHVibGljIGl0ZW1fY291bnRfc3ByaXRlOiBQaGFzZXIuQml0bWFwVGV4dDtcblxuICAgIHB1YmxpYyBzdGF0c191cGRhdGVfY2FsbGJhY2s6IEZ1bmN0aW9uO1xuICAgIHB1YmxpYyBzdGF0c193aW5kb3c6IFN0YXRzQ2hlY2tXaXRoSXRlbVdpbmRvdztcbiAgICBwdWJsaWMgaXRlbV9tZW51OiBNYWluSXRlbU1lbnU7XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lOiBQaGFzZXIuR2FtZSwgZGF0YTogR29sZGVuU3VuKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuaXRlbV9vYmogPSBudWxsO1xuICAgICAgICB0aGlzLml0ZW0gPSBudWxsO1xuICAgICAgICB0aGlzLmNoYXIgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuc3RhdHNfd2luZG93ID0gbnVsbDtcbiAgICAgICAgdGhpcy5pdGVtX21lbnUgPSBudWxsO1xuXG4gICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMueCA9IFdJTl9YO1xuICAgICAgICB0aGlzLnkgPSBXSU5fWTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCB0aGlzLngsIHRoaXMueSwgV0lOX1dJRFRILCBXSU5fSEVJR0hUKTtcbiAgICAgICAgdGhpcy5ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcblxuICAgICAgICB0aGlzLnRleHRfc3ByaXRlcyA9IHtcbiAgICAgICAgICAgIHVzZTogdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlVzZVwiLCBPUFRJT05fVEVYVF9IT1JJWk9OVEFMX1BBRERJTkcsIE9QVElPTl9URVhUX1lfUE9TKSxcbiAgICAgICAgICAgIGVxdWlwOiB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgICAgIFwiRXF1aXBcIixcbiAgICAgICAgICAgICAgICBPUFRJT05fVEVYVF9IT1JJWk9OVEFMX1BBRERJTkcgKyBPUFRJT05fVEVYVF9NQVhfV0lESFQsXG4gICAgICAgICAgICAgICAgT1BUSU9OX1RFWFRfWV9QT1NcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBkZXRhaWxzOiB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgICAgIFwiRGV0YWlsc1wiLFxuICAgICAgICAgICAgICAgIE9QVElPTl9URVhUX0hPUklaT05UQUxfUEFERElORyArIDIgKiBPUFRJT05fVEVYVF9NQVhfV0lESFQsXG4gICAgICAgICAgICAgICAgT1BUSU9OX1RFWFRfWV9QT1NcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBnaXZlOiB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgICAgIFwiR2l2ZVwiLFxuICAgICAgICAgICAgICAgIE9QVElPTl9URVhUX0hPUklaT05UQUxfUEFERElORyxcbiAgICAgICAgICAgICAgICBPUFRJT05fVEVYVF9ZX1BPUyArIG51bWJlcnMuRk9OVF9TSVpFXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgcmVtb3ZlOiB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgICAgIFwiUmVtb3ZlXCIsXG4gICAgICAgICAgICAgICAgT1BUSU9OX1RFWFRfSE9SSVpPTlRBTF9QQURESU5HICsgT1BUSU9OX1RFWFRfTUFYX1dJREhULFxuICAgICAgICAgICAgICAgIE9QVElPTl9URVhUX1lfUE9TICsgbnVtYmVycy5GT05UX1NJWkVcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBkcm9wOiB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgICAgIFwiRHJvcFwiLFxuICAgICAgICAgICAgICAgIE9QVElPTl9URVhUX0hPUklaT05UQUxfUEFERElORyArIDIgKiBPUFRJT05fVEVYVF9NQVhfV0lESFQsXG4gICAgICAgICAgICAgICAgT1BUSU9OX1RFWFRfWV9QT1MgKyBudW1iZXJzLkZPTlRfU0laRVxuICAgICAgICAgICAgKSxcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhvcml6b250YWxfaW5kZXggPSAwO1xuICAgICAgICB0aGlzLnZlcnRpY2FsX2luZGV4ID0gMDtcblxuICAgICAgICB0aGlzLm9wdGlvbl9hY3RpdmUgPSB7XG4gICAgICAgICAgICB1c2U6IHRydWUsXG4gICAgICAgICAgICBlcXVpcDogdHJ1ZSxcbiAgICAgICAgICAgIGRldGFpbHM6IHRydWUsXG4gICAgICAgICAgICBnaXZlOiB0cnVlLFxuICAgICAgICAgICAgcmVtb3ZlOiB0cnVlLFxuICAgICAgICAgICAgZHJvcDogdHJ1ZSxcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmdpdmVfaXRlbV9vcHRpb25zX3dpbmRvdyA9IG5ldyBHaXZlSXRlbVdpbmRvdyh0aGlzLmdhbWUsIHRoaXMuZGF0YSk7XG4gICAgICAgIHRoaXMuaXRlbV9xdWFudGl0eV9tYW5hZ2VyX3dpbmRvdyA9IG5ldyBJdGVtUXVhbnRpdHlNYW5hZ2VyV2luZG93KHRoaXMuZ2FtZSwgdGhpcy5kYXRhKTtcbiAgICAgICAgdGhpcy5kcm9wX2l0ZW1fd2luZG93ID0gbmV3IERyb3BJdGVtV2luZG93KHRoaXMuZ2FtZSwgdGhpcy5kYXRhKTtcbiAgICAgICAgdGhpcy5hY3Rpb25fbWVzc2FnZV93aW5kb3cgPSBuZXcgV2luZG93KFxuICAgICAgICAgICAgdGhpcy5nYW1lLFxuICAgICAgICAgICAgQUNUSU9OX1dJTkRPV19NU0dfWCxcbiAgICAgICAgICAgIEFDVElPTl9XSU5ET1dfTVNHX1ksXG4gICAgICAgICAgICBBQ1RJT05fV0lORE9XX01TR19XSURUSCxcbiAgICAgICAgICAgIEFDVElPTl9XSU5ET1dfTVNHX0hFSUdIVFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGhpZGUoKSB7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuZ3JvdXAuYWxwaGEgPSAwO1xuICAgIH1cblxuICAgIHNob3coKSB7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuZ3JvdXAuYWxwaGEgPSAxO1xuICAgIH1cblxuICAgIGhpZGVfdGV4dCgpIHtcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMudGV4dF9zcHJpdGVzKSB7XG4gICAgICAgICAgICB0aGlzLnRleHRfc3ByaXRlc1trZXldLnRleHQuYWxwaGEgPSB0aGlzLnRleHRfc3ByaXRlc1trZXldLnNoYWRvdy5hbHBoYSA9IDA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzaG93X3RleHQoKSB7XG4gICAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLnRleHRfc3ByaXRlcykge1xuICAgICAgICAgICAgdGhpcy50ZXh0X3Nwcml0ZXNba2V5XS50ZXh0LmFscGhhID0gdGhpcy50ZXh0X3Nwcml0ZXNba2V5XS5zaGFkb3cuYWxwaGEgPSAxO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmV4dF92ZXJ0aWNhbCgpIHtcbiAgICAgICAgaWYgKHRoaXMudmVydGljYWxfaW5kZXggPCBNQVhfVkVSVElDQUwgLSAxKVxuICAgICAgICAgICAgdGhpcy5jaG9vc2VfcG9zaXRpb24odGhpcy52ZXJ0aWNhbF9pbmRleCArIDEsIHRoaXMuaG9yaXpvbnRhbF9pbmRleCk7XG4gICAgICAgIGVsc2UgdGhpcy5jaG9vc2VfcG9zaXRpb24oMCwgdGhpcy5ob3Jpem9udGFsX2luZGV4KTtcbiAgICB9XG5cbiAgICBwcmV2aW91c192ZXJ0aWNhbCgpIHtcbiAgICAgICAgaWYgKHRoaXMudmVydGljYWxfaW5kZXggPiAwKSB0aGlzLmNob29zZV9wb3NpdGlvbih0aGlzLnZlcnRpY2FsX2luZGV4IC0gMSwgdGhpcy5ob3Jpem9udGFsX2luZGV4KTtcbiAgICAgICAgZWxzZSB0aGlzLmNob29zZV9wb3NpdGlvbihNQVhfVkVSVElDQUwgLSAxLCB0aGlzLmhvcml6b250YWxfaW5kZXgpO1xuICAgIH1cblxuICAgIG5leHRfaG9yaXpvbnRhbCgpIHtcbiAgICAgICAgaWYgKHRoaXMuaG9yaXpvbnRhbF9pbmRleCA8IE1BWF9IT1JJWk9OVEFMIC0gMSlcbiAgICAgICAgICAgIHRoaXMuY2hvb3NlX3Bvc2l0aW9uKHRoaXMudmVydGljYWxfaW5kZXgsIHRoaXMuaG9yaXpvbnRhbF9pbmRleCArIDEpO1xuICAgICAgICBlbHNlIHRoaXMuY2hvb3NlX3Bvc2l0aW9uKHRoaXMudmVydGljYWxfaW5kZXgsIDApO1xuICAgIH1cblxuICAgIHByZXZpb3VzX2hvcml6b250YWwoKSB7XG4gICAgICAgIGlmICh0aGlzLmhvcml6b250YWxfaW5kZXggPiAwKSB0aGlzLmNob29zZV9wb3NpdGlvbih0aGlzLnZlcnRpY2FsX2luZGV4LCB0aGlzLmhvcml6b250YWxfaW5kZXggLSAxKTtcbiAgICAgICAgZWxzZSB0aGlzLmNob29zZV9wb3NpdGlvbih0aGlzLnZlcnRpY2FsX2luZGV4LCBNQVhfSE9SSVpPTlRBTCAtIDEpO1xuICAgIH1cblxuICAgIGNob29zZV9wb3NpdGlvbih2ZXJ0aWNhbDogbnVtYmVyLCBob3Jpem9udGFsOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy52ZXJ0aWNhbF9pbmRleCA9IHZlcnRpY2FsO1xuICAgICAgICB0aGlzLmhvcml6b250YWxfaW5kZXggPSBob3Jpem9udGFsO1xuXG4gICAgICAgIGxldCBjdXJzb3JfeCA9IENVUlNPUl9YX1BPU1t0aGlzLmhvcml6b250YWxfaW5kZXhdO1xuICAgICAgICBsZXQgY3Vyc29yX3kgPSBDVVJTT1JfWV9QT1NbdGhpcy52ZXJ0aWNhbF9pbmRleF07XG5cbiAgICAgICAgbGV0IHR3ZWVuX2NvbmZpZyA9IHt0eXBlOiBDdXJzb3JNYW5hZ2VyLkN1cnNvclR3ZWVucy5QT0lOVCwgdmFyaWFudDogUG9pbnRWYXJpYW50cy5OT1JNQUx9O1xuICAgICAgICB0aGlzLmRhdGEuY3Vyc29yX21hbmFnZXIubW92ZV90byh7eDogY3Vyc29yX3gsIHk6IGN1cnNvcl95fSwge2FuaW1hdGU6IGZhbHNlLCB0d2Vlbl9jb25maWc6IHR3ZWVuX2NvbmZpZ30pO1xuICAgICAgICB0aGlzLm9uX2NoYW5nZSgpO1xuICAgIH1cblxuICAgIHNldF9hdmFpbGFibGVfb3B0aW9ucygpIHtcbiAgICAgICAgdGhpcy5zaG93X3RleHQoKTtcbiAgICAgICAgaWYgKCF0aGlzLml0ZW0udXNlX2FiaWxpdHkgfHwgdGhpcy5pdGVtX29iai5icm9rZW4pIHtcbiAgICAgICAgICAgIHRoaXMudGV4dF9zcHJpdGVzLnVzZS50ZXh0LnRpbnQgPSBESVNBQkxFX0NPTE9SO1xuICAgICAgICAgICAgdGhpcy5vcHRpb25fYWN0aXZlLnVzZSA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50ZXh0X3Nwcml0ZXMudXNlLnRleHQudGludCA9IEVOQUJMRV9DT0xPUjtcbiAgICAgICAgICAgIHRoaXMub3B0aW9uX2FjdGl2ZS51c2UgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5pdGVtLmVxdWlwYWJsZSB8fCB0aGlzLml0ZW1fb2JqLmVxdWlwcGVkIHx8ICF0aGlzLml0ZW0uZXF1aXBhYmxlX2NoYXJzLmluY2x1ZGVzKHRoaXMuY2hhci5rZXlfbmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dF9zcHJpdGVzLmVxdWlwLnRleHQudGludCA9IERJU0FCTEVfQ09MT1I7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbl9hY3RpdmUuZXF1aXAgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudGV4dF9zcHJpdGVzLmVxdWlwLnRleHQudGludCA9IEVOQUJMRV9DT0xPUjtcbiAgICAgICAgICAgIHRoaXMub3B0aW9uX2FjdGl2ZS5lcXVpcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVycy5sZW5ndGggPD0gMSkge1xuICAgICAgICAgICAgdGhpcy50ZXh0X3Nwcml0ZXMuZ2l2ZS50ZXh0LnRpbnQgPSBESVNBQkxFX0NPTE9SO1xuICAgICAgICAgICAgdGhpcy5vcHRpb25fYWN0aXZlLmdpdmUgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudGV4dF9zcHJpdGVzLmdpdmUudGV4dC50aW50ID0gRU5BQkxFX0NPTE9SO1xuICAgICAgICAgICAgdGhpcy5vcHRpb25fYWN0aXZlLmdpdmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICF0aGlzLml0ZW0uZXF1aXBhYmxlIHx8XG4gICAgICAgICAgICAhdGhpcy5pdGVtX29iai5lcXVpcHBlZCB8fFxuICAgICAgICAgICAgIXRoaXMuaXRlbS5lcXVpcGFibGVfY2hhcnMuaW5jbHVkZXModGhpcy5jaGFyLmtleV9uYW1lKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMudGV4dF9zcHJpdGVzLnJlbW92ZS50ZXh0LnRpbnQgPSBESVNBQkxFX0NPTE9SO1xuICAgICAgICAgICAgdGhpcy5vcHRpb25fYWN0aXZlLnJlbW92ZSA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50ZXh0X3Nwcml0ZXMucmVtb3ZlLnRleHQudGludCA9IEVOQUJMRV9DT0xPUjtcbiAgICAgICAgICAgIHRoaXMub3B0aW9uX2FjdGl2ZS5yZW1vdmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLml0ZW0uaW1wb3J0YW50X2l0ZW0pIHtcbiAgICAgICAgICAgIHRoaXMudGV4dF9zcHJpdGVzLmRyb3AudGV4dC50aW50ID0gRElTQUJMRV9DT0xPUjtcbiAgICAgICAgICAgIHRoaXMub3B0aW9uX2FjdGl2ZS5kcm9wID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRleHRfc3ByaXRlcy5kcm9wLnRleHQudGludCA9IEVOQUJMRV9DT0xPUjtcbiAgICAgICAgICAgIHRoaXMub3B0aW9uX2FjdGl2ZS5kcm9wID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldF9oZWFkZXIoKSB7XG4gICAgICAgIHRoaXMuaWNvbl9zcHJpdGUgPSB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChcbiAgICAgICAgICAgIElURU1fSUNPTl9YLFxuICAgICAgICAgICAgSVRFTV9JQ09OX1ksXG4gICAgICAgICAgICBcIml0ZW1zX2ljb25zXCIsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICB0aGlzLml0ZW0ua2V5X25hbWVcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5jaGFyX25hbWUgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKHRoaXMuY2hhci5uYW1lLCBDSEFSX05BTUVfWCwgQ0hBUl9OQU1FX1kpO1xuICAgICAgICB0aGlzLml0ZW1fbmFtZSA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24odGhpcy5pdGVtLm5hbWUsIElURU1fTkFNRV9YLCBJVEVNX05BTUVfWSk7XG4gICAgICAgIHRoaXMuZXF1aXBfc3ByaXRlID0gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuaXRlbV9vYmouZXF1aXBwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZXF1aXBfc3ByaXRlID0gdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoXG4gICAgICAgICAgICAgICAgSVRFTV9JQ09OX1ggKyBTVUJfSUNPTl9YLFxuICAgICAgICAgICAgICAgIElURU1fSUNPTl9ZICsgU1VCX0lDT05fWSxcbiAgICAgICAgICAgICAgICBcImVxdWlwcGVkXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pdGVtX2NvdW50X3Nwcml0ZSA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLml0ZW1fb2JqLnF1YW50aXR5ID4gMSkge1xuICAgICAgICAgICAgdGhpcy5pdGVtX2NvdW50X3Nwcml0ZSA9IHRoaXMuZ2FtZS5hZGQuYml0bWFwVGV4dChcbiAgICAgICAgICAgICAgICBJVEVNX0lDT05fWCArIFNVQl9JQ09OX1gsXG4gICAgICAgICAgICAgICAgSVRFTV9JQ09OX1kgKyBTVUJfSUNPTl9ZLFxuICAgICAgICAgICAgICAgIFwiZ3MtaXRlbS1ibXAtZm9udFwiLFxuICAgICAgICAgICAgICAgIHRoaXMuaXRlbV9vYmoucXVhbnRpdHkudG9TdHJpbmcoKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cuYWRkX3Nwcml0ZV90b19ncm91cCh0aGlzLml0ZW1fY291bnRfc3ByaXRlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVuc2V0X2hlYWRlcigpIHtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfZnJvbV9ncm91cCh0aGlzLmljb25fc3ByaXRlKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfdGV4dCh0aGlzLmNoYXJfbmFtZSk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX3RleHQodGhpcy5pdGVtX25hbWUpO1xuICAgICAgICBpZiAodGhpcy5lcXVpcF9zcHJpdGUpIHtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX2Zyb21fZ3JvdXAodGhpcy5lcXVpcF9zcHJpdGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLml0ZW1fY291bnRfc3ByaXRlKSB7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV9mcm9tX2dyb3VwKHRoaXMuaXRlbV9jb3VudF9zcHJpdGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlX3Bvc2l0aW9uKCkge1xuICAgICAgICB0aGlzLmdyb3VwLnggPSB0aGlzLmdhbWUuY2FtZXJhLnggKyB0aGlzLng7XG4gICAgICAgIHRoaXMuZ3JvdXAueSA9IHRoaXMuZ2FtZS5jYW1lcmEueSArIHRoaXMueTtcbiAgICB9XG5cbiAgICBvcGVuX2FjdGlvbl9tZXNzYWdlX3dpbmRvdyh0ZXh0OiBzdHJpbmcsIGNsb3NlX2NhbGxiYWNrOiBGdW5jdGlvbikge1xuICAgICAgICB0aGlzLmFjdGlvbl9tZXNzYWdlX3dpbmRvdy5zZXRfdGV4dChbdGV4dF0pO1xuICAgICAgICB0aGlzLmRhdGEuY3Vyc29yX21hbmFnZXIuaGlkZSgpO1xuICAgICAgICBpZiAodGhpcy5zdGF0c191cGRhdGVfY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zdGF0c191cGRhdGVfY2FsbGJhY2soKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYWN0aW9uX21lc3NhZ2Vfd2luZG93LnNob3codW5kZWZpbmVkLCB0cnVlLCAoKSA9PiB7XG4gICAgICAgICAgICBjbG9zZV9jYWxsYmFjaygpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmRhdGEuY29udHJvbF9tYW5hZ2VyLnNpbXBsZV9pbnB1dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbl9tZXNzYWdlX3dpbmRvdy5jbG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5kYXRhLmNvbnRyb2xfbWFuYWdlci5yZXNldCgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvbl9jaG9vc2UoKSB7XG4gICAgICAgIGlmICh0aGlzLmhvcml6b250YWxfaW5kZXggPT09IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnZlcnRpY2FsX2luZGV4ID09PSAxICYmIHRoaXMub3B0aW9uX2FjdGl2ZS5naXZlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWFjdGl2YXRlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5naXZlX2l0ZW1fb3B0aW9uc193aW5kb3cub3Blbih0aGlzLml0ZW1fb2JqLCB0aGlzLml0ZW0sIHRoaXMuY2hhciwgdGhpcy5pdGVtX21lbnUsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmN1cnNvcl9tYW5hZ2VyLnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pdGVtX21lbnUuY2hvb3NpbmdfZ2l2ZV9kZXN0aW5hdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1fbWVudS5zaGlmdF9pdGVtX292ZXJ2aWV3KGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2l2ZV9pdGVtX29wdGlvbnNfd2luZG93LmNob29zaW5nX2NoYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3Blbl9vcHRpb25zKHRoaXMudmVydGljYWxfaW5kZXgsIHRoaXMuaG9yaXpvbnRhbF9pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmhvcml6b250YWxfaW5kZXggPT09IDEpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnZlcnRpY2FsX2luZGV4ID09PSAwICYmIHRoaXMub3B0aW9uX2FjdGl2ZS5lcXVpcCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhci5lcXVpcF9pdGVtKHRoaXMuaXRlbV9vYmouaW5kZXgpO1xuICAgICAgICAgICAgICAgIHRoaXMub3Blbl9hY3Rpb25fbWVzc2FnZV93aW5kb3coXCJFcXVpcHBlZC5cIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKHRoaXMuY2xvc2VfY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMudmVydGljYWxfaW5kZXggPT09IDEgJiYgdGhpcy5vcHRpb25fYWN0aXZlLnJlbW92ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhci51bmVxdWlwX2l0ZW0odGhpcy5pdGVtX29iai5pbmRleCk7XG4gICAgICAgICAgICAgICAgdGhpcy5vcGVuX2FjdGlvbl9tZXNzYWdlX3dpbmRvdyhcIlJlbW92ZWQuXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSh0aGlzLmNsb3NlX2NhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmhvcml6b250YWxfaW5kZXggPT09IDIpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnZlcnRpY2FsX2luZGV4ID09PSAxICYmIHRoaXMub3B0aW9uX2FjdGl2ZS5kcm9wKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWFjdGl2YXRlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5kcm9wX2l0ZW1fd2luZG93Lm9wZW4odGhpcy5pdGVtX29iaiwgdGhpcy5pdGVtLCB0aGlzLmNoYXIsIHRoaXMuaXRlbV9tZW51LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRyb3BfaXRlbV93aW5kb3cuZHJvcHBlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlX3RleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbV9tZW51Lml0ZW1fY2hvb3NlX3dpbmRvdy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pdGVtX21lbnUuc2hpZnRfaXRlbV9vdmVydmlldyh0cnVlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wZW5fYWN0aW9uX21lc3NhZ2Vfd2luZG93KFwiRHJvcHBlZCBpdC5cIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UodGhpcy5jbG9zZV9jYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHRoaXMub3Blbl9vcHRpb25zKHRoaXMudmVydGljYWxfaW5kZXgsIHRoaXMuaG9yaXpvbnRhbF9pbmRleCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbl9jaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMuc3RhdHNfd2luZG93LmhpZGVfYXJyb3dzKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuc3RhdHNfd2luZG93LndpbmRvd19vcGVuKSB0aGlzLnN0YXRzX3dpbmRvdy5jbG9zZSgpO1xuICAgICAgICB0aGlzLnN0YXRzX3dpbmRvdy5vcGVuKHRoaXMuY2hhciwgdGhpcy5pdGVtLCB0aGlzLml0ZW1fb2JqKTtcblxuICAgICAgICBpZiAodGhpcy5ob3Jpem9udGFsX2luZGV4ID09PSAwKSB7XG4gICAgICAgICAgICBpZiAodGhpcy52ZXJ0aWNhbF9pbmRleCA9PT0gMCAmJiB0aGlzLm9wdGlvbl9hY3RpdmUudXNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0c193aW5kb3cuaGlkZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMudmVydGljYWxfaW5kZXggPT09IDEgJiYgdGhpcy5vcHRpb25fYWN0aXZlLmdpdmUgJiYgdGhpcy5pdGVtX29iai5lcXVpcHBlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdHNfd2luZG93LmNvbXBhcmVfaXRlbXModHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5ob3Jpem9udGFsX2luZGV4ID09PSAxKSB7XG4gICAgICAgICAgICBpZiAodGhpcy52ZXJ0aWNhbF9pbmRleCA9PT0gMCAmJiB0aGlzLm9wdGlvbl9hY3RpdmUuZXF1aXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRzX3dpbmRvdy5jb21wYXJlX2l0ZW1zKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy52ZXJ0aWNhbF9pbmRleCA9PT0gMSAmJiB0aGlzLm9wdGlvbl9hY3RpdmUucmVtb3ZlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0c193aW5kb3cuY29tcGFyZV9pdGVtcyh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmhvcml6b250YWxfaW5kZXggPT09IDIpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnZlcnRpY2FsX2luZGV4ID09PSAxICYmIHRoaXMub3B0aW9uX2FjdGl2ZS5kcm9wICYmIHRoaXMuaXRlbV9vYmouZXF1aXBwZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRzX3dpbmRvdy5jb21wYXJlX2l0ZW1zKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgb3Blbl9vcHRpb25zKHZlcnRpY2FsOiBudW1iZXIgPSAwLCBob3Jpem9udGFsOiBudW1iZXIgPSAwKSB7XG4gICAgICAgIHRoaXMuc2V0X2hlYWRlcigpO1xuICAgICAgICB0aGlzLml0ZW1fbWVudS5pdGVtX2Nob29zZV93aW5kb3cuZGVhY3RpdmF0ZSgpO1xuXG4gICAgICAgIGlmICh0aGlzLml0ZW0udHlwZSA9PT0gaXRlbV90eXBlcy5BQklMSVRZX0dSQU5UT1IpIHtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLml0ZW0udHlwZSAhPT0gaXRlbV90eXBlcy5HRU5FUkFMX0lURU0pIHtcbiAgICAgICAgICAgIHRoaXMuaXRlbV9tZW51Lml0ZW1fY2hhbmdlX3N0YXRzX3dpbmRvdy5vcGVuKFxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLml0ZW1fbWVudS5pdGVtX2Nob29zZV93aW5kb3cuY2hhcl9pbmRleF0sXG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtLFxuICAgICAgICAgICAgICAgIHRoaXMuaXRlbV9vYmpcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLml0ZW1fbWVudS5pdGVtX2NoYW5nZV9zdGF0c193aW5kb3cuY29tcGFyZV9pdGVtcygpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXRlbV9tZW51LmNoYXJzX21lbnUuc2VsZWN0X2NoYXIodGhpcy5pdGVtX21lbnUuaXRlbV9jaG9vc2Vfd2luZG93LmNoYXJfaW5kZXgpO1xuICAgICAgICB0aGlzLml0ZW1fbWVudS5pdGVtX29wdGlvbnNfd2luZG93LnN0YXRzX3dpbmRvdy5jb21wYXJlX2l0ZW1zKHRydWUpO1xuXG4gICAgICAgIHRoaXMuY2hvb3NlX3Bvc2l0aW9uKHZlcnRpY2FsLCBob3Jpem9udGFsKTtcblxuICAgICAgICBsZXQgY29udHJvbHMgPSBbXG4gICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5MRUZULCBvbl9kb3duOiB0aGlzLnByZXZpb3VzX2hvcml6b250YWwuYmluZCh0aGlzKX0sXG4gICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5SSUdIVCwgb25fZG93bjogdGhpcy5uZXh0X2hvcml6b250YWwuYmluZCh0aGlzKX0sXG4gICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5VUCwgb25fZG93bjogdGhpcy5uZXh0X3ZlcnRpY2FsLmJpbmQodGhpcyl9LFxuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuRE9XTiwgb25fZG93bjogdGhpcy5wcmV2aW91c192ZXJ0aWNhbC5iaW5kKHRoaXMpfSxcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkEsIG9uX2Rvd246IHRoaXMub25fY2hvb3NlLmJpbmQodGhpcyl9LFxuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuQiwgb25fZG93bjogdGhpcy5jbG9zZS5iaW5kKHRoaXMsIHRoaXMuY2xvc2VfY2FsbGJhY2spfSxcbiAgICAgICAgXTtcblxuICAgICAgICB0aGlzLmRhdGEuY29udHJvbF9tYW5hZ2VyLnNldF9jb250cm9sKGNvbnRyb2xzLCB7bG9vcF9jb25maWdzOiB7dmVydGljYWw6IHRydWUsIGhvcml6b250YWw6IHRydWV9fSk7XG4gICAgfVxuXG4gICAgb3BlbihcbiAgICAgICAgaXRlbV9vYmo6IEl0ZW1TbG90LFxuICAgICAgICBpdGVtOiBJdGVtLFxuICAgICAgICBjaGFyOiBNYWluQ2hhcixcbiAgICAgICAgc3RhdHNfd2luZG93OiBTdGF0c0NoZWNrV2l0aEl0ZW1XaW5kb3csXG4gICAgICAgIGl0ZW1fbWVudTogTWFpbkl0ZW1NZW51LFxuICAgICAgICBjbG9zZV9jYWxsYmFjazogRnVuY3Rpb24sXG4gICAgICAgIHN0YXRzX3VwZGF0ZV9jYWxsYmFjazogRnVuY3Rpb24sXG4gICAgICAgIG9wZW5fY2FsbGJhY2s/OiBGdW5jdGlvblxuICAgICkge1xuICAgICAgICB0aGlzLml0ZW1fb2JqID0gaXRlbV9vYmo7XG4gICAgICAgIHRoaXMuaXRlbSA9IGl0ZW07XG4gICAgICAgIHRoaXMuY2hhciA9IGNoYXI7XG4gICAgICAgIHRoaXMuc3RhdHNfd2luZG93ID0gc3RhdHNfd2luZG93O1xuICAgICAgICB0aGlzLml0ZW1fbWVudSA9IGl0ZW1fbWVudTtcblxuICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrID0gY2xvc2VfY2FsbGJhY2s7XG4gICAgICAgIHRoaXMuc3RhdHNfdXBkYXRlX2NhbGxiYWNrID0gc3RhdHNfdXBkYXRlX2NhbGxiYWNrO1xuICAgICAgICB0aGlzLnVwZGF0ZV9wb3NpdGlvbigpO1xuICAgICAgICB0aGlzLnNldF9hdmFpbGFibGVfb3B0aW9ucygpO1xuICAgICAgICB0aGlzLm9uX2NoYW5nZSgpO1xuXG4gICAgICAgIHRoaXMub3Blbl9vcHRpb25zKCk7XG5cbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zaG93KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2luZG93X29wZW4gPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChvcGVuX2NhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBvcGVuX2NhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBjbG9zZShjYWxsYmFjaz86IEZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMuZGF0YS5jdXJzb3JfbWFuYWdlci5oaWRlKCk7XG4gICAgICAgIHRoaXMuZGF0YS5jb250cm9sX21hbmFnZXIucmVzZXQoKTtcblxuICAgICAgICB0aGlzLnVuc2V0X2hlYWRlcigpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmNsb3NlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgYWN0aXZhdGUoKSB7XG4gICAgICAgIHRoaXMuc2V0X2hlYWRlcigpO1xuICAgICAgICB0aGlzLnNldF9hdmFpbGFibGVfb3B0aW9ucygpO1xuICAgICAgICB0aGlzLm9uX2NoYW5nZSgpO1xuICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSB0cnVlO1xuICAgIH1cblxuICAgIGRlYWN0aXZhdGUoKSB7XG4gICAgICAgIHRoaXMudW5zZXRfaGVhZGVyKCk7XG4gICAgICAgIHRoaXMuZGF0YS5jdXJzb3JfbWFuYWdlci5oaWRlKCk7XG4gICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IGZhbHNlO1xuICAgIH1cbn1cbiIsImltcG9ydCB7VGV4dE9iaiwgV2luZG93fSBmcm9tIFwiLi4vLi4vV2luZG93XCI7XG5pbXBvcnQge0dvbGRlblN1bn0gZnJvbSBcIi4uLy4uL0dvbGRlblN1blwiO1xuaW1wb3J0IHtJdGVtU2xvdCwgTWFpbkNoYXJ9IGZyb20gXCIuLi8uLi9NYWluQ2hhclwiO1xuaW1wb3J0IHtJdGVtfSBmcm9tIFwiLi4vLi4vSXRlbVwiO1xuaW1wb3J0IHtNYWluSXRlbU1lbnV9IGZyb20gXCIuLi8uLi9tYWluX21lbnVzL01haW5JdGVtTWVudVwiO1xuaW1wb3J0IHtJdGVtUXVhbnRpdHlNYW5hZ2VyV2luZG93fSBmcm9tIFwiLi9JdGVtUXVhbnRpdHlNYW5hZ2VyV2luZG93XCI7XG5pbXBvcnQge0N1cnNvck1hbmFnZXIsIFBvaW50VmFyaWFudHN9IGZyb20gXCIuLi8uLi91dGlscy9DdXJzb3JNYW5hZ2VyXCI7XG5cbmNvbnN0IFdJTl9XSURUSCA9IDEzMjtcbmNvbnN0IFdJTl9IRUlHSFQgPSA3NjtcbmNvbnN0IFdJTl9YID0gMTA0O1xuY29uc3QgV0lOX1kgPSAyNjtcblxuY29uc3QgSU5GT19YID0gMTY7XG5jb25zdCBRVUVTVElPTl9ZID0gMjI7XG5jb25zdCBBTlNXRVJfWCA9IDMyO1xuY29uc3QgWUVTX1kgPSA0NjtcbmNvbnN0IE5PX1kgPSA2MjtcblxuY29uc3QgSUNPTl9ZID0gNDtcbmNvbnN0IElDT05fTkFNRV9YID0gMzI7XG5jb25zdCBJQ09OX05BTUVfWSA9IDg7XG5cbmNvbnN0IFNVQl9JQ09OX1ggPSA3O1xuY29uc3QgU1VCX0lDT05fWSA9IDg7XG5cbmNvbnN0IENVUlNPUl9YID0gMTE0O1xuY29uc3QgQ1VSU09SX1kxID0gNzY7XG5jb25zdCBDVVJTT1JfWTIgPSA5MjtcblxuZXhwb3J0IGNsYXNzIERyb3BJdGVtV2luZG93IHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6IEdvbGRlblN1bjtcbiAgICBwdWJsaWMgaXRlbV9tZW51OiBNYWluSXRlbU1lbnU7XG4gICAgcHVibGljIGl0ZW1fcXVhbnRfd2luOiBJdGVtUXVhbnRpdHlNYW5hZ2VyV2luZG93O1xuXG4gICAgcHVibGljIGJhc2Vfd2luZG93OiBXaW5kb3c7XG4gICAgcHVibGljIGl0ZW1fb2JqOiBJdGVtU2xvdDtcbiAgICBwdWJsaWMgaXRlbTogSXRlbTtcbiAgICBwdWJsaWMgY2hhcjogTWFpbkNoYXI7XG5cbiAgICBwdWJsaWMgd2luZG93X29wZW46IGJvb2xlYW47XG4gICAgcHVibGljIHdpbmRvd19hY3RpdmU6IGJvb2xlYW47XG4gICAgcHVibGljIHF1YW50aXR5X3RvX3JlbW92ZTogbnVtYmVyO1xuICAgIHB1YmxpYyBhbnN3ZXJfaW5kZXg6IG51bWJlcjtcblxuICAgIHB1YmxpYyBpY29uX25hbWU6IFRleHRPYmo7XG4gICAgcHVibGljIGljb246IFBoYXNlci5TcHJpdGU7XG4gICAgcHVibGljIGl0ZW1fY291bnRfc3ByaXRlOiBQaGFzZXIuQml0bWFwVGV4dDtcbiAgICBwdWJsaWMgZ3JvdXA6IFBoYXNlci5Hcm91cDtcbiAgICBwdWJsaWMgZHJvcHBlZDogYm9vbGVhbjtcbiAgICBwdWJsaWMgY2xvc2VfY2FsbGJhY2s6IEZ1bmN0aW9uO1xuICAgIHB1YmxpYyBvcGVuX2NhbGxiYWNrOiBGdW5jdGlvbjtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWU6IFBoYXNlci5HYW1lLCBkYXRhOiBHb2xkZW5TdW4pIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5pdGVtX21lbnUgPSBudWxsO1xuICAgICAgICB0aGlzLml0ZW1fcXVhbnRfd2luID0gbnVsbDtcblxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93ID0gbmV3IFdpbmRvdyh0aGlzLmdhbWUsIFdJTl9YLCBXSU5fWSwgV0lOX1dJRFRILCBXSU5fSEVJR0hUKTtcbiAgICAgICAgdGhpcy5pdGVtX29iaiA9IG51bGw7XG4gICAgICAgIHRoaXMuaXRlbSA9IG51bGw7XG4gICAgICAgIHRoaXMuY2hhciA9IG51bGw7XG5cbiAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5xdWFudGl0eV90b19yZW1vdmUgPSAwO1xuICAgICAgICB0aGlzLmFuc3dlcl9pbmRleCA9IDA7XG5cbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dChbXCJBcmUgeW91IHN1cmUgeW91XCIsIFwid2FudCB0byBkcm9wIGl0P1wiXSwgSU5GT19YLCBRVUVTVElPTl9ZLCAxKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlllc1wiLCBBTlNXRVJfWCwgWUVTX1kpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiTm9cIiwgQU5TV0VSX1gsIE5PX1kpO1xuXG4gICAgICAgIHRoaXMuaWNvbl9uYW1lID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBJQ09OX05BTUVfWCwgSUNPTl9OQU1FX1kpO1xuICAgICAgICB0aGlzLmljb24gPSBudWxsO1xuICAgICAgICB0aGlzLml0ZW1fY291bnRfc3ByaXRlID0gbnVsbDtcblxuICAgICAgICB0aGlzLmdyb3VwID0gdGhpcy5nYW1lLmFkZC5ncm91cCgpO1xuICAgICAgICB0aGlzLmRyb3BwZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBjaGFuZ2VfYW5zd2VyKCkge1xuICAgICAgICBpZiAodGhpcy5hbnN3ZXJfaW5kZXggPT09IFlFU19ZKSB0aGlzLnNldF9hbnN3ZXJfaW5kZXgoTk9fWSk7XG4gICAgICAgIGVsc2UgdGhpcy5zZXRfYW5zd2VyX2luZGV4KFlFU19ZKTtcbiAgICB9XG5cbiAgICBzZXRfYW5zd2VyX2luZGV4KGluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5hbnN3ZXJfaW5kZXggPSBpbmRleDtcblxuICAgICAgICBsZXQgY3Vyc29yX3ggPSBDVVJTT1JfWDtcbiAgICAgICAgbGV0IGN1cnNvcl95ID0gaW5kZXggPT09IFlFU19ZID8gQ1VSU09SX1kxIDogQ1VSU09SX1kyO1xuXG4gICAgICAgIGxldCB0d2Vlbl9jb25maWcgPSB7dHlwZTogQ3Vyc29yTWFuYWdlci5DdXJzb3JUd2VlbnMuUE9JTlQsIHZhcmlhbnQ6IFBvaW50VmFyaWFudHMuTk9STUFMfTtcbiAgICAgICAgdGhpcy5kYXRhLmN1cnNvcl9tYW5hZ2VyLm1vdmVfdG8oe3g6IGN1cnNvcl94LCB5OiBjdXJzb3JfeX0sIHthbmltYXRlOiBmYWxzZSwgdHdlZW5fY29uZmlnOiB0d2Vlbl9jb25maWd9KTtcbiAgICB9XG5cbiAgICB1cGRhdGVfcG9zaXRpb24oKSB7XG4gICAgICAgIHRoaXMuZ3JvdXAueCA9IHRoaXMuZ2FtZS5jYW1lcmEueCArIFdJTl9YO1xuICAgICAgICB0aGlzLmdyb3VwLnkgPSB0aGlzLmdhbWUuY2FtZXJhLnkgKyBXSU5fWTtcbiAgICB9XG5cbiAgICBzZXRfaW5mbygpIHtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLml0ZW0ubmFtZSwgdGhpcy5pY29uX25hbWUpO1xuICAgICAgICB0aGlzLmljb24gPSB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChJTkZPX1gsIElDT05fWSwgXCJpdGVtc19pY29uc1wiLCB1bmRlZmluZWQsIHRoaXMuaXRlbS5rZXlfbmFtZSk7XG4gICAgICAgIGlmICh0aGlzLnF1YW50aXR5X3RvX3JlbW92ZSA+IDEpIHtcbiAgICAgICAgICAgIHRoaXMuaXRlbV9jb3VudF9zcHJpdGUgPSB0aGlzLmdhbWUuYWRkLmJpdG1hcFRleHQoXG4gICAgICAgICAgICAgICAgSU5GT19YICsgU1VCX0lDT05fWCxcbiAgICAgICAgICAgICAgICBJQ09OX1kgKyBTVUJfSUNPTl9ZLFxuICAgICAgICAgICAgICAgIFwiZ3MtaXRlbS1ibXAtZm9udFwiLFxuICAgICAgICAgICAgICAgIHRoaXMucXVhbnRpdHlfdG9fcmVtb3ZlLnRvU3RyaW5nKClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmFkZF9zcHJpdGVfdG9fZ3JvdXAodGhpcy5pdGVtX2NvdW50X3Nwcml0ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1bnNldF9pbmZvKCkge1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV9mcm9tX2dyb3VwKHRoaXMuaWNvbik7XG4gICAgICAgIGlmICh0aGlzLml0ZW1fY291bnRfc3ByaXRlKSB7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV9mcm9tX2dyb3VwKHRoaXMuaXRlbV9jb3VudF9zcHJpdGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25fZHJvcCgpIHtcbiAgICAgICAgaWYgKHRoaXMuYW5zd2VyX2luZGV4ID09PSBZRVNfWSkge1xuICAgICAgICAgICAgdGhpcy5jaGFyLnJlbW92ZV9pdGVtKHRoaXMuaXRlbV9vYmosIHRoaXMucXVhbnRpdHlfdG9fcmVtb3ZlKTtcbiAgICAgICAgICAgIHRoaXMuZHJvcHBlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cblxuICAgIG9uX3F1YW50aXR5X3NlbGVjdCgpIHtcbiAgICAgICAgdGhpcy5xdWFudGl0eV90b19yZW1vdmUgPSB0aGlzLml0ZW1fcXVhbnRfd2luLndpbmRvd19vcGVuXG4gICAgICAgICAgICA/IHRoaXMuaXRlbV9xdWFudF93aW4uY2hvb3Nlbl9xdWFudGl0eVxuICAgICAgICAgICAgOiB0aGlzLml0ZW1fb2JqLnF1YW50aXR5O1xuXG4gICAgICAgIHRoaXMuc2V0X2Fuc3dlcl9pbmRleChZRVNfWSk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2hvdygoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICBpZiAodGhpcy5vcGVuX2NhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wZW5fY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZmFsc2UpO1xuXG4gICAgICAgIGxldCBjb250cm9scyA9IFtcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLlVQLCBvbl9kb3duOiB0aGlzLmNoYW5nZV9hbnN3ZXIuYmluZCh0aGlzKX0sXG4gICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5ET1dOLCBvbl9kb3duOiB0aGlzLmNoYW5nZV9hbnN3ZXIuYmluZCh0aGlzKX0sXG4gICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5BLCBvbl9kb3duOiB0aGlzLm9uX2Ryb3AuYmluZCh0aGlzKX0sXG4gICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5CLCBvbl9kb3duOiB0aGlzLmNsb3NlLmJpbmQodGhpcyl9LFxuICAgICAgICBdO1xuICAgICAgICB0aGlzLmRhdGEuY29udHJvbF9tYW5hZ2VyLnNldF9jb250cm9sKGNvbnRyb2xzLCB7bG9vcF9jb25maWdzOiB7dmVydGljYWw6IHRydWV9fSk7XG4gICAgfVxuXG4gICAgb25faXRlbV9zZWxlY3QoKSB7XG4gICAgICAgIGlmICh0aGlzLml0ZW1fb2JqLnF1YW50aXR5ID4gMSkge1xuICAgICAgICAgICAgdGhpcy5pdGVtX3F1YW50X3dpbi5vcGVuKHRoaXMuaXRlbV9vYmosIHRoaXMuaXRlbSwgdGhpcy5jaGFyKTtcbiAgICAgICAgICAgIHRoaXMuaXRlbV9xdWFudF93aW4uZ3JhbnRfY29udHJvbCh0aGlzLmNsb3NlLmJpbmQodGhpcyksIHRoaXMub25fcXVhbnRpdHlfc2VsZWN0LmJpbmQodGhpcykpO1xuICAgICAgICB9IGVsc2UgdGhpcy5vbl9xdWFudGl0eV9zZWxlY3QoKTtcbiAgICB9XG5cbiAgICBvcGVuKFxuICAgICAgICBpdGVtX29iajogSXRlbVNsb3QsXG4gICAgICAgIGl0ZW06IEl0ZW0sXG4gICAgICAgIGNoYXI6IE1haW5DaGFyLFxuICAgICAgICBpdGVtX21lbnU6IE1haW5JdGVtTWVudSxcbiAgICAgICAgY2xvc2VfY2FsbGJhY2s/OiBGdW5jdGlvbixcbiAgICAgICAgb3Blbl9jYWxsYmFjaz86IEZ1bmN0aW9uXG4gICAgKSB7XG4gICAgICAgIHRoaXMuaXRlbV9vYmogPSBpdGVtX29iajtcbiAgICAgICAgdGhpcy5pdGVtID0gaXRlbTtcbiAgICAgICAgdGhpcy5jaGFyID0gY2hhcjtcbiAgICAgICAgdGhpcy5pdGVtX21lbnUgPSBpdGVtX21lbnU7XG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBjbG9zZV9jYWxsYmFjaztcbiAgICAgICAgdGhpcy5vcGVuX2NhbGxiYWNrID0gb3Blbl9jYWxsYmFjaztcblxuICAgICAgICB0aGlzLnF1YW50aXR5X3RvX3JlbW92ZSA9IDA7XG4gICAgICAgIHRoaXMuaXRlbV9xdWFudF93aW4gPSB0aGlzLml0ZW1fbWVudS5pdGVtX29wdGlvbnNfd2luZG93Lml0ZW1fcXVhbnRpdHlfbWFuYWdlcl93aW5kb3c7XG4gICAgICAgIHRoaXMuYW5zd2VyX2luZGV4ID0gMDtcbiAgICAgICAgdGhpcy5kcm9wcGVkID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5zZXRfaW5mbygpO1xuICAgICAgICB0aGlzLnVwZGF0ZV9wb3NpdGlvbigpO1xuICAgICAgICB0aGlzLm9uX2l0ZW1fc2VsZWN0KCk7XG4gICAgfVxuXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMudW5zZXRfaW5mbygpO1xuICAgICAgICBpZiAodGhpcy5pdGVtX3F1YW50X3dpbi53aW5kb3dfb3BlbikgdGhpcy5pdGVtX3F1YW50X3dpbi5jbG9zZSgpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmNsb3NlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHRoaXMuY2xvc2VfY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7VGV4dE9iaiwgV2luZG93fSBmcm9tIFwiLi4vLi4vV2luZG93XCI7XG5pbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gXCIuLi8uLi9tYWdpY19udW1iZXJzXCI7XG5pbXBvcnQge0dvbGRlblN1bn0gZnJvbSBcIi4uLy4uL0dvbGRlblN1blwiO1xuaW1wb3J0IHtJdGVtU2xvdCwgTWFpbkNoYXJ9IGZyb20gXCIuLi8uLi9NYWluQ2hhclwiO1xuaW1wb3J0IHtJdGVtfSBmcm9tIFwiLi4vLi4vSXRlbVwiO1xuaW1wb3J0IHtJdGVtUXVhbnRpdHlNYW5hZ2VyV2luZG93fSBmcm9tIFwiLi9JdGVtUXVhbnRpdHlNYW5hZ2VyV2luZG93XCI7XG5pbXBvcnQge01haW5JdGVtTWVudX0gZnJvbSBcIi4uLy4uL21haW5fbWVudXMvTWFpbkl0ZW1NZW51XCI7XG5pbXBvcnQge0N1cnNvck1hbmFnZXIsIFBvaW50VmFyaWFudHN9IGZyb20gXCIuLi8uLi91dGlscy9DdXJzb3JNYW5hZ2VyXCI7XG5cbmNvbnN0IFdJTl9XSURUSCA9IDEzMjtcbmNvbnN0IFdJTl9IRUlHSFQgPSAzNjtcbmNvbnN0IFdJTl9YID0gMTA0O1xuY29uc3QgV0lOX1kgPSAwO1xuXG5jb25zdCBDSEFSX05BTUVfWCA9IDI3O1xuY29uc3QgQ0hBUl9OQU1FX1kgPSA4O1xuY29uc3QgSVRFTV9OQU1FX1ggPSAyNztcbmNvbnN0IElURU1fTkFNRV9ZID0gQ0hBUl9OQU1FX1kgKyBudW1iZXJzLkZPTlRfU0laRTtcblxuY29uc3QgQUNUSU9OX1RFWFRfWCA9IDg7XG5jb25zdCBBQ1RJT05fVEVYVF9ZID0gSVRFTV9OQU1FX1kgKyBudW1iZXJzLkZPTlRfU0laRTtcblxuY29uc3QgSVRFTV9JQ09OX1ggPSA4O1xuY29uc3QgSVRFTV9JQ09OX1kgPSA4O1xuY29uc3QgU1VCX0lDT05fWCA9IDc7XG5jb25zdCBTVUJfSUNPTl9ZID0gODtcblxuY29uc3QgQU5TV0VSX1ggPSAxMTI7XG5jb25zdCBZRVNfWSA9IDg7XG5jb25zdCBOT19ZID0gMjQ7XG5cbmNvbnN0IENVUlNPUl9YID0gMTk0O1xuY29uc3QgQ1VSU09SX1kxID0gMTI7XG5jb25zdCBDVVJTT1JfWTIgPSAyODtcblxuZXhwb3J0IGNsYXNzIEdpdmVJdGVtV2luZG93IHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6IEdvbGRlblN1bjtcbiAgICBwdWJsaWMgY2xvc2VfY2FsbGJhY2s6IEZ1bmN0aW9uO1xuICAgIHB1YmxpYyBpdGVtX21lbnU6IE1haW5JdGVtTWVudTtcblxuICAgIHB1YmxpYyBpdGVtX29iajogSXRlbVNsb3Q7XG4gICAgcHVibGljIGl0ZW06IEl0ZW07XG4gICAgcHVibGljIGNoYXI6IE1haW5DaGFyO1xuICAgIHB1YmxpYyBhbnN3ZXJfaW5kZXg6IG51bWJlcjtcblxuICAgIHB1YmxpYyB3aW5kb3dfb3BlbjogYm9vbGVhbjtcbiAgICBwdWJsaWMgd2luZG93X2FjdGl2ZTogYm9vbGVhbjtcbiAgICBwdWJsaWMgY2hvb3NpbmdfY2hhcjogYm9vbGVhbjtcbiAgICBwdWJsaWMgYXNraW5nX2Zvcl9lcXVpcDogYm9vbGVhbjtcblxuICAgIHB1YmxpYyBiYXNlX3dpbmRvdzogV2luZG93O1xuICAgIHB1YmxpYyBpdGVtX3F1YW50aXR5X21hbmFnZXJfd2luZG93OiBJdGVtUXVhbnRpdHlNYW5hZ2VyV2luZG93O1xuICAgIHB1YmxpYyBncm91cDogUGhhc2VyLkdyb3VwO1xuXG4gICAgcHVibGljIGFjdGlvbl90ZXh0OiBUZXh0T2JqO1xuICAgIHB1YmxpYyB5ZXNfdGV4dDogVGV4dE9iajtcbiAgICBwdWJsaWMgbm9fdGV4dDogVGV4dE9iajtcblxuICAgIHB1YmxpYyBpY29uX3Nwcml0ZTogUGhhc2VyLlNwcml0ZTtcbiAgICBwdWJsaWMgY2hhcl9uYW1lOiBUZXh0T2JqO1xuICAgIHB1YmxpYyBpdGVtX25hbWU6IFRleHRPYmo7XG4gICAgcHVibGljIGVxdWlwX3Nwcml0ZTogUGhhc2VyLlNwcml0ZTtcbiAgICBwdWJsaWMgaXRlbV9jb3VudF9zcHJpdGU6IFBoYXNlci5CaXRtYXBUZXh0O1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZTogUGhhc2VyLkdhbWUsIGRhdGE6IEdvbGRlblN1bikge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgdGhpcy5pdGVtX21lbnUgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuaXRlbV9vYmogPSBudWxsO1xuICAgICAgICB0aGlzLml0ZW0gPSBudWxsO1xuICAgICAgICB0aGlzLmNoYXIgPSBudWxsO1xuICAgICAgICB0aGlzLmFuc3dlcl9pbmRleCA9IDA7XG5cbiAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jaG9vc2luZ19jaGFyID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYXNraW5nX2Zvcl9lcXVpcCA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cgPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgV0lOX1gsIFdJTl9ZLCBXSU5fV0lEVEgsIFdJTl9IRUlHSFQpO1xuICAgICAgICB0aGlzLml0ZW1fcXVhbnRpdHlfbWFuYWdlcl93aW5kb3cgPSBudWxsO1xuICAgICAgICB0aGlzLmdyb3VwID0gdGhpcy5nYW1lLmFkZC5ncm91cCgpO1xuXG4gICAgICAgIHRoaXMuY2hhcl9uYW1lID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBDSEFSX05BTUVfWCwgQ0hBUl9OQU1FX1kpO1xuICAgICAgICB0aGlzLml0ZW1fbmFtZSA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgSVRFTV9OQU1FX1gsIElURU1fTkFNRV9ZKTtcbiAgICAgICAgdGhpcy5hY3Rpb25fdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgQUNUSU9OX1RFWFRfWCwgQUNUSU9OX1RFWFRfWSk7XG5cbiAgICAgICAgdGhpcy55ZXNfdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJZZXNcIiwgQU5TV0VSX1gsIFlFU19ZKTtcbiAgICAgICAgdGhpcy5ub190ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIk5vXCIsIEFOU1dFUl9YLCBOT19ZKTtcbiAgICAgICAgdGhpcy55ZXNfdGV4dC50ZXh0LmFscGhhID0gdGhpcy5ub190ZXh0LnRleHQuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLnllc190ZXh0LnNoYWRvdy5hbHBoYSA9IHRoaXMubm9fdGV4dC5zaGFkb3cuYWxwaGEgPSAwO1xuXG4gICAgICAgIHRoaXMuaWNvbl9zcHJpdGUgPSBudWxsO1xuICAgICAgICB0aGlzLmVxdWlwX3Nwcml0ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuaXRlbV9jb3VudF9zcHJpdGUgPSBudWxsO1xuICAgIH1cblxuICAgIGNoYW5nZV9hbnN3ZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLmFuc3dlcl9pbmRleCA9PT0gWUVTX1kpIHRoaXMuc2V0X2Fuc3dlcl9pbmRleChOT19ZKTtcbiAgICAgICAgZWxzZSB0aGlzLnNldF9hbnN3ZXJfaW5kZXgoWUVTX1kpO1xuICAgIH1cblxuICAgIHNldF9hbnN3ZXJfaW5kZXgoaW5kZXg6IG51bWJlcikge1xuICAgICAgICB0aGlzLmFuc3dlcl9pbmRleCA9IGluZGV4O1xuXG4gICAgICAgIGxldCBjdXJzb3JfeCA9IENVUlNPUl9YO1xuICAgICAgICBsZXQgY3Vyc29yX3kgPSBpbmRleCA9PT0gWUVTX1kgPyBDVVJTT1JfWTEgOiBDVVJTT1JfWTI7XG5cbiAgICAgICAgbGV0IHR3ZWVuX2NvbmZpZyA9IHt0eXBlOiBDdXJzb3JNYW5hZ2VyLkN1cnNvclR3ZWVucy5QT0lOVCwgdmFyaWFudDogUG9pbnRWYXJpYW50cy5OT1JNQUx9O1xuICAgICAgICB0aGlzLmRhdGEuY3Vyc29yX21hbmFnZXIubW92ZV90byh7eDogY3Vyc29yX3gsIHk6IGN1cnNvcl95fSwge2FuaW1hdGU6IGZhbHNlLCB0d2Vlbl9jb25maWc6IHR3ZWVuX2NvbmZpZ30pO1xuICAgIH1cblxuICAgIHVwZGF0ZV9wb3NpdGlvbigpIHtcbiAgICAgICAgdGhpcy5ncm91cC54ID0gdGhpcy5nYW1lLmNhbWVyYS54ICsgV0lOX1g7XG4gICAgICAgIHRoaXMuZ3JvdXAueSA9IHRoaXMuZ2FtZS5jYW1lcmEueSArIFdJTl9ZO1xuICAgIH1cblxuICAgIHNldF9oZWFkZXIoKSB7XG4gICAgICAgIHRoaXMudW5zZXRfaGVhZGVyKCk7XG4gICAgICAgIHRoaXMuaWNvbl9zcHJpdGUgPSB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChcbiAgICAgICAgICAgIElURU1fSUNPTl9YLFxuICAgICAgICAgICAgSVRFTV9JQ09OX1ksXG4gICAgICAgICAgICBcIml0ZW1zX2ljb25zXCIsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICB0aGlzLml0ZW0ua2V5X25hbWVcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmNoYXIubmFtZSwgdGhpcy5jaGFyX25hbWUsIENIQVJfTkFNRV9YLCBDSEFSX05BTUVfWSk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5pdGVtLm5hbWUsIHRoaXMuaXRlbV9uYW1lLCBJVEVNX05BTUVfWCwgSVRFTV9OQU1FX1kpO1xuICAgICAgICBpZiAodGhpcy5jaG9vc2luZ19jaGFyKSB7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiR2l2ZSBpdCB0byB3aG9tP1wiLCB0aGlzLmFjdGlvbl90ZXh0LCBJVEVNX05BTUVfWCwgQUNUSU9OX1RFWFRfWSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5hc2tpbmdfZm9yX2VxdWlwKSB7XG4gICAgICAgICAgICB0aGlzLnllc190ZXh0LnRleHQuYWxwaGEgPSB0aGlzLm5vX3RleHQudGV4dC5hbHBoYSA9IDE7XG4gICAgICAgICAgICB0aGlzLnllc190ZXh0LnNoYWRvdy5hbHBoYSA9IHRoaXMubm9fdGV4dC5zaGFkb3cuYWxwaGEgPSAxO1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChcIkVxdWlwIHRoaXMgaXRlbT9cIiwgdGhpcy5hY3Rpb25fdGV4dCwgQUNUSU9OX1RFWFRfWCwgQUNUSU9OX1RFWFRfWSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lcXVpcF9zcHJpdGUgPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5pdGVtX29iai5lcXVpcHBlZCkge1xuICAgICAgICAgICAgdGhpcy5lcXVpcF9zcHJpdGUgPSB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChcbiAgICAgICAgICAgICAgICBJVEVNX0lDT05fWCArIFNVQl9JQ09OX1gsXG4gICAgICAgICAgICAgICAgSVRFTV9JQ09OX1kgKyBTVUJfSUNPTl9ZLFxuICAgICAgICAgICAgICAgIFwiZXF1aXBwZWRcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLml0ZW1fY291bnRfc3ByaXRlID0gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuaXRlbV9vYmoucXVhbnRpdHkgPiAxKSB7XG4gICAgICAgICAgICB0aGlzLml0ZW1fY291bnRfc3ByaXRlID0gdGhpcy5nYW1lLmFkZC5iaXRtYXBUZXh0KFxuICAgICAgICAgICAgICAgIElURU1fSUNPTl9YICsgU1VCX0lDT05fWCxcbiAgICAgICAgICAgICAgICBJVEVNX0lDT05fWSArIFNVQl9JQ09OX1ksXG4gICAgICAgICAgICAgICAgXCJncy1pdGVtLWJtcC1mb250XCIsXG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtX29iai5xdWFudGl0eS50b1N0cmluZygpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5hZGRfc3ByaXRlX3RvX2dyb3VwKHRoaXMuaXRlbV9jb3VudF9zcHJpdGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdW5zZXRfaGVhZGVyKCkge1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV9mcm9tX2dyb3VwKHRoaXMuaWNvbl9zcHJpdGUpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiXCIsIHRoaXMuY2hhcl9uYW1lLCBDSEFSX05BTUVfWCwgQ0hBUl9OQU1FX1kpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiXCIsIHRoaXMuaXRlbV9uYW1lLCBJVEVNX05BTUVfWCwgSVRFTV9OQU1FX1kpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiXCIsIHRoaXMuYWN0aW9uX3RleHQsIEFDVElPTl9URVhUX1gsIEFDVElPTl9URVhUX1kpO1xuICAgICAgICB0aGlzLnllc190ZXh0LnRleHQuYWxwaGEgPSB0aGlzLm5vX3RleHQudGV4dC5hbHBoYSA9IDA7XG4gICAgICAgIHRoaXMueWVzX3RleHQuc2hhZG93LmFscGhhID0gdGhpcy5ub190ZXh0LnNoYWRvdy5hbHBoYSA9IDA7XG4gICAgICAgIGlmICh0aGlzLmVxdWlwX3Nwcml0ZSkge1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfZnJvbV9ncm91cCh0aGlzLmVxdWlwX3Nwcml0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXRlbV9jb3VudF9zcHJpdGUpIHtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX2Zyb21fZ3JvdXAodGhpcy5pdGVtX2NvdW50X3Nwcml0ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbl9naXZlKGVxdWlwPzogYm9vbGVhbikge1xuICAgICAgICBpZiAoIWVxdWlwKSBlcXVpcCA9IHRoaXMuYW5zd2VyX2luZGV4ID09PSBZRVNfWSA/IHRydWUgOiBmYWxzZTtcblxuICAgICAgICBsZXQgY2hhcnNfbWVudSA9IHRoaXMuaXRlbV9tZW51LmNoYXJzX21lbnU7XG4gICAgICAgIGxldCBkZXN0X2NoYXIgPSBjaGFyc19tZW51LmxpbmVzW2NoYXJzX21lbnUuY3VycmVudF9saW5lXVtjaGFyc19tZW51LnNlbGVjdGVkX2luZGV4XTtcbiAgICAgICAgbGV0IGRlc3RfaXRlbV9vYmogPSB7XG4gICAgICAgICAgICBrZXlfbmFtZTogdGhpcy5pdGVtX29iai5rZXlfbmFtZSxcbiAgICAgICAgICAgIGVxdWlwcGVkOiBlcXVpcCxcbiAgICAgICAgICAgIHF1YW50aXR5OiB0aGlzLml0ZW1fcXVhbnRpdHlfbWFuYWdlcl93aW5kb3cud2luZG93X29wZW5cbiAgICAgICAgICAgICAgICA/IHRoaXMuaXRlbV9xdWFudGl0eV9tYW5hZ2VyX3dpbmRvdy5jaG9vc2VuX3F1YW50aXR5XG4gICAgICAgICAgICAgICAgOiB0aGlzLml0ZW1fb2JqLnF1YW50aXR5LFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0aGlzLml0ZW1fcXVhbnRpdHlfbWFuYWdlcl93aW5kb3cud2luZG93X29wZW4pIHRoaXMuaXRlbV9xdWFudGl0eV9tYW5hZ2VyX3dpbmRvdy5jbG9zZSgpO1xuXG4gICAgICAgIHRoaXMuY2hhci5yZW1vdmVfaXRlbSh0aGlzLml0ZW1fb2JqLCBkZXN0X2l0ZW1fb2JqLnF1YW50aXR5KTtcbiAgICAgICAgZGVzdF9jaGFyLmFkZF9pdGVtKGRlc3RfaXRlbV9vYmoua2V5X25hbWUsIGRlc3RfaXRlbV9vYmoucXVhbnRpdHksIGVxdWlwKTtcblxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiXCIsIHRoaXMuYWN0aW9uX3RleHQsIEFDVElPTl9URVhUX1gsIEFDVElPTl9URVhUX1kpO1xuICAgICAgICB0aGlzLnllc190ZXh0LnRleHQuYWxwaGEgPSB0aGlzLm5vX3RleHQudGV4dC5hbHBoYSA9IDA7XG4gICAgICAgIHRoaXMueWVzX3RleHQuc2hhZG93LmFscGhhID0gdGhpcy5ub190ZXh0LnNoYWRvdy5hbHBoYSA9IDA7XG5cbiAgICAgICAgdGhpcy5pdGVtX21lbnUuaXRlbV9vcHRpb25zX3dpbmRvdy5vcGVuX2FjdGlvbl9tZXNzYWdlX3dpbmRvdyhcIkdpdmVuLlwiLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjaGFyX2luZGV4ID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzLmluZGV4T2YodGhpcy5jaGFyKTtcbiAgICAgICAgICAgIHRoaXMuaXRlbV9tZW51Lml0ZW1fb3B0aW9uc193aW5kb3cuY2xvc2UoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaXRlbV9tZW51Lml0ZW1fb3B0aW9uc193aW5kb3cuY2xvc2VfY2FsbGJhY2sodHJ1ZSwgY2hhcl9pbmRleCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb25fY2hhcmFjdGVyX3NlbGVjdCgpIHtcbiAgICAgICAgdGhpcy5jaG9vc2luZ19jaGFyID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXRlbV9tZW51LmNob29zaW5nX2dpdmVfZGVzdGluYXRpb24gPSBmYWxzZTtcblxuICAgICAgICBsZXQgY2hhcnNfbWVudSA9IHRoaXMuaXRlbV9tZW51LmNoYXJzX21lbnU7XG4gICAgICAgIGxldCBkZXN0X2NoYXIgPSBjaGFyc19tZW51LmxpbmVzW2NoYXJzX21lbnUuY3VycmVudF9saW5lXVtjaGFyc19tZW51LnNlbGVjdGVkX2luZGV4XTtcbiAgICAgICAgdGhpcy5hc2tpbmdfZm9yX2VxdWlwID0gdGhpcy5pdGVtLmVxdWlwYWJsZV9jaGFycy5pbmNsdWRlcyhkZXN0X2NoYXIua2V5X25hbWUpO1xuXG4gICAgICAgIGlmICh0aGlzLmFza2luZ19mb3JfZXF1aXApIHtcbiAgICAgICAgICAgIHRoaXMuc2V0X2hlYWRlcigpO1xuICAgICAgICAgICAgdGhpcy5zZXRfYW5zd2VyX2luZGV4KFlFU19ZKTtcblxuICAgICAgICAgICAgbGV0IGNvbnRyb2xzID0gW1xuICAgICAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLlVQLCBvbl9kb3duOiB0aGlzLmNoYW5nZV9hbnN3ZXIuYmluZCh0aGlzKX0sXG4gICAgICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuRE9XTiwgb25fZG93bjogdGhpcy5jaGFuZ2VfYW5zd2VyLmJpbmQodGhpcyl9LFxuICAgICAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkEsIG9uX2Rvd246IHRoaXMub25fZ2l2ZS5iaW5kKHRoaXMpfSxcbiAgICAgICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5CLCBvbl9kb3duOiB0aGlzLm9uX2dpdmUuYmluZCh0aGlzLCBmYWxzZSl9LFxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5jb250cm9sX21hbmFnZXIuc2V0X2NvbnRyb2woY29udHJvbHMsIHtsb29wX2NvbmZpZ3M6IHt2ZXJ0aWNhbDogdHJ1ZX19KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLml0ZW1fb2JqLnF1YW50aXR5ID4gMSkge1xuICAgICAgICAgICAgICAgIGxldCBkZXN0X2NoYXIgPSBjaGFyc19tZW51LmxpbmVzW2NoYXJzX21lbnUuY3VycmVudF9saW5lXVtjaGFyc19tZW51LnNlbGVjdGVkX2luZGV4XTtcblxuICAgICAgICAgICAgICAgIHRoaXMuaXRlbV9xdWFudGl0eV9tYW5hZ2VyX3dpbmRvdy5vcGVuKHRoaXMuaXRlbV9vYmosIHRoaXMuaXRlbSwgdGhpcy5jaGFyLCB1bmRlZmluZWQsIGRlc3RfY2hhcik7XG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtX3F1YW50aXR5X21hbmFnZXJfd2luZG93LmdyYW50X2NvbnRyb2woKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1fcXVhbnRpdHlfbWFuYWdlcl93aW5kb3cuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaG9vc2luZ19jaGFyYWN0ZXIoKTtcbiAgICAgICAgICAgICAgICB9LCB0aGlzLm9uX2dpdmUuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICB9IGVsc2UgdGhpcy5vbl9naXZlKGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNob29zaW5nX2NoYXJhY3RlcigpIHtcbiAgICAgICAgdGhpcy5jaG9vc2luZ19jaGFyID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zZXRfaGVhZGVyKCk7XG5cbiAgICAgICAgdGhpcy5pdGVtX21lbnUuY2hvb3NpbmdfZ2l2ZV9kZXN0aW5hdGlvbiA9IHRydWU7XG4gICAgICAgIHRoaXMuaXRlbV9tZW51LmNoYXJzX21lbnUuc2VsZWN0X2NoYXIodGhpcy5pdGVtX21lbnUuY2hhcnNfbWVudS5zZWxlY3RlZF9pbmRleCk7XG4gICAgICAgIHRoaXMuaXRlbV9tZW51LmNoYXJzX21lbnUuZ3JhbnRfY29udHJvbCh0aGlzLmNsb3NlLmJpbmQodGhpcyksIHRoaXMub25fY2hhcmFjdGVyX3NlbGVjdC5iaW5kKHRoaXMpKTtcblxuICAgICAgICB0aGlzLml0ZW1fbWVudS5pdGVtX292ZXJ2aWV3X3dpbmRvdy5zaG93KHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgICAgICB0aGlzLml0ZW1fbWVudS5zaGlmdF9pdGVtX292ZXJ2aWV3KHRydWUpO1xuICAgIH1cblxuICAgIG9wZW4oXG4gICAgICAgIGl0ZW1fb2JqOiBJdGVtU2xvdCxcbiAgICAgICAgaXRlbTogSXRlbSxcbiAgICAgICAgY2hhcjogTWFpbkNoYXIsXG4gICAgICAgIGl0ZW1fbWVudTogTWFpbkl0ZW1NZW51LFxuICAgICAgICBjbG9zZV9jYWxsYmFjaz86IEZ1bmN0aW9uLFxuICAgICAgICBvcGVuX2NhbGxiYWNrPzogRnVuY3Rpb25cbiAgICApIHtcbiAgICAgICAgdGhpcy5pdGVtX29iaiA9IGl0ZW1fb2JqO1xuICAgICAgICB0aGlzLml0ZW0gPSBpdGVtO1xuICAgICAgICB0aGlzLmNoYXIgPSBjaGFyO1xuXG4gICAgICAgIHRoaXMuY2hvb3NpbmdfY2hhciA9IGZhbHNlO1xuICAgICAgICB0aGlzLmFza2luZ19mb3JfZXF1aXAgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pdGVtX21lbnUgPSBpdGVtX21lbnU7XG4gICAgICAgIHRoaXMuaXRlbV9xdWFudGl0eV9tYW5hZ2VyX3dpbmRvdyA9IHRoaXMuaXRlbV9tZW51Lml0ZW1fcXVhbnRfd2luO1xuXG4gICAgICAgIHRoaXMuYW5zd2VyX2luZGV4ID0gMDtcbiAgICAgICAgaWYgKHRoaXMuYXNraW5nX2Zvcl9lcXVpcCkge1xuICAgICAgICAgICAgdGhpcy5zZXRfYW5zd2VyX2luZGV4KFlFU19ZKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldF9oZWFkZXIoKTtcbiAgICAgICAgdGhpcy51cGRhdGVfcG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayA9IGNsb3NlX2NhbGxiYWNrO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNob3coKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKG9wZW5fY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBvcGVuX2NhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZhbHNlKTtcblxuICAgICAgICB0aGlzLmNob29zaW5nX2NoYXJhY3RlcigpO1xuICAgIH1cblxuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLmRhdGEuY3Vyc29yX21hbmFnZXIuaGlkZSgpO1xuICAgICAgICB0aGlzLnVuc2V0X2hlYWRlcigpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmNsb3NlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHRoaXMuY2xvc2VfY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBhY3RpdmUoKSB7XG4gICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuZGF0YS5jdXJzb3JfbWFuYWdlci5oaWRlKCk7XG4gICAgfVxuXG4gICAgZGVhY3RpdmUoKSB7XG4gICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRhdGEuY3Vyc29yX21hbmFnZXIuaGlkZSgpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7VGV4dE9iaiwgV2luZG93fSBmcm9tIFwiLi4vLi4vV2luZG93XCI7XG5pbXBvcnQge0l0ZW0sIGl0ZW1fdHlwZXN9IGZyb20gXCIuLi8uLi9JdGVtXCI7XG5pbXBvcnQge2VmZmVjdF90eXBlcywgZWZmZWN0X29wZXJhdG9yc30gZnJvbSBcIi4uLy4uL0VmZmVjdFwiO1xuaW1wb3J0IHtHb2xkZW5TdW59IGZyb20gXCIuLi8uLi9Hb2xkZW5TdW5cIjtcbmltcG9ydCB7SXRlbVNsb3QsIGl0ZW1fZXF1aXBfc2xvdCwgTWFpbkNoYXJ9IGZyb20gXCIuLi8uLi9NYWluQ2hhclwiO1xuaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XG5pbXBvcnQge21haW5fc3RhdHN9IGZyb20gXCIuLi8uLi9QbGF5ZXJcIjtcblxuY29uc3QgQkFTRV9XSU5fV0lEVEggPSAxMDA7XG5jb25zdCBCQVNFX1dJTl9IRUlHSFQgPSA5MjtcbmNvbnN0IEJBU0VfV0lOX1ggPSAwO1xuY29uc3QgQkFTRV9XSU5fWSA9IDQwO1xuY29uc3QgQVJST1dfWCA9IDUzO1xuY29uc3QgQVJST1dfWV9TSElGVCA9IDI7XG5jb25zdCBQUkVWSUVXX1RFWFRfWCA9IDk0O1xuXG50eXBlIEFycm93cyA9IHtcbiAgICBhdHRhY2s6IFBoYXNlci5TcHJpdGUgfCBUZXh0T2JqO1xuICAgIGRlZmVuc2U6IFBoYXNlci5TcHJpdGUgfCBUZXh0T2JqO1xuICAgIGFnaWxpdHk6IFBoYXNlci5TcHJpdGUgfCBUZXh0T2JqO1xufTtcblxuZXhwb3J0IGNsYXNzIFN0YXRzQ2hlY2tXaXRoSXRlbVdpbmRvdyB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOiBHb2xkZW5TdW47XG4gICAgcHVibGljIGNoYXI6IE1haW5DaGFyO1xuICAgIHB1YmxpYyB3aW5kb3dfb3BlbjogYm9vbGVhbjtcbiAgICBwdWJsaWMgeDogbnVtYmVyO1xuICAgIHB1YmxpYyB5OiBudW1iZXI7XG4gICAgcHVibGljIGJhc2Vfd2luZG93OiBXaW5kb3c7XG4gICAgcHVibGljIGF2YXRhcl9ncm91cDogUGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyB4X2F2YXRhcjogbnVtYmVyO1xuICAgIHB1YmxpYyB5X2F2YXRhcjogbnVtYmVyO1xuICAgIHB1YmxpYyBhdmF0YXI6IFBoYXNlci5TcHJpdGU7XG4gICAgcHVibGljIHVwX2Fycm93czogQXJyb3dzO1xuICAgIHB1YmxpYyBkb3duX2Fycm93czogQXJyb3dzO1xuICAgIHB1YmxpYyBwcmV2aWV3X3N0YXRzX3RleHRzOiBBcnJvd3M7XG4gICAgcHVibGljIG5hbWVfdGV4dDogVGV4dE9iajtcbiAgICBwdWJsaWMgbHZfdGV4dDogVGV4dE9iajtcbiAgICBwdWJsaWMgYXR0YWNrX3RleHQ6IFRleHRPYmo7XG4gICAgcHVibGljIGRlZmVuc2VfdGV4dDogVGV4dE9iajtcbiAgICBwdWJsaWMgYWdpbGl0eV90ZXh0OiBUZXh0T2JqO1xuICAgIHB1YmxpYyBpdGVtOiBJdGVtO1xuICAgIHB1YmxpYyBpdGVtX29iajogSXRlbVNsb3Q7XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuY2hhciA9IG51bGw7XG4gICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy54ID0gQkFTRV9XSU5fWDtcbiAgICAgICAgdGhpcy55ID0gQkFTRV9XSU5fWTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCB0aGlzLngsIHRoaXMueSwgQkFTRV9XSU5fV0lEVEgsIEJBU0VfV0lOX0hFSUdIVCk7XG4gICAgICAgIHRoaXMuYXZhdGFyX2dyb3VwID0gZ2FtZS5hZGQuZ3JvdXAoKTtcbiAgICAgICAgdGhpcy5hdmF0YXJfZ3JvdXAuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLnhfYXZhdGFyID0gdGhpcy54ICsgODtcbiAgICAgICAgdGhpcy55X2F2YXRhciA9IHRoaXMueSArIDg7XG4gICAgICAgIHRoaXMuYXZhdGFyID0gbnVsbDtcblxuICAgICAgICB0aGlzLnVwX2Fycm93cyA9IHtcbiAgICAgICAgICAgIFtlZmZlY3RfdHlwZXMuQVRUQUNLXTogdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoQVJST1dfWCwgNDggLSBBUlJPV19ZX1NISUZULCBcInVwX2Fycm93XCIpLFxuICAgICAgICAgICAgW2VmZmVjdF90eXBlcy5ERUZFTlNFXTogdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoQVJST1dfWCwgNjQgLSBBUlJPV19ZX1NISUZULCBcInVwX2Fycm93XCIpLFxuICAgICAgICAgICAgW2VmZmVjdF90eXBlcy5BR0lMSVRZXTogdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoQVJST1dfWCwgODAgLSBBUlJPV19ZX1NISUZULCBcInVwX2Fycm93XCIpLFxuICAgICAgICB9IGFzIEFycm93cztcbiAgICAgICAgdGhpcy5kb3duX2Fycm93cyA9IHtcbiAgICAgICAgICAgIFtlZmZlY3RfdHlwZXMuQVRUQUNLXTogdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoQVJST1dfWCwgNDggLSBBUlJPV19ZX1NISUZULCBcImRvd25fYXJyb3dcIiksXG4gICAgICAgICAgICBbZWZmZWN0X3R5cGVzLkRFRkVOU0VdOiB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChBUlJPV19YLCA2NCAtIEFSUk9XX1lfU0hJRlQsIFwiZG93bl9hcnJvd1wiKSxcbiAgICAgICAgICAgIFtlZmZlY3RfdHlwZXMuQUdJTElUWV06IHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKEFSUk9XX1gsIDgwIC0gQVJST1dfWV9TSElGVCwgXCJkb3duX2Fycm93XCIpLFxuICAgICAgICB9IGFzIEFycm93cztcbiAgICAgICAgdGhpcy5wcmV2aWV3X3N0YXRzX3RleHRzID0ge1xuICAgICAgICAgICAgW2VmZmVjdF90eXBlcy5BVFRBQ0tdOiB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiMFwiLCBQUkVWSUVXX1RFWFRfWCwgNDgsIHRydWUpLFxuICAgICAgICAgICAgW2VmZmVjdF90eXBlcy5ERUZFTlNFXTogdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIjBcIiwgUFJFVklFV19URVhUX1gsIDY0LCB0cnVlKSxcbiAgICAgICAgICAgIFtlZmZlY3RfdHlwZXMuQUdJTElUWV06IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCIwXCIsIFBSRVZJRVdfVEVYVF9YLCA4MCwgdHJ1ZSksXG4gICAgICAgIH0gYXMgQXJyb3dzO1xuICAgICAgICB0aGlzLmhpZGVfYXJyb3dzKCk7XG5cbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIkx2XCIsIDQ4LCAyNCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJBdHRhY2tcIiwgOCwgNDApO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiRGVmZW5zZVwiLCA4LCA1Nik7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJBZ2lsaXR5XCIsIDgsIDcyKTtcblxuICAgICAgICB0aGlzLm5hbWVfdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCIwXCIsIDQwLCA4KTtcbiAgICAgICAgdGhpcy5sdl90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIjBcIiwgODAsIDI0KTtcbiAgICAgICAgdGhpcy5hdHRhY2tfdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCIwXCIsIDQwLCA0OCwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuZGVmZW5zZV90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIjBcIiwgNDAsIDY0LCB0cnVlKTtcbiAgICAgICAgdGhpcy5hZ2lsaXR5X3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiMFwiLCA0MCwgODAsIHRydWUpO1xuICAgIH1cblxuICAgIHVwZGF0ZV9wb3NpdGlvbigpIHtcbiAgICAgICAgdGhpcy5hdmF0YXJfZ3JvdXAueCA9IHRoaXMuZ2FtZS5jYW1lcmEueCArIHRoaXMueF9hdmF0YXI7XG4gICAgICAgIHRoaXMuYXZhdGFyX2dyb3VwLnkgPSB0aGlzLmdhbWUuY2FtZXJhLnkgKyB0aGlzLnlfYXZhdGFyO1xuICAgIH1cblxuICAgIGhpZGUoKSB7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuZ3JvdXAuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLmF2YXRhcl9ncm91cC5hbHBoYSA9IDA7XG4gICAgfVxuXG4gICAgc2hvdygpIHtcbiAgICAgICAgaWYgKCF0aGlzLndpbmRvd19vcGVuKSByZXR1cm47XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuZ3JvdXAuYWxwaGEgPSAxO1xuICAgICAgICB0aGlzLmF2YXRhcl9ncm91cC5hbHBoYSA9IDE7XG4gICAgfVxuXG4gICAgdXBkYXRlX2luZm8oc2V0X2NvbXBhcmVfYXJyb3dzID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuY2hhci5uYW1lLCB0aGlzLm5hbWVfdGV4dCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5jaGFyLmxldmVsLnRvU3RyaW5nKCksIHRoaXMubHZfdGV4dCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5jaGFyLmF0ay50b1N0cmluZygpLCB0aGlzLmF0dGFja190ZXh0KTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmNoYXIuZGVmLnRvU3RyaW5nKCksIHRoaXMuZGVmZW5zZV90ZXh0KTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmNoYXIuYWdpLnRvU3RyaW5nKCksIHRoaXMuYWdpbGl0eV90ZXh0KTtcbiAgICAgICAgaWYgKHRoaXMuYXZhdGFyKSB7XG4gICAgICAgICAgICB0aGlzLmF2YXRhci5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hdmF0YXIgPSB0aGlzLmF2YXRhcl9ncm91cC5jcmVhdGUoMCwgMCwgXCJhdmF0YXJzXCIsIHRoaXMuY2hhci5rZXlfbmFtZSk7XG4gICAgICAgIGlmIChzZXRfY29tcGFyZV9hcnJvd3MpIHtcbiAgICAgICAgICAgIHRoaXMuY29tcGFyZV9pdGVtcygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0X2NvbXBhcmVfYXJyb3dzKGVmZmVjdF90eXBlLCBlcXVpcF9zbG90X3Byb3BlcnR5LCBjdXJyZW50X3N0YXRzX3Byb3BlcnR5LCBjb21wYXJlX3JlbW92aW5nKSB7XG4gICAgICAgIGxldCBlZmZlY3Rfb2JqID0gXy5maW5kKHRoaXMuaXRlbS5lZmZlY3RzLCB7dHlwZTogZWZmZWN0X3R5cGV9KTtcbiAgICAgICAgbGV0IHByZXZpZXdfc3RhdHM7XG4gICAgICAgIGlmIChlZmZlY3Rfb2JqICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGVxdWlwX3Nsb3Rfa2V5X25hbWUgPVxuICAgICAgICAgICAgICAgIHRoaXMuY2hhci5lcXVpcF9zbG90c1tlcXVpcF9zbG90X3Byb3BlcnR5XSA9PT0gbnVsbFxuICAgICAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmNoYXIuZXF1aXBfc2xvdHNbZXF1aXBfc2xvdF9wcm9wZXJ0eV0ua2V5X25hbWU7XG4gICAgICAgICAgICBwcmV2aWV3X3N0YXRzID0gdGhpcy5jaGFyLnByZXZpZXdfc3RhdHNfYnlfZWZmZWN0KGVmZmVjdF90eXBlLCBlZmZlY3Rfb2JqLCBlcXVpcF9zbG90X2tleV9uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jaGFyLmVxdWlwX3Nsb3RzW2VxdWlwX3Nsb3RfcHJvcGVydHldID09PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoZWZmZWN0X29iaiA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZV9wcmV2aWV3X3RleHQocHJldmlld19zdGF0cywgZWZmZWN0X3R5cGUpO1xuICAgICAgICAgICAgdGhpcy51cF9hcnJvd3NbZWZmZWN0X3R5cGVdLmFscGhhID0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGVxdWlwcGVkX2VmZmVjdF9vYmogPSBfLmZpbmQoXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFt0aGlzLmNoYXIuZXF1aXBfc2xvdHNbZXF1aXBfc2xvdF9wcm9wZXJ0eV0ua2V5X25hbWVdLmVmZmVjdHMsXG4gICAgICAgICAgICAgICAge3R5cGU6IGVmZmVjdF90eXBlfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChlcXVpcHBlZF9lZmZlY3Rfb2JqID09PSB1bmRlZmluZWQgJiYgZWZmZWN0X29iaiA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgICAgICAgICBpZiAoZWZmZWN0X29iaiA9PT0gdW5kZWZpbmVkIHx8IGNvbXBhcmVfcmVtb3ZpbmcpIHtcbiAgICAgICAgICAgICAgICBlZmZlY3Rfb2JqID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBlZmZlY3RfdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgcXVhbnRpdHk6IDAsXG4gICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yOiBlZmZlY3Rfb3BlcmF0b3JzLlBMVVMsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBwcmV2aWV3X3N0YXRzID0gdGhpcy5jaGFyLnByZXZpZXdfc3RhdHNfYnlfZWZmZWN0KFxuICAgICAgICAgICAgICAgICAgICBlZmZlY3RfdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgZWZmZWN0X29iaixcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFyLmVxdWlwX3Nsb3RzW2VxdWlwX3Nsb3RfcHJvcGVydHldLmtleV9uYW1lXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRfc3RhdHMgPSB0aGlzLmNoYXJbY3VycmVudF9zdGF0c19wcm9wZXJ0eV07XG4gICAgICAgICAgICBpZiAocHJldmlld19zdGF0cyA+IGN1cnJlbnRfc3RhdHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwX2Fycm93c1tlZmZlY3RfdHlwZV0uYWxwaGEgPSAxO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlX3ByZXZpZXdfdGV4dChwcmV2aWV3X3N0YXRzLCBlZmZlY3RfdHlwZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByZXZpZXdfc3RhdHMgPCBjdXJyZW50X3N0YXRzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kb3duX2Fycm93c1tlZmZlY3RfdHlwZV0uYWxwaGEgPSAxO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlX3ByZXZpZXdfdGV4dChwcmV2aWV3X3N0YXRzLCBlZmZlY3RfdHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVfcHJldmlld190ZXh0KHZhbHVlLCBlZmZlY3RfdHlwZSkge1xuICAgICAgICB0aGlzLnByZXZpZXdfc3RhdHNfdGV4dHNbZWZmZWN0X3R5cGVdLnRleHQuYWxwaGEgPSAxO1xuICAgICAgICB0aGlzLnByZXZpZXdfc3RhdHNfdGV4dHNbZWZmZWN0X3R5cGVdLnNoYWRvdy5hbHBoYSA9IDE7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodmFsdWUudG9TdHJpbmcoKSwgdGhpcy5wcmV2aWV3X3N0YXRzX3RleHRzW2VmZmVjdF90eXBlXSk7XG4gICAgfVxuXG4gICAgaGlkZV9hcnJvd3MoKSB7XG4gICAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLnVwX2Fycm93cykge1xuICAgICAgICAgICAgdGhpcy51cF9hcnJvd3Nba2V5XS5hbHBoYSA9IDA7XG4gICAgICAgICAgICB0aGlzLmRvd25fYXJyb3dzW2tleV0uYWxwaGEgPSAwO1xuICAgICAgICAgICAgdGhpcy5wcmV2aWV3X3N0YXRzX3RleHRzW2tleV0udGV4dC5hbHBoYSA9IDA7XG4gICAgICAgICAgICB0aGlzLnByZXZpZXdfc3RhdHNfdGV4dHNba2V5XS5zaGFkb3cuYWxwaGEgPSAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcGFyZV9pdGVtcyhjb21wYXJlX3JlbW92aW5nID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5oaWRlX2Fycm93cygpO1xuICAgICAgICBpZiAodGhpcy5pdGVtX29iai5lcXVpcHBlZCAmJiAhY29tcGFyZV9yZW1vdmluZykgcmV0dXJuO1xuICAgICAgICBpZiAoIXRoaXMuaXRlbS5lcXVpcGFibGVfY2hhcnMuaW5jbHVkZXModGhpcy5jaGFyLmtleV9uYW1lKSkgcmV0dXJuO1xuICAgICAgICBsZXQgZXF1aXBfc2xvdF9wcm9wZXJ0eSA9IG51bGw7XG4gICAgICAgIHN3aXRjaCAodGhpcy5pdGVtLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgaXRlbV90eXBlcy5XRUFQT05TOlxuICAgICAgICAgICAgICAgIGVxdWlwX3Nsb3RfcHJvcGVydHkgPSBcIndlYXBvblwiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBpdGVtX3R5cGVzLkhFQURfUFJPVEVDVE9SOlxuICAgICAgICAgICAgICAgIGVxdWlwX3Nsb3RfcHJvcGVydHkgPSBcImhlYWRcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgaXRlbV90eXBlcy5DSEVTVF9QUk9URUNUT1I6XG4gICAgICAgICAgICAgICAgZXF1aXBfc2xvdF9wcm9wZXJ0eSA9IFwiY2hlc3RcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgaXRlbV90eXBlcy5BUk1PUjpcbiAgICAgICAgICAgICAgICBlcXVpcF9zbG90X3Byb3BlcnR5ID0gXCJib2R5XCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldF9jb21wYXJlX2Fycm93cyhcbiAgICAgICAgICAgIGVmZmVjdF90eXBlcy5BVFRBQ0ssXG4gICAgICAgICAgICBpdGVtX2VxdWlwX3Nsb3RbdGhpcy5pdGVtLnR5cGVdLFxuICAgICAgICAgICAgbWFpbl9zdGF0cy5BVFRBQ0ssXG4gICAgICAgICAgICBjb21wYXJlX3JlbW92aW5nXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc2V0X2NvbXBhcmVfYXJyb3dzKFxuICAgICAgICAgICAgZWZmZWN0X3R5cGVzLkRFRkVOU0UsXG4gICAgICAgICAgICBpdGVtX2VxdWlwX3Nsb3RbdGhpcy5pdGVtLnR5cGVdLFxuICAgICAgICAgICAgbWFpbl9zdGF0cy5ERUZFTlNFLFxuICAgICAgICAgICAgY29tcGFyZV9yZW1vdmluZ1xuICAgICAgICApO1xuICAgICAgICB0aGlzLnNldF9jb21wYXJlX2Fycm93cyhcbiAgICAgICAgICAgIGVmZmVjdF90eXBlcy5BR0lMSVRZLFxuICAgICAgICAgICAgaXRlbV9lcXVpcF9zbG90W3RoaXMuaXRlbS50eXBlXSxcbiAgICAgICAgICAgIG1haW5fc3RhdHMuQUdJTElUWSxcbiAgICAgICAgICAgIGNvbXBhcmVfcmVtb3ZpbmdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBvcGVuKGNoYXIsIGl0ZW0sIGl0ZW1fb2JqLCBjYWxsYmFjaz8pIHtcbiAgICAgICAgdGhpcy51cGRhdGVfcG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy5hdmF0YXJfZ3JvdXAuYWxwaGEgPSAxO1xuICAgICAgICB0aGlzLmNoYXIgPSBjaGFyO1xuICAgICAgICB0aGlzLml0ZW0gPSBpdGVtO1xuICAgICAgICB0aGlzLml0ZW1fb2JqID0gaXRlbV9vYmo7XG4gICAgICAgIHRoaXMudXBkYXRlX2luZm8oKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zaG93KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2luZG93X29wZW4gPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgY2xvc2UoY2FsbGJhY2s/KSB7XG4gICAgICAgIHRoaXMuYXZhdGFyX2dyb3VwLmFscGhhID0gMDtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5jbG9zZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG59XG4iLCJpbXBvcnQge0NoYXJzUXVpY2tJbmZvRGppbm5XaW5kb3d9IGZyb20gXCIuLi93aW5kb3dzL2RqaW5uL0NoYXJzUXVpY2tJbmZvRGppbm5XaW5kb3dcIjtcbmltcG9ydCB7RGppbm5MaXN0V2luZG93fSBmcm9tIFwiLi4vd2luZG93cy9kamlubi9Eamlubkxpc3RXaW5kb3dcIjtcbmltcG9ydCB7RGppbm5BY3Rpb25XaW5kb3d9IGZyb20gXCIuLi93aW5kb3dzL2RqaW5uL0RqaW5uQWN0aW9uV2luZG93XCI7XG5pbXBvcnQge0dvbGRlblN1bn0gZnJvbSBcIi4uL0dvbGRlblN1blwiO1xuXG5leHBvcnQgY2xhc3MgTWFpbkRqaW5uTWVudSB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOiBHb2xkZW5TdW47XG4gICAgcHVibGljIGNsb3NlX2NhbGxiYWNrOiBGdW5jdGlvbjtcblxuICAgIHB1YmxpYyBpc19vcGVuOiBib29sZWFuO1xuICAgIHB1YmxpYyBzZWxlY3RlZF9jaGFyX2luZGV4OiBudW1iZXI7XG5cbiAgICBwdWJsaWMgY2hhcnNfcXVpY2tfaW5mb193aW5kb3c6IENoYXJzUXVpY2tJbmZvRGppbm5XaW5kb3c7XG4gICAgcHVibGljIGRqaW5uX2FjdGlvbl93aW5kb3c6IERqaW5uQWN0aW9uV2luZG93O1xuICAgIHB1YmxpYyBkamlubmlfbGlzdF93aW5kb3c6IERqaW5uTGlzdFdpbmRvdztcblxuICAgIGNvbnN0cnVjdG9yKGdhbWU6IFBoYXNlci5HYW1lLCBkYXRhOiBHb2xkZW5TdW4pIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5pc19vcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCA9IDA7XG5cbiAgICAgICAgdGhpcy5jaGFyc19xdWlja19pbmZvX3dpbmRvdyA9IG5ldyBDaGFyc1F1aWNrSW5mb0RqaW5uV2luZG93KHRoaXMuZ2FtZSk7XG4gICAgICAgIHRoaXMuZGppbm5fYWN0aW9uX3dpbmRvdyA9IG5ldyBEamlubkFjdGlvbldpbmRvdyh0aGlzLmdhbWUpO1xuICAgICAgICB0aGlzLmRqaW5uaV9saXN0X3dpbmRvdyA9IG5ldyBEamlubkxpc3RXaW5kb3codGhpcy5nYW1lLCB0aGlzLmRhdGEpO1xuICAgIH1cblxuICAgIG9wZW5fbWVudShjbG9zZV9jYWxsYmFjaz86IEZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBjbG9zZV9jYWxsYmFjaztcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4ID0gMDtcblxuICAgICAgICB0aGlzLmNoYXJzX3F1aWNrX2luZm9fd2luZG93Lm9wZW4odGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleF0pO1xuICAgICAgICB0aGlzLmRqaW5uaV9saXN0X3dpbmRvdy5vcGVuKFxuICAgICAgICAgICAgdGhpcy5jaGFyc19xdWlja19pbmZvX3dpbmRvdyxcbiAgICAgICAgICAgIHRoaXMuZGppbm5fYWN0aW9uX3dpbmRvdyxcbiAgICAgICAgICAgIHRoaXMuY2xvc2VfbWVudS5iaW5kKHRoaXMpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZGppbm5fYWN0aW9uX3dpbmRvdy5vcGVuKCk7XG5cbiAgICAgICAgdGhpcy5pc19vcGVuID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBjbG9zZV9tZW51KGNsb3NlX21lbnVfYmVsb3c6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICB0aGlzLmRhdGEuY3Vyc29yX21hbmFnZXIuaGlkZSgpO1xuICAgICAgICB0aGlzLmRhdGEuY29udHJvbF9tYW5hZ2VyLnJlc2V0KCk7XG4gICAgICAgIHRoaXMuaXNfb3BlbiA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuY2hhcnNfcXVpY2tfaW5mb193aW5kb3cuY2xvc2UoKTtcbiAgICAgICAgaWYgKHRoaXMuZGppbm5pX2xpc3Rfd2luZG93LndpbmRvd19vcGVuKSB0aGlzLmRqaW5uaV9saXN0X3dpbmRvdy5jbG9zZSgpO1xuICAgICAgICB0aGlzLmRqaW5uX2FjdGlvbl93aW5kb3cuY2xvc2UoKTtcblxuICAgICAgICBpZiAodGhpcy5jbG9zZV9jYWxsYmFjayAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayhjbG9zZV9tZW51X2JlbG93KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7VGV4dE9iaiwgV2luZG93fSBmcm9tIFwiLi4vLi4vV2luZG93XCI7XG5pbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gXCIuLi8uLi9tYWdpY19udW1iZXJzXCI7XG5pbXBvcnQge01haW5DaGFyfSBmcm9tIFwiLi4vLi4vTWFpbkNoYXJcIjtcblxuY29uc3QgQkFTRV9XSU5fV0lEVEggPSAxMDA7XG5jb25zdCBCQVNFX1dJTl9IRUlHSFQgPSAzNjtcbmNvbnN0IEJBU0VfV0lOX1ggPSAwO1xuY29uc3QgQkFTRV9XSU5fWSA9IDA7XG5jb25zdCBOQU1FX1ggPSA4O1xuY29uc3QgTkFNRV9ZID0gODtcbmNvbnN0IENMQVNTX1kgPSBOQU1FX1kgKyBudW1iZXJzLkZPTlRfU0laRTtcbmNvbnN0IExWX1ggPSA1NjtcbmNvbnN0IExWX1kgPSA4O1xuY29uc3QgTFZfTlVNQkVSX1JJR0hUX1ggPSA5NDtcblxuZXhwb3J0IGNsYXNzIENoYXJzUXVpY2tJbmZvRGppbm5XaW5kb3cge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcblxuICAgIHB1YmxpYyBjaGFyOiBNYWluQ2hhcjtcbiAgICBwdWJsaWMgd2luZG93X29wZW46IGJvb2xlYW47XG4gICAgcHVibGljIHg6IG51bWJlcjtcbiAgICBwdWJsaWMgeTogbnVtYmVyO1xuXG4gICAgcHVibGljIGJhc2Vfd2luZG93OiBXaW5kb3c7XG4gICAgcHVibGljIGNoYXJfbmFtZTogVGV4dE9iajtcbiAgICBwdWJsaWMgY2hhcl9jbGFzczogVGV4dE9iajtcbiAgICBwdWJsaWMgbGV2ZWxfbnVtYmVyOiBUZXh0T2JqO1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZSkge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuXG4gICAgICAgIHRoaXMuY2hhciA9IG51bGw7XG4gICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy54ID0gQkFTRV9XSU5fWDtcbiAgICAgICAgdGhpcy55ID0gQkFTRV9XSU5fWTtcblxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93ID0gbmV3IFdpbmRvdyh0aGlzLmdhbWUsIHRoaXMueCwgdGhpcy55LCBCQVNFX1dJTl9XSURUSCwgQkFTRV9XSU5fSEVJR0hUKTtcbiAgICAgICAgdGhpcy5jaGFyX25hbWUgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIE5BTUVfWCwgTkFNRV9ZKTtcbiAgICAgICAgdGhpcy5jaGFyX2NsYXNzID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBOQU1FX1gsIENMQVNTX1kpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiTHZcIiwgTFZfWCwgTFZfWSk7XG4gICAgICAgIHRoaXMubGV2ZWxfbnVtYmVyID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBMVl9OVU1CRVJfUklHSFRfWCwgTFZfWSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgdXBkYXRlX3RleHQoKSB7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5jaGFyLm5hbWUsIHRoaXMuY2hhcl9uYW1lKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmNoYXIuY2xhc3MubmFtZSwgdGhpcy5jaGFyX2NsYXNzKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmNoYXIubGV2ZWwudG9TdHJpbmcoKSwgdGhpcy5sZXZlbF9udW1iZXIpO1xuICAgIH1cblxuICAgIHNldF9jaGFyKGNoYXI6IE1haW5DaGFyKSB7XG4gICAgICAgIHRoaXMuY2hhciA9IGNoYXI7XG4gICAgICAgIHRoaXMudXBkYXRlX3RleHQoKTtcbiAgICB9XG5cbiAgICBvcGVuKGNoYXI6IE1haW5DaGFyLCBjYWxsYmFjaz86IEZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMuY2hhciA9IGNoYXI7XG4gICAgICAgIHRoaXMudXBkYXRlX3RleHQoKTtcblxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNob3coKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IHRydWU7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBjbG9zZShjYWxsYmFjaz86IEZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY2xvc2UoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmYWxzZSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtUZXh0T2JqLCBXaW5kb3d9IGZyb20gXCIuLi8uLi9XaW5kb3dcIjtcbmltcG9ydCB7ZGppbm5fc3RhdHVzLCBkamlubl9mb250X2NvbG9ycywgRGppbm59IGZyb20gXCIuLi8uLi9EamlublwiO1xuaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tIFwiLi4vLi4vbWFnaWNfbnVtYmVyc1wiO1xuaW1wb3J0IHtiYXNlX2FjdGlvbnMsIGNhcGl0YWxpemUsIGNoYW5nZV9icmlnaHRuZXNzLCBkaXJlY3Rpb25zLCBlbGVtZW50cywgcmV2ZXJzZV9kaXJlY3Rpb25zfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcbmltcG9ydCB7RGppbm5Nb2RlSGVhZGVyV2luZG93fSBmcm9tIFwiLi9Eamlubk1vZGVIZWFkZXJXaW5kb3dcIjtcbmltcG9ydCB7RGppbm5DaGFyU3RhdHNXaW5kb3d9IGZyb20gXCIuL0RqaW5uQ2hhclN0YXRzV2luZG93XCI7XG5pbXBvcnQge0RqaW5uUHN5bmVyZ3lXaW5kb3d9IGZyb20gXCIuL0RqaW5uUHN5bmVyZ3lXaW5kb3dcIjtcbmltcG9ydCB7R29sZGVuU3VufSBmcm9tIFwiLi4vLi4vR29sZGVuU3VuXCI7XG5pbXBvcnQge0RqaW5uQWN0aW9uV2luZG93fSBmcm9tIFwiLi9EamlubkFjdGlvbldpbmRvd1wiO1xuaW1wb3J0IHtDaGFyc1F1aWNrSW5mb0RqaW5uV2luZG93fSBmcm9tIFwiLi9DaGFyc1F1aWNrSW5mb0RqaW5uV2luZG93XCI7XG5cbmNvbnN0IFdJTl9XSURUSCA9IDIzNjtcbmNvbnN0IFdJTl9IRUlHSFQgPSAxMTY7XG5jb25zdCBXSU5fWCA9IDA7XG5jb25zdCBXSU5fWSA9IDQwO1xuXG5jb25zdCBDSEFSX1hfUEFERElORyA9IDMyO1xuY29uc3QgQ0hBUl9ZX1BBRERJTkcgPSAyMztcbmNvbnN0IENIQVJfWF9CRVRXRUVOID0gNTg7XG5jb25zdCBDSEFSU19QRVJfUEFHRSA9IDQ7XG5cbmNvbnN0IEhJR0hMSUdIVF9IRUlHSFQgPSA4O1xuY29uc3QgSElHSExJR0hUX1dJRFRIID0gNDg7XG5jb25zdCBISUdITElHSFRfWF9QQURESU5HID0gMTY7XG5jb25zdCBISUdITElHSFRfWV9QQURESU5HID0gMjQ7XG5cbmNvbnN0IERKSU5OX05BTUVfWF9QQURESU5HID0gMjQ7XG5jb25zdCBESklOTl9OQU1FX1lfUEFERElORyA9IDI0O1xuY29uc3QgU1RBUl9YX1BBRERJTkcgPSBISUdITElHSFRfWF9QQURESU5HICsgMTtcbmNvbnN0IFNUQVJfWV9QQURESU5HID0gSElHSExJR0hUX1lfUEFERElORyArIDE7XG5cbmNvbnN0IERKSU5OX05BTUVfQkVUV0VFTiA9IDU4O1xuY29uc3QgREpJTk5fREVTQ1JJUFRJT05fWCA9IDg7XG5jb25zdCBESklOTl9ERVNDUklQVElPTl9ZID0gMTA0O1xuY29uc3QgREpJTk5fU1BSSVRFX1ggPSA1MDtcbmNvbnN0IERKSU5OX0NIQVJfV0lOX1NUQVRTX1JJR0hUX1ggPSAxMjA7XG5cbmNvbnN0IENVUlNPUl9YID0gMDtcbmNvbnN0IENVUlNPUl9ZID0gNjg7XG5jb25zdCBDVVJTT1JfVEVYVF9YID0gMDtcbmNvbnN0IENVUlNPUl9URVhUX1kgPSA2MDtcbmNvbnN0IENPTF9HQVAgPSA1ODtcbmNvbnN0IExJTkVfR0FQID0gODtcblxuY29uc3QgVklFV19TVEFURVMgPSB7XG4gICAgU1RBVFM6IDAsXG4gICAgVEhJU19DSEFSOiAxLFxuICAgIE5FWFRfQ0hBUjogMixcbn07XG5cbmV4cG9ydCBjbGFzcyBEamlubkxpc3RXaW5kb3cge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgZGF0YTogR29sZGVuU3VuO1xuICAgIHB1YmxpYyBjbG9zZV9jYWxsYmFjazogRnVuY3Rpb247XG5cbiAgICBwdWJsaWMgYmFzZV93aW5kb3c6IFdpbmRvdztcbiAgICBwdWJsaWMgZ3JvdXA6IFBoYXNlci5Hcm91cDtcbiAgICBwdWJsaWMgY2hhcnNfc3ByaXRlc19ncm91cDogUGhhc2VyLkdyb3VwO1xuXG4gICAgcHVibGljIHdpbmRvd19vcGVuOiBib29sZWFuO1xuICAgIHB1YmxpYyB3aW5kb3dfYWN0aXZlOiBib29sZWFuO1xuICAgIHB1YmxpYyBzZWxlY3RlZF9jaGFyX2luZGV4OiBudW1iZXI7XG4gICAgcHVibGljIHNlbGVjdGVkX2RqaW5uX2luZGV4OiBudW1iZXI7XG4gICAgcHVibGljIGFjdGlvbl90ZXh0X3NlbGVjdGVkOiBib29sZWFuO1xuICAgIHB1YmxpYyBwYWdlX2luZGV4OiBudW1iZXI7XG5cbiAgICBwdWJsaWMgY2hhcnNfc3ByaXRlczoge1xuICAgICAgICBbY2hhcl9rZXlfbmFtZTogc3RyaW5nXTogUGhhc2VyLlNwcml0ZTtcbiAgICB9O1xuICAgIHB1YmxpYyBkamlubnNfc3ByaXRlczoge1xuICAgICAgICBbZWxlbWVudDogc3RyaW5nXTogUGhhc2VyLlNwcml0ZTtcbiAgICB9W107XG4gICAgcHVibGljIGRqaW5uX2Rlc2NyaXB0aW9uOiBUZXh0T2JqO1xuXG4gICAgcHVibGljIHBhZ2VfbnVtYmVyX2Jhcl9oaWdobGlnaHQ6IFBoYXNlci5HcmFwaGljcztcbiAgICBwdWJsaWMgb25fYWN0aW9uX2Jhcl9oaWdobGlnaHQ6IFBoYXNlci5HcmFwaGljcztcblxuICAgIHB1YmxpYyBzaXplczogbnVtYmVyW107XG4gICAgcHVibGljIGRqaW5uX25hbWVzOiBUZXh0T2JqW11bXTtcbiAgICBwdWJsaWMgYWN0aXZlX2RqaW5uX3Nwcml0ZTogUGhhc2VyLlNwcml0ZTtcblxuICAgIHB1YmxpYyBkamlubl9zdGF0dXNfY2hhbmdlX2hlYWRlcl93aW5kb3c6IERqaW5uTW9kZUhlYWRlcldpbmRvdztcbiAgICBwdWJsaWMgZGppbm5fY2hhcl9zdGF0c193aW5kb3dfbGVmdDogRGppbm5DaGFyU3RhdHNXaW5kb3c7XG4gICAgcHVibGljIGRqaW5uX2NoYXJfc3RhdHNfd2luZG93X3JpZ2h0OiBEamlubkNoYXJTdGF0c1dpbmRvdztcbiAgICBwdWJsaWMgZGppbm5fcHN5bmVyZ3lfd2luZG93OiBEamlublBzeW5lcmd5V2luZG93O1xuICAgIHB1YmxpYyBkamlubl9hY3Rpb25fd2luZG93OiBEamlubkFjdGlvbldpbmRvdztcbiAgICBwdWJsaWMgY2hhcnNfcXVpY2tfaW5mb193aW5kb3c6IENoYXJzUXVpY2tJbmZvRGppbm5XaW5kb3c7XG5cbiAgICBwdWJsaWMgc2V0dGluZ19kamlubl9zdGF0dXM6IGJvb2xlYW47XG4gICAgcHVibGljIHNldHRpbmdfZGppbm5fc3RhdHVzX2NoYXJfaW5kZXg6IG51bWJlcjtcbiAgICBwdWJsaWMgc2V0dGluZ19kamlubl9zdGF0dXNfZGppbm5faW5kZXg6IG51bWJlcjtcblxuICAgIHB1YmxpYyBkamlubmlfc3RhdHVzX3RleHRzOiBUZXh0T2JqW107XG4gICAgcHVibGljIHN0YXJzOiBQaGFzZXIuU3ByaXRlW11bXTtcblxuICAgIHB1YmxpYyB2aWV3X3N0YXRlOiBudW1iZXI7XG4gICAgcHVibGljIGNoYW5naW5nX2RqaW5uX3N0YXR1czogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWU6IFBoYXNlci5HYW1lLCBkYXRhOiBHb2xkZW5TdW4pIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBXSU5fWCwgV0lOX1ksIFdJTl9XSURUSCwgV0lOX0hFSUdIVCk7XG4gICAgICAgIHRoaXMuZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLmNoYXJzX3Nwcml0ZXNfZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XG4gICAgICAgIHRoaXMuZ3JvdXAuYWRkKHRoaXMuY2hhcnNfc3ByaXRlc19ncm91cCk7XG5cbiAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4ID0gMDtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9kamlubl9pbmRleCA9IDA7XG4gICAgICAgIHRoaXMuYWN0aW9uX3RleHRfc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wYWdlX2luZGV4ID0gMDtcblxuICAgICAgICB0aGlzLmNoYXJzX3Nwcml0ZXMgPSB7fTtcbiAgICAgICAgdGhpcy5kamlubnNfc3ByaXRlcyA9IFtdO1xuICAgICAgICB0aGlzLmRqaW5uX2Rlc2NyaXB0aW9uID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBESklOTl9ERVNDUklQVElPTl9YLCBESklOTl9ERVNDUklQVElPTl9ZKTtcblxuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyX2Jhcl9oaWdobGlnaHQgPSB0aGlzLmdldF9oaWdobGlnaHRfYmFyKCk7XG4gICAgICAgIHRoaXMub25fYWN0aW9uX2Jhcl9oaWdobGlnaHQgPSB0aGlzLmdldF9oaWdobGlnaHRfYmFyKCk7XG4gICAgICAgIHRoaXMub25fYWN0aW9uX2Jhcl9oaWdobGlnaHQuYWxwaGEgPSAwO1xuXG4gICAgICAgIHRoaXMuc2l6ZXMgPSBbXTtcbiAgICAgICAgdGhpcy5kamlubl9uYW1lcyA9IFtdO1xuICAgICAgICB0aGlzLmFjdGl2ZV9kamlubl9zcHJpdGUgPSBudWxsO1xuICAgICAgICB0aGlzLmRqaW5uX3N0YXR1c19jaGFuZ2VfaGVhZGVyX3dpbmRvdyA9IG5ldyBEamlubk1vZGVIZWFkZXJXaW5kb3codGhpcy5nYW1lLCB0aGlzLmRhdGEpO1xuICAgICAgICB0aGlzLmRqaW5uX2NoYXJfc3RhdHNfd2luZG93X2xlZnQgPSBuZXcgRGppbm5DaGFyU3RhdHNXaW5kb3codGhpcy5nYW1lKTtcbiAgICAgICAgdGhpcy5kamlubl9jaGFyX3N0YXRzX3dpbmRvd19yaWdodCA9IG5ldyBEamlubkNoYXJTdGF0c1dpbmRvdyh0aGlzLmdhbWUsIERKSU5OX0NIQVJfV0lOX1NUQVRTX1JJR0hUX1gpO1xuICAgICAgICB0aGlzLmRqaW5uX3BzeW5lcmd5X3dpbmRvdyA9IG5ldyBEamlublBzeW5lcmd5V2luZG93KHRoaXMuZ2FtZSwgdGhpcy5kYXRhKTtcblxuICAgICAgICB0aGlzLmluaXRfZGppbm5fc3ByaXRlcygpO1xuICAgICAgICB0aGlzLmluaXRfZGppbm5pX3N0YXR1c190ZXh0cygpO1xuICAgIH1cblxuICAgIGdldF9oaWdobGlnaHRfYmFyKCkge1xuICAgICAgICBjb25zdCBiYXJfaGlnaGxpZ2h0ID0gdGhpcy5nYW1lLmFkZC5ncmFwaGljcygwLCAwKTtcbiAgICAgICAgYmFyX2hpZ2hsaWdodC5ibGVuZE1vZGUgPSBQSVhJLmJsZW5kTW9kZXMuU0NSRUVOO1xuICAgICAgICB0aGlzLmdyb3VwLmFkZChiYXJfaGlnaGxpZ2h0KTtcblxuICAgICAgICBiYXJfaGlnaGxpZ2h0LmJlZ2luRmlsbCh0aGlzLmJhc2Vfd2luZG93LmNvbG9yLCAxKTtcbiAgICAgICAgYmFyX2hpZ2hsaWdodC5kcmF3UmVjdCgwLCAwLCBISUdITElHSFRfV0lEVEgsIEhJR0hMSUdIVF9IRUlHSFQpO1xuICAgICAgICBiYXJfaGlnaGxpZ2h0LmVuZEZpbGwoKTtcblxuICAgICAgICByZXR1cm4gYmFyX2hpZ2hsaWdodDtcbiAgICB9XG5cbiAgICB1cGRhdGVfcG9zaXRpb24oKSB7XG4gICAgICAgIHRoaXMuZ3JvdXAueCA9IHRoaXMuZ2FtZS5jYW1lcmEueCArIFdJTl9YO1xuICAgICAgICB0aGlzLmdyb3VwLnkgPSB0aGlzLmdhbWUuY2FtZXJhLnkgKyBXSU5fWTtcbiAgICB9XG5cbiAgICBuZXh0X2NoYXJhY3RlcigpIHtcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCA9PT0gdGhpcy5zaXplcy5sZW5ndGggLSAxKSByZXR1cm47XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1cyAmJlxuICAgICAgICAgICAgKHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCArIDEgPT09IHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXNfY2hhcl9pbmRleCB8fFxuICAgICAgICAgICAgICAgICh0aGlzLnNpemVzW3RoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCArIDFdIDwgdGhpcy5zaXplc1t0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzX2NoYXJfaW5kZXhdICYmXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9uX3RleHRfc2VsZWN0ZWQpKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCA9IHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCArIDE7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdF9hY3Rpb25fdGV4dCgpO1xuICAgICAgICAgICAgdGhpcy5vbl9jaGFyX2NoYW5nZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuYWN0aW9uX3RleHRfc2VsZWN0ZWQpIHRoaXMuc2VsZWN0ZWRfZGppbm5faW5kZXggPSAwO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RfZGppbm4odGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4ICsgMSwgdGhpcy5zZWxlY3RlZF9kamlubl9pbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcmV2aW91c19jaGFyYWN0ZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXggPT09IDApIHJldHVybjtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzICYmXG4gICAgICAgICAgICAodGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4IC0gMSA9PT0gdGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1c19jaGFyX2luZGV4IHx8XG4gICAgICAgICAgICAgICAgKHRoaXMuc2l6ZXNbdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4IC0gMV0gPCB0aGlzLnNpemVzW3RoaXMuc2V0dGluZ19kamlubl9zdGF0dXNfY2hhcl9pbmRleF0gJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3Rpb25fdGV4dF9zZWxlY3RlZCkpXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4ID0gdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4IC0gMTtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0X2FjdGlvbl90ZXh0KCk7XG4gICAgICAgICAgICB0aGlzLm9uX2NoYXJfY2hhbmdlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hY3Rpb25fdGV4dF9zZWxlY3RlZCkgdGhpcy5zZWxlY3RlZF9kamlubl9pbmRleCA9IDA7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdF9kamlubih0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXggLSAxLCB0aGlzLnNlbGVjdGVkX2RqaW5uX2luZGV4KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5leHRfZGppbm5pKCkge1xuICAgICAgICBpZiAodGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1cyAmJiB0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXggPT09IHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXNfY2hhcl9pbmRleCkgcmV0dXJuO1xuICAgICAgICBpZiAodGhpcy5zaXplc1t0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXhdIDw9IDEpIHJldHVybjtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzICYmXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2RqaW5uX2luZGV4ID09PSB0aGlzLnNpemVzW3RoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleF0gLSAxICYmXG4gICAgICAgICAgICAhdGhpcy5hY3Rpb25fdGV4dF9zZWxlY3RlZCAmJlxuICAgICAgICAgICAgdGhpcy5zaXplc1t0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXhdIDwgdGhpcy5zaXplc1t0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzX2NoYXJfaW5kZXhdXG4gICAgICAgIClcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0X2FjdGlvbl90ZXh0KCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuYWN0aW9uX3RleHRfc2VsZWN0ZWQgfHwgdGhpcy5zZWxlY3RlZF9kamlubl9pbmRleCA9PT0gdGhpcy5zaXplc1t0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXhdIC0gMSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0X2RqaW5uKHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCwgMCwgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgdGhpcy5zZWxlY3RfZGppbm4odGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4LCB0aGlzLnNlbGVjdGVkX2RqaW5uX2luZGV4ICsgMSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcmV2aW91c19kamlubmkoKSB7XG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzICYmIHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCA9PT0gdGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1c19jaGFyX2luZGV4KSByZXR1cm47XG4gICAgICAgIGlmICh0aGlzLnNpemVzW3RoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleF0gPD0gMSkgcmV0dXJuO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXMgJiZcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfZGppbm5faW5kZXggPT09IDAgJiZcbiAgICAgICAgICAgICF0aGlzLmFjdGlvbl90ZXh0X3NlbGVjdGVkICYmXG4gICAgICAgICAgICB0aGlzLnNpemVzW3RoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleF0gPCB0aGlzLnNpemVzW3RoaXMuc2V0dGluZ19kamlubl9zdGF0dXNfY2hhcl9pbmRleF1cbiAgICAgICAgKVxuICAgICAgICAgICAgdGhpcy5zZWxlY3RfYWN0aW9uX3RleHQoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hY3Rpb25fdGV4dF9zZWxlY3RlZCB8fCB0aGlzLnNlbGVjdGVkX2RqaW5uX2luZGV4ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RfZGppbm4odGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4LCB0aGlzLnNpemVzW3RoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleF0gLSAxLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB0aGlzLnNlbGVjdF9kamlubih0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXgsIHRoaXMuc2VsZWN0ZWRfZGppbm5faW5kZXggLSAxKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNlbGVjdF9hY3Rpb25fdGV4dCgpIHtcbiAgICAgICAgdGhpcy5hY3Rpb25fdGV4dF9zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuc2V0X2hpZ2hsaWdodF9iYXIoKTtcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCA9PT0gdGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1c19jaGFyX2luZGV4KSB7XG4gICAgICAgICAgICB0aGlzLnNldF9kamlubl9zcHJpdGUoKTtcbiAgICAgICAgfSBlbHNlIHRoaXMuYWN0aXZlX2RqaW5uX3Nwcml0ZS5hbHBoYSA9IDA7XG5cbiAgICAgICAgdGhpcy5kYXRhLmN1cnNvcl9tYW5hZ2VyLmNsZWFyX3R3ZWVucygpO1xuICAgICAgICB0aGlzLm1vdmVfY3Vyc29yKENVUlNPUl9URVhUX1ggKyBDT0xfR0FQICogdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4LCBDVVJTT1JfVEVYVF9ZKTtcbiAgICB9XG5cbiAgICBzZWxlY3RfZGppbm4oY2hhcjogbnVtYmVyLCBpbmRleDogbnVtYmVyLCBmb3JjZV9jaGFuZ2U6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICB0aGlzLmFjdGlvbl90ZXh0X3NlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkX2RqaW5uX2luZGV4ICE9PSBpbmRleCB8fCBmb3JjZV9jaGFuZ2UpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfZGppbm5faW5kZXggPSBpbmRleDtcbiAgICAgICAgICAgIHRoaXMub25fZGppbm5fY2hhbmdlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4ICE9PSBjaGFyIHx8IGZvcmNlX2NoYW5nZSkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4ID0gY2hhcjtcbiAgICAgICAgICAgIHRoaXMub25fY2hhcl9jaGFuZ2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZGF0YS5jdXJzb3JfbWFuYWdlci5jbGVhcl90d2VlbnMoKTtcbiAgICAgICAgdGhpcy5tb3ZlX2N1cnNvcihDVVJTT1JfWCArIGNoYXIgKiBDT0xfR0FQLCBDVVJTT1JfWSArIGluZGV4ICogTElORV9HQVApO1xuICAgIH1cblxuICAgIGluaXRfZGppbm5fc3ByaXRlcygpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBDSEFSU19QRVJfUEFHRTsgKytpKSB7XG4gICAgICAgICAgICB0aGlzLmRqaW5uc19zcHJpdGVzLnB1c2goe30pO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gZWxlbWVudHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbGVtID0gZWxlbWVudHNba2V5XTtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbSA9PT0gZWxlbWVudHMuTk9fRUxFTUVOVCkgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB4ID0gREpJTk5fU1BSSVRFX1ggKyBpICogQ0hBUl9YX0JFVFdFRU47XG4gICAgICAgICAgICAgICAgdGhpcy5kamlubnNfc3ByaXRlc1tpXVtlbGVtXSA9IHRoaXMuY2hhcnNfc3ByaXRlc19ncm91cC5jcmVhdGUoeCwgQ0hBUl9ZX1BBRERJTkcsIGVsZW0gKyBcIl9kamlubl9zZXRcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5kamlubnNfc3ByaXRlc1tpXVtlbGVtXS5hbmNob3Iuc2V0VG8oMC41LCAxLjApO1xuICAgICAgICAgICAgICAgIHRoaXMuZGppbm5zX3Nwcml0ZXNbaV1bZWxlbV0uc2NhbGUueCA9IC0xO1xuICAgICAgICAgICAgICAgIHRoaXMuZGppbm5zX3Nwcml0ZXNbaV1bZWxlbV0uYWxwaGEgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaW5pdF9kamlubmlfc3RhdHVzX3RleHRzKCkge1xuICAgICAgICB0aGlzLmRqaW5uaV9zdGF0dXNfdGV4dHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBDSEFSU19QRVJfUEFHRTsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCB4ID0gU1RBUl9YX1BBRERJTkcgLSAxICsgaSAqIERKSU5OX05BTUVfQkVUV0VFTjtcbiAgICAgICAgICAgIGNvbnN0IHkgPSAxNjtcbiAgICAgICAgICAgIHRoaXMuZGppbm5pX3N0YXR1c190ZXh0cy5wdXNoKHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgeCwgeSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0X2RqaW5uX3Nwcml0ZSh0d2VlbjogYm9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgY29uc3QgdGhpc19jaGFyID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleF07XG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzICYmIHRoaXMuc2VsZWN0ZWRfZGppbm5faW5kZXggPT09IHRoaXNfY2hhci5kamlubmkubGVuZ3RoKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgdGhpc19kamlubiA9IHRoaXMuZGF0YS5pbmZvLmRqaW5uaV9saXN0W3RoaXNfY2hhci5kamlubmlbdGhpcy5zZWxlY3RlZF9kamlubl9pbmRleF1dO1xuICAgICAgICBpZiAodGhpcy5hY3RpdmVfZGppbm5fc3ByaXRlICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZV9kamlubl9zcHJpdGUuYWxwaGEgPSAwO1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVfZGppbm5fc3ByaXRlLmFuaW1hdGlvbnMuc3RvcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdGhpc19zcHJpdGUgPSB0aGlzLmRqaW5uc19zcHJpdGVzW3RoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleF1bdGhpc19kamlubi5lbGVtZW50XTtcbiAgICAgICAgdGhpcy5hY3RpdmVfZGppbm5fc3ByaXRlID0gdGhpc19zcHJpdGU7XG4gICAgICAgIGlmICh0d2Vlbikge1xuICAgICAgICAgICAgdGhpc19zcHJpdGUuc2NhbGUuc2V0VG8oMCwgMCk7XG4gICAgICAgICAgICB0aGlzLmdhbWUuYWRkXG4gICAgICAgICAgICAgICAgLnR3ZWVuKHRoaXNfc3ByaXRlLnNjYWxlKVxuICAgICAgICAgICAgICAgIC50byh7eDogLTEsIHk6IDF9LCBQaGFzZXIuVGltZXIuUVVBUlRFUiA+PiAxLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXNfc3ByaXRlLmFscGhhID0gMTtcbiAgICAgICAgbGV0IGFjdGlvbjogc3RyaW5nLCBkaXJlY3Rpb246IHN0cmluZztcbiAgICAgICAgc3dpdGNoICh0aGlzX2RqaW5uLnN0YXR1cykge1xuICAgICAgICAgICAgY2FzZSBkamlubl9zdGF0dXMuUkVDT1ZFUlk6XG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uID0gXCJsZWZ0XCI7XG4gICAgICAgICAgICBjYXNlIGRqaW5uX3N0YXR1cy5TVEFOREJZOlxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9IFwiZG93blwiO1xuICAgICAgICAgICAgICAgIGFjdGlvbiA9IFwic3RhbmRieVwiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBkamlubl9zdGF0dXMuU0VUOlxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9IFwiZG93blwiO1xuICAgICAgICAgICAgICAgIGFjdGlvbiA9IFwic2V0XCI7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRhdGEuaW5mby5kamlubmlfc3ByaXRlc1t0aGlzX2RqaW5uLmVsZW1lbnRdLnNldEFuaW1hdGlvbih0aGlzX3Nwcml0ZSwgYWN0aW9uKTtcbiAgICAgICAgdGhpc19zcHJpdGUuYW5pbWF0aW9ucy5wbGF5KGFjdGlvbiArIFwiX1wiICsgZGlyZWN0aW9uKTtcbiAgICB9XG5cbiAgICBsb2FkX3BhZ2UoKSB7XG4gICAgICAgIHRoaXMuc2l6ZXMgPSBuZXcgQXJyYXkodGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzLmxlbmd0aCk7XG4gICAgICAgIHRoaXMuZGppbm5fbmFtZXMgPSBbXTtcbiAgICAgICAgdGhpcy5zdGFycyA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgQ0hBUlNfUEVSX1BBR0U7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgcGFydHlfaW5kZXggPSB0aGlzLnBhZ2VfaW5kZXggKiBDSEFSU19QRVJfUEFHRSArIGk7XG5cbiAgICAgICAgICAgIGlmIChwYXJ0eV9pbmRleCA+PSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnMubGVuZ3RoKSBjb250aW51ZTtcbiAgICAgICAgICAgIGNvbnN0IHRoaXNfY2hhciA9IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1twYXJ0eV9pbmRleF07XG4gICAgICAgICAgICBjb25zdCBjaGFyX2tleV9uYW1lID0gdGhpc19jaGFyLmtleV9uYW1lO1xuXG4gICAgICAgICAgICBpZiAoIShjaGFyX2tleV9uYW1lIGluIHRoaXMuY2hhcnNfc3ByaXRlcykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhY3Rpb25fa2V5ID0gdGhpc19jaGFyLnNwcml0ZV9iYXNlLmdldEFjdGlvbktleShiYXNlX2FjdGlvbnMuSURMRSk7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFyc19zcHJpdGVzW2NoYXJfa2V5X25hbWVdID0gdGhpcy5jaGFyc19zcHJpdGVzX2dyb3VwLmNyZWF0ZSgwLCAwLCBhY3Rpb25fa2V5KTtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJzX3Nwcml0ZXNbY2hhcl9rZXlfbmFtZV0uYW5jaG9yLnNldFRvKDAuNSwgMS4wKTtcbiAgICAgICAgICAgICAgICB0aGlzX2NoYXIuc3ByaXRlX2Jhc2Uuc2V0QW5pbWF0aW9uKHRoaXMuY2hhcnNfc3ByaXRlc1tjaGFyX2tleV9uYW1lXSwgYmFzZV9hY3Rpb25zLklETEUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBhbmltYXRpb25fa2V5ID0gdGhpc19jaGFyLnNwcml0ZV9iYXNlLmdldEFuaW1hdGlvbktleShcbiAgICAgICAgICAgICAgICBiYXNlX2FjdGlvbnMuSURMRSxcbiAgICAgICAgICAgICAgICByZXZlcnNlX2RpcmVjdGlvbnNbZGlyZWN0aW9ucy5kb3duXVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuY2hhcnNfc3ByaXRlc1tjaGFyX2tleV9uYW1lXS5hbmltYXRpb25zLnBsYXkoYW5pbWF0aW9uX2tleSk7XG4gICAgICAgICAgICBjb25zdCB4ID0gQ0hBUl9YX1BBRERJTkcgKyBpICogQ0hBUl9YX0JFVFdFRU47XG4gICAgICAgICAgICB0aGlzLmNoYXJzX3Nwcml0ZXNbY2hhcl9rZXlfbmFtZV0ueCA9IHg7XG4gICAgICAgICAgICB0aGlzLmNoYXJzX3Nwcml0ZXNbY2hhcl9rZXlfbmFtZV0ueSA9IENIQVJfWV9QQURESU5HO1xuICAgICAgICAgICAgdGhpcy5jaGFyc19zcHJpdGVzW2NoYXJfa2V5X25hbWVdLmFscGhhID0gMTtcblxuICAgICAgICAgICAgdGhpcy5kamlubl9uYW1lcy5wdXNoKFtdKTtcbiAgICAgICAgICAgIHRoaXMuc3RhcnMucHVzaChbXSk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZV9kamlubl9saXN0KGkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlX2RqaW5uX2xpc3QoY2hhcl9pbmRleDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuZGppbm5fbmFtZXNbY2hhcl9pbmRleF0uZm9yRWFjaChzcHJpdGUgPT4ge1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfdGV4dChzcHJpdGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zdGFyc1tjaGFyX2luZGV4XS5mb3JFYWNoKHNwcml0ZSA9PiB7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV9mcm9tX2dyb3VwKHNwcml0ZSwgdHJ1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHRoaXNfY2hhciA9IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1tjaGFyX2luZGV4XTtcbiAgICAgICAgY29uc3QgY2hhcl9kamlubmkgPSB0aGlzX2NoYXIuZGppbm5pO1xuICAgICAgICBsZXQgdGhpc19kamlubl9uYW1lcyA9IFtdO1xuICAgICAgICBsZXQgc3RhcnMgPSBbXTtcblxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNoYXJfZGppbm5pLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICBjb25zdCB0aGlzX2RqaW5uID0gdGhpcy5kYXRhLmluZm8uZGppbm5pX2xpc3RbY2hhcl9kamlubmlbal1dO1xuICAgICAgICAgICAgY29uc3Qgc3Rhcl94ID0gU1RBUl9YX1BBRERJTkcgKyBjaGFyX2luZGV4ICogREpJTk5fTkFNRV9CRVRXRUVOO1xuICAgICAgICAgICAgY29uc3Qgc3Rhcl95ID0gU1RBUl9ZX1BBRERJTkcgKyBqICogbnVtYmVycy5GT05UX1NJWkU7XG4gICAgICAgICAgICBzdGFycy5wdXNoKHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKHN0YXJfeCwgc3Rhcl95LCB0aGlzX2RqaW5uLmVsZW1lbnQgKyBcIl9zdGFyXCIpKTtcblxuICAgICAgICAgICAgY29uc3QgZGppbm5feCA9IERKSU5OX05BTUVfWF9QQURESU5HICsgY2hhcl9pbmRleCAqIERKSU5OX05BTUVfQkVUV0VFTjtcbiAgICAgICAgICAgIGNvbnN0IGRqaW5uX3kgPSBESklOTl9OQU1FX1lfUEFERElORyArIGogKiBudW1iZXJzLkZPTlRfU0laRTtcbiAgICAgICAgICAgIGxldCBjb2xvcjtcblxuICAgICAgICAgICAgc3dpdGNoICh0aGlzX2RqaW5uLnN0YXR1cykge1xuICAgICAgICAgICAgICAgIGNhc2UgZGppbm5fc3RhdHVzLlNFVDpcbiAgICAgICAgICAgICAgICAgICAgY29sb3IgPSBkamlubl9mb250X2NvbG9yc1tkamlubl9zdGF0dXMuU0VUXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBkamlubl9zdGF0dXMuU1RBTkRCWTpcbiAgICAgICAgICAgICAgICAgICAgY29sb3IgPSBkamlubl9mb250X2NvbG9yc1tkamlubl9zdGF0dXMuU1RBTkRCWV07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgZGppbm5fc3RhdHVzLlJFQ09WRVJZOlxuICAgICAgICAgICAgICAgICAgICBjb2xvciA9IGRqaW5uX2ZvbnRfY29sb3JzW2RqaW5uX3N0YXR1cy5SRUNPVkVSWV07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZGppbm5fbmFtZSA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICAgICAgdGhpc19kamlubi5uYW1lLFxuICAgICAgICAgICAgICAgIGRqaW5uX3gsXG4gICAgICAgICAgICAgICAgZGppbm5feSxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICBjb2xvclxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXNfZGppbm5fbmFtZXMucHVzaChkamlubl9uYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2l6ZXNbY2hhcl9pbmRleF0gPSBjaGFyX2RqaW5uaS5sZW5ndGg7XG4gICAgICAgIHRoaXMuZGppbm5fbmFtZXNbY2hhcl9pbmRleF0gPSB0aGlzX2RqaW5uX25hbWVzO1xuICAgICAgICB0aGlzLnN0YXJzW2NoYXJfaW5kZXhdID0gc3RhcnM7XG4gICAgfVxuXG4gICAgdW5zZXRfcGFnZSgpIHtcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMuY2hhcnNfc3ByaXRlcykge1xuICAgICAgICAgICAgdGhpcy5jaGFyc19zcHJpdGVzW2tleV0uYW5pbWF0aW9ucy5zdG9wKCk7XG4gICAgICAgICAgICB0aGlzLmNoYXJzX3Nwcml0ZXNba2V5XS5hbHBoYSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfZnJvbV9ncm91cCgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGppbm5fbmFtZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWVzID0gdGhpcy5kamlubl9uYW1lc1tpXTtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbmFtZXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV90ZXh0KG5hbWVzW2pdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldF9oaWdobGlnaHRfYmFyKCkge1xuICAgICAgICBpZiAodGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1cyAmJiB0aGlzLmFjdGlvbl90ZXh0X3NlbGVjdGVkKSB7XG4gICAgICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyX2Jhcl9oaWdobGlnaHQuYWxwaGEgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wYWdlX251bWJlcl9iYXJfaGlnaGxpZ2h0LmFscGhhID0gMTtcbiAgICAgICAgICAgIHRoaXMucGFnZV9udW1iZXJfYmFyX2hpZ2hsaWdodC54ID0gSElHSExJR0hUX1hfUEFERElORyArIHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCAqIERKSU5OX05BTUVfQkVUV0VFTjtcbiAgICAgICAgICAgIHRoaXMucGFnZV9udW1iZXJfYmFyX2hpZ2hsaWdodC55ID0gSElHSExJR0hUX1lfUEFERElORyArIHRoaXMuc2VsZWN0ZWRfZGppbm5faW5kZXggKiBudW1iZXJzLkZPTlRfU0laRTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1cykge1xuICAgICAgICAgICAgdGhpcy5vbl9hY3Rpb25fYmFyX2hpZ2hsaWdodC5hbHBoYSA9IDE7XG4gICAgICAgICAgICB0aGlzLm9uX2FjdGlvbl9iYXJfaGlnaGxpZ2h0LnggPVxuICAgICAgICAgICAgICAgIEhJR0hMSUdIVF9YX1BBRERJTkcgKyB0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzX2NoYXJfaW5kZXggKiBESklOTl9OQU1FX0JFVFdFRU47XG4gICAgICAgICAgICB0aGlzLm9uX2FjdGlvbl9iYXJfaGlnaGxpZ2h0LnkgPVxuICAgICAgICAgICAgICAgIEhJR0hMSUdIVF9ZX1BBRERJTkcgKyB0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzX2RqaW5uX2luZGV4ICogbnVtYmVycy5GT05UX1NJWkU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm9uX2FjdGlvbl9iYXJfaGlnaGxpZ2h0LmFscGhhID0gMDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZV9kamlubl9kZXNjcmlwdGlvbigpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1cyAmJlxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9kamlubl9pbmRleCA9PT0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleF0uZGppbm5pLmxlbmd0aFxuICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoXCJcIiwgdGhpcy5kamlubl9kZXNjcmlwdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB0aGlzX2NoYXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IHRoaXNfZGppbm4gPSB0aGlzLmRhdGEuaW5mby5kamlubmlfbGlzdFt0aGlzX2NoYXIuZGppbm5pW3RoaXMuc2VsZWN0ZWRfZGppbm5faW5kZXhdXTtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGhpc19kamlubi5kZXNjcmlwdGlvbiwgdGhpcy5kamlubl9kZXNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRfYWN0aW9uX3RleHQoKSB7XG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzKSB7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB0aGlzX2NoYXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IHRoaXNfZGppbm4gPSB0aGlzLmRhdGEuaW5mby5kamlubmlfbGlzdFt0aGlzX2NoYXIuZGppbm5pW3RoaXMuc2VsZWN0ZWRfZGppbm5faW5kZXhdXTtcbiAgICAgICAgICAgIHRoaXMuZGppbm5fYWN0aW9uX3dpbmRvdy5zZXRfYWN0aW9uX3RleHQodGhpc19kamlubi5zdGF0dXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25fY2hhcl9jaGFuZ2UoKSB7XG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzICYmIHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCA9PT0gdGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1c19jaGFyX2luZGV4KSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2RqaW5uX2luZGV4ID0gdGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1c19kamlubl9pbmRleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkX2RqaW5uX2luZGV4ID49IHRoaXMuc2l6ZXNbdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4XSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfZGppbm5faW5kZXggPSB0aGlzLnNpemVzW3RoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleF0gLSAxO1xuICAgICAgICAgICAgICAgIHRoaXMubW92ZV9jdXJzb3IoXG4gICAgICAgICAgICAgICAgICAgIENVUlNPUl9YICsgdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4ICogQ09MX0dBUCxcbiAgICAgICAgICAgICAgICAgICAgQ1VSU09SX1kgKyB0aGlzLnNlbGVjdGVkX2RqaW5uX2luZGV4ICogTElORV9HQVBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRfaGlnaGxpZ2h0X2JhcigpO1xuICAgICAgICBjb25zdCB0aGlzX2NoYXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4XTtcbiAgICAgICAgdGhpcy5jaGFyc19xdWlja19pbmZvX3dpbmRvdy5zZXRfY2hhcih0aGlzX2NoYXIpO1xuXG4gICAgICAgIHRoaXMuc2V0X2FjdGlvbl90ZXh0KCk7XG4gICAgICAgIHRoaXMudXBkYXRlX2RqaW5uX2Rlc2NyaXB0aW9uKCk7XG4gICAgICAgIHRoaXMuc2V0X2RqaW5uX3Nwcml0ZSgpO1xuICAgIH1cblxuICAgIG9uX2RqaW5uX2NoYW5nZSgpIHtcbiAgICAgICAgdGhpcy5zZXRfaGlnaGxpZ2h0X2JhcigpO1xuICAgICAgICB0aGlzLnNldF9hY3Rpb25fdGV4dCgpO1xuICAgICAgICB0aGlzLnVwZGF0ZV9kamlubl9kZXNjcmlwdGlvbigpO1xuICAgICAgICB0aGlzLnNldF9kamlubl9zcHJpdGUoKTtcbiAgICB9XG5cbiAgICBtb3ZlX2N1cnNvcih4X3BvczogbnVtYmVyLCB5X3BvczogbnVtYmVyLCBvbl9jb21wbGV0ZT86IEZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMuZGF0YS5jdXJzb3JfbWFuYWdlci5tb3ZlX3RvKHt4OiB4X3BvcywgeTogeV9wb3N9LCB7YW5pbWF0ZTogZmFsc2V9LCBvbl9jb21wbGV0ZSk7XG4gICAgfVxuXG4gICAgZ3JhbnRfY29udHJvbChvbl9jYW5jZWw6IEZ1bmN0aW9uLCBvbl9zZWxlY3Q6IEZ1bmN0aW9uLCBvbl9jaGFuZ2VfZGppbm5fc3RhdHVzPzogRnVuY3Rpb24pIHtcbiAgICAgICAgbGV0IGNvbnRyb2xzID0gW1xuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuTEVGVCwgb25fZG93bjogdGhpcy5wcmV2aW91c19jaGFyYWN0ZXIuYmluZCh0aGlzKX0sXG4gICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5SSUdIVCwgb25fZG93bjogdGhpcy5uZXh0X2NoYXJhY3Rlci5iaW5kKHRoaXMpfSxcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLlVQLCBvbl9kb3duOiB0aGlzLnByZXZpb3VzX2RqaW5uaS5iaW5kKHRoaXMpfSxcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkRPV04sIG9uX2Rvd246IHRoaXMubmV4dF9kamlubmkuYmluZCh0aGlzKX0sXG4gICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5BLCBvbl9kb3duOiBvbl9zZWxlY3R9LFxuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuQiwgb25fZG93bjogb25fY2FuY2VsfSxcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLlIsIG9uX2Rvd246IG9uX2NoYW5nZV9kamlubl9zdGF0dXN9LFxuICAgICAgICBdO1xuICAgICAgICB0aGlzLmRhdGEuY29udHJvbF9tYW5hZ2VyLnNldF9jb250cm9sKGNvbnRyb2xzLCB7bG9vcF9jb25maWdzOiB7dmVydGljYWw6IHRydWUsIGhvcml6b250YWw6IHRydWV9fSk7XG4gICAgfVxuXG4gICAgZGFya2VuX2ZvbnRfY29sb3IoZGFya2VuID0gdHJ1ZSkge1xuICAgICAgICBjb25zdCB0aGlzX2NoYXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1c19jaGFyX2luZGV4XTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGppbm5fbmFtZXNbdGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1c19jaGFyX2luZGV4XS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgdGhpc19kamlubiA9IHRoaXMuZGF0YS5pbmZvLmRqaW5uaV9saXN0W3RoaXNfY2hhci5kamlubmlbaV1dO1xuICAgICAgICAgICAgY29uc3QgY29sb3IgPSBkYXJrZW5cbiAgICAgICAgICAgICAgICA/IGNoYW5nZV9icmlnaHRuZXNzKGRqaW5uX2ZvbnRfY29sb3JzW3RoaXNfZGppbm4uc3RhdHVzXSwgMC43KVxuICAgICAgICAgICAgICAgIDogZGppbm5fZm9udF9jb2xvcnNbdGhpc19kamlubi5zdGF0dXNdO1xuXG4gICAgICAgICAgICBpZiAoZGFya2VuICYmIGkgPT09IHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXNfZGppbm5faW5kZXgpIGNvbnRpbnVlO1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dF9jb2xvcihjb2xvciwgdGhpcy5kamlubl9uYW1lc1t0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzX2NoYXJfaW5kZXhdW2ldKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldF9kamlubl9vcGVyYXRpb24oKSB7XG4gICAgICAgIGNvbnN0IHRoaXNfY2hhciA9IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzX2NoYXJfaW5kZXhdO1xuICAgICAgICBjb25zdCB0aGlzX2RqaW5uID0gdGhpcy5kYXRhLmluZm8uZGppbm5pX2xpc3RbdGhpc19jaGFyLmRqaW5uaVt0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzX2RqaW5uX2luZGV4XV07XG5cbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXNfY2hhcl9pbmRleCAhPT0gdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4KSB7XG4gICAgICAgICAgICBjb25zdCBuZXh0X2NoYXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4XTtcbiAgICAgICAgICAgIGxldCB0aGlzX3N0YXR1c2VzOiBkamlubl9zdGF0dXNbXSxcbiAgICAgICAgICAgICAgICBuZXh0X3N0YXR1c2VzOiBkamlubl9zdGF0dXNbXSxcbiAgICAgICAgICAgICAgICB0aGlzX2RqaW5uaTogRGppbm5bXSxcbiAgICAgICAgICAgICAgICBuZXh0X2RqaW5uaTogRGppbm5bXTtcbiAgICAgICAgICAgIGxldCBhY3Rpb25fdGV4dDogc3RyaW5nLCBuZXh0X2RqaW5uOiBEamlubjtcblxuICAgICAgICAgICAgaWYgKHRoaXMuYWN0aW9uX3RleHRfc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzX3N0YXR1c2VzID0gW3RoaXNfZGppbm4uc3RhdHVzID09PSBkamlubl9zdGF0dXMuU1RBTkRCWSA/IGRqaW5uX3N0YXR1cy5BTlkgOiBkamlubl9zdGF0dXMuU1RBTkRCWV07XG4gICAgICAgICAgICAgICAgbmV4dF9zdGF0dXNlcyA9IFt0aGlzX2RqaW5uLnN0YXR1cyA9PT0gZGppbm5fc3RhdHVzLlNUQU5EQlkgPyBkamlubl9zdGF0dXMuQU5ZIDogdGhpc19kamlubi5zdGF0dXNdO1xuICAgICAgICAgICAgICAgIHRoaXNfZGppbm5pID0gW3RoaXNfZGppbm5dO1xuICAgICAgICAgICAgICAgIG5leHRfZGppbm5pID0gW3RoaXNfZGppbm5dO1xuICAgICAgICAgICAgICAgIGFjdGlvbl90ZXh0ID0gXCJHaXZlXCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5leHRfZGppbm4gPSB0aGlzLmRhdGEuaW5mby5kamlubmlfbGlzdFtuZXh0X2NoYXIuZGppbm5pW3RoaXMuc2VsZWN0ZWRfZGppbm5faW5kZXhdXTtcbiAgICAgICAgICAgICAgICB0aGlzX3N0YXR1c2VzID0gW1xuICAgICAgICAgICAgICAgICAgICBuZXh0X2RqaW5uLnN0YXR1cyA9PT0gZGppbm5fc3RhdHVzLlNUQU5EQlkgPyBkamlubl9zdGF0dXMuQU5ZIDogbmV4dF9kamlubi5zdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgIHRoaXNfZGppbm4uc3RhdHVzID09PSBkamlubl9zdGF0dXMuU1RBTkRCWSA/IGRqaW5uX3N0YXR1cy5BTlkgOiBkamlubl9zdGF0dXMuU1RBTkRCWSxcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIG5leHRfc3RhdHVzZXMgPSBbXG4gICAgICAgICAgICAgICAgICAgIHRoaXNfZGppbm4uc3RhdHVzID09PSBkamlubl9zdGF0dXMuU1RBTkRCWSA/IGRqaW5uX3N0YXR1cy5BTlkgOiB0aGlzX2RqaW5uLnN0YXR1cyxcbiAgICAgICAgICAgICAgICAgICAgbmV4dF9kamlubi5zdGF0dXMgPT09IGRqaW5uX3N0YXR1cy5TVEFOREJZID8gZGppbm5fc3RhdHVzLkFOWSA6IGRqaW5uX3N0YXR1cy5TVEFOREJZLFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgdGhpc19kamlubmkgPSBbbmV4dF9kamlubiwgdGhpc19kamlubl07XG4gICAgICAgICAgICAgICAgbmV4dF9kamlubmkgPSBbdGhpc19kamlubiwgbmV4dF9kamlubl07XG4gICAgICAgICAgICAgICAgYWN0aW9uX3RleHQgPSBcIlRyYWRlXCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZGppbm5fY2hhcl9zdGF0c193aW5kb3dfbGVmdC5vcGVuKHRoaXNfY2hhciwgdGhpc19kamlubmksIHRoaXNfc3RhdHVzZXMsIGFjdGlvbl90ZXh0KTtcbiAgICAgICAgICAgIHRoaXMuZGppbm5fY2hhcl9zdGF0c193aW5kb3dfcmlnaHQub3BlbihuZXh0X2NoYXIsIG5leHRfZGppbm5pLCBuZXh0X3N0YXR1c2VzLCBhY3Rpb25fdGV4dCk7XG5cbiAgICAgICAgICAgIHRoaXMuZGppbm5fY2hhcl9zdGF0c193aW5kb3dfcmlnaHQuYmFzZV93aW5kb3cudXBkYXRlX3Bvc2l0aW9uKHt4OiBESklOTl9DSEFSX1dJTl9TVEFUU19SSUdIVF9YfSk7XG4gICAgICAgICAgICB0aGlzLmRqaW5uX3N0YXR1c19jaGFuZ2VfaGVhZGVyX3dpbmRvdy5vcGVuKFxuICAgICAgICAgICAgICAgIFt0aGlzX2NoYXIsIG5leHRfY2hhcl0sXG4gICAgICAgICAgICAgICAgbmV4dF9kamlubmksXG4gICAgICAgICAgICAgICAgdGhpc19zdGF0dXNlcyxcbiAgICAgICAgICAgICAgICBhY3Rpb25fdGV4dFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgdGhpcy5kZWFjdGl2YXRlKCk7XG4gICAgICAgICAgICB0aGlzLnZpZXdfc3RhdGUgPSBWSUVXX1NUQVRFUy5TVEFUUztcblxuICAgICAgICAgICAgdGhpcy5kamlubl9wc3luZXJneV93aW5kb3cub3BlbihcbiAgICAgICAgICAgICAgICB0aGlzX2NoYXIsXG4gICAgICAgICAgICAgICAgdGhpc19kamlubmksXG4gICAgICAgICAgICAgICAgdGhpc19zdGF0dXNlcyxcbiAgICAgICAgICAgICAgICAoZXhlY3V0ZV9vcGVyYXRpb246IGJvb2xlYW4pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kamlubl9zdGF0dXNfY2hhbmdlX2hlYWRlcl93aW5kb3cuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kamlubl9jaGFyX3N0YXRzX3dpbmRvd19sZWZ0LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGppbm5fY2hhcl9zdGF0c193aW5kb3dfcmlnaHQuY2xvc2UoKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZXhlY3V0ZV9vcGVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb25fdGV4dCA9PT0gXCJUcmFkZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc19jaGFyLnJlcGxhY2VfZGppbm4odGhpc19kamlubi5rZXlfbmFtZSwgbmV4dF9kamlubi5rZXlfbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dF9jaGFyLnJlcGxhY2VfZGppbm4obmV4dF9kamlubi5rZXlfbmFtZSwgdGhpc19kamlubi5rZXlfbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbl90ZXh0ID09PSBcIkdpdmVcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfY2hhci5yZW1vdmVfZGppbm4odGhpc19kamlubi5rZXlfbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dF9jaGFyLmFkZF9kamlubih0aGlzX2RqaW5uLmtleV9uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2RqaW5uX2luZGV4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVfZGppbm5fbGlzdCh0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVfZGppbm5fbGlzdCh0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzX2NoYXJfaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW5jZWxfZGppbm5fc3RhdHVzX3NldCgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ncmFudF9jb250cm9sKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FuY2VsX2RqaW5uX3N0YXR1c19zZXQuYmluZCh0aGlzLCB0cnVlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldF9kamlubl9vcGVyYXRpb24uYmluZCh0aGlzKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2YXRlKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgKyt0aGlzLnZpZXdfc3RhdGU7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnZpZXdfc3RhdGUgPiBWSUVXX1NUQVRFUy5ORVhUX0NIQVIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmlld19zdGF0ZSA9IFZJRVdfU1RBVEVTLlNUQVRTO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLnZpZXdfc3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgVklFV19TVEFURVMuU1RBVFM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kamlubl9wc3luZXJneV93aW5kb3cuYmFzZV93aW5kb3cuY2xvc2UodW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kamlubl9jaGFyX3N0YXRzX3dpbmRvd19sZWZ0LmJhc2Vfd2luZG93LnNob3codW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kamlubl9jaGFyX3N0YXRzX3dpbmRvd19yaWdodC5iYXNlX3dpbmRvdy51cGRhdGVfcG9zaXRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiBESklOTl9DSEFSX1dJTl9TVEFUU19SSUdIVF9YLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGppbm5fc3RhdHVzX2NoYW5nZV9oZWFkZXJfd2luZG93LnNldF9hY3Rpb25faW5mb190ZXh0KGA6ICR7dGhpc19jaGFyLm5hbWV9J3MgUHN5YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFZJRVdfU1RBVEVTLlRISVNfQ0hBUjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRqaW5uX3BzeW5lcmd5X3dpbmRvdy51cGRhdGVfaW5mbyh0aGlzX2NoYXIsIHRoaXNfZGppbm5pLCB0aGlzX3N0YXR1c2VzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRqaW5uX3BzeW5lcmd5X3dpbmRvdy5iYXNlX3dpbmRvdy5zaG93KHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGppbm5fY2hhcl9zdGF0c193aW5kb3dfcmlnaHQuYmFzZV93aW5kb3cuY2xvc2UodW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kamlubl9zdGF0dXNfY2hhbmdlX2hlYWRlcl93aW5kb3cuc2V0X2FjdGlvbl9pbmZvX3RleHQoYDogJHtuZXh0X2NoYXIubmFtZX0ncyBQc3lgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgVklFV19TVEFURVMuTkVYVF9DSEFSOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGppbm5fcHN5bmVyZ3lfd2luZG93LnVwZGF0ZV9pbmZvKG5leHRfY2hhciwgbmV4dF9kamlubmksIG5leHRfc3RhdHVzZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGppbm5fY2hhcl9zdGF0c193aW5kb3dfbGVmdC5iYXNlX3dpbmRvdy5jbG9zZSh1bmRlZmluZWQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRqaW5uX2NoYXJfc3RhdHNfd2luZG93X3JpZ2h0LmJhc2Vfd2luZG93LnNob3codW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kamlubl9jaGFyX3N0YXRzX3dpbmRvd19yaWdodC5iYXNlX3dpbmRvdy51cGRhdGVfcG9zaXRpb24oe3g6IDB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRqaW5uX3N0YXR1c19jaGFuZ2VfaGVhZGVyX3dpbmRvdy5zZXRfYWN0aW9uX2luZm9fdGV4dChcIjogU3RhdHVzXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhY3Rpb25fdGV4dFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuZGppbm5fcHN5bmVyZ3lfd2luZG93LmdyYW50X2NvbnRyb2woKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBuZXh0X3N0YXR1czogZGppbm5fc3RhdHVzO1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzX2RqaW5uLnN0YXR1cykge1xuICAgICAgICAgICAgICAgIGNhc2UgZGppbm5fc3RhdHVzLlNFVDpcbiAgICAgICAgICAgICAgICAgICAgbmV4dF9zdGF0dXMgPSBkamlubl9zdGF0dXMuU1RBTkRCWTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBkamlubl9zdGF0dXMuU1RBTkRCWTpcbiAgICAgICAgICAgICAgICAgICAgbmV4dF9zdGF0dXMgPSBkamlubl9zdGF0dXMuU0VUO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5kZWFjdGl2YXRlKCk7XG4gICAgICAgICAgICB0aGlzLmRqaW5uX3N0YXR1c19jaGFuZ2VfaGVhZGVyX3dpbmRvdy5vcGVuKFt0aGlzX2NoYXJdLCBbdGhpc19kamlubl0sIFtuZXh0X3N0YXR1c10pO1xuICAgICAgICAgICAgdGhpcy5kamlubl9jaGFyX3N0YXRzX3dpbmRvd19sZWZ0Lm9wZW4odGhpc19jaGFyLCBbdGhpc19kamlubl0sIFtuZXh0X3N0YXR1c10pO1xuICAgICAgICAgICAgdGhpcy5kamlubl9wc3luZXJneV93aW5kb3cub3Blbih0aGlzX2NoYXIsIFt0aGlzX2RqaW5uXSwgW25leHRfc3RhdHVzXSwgKGV4ZWN1dGVfb3BlcmF0aW9uOiBib29sZWFuKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kamlubl9zdGF0dXNfY2hhbmdlX2hlYWRlcl93aW5kb3cuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRqaW5uX2NoYXJfc3RhdHNfd2luZG93X2xlZnQuY2xvc2UoKTtcblxuICAgICAgICAgICAgICAgIGlmIChleGVjdXRlX29wZXJhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZV9kamlubl9zdGF0dXMoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW5jZWxfZGppbm5fc3RhdHVzX3NldCh0cnVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyYW50X2NvbnRyb2woXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbmNlbF9kamlubl9zdGF0dXNfc2V0LmJpbmQodGhpcywgdHJ1ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldF9kamlubl9vcGVyYXRpb24uYmluZCh0aGlzKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZhdGUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5kamlubl9wc3luZXJneV93aW5kb3cuZ3JhbnRfY29udHJvbCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2hhbmdlX2RqaW5uX3N0YXR1cygpIHtcbiAgICAgICAgbGV0IGRqaW5uX2luZGV4ID0gdGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1cyA/IHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXNfZGppbm5faW5kZXggOiB0aGlzLnNlbGVjdGVkX2RqaW5uX2luZGV4O1xuICAgICAgICBjb25zdCB0aGlzX2NoYXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4XTtcbiAgICAgICAgY29uc3QgdGhpc19kamlubiA9IHRoaXMuZGF0YS5pbmZvLmRqaW5uaV9saXN0W3RoaXNfY2hhci5kamlubmlbZGppbm5faW5kZXhdXTtcblxuICAgICAgICBpZiAodGhpc19kamlubi5zdGF0dXMgPT09IGRqaW5uX3N0YXR1cy5TRVQpIHtcbiAgICAgICAgICAgIHRoaXNfZGppbm4uc2V0X3N0YXR1cyhkamlubl9zdGF0dXMuU1RBTkRCWSwgdGhpc19jaGFyKTtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfY29sb3IoXG4gICAgICAgICAgICAgICAgZGppbm5fZm9udF9jb2xvcnNbZGppbm5fc3RhdHVzLlNUQU5EQlldLFxuICAgICAgICAgICAgICAgIHRoaXMuZGppbm5fbmFtZXNbdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4XVt0aGlzLnNlbGVjdGVkX2RqaW5uX2luZGV4XVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuY2hhcnNfcXVpY2tfaW5mb193aW5kb3cudXBkYXRlX3RleHQoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0X2FjdGlvbl90ZXh0KCk7XG4gICAgICAgICAgICB0aGlzLnNldF9kamlubl9zcHJpdGUoZmFsc2UpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXNfZGppbm4uc3RhdHVzID09PSBkamlubl9zdGF0dXMuU1RBTkRCWSkge1xuICAgICAgICAgICAgdGhpc19kamlubi5zZXRfc3RhdHVzKGRqaW5uX3N0YXR1cy5TRVQsIHRoaXNfY2hhcik7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X2NvbG9yKFxuICAgICAgICAgICAgICAgIGRqaW5uX2ZvbnRfY29sb3JzW2RqaW5uX3N0YXR1cy5TRVRdLFxuICAgICAgICAgICAgICAgIHRoaXMuZGppbm5fbmFtZXNbdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4XVt0aGlzLnNlbGVjdGVkX2RqaW5uX2luZGV4XVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuY2hhcnNfcXVpY2tfaW5mb193aW5kb3cudXBkYXRlX3RleHQoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0X2FjdGlvbl90ZXh0KCk7XG4gICAgICAgICAgICB0aGlzLnNldF9kamlubl9zcHJpdGUoZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2FuY2VsX2RqaW5uX3N0YXR1c19zZXQocmVzZXRfaW5kZXg6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICBpZiAoIXRoaXMuc2V0dGluZ19kamlubl9zdGF0dXMpIHJldHVybjtcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMuY2hhcnNfc3ByaXRlcykge1xuICAgICAgICAgICAgdGhpcy5jaGFyc19zcHJpdGVzW2tleV0ueSArPSBudW1iZXJzLkZPTlRfU0laRTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgQ0hBUlNfUEVSX1BBR0U7ICsraSkge1xuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIGVsZW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbSA9IGVsZW1lbnRzW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKGVsZW0gPT09IGVsZW1lbnRzLk5PX0VMRU1FTlQpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuZGppbm5zX3Nwcml0ZXNbaV1bZWxlbV0ueSArPSBudW1iZXJzLkZPTlRfU0laRTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoXCJcIiwgdGhpcy5kamlubmlfc3RhdHVzX3RleHRzW2ldKTtcbiAgICAgICAgICAgIGNvbnN0IHRoaXNfY2hhciA9IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1tpXTtcbiAgICAgICAgICAgIGlmICh0aGlzX2NoYXIgPT09IHVuZGVmaW5lZCkgY29udGludWU7XG4gICAgICAgICAgICB0aGlzLnNpemVzW2ldID0gdGhpc19jaGFyLmRqaW5uaS5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVzZXRfaW5kZXgpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCA9IHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXNfY2hhcl9pbmRleDtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfZGppbm5faW5kZXggPSB0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzX2RqaW5uX2luZGV4O1xuICAgICAgICAgICAgdGhpcy5zZXRfaGlnaGxpZ2h0X2JhcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kYXJrZW5fZm9udF9jb2xvcihmYWxzZSk7XG4gICAgICAgIHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXNfY2hhcl9pbmRleCA9IC0xO1xuICAgICAgICB0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzX2RqaW5uX2luZGV4ID0gLTE7XG4gICAgICAgIHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXMgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLnNldF9oaWdobGlnaHRfYmFyKCk7XG4gICAgICAgIHRoaXMuc2V0X2FjdGlvbl90ZXh0KCk7XG4gICAgICAgIHRoaXMudXBkYXRlX2RqaW5uX2Rlc2NyaXB0aW9uKCk7XG4gICAgICAgIHRoaXMuc2V0X2RqaW5uX3Nwcml0ZSgpO1xuXG4gICAgICAgIHRoaXMuc2VsZWN0X2RqaW5uKHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCwgdGhpcy5zZWxlY3RlZF9kamlubl9pbmRleCk7XG4gICAgICAgIHRoaXMuZ3JhbnRfY29udHJvbCh0aGlzLmNsb3NlLmJpbmQodGhpcyksIHRoaXMub25fY2hvb3NlLmJpbmQodGhpcyksIHRoaXMuY2hhbmdlX2RqaW5uX3N0YXR1cy5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICBvbl9jaG9vc2UoKSB7XG4gICAgICAgIGNvbnN0IHRoaXNfY2hhciA9IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXhdO1xuICAgICAgICBjb25zdCB0aGlzX2RqaW5uID0gdGhpcy5kYXRhLmluZm8uZGppbm5pX2xpc3RbdGhpc19jaGFyLmRqaW5uaVt0aGlzLnNlbGVjdGVkX2RqaW5uX2luZGV4XV07XG5cbiAgICAgICAgLy9tYWtlIHNlbGVjdGVkIGRqaW5uaSdzIHNwcml0ZSBzdGF5IG9uIHNjcmVlblxuXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzIHx8IHRoaXNfZGppbm4uc3RhdHVzID09PSBkamlubl9zdGF0dXMuUkVDT1ZFUlkpIHJldHVybjtcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMuY2hhcnNfc3ByaXRlcykge1xuICAgICAgICAgICAgdGhpcy5jaGFyc19zcHJpdGVzW2tleV0ueSAtPSBudW1iZXJzLkZPTlRfU0laRTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IENIQVJTX1BFUl9QQUdFOyArK2kpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiBlbGVtZW50cykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVsZW0gPSBlbGVtZW50c1trZXldO1xuICAgICAgICAgICAgICAgIGlmIChlbGVtID09PSBlbGVtZW50cy5OT19FTEVNRU5UKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmRqaW5uc19zcHJpdGVzW2ldW2VsZW1dLnkgLT0gbnVtYmVycy5GT05UX1NJWkU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBDSEFSU19QRVJfUEFHRTsgKytpKSB7XG4gICAgICAgICAgICBsZXQgc3RhdHVzX3RleHQ7XG4gICAgICAgICAgICBpZiAoaSA9PT0gdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4KSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzX2RqaW5uLnN0YXR1cykge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIGRqaW5uX3N0YXR1cy5TRVQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNfdGV4dCA9IGNhcGl0YWxpemUoZGppbm5fc3RhdHVzLlNUQU5EQlkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZGppbm5fc3RhdHVzLlNUQU5EQlk6XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNfdGV4dCA9IGNhcGl0YWxpemUoZGppbm5fc3RhdHVzLlNFVCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IG90aGVyX2NoYXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbaV07XG4gICAgICAgICAgICAgICAgaWYgKG90aGVyX2NoYXIgPT09IHVuZGVmaW5lZCkgY29udGludWU7XG4gICAgICAgICAgICAgICAgaWYgKG90aGVyX2NoYXIuZGppbm5pLmxlbmd0aCA8IHRoaXNfY2hhci5kamlubmkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1c190ZXh0ID0gXCJHaXZlXCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzX3RleHQgPSBcIlRyYWRlXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChzdGF0dXNfdGV4dCwgdGhpcy5kamlubmlfc3RhdHVzX3RleHRzW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXNfY2hhcl9pbmRleCA9IHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleDtcbiAgICAgICAgdGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1c19kamlubl9pbmRleCA9IHRoaXMuc2VsZWN0ZWRfZGppbm5faW5kZXg7XG4gICAgICAgIHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXMgPSB0cnVlO1xuICAgICAgICB0aGlzLmRqaW5uX2FjdGlvbl93aW5kb3cuc2V0X2FjdGlvbl9mb3Jfc3BlY2lmaWNfZGppbm4odGhpc19jaGFyLCB0aGlzX2RqaW5uKTtcblxuICAgICAgICB0aGlzLmRhcmtlbl9mb250X2NvbG9yKCk7XG4gICAgICAgIHRoaXMuc2VsZWN0X2FjdGlvbl90ZXh0KCk7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfZGppbm5faW5kZXggPSAwO1xuXG4gICAgICAgIHRoaXMuZ3JhbnRfY29udHJvbCh0aGlzLmNhbmNlbF9kamlubl9zdGF0dXNfc2V0LmJpbmQodGhpcywgdHJ1ZSksIHRoaXMuc2V0X2RqaW5uX29wZXJhdGlvbi5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICBvcGVuKFxuICAgICAgICBjaGFyc19xdWlja19pbmZvX3dpbmRvdzogQ2hhcnNRdWlja0luZm9EamlubldpbmRvdyxcbiAgICAgICAgZGppbm5fYWN0aW9uX3dpbmRvdzogRGppbm5BY3Rpb25XaW5kb3csXG4gICAgICAgIGNsb3NlX2NhbGxiYWNrPzogRnVuY3Rpb24sXG4gICAgICAgIG9wZW5fY2FsbGJhY2s/OiBGdW5jdGlvblxuICAgICkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXggPSAwO1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2RqaW5uX2luZGV4ID0gMDtcbiAgICAgICAgdGhpcy5wYWdlX2luZGV4ID0gMDtcblxuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMTtcbiAgICAgICAgdGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1c19jaGFyX2luZGV4ID0gLTE7XG4gICAgICAgIHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXNfZGppbm5faW5kZXggPSAtMTtcbiAgICAgICAgdGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1cyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNoYXJzX3F1aWNrX2luZm9fd2luZG93ID0gY2hhcnNfcXVpY2tfaW5mb193aW5kb3c7XG4gICAgICAgIHRoaXMuZGppbm5fYWN0aW9uX3dpbmRvdyA9IGRqaW5uX2FjdGlvbl93aW5kb3c7XG5cbiAgICAgICAgdGhpcy5sb2FkX3BhZ2UoKTtcbiAgICAgICAgdGhpcy51cGRhdGVfcG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy5zZXRfaGlnaGxpZ2h0X2JhcigpO1xuICAgICAgICB0aGlzLnNldF9hY3Rpb25fdGV4dCgpO1xuICAgICAgICB0aGlzLnVwZGF0ZV9kamlubl9kZXNjcmlwdGlvbigpO1xuICAgICAgICB0aGlzLnNldF9kamlubl9zcHJpdGUoKTtcblxuICAgICAgICB0aGlzLnNlbGVjdF9kamlubigwLCAwKTtcbiAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IHRydWU7XG4gICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuY2hhbmdpbmdfZGppbm5fc3RhdHVzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBjbG9zZV9jYWxsYmFjaztcblxuICAgICAgICB0aGlzLmdyYW50X2NvbnRyb2wodGhpcy5jbG9zZS5iaW5kKHRoaXMpLCB0aGlzLm9uX2Nob29zZS5iaW5kKHRoaXMpLCB0aGlzLmNoYW5nZV9kamlubl9zdGF0dXMuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zaG93KHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgICAgICBpZiAob3Blbl9jYWxsYmFjaykge1xuICAgICAgICAgICAgb3Blbl9jYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGF0YS5jdXJzb3JfbWFuYWdlci5oaWRlKCk7XG5cbiAgICAgICAgdGhpcy51bnNldF9wYWdlKCk7XG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAwO1xuXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY2xvc2UodW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlX2NhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhY3RpdmF0ZSgpIHtcbiAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zZWxlY3RfZGppbm4odGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4LCB0aGlzLnNlbGVjdGVkX2RqaW5uX2luZGV4KTtcbiAgICB9XG5cbiAgICBkZWFjdGl2YXRlKCkge1xuICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kYXRhLmN1cnNvcl9tYW5hZ2VyLmhpZGUoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQge1RleHRPYmosIFdpbmRvd30gZnJvbSBcIi4uLy4uL1dpbmRvd1wiO1xuaW1wb3J0IHtiYXNlX2FjdGlvbnMsIGNhcGl0YWxpemUsIGRpcmVjdGlvbnMsIHJldmVyc2VfZGlyZWN0aW9uc30gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5pbXBvcnQge0RqaW5uLCBkamlubl9mb250X2NvbG9yc30gZnJvbSBcIi4uLy4uL0RqaW5uXCI7XG5pbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gXCIuLi8uLi9tYWdpY19udW1iZXJzXCI7XG5pbXBvcnQge0dvbGRlblN1bn0gZnJvbSBcIi4uLy4uL0dvbGRlblN1blwiO1xuaW1wb3J0IHtNYWluQ2hhcn0gZnJvbSBcIi4uLy4uL01haW5DaGFyXCI7XG5cbmNvbnN0IEJBU0VfV0lOX1dJRFRIID0gMjM2O1xuY29uc3QgQkFTRV9XSU5fSEVJR0hUID0gMzY7XG5jb25zdCBCQVNFX1dJTl9YID0gMDtcbmNvbnN0IEJBU0VfV0lOX1kgPSAwO1xuXG5jb25zdCBPS19NU0dfWCA9IDEwNDtcbmNvbnN0IE9LX01TR19YXzIgPSAxMzI7XG5jb25zdCBPS19NU0dfWSA9IDI0O1xuY29uc3QgT0tfTVNHX1lfMiA9IDE2O1xuXG5jb25zdCBESklOTl9TVEFUVVNfWCA9IDEwNDtcbmNvbnN0IERKSU5OX1NUQVRVU19YXzIgPSAxMzI7XG5jb25zdCBESklOTl9TVEFUVVNfWSA9IDg7XG5cbmNvbnN0IFNUQVJfQkVGT1JFX1ggPSA0OTtcbmNvbnN0IFNUQVJfQkVGT1JFX1kgPSA5O1xuY29uc3QgU1RBUl9BRlRFUl9YID0gNDk7XG5jb25zdCBTVEFSX0FGVEVSX1kgPSAyNTtcblxuY29uc3QgREpJTk5fTkFNRV9CRUZPUkVfWCA9IDU2O1xuY29uc3QgREpJTk5fTkFNRV9CRUZPUkVfWSA9IDg7XG5jb25zdCBESklOTl9OQU1FX0FGVEVSX1ggPSA1NjtcbmNvbnN0IERKSU5OX05BTUVfQUZURVJfWSA9IDI0O1xuXG5jb25zdCBESklOTl9YID0gMzI7XG5jb25zdCBESklOTl9ZID0gMzE7XG5jb25zdCBESklOTl9NVUxUX1ggPSBbMzIsIDk5XTtcbmNvbnN0IERKSU5OX01VTFRfWSA9IFsyMSwgMzddO1xuXG5jb25zdCBDSEFSU19YID0gWzE2LCAxMTddO1xuY29uc3QgQ0hBUlNfWSA9IFszNCwgMzRdO1xuXG5jb25zdCBBUlJPV19DSEFOR0VfREpJTk5fWCA9IDY0O1xuY29uc3QgQVJST1dfQ0hBTkdFX0RKSU5OX1kgPSAxNjtcblxuY29uc3QgU1BBQ0VCQVJfS0VZX1ggPSAxMzI7XG5jb25zdCBTUEFDRUJBUl9LRVlfWSA9IDI0O1xuXG5leHBvcnQgY2xhc3MgRGppbm5Nb2RlSGVhZGVyV2luZG93IHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6IEdvbGRlblN1bjtcbiAgICBwdWJsaWMgd2luZG93X29wZW46IGJvb2xlYW47XG4gICAgcHVibGljIHg6IG51bWJlcjtcbiAgICBwdWJsaWMgeTogbnVtYmVyO1xuICAgIHB1YmxpYyBiYXNlX3dpbmRvdzogV2luZG93O1xuICAgIHB1YmxpYyBncm91cDogUGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyBva19tc2dfdGV4dDogVGV4dE9iajtcbiAgICBwdWJsaWMgZGppbm5fc3RhdHVzX3RleHQ6IFRleHRPYmo7XG4gICAgcHVibGljIGRqaW5uX25hbWVfYmVmb3JlX3RleHQ6IFRleHRPYmo7XG4gICAgcHVibGljIGRqaW5uX25hbWVfYWZ0ZXJfdGV4dDogVGV4dE9iajtcbiAgICBwdWJsaWMgc3ByaXRlczogUGhhc2VyLlNwcml0ZVtdO1xuICAgIHB1YmxpYyBkamlubl9zcHJpdGVzOiBQaGFzZXIuU3ByaXRlW107XG4gICAgcHVibGljIHR3ZWVuczogUGhhc2VyLlR3ZWVuW107XG4gICAgcHVibGljIGRqaW5uX3N0YXR1c19hcnJvdzogUGhhc2VyLlNwcml0ZTtcbiAgICBwdWJsaWMgc3BhY2ViYXJfa2V5OiB7XG4gICAgICAgIHNoYWRvdzogUGhhc2VyLlNwcml0ZTtcbiAgICAgICAgdGV4dDogUGhhc2VyLlNwcml0ZTtcbiAgICB9O1xuICAgIHB1YmxpYyBhY3Rpb25faW5mb190ZXh0OiBUZXh0T2JqO1xuICAgIHB1YmxpYyBkamlubl9zdGF0dXNfYXJyb3dfYmxpbmtfdGltZXI6IFBoYXNlci5UaW1lcjtcbiAgICBwdWJsaWMgY2hhcnM6IE1haW5DaGFyW107XG4gICAgcHVibGljIGFjdGlvbl90ZXh0OiBzdHJpbmc7XG4gICAgcHVibGljIGRqaW5uaTogRGppbm5bXTtcbiAgICBwdWJsaWMgbmV4dF9kamlubmlfc3RhdHVzOiBzdHJpbmdbXTtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWU6IFBoYXNlci5HYW1lLCBkYXRhOiBHb2xkZW5TdW4pIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcblxuICAgICAgICB0aGlzLnNwcml0ZXMgPSBbXTtcbiAgICAgICAgdGhpcy5kamlubl9zcHJpdGVzID0gW107XG4gICAgICAgIHRoaXMudHdlZW5zID0gW107XG4gICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy54ID0gQkFTRV9XSU5fWDtcbiAgICAgICAgdGhpcy55ID0gQkFTRV9XSU5fWTtcblxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93ID0gbmV3IFdpbmRvdyh0aGlzLmdhbWUsIHRoaXMueCwgdGhpcy55LCBCQVNFX1dJTl9XSURUSCwgQkFTRV9XSU5fSEVJR0hUKTtcbiAgICAgICAgdGhpcy5ncm91cCA9IGdhbWUuYWRkLmdyb3VwKCk7XG5cbiAgICAgICAgdGhpcy5va19tc2dfdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJJcyB0aGlzIE9LP1wiLCBPS19NU0dfWCwgT0tfTVNHX1kpO1xuICAgICAgICB0aGlzLmRqaW5uX3N0YXR1c190ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBESklOTl9TVEFUVVNfWCwgREpJTk5fU1RBVFVTX1kpO1xuICAgICAgICB0aGlzLmRqaW5uX25hbWVfYmVmb3JlX3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIERKSU5OX05BTUVfQkVGT1JFX1gsXG4gICAgICAgICAgICBESklOTl9OQU1FX0JFRk9SRV9ZXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZGppbm5fbmFtZV9hZnRlcl90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBESklOTl9OQU1FX0FGVEVSX1gsIERKSU5OX05BTUVfQUZURVJfWSk7XG5cbiAgICAgICAgdGhpcy5kamlubl9zdGF0dXNfYXJyb3cgPSB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChcbiAgICAgICAgICAgIEFSUk9XX0NIQU5HRV9ESklOTl9YLFxuICAgICAgICAgICAgQVJST1dfQ0hBTkdFX0RKSU5OX1ksXG4gICAgICAgICAgICBcImFycm93X2NoYW5nZVwiXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc3BhY2ViYXJfa2V5ID0ge1xuICAgICAgICAgICAgc2hhZG93OiB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChTUEFDRUJBUl9LRVlfWCArIDEsIFNQQUNFQkFSX0tFWV9ZICsgMSwgXCJzcGFjZWJhcl9rZXlib2FyZFwiLCAweDApLFxuICAgICAgICAgICAgdGV4dDogdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoU1BBQ0VCQVJfS0VZX1gsIFNQQUNFQkFSX0tFWV9ZLCBcInNwYWNlYmFyX2tleWJvYXJkXCIpLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmFjdGlvbl9pbmZvX3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIHRoaXMuc3BhY2ViYXJfa2V5LnRleHQud2lkdGggKyBTUEFDRUJBUl9LRVlfWCArIDIsXG4gICAgICAgICAgICBTUEFDRUJBUl9LRVlfWVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmluaXRfYXJyb3dfYmxpbmtzKCk7XG4gICAgfVxuXG4gICAgdXBkYXRlX3Bvc2l0aW9uKCkge1xuICAgICAgICB0aGlzLmdyb3VwLnggPSB0aGlzLmdhbWUuY2FtZXJhLnggKyBCQVNFX1dJTl9YO1xuICAgICAgICB0aGlzLmdyb3VwLnkgPSB0aGlzLmdhbWUuY2FtZXJhLnkgKyBCQVNFX1dJTl9ZO1xuICAgIH1cblxuICAgIGluaXRfYXJyb3dfYmxpbmtzKCkge1xuICAgICAgICB0aGlzLmRqaW5uX3N0YXR1c19hcnJvd19ibGlua190aW1lciA9IHRoaXMuZ2FtZS50aW1lLmNyZWF0ZShmYWxzZSk7XG4gICAgICAgIHRoaXMuZGppbm5fc3RhdHVzX2Fycm93X2JsaW5rX3RpbWVyLmxvb3AoOTAsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGppbm5fc3RhdHVzX2Fycm93LmFscGhhID0gdGhpcy5kamlubl9zdGF0dXNfYXJyb3cuYWxwaGEgPyAwIDogMTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZGppbm5fc3RhdHVzX2Fycm93X2JsaW5rX3RpbWVyLnN0YXJ0KCk7XG4gICAgICAgIHRoaXMuZGppbm5fc3RhdHVzX2Fycm93X2JsaW5rX3RpbWVyLnBhdXNlKCk7XG4gICAgfVxuXG4gICAgc2V0X2FjdGlvbl9pbmZvX3RleHQodGV4dDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGV4dCwgdGhpcy5hY3Rpb25faW5mb190ZXh0KTtcbiAgICB9XG5cbiAgICBtb3VudF93aW5kb3coKSB7XG4gICAgICAgIHRoaXMudXBkYXRlX3Bvc2l0aW9uKCk7XG4gICAgICAgIGlmICh0aGlzLmNoYXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgdGhpcy5hY3Rpb25fdGV4dCA9IGNhcGl0YWxpemUodGhpcy5uZXh0X2RqaW5uaV9zdGF0dXNbMF0pO1xuXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuYWN0aW9uX3RleHQsIHRoaXMuZGppbm5fc3RhdHVzX3RleHQsIERKSU5OX1NUQVRVU19YKTtcbiAgICAgICAgICAgIHRoaXMuc3BhY2ViYXJfa2V5LnRleHQuYWxwaGEgPSB0aGlzLnNwYWNlYmFyX2tleS5zaGFkb3cuYWxwaGEgPSAwO1xuXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiXCIsIHRoaXMuYWN0aW9uX2luZm9fdGV4dCk7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X3Bvc2l0aW9uKHt4OiBPS19NU0dfWCwgeTogT0tfTVNHX1l9LCB0aGlzLm9rX21zZ190ZXh0KTtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5kamlubmlbMF0ubmFtZSwgdGhpcy5kamlubl9uYW1lX2JlZm9yZV90ZXh0KTtcblxuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dF9jb2xvcihkamlubl9mb250X2NvbG9yc1t0aGlzLmRqaW5uaVswXS5zdGF0dXNdLCB0aGlzLmRqaW5uX25hbWVfYmVmb3JlX3RleHQpO1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dF9wb3NpdGlvbihcbiAgICAgICAgICAgICAgICB7eDogREpJTk5fTkFNRV9CRUZPUkVfWCwgeTogREpJTk5fTkFNRV9CRUZPUkVfWX0sXG4gICAgICAgICAgICAgICAgdGhpcy5kamlubl9uYW1lX2JlZm9yZV90ZXh0XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dF9wb3NpdGlvbih7eDogREpJTk5fTkFNRV9BRlRFUl9YfSwgdGhpcy5kamlubl9uYW1lX2FmdGVyX3RleHQpO1xuXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuZGppbm5pWzBdLm5hbWUsIHRoaXMuZGppbm5fbmFtZV9hZnRlcl90ZXh0KTtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfY29sb3IoXG4gICAgICAgICAgICAgICAgZGppbm5fZm9udF9jb2xvcnNbdGhpcy5uZXh0X2RqaW5uaV9zdGF0dXNbMF1dLFxuICAgICAgICAgICAgICAgIHRoaXMuZGppbm5fbmFtZV9hZnRlcl90ZXh0XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICB0aGlzLnNwcml0ZXMucHVzaChcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChTVEFSX0JFRk9SRV9YLCBTVEFSX0JFRk9SRV9ZLCB0aGlzLmRqaW5uaVswXS5lbGVtZW50ICsgXCJfc3RhclwiKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlcy5wdXNoKFxuICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFNUQVJfQUZURVJfWCwgU1RBUl9BRlRFUl9ZLCB0aGlzLmRqaW5uaVswXS5lbGVtZW50ICsgXCJfc3RhclwiKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgdGhpcy5kamlubl9zdGF0dXNfYXJyb3cuYWxwaGEgPSAxO1xuICAgICAgICAgICAgdGhpcy5kamlubl9zdGF0dXNfYXJyb3dfYmxpbmtfdGltZXIucmVzdW1lKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuYWN0aW9uX3RleHQsIHRoaXMuZGppbm5fc3RhdHVzX3RleHQsIERKSU5OX1NUQVRVU19YXzIpO1xuICAgICAgICAgICAgdGhpcy5zcGFjZWJhcl9rZXkudGV4dC5hbHBoYSA9IHRoaXMuc3BhY2ViYXJfa2V5LnNoYWRvdy5hbHBoYSA9IDE7XG5cbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoYDogJHt0aGlzLmNoYXJzWzBdLm5hbWV9J3MgUHN5YCwgdGhpcy5hY3Rpb25faW5mb190ZXh0KTtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfcG9zaXRpb24oe3g6IE9LX01TR19YXzIsIHk6IE9LX01TR19ZXzJ9LCB0aGlzLm9rX21zZ190ZXh0KTtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5kamlubmlbMF0ubmFtZSwgdGhpcy5kamlubl9uYW1lX2JlZm9yZV90ZXh0KTtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfY29sb3IoZGppbm5fZm9udF9jb2xvcnNbdGhpcy5kamlubmlbMF0uc3RhdHVzXSwgdGhpcy5kamlubl9uYW1lX2JlZm9yZV90ZXh0KTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuYWN0aW9uX3RleHQgPT09IFwiVHJhZGVcIikge1xuICAgICAgICAgICAgICAgIHRoaXMuc3ByaXRlcy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChTVEFSX0JFRk9SRV9YIC0gNSwgU1RBUl9CRUZPUkVfWSwgdGhpcy5kamlubmlbMF0uZWxlbWVudCArIFwiX3N0YXJcIilcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5kamlubmlbMV0ubmFtZSwgdGhpcy5kamlubl9uYW1lX2FmdGVyX3RleHQpO1xuICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfY29sb3IoXG4gICAgICAgICAgICAgICAgICAgIGRqaW5uX2ZvbnRfY29sb3JzW3RoaXMuZGppbm5pWzFdLnN0YXR1c10sXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGppbm5fbmFtZV9hZnRlcl90ZXh0XG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuc3ByaXRlcy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChTVEFSX0FGVEVSX1ggLSA1LCBTVEFSX0FGVEVSX1ksIHRoaXMuZGppbm5pWzFdLmVsZW1lbnQgKyBcIl9zdGFyXCIpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X3Bvc2l0aW9uKHt4OiBESklOTl9OQU1FX0FGVEVSX1ggLSA1fSwgdGhpcy5kamlubl9uYW1lX2FmdGVyX3RleHQpO1xuICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfcG9zaXRpb24oXG4gICAgICAgICAgICAgICAgICAgIHt4OiBESklOTl9OQU1FX0JFRk9SRV9YIC0gNSwgeTogREpJTk5fTkFNRV9CRUZPUkVfWX0sXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGppbm5fbmFtZV9iZWZvcmVfdGV4dFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuYWN0aW9uX3RleHQgPT09IFwiR2l2ZVwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChcIlwiLCB0aGlzLmRqaW5uX25hbWVfYWZ0ZXJfdGV4dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dF9wb3NpdGlvbihcbiAgICAgICAgICAgICAgICAgICAge3g6IERKSU5OX05BTUVfQkVGT1JFX1ggLSA1LCB5OiBESklOTl9OQU1FX0JFRk9SRV9ZICsgbnVtYmVycy5GT05UX1NJWkV9LFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRqaW5uX25hbWVfYmVmb3JlX3RleHRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuc3ByaXRlcy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChcbiAgICAgICAgICAgICAgICAgICAgICAgIFNUQVJfQkVGT1JFX1ggLSA1LFxuICAgICAgICAgICAgICAgICAgICAgICAgU1RBUl9CRUZPUkVfWSArIG51bWJlcnMuRk9OVF9TSVpFLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kamlubmlbMF0uZWxlbWVudCArIFwiX3N0YXJcIlxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGppbm5fc3RhdHVzX2Fycm93LmFscGhhID0gMDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldF9jaGFyX2FuZF9kamlubl9zcHJpdGUoKTtcbiAgICB9XG5cbiAgICBzZXRfY2hhcl9hbmRfZGppbm5fc3ByaXRlKCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY2hhcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHRoaXNfY2hhciA9IHRoaXMuY2hhcnNbaV07XG4gICAgICAgICAgICBjb25zdCB0aGlzX2RqaW5uID0gdGhpcy5kamlubmlbaV07XG4gICAgICAgICAgICBsZXQgZGppbm5feDogbnVtYmVyLCBkamlubl95OiBudW1iZXI7XG5cbiAgICAgICAgICAgIGlmIChbXCJUcmFkZVwiLCBcIkdpdmVcIl0uaW5jbHVkZXModGhpcy5hY3Rpb25fdGV4dCkpIHtcbiAgICAgICAgICAgICAgICBkamlubl94ID0gREpJTk5fTVVMVF9YW2ldO1xuICAgICAgICAgICAgICAgIGRqaW5uX3kgPSBESklOTl9NVUxUX1lbaV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRqaW5uX3ggPSBESklOTl9YO1xuICAgICAgICAgICAgICAgIGRqaW5uX3kgPSBESklOTl9ZO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYWN0aW9uX2tleSA9IHRoaXNfY2hhci5zcHJpdGVfYmFzZS5nZXRBY3Rpb25LZXkoYmFzZV9hY3Rpb25zLklETEUpO1xuICAgICAgICAgICAgY29uc3QgY2hhcl9zcHJpdGUgPSB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChDSEFSU19YW2ldLCBDSEFSU19ZW2ldLCBhY3Rpb25fa2V5KTtcbiAgICAgICAgICAgIGNoYXJfc3ByaXRlLmFuY2hvci5zZXRUbygwLjUsIDEuMCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGFuaW1hdGlvbl9rZXkgPSB0aGlzX2NoYXIuc3ByaXRlX2Jhc2UuZ2V0QW5pbWF0aW9uS2V5KFxuICAgICAgICAgICAgICAgIGJhc2VfYWN0aW9ucy5JRExFLFxuICAgICAgICAgICAgICAgIHJldmVyc2VfZGlyZWN0aW9uc1tkaXJlY3Rpb25zLmRvd25dXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY2hhcl9zcHJpdGUuYW5pbWF0aW9ucy5hZGQoXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX2tleSxcbiAgICAgICAgICAgICAgICB0aGlzX2NoYXIuc3ByaXRlX2Jhc2UuYW5pbWF0aW9ucy5pZGxlLmRvd24sXG4gICAgICAgICAgICAgICAgdGhpc19jaGFyLnNwcml0ZV9iYXNlLmFjdGlvbnMuaWRsZS5mcmFtZV9yYXRlLFxuICAgICAgICAgICAgICAgIHRydWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjaGFyX3Nwcml0ZS5hbmltYXRpb25zLnBsYXkoYW5pbWF0aW9uX2tleSwgdGhpc19jaGFyLnNwcml0ZV9iYXNlLmFjdGlvbnMuaWRsZS5mcmFtZV9yYXRlLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlcy5wdXNoKGNoYXJfc3ByaXRlKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuYWN0aW9uX3RleHQgPT09IFwiR2l2ZVwiICYmIGkgPT09IDEpIGJyZWFrO1xuXG4gICAgICAgICAgICBjb25zdCBkamlubl9zcHJpdGUgPSB0aGlzLmdyb3VwLmNyZWF0ZShcbiAgICAgICAgICAgICAgICBkamlubl94LFxuICAgICAgICAgICAgICAgIGRqaW5uX3ksXG4gICAgICAgICAgICAgICAgdGhpc19kamlubi5lbGVtZW50ICsgXCJfZGppbm5fXCIgKyB0aGlzX2RqaW5uLnN0YXR1c1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGRqaW5uX3Nwcml0ZS5hbmNob3Iuc2V0VG8oMC41LCAxLjApO1xuICAgICAgICAgICAgZGppbm5fc3ByaXRlLnNjYWxlLnggPSAtMC44O1xuICAgICAgICAgICAgZGppbm5fc3ByaXRlLnNjYWxlLnkgPSAwLjg7XG5cbiAgICAgICAgICAgIHRoaXMuZGF0YS5pbmZvLmRqaW5uaV9zcHJpdGVzW3RoaXNfZGppbm4uZWxlbWVudF0uc2V0QW5pbWF0aW9uKGRqaW5uX3Nwcml0ZSwgdGhpc19kamlubi5zdGF0dXMpO1xuICAgICAgICAgICAgZGppbm5fc3ByaXRlLmFuaW1hdGlvbnMucGxheSh0aGlzX2RqaW5uLnN0YXR1cyArIFwiX2Rvd25cIik7XG4gICAgICAgICAgICB0aGlzLmRqaW5uX3Nwcml0ZXMucHVzaChkamlubl9zcHJpdGUpO1xuXG4gICAgICAgICAgICBpZiAoW1wiVHJhZGVcIiwgXCJHaXZlXCJdLmluY2x1ZGVzKHRoaXMuYWN0aW9uX3RleHQpKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2lnbiA9IGkgPT09IDAgPyAxIDogLTE7XG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IHNpZ24gKiAxNyxcbiAgICAgICAgICAgICAgICAgICAgYiA9IHNpZ24gKiAzMztcbiAgICAgICAgICAgICAgICBjb25zdCB5X3NoaWZ0ID0gLXNpZ24gKiA1O1xuICAgICAgICAgICAgICAgIGNvbnN0IHR3ZWVuID0gdGhpcy5nYW1lLmFkZC50d2Vlbihkamlubl9zcHJpdGUpLnRvKFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBbZGppbm5feSwgZGppbm5feSArIHlfc2hpZnQsIGRqaW5uX3kgKyB5X3NoaWZ0LCBkamlubl95XSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IFtkamlubl94LCBkamlubl94ICsgYSwgZGppbm5feCArIGEgKyBiLCBkamlubl94ICsgYSArIGIgKyBhXSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgNzAwLFxuICAgICAgICAgICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLFxuICAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICAtMSxcbiAgICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHR3ZWVuLnJlcGVhdERlbGF5KDMwMCk7XG4gICAgICAgICAgICAgICAgdGhpcy50d2VlbnMucHVzaCh0d2Vlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1bm1vdW50X3dpbmRvdygpIHtcbiAgICAgICAgdGhpcy5zcHJpdGVzLmZvckVhY2goc3ByaXRlID0+IHtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX2Zyb21fZ3JvdXAoc3ByaXRlLCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZGppbm5fc3ByaXRlcy5mb3JFYWNoKHNwcml0ZSA9PiB7XG4gICAgICAgICAgICBzcHJpdGUuZGVzdHJveSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy50d2VlbnMuZm9yRWFjaCh0d2VlbiA9PiB7XG4gICAgICAgICAgICB0d2Vlbi5zdG9wKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuc3ByaXRlcyA9IFtdO1xuICAgICAgICB0aGlzLmRqaW5uX3Nwcml0ZXMgPSBbXTtcbiAgICAgICAgdGhpcy50d2VlbnMgPSBbXTtcbiAgICAgICAgdGhpcy5kamlubl9zdGF0dXNfYXJyb3cuYWxwaGEgPSAwO1xuXG4gICAgICAgIGlmICghdGhpcy5kamlubl9zdGF0dXNfYXJyb3dfYmxpbmtfdGltZXIucGF1c2VkKSB7XG4gICAgICAgICAgICB0aGlzLmRqaW5uX3N0YXR1c19hcnJvd19ibGlua190aW1lci5wYXVzZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb3BlbihjaGFyczogTWFpbkNoYXJbXSwgZGppbm5pOiBEamlubltdLCBuZXh0X2RqaW5uaV9zdGF0dXM6IHN0cmluZ1tdLCBhY3Rpb25fdGV4dD86IHN0cmluZywgY2FsbGJhY2s/OiBGdW5jdGlvbikge1xuICAgICAgICB0aGlzLmNoYXJzID0gY2hhcnM7XG4gICAgICAgIHRoaXMuZGppbm5pID0gZGppbm5pO1xuICAgICAgICB0aGlzLm5leHRfZGppbm5pX3N0YXR1cyA9IG5leHRfZGppbm5pX3N0YXR1cztcbiAgICAgICAgdGhpcy5hY3Rpb25fdGV4dCA9IGFjdGlvbl90ZXh0O1xuICAgICAgICB0aGlzLm1vdW50X3dpbmRvdygpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNob3coKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IHRydWU7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBjbG9zZShjYWxsYmFjaz86IEZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMudW5tb3VudF93aW5kb3coKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5jbG9zZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG59XG4iLCJpbXBvcnQge1RleHRPYmosIFdpbmRvd30gZnJvbSBcIi4uLy4uL1dpbmRvd1wiO1xuaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tIFwiLi4vLi4vbWFnaWNfbnVtYmVyc1wiO1xuaW1wb3J0IHtvcmRlcmVkX2VsZW1lbnRzfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcbmltcG9ydCB7TWFpbkNoYXJ9IGZyb20gXCIuLi8uLi9NYWluQ2hhclwiO1xuaW1wb3J0IHtEamlubiwgZGppbm5fc3RhdHVzfSBmcm9tIFwiLi4vLi4vRGppbm5cIjtcbmltcG9ydCB7b3JkZXJlZF9tYWluX3N0YXRzfSBmcm9tIFwiLi4vLi4vUGxheWVyXCI7XG5cbmNvbnN0IEJBU0VfV0lOX1dJRFRIID0gMTE2O1xuY29uc3QgQkFTRV9XSU5fSEVJR0hUID0gMTE2O1xuY29uc3QgQkFTRV9XSU5fWSA9IDQwO1xuXG5jb25zdCBBVkFUQVJfWCA9IDg7XG5jb25zdCBBVkFUQVJfWSA9IDg7XG5cbmNvbnN0IENIQVJfTkFNRV9YID0gNDg7XG5jb25zdCBDSEFSX05BTUVfWSA9IDg7XG5cbmNvbnN0IExWX1ggPSA0ODtcbmNvbnN0IExWX1kgPSAyNDtcblxuY29uc3QgTFZfTlVNQkVSX1ggPSAxMTA7XG5jb25zdCBMVl9OVU1CRVJfWSA9IDI0O1xuXG5jb25zdCBDTEFTU19YID0gODtcbmNvbnN0IENMQVNTX1kgPSA0MDtcblxuY29uc3QgREpJTk5fTlVNQkVSX1NMT1RfV0lEVEggPSAxNztcbmNvbnN0IERKSU5OX05VTUJFUl9YID0gMTEwO1xuY29uc3QgREpJTk5fTlVNQkVSX1kgPSA0ODtcblxuY29uc3Qgc3RhdHMgPSBbXCJIUFwiLCBcIlBQXCIsIFwiQXR0YWNrXCIsIFwiRGVmZW5zZVwiLCBcIkFnaWxpdHlcIiwgXCJMdWNrXCJdO1xuXG5jb25zdCBTVEFUU19YID0gODtcbmNvbnN0IFNUQVRTX0JBU0VfWSA9IDY0O1xuY29uc3QgU1RBVFNfQ1VSUkVOVF9YID0gNzg7XG5jb25zdCBTVEFUU19ORVhUX1ggPSAxMTA7XG5cbmNvbnN0IE5FV19DTEFTU19YID0gODtcbmNvbnN0IE5FV19DTEFTU19ZID0gNTY7XG5cbmNvbnN0IGVsZW1lbnRzX2xpc3QgPSBvcmRlcmVkX2VsZW1lbnRzLnNsaWNlKCkucmV2ZXJzZSgpO1xuXG5jb25zdCBBUlJPV19DSEFOR0VfQ0xBU1NfWCA9IDI0O1xuY29uc3QgQVJST1dfQ0hBTkdFX0NMQVNTX1kgPSA0ODtcblxuZXhwb3J0IGNsYXNzIERqaW5uQ2hhclN0YXRzV2luZG93IHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG5cbiAgICBwdWJsaWMgd2luZG93X29wZW46IGJvb2xlYW47XG4gICAgcHVibGljIHNwcml0ZXM6IFBoYXNlci5TcHJpdGVbXTtcbiAgICBwdWJsaWMgZGppbm5fbnVtYmVyX3RleHRzOiB7W2VsZW1lbnQ6IHN0cmluZ106IFRleHRPYmp9O1xuICAgIHB1YmxpYyBzdGF0c19jdXJyZW50X3RleHRzOiB7W3N0YXQ6IHN0cmluZ106IFRleHRPYmp9O1xuICAgIHB1YmxpYyBzdGF0c19uZXh0X3RleHRzOiB7W3N0YXQ6IHN0cmluZ106IFRleHRPYmp9O1xuXG4gICAgcHVibGljIGJhc2Vfd2luZG93OiBXaW5kb3c7XG5cbiAgICBwdWJsaWMgY2hhcl9uYW1lX3RleHQ6IFRleHRPYmo7XG4gICAgcHVibGljIGxldmVsX251bWJlcl90ZXh0OiBUZXh0T2JqO1xuICAgIHB1YmxpYyBjbGFzc190ZXh0OiBUZXh0T2JqO1xuICAgIHB1YmxpYyBuZXdfY2xhc3NfdGV4dDogVGV4dE9iajtcblxuICAgIHB1YmxpYyBjbGFzc19uYW1lX2Fycm93OiBQaGFzZXIuU3ByaXRlO1xuICAgIHB1YmxpYyBjbGFzc19uYW1lX2Fycm93X2JsaW5rX3RpbWVyOiBQaGFzZXIuVGltZXI7XG5cbiAgICBwdWJsaWMgY2hhcjogTWFpbkNoYXI7XG4gICAgcHVibGljIGRqaW5uaTogRGppbm5bXTtcbiAgICBwdWJsaWMgbmV4dF9kamlubmlfc3RhdHVzOiBkamlubl9zdGF0dXNbXTtcbiAgICBwdWJsaWMgYWN0aW9uOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lLCB3aW5feCA9IDApIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcblxuICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc3ByaXRlcyA9IFtdO1xuICAgICAgICB0aGlzLmRqaW5uX251bWJlcl90ZXh0cyA9IHt9O1xuICAgICAgICB0aGlzLnN0YXRzX2N1cnJlbnRfdGV4dHMgPSB7fTtcbiAgICAgICAgdGhpcy5zdGF0c19uZXh0X3RleHRzID0ge307XG5cbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCB3aW5feCwgQkFTRV9XSU5fWSwgQkFTRV9XSU5fV0lEVEgsIEJBU0VfV0lOX0hFSUdIVCk7XG5cbiAgICAgICAgdGhpcy5jaGFyX25hbWVfdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgQ0hBUl9OQU1FX1gsIENIQVJfTkFNRV9ZKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIkx2XCIsIExWX1gsIExWX1kpO1xuICAgICAgICB0aGlzLmxldmVsX251bWJlcl90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBMVl9OVU1CRVJfWCwgTFZfTlVNQkVSX1ksIHRydWUpO1xuICAgICAgICB0aGlzLmNsYXNzX3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIENMQVNTX1gsIENMQVNTX1kpO1xuICAgICAgICB0aGlzLm5ld19jbGFzc190ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBORVdfQ0xBU1NfWCwgTkVXX0NMQVNTX1kpO1xuXG4gICAgICAgIGVsZW1lbnRzX2xpc3QuZm9yRWFjaCgoZWxlbWVudCwgaSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeCA9IERKSU5OX05VTUJFUl9YIC0gaSAqIERKSU5OX05VTUJFUl9TTE9UX1dJRFRIO1xuICAgICAgICAgICAgdGhpcy5kamlubl9udW1iZXJfdGV4dHNbZWxlbWVudF0gPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIHgsIERKSU5OX05VTUJFUl9ZLCB0cnVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3RhdHMuZm9yRWFjaCgoc3RhdCwgaSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeSA9IFNUQVRTX0JBU0VfWSArIGkgKiBudW1iZXJzLkZPTlRfU0laRTtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oc3RhdCwgU1RBVFNfWCwgeSk7XG4gICAgICAgICAgICBsZXQgc2hpZnQgPSAwO1xuICAgICAgICAgICAgaWYgKFtcIkhQXCIsIFwiUFBcIl0uaW5jbHVkZXMoc3RhdCkpIHtcbiAgICAgICAgICAgICAgICBzaGlmdCA9IC04O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zdGF0c19jdXJyZW50X3RleHRzW3N0YXRdID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgICAgIFNUQVRTX0NVUlJFTlRfWCArIHNoaWZ0LFxuICAgICAgICAgICAgICAgIHksXG4gICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdHNfbmV4dF90ZXh0c1tzdGF0XSA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgU1RBVFNfTkVYVF9YLCB5LCB0cnVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5jbGFzc19uYW1lX2Fycm93ID0gdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoXG4gICAgICAgICAgICBBUlJPV19DSEFOR0VfQ0xBU1NfWCxcbiAgICAgICAgICAgIEFSUk9XX0NIQU5HRV9DTEFTU19ZLFxuICAgICAgICAgICAgXCJhcnJvd19jaGFuZ2VcIlxuICAgICAgICApO1xuICAgICAgICB0aGlzLmluaXRfYXJyb3dfYmxpbmtzKCk7XG4gICAgfVxuXG4gICAgaW5pdF9hcnJvd19ibGlua3MoKSB7XG4gICAgICAgIHRoaXMuY2xhc3NfbmFtZV9hcnJvd19ibGlua190aW1lciA9IHRoaXMuZ2FtZS50aW1lLmNyZWF0ZShmYWxzZSk7XG4gICAgICAgIHRoaXMuY2xhc3NfbmFtZV9hcnJvd19ibGlua190aW1lci5sb29wKDkwLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNsYXNzX25hbWVfYXJyb3cuYWxwaGEgPSB0aGlzLmNsYXNzX25hbWVfYXJyb3cuYWxwaGEgPyAwIDogMTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5jbGFzc19uYW1lX2Fycm93X2JsaW5rX3RpbWVyLnN0YXJ0KCk7XG4gICAgICAgIHRoaXMuY2xhc3NfbmFtZV9hcnJvd19ibGlua190aW1lci5wYXVzZSgpO1xuICAgICAgICB0aGlzLmNsYXNzX25hbWVfYXJyb3cuYWxwaGEgPSAwO1xuICAgIH1cblxuICAgIG1vdW50X3dpbmRvdygpIHtcbiAgICAgICAgY29uc3QgYXZhdGFyX3Nwcml0ZSA9IHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFxuICAgICAgICAgICAgQVZBVEFSX1gsXG4gICAgICAgICAgICBBVkFUQVJfWSxcbiAgICAgICAgICAgIFwiYXZhdGFyc1wiLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgdGhpcy5jaGFyLmtleV9uYW1lXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc3ByaXRlcy5wdXNoKGF2YXRhcl9zcHJpdGUpO1xuXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5jaGFyLm5hbWUsIHRoaXMuY2hhcl9uYW1lX3RleHQpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuY2hhci5sZXZlbC50b1N0cmluZygpLCB0aGlzLmxldmVsX251bWJlcl90ZXh0KTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmNoYXIuY2xhc3MubmFtZSwgdGhpcy5jbGFzc190ZXh0KTtcblxuICAgICAgICBlbGVtZW50c19saXN0LmZvckVhY2goKGVsZW1lbnQsIGkpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFyW2VsZW1lbnQgKyBcIl9kamlubmlcIl0ubGVuZ3RoLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgdGhpcy5kamlubl9udW1iZXJfdGV4dHNbZWxlbWVudF1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjb25zdCBzdGFyX3dpZHRoID0gNixcbiAgICAgICAgICAgICAgICBjaGFyX3dpZHRoID0gNjtcbiAgICAgICAgICAgIGNvbnN0IHggPSBESklOTl9OVU1CRVJfWCAtIHN0YXJfd2lkdGggLSBjaGFyX3dpZHRoIC0gMSAtIGkgKiBESklOTl9OVU1CRVJfU0xPVF9XSURUSDtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJfc3ByaXRlID0gdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoeCwgREpJTk5fTlVNQkVSX1kgKyAxLCBlbGVtZW50ICsgXCJfc3RhclwiKTtcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlcy5wdXNoKHN0YXJfc3ByaXRlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgcHJldmlld192YWx1ZXMgPSB0aGlzLmNoYXIucHJldmlld19kamlubl9jaGFuZ2UoXG4gICAgICAgICAgICBvcmRlcmVkX21haW5fc3RhdHMsXG4gICAgICAgICAgICB0aGlzLmRqaW5uaS5tYXAoZCA9PiBkLmtleV9uYW1lKSxcbiAgICAgICAgICAgIHRoaXMubmV4dF9kamlubmlfc3RhdHVzLFxuICAgICAgICAgICAgdGhpcy5hY3Rpb25cbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHByZXZpZXdfdmFsdWVzLmNsYXNzX2tleV9uYW1lICE9PSB0aGlzLmNoYXIuY2xhc3Mua2V5X25hbWUpIHtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQocHJldmlld192YWx1ZXMuY2xhc3NfbmFtZSwgdGhpcy5uZXdfY2xhc3NfdGV4dCk7XG4gICAgICAgICAgICB0aGlzLmNsYXNzX25hbWVfYXJyb3dfYmxpbmtfdGltZXIucmVzdW1lKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiXCIsIHRoaXMubmV3X2NsYXNzX3RleHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdHMuZm9yRWFjaCgoc3RhdCwgaSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudF9zdGF0ID0gdGhpcy5jaGFyW29yZGVyZWRfbWFpbl9zdGF0c1tpXV07XG4gICAgICAgICAgICBjb25zdCBuZXh0X3N0YXQgPSBwcmV2aWV3X3ZhbHVlc1tvcmRlcmVkX21haW5fc3RhdHNbaV1dO1xuXG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KGN1cnJlbnRfc3RhdC50b1N0cmluZygpLCB0aGlzLnN0YXRzX2N1cnJlbnRfdGV4dHNbc3RhdF0pO1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChuZXh0X3N0YXQudG9TdHJpbmcoKSwgdGhpcy5zdGF0c19uZXh0X3RleHRzW3N0YXRdKTtcblxuICAgICAgICAgICAgY29uc3QgeSA9IFNUQVRTX0JBU0VfWSArIGkgKiBudW1iZXJzLkZPTlRfU0laRSAtIDM7XG4gICAgICAgICAgICBsZXQgc2hpZnQgPSAwO1xuXG4gICAgICAgICAgICBpZiAoW1wiSFBcIiwgXCJQUFwiXS5pbmNsdWRlcyhzdGF0KSkge1xuICAgICAgICAgICAgICAgIHNoaWZ0ID0gLTg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY3VycmVudF9zdGF0ICE9PSBuZXh0X3N0YXQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhcnJvd19zcHJpdGUgPSB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChcbiAgICAgICAgICAgICAgICAgICAgU1RBVFNfQ1VSUkVOVF9YICsgc2hpZnQsXG4gICAgICAgICAgICAgICAgICAgIHksXG4gICAgICAgICAgICAgICAgICAgIFwic3RhdF9cIiArIChuZXh0X3N0YXQgPiBjdXJyZW50X3N0YXQgPyBcInVwXCIgOiBcImRvd25cIilcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuc3ByaXRlcy5wdXNoKGFycm93X3Nwcml0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHVubW91bnRfd2luZG93KCkge1xuICAgICAgICB0aGlzLnNwcml0ZXMuZm9yRWFjaChzcHJpdGUgPT4ge1xuICAgICAgICAgICAgc3ByaXRlLmRlc3Ryb3koKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5jbGFzc19uYW1lX2Fycm93LmFscGhhID0gMDtcbiAgICAgICAgaWYgKCF0aGlzLmNsYXNzX25hbWVfYXJyb3dfYmxpbmtfdGltZXIucGF1c2VkKSB7XG4gICAgICAgICAgICB0aGlzLmNsYXNzX25hbWVfYXJyb3dfYmxpbmtfdGltZXIucGF1c2UoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9wZW4oY2hhcjogTWFpbkNoYXIsIGRqaW5uaTogRGppbm5bXSwgbmV4dF9kamlubmlfc3RhdHVzOiBkamlubl9zdGF0dXNbXSwgYWN0aW9uPzogc3RyaW5nLCBjYWxsYmFjaz86IEZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMuY2hhciA9IGNoYXI7XG4gICAgICAgIHRoaXMuZGppbm5pID0gZGppbm5pO1xuICAgICAgICB0aGlzLm5leHRfZGppbm5pX3N0YXR1cyA9IG5leHRfZGppbm5pX3N0YXR1cztcbiAgICAgICAgdGhpcy5hY3Rpb24gPSBhY3Rpb247XG4gICAgICAgIHRoaXMubW91bnRfd2luZG93KCk7XG5cbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zaG93KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2luZG93X29wZW4gPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgY2xvc2UoY2FsbGJhY2s/OiBGdW5jdGlvbikge1xuICAgICAgICB0aGlzLnVubW91bnRfd2luZG93KCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY2xvc2UoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmYWxzZSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtUZXh0T2JqLCBXaW5kb3d9IGZyb20gXCIuLi8uLi9XaW5kb3dcIjtcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSBcIi4uLy4uL21hZ2ljX251bWJlcnNcIjtcbmltcG9ydCB7R29sZGVuU3VufSBmcm9tIFwiLi4vLi4vR29sZGVuU3VuXCI7XG5pbXBvcnQge01haW5DaGFyfSBmcm9tIFwiLi4vLi4vTWFpbkNoYXJcIjtcbmltcG9ydCB7RGppbm4sIGRqaW5uX3N0YXR1c30gZnJvbSBcIi4uLy4uL0RqaW5uXCI7XG5cbmNvbnN0IEJBU0VfV0lOX1dJRFRIID0gMTE2O1xuY29uc3QgQkFTRV9XSU5fSEVJR0hUID0gMTE2O1xuY29uc3QgQkFTRV9XSU5fWCA9IDEyMDtcbmNvbnN0IEJBU0VfV0lOX1kgPSA0MDtcblxuY29uc3QgRUxFTV9QRVJfUEFHRSA9IDU7XG5jb25zdCBFTEVNX1BBRERJTkdfVE9QID0gMTI7XG5jb25zdCBFTEVNX1BBRERJTkdfTEVGVCA9IDg7XG5jb25zdCBTUEFDRV9CRVRXRUVOX0lURU1TID0gMjtcblxuY29uc3QgUFNZX1BQX1ggPSAxMDk7XG5jb25zdCBQU1lfUFBfQ09TVF9YID0gODY7XG5jb25zdCBQU1lfUFBfQ09TVF9ZID0gODtcbmNvbnN0IEVMRU1fTkFNRV9JQ09OX1NISUZUID0gNDtcblxuY29uc3QgRk9SV0FSRCA9IDE7XG5jb25zdCBCQUNLV0FSRCA9IC0xO1xuXG5jb25zdCBQU1lfR0FJTl9DT0xPUiA9IG51bWJlcnMuWUVMTE9XX0ZPTlRfQ09MT1I7XG5jb25zdCBQU1lfTE9TVF9DT0xPUiA9IG51bWJlcnMuUkVEX0ZPTlRfQ09MT1I7XG5cbmNvbnN0IFBTWV9JTkZPXzFfWSA9IDk2O1xuY29uc3QgUFNZX0lORk9fWCA9IDg7XG5jb25zdCBQU1lfSU5GT18yX1kgPSBQU1lfSU5GT18xX1kgKyAxICsgbnVtYmVycy5GT05UX1NJWkU7XG5cbmV4cG9ydCBjbGFzcyBEamlublBzeW5lcmd5V2luZG93IHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6IEdvbGRlblN1bjtcblxuICAgIHB1YmxpYyB3aW5kb3dfb3BlbjogYm9vbGVhbjtcbiAgICBwdWJsaWMgdGV4dF9zcHJpdGVzX2luX3dpbmRvdzogVGV4dE9ialtdO1xuICAgIHB1YmxpYyBpY29uX3Nwcml0ZXNfaW5fd2luZG93OiBQaGFzZXIuU3ByaXRlW107XG5cbiAgICBwdWJsaWMgYmFzZV93aW5kb3c6IFdpbmRvdztcbiAgICBwdWJsaWMgcHN5X2luZm9fMV90ZXh0OiBUZXh0T2JqO1xuICAgIHB1YmxpYyBwc3lfaW5mb18yX3RleHQ6IFRleHRPYmo7XG5cbiAgICBwdWJsaWMgZXhlY3V0ZV9vcGVyYXRpb246IGJvb2xlYW47XG4gICAgcHVibGljIGNsb3NlX2NhbGxiYWNrOiBGdW5jdGlvbjtcbiAgICBwdWJsaWMgbmV4dF9zdGF0ZV9jYWxsYmFjazogRnVuY3Rpb247XG5cbiAgICBwdWJsaWMgcGFnZV9udW1iZXI6IG51bWJlcjtcbiAgICBwdWJsaWMgcGFnZV9pbmRleDogbnVtYmVyO1xuXG4gICAgcHVibGljIGFsbF9hYmlsaXRpZXM6IHN0cmluZ1tdO1xuICAgIHB1YmxpYyBhYmlsaXRpZXM6IHN0cmluZ1tdO1xuICAgIHB1YmxpYyBnYWluZWRfYWJpbGl0aWVzOiBzdHJpbmdbXTtcbiAgICBwdWJsaWMgbG9zdF9hYmlsaXRpZXM6IHN0cmluZ1tdO1xuICAgIHB1YmxpYyBpbnRlcnNlY3Rpb25fYWJpbGl0aWVzOiBzdHJpbmdbXTtcbiAgICBwdWJsaWMgY3VycmVudF9hYmlsaXRpZXM6IHN0cmluZ1tdO1xuICAgIHB1YmxpYyBuZXh0X2FiaWxpdGllczogc3RyaW5nW107XG5cbiAgICBwdWJsaWMgY2hhcjogTWFpbkNoYXI7XG4gICAgcHVibGljIGRqaW5uaTogRGppbm5bXTtcbiAgICBwdWJsaWMgbmV4dF9kamlubmlfc3RhdHVzOiBkamlubl9zdGF0dXNbXTtcbiAgICBwdWJsaWMgYWN0aW9uOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lOiBQaGFzZXIuR2FtZSwgZGF0YTogR29sZGVuU3VuKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG5cbiAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLnRleHRfc3ByaXRlc19pbl93aW5kb3cgPSBbXTtcbiAgICAgICAgdGhpcy5pY29uX3Nwcml0ZXNfaW5fd2luZG93ID0gW107XG5cbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBCQVNFX1dJTl9YLCBCQVNFX1dJTl9ZLCBCQVNFX1dJTl9XSURUSCwgQkFTRV9XSU5fSEVJR0hUKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlBQXCIsIFBTWV9QUF9DT1NUX1gsIFBTWV9QUF9DT1NUX1kpO1xuICAgICAgICB0aGlzLnBzeV9pbmZvXzFfdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgUFNZX0lORk9fWCwgUFNZX0lORk9fMV9ZKTtcbiAgICAgICAgdGhpcy5wc3lfaW5mb18yX3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIFBTWV9JTkZPX1gsIFBTWV9JTkZPXzJfWSk7XG4gICAgfVxuXG4gICAgcHJldmlvdXNfcGFnZSgpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VfcGFnZShCQUNLV0FSRCk7XG4gICAgfVxuXG4gICAgbmV4dF9wYWdlKCkge1xuICAgICAgICB0aGlzLmNoYW5nZV9wYWdlKEZPUldBUkQpO1xuICAgIH1cblxuICAgIGdyYW50X2NvbnRyb2woKSB7XG4gICAgICAgIGxldCBjb250cm9scyA9IFtcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkxFRlQsIG9uX2Rvd246IHRoaXMucHJldmlvdXNfcGFnZS5iaW5kKHRoaXMpfSxcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLlJJR0hULCBvbl9kb3duOiB0aGlzLm5leHRfcGFnZS5iaW5kKHRoaXMpfSxcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLlIsIG9uX2Rvd246IHRoaXMubmV4dF9zdGF0ZV9jYWxsYmFja30sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAga2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5BLFxuICAgICAgICAgICAgICAgIG9uX2Rvd246ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5leGVjdXRlX29wZXJhdGlvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UodGhpcy5jbG9zZV9jYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAga2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5CLFxuICAgICAgICAgICAgICAgIG9uX2Rvd246ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5leGVjdXRlX29wZXJhdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKHRoaXMuY2xvc2VfY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdO1xuICAgICAgICB0aGlzLmRhdGEuY29udHJvbF9tYW5hZ2VyLnNldF9jb250cm9sKGNvbnRyb2xzLCB7XG4gICAgICAgICAgICBsb29wX2NvbmZpZ3M6IHtob3Jpem9udGFsOiB0cnVlfSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2V0X3BhZ2VfbnVtYmVyKCkge1xuICAgICAgICBjb25zdCBsaXN0X2xlbmd0aCA9IHRoaXMuYWxsX2FiaWxpdGllcy5sZW5ndGg7XG4gICAgICAgIHRoaXMucGFnZV9udW1iZXIgPSAoKChsaXN0X2xlbmd0aCAtIDEpIC8gRUxFTV9QRVJfUEFHRSkgfCAwKSArIDE7XG4gICAgICAgIGlmICh0aGlzLnBhZ2VfaW5kZXggPj0gdGhpcy5wYWdlX251bWJlcikge1xuICAgICAgICAgICAgdGhpcy5wYWdlX2luZGV4ID0gdGhpcy5wYWdlX251bWJlciAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5wYWdlX2luZGljYXRvci5pbml0aWFsaXplKHRoaXMucGFnZV9udW1iZXIsIHRoaXMucGFnZV9pbmRleCk7XG4gICAgfVxuXG4gICAgY2hhbmdlX3BhZ2UocGFnZV9zaGlmdDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMucGFnZV9pbmRleCArPSBwYWdlX3NoaWZ0O1xuICAgICAgICBpZiAodGhpcy5wYWdlX2luZGV4ID09PSB0aGlzLnBhZ2VfbnVtYmVyKSB7XG4gICAgICAgICAgICB0aGlzLnBhZ2VfaW5kZXggPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucGFnZV9pbmRleCA8IDApIHtcbiAgICAgICAgICAgIHRoaXMucGFnZV9pbmRleCA9IHRoaXMucGFnZV9udW1iZXIgLSAxO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0X2FiaWxpdGllc19saXN0KCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cucGFnZV9pbmRpY2F0b3Iuc2VsZWN0X3BhZ2UodGhpcy5wYWdlX2luZGV4KTtcbiAgICB9XG5cbiAgICBzZXRfYWJpbGl0aWVzX2xpc3QoKSB7XG4gICAgICAgIHRoaXMuY2xlYXJfc3ByaXRlcygpO1xuICAgICAgICB0aGlzLmFiaWxpdGllcyA9IHRoaXMuYWxsX2FiaWxpdGllcy5zbGljZShcbiAgICAgICAgICAgIHRoaXMucGFnZV9pbmRleCAqIEVMRU1fUEVSX1BBR0UsXG4gICAgICAgICAgICAodGhpcy5wYWdlX2luZGV4ICsgMSkgKiBFTEVNX1BFUl9QQUdFXG4gICAgICAgICk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5hYmlsaXRpZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGtleV9uYW1lID0gdGhpcy5hYmlsaXRpZXNbaV07XG4gICAgICAgICAgICBjb25zdCB4ID0gRUxFTV9QQURESU5HX0xFRlQ7XG4gICAgICAgICAgICBjb25zdCB5ID0gRUxFTV9QQURESU5HX1RPUCArIGkgKiAobnVtYmVycy5JQ09OX0hFSUdIVCArIFNQQUNFX0JFVFdFRU5fSVRFTVMpO1xuICAgICAgICAgICAgY29uc3QgaWNvbl94ID0geCArIChudW1iZXJzLklDT05fV0lEVEggPj4gMSk7XG4gICAgICAgICAgICBjb25zdCBpY29uX3kgPSB5ICsgKG51bWJlcnMuSUNPTl9IRUlHSFQgPj4gMSk7XG4gICAgICAgICAgICBjb25zdCB4X2VsZW1fbmFtZSA9IEVMRU1fUEFERElOR19MRUZUICsgbnVtYmVycy5JQ09OX1dJRFRIICsgMjtcbiAgICAgICAgICAgIGNvbnN0IHBzeW5lcmd5X25hbWVfc3ByaXRlID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFtrZXlfbmFtZV0ubmFtZSxcbiAgICAgICAgICAgICAgICB4X2VsZW1fbmFtZSxcbiAgICAgICAgICAgICAgICB5ICsgRUxFTV9OQU1FX0lDT05fU0hJRlRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnRleHRfc3ByaXRlc19pbl93aW5kb3cucHVzaChwc3luZXJneV9uYW1lX3Nwcml0ZSk7XG4gICAgICAgICAgICB0aGlzLmljb25fc3ByaXRlc19pbl93aW5kb3cucHVzaChcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChpY29uX3gsIGljb25feSwgXCJhYmlsaXRpZXNfaWNvbnNcIiwgdW5kZWZpbmVkLCBrZXlfbmFtZSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLmljb25fc3ByaXRlc19pbl93aW5kb3dbaV0uYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcbiAgICAgICAgICAgIGNvbnN0IHBzeW5lcmd5X2Nvc3Rfc3ByaXRlID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFtrZXlfbmFtZV0ucHBfY29zdCxcbiAgICAgICAgICAgICAgICBQU1lfUFBfWCxcbiAgICAgICAgICAgICAgICB5ICsgRUxFTV9OQU1FX0lDT05fU0hJRlQsXG4gICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMudGV4dF9zcHJpdGVzX2luX3dpbmRvdy5wdXNoKHBzeW5lcmd5X2Nvc3Rfc3ByaXRlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmdhaW5lZF9hYmlsaXRpZXMuaW5jbHVkZXMoa2V5X25hbWUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dF9jb2xvcihQU1lfR0FJTl9DT0xPUiwgcHN5bmVyZ3lfbmFtZV9zcHJpdGUpO1xuICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfY29sb3IoUFNZX0dBSU5fQ09MT1IsIHBzeW5lcmd5X2Nvc3Rfc3ByaXRlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5sb3N0X2FiaWxpdGllcy5pbmNsdWRlcyhrZXlfbmFtZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X2NvbG9yKFBTWV9MT1NUX0NPTE9SLCBwc3luZXJneV9uYW1lX3Nwcml0ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dF9jb2xvcihQU1lfTE9TVF9DT0xPUiwgcHN5bmVyZ3lfY29zdF9zcHJpdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0X2FiaWxpdGllcygpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50X2FiaWxpdGllcyA9IHRoaXMuY2hhci5hYmlsaXRpZXMuZmlsdGVyKGtleV9uYW1lID0+IHtcbiAgICAgICAgICAgIHJldHVybiBrZXlfbmFtZSBpbiB0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdDtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHByZXZpZXdfdmFsdWVzID0gdGhpcy5jaGFyLnByZXZpZXdfZGppbm5fY2hhbmdlKFxuICAgICAgICAgICAgW10sXG4gICAgICAgICAgICB0aGlzLmRqaW5uaS5tYXAoZCA9PiBkLmtleV9uYW1lKSxcbiAgICAgICAgICAgIHRoaXMubmV4dF9kamlubmlfc3RhdHVzLFxuICAgICAgICAgICAgdGhpcy5hY3Rpb25cbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5uZXh0X2FiaWxpdGllcyA9IHByZXZpZXdfdmFsdWVzLmFiaWxpdGllcy5maWx0ZXIoa2V5X25hbWUgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGtleV9uYW1lIGluIHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0O1xuICAgICAgICB9KTtcbiAgICAgICAgbGV0IGN1cnJlbnRfc2V0ID0gbmV3IFNldCh0aGlzLmN1cnJlbnRfYWJpbGl0aWVzKTtcbiAgICAgICAgbGV0IG5leHRfc2V0ID0gbmV3IFNldCh0aGlzLm5leHRfYWJpbGl0aWVzKTtcbiAgICAgICAgdGhpcy5nYWluZWRfYWJpbGl0aWVzID0gWy4uLm5leHRfc2V0XS5maWx0ZXIoeCA9PiAhY3VycmVudF9zZXQuaGFzKHgpKTtcbiAgICAgICAgdGhpcy5sb3N0X2FiaWxpdGllcyA9IFsuLi5jdXJyZW50X3NldF0uZmlsdGVyKHggPT4gIW5leHRfc2V0Lmhhcyh4KSk7XG4gICAgICAgIHRoaXMuaW50ZXJzZWN0aW9uX2FiaWxpdGllcyA9IFsuLi5jdXJyZW50X3NldF0uZmlsdGVyKHggPT4gbmV4dF9zZXQuaGFzKHgpKTtcbiAgICAgICAgdGhpcy5hbGxfYWJpbGl0aWVzID0gdGhpcy5nYWluZWRfYWJpbGl0aWVzLmNvbmNhdCh0aGlzLmludGVyc2VjdGlvbl9hYmlsaXRpZXMsIHRoaXMubG9zdF9hYmlsaXRpZXMpO1xuICAgICAgICBpZiAodGhpcy5nYWluZWRfYWJpbGl0aWVzLmxlbmd0aCA9PT0gMCAmJiB0aGlzLmxvc3RfYWJpbGl0aWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChcIiogTm8gY2hhbmdlXCIsIHRoaXMucHN5X2luZm9fMV90ZXh0KTtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfY29sb3IobnVtYmVycy5ERUZBVUxUX0ZPTlRfQ09MT1IsIHRoaXMucHN5X2luZm9fMV90ZXh0KTtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoXCJcIiwgdGhpcy5wc3lfaW5mb18yX3RleHQpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZ2FpbmVkX2FiaWxpdGllcy5sZW5ndGggJiYgdGhpcy5sb3N0X2FiaWxpdGllcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoXCIqIFBzeW5lcmd5IEdhaW5lZFwiLCB0aGlzLnBzeV9pbmZvXzFfdGV4dCk7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X2NvbG9yKFBTWV9HQUlOX0NPTE9SLCB0aGlzLnBzeV9pbmZvXzFfdGV4dCk7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiXCIsIHRoaXMucHN5X2luZm9fMl90ZXh0KTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmdhaW5lZF9hYmlsaXRpZXMubGVuZ3RoID09PSAwICYmIHRoaXMubG9zdF9hYmlsaXRpZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiKiBQc3luZXJneSBMb3N0XCIsIHRoaXMucHN5X2luZm9fMV90ZXh0KTtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfY29sb3IoUFNZX0xPU1RfQ09MT1IsIHRoaXMucHN5X2luZm9fMV90ZXh0KTtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoXCJcIiwgdGhpcy5wc3lfaW5mb18yX3RleHQpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZ2FpbmVkX2FiaWxpdGllcy5sZW5ndGggJiYgdGhpcy5sb3N0X2FiaWxpdGllcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoXCIqIFBzeW5lcmd5IEdhaW5lZFwiLCB0aGlzLnBzeV9pbmZvXzFfdGV4dCk7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X2NvbG9yKFBTWV9HQUlOX0NPTE9SLCB0aGlzLnBzeV9pbmZvXzFfdGV4dCk7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiKiBQc3luZXJneSBMb3N0XCIsIHRoaXMucHN5X2luZm9fMl90ZXh0KTtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfY29sb3IoUFNZX0xPU1RfQ09MT1IsIHRoaXMucHN5X2luZm9fMl90ZXh0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG1vdW50X3dpbmRvdygpIHtcbiAgICAgICAgdGhpcy5zZXRfYWJpbGl0aWVzKCk7XG4gICAgICAgIHRoaXMuc2V0X2FiaWxpdGllc19saXN0KCk7XG4gICAgICAgIHRoaXMuc2V0X3BhZ2VfbnVtYmVyKCk7XG4gICAgfVxuXG4gICAgY2xlYXJfc3ByaXRlcygpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmljb25fc3ByaXRlc19pbl93aW5kb3cubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX2Zyb21fZ3JvdXAodGhpcy5pY29uX3Nwcml0ZXNfaW5fd2luZG93W2ldKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmljb25fc3ByaXRlc19pbl93aW5kb3cgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnRleHRfc3ByaXRlc19pbl93aW5kb3cubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX3RleHQodGhpcy50ZXh0X3Nwcml0ZXNfaW5fd2luZG93W2ldKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRleHRfc3ByaXRlc19pbl93aW5kb3cgPSBbXTtcbiAgICB9XG5cbiAgICB1cGRhdGVfaW5mbyhjaGFyOiBNYWluQ2hhciwgZGppbm5pOiBEamlubltdLCBuZXh0X2RqaW5uaV9zdGF0dXM6IGRqaW5uX3N0YXR1c1tdKSB7XG4gICAgICAgIHRoaXMuY2xlYXJfc3ByaXRlcygpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnBhZ2VfaW5kaWNhdG9yLnRlcm1pbmFudGUoKTtcbiAgICAgICAgdGhpcy5jaGFyID0gY2hhcjtcbiAgICAgICAgdGhpcy5kamlubmkgPSBkamlubmk7XG4gICAgICAgIHRoaXMubmV4dF9kamlubmlfc3RhdHVzID0gbmV4dF9kamlubmlfc3RhdHVzO1xuICAgICAgICB0aGlzLnBhZ2VfaW5kZXggPSAwO1xuICAgICAgICB0aGlzLm1vdW50X3dpbmRvdygpO1xuICAgIH1cblxuICAgIG9wZW4oXG4gICAgICAgIGNoYXI6IE1haW5DaGFyLFxuICAgICAgICBkamlubmk6IERqaW5uW10sXG4gICAgICAgIG5leHRfZGppbm5pX3N0YXR1czogZGppbm5fc3RhdHVzW10sXG4gICAgICAgIGNsb3NlX2NhbGxiYWNrOiBGdW5jdGlvbixcbiAgICAgICAgaGlkZGVuOiBib29sZWFuID0gZmFsc2UsXG4gICAgICAgIG5leHRfc3RhdGVfY2FsbGJhY2s/OiBGdW5jdGlvbixcbiAgICAgICAgYWN0aW9uPzogc3RyaW5nLFxuICAgICAgICBjYWxsYmFjazogRnVuY3Rpb24gPSB1bmRlZmluZWRcbiAgICApIHtcbiAgICAgICAgdGhpcy5jaGFyID0gY2hhcjtcbiAgICAgICAgdGhpcy5kamlubmkgPSBkamlubmk7XG4gICAgICAgIHRoaXMubmV4dF9kamlubmlfc3RhdHVzID0gbmV4dF9kamlubmlfc3RhdHVzO1xuICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrID0gY2xvc2VfY2FsbGJhY2s7XG4gICAgICAgIHRoaXMuZXhlY3V0ZV9vcGVyYXRpb24gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wYWdlX2luZGV4ID0gMDtcbiAgICAgICAgdGhpcy5tb3VudF93aW5kb3coKTtcbiAgICAgICAgdGhpcy5uZXh0X3N0YXRlX2NhbGxiYWNrID0gbmV4dF9zdGF0ZV9jYWxsYmFjaztcbiAgICAgICAgdGhpcy5hY3Rpb24gPSBhY3Rpb247XG4gICAgICAgIGlmIChoaWRkZW4pIHtcbiAgICAgICAgICAgIHRoaXMud2luZG93X29wZW4gPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2hvdygoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGNsb3NlKGNhbGxiYWNrPzogRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5jbGVhcl9zcHJpdGVzKCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cucGFnZV9pbmRpY2F0b3IudGVybWluYW50ZSgpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmNsb3NlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sodGhpcy5leGVjdXRlX29wZXJhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG59XG4iLCJpbXBvcnQge1RleHRPYmosIFdpbmRvd30gZnJvbSBcIi4uLy4uL1dpbmRvd1wiO1xuaW1wb3J0IHtEamlubiwgZGppbm5fc3RhdHVzfSBmcm9tIFwiLi4vLi4vRGppbm5cIjtcbmltcG9ydCB7TWFpbkNoYXJ9IGZyb20gXCIuLi8uLi9NYWluQ2hhclwiO1xuXG5jb25zdCBCQVNFX1dJTl9XSURUSCA9IDEzMjtcbmNvbnN0IEJBU0VfV0lOX0hFSUdIVCA9IDM2O1xuY29uc3QgQkFTRV9XSU5fWCA9IDEwNDtcbmNvbnN0IEJBU0VfV0lOX1kgPSAwO1xuXG5jb25zdCBDSE9PU0VfQV9ESl9YID0gODtcbmNvbnN0IENIT09TRV9BX0RKX1kgPSA4O1xuXG5jb25zdCBDSEFSX05BTUVfWCA9IDg7XG5jb25zdCBDSEFSX05BTUVfWSA9IDE2O1xuXG5jb25zdCBESklOTl9OQU1FX1ggPSA2NDtcbmNvbnN0IERKSU5OX05BTUVfWSA9IDE2O1xuXG5jb25zdCBTSElGVF9LRVlfWCA9IDg7XG5jb25zdCBTSElGVF9LRVlfWSA9IDI0O1xuXG5jb25zdCBESklOTl9BQ1RJT05fWCA9IFNISUZUX0tFWV9YICsgMjM7XG5jb25zdCBESklOTl9BQ1RJT05fWSA9IDI0O1xuXG5leHBvcnQgY2xhc3MgRGppbm5BY3Rpb25XaW5kb3cge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcblxuICAgIHB1YmxpYyB3aW5kb3dfb3BlbjogYm9vbGVhbjtcbiAgICBwdWJsaWMgc3Rhcl9zcHJpdGU6IFBoYXNlci5TcHJpdGU7XG5cbiAgICBwdWJsaWMgYmFzZV93aW5kb3c6IFdpbmRvdztcblxuICAgIHB1YmxpYyBhY3Rpb25fZGVzY3JpcHRpb25fdGV4dDogVGV4dE9iajtcbiAgICBwdWJsaWMgY2hhcl9uYW1lX3RleHQ6IFRleHRPYmo7XG4gICAgcHVibGljIGRqaW5uX25hbWVfdGV4dDogVGV4dE9iajtcbiAgICBwdWJsaWMgYWN0aW9uX3RleHQ6IFRleHRPYmo7XG5cbiAgICBwdWJsaWMgc2hpZnRfa2V5OiB7XG4gICAgICAgIHNoYWRvdzogUGhhc2VyLlNwcml0ZTtcbiAgICAgICAgdGV4dDogUGhhc2VyLlNwcml0ZTtcbiAgICB9O1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZTogUGhhc2VyLkdhbWUpIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcblxuICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc3Rhcl9zcHJpdGUgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cgPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgQkFTRV9XSU5fWCwgQkFTRV9XSU5fWSwgQkFTRV9XSU5fV0lEVEgsIEJBU0VfV0lOX0hFSUdIVCk7XG5cbiAgICAgICAgdGhpcy5hY3Rpb25fZGVzY3JpcHRpb25fdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgQ0hPT1NFX0FfREpfWCwgQ0hPT1NFX0FfREpfWSk7XG4gICAgICAgIHRoaXMuY2hhcl9uYW1lX3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIENIQVJfTkFNRV9YLCBDSEFSX05BTUVfWSk7XG4gICAgICAgIHRoaXMuZGppbm5fbmFtZV90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBESklOTl9OQU1FX1gsIERKSU5OX05BTUVfWSk7XG4gICAgICAgIHRoaXMuYWN0aW9uX3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIERKSU5OX0FDVElPTl9YLCBESklOTl9BQ1RJT05fWSk7XG5cbiAgICAgICAgdGhpcy5zaGlmdF9rZXkgPSB7XG4gICAgICAgICAgICBzaGFkb3c6IHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFNISUZUX0tFWV9YICsgMSwgU0hJRlRfS0VZX1kgKyAxLCBcInNoaWZ0X2tleWJvYXJkXCIsIDB4MCksXG4gICAgICAgICAgICB0ZXh0OiB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChTSElGVF9LRVlfWCwgU0hJRlRfS0VZX1ksIFwic2hpZnRfa2V5Ym9hcmRcIiksXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgc2V0X2FjdGlvbl90ZXh0KHN0YXR1czogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoXCJDaG9vc2UgYSBkamlubi5cIiwgdGhpcy5hY3Rpb25fZGVzY3JpcHRpb25fdGV4dCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoXCJcIiwgdGhpcy5jaGFyX25hbWVfdGV4dCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoXCJcIiwgdGhpcy5kamlubl9uYW1lX3RleHQpO1xuXG4gICAgICAgIHRoaXMuc2hpZnRfa2V5LnRleHQuYWxwaGEgPSB0aGlzLnNoaWZ0X2tleS5zaGFkb3cuYWxwaGEgPSAxO1xuICAgICAgICBpZiAodGhpcy5zdGFyX3Nwcml0ZSkge1xuICAgICAgICAgICAgdGhpcy5zdGFyX3Nwcml0ZS5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLnN0YXJfc3ByaXRlID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAoc3RhdHVzKSB7XG4gICAgICAgICAgICBjYXNlIGRqaW5uX3N0YXR1cy5TRVQ6XG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChcIjogU3RhbmRieVwiLCB0aGlzLmFjdGlvbl90ZXh0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZGppbm5fc3RhdHVzLlNUQU5EQlk6XG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChcIjogU2V0XCIsIHRoaXMuYWN0aW9uX3RleHQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0X2FjdGlvbl9mb3Jfc3BlY2lmaWNfZGppbm4odGhpc19jaGFyOiBNYWluQ2hhciwgdGhpc19kamlubjogRGppbm4pIHtcbiAgICAgICAgdGhpcy5zdGFyX3Nwcml0ZSA9IHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFxuICAgICAgICAgICAgREpJTk5fTkFNRV9YIC0gNyxcbiAgICAgICAgICAgIERKSU5OX05BTUVfWSArIDEsXG4gICAgICAgICAgICB0aGlzX2RqaW5uLmVsZW1lbnQgKyBcIl9zdGFyXCJcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiV2hhdCB3aWxsIHlvdSBkbz9cIiwgdGhpcy5hY3Rpb25fZGVzY3JpcHRpb25fdGV4dCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGhpc19jaGFyLm5hbWUgKyBcIidzXCIsIHRoaXMuY2hhcl9uYW1lX3RleHQpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXNfZGppbm4ubmFtZSwgdGhpcy5kamlubl9uYW1lX3RleHQpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiXCIsIHRoaXMuYWN0aW9uX3RleHQpO1xuXG4gICAgICAgIHRoaXMuc2hpZnRfa2V5LnRleHQuYWxwaGEgPSB0aGlzLnNoaWZ0X2tleS5zaGFkb3cuYWxwaGEgPSAwO1xuICAgIH1cblxuICAgIG9wZW4oY2FsbGJhY2s/OiBGdW5jdGlvbikge1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNob3coKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IHRydWU7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBjbG9zZShjYWxsYmFjaz86IEZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY2xvc2UoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmYWxzZSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtTdGF0dXNDb21wb25lbnR9IGZyb20gXCIuL1N0YXR1c0NvbXBvbmVudFwiO1xuaW1wb3J0IHtXaW5kb3d9IGZyb20gXCIuLi9XaW5kb3dcIjtcbmltcG9ydCB7R29sZGVuU3VufSBmcm9tIFwiLi4vR29sZGVuU3VuXCI7XG5pbXBvcnQge0N1cnNvck1hbmFnZXIsIFBvaW50VmFyaWFudHN9IGZyb20gXCIuLi91dGlscy9DdXJzb3JNYW5hZ2VyXCI7XG5pbXBvcnQge0JhdHRsZVN0YXR1c0VmZmVjdCwgQmF0dGxlU3RhdHVzV2luZG93fSBmcm9tIFwiLi4vd2luZG93cy9iYXR0bGUvQmF0dGxlU3RhdHVzV2luZG93XCI7XG5pbXBvcnQge3Blcm1hbmVudF9zdGF0dXN9IGZyb20gXCIuLi9QbGF5ZXJcIjtcbmltcG9ydCB7b3JkZXJlZF9lbGVtZW50c30gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgKiBhcyBfIGZyb20gXCJsb2Rhc2hcIjtcbmltcG9ydCB7TWFpblN0YXR1c01lbnUsIE1haW5TdGF0dXNTdGF0ZXN9IGZyb20gXCIuLi9tYWluX21lbnVzL01haW5TdGF0dXNNZW51XCI7XG5cbmV4cG9ydCBlbnVtIE1haW5TdGF0aXN0aWNzIHtcbiAgICBOQU1FLFxuICAgIEVYUCxcbiAgICBIUCxcbiAgICBQUCxcbiAgICBESklOTixcbiAgICBFTEVNX0xFVkVMUyxcbiAgICBFTEVNX1BPV0VSLFxuICAgIEVMRU1fUkVTSVNULFxufVxuXG5leHBvcnQgY2xhc3MgTWFpblN0YXR1c1N0YXRpc3RpY3MgZXh0ZW5kcyBTdGF0dXNDb21wb25lbnQge1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgTWVudVN0YXR1c01zZ3MgPSB7XG4gICAgICAgIFtwZXJtYW5lbnRfc3RhdHVzLkRPV05FRF06IHtcbiAgICAgICAgICAgIGxpbmUxOiBcIllvdSBhcmUgZG93bi4gUmV2aXZlIGF0IGEgU2FuY3R1bVwiLFxuICAgICAgICAgICAgbGluZTI6IFwib3Igd2l0aCB0aGUgV2F0ZXIgb2YgTGlmZS5cIixcbiAgICAgICAgfSxcbiAgICAgICAgW3Blcm1hbmVudF9zdGF0dXMuUE9JU09OXToge1xuICAgICAgICAgICAgbGluZTE6IFwiWW91J3JlIGFmZmxpY3RlZCBieSBwb2lzb24uXCIsXG4gICAgICAgICAgICBsaW5lMjogXCJDdXJlIHdpdGggQW50aWRvdGUgb3IgQ3VyZSBQb2lzb24uXCIsXG4gICAgICAgIH0sXG4gICAgICAgIFtwZXJtYW5lbnRfc3RhdHVzLlZFTk9NXToge1xuICAgICAgICAgICAgbGluZTE6IFwiWW91J3JlIGFmZmxpY3RlZCBieSB2ZW5vbS5cIixcbiAgICAgICAgICAgIGxpbmUyOiBcIkN1cmUgd2l0aCBBbnRpZG90ZSBvciBDdXJlIFBvaXNvbi5cIixcbiAgICAgICAgfSxcbiAgICAgICAgW3Blcm1hbmVudF9zdGF0dXMuRVFVSVBfQ1VSU0VdOiB7XG4gICAgICAgICAgICBsaW5lMTogXCJBIGN1cnNlZCBpdGVtIGltbW9ibGl6ZXMgeW91LlwiLFxuICAgICAgICAgICAgbGluZTI6IFwiUmVtb3ZlIGl0IGF0IGEgU2FuY3R1bS5cIixcbiAgICAgICAgfSxcbiAgICAgICAgW3Blcm1hbmVudF9zdGF0dXMuSEFVTlRdOiB7XG4gICAgICAgICAgICBsaW5lMTogXCJZb3UgcmVjZXZlIGRhbWFnZSBmcm9tIHNwaXJpdHMuXCIsXG4gICAgICAgICAgICBsaW5lMjogXCJFeG9yY2lzZSB0aGUgc3Bpcml0cyBhdCBhIFNhbmN0dW0uXCIsXG4gICAgICAgIH0sXG4gICAgICAgIG5vcm1hbDoge1xuICAgICAgICAgICAgbGluZTE6IFwiWW91ciBzdGF0dXMgaXMgbm9ybWFsLlwiLFxuICAgICAgICAgICAgbGluZTI6IFwiXCIsXG4gICAgICAgIH0sXG4gICAgfTtcblxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgTWVudURlc2NyaXB0aW9ucyA9IHtcbiAgICAgICAgW01haW5TdGF0aXN0aWNzLk5BTUVdOiB7bGluZTE6IFwiWW91ciBuYW1lIGFuZCBsZXZlbC4gRXhwZXJpZW5jZVwiLCBsaW5lMjogXCJwb2ludHMgaW5jcmVhc2UgeW91ciBsZXZlbC5cIn0sXG4gICAgICAgIFtNYWluU3RhdGlzdGljcy5FWFBdOiB7XG4gICAgICAgICAgICBsaW5lMTogXCJFeHBlcmllbmNlIHBvaW50cy4gWW91IG5lZWRcIixcbiAgICAgICAgICAgIGxpbmUyOiAoZXhwOiBudW1iZXIpID0+IGAke2V4cH0gbW9yZSB0byByZWFjaCB0aGUgbmV4dCBsZXZlbC5gLFxuICAgICAgICB9LFxuICAgICAgICBbTWFpblN0YXRpc3RpY3MuSFBdOiB7bGluZTE6IFwiWW91ciBjdXJyZW50IGFuZCBtYXggSGl0IFBvaW50cy5cIiwgbGluZTI6IFwiQXQgemVybyBIUCB5b3UgY2Fubm90IGZpZ2h0LlwifSxcbiAgICAgICAgW01haW5TdGF0aXN0aWNzLlBQXToge2xpbmUxOiBcIllvdXIgUHN5bmVyZ3kgUG9pbnRzLiBUaGV5XCIsIGxpbmUyOiBcInJlY292ZXIgYXMgeW91IHRyYXZlbC5cIn0sXG4gICAgICAgIFtNYWluU3RhdGlzdGljcy5ESklOTl06IHtsaW5lMTogXCJZb3VyIERqaW5uLiBUaGlzIGFsc28gc2hvd3NcIiwgbGluZTI6IFwid2hpY2ggb25lcyBhcmUgc2V0LlwifSxcbiAgICAgICAgW01haW5TdGF0aXN0aWNzLkVMRU1fTEVWRUxTXToge1xuICAgICAgICAgICAgbGluZTE6IFwiRWxlbWVudGFsIExldmVscyBpbmRpY2F0ZSB0aGUgc2tpbGxcIixcbiAgICAgICAgICAgIGxpbmUyOiBcImxldmVsIG9mIHRoZSBlbGVtZW50YWwgYXR0cmlidXRlLlwiLFxuICAgICAgICB9LFxuICAgICAgICBbTWFpblN0YXRpc3RpY3MuRUxFTV9QT1dFUl06IHtsaW5lMTogXCJQb3dlciByZWZsZWN0cyB0aGUgZGFtYWdlIHlvdVwiLCBsaW5lMjogXCJjYW4gZG8gd2l0aCBlYWNoIGVsZW1lbnQuXCJ9LFxuICAgICAgICBbTWFpblN0YXRpc3RpY3MuRUxFTV9SRVNJU1RdOiB7XG4gICAgICAgICAgICBsaW5lMTogXCJSZXNpc3QgcmVmbGVjdHMgeW91ciBkZWZlbnNpdmVcIixcbiAgICAgICAgICAgIGxpbmUyOiBcInN0cmVuZ3RoIGFnYWluc3QgZWFjaCBlbGVtZW50LlwiLFxuICAgICAgICB9LFxuICAgIH07XG5cbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEVGRkVDVF9MQUJFTFMgPSB7XG4gICAgICAgIFtwZXJtYW5lbnRfc3RhdHVzLkRPV05FRF06IFwiRG93bmVkXCIsXG4gICAgICAgIFtwZXJtYW5lbnRfc3RhdHVzLkVRVUlQX0NVUlNFXTogXCJDdXJzZWRcIixcbiAgICAgICAgW3Blcm1hbmVudF9zdGF0dXMuSEFVTlRdOiBcIkhhdW50XCIsXG4gICAgICAgIFtwZXJtYW5lbnRfc3RhdHVzLlBPSVNPTl06IFwiUG9pc29uXCIsXG4gICAgICAgIFtwZXJtYW5lbnRfc3RhdHVzLlZFTk9NXTogXCJWZW5vbVwiLFxuICAgIH07XG5cbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IENVUlNPUiA9IHtcbiAgICAgICAgW01haW5TdGF0aXN0aWNzLk5BTUVdOiB7WDogMzQsIFk6IDU0fSxcbiAgICAgICAgW01haW5TdGF0aXN0aWNzLkVYUF06IHtYOiAzNCwgWTogNjJ9LFxuICAgICAgICBbTWFpblN0YXRpc3RpY3MuSFBdOiB7WDogMzQsIFk6IDcwfSxcbiAgICAgICAgW01haW5TdGF0aXN0aWNzLlBQXToge1g6IDM0LCBZOiA3OH0sXG4gICAgICAgIFtNYWluU3RhdGlzdGljcy5ESklOTl06IHtYOiA1OCwgWTogMTE4fSxcbiAgICAgICAgW01haW5TdGF0aXN0aWNzLkVMRU1fTEVWRUxTXToge1g6IDU4LCBZOiAxMjZ9LFxuICAgICAgICBbTWFpblN0YXRpc3RpY3MuRUxFTV9QT1dFUl06IHtYOiA1OCwgWTogMTM0fSxcbiAgICAgICAgW01haW5TdGF0aXN0aWNzLkVMRU1fUkVTSVNUXToge1g6IDU4LCBZOiAxNDJ9LFxuICAgICAgICBFRkZFQ1Q6IHtYOiAwLCBZOiA5NCwgU0hJRlQ6IDE2fSxcbiAgICB9O1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgSElHSExJR0hUID0ge1xuICAgICAgICBbTWFpblN0YXRpc3RpY3MuTkFNRV06IHtYOiA0OCwgWTogOCwgV0lEVEg6IDEwNCwgSEVJR0hUOiA4fSxcbiAgICAgICAgW01haW5TdGF0aXN0aWNzLkVYUF06IHtYOiA0OCwgWTogMTYsIFdJRFRIOiAxMDQsIEhFSUdIVDogOH0sXG4gICAgICAgIFtNYWluU3RhdGlzdGljcy5IUF06IHtYOiA0OCwgWTogMjQsIFdJRFRIOiAxMDQsIEhFSUdIVDogOH0sXG4gICAgICAgIFtNYWluU3RhdGlzdGljcy5QUF06IHtYOiA0OCwgWTogMzIsIFdJRFRIOiAxMDQsIEhFSUdIVDogOH0sXG4gICAgICAgIFtNYWluU3RhdGlzdGljcy5ESklOTl06IHtYOiA3MiwgWTogNzIsIFdJRFRIOiAxNjAsIEhFSUdIVDogOH0sXG4gICAgICAgIFtNYWluU3RhdGlzdGljcy5FTEVNX0xFVkVMU106IHtYOiA3MiwgWTogODAsIFdJRFRIOiAxNjAsIEhFSUdIVDogOH0sXG4gICAgICAgIFtNYWluU3RhdGlzdGljcy5FTEVNX1BPV0VSXToge1g6IDcyLCBZOiA4OCwgV0lEVEg6IDE2MCwgSEVJR0hUOiA4fSxcbiAgICAgICAgW01haW5TdGF0aXN0aWNzLkVMRU1fUkVTSVNUXToge1g6IDcyLCBZOiA5NiwgV0lEVEg6IDE2MCwgSEVJR0hUOiA4fSxcbiAgICAgICAgRUZGRUNUOiB7WDogOCwgWTogNDgsIFdJRFRIOiA0MCwgSEVJR0hUOiA4LCBTSElGVDogMTZ9LFxuICAgIH07XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgRUxFTSA9IHtcbiAgICAgICAgU1RBUlM6IHtYOiAxMjgsIFk6IDY1fSxcbiAgICAgICAgU1RBUlNfU0hJRlQ6IDMyLFxuICAgICAgICBMQUJFTDoge1g6IDcyLCBZOiA3Mn0sXG4gICAgICAgIExBQkVMX1NISUZUOiA4LFxuICAgICAgICBOVU1CRVJTOiB7RU5EX1g6IDEzMywgWTogNzIsIFhfU0hJRlQ6IDMyLCBZX1NISUZUOiA4fSxcbiAgICAgICAgREpJTk46IHtDRU5URVJfWDogMTMwLCBZOiA2NiwgWF9TSElGVDogMzJ9LFxuICAgICAgICBET1dOX1NISUZUOiAyNCxcbiAgICB9O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEVYUCA9IHtcbiAgICAgICAgTEFCRUxfWDogNDgsXG4gICAgICAgIExBQkVMX1k6IDE2LFxuICAgICAgICBWQUxVRV9FTkRfWDogMTQ5LFxuICAgICAgICBWQUxVRV9ZOiAxNixcbiAgICB9O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IE5PUk1BTF9TVEFUVVMgPSB7XG4gICAgICAgIFg6IDgsXG4gICAgICAgIFk6IDQ4LFxuICAgIH07XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgU1RBVFMgPSB7XG4gICAgICAgIExBQkVMX1g6IDE2MCxcbiAgICAgICAgTEFCRUxfWTogOCxcbiAgICAgICAgVkFMVUVfRU5EX1g6IDIyOSxcbiAgICAgICAgVkFMVUVfWTogOCxcbiAgICAgICAgTElORV9TSElGVDogOCxcbiAgICB9O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEhQID0ge1xuICAgICAgICBMQUJFTF9YOiA0OCxcbiAgICAgICAgTEFCRUxfWTogMjQsXG4gICAgICAgIE1BWF9FTkRfWDogMTQ5LFxuICAgICAgICBNQVhfWTogMjQsXG4gICAgICAgIENVUlJfRU5EX1g6IDExNyxcbiAgICAgICAgQ1VSUl9ZOiAyNCxcbiAgICB9O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFBQID0ge1xuICAgICAgICBMQUJFTF9YOiA0OCxcbiAgICAgICAgTEFCRUxfWTogMzIsXG4gICAgICAgIE1BWF9FTkRfWDogMTQ5LFxuICAgICAgICBNQVhfWTogMzIsXG4gICAgICAgIENVUlJfRU5EX1g6IDExNyxcbiAgICAgICAgQ1VSUl9ZOiAzMixcbiAgICB9O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEVGRkVDVFMgPSB7XG4gICAgICAgIElDT05fWDogOSxcbiAgICAgICAgSUNPTl9ZOiA0OCxcbiAgICAgICAgTkFNRV9YOiAyNCxcbiAgICAgICAgTkFNRV9ZOiA0OCxcbiAgICAgICAgU0hJRlQ6IDE2LFxuICAgIH07XG5cbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBMSU5FUyA9IDg7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgREpJTk5fR1JPVVBfWV9PRkZTRVQgPSA0MDtcblxuICAgIHByaXZhdGUgc3RhdGU6IE1haW5TdGF0dXNTdGF0ZXM7XG4gICAgcHJpdmF0ZSBkamlubl9ncm91cDogUGhhc2VyLkdyb3VwO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKFxuICAgICAgICBnYW1lOiBQaGFzZXIuR2FtZSxcbiAgICAgICAgZGF0YTogR29sZGVuU3VuLFxuICAgICAgICB3aW5kb3c6IFdpbmRvdyxcbiAgICAgICAgbWFuYWdlcjogQmF0dGxlU3RhdHVzV2luZG93IHwgTWFpblN0YXR1c01lbnUsXG4gICAgICAgIHBvcz86IHtsaW5lOiBudW1iZXI7IGNvbDogbnVtYmVyfVxuICAgICkge1xuICAgICAgICBzdXBlcihnYW1lLCBkYXRhLCB3aW5kb3csIG1hbmFnZXIsIHBvcyk7XG5cbiAgICAgICAgdGhpcy5kamlubl9ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2VsZWN0X29wdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT09IE1haW5TdGF0dXNTdGF0ZXMuQ0hBUkFDVEVSUykgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGhpZ2hsaWdodCA9IHt4OiAwLCB5OiAwLCB3aWR0aDogMCwgaGVpZ2h0OiAwfTtcbiAgICAgICAgbGV0IGN1cnNvcl94ID0gMDtcbiAgICAgICAgbGV0IGN1cnNvcl95ID0gMDtcblxuICAgICAgICBpZiAodGhpcy5jdXJyZW50X2NvbCAhPT0gMCkge1xuICAgICAgICAgICAgaGlnaGxpZ2h0LnggPSBNYWluU3RhdHVzU3RhdGlzdGljcy5ISUdITElHSFRbdGhpcy5jdXJyZW50X2xpbmVdLlg7XG4gICAgICAgICAgICBoaWdobGlnaHQueSA9IE1haW5TdGF0dXNTdGF0aXN0aWNzLkhJR0hMSUdIVFt0aGlzLmN1cnJlbnRfbGluZV0uWTtcbiAgICAgICAgICAgIGhpZ2hsaWdodC53aWR0aCA9IE1haW5TdGF0dXNTdGF0aXN0aWNzLkhJR0hMSUdIVFt0aGlzLmN1cnJlbnRfbGluZV0uV0lEVEg7XG4gICAgICAgICAgICBoaWdobGlnaHQuaGVpZ2h0ID0gTWFpblN0YXR1c1N0YXRpc3RpY3MuSElHSExJR0hUW3RoaXMuY3VycmVudF9saW5lXS5IRUlHSFQ7XG5cbiAgICAgICAgICAgIGN1cnNvcl94ID0gTWFpblN0YXR1c1N0YXRpc3RpY3MuQ1VSU09SW3RoaXMuY3VycmVudF9saW5lXS5YO1xuICAgICAgICAgICAgY3Vyc29yX3kgPSBNYWluU3RhdHVzU3RhdGlzdGljcy5DVVJTT1JbdGhpcy5jdXJyZW50X2xpbmVdLlk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgaGlnaGxpZ2h0X3NoaWZ0ID0gTWFpblN0YXR1c1N0YXRpc3RpY3MuSElHSExJR0hULkVGRkVDVC5TSElGVDtcbiAgICAgICAgICAgIGhpZ2hsaWdodC54ID0gTWFpblN0YXR1c1N0YXRpc3RpY3MuSElHSExJR0hULkVGRkVDVC5YO1xuICAgICAgICAgICAgaGlnaGxpZ2h0LnkgPSBNYWluU3RhdHVzU3RhdGlzdGljcy5ISUdITElHSFQuRUZGRUNULlkgKyBoaWdobGlnaHRfc2hpZnQgKiB0aGlzLmN1cnJlbnRfbGluZTtcbiAgICAgICAgICAgIGhpZ2hsaWdodC53aWR0aCA9IE1haW5TdGF0dXNTdGF0aXN0aWNzLkhJR0hMSUdIVC5FRkZFQ1QuV0lEVEg7XG4gICAgICAgICAgICBoaWdobGlnaHQuaGVpZ2h0ID0gTWFpblN0YXR1c1N0YXRpc3RpY3MuSElHSExJR0hULkVGRkVDVC5IRUlHSFQ7XG5cbiAgICAgICAgICAgIGNvbnN0IGN1cnNvcl9zaGlmdCA9IE1haW5TdGF0dXNTdGF0aXN0aWNzLkNVUlNPUi5FRkZFQ1QuU0hJRlQ7XG4gICAgICAgICAgICBjdXJzb3JfeCA9IE1haW5TdGF0dXNTdGF0aXN0aWNzLkNVUlNPUi5FRkZFQ1QuWDtcbiAgICAgICAgICAgIGN1cnNvcl95ID0gTWFpblN0YXR1c1N0YXRpc3RpY3MuQ1VSU09SLkVGRkVDVC5ZICsgY3Vyc29yX3NoaWZ0ICogdGhpcy5jdXJyZW50X2xpbmU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVfaGlnaGxpZ2h0KGhpZ2hsaWdodCk7XG5cbiAgICAgICAgY29uc3QgY3Vyc29yX3R3ZWVuID0ge3R5cGU6IEN1cnNvck1hbmFnZXIuQ3Vyc29yVHdlZW5zLlBPSU5ULCB2YXJpYW50OiBQb2ludFZhcmlhbnRzLk5PUk1BTH07XG4gICAgICAgIHRoaXMuZGF0YS5jdXJzb3JfbWFuYWdlci5tb3ZlX3RvKHt4OiBjdXJzb3JfeCwgeTogY3Vyc29yX3l9LCB7YW5pbWF0ZTogZmFsc2UsIHR3ZWVuX2NvbmZpZzogY3Vyc29yX3R3ZWVufSk7XG4gICAgfVxuXG4gICAgcHVibGljIG9uX2NoYW5nZSgpIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rfb3B0aW9uKCk7XG4gICAgICAgIGxldCBtc2dfb2JqID0gbnVsbDtcblxuICAgICAgICBpZiAodGhpcy5jdXJyZW50X2NvbCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYmF0dGxlX3N0YXR1c19lZmZlY3RzLmxlbmd0aCA9PT0gMCkgbXNnX29iaiA9IE1haW5TdGF0dXNTdGF0aXN0aWNzLk1lbnVTdGF0dXNNc2dzLm5vcm1hbDtcbiAgICAgICAgICAgIGVsc2UgbXNnX29iaiA9IE1haW5TdGF0dXNTdGF0aXN0aWNzLk1lbnVTdGF0dXNNc2dzW3RoaXMuYmF0dGxlX3N0YXR1c19lZmZlY3RzW3RoaXMuY3VycmVudF9saW5lXS5rZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbXNnX29iaiA9IHtsaW5lMTogbnVsbCwgbGluZTI6IG51bGx9O1xuICAgICAgICAgICAgbXNnX29iai5saW5lMSA9IE1haW5TdGF0dXNTdGF0aXN0aWNzLk1lbnVEZXNjcmlwdGlvbnNbdGhpcy5jdXJyZW50X2xpbmVdLmxpbmUxO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50X2xpbmUgPT09IE1haW5TdGF0aXN0aWNzLkVYUCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGV4cCA9IHRoaXMuc2VsZWN0ZWRfY2hhci5leHBfY3VydmVbdGhpcy5zZWxlY3RlZF9jaGFyLmxldmVsXSAtIHRoaXMuc2VsZWN0ZWRfY2hhci5jdXJyZW50X2V4cDtcbiAgICAgICAgICAgICAgICBtc2dfb2JqLmxpbmUyID0gTWFpblN0YXR1c1N0YXRpc3RpY3MuTWVudURlc2NyaXB0aW9uc1t0aGlzLmN1cnJlbnRfbGluZV0ubGluZTIoZXhwKTtcbiAgICAgICAgICAgIH0gZWxzZSBtc2dfb2JqLmxpbmUyID0gTWFpblN0YXR1c1N0YXRpc3RpY3MuTWVudURlc2NyaXB0aW9uc1t0aGlzLmN1cnJlbnRfbGluZV0ubGluZTI7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVfZGVzY3JpcHRpb24obXNnX29iai5saW5lMSwgbXNnX29iai5saW5lMik7XG4gICAgfVxuXG4gICAgcHVibGljIG9uX2xlZnQoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlID09PSBNYWluU3RhdHVzU3RhdGVzLkNIQVJBQ1RFUlMpIHJldHVybjtcbiAgICAgICAgY29uc3QgZWZmZWN0c19jb3VudCA9IHRoaXMuYmF0dGxlX3N0YXR1c19lZmZlY3RzLmxlbmd0aDtcblxuICAgICAgICB0aGlzLmN1cnJlbnRfY29sID0gKHRoaXMuY3VycmVudF9jb2wgKyAxKSAlIDI7XG5cbiAgICAgICAgaWYgKHRoaXMuY3VycmVudF9jb2wgPT09IDAgJiYgdGhpcy5jdXJyZW50X2xpbmUgPj0gZWZmZWN0c19jb3VudCkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50X2xpbmUgPSBlZmZlY3RzX2NvdW50ID09PSAwID8gMCA6IGVmZmVjdHNfY291bnQgLSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vbl9jaGFuZ2UoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25fcmlnaHQoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlID09PSBNYWluU3RhdHVzU3RhdGVzLkNIQVJBQ1RFUlMpIHJldHVybjtcbiAgICAgICAgY29uc3QgZWZmZWN0c19jb3VudCA9IHRoaXMuYmF0dGxlX3N0YXR1c19lZmZlY3RzLmxlbmd0aDtcblxuICAgICAgICB0aGlzLmN1cnJlbnRfY29sID0gKHRoaXMuY3VycmVudF9jb2wgKyAxKSAlIDI7XG5cbiAgICAgICAgaWYgKHRoaXMuY3VycmVudF9jb2wgPT09IDAgJiYgdGhpcy5jdXJyZW50X2xpbmUgPj0gZWZmZWN0c19jb3VudCkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50X2xpbmUgPSBlZmZlY3RzX2NvdW50ID09PSAwID8gMCA6IGVmZmVjdHNfY291bnQgLSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vbl9jaGFuZ2UoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25fdXAoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlID09PSBNYWluU3RhdHVzU3RhdGVzLkNIQVJBQ1RFUlMpIHJldHVybjtcbiAgICAgICAgY29uc3QgZWZmZWN0c19jb3VudCA9IHRoaXMuYmF0dGxlX3N0YXR1c19lZmZlY3RzLmxlbmd0aDtcblxuICAgICAgICBpZiAodGhpcy5jdXJyZW50X2NvbCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKGVmZmVjdHNfY291bnQgPD0gMSkgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50X2xpbmUgPSAodGhpcy5jdXJyZW50X2xpbmUgKyBlZmZlY3RzX2NvdW50IC0gMSkgJSBlZmZlY3RzX2NvdW50O1xuICAgICAgICB9IGVsc2UgdGhpcy5jdXJyZW50X2xpbmUgPSAodGhpcy5jdXJyZW50X2xpbmUgKyBNYWluU3RhdHVzU3RhdGlzdGljcy5MSU5FUyAtIDEpICUgTWFpblN0YXR1c1N0YXRpc3RpY3MuTElORVM7XG5cbiAgICAgICAgdGhpcy5vbl9jaGFuZ2UoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25fZG93bigpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT09IE1haW5TdGF0dXNTdGF0ZXMuQ0hBUkFDVEVSUykgcmV0dXJuO1xuICAgICAgICBjb25zdCBlZmZlY3RzX2NvdW50ID0gdGhpcy5iYXR0bGVfc3RhdHVzX2VmZmVjdHMubGVuZ3RoO1xuXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRfY29sID09PSAwKSB7XG4gICAgICAgICAgICBpZiAoZWZmZWN0c19jb3VudCA8PSAxKSByZXR1cm47XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRfbGluZSA9ICh0aGlzLmN1cnJlbnRfbGluZSArIDEpICUgZWZmZWN0c19jb3VudDtcbiAgICAgICAgfSBlbHNlIHRoaXMuY3VycmVudF9saW5lID0gKHRoaXMuY3VycmVudF9saW5lICsgMSkgJSBNYWluU3RhdHVzU3RhdGlzdGljcy5MSU5FUztcblxuICAgICAgICB0aGlzLm9uX2NoYW5nZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBpbml0aWFsaXplKCkge1xuICAgICAgICB0aGlzLmRqaW5uX2dyb3VwLnggPSB0aGlzLmdhbWUuY2FtZXJhLng7XG4gICAgICAgIHRoaXMuZGppbm5fZ3JvdXAueSA9IHRoaXMuZ2FtZS5jYW1lcmEueSArIE1haW5TdGF0dXNTdGF0aXN0aWNzLkRKSU5OX0dST1VQX1lfT0ZGU0VUO1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSAodGhpcy5tYW5hZ2VyIGFzIE1haW5TdGF0dXNNZW51KS5zdGF0ZTtcblxuICAgICAgICBjb25zdCBzdGFycyA9IFtcInZlbnVzX3N0YXJcIiwgXCJtZXJjdXJ5X3N0YXJcIiwgXCJtYXJzX3N0YXJcIiwgXCJqdXBpdGVyX3N0YXJcIl07XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RhcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHhfcG9zID0gTWFpblN0YXR1c1N0YXRpc3RpY3MuRUxFTS5TVEFSUy5YICsgaSAqIE1haW5TdGF0dXNTdGF0aXN0aWNzLkVMRU0uU1RBUlNfU0hJRlQ7XG4gICAgICAgICAgICBsZXQgeV9wb3MgPSBNYWluU3RhdHVzU3RhdGlzdGljcy5FTEVNLlNUQVJTLlk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlID09PSBNYWluU3RhdHVzU3RhdGVzLkNIQVJBQ1RFUlMpIHlfcG9zICs9IE1haW5TdGF0dXNTdGF0aXN0aWNzLkVMRU0uRE9XTl9TSElGVDtcblxuICAgICAgICAgICAgY29uc3Qgc3RhciA9IHRoaXMud2luZG93LmNyZWF0ZV9hdF9ncm91cChcbiAgICAgICAgICAgICAgICB4X3BvcyxcbiAgICAgICAgICAgICAgICB5X3BvcyxcbiAgICAgICAgICAgICAgICBzdGFyc1tpXSxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIE1haW5TdGF0dXNTdGF0aXN0aWNzLkdST1VQX0tFWVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVfc3ByaXRlcy5wdXNoKHN0YXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbGFiZWxzID0gW1wiRGppbm5cIiwgXCJMdlwiLCBcIlBvd2VyXCIsIFwiUmVzaXN0XCJdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGFiZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB4X3BvcyA9IE1haW5TdGF0dXNTdGF0aXN0aWNzLkVMRU0uTEFCRUwuWDtcbiAgICAgICAgICAgIGxldCB5X3BvcyA9IE1haW5TdGF0dXNTdGF0aXN0aWNzLkVMRU0uTEFCRUwuWSArIGkgKiBNYWluU3RhdHVzU3RhdGlzdGljcy5FTEVNLkxBQkVMX1NISUZUO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gTWFpblN0YXR1c1N0YXRlcy5DSEFSQUNURVJTKSB5X3BvcyArPSBNYWluU3RhdHVzU3RhdGlzdGljcy5FTEVNLkRPV05fU0hJRlQ7XG5cbiAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gdGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICAgICAgbGFiZWxzW2ldLFxuICAgICAgICAgICAgICAgIHhfcG9zLFxuICAgICAgICAgICAgICAgIHlfcG9zLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICBNYWluU3RhdHVzU3RhdGlzdGljcy5HUk9VUF9LRVlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlX3Nwcml0ZXMucHVzaChsYWJlbC50ZXh0LCBsYWJlbC5zaGFkb3cpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gTWFpblN0YXR1c1N0YXRlcy5DSEFSQUNURVJTICYmIGkgPT09IDApIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcmRlcmVkX2VsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBkamlubl9jb3VudHMgPSB0aGlzLmdldF9kamlubl9jb3VudHMob3JkZXJlZF9lbGVtZW50c1tpXSk7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50YWxfc3RhdHMgPSB0aGlzLmdldF9lbGVtZW50YWxfc3RhdHMob3JkZXJlZF9lbGVtZW50c1tpXSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHhfcG9zID0gTWFpblN0YXR1c1N0YXRpc3RpY3MuRUxFTS5OVU1CRVJTLkVORF9YICsgaSAqIE1haW5TdGF0dXNTdGF0aXN0aWNzLkVMRU0uTlVNQkVSUy5YX1NISUZUO1xuICAgICAgICAgICAgbGV0IHlfcG9zID0gTWFpblN0YXR1c1N0YXRpc3RpY3MuRUxFTS5OVU1CRVJTLlk7XG4gICAgICAgICAgICBsZXQgdGV4dCA9IGRqaW5uX2NvdW50cy5zZXQgKyBcIi9cIiArIGRqaW5uX2NvdW50cy50b3RhbDtcblxuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT09IE1haW5TdGF0dXNTdGF0ZXMuQ0hBUkFDVEVSUykge1xuICAgICAgICAgICAgICAgIHlfcG9zICs9IE1haW5TdGF0dXNTdGF0aXN0aWNzLkVMRU0uRE9XTl9TSElGVDtcbiAgICAgICAgICAgICAgICB0ZXh0ID0gU3RyaW5nKGRqaW5uX2NvdW50cy50b3RhbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBudW1iZXJzID0gdGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICAgICAgdGV4dCxcbiAgICAgICAgICAgICAgICB4X3BvcyxcbiAgICAgICAgICAgICAgICB5X3BvcyxcbiAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICBNYWluU3RhdHVzU3RhdGlzdGljcy5HUk9VUF9LRVlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlX3Nwcml0ZXMucHVzaChudW1iZXJzLnRleHQsIG51bWJlcnMuc2hhZG93KTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUgIT09IE1haW5TdGF0dXNTdGF0ZXMuQ0hBUkFDVEVSUykge1xuICAgICAgICAgICAgICAgIHlfcG9zICs9IE1haW5TdGF0dXNTdGF0aXN0aWNzLkVMRU0uTlVNQkVSUy5ZX1NISUZUO1xuICAgICAgICAgICAgICAgIHRleHQgPSBTdHJpbmcoZWxlbWVudGFsX3N0YXRzLmxldmVsKTtcblxuICAgICAgICAgICAgICAgIG51bWJlcnMgPSB0aGlzLndpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgICAgICAgICAgdGV4dCxcbiAgICAgICAgICAgICAgICAgICAgeF9wb3MsXG4gICAgICAgICAgICAgICAgICAgIHlfcG9zLFxuICAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgTWFpblN0YXR1c1N0YXRpc3RpY3MuR1JPVVBfS0VZXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlX3Nwcml0ZXMucHVzaChudW1iZXJzLnRleHQsIG51bWJlcnMuc2hhZG93KTtcblxuICAgICAgICAgICAgICAgIHlfcG9zICs9IE1haW5TdGF0dXNTdGF0aXN0aWNzLkVMRU0uTlVNQkVSUy5ZX1NISUZUO1xuICAgICAgICAgICAgICAgIHRleHQgPSBTdHJpbmcoZWxlbWVudGFsX3N0YXRzLnBvd2VyKTtcblxuICAgICAgICAgICAgICAgIG51bWJlcnMgPSB0aGlzLndpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgICAgICAgICAgdGV4dCxcbiAgICAgICAgICAgICAgICAgICAgeF9wb3MsXG4gICAgICAgICAgICAgICAgICAgIHlfcG9zLFxuICAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgTWFpblN0YXR1c1N0YXRpc3RpY3MuR1JPVVBfS0VZXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlX3Nwcml0ZXMucHVzaChudW1iZXJzLnRleHQsIG51bWJlcnMuc2hhZG93KTtcblxuICAgICAgICAgICAgICAgIHlfcG9zICs9IE1haW5TdGF0dXNTdGF0aXN0aWNzLkVMRU0uTlVNQkVSUy5ZX1NISUZUO1xuICAgICAgICAgICAgICAgIHRleHQgPSBTdHJpbmcoZWxlbWVudGFsX3N0YXRzLnJlc2lzdGFuY2UpO1xuXG4gICAgICAgICAgICAgICAgbnVtYmVycyA9IHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgICAgICAgICB4X3BvcyxcbiAgICAgICAgICAgICAgICAgICAgeV9wb3MsXG4gICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBNYWluU3RhdHVzU3RhdGlzdGljcy5HUk9VUF9LRVlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVfc3ByaXRlcy5wdXNoKG51bWJlcnMudGV4dCwgbnVtYmVycy5zaGFkb3cpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9yZGVyZWRfZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbGVtID0gb3JkZXJlZF9lbGVtZW50c1tpXTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHhfcG9zID0gTWFpblN0YXR1c1N0YXRpc3RpY3MuRUxFTS5ESklOTi5DRU5URVJfWCArIGkgKiBNYWluU3RhdHVzU3RhdGlzdGljcy5FTEVNLkRKSU5OLlhfU0hJRlQ7XG4gICAgICAgICAgICAgICAgbGV0IHlfcG9zID0gTWFpblN0YXR1c1N0YXRpc3RpY3MuRUxFTS5ESklOTi5ZO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT09IE1haW5TdGF0dXNTdGF0ZXMuQ0hBUkFDVEVSUykgeV9wb3MgKz0gTWFpblN0YXR1c1N0YXRpc3RpY3MuRUxFTS5ET1dOX1NISUZUO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgZGppbm5pX3Nwcml0ZSA9IHRoaXMuZ2V0X2RqaW5uaV9zcHJpdGUoZWxlbSwgdGhpcy5kamlubl9ncm91cCwge3g6IHhfcG9zLCB5OiB5X3Bvc30pO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVfc3ByaXRlcy5wdXNoKGRqaW5uaV9zcHJpdGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgdHh0ID0gdGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICAgICAgXCJFeHBcIixcbiAgICAgICAgICAgICAgICBNYWluU3RhdHVzU3RhdGlzdGljcy5FWFAuTEFCRUxfWCxcbiAgICAgICAgICAgICAgICBNYWluU3RhdHVzU3RhdGlzdGljcy5FWFAuTEFCRUxfWSxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgTWFpblN0YXR1c1N0YXRpc3RpY3MuR1JPVVBfS0VZXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZV9zcHJpdGVzLnB1c2godHh0LnRleHQsIHR4dC5zaGFkb3cpO1xuXG4gICAgICAgICAgICB0eHQgPSB0aGlzLndpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXIuY3VycmVudF9leHAsXG4gICAgICAgICAgICAgICAgTWFpblN0YXR1c1N0YXRpc3RpY3MuRVhQLlZBTFVFX0VORF9YLFxuICAgICAgICAgICAgICAgIE1haW5TdGF0dXNTdGF0aXN0aWNzLkVYUC5WQUxVRV9ZLFxuICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIE1haW5TdGF0dXNTdGF0aXN0aWNzLkdST1VQX0tFWVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVfc3ByaXRlcy5wdXNoKHR4dC50ZXh0LCB0eHQuc2hhZG93KTtcblxuICAgICAgICAgICAgdHh0ID0gdGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICAgICAgXCJIUFwiLFxuICAgICAgICAgICAgICAgIE1haW5TdGF0dXNTdGF0aXN0aWNzLkhQLkxBQkVMX1gsXG4gICAgICAgICAgICAgICAgTWFpblN0YXR1c1N0YXRpc3RpY3MuSFAuTEFCRUxfWSxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgTWFpblN0YXR1c1N0YXRpc3RpY3MuR1JPVVBfS0VZXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZV9zcHJpdGVzLnB1c2godHh0LnRleHQsIHR4dC5zaGFkb3cpO1xuXG4gICAgICAgICAgICB0eHQgPSB0aGlzLndpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXIubWF4X2hwLFxuICAgICAgICAgICAgICAgIE1haW5TdGF0dXNTdGF0aXN0aWNzLkhQLk1BWF9FTkRfWCxcbiAgICAgICAgICAgICAgICBNYWluU3RhdHVzU3RhdGlzdGljcy5IUC5NQVhfWSxcbiAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICBNYWluU3RhdHVzU3RhdGlzdGljcy5HUk9VUF9LRVlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlX3Nwcml0ZXMucHVzaCh0eHQudGV4dCwgdHh0LnNoYWRvdyk7XG5cbiAgICAgICAgICAgIHR4dCA9IHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfY2hhci5jdXJyZW50X2hwICsgXCIvXCIsXG4gICAgICAgICAgICAgICAgTWFpblN0YXR1c1N0YXRpc3RpY3MuSFAuQ1VSUl9FTkRfWCxcbiAgICAgICAgICAgICAgICBNYWluU3RhdHVzU3RhdGlzdGljcy5IUC5DVVJSX1ksXG4gICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgTWFpblN0YXR1c1N0YXRpc3RpY3MuR1JPVVBfS0VZXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZV9zcHJpdGVzLnB1c2godHh0LnRleHQsIHR4dC5zaGFkb3cpO1xuXG4gICAgICAgICAgICB0eHQgPSB0aGlzLndpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgICAgICBcIlBQXCIsXG4gICAgICAgICAgICAgICAgTWFpblN0YXR1c1N0YXRpc3RpY3MuUFAuTEFCRUxfWCxcbiAgICAgICAgICAgICAgICBNYWluU3RhdHVzU3RhdGlzdGljcy5QUC5MQUJFTF9ZLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICBNYWluU3RhdHVzU3RhdGlzdGljcy5HUk9VUF9LRVlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlX3Nwcml0ZXMucHVzaCh0eHQudGV4dCwgdHh0LnNoYWRvdyk7XG5cbiAgICAgICAgICAgIHR4dCA9IHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfY2hhci5tYXhfcHAsXG4gICAgICAgICAgICAgICAgTWFpblN0YXR1c1N0YXRpc3RpY3MuUFAuTUFYX0VORF9YLFxuICAgICAgICAgICAgICAgIE1haW5TdGF0dXNTdGF0aXN0aWNzLlBQLk1BWF9ZLFxuICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIE1haW5TdGF0dXNTdGF0aXN0aWNzLkdST1VQX0tFWVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVfc3ByaXRlcy5wdXNoKHR4dC50ZXh0LCB0eHQuc2hhZG93KTtcblxuICAgICAgICAgICAgdHh0ID0gdGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyLmN1cnJlbnRfcHAgKyBcIi9cIixcbiAgICAgICAgICAgICAgICBNYWluU3RhdHVzU3RhdGlzdGljcy5QUC5DVVJSX0VORF9YLFxuICAgICAgICAgICAgICAgIE1haW5TdGF0dXNTdGF0aXN0aWNzLlBQLkNVUlJfWSxcbiAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICBNYWluU3RhdHVzU3RhdGlzdGljcy5HUk9VUF9LRVlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlX3Nwcml0ZXMucHVzaCh0eHQudGV4dCwgdHh0LnNoYWRvdyk7XG5cbiAgICAgICAgICAgIGNvbnN0IHNoaWZ0ID0gTWFpblN0YXR1c1N0YXRpc3RpY3MuU1RBVFMuTElORV9TSElGVDtcblxuICAgICAgICAgICAgdHh0ID0gdGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICAgICAgXCJBdHRhY2tcIixcbiAgICAgICAgICAgICAgICBNYWluU3RhdHVzU3RhdGlzdGljcy5TVEFUUy5MQUJFTF9YLFxuICAgICAgICAgICAgICAgIE1haW5TdGF0dXNTdGF0aXN0aWNzLlNUQVRTLkxBQkVMX1ksXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIE1haW5TdGF0dXNTdGF0aXN0aWNzLkdST1VQX0tFWVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVfc3ByaXRlcy5wdXNoKHR4dC50ZXh0LCB0eHQuc2hhZG93KTtcblxuICAgICAgICAgICAgdHh0ID0gdGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyLmF0ayxcbiAgICAgICAgICAgICAgICBNYWluU3RhdHVzU3RhdGlzdGljcy5TVEFUUy5WQUxVRV9FTkRfWCxcbiAgICAgICAgICAgICAgICBNYWluU3RhdHVzU3RhdGlzdGljcy5TVEFUUy5WQUxVRV9ZLFxuICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIE1haW5TdGF0dXNTdGF0aXN0aWNzLkdST1VQX0tFWVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVfc3ByaXRlcy5wdXNoKHR4dC50ZXh0LCB0eHQuc2hhZG93KTtcblxuICAgICAgICAgICAgdHh0ID0gdGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICAgICAgXCJEZWZlbnNlXCIsXG4gICAgICAgICAgICAgICAgTWFpblN0YXR1c1N0YXRpc3RpY3MuU1RBVFMuTEFCRUxfWCxcbiAgICAgICAgICAgICAgICBNYWluU3RhdHVzU3RhdGlzdGljcy5TVEFUUy5MQUJFTF9ZICsgc2hpZnQsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIE1haW5TdGF0dXNTdGF0aXN0aWNzLkdST1VQX0tFWVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVfc3ByaXRlcy5wdXNoKHR4dC50ZXh0LCB0eHQuc2hhZG93KTtcblxuICAgICAgICAgICAgdHh0ID0gdGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyLmRlZixcbiAgICAgICAgICAgICAgICBNYWluU3RhdHVzU3RhdGlzdGljcy5TVEFUUy5WQUxVRV9FTkRfWCxcbiAgICAgICAgICAgICAgICBNYWluU3RhdHVzU3RhdGlzdGljcy5TVEFUUy5WQUxVRV9ZICsgc2hpZnQsXG4gICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgTWFpblN0YXR1c1N0YXRpc3RpY3MuR1JPVVBfS0VZXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZV9zcHJpdGVzLnB1c2godHh0LnRleHQsIHR4dC5zaGFkb3cpO1xuXG4gICAgICAgICAgICB0eHQgPSB0aGlzLndpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgICAgICBcIkFnaWxpdHlcIixcbiAgICAgICAgICAgICAgICBNYWluU3RhdHVzU3RhdGlzdGljcy5TVEFUUy5MQUJFTF9YLFxuICAgICAgICAgICAgICAgIE1haW5TdGF0dXNTdGF0aXN0aWNzLlNUQVRTLkxBQkVMX1kgKyAyICogc2hpZnQsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIE1haW5TdGF0dXNTdGF0aXN0aWNzLkdST1VQX0tFWVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVfc3ByaXRlcy5wdXNoKHR4dC50ZXh0LCB0eHQuc2hhZG93KTtcblxuICAgICAgICAgICAgdHh0ID0gdGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyLmFnaSxcbiAgICAgICAgICAgICAgICBNYWluU3RhdHVzU3RhdGlzdGljcy5TVEFUUy5WQUxVRV9FTkRfWCxcbiAgICAgICAgICAgICAgICBNYWluU3RhdHVzU3RhdGlzdGljcy5TVEFUUy5WQUxVRV9ZICsgMiAqIHNoaWZ0LFxuICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIE1haW5TdGF0dXNTdGF0aXN0aWNzLkdST1VQX0tFWVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVfc3ByaXRlcy5wdXNoKHR4dC50ZXh0LCB0eHQuc2hhZG93KTtcblxuICAgICAgICAgICAgdHh0ID0gdGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICAgICAgXCJMdWNrXCIsXG4gICAgICAgICAgICAgICAgTWFpblN0YXR1c1N0YXRpc3RpY3MuU1RBVFMuTEFCRUxfWCxcbiAgICAgICAgICAgICAgICBNYWluU3RhdHVzU3RhdGlzdGljcy5TVEFUUy5MQUJFTF9ZICsgMyAqIHNoaWZ0LFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICBNYWluU3RhdHVzU3RhdGlzdGljcy5HUk9VUF9LRVlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlX3Nwcml0ZXMucHVzaCh0eHQudGV4dCwgdHh0LnNoYWRvdyk7XG5cbiAgICAgICAgICAgIHR4dCA9IHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfY2hhci5sdWssXG4gICAgICAgICAgICAgICAgTWFpblN0YXR1c1N0YXRpc3RpY3MuU1RBVFMuVkFMVUVfRU5EX1gsXG4gICAgICAgICAgICAgICAgTWFpblN0YXR1c1N0YXRpc3RpY3MuU1RBVFMuVkFMVUVfWSArIDMgKiBzaGlmdCxcbiAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICBNYWluU3RhdHVzU3RhdGlzdGljcy5HUk9VUF9LRVlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlX3Nwcml0ZXMucHVzaCh0eHQudGV4dCwgdHh0LnNoYWRvdyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbml0X3N0YXR1c19lZmZlY3RzKCk7XG4gICAgfVxuXG4gICAgaW5pdF9zdGF0dXNfZWZmZWN0cygpIHtcbiAgICAgICAgaWYgKHRoaXMuYmF0dGxlX3N0YXR1c19lZmZlY3RzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgbGV0IHR4dCA9IHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgICAgIFwiTm9ybWFsXCIsXG4gICAgICAgICAgICAgICAgTWFpblN0YXR1c1N0YXRpc3RpY3MuTk9STUFMX1NUQVRVUy5YLFxuICAgICAgICAgICAgICAgIE1haW5TdGF0dXNTdGF0aXN0aWNzLk5PUk1BTF9TVEFUVVMuWSxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgTWFpblN0YXR1c1N0YXRpc3RpY3MuR1JPVVBfS0VZXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZV9zcHJpdGVzLnB1c2godHh0LnRleHQsIHR4dC5zaGFkb3cpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmJhdHRsZV9zdGF0dXNfZWZmZWN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVmZmVjdDogQmF0dGxlU3RhdHVzRWZmZWN0ID0gdGhpcy5iYXR0bGVfc3RhdHVzX2VmZmVjdHNbaV07XG5cbiAgICAgICAgICAgICAgICBsZXQgeF9wb3MgPSBNYWluU3RhdHVzU3RhdGlzdGljcy5FRkZFQ1RTLk5BTUVfWDtcbiAgICAgICAgICAgICAgICBsZXQgeV9wb3MgPSBNYWluU3RhdHVzU3RhdGlzdGljcy5FRkZFQ1RTLk5BTUVfWSArIGkgKiBNYWluU3RhdHVzU3RhdGlzdGljcy5FRkZFQ1RTLlNISUZUO1xuXG4gICAgICAgICAgICAgICAgbGV0IHR4dCA9IHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgICAgICAgICBNYWluU3RhdHVzU3RhdGlzdGljcy5FRkZFQ1RfTEFCRUxTW2VmZmVjdC5rZXldLFxuICAgICAgICAgICAgICAgICAgICB4X3BvcyxcbiAgICAgICAgICAgICAgICAgICAgeV9wb3MsXG4gICAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgTWFpblN0YXR1c1N0YXRpc3RpY3MuR1JPVVBfS0VZXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlX3Nwcml0ZXMucHVzaCh0eHQudGV4dCwgdHh0LnNoYWRvdyk7XG5cbiAgICAgICAgICAgICAgICB4X3BvcyA9IE1haW5TdGF0dXNTdGF0aXN0aWNzLkVGRkVDVFMuSUNPTl9YO1xuICAgICAgICAgICAgICAgIHlfcG9zID0gTWFpblN0YXR1c1N0YXRpc3RpY3MuRUZGRUNUUy5JQ09OX1kgKyBpICogTWFpblN0YXR1c1N0YXRpc3RpY3MuRUZGRUNUUy5TSElGVDtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHNwcml0ZSA9IHRoaXMud2luZG93LmNyZWF0ZV9hdF9ncm91cChcbiAgICAgICAgICAgICAgICAgICAgeF9wb3MsXG4gICAgICAgICAgICAgICAgICAgIHlfcG9zLFxuICAgICAgICAgICAgICAgICAgICBcImJhdHRsZV9lZmZlY3RfaWNvbnNcIixcbiAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBlZmZlY3Qua2V5LFxuICAgICAgICAgICAgICAgICAgICBNYWluU3RhdHVzU3RhdGlzdGljcy5HUk9VUF9LRVlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVfc3ByaXRlcy5wdXNoKHNwcml0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQge1N0YXR1c0NvbXBvbmVudH0gZnJvbSBcIi4vU3RhdHVzQ29tcG9uZW50XCI7XG5pbXBvcnQge1dpbmRvd30gZnJvbSBcIi4uL1dpbmRvd1wiO1xuaW1wb3J0IHtHb2xkZW5TdW59IGZyb20gXCIuLi9Hb2xkZW5TdW5cIjtcbmltcG9ydCB7QmF0dGxlU3RhdHVzV2luZG93fSBmcm9tIFwiLi4vd2luZG93cy9iYXR0bGUvQmF0dGxlU3RhdHVzV2luZG93XCI7XG5pbXBvcnQge2VsZW1lbnRzLCBvcmRlcmVkX2VsZW1lbnRzfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuaW1wb3J0IHtNYWluU3RhdHVzTWVudX0gZnJvbSBcIi4uL21haW5fbWVudXMvTWFpblN0YXR1c01lbnVcIjtcbmltcG9ydCB7RGppbm59IGZyb20gXCIuLi9EamlublwiO1xuXG5leHBvcnQgdHlwZSBEamlubkxpc3QgPSB7W2VsZW1lbnQgaW4gZWxlbWVudHNdPzogRGppbm5bXX07XG5cbmV4cG9ydCBjbGFzcyBNYWluU3RhdHVzRGppbm4gZXh0ZW5kcyBTdGF0dXNDb21wb25lbnQge1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFNUQVJTID0ge1xuICAgICAgICBYOiAxNyxcbiAgICAgICAgWTogMTcsXG4gICAgICAgIFhfU0hJRlQ6IDU2LFxuICAgICAgICBZX1NISUZUOiA4LFxuICAgIH07XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgTkFNRVMgPSB7XG4gICAgICAgIFg6IDI0LFxuICAgICAgICBZOiAxNixcbiAgICAgICAgWF9TSElGVDogNTYsXG4gICAgICAgIFlfU0hJRlQ6IDgsXG4gICAgfTtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBTUFJJVEVTID0ge1xuICAgICAgICBDRU5URVJfWDogMzIsXG4gICAgICAgIFk6IDU3LFxuICAgICAgICBTSElGVDogNTYsXG4gICAgfTtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBTRVBBUkFUT1IgPSB7XG4gICAgICAgIFg6IDQsXG4gICAgICAgIFk6IDkxLFxuICAgICAgICBXSURUSDogMjMyLFxuICAgIH07XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgQ1VSUkVOVF9ESklOTiA9IHtcbiAgICAgICAgWDogMTQsXG4gICAgICAgIFk6IDEwMCxcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgREpJTk5fUEVSX0xJTkUgPSA5O1xuXG4gICAgcHJpdmF0ZSBkamlubl9ncm91cDogUGhhc2VyLkdyb3VwO1xuICAgIHByaXZhdGUgZGppbm5fcGFnZXM6IERqaW5uTGlzdFtdO1xuICAgIHByaXZhdGUgY3VycmVudF9wYWdlOiBudW1iZXI7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoXG4gICAgICAgIGdhbWU6IFBoYXNlci5HYW1lLFxuICAgICAgICBkYXRhOiBHb2xkZW5TdW4sXG4gICAgICAgIHdpbmRvdzogV2luZG93LFxuICAgICAgICBtYW5hZ2VyOiBCYXR0bGVTdGF0dXNXaW5kb3cgfCBNYWluU3RhdHVzTWVudSxcbiAgICAgICAgcG9zPzoge2xpbmU6IG51bWJlcjsgY29sOiBudW1iZXJ9XG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGdhbWUsIGRhdGEsIHdpbmRvdywgbWFuYWdlciwgcG9zKTtcblxuICAgICAgICB0aGlzLmRqaW5uX2dyb3VwID0gdGhpcy5nYW1lLmFkZC5ncm91cCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZWxlY3Rfb3B0aW9uKCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHVibGljIG9uX2NoYW5nZSgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbl9sZWZ0KCkge1xuICAgICAgICBpZiAodGhpcy5kamlubl9wYWdlcy5sZW5ndGggPD0gMSkgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMuY3VycmVudF9wYWdlID0gKHRoaXMuY3VycmVudF9wYWdlICsgdGhpcy5kamlubl9wYWdlcy5sZW5ndGggLSAxKSAlIHRoaXMuZGppbm5fcGFnZXMubGVuZ3RoO1xuICAgICAgICB0aGlzLmxvYWRfcGFnZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbl9yaWdodCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGppbm5fcGFnZXMubGVuZ3RoIDw9IDEpIHJldHVybjtcblxuICAgICAgICB0aGlzLmN1cnJlbnRfcGFnZSA9ICh0aGlzLmN1cnJlbnRfcGFnZSArIDEpICUgdGhpcy5kamlubl9wYWdlcy5sZW5ndGg7XG4gICAgICAgIHRoaXMubG9hZF9wYWdlKCk7XG4gICAgfVxuXG4gICAgcHVibGljIG9uX3VwKCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHVibGljIG9uX2Rvd24oKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBwdWJsaWMgaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgdGhpcy5kamlubl9ncm91cC54ID0gdGhpcy5nYW1lLmNhbWVyYS54O1xuICAgICAgICB0aGlzLmRqaW5uX2dyb3VwLnkgPSB0aGlzLmdhbWUuY2FtZXJhLnk7XG5cbiAgICAgICAgdGhpcy5tYWtlX3BhZ2VzKCk7XG4gICAgICAgIHRoaXMud2luZG93LnBhZ2VfaW5kaWNhdG9yLmluaXRpYWxpemUodGhpcy5kamlubl9wYWdlcy5sZW5ndGgsIHRoaXMuY3VycmVudF9wYWdlKTtcblxuICAgICAgICB0aGlzLmN1cnJlbnRfcGFnZSA9IDA7XG4gICAgICAgIHRoaXMubG9hZF9wYWdlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBsb2FkX3BhZ2UoKSB7XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgdGhpcy53aW5kb3cucGFnZV9pbmRpY2F0b3Iuc2VsZWN0X3BhZ2UodGhpcy5jdXJyZW50X2NvbCk7XG5cbiAgICAgICAgY29uc3QgZGppbm4gPSB0aGlzLmRqaW5uX3BhZ2VzW3RoaXMuY3VycmVudF9wYWdlXTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9yZGVyZWRfZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW0gPSBvcmRlcmVkX2VsZW1lbnRzW2ldO1xuICAgICAgICAgICAgY29uc3QgZWxlbV9kamlubjogRGppbm5bXSA9IGRqaW5uW29yZGVyZWRfZWxlbWVudHNbaV1dO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8IGVsZW1fZGppbm4ubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgeF9wb3MgPSBNYWluU3RhdHVzRGppbm4uU1RBUlMuWCArIGkgKiBNYWluU3RhdHVzRGppbm4uU1RBUlMuWF9TSElGVDtcbiAgICAgICAgICAgICAgICBsZXQgeV9wb3MgPSBNYWluU3RhdHVzRGppbm4uU1RBUlMuWSArIG4gKiBNYWluU3RhdHVzRGppbm4uU1RBUlMuWV9TSElGVDtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXIgPSB0aGlzLndpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoXG4gICAgICAgICAgICAgICAgICAgIHhfcG9zLFxuICAgICAgICAgICAgICAgICAgICB5X3BvcyxcbiAgICAgICAgICAgICAgICAgICAgb3JkZXJlZF9lbGVtZW50c1tpXSArIFwiX3N0YXJcIixcbiAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIE1haW5TdGF0dXNEamlubi5HUk9VUF9LRVlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVfc3ByaXRlcy5wdXNoKHN0YXIpO1xuXG4gICAgICAgICAgICAgICAgeF9wb3MgPSBNYWluU3RhdHVzRGppbm4uTkFNRVMuWCArIGkgKiBNYWluU3RhdHVzRGppbm4uTkFNRVMuWF9TSElGVDtcbiAgICAgICAgICAgICAgICB5X3BvcyA9IE1haW5TdGF0dXNEamlubi5OQU1FUy5ZICsgbiAqIE1haW5TdGF0dXNEamlubi5OQU1FUy5ZX1NISUZUO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgICAgICAgICBlbGVtX2RqaW5uW25dLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHhfcG9zLFxuICAgICAgICAgICAgICAgICAgICB5X3BvcyxcbiAgICAgICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBNYWluU3RhdHVzRGppbm4uR1JPVVBfS0VZXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlX3Nwcml0ZXMucHVzaChuYW1lLnRleHQsIG5hbWUuc2hhZG93KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgeF9wb3MgPSBNYWluU3RhdHVzRGppbm4uU1BSSVRFUy5DRU5URVJfWCArIGkgKiBNYWluU3RhdHVzRGppbm4uU1BSSVRFUy5TSElGVDtcbiAgICAgICAgICAgIGNvbnN0IHlfcG9zID0gTWFpblN0YXR1c0RqaW5uLlNQUklURVMuWTtcblxuICAgICAgICAgICAgY29uc3QgZGppbm5pX3Nwcml0ZSA9IHRoaXMuZ2V0X2RqaW5uaV9zcHJpdGUoZWxlbSwgdGhpcy5kamlubl9ncm91cCwge3g6IHhfcG9zLCB5OiB5X3Bvc30pO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZV9zcHJpdGVzLnB1c2goZGppbm5pX3Nwcml0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzZXBfeCA9IE1haW5TdGF0dXNEamlubi5TRVBBUkFUT1IuWDtcbiAgICAgICAgY29uc3Qgc2VwX3kgPSBNYWluU3RhdHVzRGppbm4uU0VQQVJBVE9SLlk7XG4gICAgICAgIGNvbnN0IHNlcF93aWR0aCA9IE1haW5TdGF0dXNEamlubi5TRVBBUkFUT1IuV0lEVEg7XG5cbiAgICAgICAgdGhpcy53aW5kb3cuZHJhd19zZXBhcmF0b3Ioc2VwX3gsIHNlcF95LCBzZXBfeCArIHNlcF93aWR0aCwgc2VwX3ksIGZhbHNlKTtcblxuICAgICAgICBjb25zdCB0eHQgPSB0aGlzLndpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgIFwiQ3VycmVudCBEamlublwiLFxuICAgICAgICAgICAgTWFpblN0YXR1c0RqaW5uLkNVUlJFTlRfREpJTk4uWCxcbiAgICAgICAgICAgIE1haW5TdGF0dXNEamlubi5DVVJSRU5UX0RKSU5OLlksXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBNYWluU3RhdHVzRGppbm4uR1JPVVBfS0VZLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnN0YXRlX3Nwcml0ZXMucHVzaCh0eHQudGV4dCwgdHh0LnNoYWRvdyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBtYWtlX3BhZ2VzKCkge1xuICAgICAgICBsZXQgZGppbm5fbGlzdCA9IHRoaXMuZ2V0X2RqaW5uX2J5X2VsZW1lbnQoKTtcblxuICAgICAgICBjb25zdCBtYXhfcGVyX3BhZ2UgPSBNYWluU3RhdHVzRGppbm4uREpJTk5fUEVSX0xJTkU7XG5cbiAgICAgICAgY29uc3QgaGlnaGVzdF9jb3VudCA9IChfLm1heEJ5KE9iamVjdC52YWx1ZXMoZGppbm5fbGlzdCksIChsaXN0OiBEamlubltdKSA9PiBsaXN0Lmxlbmd0aCkgYXMgRGppbm5bXSkubGVuZ3RoO1xuXG4gICAgICAgIGxldCBuX3BhZ2VzID0gKGhpZ2hlc3RfY291bnQgLyBtYXhfcGVyX3BhZ2UpIHwgMDtcbiAgICAgICAgaWYgKGhpZ2hlc3RfY291bnQgJSBtYXhfcGVyX3BhZ2UpIG5fcGFnZXMrKztcbiAgICAgICAgdGhpcy5kamlubl9wYWdlcyA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbl9wYWdlczsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBwYWdlOiBEamlubkxpc3QgPSBvcmRlcmVkX2VsZW1lbnRzLnJlZHVjZSgocmVzdWx0LCBlbGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzdWx0W2VsZW1dID0gZGppbm5fbGlzdFtlbGVtXS5zbGljZShtYXhfcGVyX3BhZ2UgKiBpLCBtYXhfcGVyX3BhZ2UgKiAoaSArIDEpIC0gMSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH0sIHt9IGFzIERqaW5uTGlzdCk7XG5cbiAgICAgICAgICAgIHRoaXMuZGppbm5fcGFnZXMucHVzaChwYWdlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0X2RqaW5uX2J5X2VsZW1lbnQoKSB7XG4gICAgICAgIGNvbnN0IGRqaW5uID0gb3JkZXJlZF9lbGVtZW50cy5yZWR1Y2UoKHJlc3VsdCwgZWxlbSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2hhcl9kamlubiA9IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVycy5tYXAoY2hhciA9PiBjaGFyW2VsZW0gKyBcIl9kamlubmlcIl0pLmZsYXQoKTtcbiAgICAgICAgICAgIHJlc3VsdFtlbGVtXSA9IF8uc29ydEJ5KFxuICAgICAgICAgICAgICAgIGNoYXJfZGppbm4ubWFwKGRqaW5uaV9rZXkgPT4gdGhpcy5kYXRhLmluZm8uZGppbm5pX2xpc3RbZGppbm5pX2tleV0pLFxuICAgICAgICAgICAgICAgIGNoYXJfZGppbm4gPT4gY2hhcl9kamlubi5pbmRleFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sIHt9KTtcblxuICAgICAgICByZXR1cm4gZGppbm47XG4gICAgfVxufVxuIiwiaW1wb3J0IHtTdGF0dXNDb21wb25lbnR9IGZyb20gXCIuL1N0YXR1c0NvbXBvbmVudFwiO1xuaW1wb3J0IHtUZXh0T2JqLCBXaW5kb3d9IGZyb20gXCIuLi9XaW5kb3dcIjtcbmltcG9ydCB7R29sZGVuU3VufSBmcm9tIFwiLi4vR29sZGVuU3VuXCI7XG5pbXBvcnQge0N1cnNvck1hbmFnZXIsIFBvaW50VmFyaWFudHN9IGZyb20gXCIuLi91dGlscy9DdXJzb3JNYW5hZ2VyXCI7XG5pbXBvcnQge0FiaWxpdHl9IGZyb20gXCIuLi9BYmlsaXR5XCI7XG5pbXBvcnQge01haW5TdGF0dXNNZW51fSBmcm9tIFwiLi4vbWFpbl9tZW51cy9NYWluU3RhdHVzTWVudVwiO1xuXG5leHBvcnQgY2xhc3MgTWFpblN0YXR1c1BzeW5lcmd5IGV4dGVuZHMgU3RhdHVzQ29tcG9uZW50IHtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBDVVJTT1IgPSB7XG4gICAgICAgIFg6IDY1LFxuICAgICAgICBZOiA2NixcbiAgICB9O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEhJR0hMSUdIVCA9IHtcbiAgICAgICAgWDogODAsXG4gICAgICAgIFk6IDI0LFxuICAgICAgICBXSURUSDogMTUyLFxuICAgICAgICBIRUlHSFQ6IDgsXG4gICAgfTtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBQU1lORVJHWSA9IHtcbiAgICAgICAgSUNPTl9YOiA4MSxcbiAgICAgICAgSUNPTl9ZOiAxOSxcbiAgICAgICAgTkFNRV9YOiA5NixcbiAgICAgICAgTkFNRV9ZOiAyNCxcbiAgICAgICAgUFBfTEFCRUxfWDogMTg0LFxuICAgICAgICBQUF9MQUJFTF9ZOiA4LFxuICAgICAgICBQUF9WQUxVRV9FTkRfWDogMTk0LFxuICAgICAgICBQUF9WQUxVRV9ZOiAyNCxcbiAgICAgICAgU1RBUl9YOiAyMDEsXG4gICAgICAgIFNUQVJfWTogMjUsXG4gICAgICAgIFJBTkdFX0NFTlRFUl9YOiAyMjAsXG4gICAgICAgIFJBTkdFX1k6IDI0LFxuICAgIH07XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgVVNFX1RFWFQgPSB7XG4gICAgICAgIFg6IDgsXG4gICAgICAgIFk6IDEwNCxcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgTUFYX0xJTkVTID0gNTtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBTSElGVCA9IDE2O1xuXG4gICAgcHJpdmF0ZSBhYmlsaXR5X3BhZ2VzOiBBYmlsaXR5W11bXTtcbiAgICBwcml2YXRlIHVzZV90ZXh0OiBUZXh0T2JqO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKFxuICAgICAgICBnYW1lOiBQaGFzZXIuR2FtZSxcbiAgICAgICAgZGF0YTogR29sZGVuU3VuLFxuICAgICAgICB3aW5kb3c6IFdpbmRvdyxcbiAgICAgICAgbWFuYWdlcjogTWFpblN0YXR1c01lbnUsXG4gICAgICAgIHBvcz86IHtsaW5lOiBudW1iZXI7IGNvbDogbnVtYmVyfVxuICAgICkge1xuICAgICAgICBzdXBlcihnYW1lLCBkYXRhLCB3aW5kb3csIG1hbmFnZXIsIHBvcyk7XG4gICAgfVxuXG4gICAgcHVibGljIHNlbGVjdF9vcHRpb24oKSB7XG4gICAgICAgIGNvbnN0IGhpZ2hsaWdodCA9IHtcbiAgICAgICAgICAgIHg6IE1haW5TdGF0dXNQc3luZXJneS5ISUdITElHSFQuWCxcbiAgICAgICAgICAgIHk6IE1haW5TdGF0dXNQc3luZXJneS5ISUdITElHSFQuWSArIE1haW5TdGF0dXNQc3luZXJneS5TSElGVCAqIHRoaXMuY3VycmVudF9saW5lLFxuICAgICAgICAgICAgd2lkdGg6IE1haW5TdGF0dXNQc3luZXJneS5ISUdITElHSFQuV0lEVEgsXG4gICAgICAgICAgICBoZWlnaHQ6IE1haW5TdGF0dXNQc3luZXJneS5ISUdITElHSFQuSEVJR0hULFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnVwZGF0ZV9oaWdobGlnaHQoaGlnaGxpZ2h0KTtcblxuICAgICAgICBjb25zdCBjdXJzb3JfeCA9IE1haW5TdGF0dXNQc3luZXJneS5DVVJTT1IuWDtcbiAgICAgICAgY29uc3QgY3Vyc29yX3kgPSBNYWluU3RhdHVzUHN5bmVyZ3kuQ1VSU09SLlkgKyBNYWluU3RhdHVzUHN5bmVyZ3kuU0hJRlQgKiB0aGlzLmN1cnJlbnRfbGluZTtcblxuICAgICAgICBjb25zdCBjdXJzb3JfdHdlZW4gPSB7dHlwZTogQ3Vyc29yTWFuYWdlci5DdXJzb3JUd2VlbnMuUE9JTlQsIHZhcmlhbnQ6IFBvaW50VmFyaWFudHMuTk9STUFMfTtcbiAgICAgICAgdGhpcy5kYXRhLmN1cnNvcl9tYW5hZ2VyLm1vdmVfdG8oe3g6IGN1cnNvcl94LCB5OiBjdXJzb3JfeX0sIHthbmltYXRlOiBmYWxzZSwgdHdlZW5fY29uZmlnOiBjdXJzb3JfdHdlZW59KTtcblxuICAgICAgICB0aGlzLndpbmRvdy5wYWdlX2luZGljYXRvci5zZWxlY3RfcGFnZSh0aGlzLmN1cnJlbnRfY29sKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25fY2hhbmdlKCkge1xuICAgICAgICBpZiAoIXRoaXMuYWJpbGl0eV9wYWdlc1t0aGlzLmN1cnJlbnRfY29sXVt0aGlzLmN1cnJlbnRfbGluZV0pXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRfbGluZSA9IHRoaXMuYWJpbGl0eV9wYWdlc1t0aGlzLmN1cnJlbnRfY29sXS5sZW5ndGggLSAxO1xuXG4gICAgICAgIGNvbnN0IGNob3Nlbl9hYmlsaXR5ID0gdGhpcy5hYmlsaXR5X3BhZ2VzW3RoaXMuY3VycmVudF9jb2xdW3RoaXMuY3VycmVudF9saW5lXTtcblxuICAgICAgICB0aGlzLnNlbGVjdF9vcHRpb24oKTtcbiAgICAgICAgdGhpcy51cGRhdGVfZGVzY3JpcHRpb24oY2hvc2VuX2FiaWxpdHkuZGVzY3JpcHRpb24pO1xuXG4gICAgICAgIGxldCB1c2VfdGV4dCA9IFwiQ2FuIGJlIHVzZWQgaW4gXCI7XG4gICAgICAgIGlmIChjaG9zZW5fYWJpbGl0eS5pc19maWVsZF9wc3luZXJneSB8fCBjaG9zZW5fYWJpbGl0eS5lZmZlY3RzX291dHNpZGVfYmF0dGxlKSB1c2VfdGV4dCArPSBcIlRvd25zXCI7XG4gICAgICAgIGVsc2UgdXNlX3RleHQgKz0gXCJCYXR0bGVcIjtcblxuICAgICAgICB0aGlzLndpbmRvdy51cGRhdGVfdGV4dCh1c2VfdGV4dCwgdGhpcy51c2VfdGV4dCk7XG4gICAgfVxuXG4gICAgcHVibGljIG9uX2xlZnQoKSB7XG4gICAgICAgIGlmICh0aGlzLmFiaWxpdHlfcGFnZXMubGVuZ3RoIDw9IDEpIHJldHVybjtcblxuICAgICAgICBjb25zdCBwYWdlcyA9IHRoaXMuYWJpbGl0eV9wYWdlcy5sZW5ndGg7XG4gICAgICAgIHRoaXMuY3VycmVudF9jb2wgPSAodGhpcy5jdXJyZW50X2NvbCArIHBhZ2VzIC0gMSkgJSBwYWdlcztcblxuICAgICAgICBpZiAoIXRoaXMuYWJpbGl0eV9wYWdlc1t0aGlzLmN1cnJlbnRfY29sXVt0aGlzLmN1cnJlbnRfbGluZV0pXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRfbGluZSA9IHRoaXMuYWJpbGl0eV9wYWdlc1t0aGlzLmN1cnJlbnRfY29sXS5sZW5ndGggLSAxO1xuXG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25fcmlnaHQoKSB7XG4gICAgICAgIGlmICh0aGlzLmFiaWxpdHlfcGFnZXMubGVuZ3RoIDw9IDEpIHJldHVybjtcblxuICAgICAgICBjb25zdCBwYWdlcyA9IHRoaXMuYWJpbGl0eV9wYWdlcy5sZW5ndGg7XG4gICAgICAgIHRoaXMuY3VycmVudF9jb2wgPSAodGhpcy5jdXJyZW50X2NvbCArIDEpICUgcGFnZXM7XG5cbiAgICAgICAgaWYgKCF0aGlzLmFiaWxpdHlfcGFnZXNbdGhpcy5jdXJyZW50X2NvbF1bdGhpcy5jdXJyZW50X2xpbmVdKVxuICAgICAgICAgICAgdGhpcy5jdXJyZW50X2xpbmUgPSB0aGlzLmFiaWxpdHlfcGFnZXNbdGhpcy5jdXJyZW50X2NvbF0ubGVuZ3RoIC0gMTtcblxuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfVxuXG4gICAgcHVibGljIG9uX3VwKCkge1xuICAgICAgICBpZiAodGhpcy5hYmlsaXR5X3BhZ2VzW3RoaXMuY3VycmVudF9jb2xdLmxlbmd0aCA8PSAxKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgbGVuID0gdGhpcy5hYmlsaXR5X3BhZ2VzW3RoaXMuY3VycmVudF9jb2xdLmxlbmd0aDtcbiAgICAgICAgdGhpcy5jdXJyZW50X2xpbmUgPSAodGhpcy5jdXJyZW50X2xpbmUgKyBsZW4gLSAxKSAlIGxlbjtcblxuICAgICAgICB0aGlzLm9uX2NoYW5nZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbl9kb3duKCkge1xuICAgICAgICBpZiAodGhpcy5hYmlsaXR5X3BhZ2VzW3RoaXMuY3VycmVudF9jb2xdLmxlbmd0aCA8PSAxKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgbGVuID0gdGhpcy5hYmlsaXR5X3BhZ2VzW3RoaXMuY3VycmVudF9jb2xdLmxlbmd0aDtcbiAgICAgICAgdGhpcy5jdXJyZW50X2xpbmUgPSAodGhpcy5jdXJyZW50X2xpbmUgKyAxKSAlIGxlbjtcblxuICAgICAgICB0aGlzLm9uX2NoYW5nZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBpbml0aWFsaXplKCkge1xuICAgICAgICB0aGlzLnVwZGF0ZV9hYmlsaXRpZXMoKTtcblxuICAgICAgICBpZiAoIXRoaXMuYWJpbGl0eV9wYWdlc1t0aGlzLmN1cnJlbnRfY29sXSkgdGhpcy5jdXJyZW50X2NvbCA9IHRoaXMuYWJpbGl0eV9wYWdlcy5sZW5ndGggLSAxO1xuXG4gICAgICAgIGNvbnN0IGFiaWxpdGllcyA9IHRoaXMuYWJpbGl0eV9wYWdlc1t0aGlzLmN1cnJlbnRfY29sXTtcblxuICAgICAgICBhYmlsaXRpZXMuZm9yRWFjaCgoYWJpbGl0eSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGljb25fa2V5ID0gYWJpbGl0eS5rZXlfbmFtZTtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBhYmlsaXR5Lm5hbWU7XG4gICAgICAgICAgICBjb25zdCBwcF9jb3N0ID0gYWJpbGl0eS5wcF9jb3N0O1xuICAgICAgICAgICAgY29uc3Qgc3Rhcl9rZXkgPSBhYmlsaXR5LmVsZW1lbnQgKyBcIl9zdGFyXCI7XG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IFN0cmluZyhhYmlsaXR5LnJhbmdlKTtcblxuICAgICAgICAgICAgbGV0IHhfcG9zID0gTWFpblN0YXR1c1BzeW5lcmd5LlBTWU5FUkdZLklDT05fWDtcbiAgICAgICAgICAgIGxldCB5X3BvcyA9IE1haW5TdGF0dXNQc3luZXJneS5QU1lORVJHWS5JQ09OX1kgKyBpbmRleCAqIE1haW5TdGF0dXNQc3luZXJneS5TSElGVDtcblxuICAgICAgICAgICAgY29uc3QgaWNvbiA9IHRoaXMud2luZG93LmNyZWF0ZV9hdF9ncm91cChcbiAgICAgICAgICAgICAgICB4X3BvcyxcbiAgICAgICAgICAgICAgICB5X3BvcyxcbiAgICAgICAgICAgICAgICBcImFiaWxpdGllc19pY29uc1wiLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBpY29uX2tleSxcbiAgICAgICAgICAgICAgICBNYWluU3RhdHVzUHN5bmVyZ3kuR1JPVVBfS0VZXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZV9zcHJpdGVzLnB1c2goaWNvbik7XG5cbiAgICAgICAgICAgIHhfcG9zID0gTWFpblN0YXR1c1BzeW5lcmd5LlBTWU5FUkdZLk5BTUVfWDtcbiAgICAgICAgICAgIHlfcG9zID0gTWFpblN0YXR1c1BzeW5lcmd5LlBTWU5FUkdZLk5BTUVfWSArIGluZGV4ICogTWFpblN0YXR1c1BzeW5lcmd5LlNISUZUO1xuXG4gICAgICAgICAgICBjb25zdCBuYW1lX3RleHQgPSB0aGlzLndpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgIHhfcG9zLFxuICAgICAgICAgICAgICAgIHlfcG9zLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICBNYWluU3RhdHVzUHN5bmVyZ3kuR1JPVVBfS0VZXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZV9zcHJpdGVzLnB1c2gobmFtZV90ZXh0LnRleHQsIG5hbWVfdGV4dC5zaGFkb3cpO1xuXG4gICAgICAgICAgICB4X3BvcyA9IE1haW5TdGF0dXNQc3luZXJneS5QU1lORVJHWS5QUF9WQUxVRV9FTkRfWDtcbiAgICAgICAgICAgIHlfcG9zID0gTWFpblN0YXR1c1BzeW5lcmd5LlBTWU5FUkdZLlBQX1ZBTFVFX1kgKyBpbmRleCAqIE1haW5TdGF0dXNQc3luZXJneS5TSElGVDtcblxuICAgICAgICAgICAgY29uc3QgcHBfdmFsdWUgPSB0aGlzLndpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgICAgICBwcF9jb3N0LFxuICAgICAgICAgICAgICAgIHhfcG9zLFxuICAgICAgICAgICAgICAgIHlfcG9zLFxuICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIE1haW5TdGF0dXNQc3luZXJneS5HUk9VUF9LRVlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlX3Nwcml0ZXMucHVzaChwcF92YWx1ZS50ZXh0LCBwcF92YWx1ZS5zaGFkb3cpO1xuXG4gICAgICAgICAgICB4X3BvcyA9IE1haW5TdGF0dXNQc3luZXJneS5QU1lORVJHWS5TVEFSX1g7XG4gICAgICAgICAgICB5X3BvcyA9IE1haW5TdGF0dXNQc3luZXJneS5QU1lORVJHWS5TVEFSX1kgKyBpbmRleCAqIE1haW5TdGF0dXNQc3luZXJneS5TSElGVDtcblxuICAgICAgICAgICAgY29uc3Qgc3RhciA9IHRoaXMud2luZG93LmNyZWF0ZV9hdF9ncm91cChcbiAgICAgICAgICAgICAgICB4X3BvcyxcbiAgICAgICAgICAgICAgICB5X3BvcyxcbiAgICAgICAgICAgICAgICBzdGFyX2tleSxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIE1haW5TdGF0dXNQc3luZXJneS5HUk9VUF9LRVlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlX3Nwcml0ZXMucHVzaChzdGFyKTtcblxuICAgICAgICAgICAgeF9wb3MgPSBNYWluU3RhdHVzUHN5bmVyZ3kuUFNZTkVSR1kuUkFOR0VfQ0VOVEVSX1g7XG4gICAgICAgICAgICB5X3BvcyA9IE1haW5TdGF0dXNQc3luZXJneS5QU1lORVJHWS5SQU5HRV9ZICsgaW5kZXggKiBNYWluU3RhdHVzUHN5bmVyZ3kuU0hJRlQ7XG5cbiAgICAgICAgICAgIGNvbnN0IHJhbmdlX2ljb24gPSB0aGlzLndpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoXG4gICAgICAgICAgICAgICAgeF9wb3MsXG4gICAgICAgICAgICAgICAgeV9wb3MsXG4gICAgICAgICAgICAgICAgXCJyYW5nZXNcIixcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgcmFuZ2UsXG4gICAgICAgICAgICAgICAgTWFpblN0YXR1c1BzeW5lcmd5LkdST1VQX0tFWVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJhbmdlX2ljb24ueCAtPSAocmFuZ2VfaWNvbi53aWR0aCAvIDIpIHwgMDtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVfc3ByaXRlcy5wdXNoKHJhbmdlX2ljb24pO1xuICAgICAgICB9KTtcblxuICAgICAgICBsZXQgeF9wb3MgPSBNYWluU3RhdHVzUHN5bmVyZ3kuUFNZTkVSR1kuUFBfTEFCRUxfWDtcbiAgICAgICAgbGV0IHlfcG9zID0gTWFpblN0YXR1c1BzeW5lcmd5LlBTWU5FUkdZLlBQX0xBQkVMX1k7XG5cbiAgICAgICAgY29uc3QgcHBfbGFiZWwgPSB0aGlzLndpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgIFwiUFBcIixcbiAgICAgICAgICAgIHhfcG9zLFxuICAgICAgICAgICAgeV9wb3MsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBNYWluU3RhdHVzUHN5bmVyZ3kuR1JPVVBfS0VZXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc3RhdGVfc3ByaXRlcy5wdXNoKHBwX2xhYmVsLnRleHQsIHBwX2xhYmVsLnNoYWRvdyk7XG5cbiAgICAgICAgeF9wb3MgPSBNYWluU3RhdHVzUHN5bmVyZ3kuVVNFX1RFWFQuWDtcbiAgICAgICAgeV9wb3MgPSBNYWluU3RhdHVzUHN5bmVyZ3kuVVNFX1RFWFQuWTtcblxuICAgICAgICB0aGlzLnVzZV90ZXh0ID0gdGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgeF9wb3MsXG4gICAgICAgICAgICB5X3BvcyxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIE1haW5TdGF0dXNQc3luZXJneS5HUk9VUF9LRVlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zdGF0ZV9zcHJpdGVzLnB1c2godGhpcy51c2VfdGV4dC50ZXh0LCB0aGlzLnVzZV90ZXh0LnNoYWRvdyk7XG5cbiAgICAgICAgdGhpcy53aW5kb3cucGFnZV9pbmRpY2F0b3IuaW5pdGlhbGl6ZSh0aGlzLmFiaWxpdHlfcGFnZXMubGVuZ3RoLCB0aGlzLmN1cnJlbnRfbGluZSk7XG4gICAgICAgIHRoaXMuc2VsZWN0X29wdGlvbigpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlX2FiaWxpdGllcygpIHtcbiAgICAgICAgY29uc3QgYWxsX2FiaWxpdGllcyA9IHRoaXMuc2VsZWN0ZWRfY2hhci5hYmlsaXRpZXM7XG5cbiAgICAgICAgY29uc3QgYmF0dGxlX3BzeSA9IGFsbF9hYmlsaXRpZXMuZmlsdGVyKChrZXlfbmFtZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhID0gdGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3Rba2V5X25hbWVdO1xuICAgICAgICAgICAgaWYgKCFhKSByZXR1cm4gdHJ1ZTtcblxuICAgICAgICAgICAgcmV0dXJuICEoYS5pc19maWVsZF9wc3luZXJneSB8fCBhLmVmZmVjdHNfb3V0c2lkZV9iYXR0bGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgZmllbGRfcHN5ID0gYWxsX2FiaWxpdGllcy5maWx0ZXIoKGtleV9uYW1lOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGEgPSB0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFtrZXlfbmFtZV07XG4gICAgICAgICAgICBpZiAoIWEpIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgcmV0dXJuIGEuaXNfZmllbGRfcHN5bmVyZ3kgfHwgYS5lZmZlY3RzX291dHNpZGVfYmF0dGxlO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBzb3J0ZWRfYWJpbGl0aWVzID0gZmllbGRfcHN5LmNvbmNhdChiYXR0bGVfcHN5KTtcblxuICAgICAgICBsZXQgcGFnZV9hYmlsaXRpZXMgPSBbXTtcbiAgICAgICAgdGhpcy5hYmlsaXR5X3BhZ2VzID0gW107XG5cbiAgICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgICAgc29ydGVkX2FiaWxpdGllcy5mb3JFYWNoKChrZXlfbmFtZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICBpZiAoY291bnQgPT09IE1haW5TdGF0dXNQc3luZXJneS5NQVhfTElORVMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFiaWxpdHlfcGFnZXMucHVzaChwYWdlX2FiaWxpdGllcyk7XG4gICAgICAgICAgICAgICAgcGFnZV9hYmlsaXRpZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBjb3VudCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W2tleV9uYW1lXSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgQWJpbGl0eSBcIiR7a2V5X25hbWV9XCIgZG9lcyBub3QgZXhpc3QgaW4gdGhlIGRhdGFiYXNlLmApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYWdlX2FiaWxpdGllcy5wdXNoKHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W2tleV9uYW1lXSk7XG4gICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChwYWdlX2FiaWxpdGllcy5sZW5ndGggPiAwKSB0aGlzLmFiaWxpdHlfcGFnZXMucHVzaChwYWdlX2FiaWxpdGllcyk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtTdGF0dXNDb21wb25lbnR9IGZyb20gXCIuL1N0YXR1c0NvbXBvbmVudFwiO1xuaW1wb3J0IHtXaW5kb3d9IGZyb20gXCIuLi9XaW5kb3dcIjtcbmltcG9ydCB7R29sZGVuU3VufSBmcm9tIFwiLi4vR29sZGVuU3VuXCI7XG5pbXBvcnQge0N1cnNvck1hbmFnZXIsIFBvaW50VmFyaWFudHN9IGZyb20gXCIuLi91dGlscy9DdXJzb3JNYW5hZ2VyXCI7XG5pbXBvcnQge2VxdWlwX3Nsb3RzLCBJdGVtU2xvdCwgaXRlbV9lcXVpcF9zbG90fSBmcm9tIFwiLi4vTWFpbkNoYXJcIjtcbmltcG9ydCB7TWFpblN0YXR1c01lbnV9IGZyb20gXCIuLi9tYWluX21lbnVzL01haW5TdGF0dXNNZW51XCI7XG5cbmV4cG9ydCBjbGFzcyBNYWluU3RhdHVzSXRlbXMgZXh0ZW5kcyBTdGF0dXNDb21wb25lbnQge1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IENVUlNPUiA9IHtcbiAgICAgICAgWDogMTA2LFxuICAgICAgICBZOiA1OCxcbiAgICB9O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEhJR0hMSUdIVCA9IHtcbiAgICAgICAgWDogMTIwLFxuICAgICAgICBZOiAxNixcbiAgICAgICAgV0lEVEg6IDExMixcbiAgICAgICAgSEVJR0hUOiA4LFxuICAgIH07XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgSVRFTSA9IHtcbiAgICAgICAgSUNPTl9YOiAxMjEsXG4gICAgICAgIElDT05fWTogMTEsXG4gICAgICAgIE5BTUVfWDogMTQ0LFxuICAgICAgICBOQU1FX1k6IDE2LFxuICAgIH07XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgU1RBVFMgPSB7XG4gICAgICAgIExBQkVMX1g6IDQwLFxuICAgICAgICBMQUJFTF9ZOiAyNCxcbiAgICAgICAgVkFMVUVfRU5EX1g6IDEwOSxcbiAgICAgICAgVkFMVUVfWTogMjQsXG4gICAgICAgIExJTkVfU0hJRlQ6IDgsXG4gICAgfTtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBFUV9ISUdITElHSFQgPSB7XG4gICAgICAgIFg6IDE2LFxuICAgICAgICBZOiAxNixcbiAgICAgICAgV0lEVEg6IDk2LFxuICAgICAgICBIRUlHSFQ6IDgsXG4gICAgICAgIFNISUZUOiAxNixcbiAgICAgICAgUE9TOiB7XG4gICAgICAgICAgICBbZXF1aXBfc2xvdHMuV0VBUE9OXTogMCxcbiAgICAgICAgICAgIFtlcXVpcF9zbG90cy5IRUFEXTogMSxcbiAgICAgICAgICAgIFtlcXVpcF9zbG90cy5DSEVTVF06IDIsXG4gICAgICAgICAgICBbZXF1aXBfc2xvdHMuQk9EWV06IDMsXG4gICAgICAgIH0sXG4gICAgfTtcblxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IE1BWF9MSU5FUyA9IDU7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgU0hJRlQgPSAxNjtcblxuICAgIHByaXZhdGUgY2hhcl9pdGVtczogSXRlbVNsb3RbXVtdO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKFxuICAgICAgICBnYW1lOiBQaGFzZXIuR2FtZSxcbiAgICAgICAgZGF0YTogR29sZGVuU3VuLFxuICAgICAgICB3aW5kb3c6IFdpbmRvdyxcbiAgICAgICAgbWFuYWdlcjogTWFpblN0YXR1c01lbnUsXG4gICAgICAgIHBvcz86IHtsaW5lOiBudW1iZXI7IGNvbDogbnVtYmVyfVxuICAgICkge1xuICAgICAgICBzdXBlcihnYW1lLCBkYXRhLCB3aW5kb3csIG1hbmFnZXIsIHBvcyk7XG4gICAgfVxuXG4gICAgcHVibGljIHNlbGVjdF9vcHRpb24oKSB7XG4gICAgICAgIGNvbnN0IGhpZ2hsaWdodCA9IHtcbiAgICAgICAgICAgIHg6IE1haW5TdGF0dXNJdGVtcy5ISUdITElHSFQuWCxcbiAgICAgICAgICAgIHk6IE1haW5TdGF0dXNJdGVtcy5ISUdITElHSFQuWSArIE1haW5TdGF0dXNJdGVtcy5TSElGVCAqIHRoaXMuY3VycmVudF9saW5lLFxuICAgICAgICAgICAgd2lkdGg6IE1haW5TdGF0dXNJdGVtcy5ISUdITElHSFQuV0lEVEgsXG4gICAgICAgICAgICBoZWlnaHQ6IE1haW5TdGF0dXNJdGVtcy5ISUdITElHSFQuSEVJR0hULFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnVwZGF0ZV9oaWdobGlnaHQoaGlnaGxpZ2h0KTtcblxuICAgICAgICBjb25zdCBjdXJzb3JfeCA9IE1haW5TdGF0dXNJdGVtcy5DVVJTT1IuWDtcbiAgICAgICAgY29uc3QgY3Vyc29yX3kgPSBNYWluU3RhdHVzSXRlbXMuQ1VSU09SLlkgKyBNYWluU3RhdHVzSXRlbXMuU0hJRlQgKiB0aGlzLmN1cnJlbnRfbGluZTtcblxuICAgICAgICBjb25zdCBjdXJzb3JfdHdlZW4gPSB7dHlwZTogQ3Vyc29yTWFuYWdlci5DdXJzb3JUd2VlbnMuUE9JTlQsIHZhcmlhbnQ6IFBvaW50VmFyaWFudHMuTk9STUFMfTtcbiAgICAgICAgdGhpcy5kYXRhLmN1cnNvcl9tYW5hZ2VyLm1vdmVfdG8oe3g6IGN1cnNvcl94LCB5OiBjdXJzb3JfeX0sIHthbmltYXRlOiBmYWxzZSwgdHdlZW5fY29uZmlnOiBjdXJzb3JfdHdlZW59KTtcblxuICAgICAgICB0aGlzLndpbmRvdy5wYWdlX2luZGljYXRvci5zZWxlY3RfcGFnZSh0aGlzLmN1cnJlbnRfY29sKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25fY2hhbmdlKCkge1xuICAgICAgICBpZiAoIXRoaXMuY2hhcl9pdGVtc1t0aGlzLmN1cnJlbnRfY29sXVt0aGlzLmN1cnJlbnRfbGluZV0pXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRfbGluZSA9IHRoaXMuY2hhcl9pdGVtc1t0aGlzLmN1cnJlbnRfY29sXS5sZW5ndGggLSAxO1xuXG4gICAgICAgIGNvbnN0IGNob3Nlbl9pdGVtID0gdGhpcy5jaGFyX2l0ZW1zW3RoaXMuY3VycmVudF9jb2xdW3RoaXMuY3VycmVudF9saW5lXTtcbiAgICAgICAgdGhpcy5zZWxlY3Rfb3B0aW9uKCk7XG5cbiAgICAgICAgY29uc3QgZXFfc2xvdCA9IGl0ZW1fZXF1aXBfc2xvdFt0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W2Nob3Nlbl9pdGVtLmtleV9uYW1lXS50eXBlXTtcbiAgICAgICAgY29uc3Qgc2xvdHMgPSBbZXF1aXBfc2xvdHMuV0VBUE9OLCBlcXVpcF9zbG90cy5CT0RZLCBlcXVpcF9zbG90cy5DSEVTVCwgZXF1aXBfc2xvdHMuSEVBRF07XG5cbiAgICAgICAgY29uc3QgZXFfaGlnaGxpZ2h0ID0ge3g6IDAsIHk6IDAsIHdpZHRoOiAwLCBoZWlnaHQ6IDB9O1xuXG4gICAgICAgIGlmIChzbG90cy5pbmNsdWRlcyhlcV9zbG90KSAmJiBjaG9zZW5faXRlbS5lcXVpcHBlZCkge1xuICAgICAgICAgICAgY29uc3QgZXFfaGlnaGxpZ2h0X3NoaWZ0ID0gTWFpblN0YXR1c0l0ZW1zLkVRX0hJR0hMSUdIVC5TSElGVCAqIE1haW5TdGF0dXNJdGVtcy5FUV9ISUdITElHSFQuUE9TW2VxX3Nsb3RdO1xuXG4gICAgICAgICAgICBlcV9oaWdobGlnaHQueCA9IE1haW5TdGF0dXNJdGVtcy5FUV9ISUdITElHSFQuWDtcbiAgICAgICAgICAgIGVxX2hpZ2hsaWdodC55ID0gTWFpblN0YXR1c0l0ZW1zLkVRX0hJR0hMSUdIVC5ZICsgZXFfaGlnaGxpZ2h0X3NoaWZ0O1xuICAgICAgICAgICAgZXFfaGlnaGxpZ2h0LndpZHRoID0gTWFpblN0YXR1c0l0ZW1zLkVRX0hJR0hMSUdIVC5XSURUSDtcbiAgICAgICAgICAgIGVxX2hpZ2hsaWdodC5oZWlnaHQgPSBNYWluU3RhdHVzSXRlbXMuRVFfSElHSExJR0hULkhFSUdIVDtcbiAgICAgICAgfVxuXG4gICAgICAgICh0aGlzLm1hbmFnZXIgYXMgTWFpblN0YXR1c01lbnUpLnVwZGF0ZV9lcV9oaWdobGlnaHQoZXFfaGlnaGxpZ2h0KTtcbiAgICAgICAgdGhpcy51cGRhdGVfZGVzY3JpcHRpb24odGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFtjaG9zZW5faXRlbS5rZXlfbmFtZV0uZGVzY3JpcHRpb24pO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbl9sZWZ0KCkge1xuICAgICAgICBpZiAodGhpcy5jaGFyX2l0ZW1zLmxlbmd0aCA8PSAxKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgcGFnZXMgPSB0aGlzLmNoYXJfaXRlbXMubGVuZ3RoO1xuICAgICAgICB0aGlzLmN1cnJlbnRfY29sID0gKHRoaXMuY3VycmVudF9jb2wgKyBwYWdlcyAtIDEpICUgcGFnZXM7XG5cbiAgICAgICAgaWYgKCF0aGlzLmNoYXJfaXRlbXNbdGhpcy5jdXJyZW50X2NvbF1bdGhpcy5jdXJyZW50X2xpbmVdKVxuICAgICAgICAgICAgdGhpcy5jdXJyZW50X2xpbmUgPSB0aGlzLmNoYXJfaXRlbXNbdGhpcy5jdXJyZW50X2NvbF0ubGVuZ3RoIC0gMTtcblxuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfVxuXG4gICAgcHVibGljIG9uX3JpZ2h0KCkge1xuICAgICAgICBpZiAodGhpcy5jaGFyX2l0ZW1zLmxlbmd0aCA8PSAxKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgcGFnZXMgPSB0aGlzLmNoYXJfaXRlbXMubGVuZ3RoO1xuICAgICAgICB0aGlzLmN1cnJlbnRfY29sID0gKHRoaXMuY3VycmVudF9jb2wgKyAxKSAlIHBhZ2VzO1xuXG4gICAgICAgIGlmICghdGhpcy5jaGFyX2l0ZW1zW3RoaXMuY3VycmVudF9jb2xdW3RoaXMuY3VycmVudF9saW5lXSlcbiAgICAgICAgICAgIHRoaXMuY3VycmVudF9saW5lID0gdGhpcy5jaGFyX2l0ZW1zW3RoaXMuY3VycmVudF9jb2xdLmxlbmd0aCAtIDE7XG5cbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbl91cCgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2hhcl9pdGVtc1t0aGlzLmN1cnJlbnRfY29sXS5sZW5ndGggPD0gMSkgcmV0dXJuO1xuXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRfbGluZSA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudF9jb2wgPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRfY29sID0gdGhpcy5jaGFyX2l0ZW1zLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50X2xpbmUgPSB0aGlzLmNoYXJfaXRlbXNbdGhpcy5jaGFyX2l0ZW1zLmxlbmd0aCAtIDFdLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudF9jb2wgPSB0aGlzLmN1cnJlbnRfY29sIC0gMTtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRfbGluZSA9IHRoaXMuY2hhcl9pdGVtc1t0aGlzLmN1cnJlbnRfY29sXS5sZW5ndGggLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50X2xpbmUtLTtcbiAgICAgICAgICAgIHRoaXMub25fY2hhbmdlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgb25fZG93bigpIHtcbiAgICAgICAgaWYgKHRoaXMuY2hhcl9pdGVtc1t0aGlzLmN1cnJlbnRfY29sXS5sZW5ndGggPD0gMSkgcmV0dXJuO1xuXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRfbGluZSArIDEgPT09IHRoaXMuY2hhcl9pdGVtc1t0aGlzLmN1cnJlbnRfY29sXS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRfY29sID09PSB0aGlzLmNoYXJfaXRlbXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudF9jb2wgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudF9saW5lID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50X2NvbCA9IHRoaXMuY3VycmVudF9jb2wgKyAxO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudF9saW5lID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudF9saW5lKys7XG4gICAgICAgICAgICB0aGlzLm9uX2NoYW5nZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGluaXRpYWxpemUoKSB7XG4gICAgICAgIHRoaXMudXBkYXRlX2l0ZW1zKCk7XG5cbiAgICAgICAgaWYgKCF0aGlzLmNoYXJfaXRlbXNbdGhpcy5jdXJyZW50X2NvbF0pIHRoaXMuY3VycmVudF9jb2wgPSB0aGlzLmNoYXJfaXRlbXMubGVuZ3RoIC0gMTtcblxuICAgICAgICBjb25zdCBpdGVtcyA9IHRoaXMuY2hhcl9pdGVtc1t0aGlzLmN1cnJlbnRfY29sXTtcblxuICAgICAgICBpdGVtcy5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaXRlbV9rZXkgPSBpdGVtLmtleV9uYW1lO1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbaXRlbS5rZXlfbmFtZV0ubmFtZTtcbiAgICAgICAgICAgIGNvbnN0IGJyb2tlbiA9IGl0ZW0uYnJva2VuO1xuICAgICAgICAgICAgY29uc3QgZXF1aXBwZWQgPSBpdGVtLmVxdWlwcGVkO1xuICAgICAgICAgICAgY29uc3QgcXVhbnRpdHkgPSBpdGVtLnF1YW50aXR5IDw9IDEgPyB1bmRlZmluZWQgOiBpdGVtLnF1YW50aXR5O1xuXG4gICAgICAgICAgICBsZXQgeF9wb3MgPSBNYWluU3RhdHVzSXRlbXMuSVRFTS5JQ09OX1g7XG4gICAgICAgICAgICBsZXQgeV9wb3MgPSBNYWluU3RhdHVzSXRlbXMuSVRFTS5JQ09OX1kgKyBpbmRleCAqIE1haW5TdGF0dXNJdGVtcy5TSElGVDtcblxuICAgICAgICAgICAgY29uc3QgaXRlbV9vYmogPSB0aGlzLndpbmRvdy5tYWtlX2l0ZW1fb2JqKFxuICAgICAgICAgICAgICAgIGl0ZW1fa2V5LFxuICAgICAgICAgICAgICAgIHt4OiB4X3BvcywgeTogeV9wb3N9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYnJva2VuOiBicm9rZW4sXG4gICAgICAgICAgICAgICAgICAgIGVxdWlwcGVkOiBlcXVpcHBlZCxcbiAgICAgICAgICAgICAgICAgICAgcXVhbnRpdHk6IHF1YW50aXR5LFxuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbF9ncm91cDogTWFpblN0YXR1c0l0ZW1zLkdST1VQX0tFWSxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgZm9yIChsZXQgb2JqIGluIGl0ZW1fb2JqKSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1fb2JqW29ial0pIHRoaXMuc3RhdGVfc3ByaXRlcy5wdXNoKGl0ZW1fb2JqW29ial0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB4X3BvcyA9IE1haW5TdGF0dXNJdGVtcy5JVEVNLk5BTUVfWDtcbiAgICAgICAgICAgIHlfcG9zID0gTWFpblN0YXR1c0l0ZW1zLklURU0uTkFNRV9ZICsgaW5kZXggKiBNYWluU3RhdHVzSXRlbXMuU0hJRlQ7XG5cbiAgICAgICAgICAgIGNvbnN0IG5hbWVfdGV4dCA9IHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgeF9wb3MsXG4gICAgICAgICAgICAgICAgeV9wb3MsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIE1haW5TdGF0dXNJdGVtcy5HUk9VUF9LRVlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlX3Nwcml0ZXMucHVzaChuYW1lX3RleHQudGV4dCwgbmFtZV90ZXh0LnNoYWRvdyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCB0eHQgPSB0aGlzLndpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgIFwiQXR0YWNrXCIsXG4gICAgICAgICAgICBNYWluU3RhdHVzSXRlbXMuU1RBVFMuTEFCRUxfWCxcbiAgICAgICAgICAgIE1haW5TdGF0dXNJdGVtcy5TVEFUUy5MQUJFTF9ZLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgTWFpblN0YXR1c0l0ZW1zLkdST1VQX0tFWVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnN0YXRlX3Nwcml0ZXMucHVzaCh0eHQudGV4dCwgdHh0LnNoYWRvdyk7XG5cbiAgICAgICAgdHh0ID0gdGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXIuYXRrLFxuICAgICAgICAgICAgTWFpblN0YXR1c0l0ZW1zLlNUQVRTLlZBTFVFX0VORF9YLFxuICAgICAgICAgICAgTWFpblN0YXR1c0l0ZW1zLlNUQVRTLlZBTFVFX1ksXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIE1haW5TdGF0dXNJdGVtcy5HUk9VUF9LRVlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zdGF0ZV9zcHJpdGVzLnB1c2godHh0LnRleHQsIHR4dC5zaGFkb3cpO1xuXG4gICAgICAgIHR4dCA9IHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgXCJEZWZlbnNlXCIsXG4gICAgICAgICAgICBNYWluU3RhdHVzSXRlbXMuU1RBVFMuTEFCRUxfWCxcbiAgICAgICAgICAgIE1haW5TdGF0dXNJdGVtcy5TVEFUUy5MQUJFTF9ZICsgTWFpblN0YXR1c0l0ZW1zLlNUQVRTLkxJTkVfU0hJRlQsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBNYWluU3RhdHVzSXRlbXMuR1JPVVBfS0VZXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc3RhdGVfc3ByaXRlcy5wdXNoKHR4dC50ZXh0LCB0eHQuc2hhZG93KTtcblxuICAgICAgICB0eHQgPSB0aGlzLndpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfY2hhci5kZWYsXG4gICAgICAgICAgICBNYWluU3RhdHVzSXRlbXMuU1RBVFMuVkFMVUVfRU5EX1gsXG4gICAgICAgICAgICBNYWluU3RhdHVzSXRlbXMuU1RBVFMuVkFMVUVfWSArIE1haW5TdGF0dXNJdGVtcy5TVEFUUy5MSU5FX1NISUZULFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBNYWluU3RhdHVzSXRlbXMuR1JPVVBfS0VZXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc3RhdGVfc3ByaXRlcy5wdXNoKHR4dC50ZXh0LCB0eHQuc2hhZG93KTtcblxuICAgICAgICB0aGlzLndpbmRvdy5wYWdlX2luZGljYXRvci5pbml0aWFsaXplKHRoaXMuY2hhcl9pdGVtcy5sZW5ndGgsIHRoaXMuY3VycmVudF9saW5lKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rfb3B0aW9uKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVfaXRlbXMoKSB7XG4gICAgICAgIGNvbnN0IGFsbF9pdGVtcyA9IFsuLi50aGlzLnNlbGVjdGVkX2NoYXIuaXRlbXNdO1xuICAgICAgICB0aGlzLmNoYXJfaXRlbXMgPSBbXTtcblxuICAgICAgICBsZXQgcGFnZV9pdGVtcyA9IFtdO1xuICAgICAgICBsZXQgY291bnQgPSAwO1xuXG4gICAgICAgIGFsbF9pdGVtcy5mb3JFYWNoKGl0ZW1fc2xvdCA9PiB7XG4gICAgICAgICAgICBpZiAoY291bnQgPT09IE1haW5TdGF0dXNJdGVtcy5NQVhfTElORVMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJfaXRlbXMucHVzaChwYWdlX2l0ZW1zKTtcbiAgICAgICAgICAgICAgICBwYWdlX2l0ZW1zID0gW107XG4gICAgICAgICAgICAgICAgY291bnQgPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwYWdlX2l0ZW1zLnB1c2goaXRlbV9zbG90KTtcbiAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocGFnZV9pdGVtcy5sZW5ndGggPiAwKSB0aGlzLmNoYXJfaXRlbXMucHVzaChwYWdlX2l0ZW1zKTtcbiAgICB9XG59XG4iLCJpbXBvcnQge0RpYWxvZ0RhdGEsIFNob3BrZWVwRGlhbG9nfSBmcm9tIFwiLi4vd2luZG93cy9zaG9wL1Nob3BrZWVwRGlhbG9nXCI7XG5pbXBvcnQge0J1eUFydGlmYWN0c01lbnV9IGZyb20gXCIuLi93aW5kb3dzL3Nob3AvQnV5QXJ0aWZhY3RzTWVudVwiO1xuaW1wb3J0IHtTZWxsUmVwYWlyTWVudX0gZnJvbSBcIi4uL3dpbmRvd3Mvc2hvcC9TZWxsUmVwYWlyTWVudVwiO1xuaW1wb3J0IHtjYXBpdGFsaXplfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCB7SW52ZW50b3J5V2luZG93fSBmcm9tIFwiLi4vd2luZG93cy9zaG9wL0ludmVudG9yeVdpbmRvd1wiO1xuaW1wb3J0IHtCdXlTZWxlY3RNZW51fSBmcm9tIFwiLi4vd2luZG93cy9zaG9wL0J1eVNlbGVjdE1lbnVcIjtcbmltcG9ydCB7RXF1aXBDb21wYXJlfSBmcm9tIFwiLi4vd2luZG93cy9zaG9wL0VxdWlwQ29tcGFyZVwiO1xuaW1wb3J0IHtZZXNOb01lbnV9IGZyb20gXCIuLi93aW5kb3dzL1llc05vTWVudVwiO1xuaW1wb3J0IHtTaG9wSXRlbVF1YW50aXR5V2luZG93fSBmcm9tIFwiLi4vd2luZG93cy9zaG9wL1Nob3BJdGVtUXVhbnRpdHlXaW5kb3dcIjtcbmltcG9ydCB7V2luZG93LCBUZXh0T2JqfSBmcm9tIFwiLi4vV2luZG93XCI7XG5pbXBvcnQge0NoYXJzTWVudX0gZnJvbSBcIi4uL3N1cHBvcnRfbWVudXMvQ2hhcnNNZW51XCI7XG5pbXBvcnQge0hvcml6b250YWxNZW51fSBmcm9tIFwiLi4vc3VwcG9ydF9tZW51cy9Ib3Jpem9udGFsTWVudVwiO1xuaW1wb3J0IHtHb2xkZW5TdW59IGZyb20gXCIuLi9Hb2xkZW5TdW5cIjtcbmltcG9ydCB7U2hvcEl0ZW19IGZyb20gXCIuLi9TaG9wXCI7XG5pbXBvcnQgKiBhcyBfIGZyb20gXCJsb2Rhc2hcIjtcbmltcG9ydCB7U2hvcH0gZnJvbSBcIi4uL1Nob3BcIjtcbmltcG9ydCB7SXRlbX0gZnJvbSBcIi4uL0l0ZW1cIjtcblxuY29uc3QgSVRFTV9QUklDRV9XSU5fWCA9IDA7XG5jb25zdCBJVEVNX1BSSUNFX1dJTl9ZID0gNjQ7XG5jb25zdCBJVEVNX1BSSUNFX1dJTl9XSURUSCA9IDExNjtcbmNvbnN0IElURU1fUFJJQ0VfV0lOX0hFSUdIVCA9IDI4O1xuY29uc3QgSVRFTV9QUklDRV9OQU1FX1ggPSA4O1xuY29uc3QgSVRFTV9QUklDRV9OQU1FX1kgPSA4O1xuY29uc3QgSVRFTV9QUklDRV9MQUJFTF9YID0gODtcbmNvbnN0IElURU1fUFJJQ0VfTEFCRUxfWSA9IDE2O1xuY29uc3QgSVRFTV9QUklDRV9WQUxfRU5EX1ggPSA3NztcbmNvbnN0IElURU1fUFJJQ0VfVkFMX1kgPSAxNjtcbmNvbnN0IElURU1fUFJJQ0VfQ09JTlNfWCA9IDgwO1xuY29uc3QgSVRFTV9QUklDRV9DT0lOU19ZID0gMTY7XG5cbmNvbnN0IElURU1fUFJJQ0VfV0lOX1gyID0gMTIwO1xuY29uc3QgSVRFTV9QUklDRV9XSU5fWTIgPSA2NDtcblxuY29uc3QgWU9VUl9DT0lOU19XSU5fWCA9IDE0NDtcbmNvbnN0IFlPVVJfQ09JTlNfV0lOX1kgPSA1NjtcbmNvbnN0IFlPVVJfQ09JTlNfV0lOX1dJRFRIID0gOTI7XG5jb25zdCBZT1VSX0NPSU5TX1dJTl9IRUlHSFQgPSAyODtcbmNvbnN0IFlPVVJfQ09JTlNfTEFCRUxfWCA9IDg7XG5jb25zdCBZT1VSX0NPSU5TX0xBQkVMX1kgPSA4O1xuY29uc3QgWU9VUl9DT0lOU19WQUxfRU5EX1ggPSA4NTtcbmNvbnN0IFlPVVJfQ09JTlNfVkFMX1kgPSAxNjtcblxuY29uc3QgWU9VUl9DT0lOU19XSU5fWDIgPSAwO1xuY29uc3QgWU9VUl9DT0lOU19XSU5fWTIgPSA3MjtcblxuY29uc3QgSVRFTV9ERVNDX1dJTl9YID0gMDtcbmNvbnN0IElURU1fREVTQ19XSU5fWSA9IDEzNjtcbmNvbnN0IElURU1fREVTQ19XSU5fV0lEVEggPSAyMzY7XG5jb25zdCBJVEVNX0RFU0NfV0lOX0hFSUdIVCA9IDIwO1xuY29uc3QgSVRFTV9ERVNDX1RFWFRfWCA9IDg7XG5jb25zdCBJVEVNX0RFU0NfVEVYVF9ZID0gODtcblxuY29uc3QgSVRFTV9ERVNDX1dJTl9YMiA9IDA7XG5jb25zdCBJVEVNX0RFU0NfV0lOX1kyID0gNDA7XG5cbmNvbnN0IFNFTExfTVVMVElQTElFUiA9IDMgLyA0O1xuY29uc3QgUkVQQUlSX01VTFRJUExJRVIgPSAxIC8gNDtcbmNvbnN0IFNFTExfQlJPS0VOX01VTFRJUExJRVIgPSBTRUxMX01VTFRJUExJRVIgLSBSRVBBSVJfTVVMVElQTElFUjtcblxuY29uc3QgQlVZX01PREUgPSBcImJ1eVwiO1xuY29uc3QgU0VMTF9NT0RFID0gXCJzZWxsXCI7XG5cbmV4cG9ydCBjbGFzcyBTaG9wTWVudSB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOiBHb2xkZW5TdW47XG4gICAgcHVibGljIHNob3Bfa2V5OiBzdHJpbmc7XG4gICAgcHVibGljIGNsb3NlX2NhbGxiYWNrOiBGdW5jdGlvbjtcbiAgICBwdWJsaWMgaXRlbXNfZGI6IHtba2V5X25hbWU6IHN0cmluZ106IEl0ZW19O1xuICAgIHB1YmxpYyBzaG9wc19kYjoge1trZXlfbmFtZTogc3RyaW5nXTogU2hvcH07XG4gICAgcHVibGljIHNob3BrZWVwX2RpYWxvZ19kYjoge1trZXlfbmFtZTogc3RyaW5nXTogRGlhbG9nRGF0YX07XG5cbiAgICBwdWJsaWMgbm9ybWFsX2l0ZW1fbGlzdDoge1trZXlfbmFtZTogc3RyaW5nXTogU2hvcEl0ZW19O1xuICAgIHB1YmxpYyBhcnRpZmFjdF9saXN0OiB7W2tleV9uYW1lOiBzdHJpbmddOiBTaG9wSXRlbX07XG5cbiAgICBwdWJsaWMgYnV0dG9uc19rZXlzOiBzdHJpbmdbXTtcbiAgICBwdWJsaWMgd2luZG93c19tb2RlOiBzdHJpbmc7XG4gICAgcHVibGljIGN1cnJlbnRfaW5kZXg6IG51bWJlcjtcblxuICAgIHB1YmxpYyBob3Jpem9udGFsX21lbnU6IEhvcml6b250YWxNZW51O1xuICAgIHB1YmxpYyBucGNfZGlhbG9nOiBTaG9wa2VlcERpYWxvZztcbiAgICBwdWJsaWMgeWVzbm9fYWN0aW9uOiBZZXNOb01lbnU7XG4gICAgcHVibGljIGludl93aW46IEludmVudG9yeVdpbmRvdztcbiAgICBwdWJsaWMgYnV5X3NlbGVjdDogQnV5U2VsZWN0TWVudTtcbiAgICBwdWJsaWMgZXFfY29tcGFyZTogRXF1aXBDb21wYXJlO1xuICAgIHB1YmxpYyBxdWFudF93aW46IFNob3BJdGVtUXVhbnRpdHlXaW5kb3c7XG4gICAgcHVibGljIGNoYXJfZGlzcGxheTogQ2hhcnNNZW51O1xuXG4gICAgcHVibGljIGl0ZW1fcHJpY2Vfd2luOiBXaW5kb3c7XG4gICAgcHVibGljIGl0ZW1fZGVzY193aW46IFdpbmRvdztcbiAgICBwdWJsaWMgeW91cl9jb2luc193aW46IFdpbmRvdztcblxuICAgIHB1YmxpYyBidXlfbWVudTogQnV5QXJ0aWZhY3RzTWVudTtcbiAgICBwdWJsaWMgc2VsbF9tZW51OiBTZWxsUmVwYWlyTWVudTtcblxuICAgIHB1YmxpYyB5b3VyX2NvaW5zX2xhYmVsOiBUZXh0T2JqO1xuICAgIHB1YmxpYyB5b3VyX2NvaW5zX3RleHQ6IFRleHRPYmo7XG4gICAgcHVibGljIGl0ZW1fbmFtZV90ZXh0OiBUZXh0T2JqO1xuICAgIHB1YmxpYyBpdGVtX3ByaWNlX2NvaW5zX2xhYmVsOiBUZXh0T2JqO1xuICAgIHB1YmxpYyBpdGVtX3ByaWNlX2xhYmVsOiBUZXh0T2JqO1xuICAgIHB1YmxpYyBpdGVtX3ByaWNlX3ZhbF90ZXh0OiBUZXh0T2JqO1xuICAgIHB1YmxpYyBpdGVtX2Rlc2NfdGV4dDogVGV4dE9iajtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWU6IFBoYXNlci5HYW1lLCBkYXRhOiBHb2xkZW5TdW4pIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5zaG9wX2tleSA9IG51bGw7XG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuaXRlbXNfZGIgPSB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0O1xuICAgICAgICB0aGlzLnNob3BzX2RiID0gXy5tYXBLZXlzKHRoaXMuZGF0YS5kYnMuc2hvcHNfZGIsIHNob3AgPT4gc2hvcC5rZXlfbmFtZSkgYXMge1trZXlfbmFtZTogc3RyaW5nXTogU2hvcH07XG4gICAgICAgIHRoaXMuc2hvcGtlZXBfZGlhbG9nX2RiID0gdGhpcy5kYXRhLmRicy5zaG9wa2VlcF9kaWFsb2dfZGI7XG5cbiAgICAgICAgdGhpcy5ub3JtYWxfaXRlbV9saXN0ID0ge307XG4gICAgICAgIHRoaXMuYXJ0aWZhY3RfbGlzdCA9IHt9O1xuXG4gICAgICAgIHRoaXMuYnV0dG9uc19rZXlzID0gW1wiYnV5XCIsIFwic2VsbFwiLCBcImFydGlmYWN0c1wiLCBcInJlcGFpclwiXTtcbiAgICAgICAgdGhpcy53aW5kb3dzX21vZGUgPSBCVVlfTU9ERTtcbiAgICAgICAgdGhpcy5jdXJyZW50X2luZGV4ID0gMDtcblxuICAgICAgICB0aGlzLmhvcml6b250YWxfbWVudSA9IG5ldyBIb3Jpem9udGFsTWVudShcbiAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgIHRoaXMuZGF0YSxcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uc19rZXlzLFxuICAgICAgICAgICAgdGhpcy5idXR0b25zX2tleXMubWFwKGIgPT4gY2FwaXRhbGl6ZShiKSksXG4gICAgICAgICAgICB7b25fcHJlc3M6IHRoaXMuYnV0dG9uX3ByZXNzLmJpbmQodGhpcyksIG9uX2NhbmNlbDogdGhpcy5jbG9zZV9tZW51LmJpbmQodGhpcyl9XG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5ucGNfZGlhbG9nID0gbmV3IFNob3BrZWVwRGlhbG9nKHRoaXMuZ2FtZSwgdGhpcy5kYXRhKTtcblxuICAgICAgICB0aGlzLnllc25vX2FjdGlvbiA9IG5ldyBZZXNOb01lbnUodGhpcy5nYW1lLCB0aGlzLmRhdGEpO1xuICAgICAgICB0aGlzLmludl93aW4gPSBuZXcgSW52ZW50b3J5V2luZG93KHRoaXMuZ2FtZSwgdGhpcy5kYXRhLCB0aGlzLm9uX2ludl93aW5fY2hhbmdlLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmJ1eV9zZWxlY3QgPSBuZXcgQnV5U2VsZWN0TWVudSh0aGlzLmdhbWUsIHRoaXMuZGF0YSwgdGhpcy5vbl9idXlfc2VsZWN0X2NoYW5nZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5lcV9jb21wYXJlID0gbmV3IEVxdWlwQ29tcGFyZSh0aGlzLmdhbWUsIHRoaXMuZGF0YSk7XG4gICAgICAgIHRoaXMucXVhbnRfd2luID0gbmV3IFNob3BJdGVtUXVhbnRpdHlXaW5kb3codGhpcy5nYW1lLCB0aGlzLmRhdGEpO1xuICAgICAgICB0aGlzLmNoYXJfZGlzcGxheSA9IG5ldyBDaGFyc01lbnUodGhpcy5nYW1lLCB0aGlzLmRhdGEsIHRoaXMub25fY2hhcl9kaXNwbGF5X2NoYW5nZS5iaW5kKHRoaXMpKTtcblxuICAgICAgICB0aGlzLml0ZW1fcHJpY2Vfd2luID0gbmV3IFdpbmRvdyhcbiAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgIElURU1fUFJJQ0VfV0lOX1gsXG4gICAgICAgICAgICBJVEVNX1BSSUNFX1dJTl9ZLFxuICAgICAgICAgICAgSVRFTV9QUklDRV9XSU5fV0lEVEgsXG4gICAgICAgICAgICBJVEVNX1BSSUNFX1dJTl9IRUlHSFRcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy55b3VyX2NvaW5zX3dpbiA9IG5ldyBXaW5kb3coXG4gICAgICAgICAgICB0aGlzLmdhbWUsXG4gICAgICAgICAgICBZT1VSX0NPSU5TX1dJTl9YLFxuICAgICAgICAgICAgWU9VUl9DT0lOU19XSU5fWSxcbiAgICAgICAgICAgIFlPVVJfQ09JTlNfV0lOX1dJRFRILFxuICAgICAgICAgICAgWU9VUl9DT0lOU19XSU5fSEVJR0hUXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuaXRlbV9kZXNjX3dpbiA9IG5ldyBXaW5kb3coXG4gICAgICAgICAgICB0aGlzLmdhbWUsXG4gICAgICAgICAgICBJVEVNX0RFU0NfV0lOX1gsXG4gICAgICAgICAgICBJVEVNX0RFU0NfV0lOX1ksXG4gICAgICAgICAgICBJVEVNX0RFU0NfV0lOX1dJRFRILFxuICAgICAgICAgICAgSVRFTV9ERVNDX1dJTl9IRUlHSFRcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmJ1eV9tZW51ID0gbmV3IEJ1eUFydGlmYWN0c01lbnUodGhpcy5nYW1lLCB0aGlzLmRhdGEsIHRoaXMpO1xuICAgICAgICB0aGlzLnNlbGxfbWVudSA9IG5ldyBTZWxsUmVwYWlyTWVudSh0aGlzLmdhbWUsIHRoaXMuZGF0YSwgdGhpcyk7XG5cbiAgICAgICAgdGhpcy55b3VyX2NvaW5zX2xhYmVsID0gdGhpcy55b3VyX2NvaW5zX3dpbi5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgIFwiWW91ciBDb2luczogXCIsXG4gICAgICAgICAgICBZT1VSX0NPSU5TX0xBQkVMX1gsXG4gICAgICAgICAgICBZT1VSX0NPSU5TX0xBQkVMX1lcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy55b3VyX2NvaW5zX3RleHQgPSB0aGlzLnlvdXJfY29pbnNfd2luLnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIFlPVVJfQ09JTlNfVkFMX0VORF9YLFxuICAgICAgICAgICAgWU9VUl9DT0lOU19WQUxfWSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLml0ZW1fbmFtZV90ZXh0ID0gdGhpcy5pdGVtX3ByaWNlX3dpbi5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBJVEVNX1BSSUNFX05BTUVfWCwgSVRFTV9QUklDRV9OQU1FX1kpO1xuICAgICAgICB0aGlzLml0ZW1fcHJpY2VfbGFiZWwgPSB0aGlzLml0ZW1fcHJpY2Vfd2luLnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgXCJQcmljZVwiLFxuICAgICAgICAgICAgSVRFTV9QUklDRV9MQUJFTF9YLFxuICAgICAgICAgICAgSVRFTV9QUklDRV9MQUJFTF9ZXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuaXRlbV9wcmljZV92YWxfdGV4dCA9IHRoaXMuaXRlbV9wcmljZV93aW4uc2V0X3RleHRfaW5fcG9zaXRpb24oXG4gICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgSVRFTV9QUklDRV9WQUxfRU5EX1gsXG4gICAgICAgICAgICBJVEVNX1BSSUNFX1ZBTF9ZLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgICAgICB0aGlzLml0ZW1fcHJpY2VfY29pbnNfbGFiZWwgPSB0aGlzLml0ZW1fcHJpY2Vfd2luLnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgXCJDb2luc1wiLFxuICAgICAgICAgICAgSVRFTV9QUklDRV9DT0lOU19YLFxuICAgICAgICAgICAgSVRFTV9QUklDRV9DT0lOU19ZXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5pdGVtX2Rlc2NfdGV4dCA9IHRoaXMuaXRlbV9kZXNjX3dpbi5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBJVEVNX0RFU0NfVEVYVF9YLCBJVEVNX0RFU0NfVEVYVF9ZKTtcbiAgICB9XG4gICAgb25fc3VibWVudV9jbG9zZSgpIHtcbiAgICAgICAgdGhpcy5vcGVuX2hvcml6b250YWxfbWVudSgpO1xuICAgIH1cblxuICAgIG9uX2NoYXJfZGlzcGxheV9jaGFuZ2Uoa2V5X25hbWU6IHN0cmluZykge1xuICAgICAgICBpZiAodGhpcy5lcV9jb21wYXJlLmlzX29wZW4pIHRoaXMuZXFfY29tcGFyZS5jaGFuZ2VfY2hhcmFjdGVyKGtleV9uYW1lKTtcbiAgICAgICAgaWYgKHRoaXMuaW52X3dpbi5pc19vcGVuKSB0aGlzLmludl93aW4uY2hhbmdlX2NoYXJhY3RlcihrZXlfbmFtZSk7XG4gICAgfVxuXG4gICAgb25faW52X3dpbl9jaGFuZ2UobGluZTogbnVtYmVyLCBjb2w6IG51bWJlcikge1xuICAgICAgICBpZiAodGhpcy5pdGVtX3ByaWNlX3dpbi5vcGVuICYmIHRoaXMuc2VsbF9tZW51LmFjdGl2ZSkge1xuICAgICAgICAgICAgbGV0IGlzX3JlcGFpciA9IHRoaXMuc2VsbF9tZW51LmlzX3JlcGFpcl9tZW51O1xuICAgICAgICAgICAgbGV0IGl0bSA9IHRoaXMuaW52X3dpbi5pdGVtX2dyaWRbbGluZV1bY29sXTtcblxuICAgICAgICAgICAgaWYgKGl0bSkge1xuICAgICAgICAgICAgICAgIGxldCBpdGVtX3ByaWNlID0gdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFtpdG0ua2V5X25hbWVdLnByaWNlO1xuICAgICAgICAgICAgICAgIGxldCBpbXBvcnRhbnRfaXRlbSA9IHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbaXRtLmtleV9uYW1lXS5pbXBvcnRhbnRfaXRlbTtcbiAgICAgICAgICAgICAgICBsZXQgcHJpY2VfdmFsID0gaXRlbV9wcmljZTtcblxuICAgICAgICAgICAgICAgIGlmIChpc19yZXBhaXIpIHByaWNlX3ZhbCA9IChpdGVtX3ByaWNlICogUkVQQUlSX01VTFRJUExJRVIpIHwgMDtcbiAgICAgICAgICAgICAgICBlbHNlIHByaWNlX3ZhbCA9IChpdGVtX3ByaWNlICogKGl0bS5icm9rZW4gPyBTRUxMX0JST0tFTl9NVUxUSVBMSUVSIDogU0VMTF9NVUxUSVBMSUVSKSkgfCAwO1xuXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVfaXRlbV9pbmZvKFxuICAgICAgICAgICAgICAgICAgICBpdG0ua2V5X25hbWUsXG4gICAgICAgICAgICAgICAgICAgIHByaWNlX3ZhbCxcbiAgICAgICAgICAgICAgICAgICAgaXNfcmVwYWlyID8gIWl0bS5icm9rZW4gOiBpbXBvcnRhbnRfaXRlbSxcbiAgICAgICAgICAgICAgICAgICAgaXNfcmVwYWlyID8gaXRtLmJyb2tlbiA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGltcG9ydGFudF9pdGVtXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uX2J1eV9zZWxlY3RfY2hhbmdlKGtleV9uYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy51cGRhdGVfaXRlbV9pbmZvKGtleV9uYW1lKTtcbiAgICB9XG5cbiAgICBzZXRfaXRlbV9saXN0cygpIHtcbiAgICAgICAgbGV0IG5vcm1hbF9saXN0OiBTaG9wSXRlbVtdID0gW107XG4gICAgICAgIGxldCBhcnRpZmFjdF9saXN0OiBTaG9wSXRlbVtdID0gW107XG5cbiAgICAgICAgbGV0IGl0ZW1fbGlzdCA9IHRoaXMuc2hvcHNfZGJbdGhpcy5zaG9wX2tleV0uaXRlbV9saXN0O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1fbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGl0ZW0gPSB0aGlzLml0ZW1zX2RiW2l0ZW1fbGlzdFtpXS5rZXlfbmFtZV07XG4gICAgICAgICAgICBpZiAoaXRlbV9saXN0W2ldLnF1YW50aXR5ID09PSAwKSBjb250aW51ZTtcblxuICAgICAgICAgICAgaWYgKGl0ZW0ucmFyZV9pdGVtID09PSB0cnVlKSBhcnRpZmFjdF9saXN0LnB1c2goaXRlbV9saXN0W2ldKTtcbiAgICAgICAgICAgIGVsc2Ugbm9ybWFsX2xpc3QucHVzaChpdGVtX2xpc3RbaV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5ub3JtYWxfaXRlbV9saXN0ID0gXy5tYXBLZXlzKG5vcm1hbF9saXN0LCBpdGVtID0+IGl0ZW0ua2V5X25hbWUpIGFzIHtba2V5X25hbWU6IHN0cmluZ106IFNob3BJdGVtfTtcbiAgICAgICAgdGhpcy5hcnRpZmFjdF9saXN0ID0gXy5tYXBLZXlzKGFydGlmYWN0X2xpc3QsIGl0ZW0gPT4gaXRlbS5rZXlfbmFtZSkgYXMge1trZXlfbmFtZTogc3RyaW5nXTogU2hvcEl0ZW19O1xuICAgIH1cblxuICAgIHVwZGF0ZV95b3VyX2NvaW5zKCkge1xuICAgICAgICB0aGlzLnlvdXJfY29pbnNfd2luLnVwZGF0ZV90ZXh0KFN0cmluZyh0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLmNvaW5zKSwgdGhpcy55b3VyX2NvaW5zX3RleHQpO1xuICAgIH1cblxuICAgIHVwZGF0ZV9pdGVtX2luZm8oXG4gICAgICAgIGtleTogc3RyaW5nLFxuICAgICAgICBjdXN0b21fcHJpY2U/OiBudW1iZXIsXG4gICAgICAgIGN1c3RvbV9tc2c6IGJvb2xlYW4gPSBmYWxzZSxcbiAgICAgICAgYnJva2VuOiBib29sZWFuID0gZmFsc2UsXG4gICAgICAgIGNhbnRfc2VsbDogYm9vbGVhbiA9IGZhbHNlXG4gICAgKSB7XG4gICAgICAgIGxldCB0aGlzX2l0ZW0gPSB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W2tleV07XG5cbiAgICAgICAgdGhpcy5pdGVtX2Rlc2Nfd2luLnVwZGF0ZV90ZXh0KHRoaXNfaXRlbS5kZXNjcmlwdGlvbiwgdGhpcy5pdGVtX2Rlc2NfdGV4dCk7XG4gICAgICAgIHRoaXMuaXRlbV9wcmljZV93aW4udXBkYXRlX3RleHQodGhpc19pdGVtLm5hbWUsIHRoaXMuaXRlbV9uYW1lX3RleHQpO1xuXG4gICAgICAgIGxldCBjb2luc19sYWJlbCA9IGN1c3RvbV9tc2cgPyBcIlwiIDogXCJDb2luc1wiO1xuICAgICAgICB0aGlzLml0ZW1fcHJpY2Vfd2luLnVwZGF0ZV90ZXh0KGNvaW5zX2xhYmVsLCB0aGlzLml0ZW1fcHJpY2VfY29pbnNfbGFiZWwpO1xuXG4gICAgICAgIGxldCBwcmljZV9sYWJlbCA9IFwiUHJpY2VcIjtcbiAgICAgICAgaWYgKGN1c3RvbV9tc2cgJiYgIWJyb2tlbikgcHJpY2VfbGFiZWwgPSBcIkl0J3Mgbm90IGJyb2tlbi5cIjtcbiAgICAgICAgZWxzZSBpZiAoY3VzdG9tX21zZyAmJiBjYW50X3NlbGwpIHByaWNlX2xhYmVsID0gXCJXZSBjYW4ndCBidXkgdGhhdC5cIjtcbiAgICAgICAgdGhpcy5pdGVtX3ByaWNlX3dpbi51cGRhdGVfdGV4dChwcmljZV9sYWJlbCwgdGhpcy5pdGVtX3ByaWNlX2xhYmVsKTtcblxuICAgICAgICBsZXQgcHJpY2VfdmFsID0gY3VzdG9tX3ByaWNlID8gY3VzdG9tX3ByaWNlIDogdGhpc19pdGVtLnByaWNlO1xuICAgICAgICBsZXQgcHJpY2VfdGV4dCA9IGN1c3RvbV9tc2cgPyBcIlwiIDogcHJpY2VfdmFsO1xuICAgICAgICB0aGlzLml0ZW1fcHJpY2Vfd2luLnVwZGF0ZV90ZXh0KHByaWNlX3RleHQsIHRoaXMuaXRlbV9wcmljZV92YWxfdGV4dCk7XG4gICAgfVxuXG4gICAgYWx0ZXJuYXRlX3dpbmRvd19wb3MobW9kZTogc3RyaW5nKSB7XG4gICAgICAgIGlmICh0aGlzLndpbmRvd3NfbW9kZSA9PT0gbW9kZSkgcmV0dXJuO1xuICAgICAgICBpZiAobW9kZSA9PT0gQlVZX01PREUpIHtcbiAgICAgICAgICAgIHRoaXMuaXRlbV9wcmljZV93aW4udXBkYXRlX3Bvc2l0aW9uKHt4OiBJVEVNX1BSSUNFX1dJTl9YLCB5OiBJVEVNX1BSSUNFX1dJTl9ZfSk7XG4gICAgICAgICAgICB0aGlzLml0ZW1fZGVzY193aW4udXBkYXRlX3Bvc2l0aW9uKHt4OiBJVEVNX0RFU0NfV0lOX1gsIHk6IElURU1fREVTQ19XSU5fWX0pO1xuICAgICAgICAgICAgdGhpcy55b3VyX2NvaW5zX3dpbi51cGRhdGVfcG9zaXRpb24oe3g6IFlPVVJfQ09JTlNfV0lOX1gsIHk6IFlPVVJfQ09JTlNfV0lOX1l9KTtcbiAgICAgICAgICAgIHRoaXMud2luZG93c19tb2RlID0gQlVZX01PREU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLml0ZW1fcHJpY2Vfd2luLnVwZGF0ZV9wb3NpdGlvbih7eDogSVRFTV9QUklDRV9XSU5fWDIsIHk6IElURU1fUFJJQ0VfV0lOX1kyfSk7XG4gICAgICAgICAgICB0aGlzLml0ZW1fZGVzY193aW4udXBkYXRlX3Bvc2l0aW9uKHt4OiBJVEVNX0RFU0NfV0lOX1gyLCB5OiBJVEVNX0RFU0NfV0lOX1kyfSk7XG4gICAgICAgICAgICB0aGlzLnlvdXJfY29pbnNfd2luLnVwZGF0ZV9wb3NpdGlvbih7eDogWU9VUl9DT0lOU19XSU5fWDIsIHk6IFlPVVJfQ09JTlNfV0lOX1kyfSk7XG4gICAgICAgICAgICB0aGlzLndpbmRvd3NfbW9kZSA9IFNFTExfTU9ERTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGJ1dHRvbl9wcmVzcygpIHtcbiAgICAgICAgdGhpcy5ob3Jpem9udGFsX21lbnUuY2xvc2UoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50X2luZGV4ID0gdGhpcy5ob3Jpem9udGFsX21lbnUuc2VsZWN0ZWRfYnV0dG9uX2luZGV4O1xuXG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuYnV0dG9uc19rZXlzW3RoaXMuaG9yaXpvbnRhbF9tZW51LnNlbGVjdGVkX2J1dHRvbl9pbmRleF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiYnV5XCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWx0ZXJuYXRlX3dpbmRvd19wb3MoQlVZX01PREUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1eV9tZW51Lm9wZW5fbWVudShmYWxzZSwgdGhpcy5vbl9zdWJtZW51X2Nsb3NlLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwic2VsbFwiOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFsdGVybmF0ZV93aW5kb3dfcG9zKFNFTExfTU9ERSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsbF9tZW51Lm9wZW5fbWVudShmYWxzZSwgdGhpcy5vbl9zdWJtZW51X2Nsb3NlLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiYXJ0aWZhY3RzXCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWx0ZXJuYXRlX3dpbmRvd19wb3MoQlVZX01PREUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1eV9tZW51Lm9wZW5fbWVudSh0cnVlLCB0aGlzLm9uX3N1Ym1lbnVfY2xvc2UuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJyZXBhaXJcIjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbHRlcm5hdGVfd2luZG93X3BvcyhTRUxMX01PREUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGxfbWVudS5vcGVuX21lbnUodHJ1ZSwgdGhpcy5vbl9zdWJtZW51X2Nsb3NlLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5ucGNfZGlhbG9nLmlzX2FjdGl2ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubnBjX2RpYWxvZy5jbG9zZV9kaWFsb2coKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdXBkYXRlX2l0ZW1zKCkge1xuICAgICAgICBsZXQgYWN0aXZlX21lbnUgPSB0aGlzLmJ1eV9tZW51LmFjdGl2ZSA/IHRoaXMuYnV5X21lbnUgOiB0aGlzLnNlbGxfbWVudS5hY3RpdmUgPyB0aGlzLnNlbGxfbWVudSA6IG51bGw7XG5cbiAgICAgICAgdGhpcy5zZXRfaXRlbV9saXN0cygpO1xuICAgICAgICBpZiAoYWN0aXZlX21lbnUgPT09IHRoaXMuYnV5X21lbnUpIHtcbiAgICAgICAgICAgIHRoaXMuYnV5X21lbnUuaXRlbV9saXN0ID0gdGhpcy5idXlfbWVudS5pc19hcnRpZmFjdHNfbWVudSA/IHRoaXMuYXJ0aWZhY3RfbGlzdCA6IHRoaXMubm9ybWFsX2l0ZW1fbGlzdDtcbiAgICAgICAgICAgIHRoaXMuYnV5X3NlbGVjdC5pdGVtcyA9IHRoaXMuYnV5X21lbnUuaXRlbV9saXN0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlX3Bvc2l0aW9uKCkge1xuICAgICAgICB0aGlzLm5wY19kaWFsb2cudXBkYXRlX3Bvc2l0aW9uKCk7XG4gICAgICAgIHRoaXMuaG9yaXpvbnRhbF9tZW51LnVwZGF0ZV9wb3NpdGlvbigpO1xuICAgIH1cblxuICAgIG9wZW5faG9yaXpvbnRhbF9tZW51KG1lc3NhZ2Vfa2V5ID0gXCJjYW5jZWxfb3B0aW9uXCIpIHtcbiAgICAgICAgaWYgKCF0aGlzLm5wY19kaWFsb2cuaXNfYWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLm5wY19kaWFsb2cub3BlbihcbiAgICAgICAgICAgICAgICB0aGlzLnNob3Bfa2V5LFxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5pbmZvLnNob3BzX2xpc3RbdGhpcy5zaG9wX2tleV0uYXZhdGFyX2tleSxcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaW5mby5zaG9wc19saXN0W3RoaXMuc2hvcF9rZXldLmRpYWxvZ19rZXlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm5wY19kaWFsb2cudXBkYXRlX2RpYWxvZyhtZXNzYWdlX2tleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ob3Jpem9udGFsX21lbnUub3Blbih1bmRlZmluZWQsIHRoaXMuY3VycmVudF9pbmRleCk7XG4gICAgfVxuXG4gICAgb3Blbl9tZW51KHNob3Bfa2V5OiBzdHJpbmcsIGNsb3NlX2NhbGxiYWNrPzogRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5zaG9wX2tleSA9IHNob3Bfa2V5O1xuICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrID0gY2xvc2VfY2FsbGJhY2s7XG5cbiAgICAgICAgaWYgKHRoaXMuZGF0YS5oZXJvLmluX2FjdGlvbigpKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zdG9wX2NoYXIoKTtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnVwZGF0ZV9zaGFkb3coKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0X2l0ZW1fbGlzdHMoKTtcbiAgICAgICAgdGhpcy5kYXRhLnNob3Bfb3BlbiA9IHRydWU7XG4gICAgICAgIHRoaXMub3Blbl9ob3Jpem9udGFsX21lbnUoKTtcbiAgICB9XG5cbiAgICBlbmRfZGlhbG9nKCkge1xuICAgICAgICB0aGlzLnNob3Bfa2V5ID0gbnVsbDtcbiAgICAgICAgdGhpcy5ucGNfZGlhbG9nLmNsb3NlKCk7XG4gICAgICAgIHRoaXMuZGF0YS5zaG9wX29wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kYXRhLmNvbnRyb2xfbWFuYWdlci5yZXNldCgpO1xuXG4gICAgICAgIGlmICh0aGlzLmNsb3NlX2NhbGxiYWNrKSB0aGlzLmNsb3NlX2NhbGxiYWNrKCk7XG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBudWxsO1xuICAgIH1cblxuICAgIGNsb3NlX21lbnUoKSB7XG4gICAgICAgIGlmICghdGhpcy5ob3Jpem9udGFsX21lbnUubWVudV9hY3RpdmUpIHJldHVybjtcbiAgICAgICAgdGhpcy5ob3Jpem9udGFsX21lbnUuY2xvc2UoKTtcbiAgICAgICAgdGhpcy5kYXRhLmN1cnNvcl9tYW5hZ2VyLmhpZGUoKTtcblxuICAgICAgICB0aGlzLm5wY19kaWFsb2cudXBkYXRlX2RpYWxvZyhcImdvb2RieWVcIik7XG5cbiAgICAgICAgdGhpcy5ub3JtYWxfaXRlbV9saXN0ID0ge307XG4gICAgICAgIHRoaXMuYXJ0aWZhY3RfbGlzdCA9IHt9O1xuICAgICAgICB0aGlzLmN1cnJlbnRfaW5kZXggPSAwO1xuXG4gICAgICAgIHRoaXMuZGF0YS5jb250cm9sX21hbmFnZXIuc2ltcGxlX2lucHV0KHRoaXMuZW5kX2RpYWxvZy5iaW5kKHRoaXMpKTtcbiAgICB9XG59XG4iLCJpbXBvcnQge0RpYWxvZ01hbmFnZXJ9IGZyb20gXCIuLi8uLi91dGlscy9EaWFsb2dNYW5hZ2VyXCI7XG5pbXBvcnQge0dvbGRlblN1bn0gZnJvbSBcIi4uLy4uL0dvbGRlblN1blwiO1xuaW1wb3J0IHtTaG9wTWVudX0gZnJvbSBcIi4uLy4uL21haW5fbWVudXMvU2hvcE1lbnVcIjtcbmltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuXG5jb25zdCBGUkFNRV9TSVpFID0gMzY7XG5cbmV4cG9ydCB0eXBlIERpYWxvZ0RhdGEgPSB7XG4gICAga2V5X25hbWU6IHN0cmluZztcbiAgICBtZXNzYWdlczogRGlhbG9nTWVzc2FnZVtdO1xufTtcblxuZXhwb3J0IHR5cGUgRGlhbG9nTWVzc2FnZSA9IHtcbiAgICBrZXk6IHN0cmluZztcbiAgICB0ZXh0OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgY2xhc3MgU2hvcGtlZXBEaWFsb2cge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgZGF0YTogR29sZGVuU3VuO1xuXG4gICAgcHVibGljIHNob3Bfa2V5OiBzdHJpbmc7XG4gICAgcHVibGljIGF2YXRhcl9rZXk6IHN0cmluZztcbiAgICBwdWJsaWMgZGlhbG9nX2tleTogc3RyaW5nO1xuXG4gICAgcHVibGljIGRpYWxvZ19tYW5hZ2VyOiBEaWFsb2dNYW5hZ2VyO1xuICAgIHB1YmxpYyBtZXNzYWdlczoge1trZXk6IHN0cmluZ106IERpYWxvZ01lc3NhZ2V9O1xuICAgIHB1YmxpYyBjdXJyZW50X21lc3NhZ2U6IHN0cmluZztcbiAgICBwdWJsaWMgaXNfYWN0aXZlOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZTogUGhhc2VyLkdhbWUsIGRhdGE6IEdvbGRlblN1bikge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuXG4gICAgICAgIHRoaXMuc2hvcF9rZXkgPSBudWxsO1xuICAgICAgICB0aGlzLmF2YXRhcl9rZXkgPSBudWxsO1xuICAgICAgICB0aGlzLmRpYWxvZ19rZXkgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuZGlhbG9nX21hbmFnZXIgPSBuZXcgRGlhbG9nTWFuYWdlcih0aGlzLmdhbWUsIHRoaXMuZGF0YSk7XG5cbiAgICAgICAgdGhpcy5tZXNzYWdlcyA9IG51bGw7XG4gICAgICAgIHRoaXMuY3VycmVudF9tZXNzYWdlID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc19hY3RpdmUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBvcGVuKHNob3Bfa2V5OiBzdHJpbmcsIGF2YXRhcl9rZXk6IHN0cmluZywgZGlhbG9nX2tleTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuc2hvcF9rZXkgPSBzaG9wX2tleTtcbiAgICAgICAgdGhpcy5hdmF0YXJfa2V5ID0gYXZhdGFyX2tleTtcbiAgICAgICAgdGhpcy5kaWFsb2dfa2V5ID0gZGlhbG9nX2tleTtcbiAgICAgICAgdGhpcy5tZXNzYWdlcyA9IF8ubWFwS2V5cyhcbiAgICAgICAgICAgIHRoaXMuZGF0YS5zaG9wX21lbnUuc2hvcGtlZXBfZGlhbG9nX2RiW3RoaXMuZGlhbG9nX2tleV0ubWVzc2FnZXMsXG4gICAgICAgICAgICBtZXNzYWdlcyA9PiBtZXNzYWdlcy5rZXlcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLnVwZGF0ZV9kaWFsb2coXCJ3ZWxjb21lXCIpO1xuICAgIH1cblxuICAgIHVwZGF0ZV9wb3NpdGlvbigpIHtcbiAgICAgICAgdGhpcy5kaWFsb2dfbWFuYWdlci51cGRhdGVfcG9zaXRpb24oKTtcbiAgICB9XG5cbiAgICByZXBsYWNlX3RleHQobWVzc2FnZTogc3RyaW5nLCBoZXJvPzogc3RyaW5nLCBpdGVtPzogc3RyaW5nLCBwcmljZT86IHN0cmluZykge1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5pbmNsdWRlcyhcIiR7SEVST31cIikpIG1lc3NhZ2UgPSBtZXNzYWdlLnJlcGxhY2UoXCIke0hFUk99XCIsIGhlcm8pO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UuaW5jbHVkZXMoXCIke0lURU19XCIpKSBtZXNzYWdlID0gbWVzc2FnZS5yZXBsYWNlKFwiJHtJVEVNfVwiLCBpdGVtKTtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlLmluY2x1ZGVzKFwiJHtQUklDRX1cIikpIG1lc3NhZ2UgPSBtZXNzYWdlLnJlcGxhY2UoXCIke1BSSUNFfVwiLCBwcmljZSk7XG4gICAgICAgIH0gd2hpbGUgKG1lc3NhZ2UuaW5jbHVkZXMoXCIke0hFUk99XCIpIHx8IG1lc3NhZ2UuaW5jbHVkZXMoXCIke0lURU19XCIpIHx8IG1lc3NhZ2UuaW5jbHVkZXMoXCIke1BSSUNFfVwiKSk7XG5cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuXG4gICAgZ2V0X21lc3NhZ2UobWVzc2FnZV9rZXk6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlc1ttZXNzYWdlX2tleV0udGV4dDtcbiAgICB9XG5cbiAgICB1cGRhdGVfZGlhbG9nKG1lc3NhZ2U6IHN0cmluZywgc2hvd19jcnlzdGFsOiBib29sZWFuID0gZmFsc2UsIGlzX2tleTogYm9vbGVhbiA9IHRydWUsIGNhbGxiYWNrPzogRnVuY3Rpb24pIHtcbiAgICAgICAgaWYgKGlzX2tleSkgdGhpcy5jdXJyZW50X21lc3NhZ2UgPSB0aGlzLm1lc3NhZ2VzW21lc3NhZ2VdLnRleHQ7XG4gICAgICAgIGVsc2UgdGhpcy5jdXJyZW50X21lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICB0aGlzLmlzX2FjdGl2ZSA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5kaWFsb2dfbWFuYWdlci5xdWlja19uZXh0KFxuICAgICAgICAgICAgdGhpcy5jdXJyZW50X21lc3NhZ2UsXG4gICAgICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgICAgIHRoaXMuYXZhdGFyX2tleSxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHt4OiBGUkFNRV9TSVpFICsgNCwgeTogMH0sXG4gICAgICAgICAgICB7eDogMCwgeTogMH0sXG4gICAgICAgICAgICBzaG93X2NyeXN0YWxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBjbG9zZV9kaWFsb2coY2FsbGJhY2s/OiBGdW5jdGlvbiwgZGlhbG9nX29ubHk6IGJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHRoaXMuaXNfYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGlhbG9nX21hbmFnZXIua2lsbF9kaWFsb2coY2FsbGJhY2ssIGRpYWxvZ19vbmx5KTtcbiAgICB9XG5cbiAgICBjbG9zZShjYWxsYmFjaz86IEZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMuY2xvc2VfZGlhbG9nKGNhbGxiYWNrLCBmYWxzZSk7XG5cbiAgICAgICAgdGhpcy5zaG9wX2tleSA9IG51bGw7XG4gICAgICAgIHRoaXMuYXZhdGFyX2tleSA9IG51bGw7XG4gICAgICAgIHRoaXMuZGlhbG9nX2tleSA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5tZXNzYWdlcyA9IG51bGw7XG4gICAgICAgIHRoaXMuY3VycmVudF9tZXNzYWdlID0gbnVsbDtcbiAgICB9XG59XG4iLCJpbXBvcnQge0dvbGRlblN1bn0gZnJvbSBcIi4uLy4uL0dvbGRlblN1blwiO1xuaW1wb3J0IHtJdGVtLCBpdGVtX3R5cGVzfSBmcm9tIFwiLi4vLi4vSXRlbVwiO1xuaW1wb3J0IHtTaG9wTWVudX0gZnJvbSBcIi4uLy4uL21haW5fbWVudXMvU2hvcE1lbnVcIjtcbmltcG9ydCB7SW52ZW50b3J5V2luZG93fSBmcm9tIFwiLi9JbnZlbnRvcnlXaW5kb3dcIjtcbmltcG9ydCB7Q2hhcnNNZW51LCBDaGFyc01lbnVNb2Rlc30gZnJvbSBcIi4uLy4uL3N1cHBvcnRfbWVudXMvQ2hhcnNNZW51XCI7XG5pbXBvcnQge1dpbmRvd30gZnJvbSBcIi4uLy4uL1dpbmRvd1wiO1xuaW1wb3J0IHtTaG9wSXRlbVF1YW50aXR5V2luZG93fSBmcm9tIFwiLi9TaG9wSXRlbVF1YW50aXR5V2luZG93XCI7XG5pbXBvcnQge0J1eVNlbGVjdE1lbnV9IGZyb20gXCIuL0J1eVNlbGVjdE1lbnVcIjtcbmltcG9ydCB7RXF1aXBDb21wYXJlfSBmcm9tIFwiLi9FcXVpcENvbXBhcmVcIjtcbmltcG9ydCB7WWVzTm9NZW51fSBmcm9tIFwiLi4vWWVzTm9NZW51XCI7XG5pbXBvcnQge1Nob3BrZWVwRGlhbG9nfSBmcm9tIFwiLi9TaG9wa2VlcERpYWxvZ1wiO1xuaW1wb3J0IHtTaG9wSXRlbX0gZnJvbSBcIi4uLy4uL1Nob3BcIjtcbmltcG9ydCB7SXRlbVNsb3QsIE1haW5DaGFyfSBmcm9tIFwiLi4vLi4vTWFpbkNoYXJcIjtcblxuY29uc3QgTUFYX0lOVkVOVE9SWV9TSVpFID0gMTU7XG5jb25zdCBNQVhfSVRFTVNfUEVSX1BBR0UgPSA3O1xuY29uc3QgTUFYX1NUQUNLX1NJWkUgPSAzMDtcblxuY29uc3QgU0VMTF9NVUxUSVBMSUVSID0gMyAvIDQ7XG5jb25zdCBSRVBBSVJfTVVMVElQTElFUiA9IDEgLyA0O1xuY29uc3QgU0VMTF9CUk9LRU5fTVVMVElQTElFUiA9IFNFTExfTVVMVElQTElFUiAtIFJFUEFJUl9NVUxUSVBMSUVSO1xuXG5jb25zdCBZRVNOT19YID0gNTY7XG5jb25zdCBZRVNOT19ZID0gNDA7XG5cbmV4cG9ydCBjb25zdCBXaW5kb3dOYW1lcyA9IHtcbiAgICBJVEVNX0RFU0NfV0lOOiBcIml0ZW1fZGVzY193aW5cIixcbiAgICBJVEVNX1BSSUNFX1dJTjogXCJpdGVtX3ByaWNlX3dpblwiLFxuICAgIFlPVVJfQ09JTlNfV0lOOiBcInlvdXJfY29pbnNfd2luXCIsXG4gICAgQ0hBUl9ESVNQTEFZOiBcImNoYXJfZGlzcGxheVwiLFxuICAgIElOVl9XSU46IFwiaW52X3dpblwiLFxuICAgIFlFU05PX0FDVElPTjogXCJ5ZXNub19hY3Rpb25cIixcbiAgICBRVUFOVF9XSU46IFwicXVhbnRfd2luXCIsXG4gICAgQlVZX1NFTEVDVDogXCJidXlfc2VsZWN0XCIsXG4gICAgRVFfQ09NUEFSRTogXCJlcV9jb21wYXJlXCIsXG59O1xuXG5leHBvcnQgY2xhc3MgQnV5QXJ0aWZhY3RzTWVudSB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOiBHb2xkZW5TdW47XG4gICAgcHVibGljIHBhcmVudDogU2hvcE1lbnU7XG4gICAgcHVibGljIGNsb3NlX2NhbGxiYWNrOiBGdW5jdGlvbjtcblxuICAgIHB1YmxpYyBpdGVtX2Rlc2Nfd2luOiBXaW5kb3c7XG4gICAgcHVibGljIHlvdXJfY29pbnNfd2luOiBXaW5kb3c7XG4gICAgcHVibGljIGl0ZW1fcHJpY2Vfd2luOiBXaW5kb3c7XG4gICAgcHVibGljIGNoYXJfZGlzcGxheTogQ2hhcnNNZW51O1xuICAgIHB1YmxpYyBpbnZfd2luOiBJbnZlbnRvcnlXaW5kb3c7XG4gICAgcHVibGljIHF1YW50X3dpbjogU2hvcEl0ZW1RdWFudGl0eVdpbmRvdztcbiAgICBwdWJsaWMgYnV5X3NlbGVjdDogQnV5U2VsZWN0TWVudTtcbiAgICBwdWJsaWMgZXFfY29tcGFyZTogRXF1aXBDb21wYXJlO1xuICAgIHB1YmxpYyB5ZXNub19hY3Rpb246IFllc05vTWVudTtcbiAgICBwdWJsaWMgbnBjX2RpYWxvZzogU2hvcGtlZXBEaWFsb2c7XG5cbiAgICBwdWJsaWMgaXNfYXJ0aWZhY3RzX21lbnU6IGJvb2xlYW47XG4gICAgcHVibGljIGFjdGl2ZTogYm9vbGVhbjtcblxuICAgIHB1YmxpYyBpdGVtX2xpc3Q6IHtba2V5X25hbWU6IHN0cmluZ106IFNob3BJdGVtfTtcbiAgICBwdWJsaWMgc2VsZWN0ZWRfaXRlbTogU2hvcEl0ZW07XG4gICAgcHVibGljIGJ1eV9zZWxlY3RfcG9zOiB7cGFnZTogbnVtYmVyOyBpbmRleDogbnVtYmVyOyBpc19sYXN0OiBib29sZWFuOyBzaG91bGRfY2hhbmdlOiBib29sZWFufTtcbiAgICBwdWJsaWMgb2xkX2l0ZW06IEl0ZW07XG5cbiAgICBwdWJsaWMgc2VsZWN0ZWRfY2hhcmFjdGVyOiBNYWluQ2hhcjtcbiAgICBwdWJsaWMgc2VsZWN0ZWRfY2hhcl9pbmRleDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZTogUGhhc2VyLkdhbWUsIGRhdGE6IEdvbGRlblN1biwgcGFyZW50OiBTaG9wTWVudSkge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5pdGVtX2Rlc2Nfd2luID0gdGhpcy5wYXJlbnQuaXRlbV9kZXNjX3dpbjtcbiAgICAgICAgdGhpcy55b3VyX2NvaW5zX3dpbiA9IHRoaXMucGFyZW50LnlvdXJfY29pbnNfd2luO1xuICAgICAgICB0aGlzLml0ZW1fcHJpY2Vfd2luID0gdGhpcy5wYXJlbnQuaXRlbV9wcmljZV93aW47XG4gICAgICAgIHRoaXMuY2hhcl9kaXNwbGF5ID0gdGhpcy5wYXJlbnQuY2hhcl9kaXNwbGF5O1xuICAgICAgICB0aGlzLmludl93aW4gPSB0aGlzLnBhcmVudC5pbnZfd2luO1xuICAgICAgICB0aGlzLnF1YW50X3dpbiA9IHRoaXMucGFyZW50LnF1YW50X3dpbjtcbiAgICAgICAgdGhpcy5idXlfc2VsZWN0ID0gdGhpcy5wYXJlbnQuYnV5X3NlbGVjdDtcbiAgICAgICAgdGhpcy5lcV9jb21wYXJlID0gdGhpcy5wYXJlbnQuZXFfY29tcGFyZTtcbiAgICAgICAgdGhpcy55ZXNub19hY3Rpb24gPSB0aGlzLnBhcmVudC55ZXNub19hY3Rpb247XG4gICAgICAgIHRoaXMubnBjX2RpYWxvZyA9IHRoaXMucGFyZW50Lm5wY19kaWFsb2c7XG5cbiAgICAgICAgdGhpcy5pc19hcnRpZmFjdHNfbWVudSA9IG51bGw7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5pdGVtX2xpc3QgPSB7fTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9pdGVtID0gbnVsbDtcbiAgICAgICAgdGhpcy5idXlfc2VsZWN0X3BvcyA9IHtwYWdlOiAwLCBpbmRleDogMCwgaXNfbGFzdDogZmFsc2UsIHNob3VsZF9jaGFuZ2U6IGZhbHNlfTtcbiAgICAgICAgdGhpcy5vbGRfaXRlbSA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIgPSBudWxsO1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXggPSAwO1xuICAgIH1cblxuICAgIHVwZGF0ZV9nYW1lX3RpY2tldF9zdGVwKCkge1xuICAgICAgICBsZXQgYm91Z2h0ID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5nYW1lX3RpY2tldHMudGlja2V0c19ib3VnaHQ7XG4gICAgICAgIGlmIChib3VnaHQgPj0gMSAmJiBib3VnaHQgPCA2KSByZXR1cm4gMzAwO1xuICAgICAgICBpZiAoYm91Z2h0ID49IDYgJiYgYm91Z2h0IDwgMTEpIHJldHVybiA1MDA7XG4gICAgICAgIGlmIChib3VnaHQgPj0gMTEgJiYgYm91Z2h0IDwgMTYpIHJldHVybiAxMDAwO1xuICAgICAgICBpZiAoYm91Z2h0ID49IDE2ICYmIGJvdWdodCA8IDIxKSByZXR1cm4gMjAwMDtcbiAgICAgICAgaWYgKGJvdWdodCA+PSAyMSAmJiBib3VnaHQgPCAyNikgcmV0dXJuIDQwMDA7XG4gICAgICAgIGlmIChib3VnaHQgPj0gMjYpIHJldHVybiA4MDAwO1xuICAgIH1cblxuICAgIGNoZWNrX2dhbWVfdGlja2V0KCkge1xuICAgICAgICBsZXQgZ2FtZV90aWNrZXQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5nYW1lX3RpY2tldHMuY29pbnNfcmVtYWluaW5nIC09IHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2l0ZW0ua2V5X25hbWVcbiAgICAgICAgXS5wcmljZTtcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEuZ2FtZV90aWNrZXRzLmNvaW5zX3JlbWFpbmluZyA8PSAwKSB7XG4gICAgICAgICAgICBnYW1lX3RpY2tldCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLmdhbWVfdGlja2V0cy50aWNrZXRzX2JvdWdodCArPSAxO1xuICAgICAgICAgICAgdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5nYW1lX3RpY2tldHMuY29pbnNfcmVtYWluaW5nICs9IHRoaXMudXBkYXRlX2dhbWVfdGlja2V0X3N0ZXAoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChnYW1lX3RpY2tldCkge1xuICAgICAgICAgICAgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2coXCJnYW1lX3RpY2tldFwiLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5jb250cm9sX21hbmFnZXIuc2ltcGxlX2lucHV0KHRoaXMub3Blbl9pbnZlbnRvcnlfdmlldy5iaW5kKHRoaXMsIHRydWUpKTtcbiAgICAgICAgfSBlbHNlIHRoaXMub3Blbl9idXlfc2VsZWN0KCk7XG4gICAgfVxuXG4gICAgc2VsbF9vbGRfZXF1aXAob2xkX2l0ZW06IEl0ZW0sIHNsb3Q6IEl0ZW1TbG90KSB7XG4gICAgICAgIGxldCBtc2dfa2V5ID0gb2xkX2l0ZW0ucmFyZV9pdGVtID8gXCJhZnRlcl9zZWxsX2FydGlmYWN0XCIgOiBcImFmdGVyX3NlbGxfbm9ybWFsXCI7XG4gICAgICAgIHRoaXMubnBjX2RpYWxvZy51cGRhdGVfZGlhbG9nKG1zZ19rZXksIHRydWUpO1xuXG4gICAgICAgIGlmIChvbGRfaXRlbS5yYXJlX2l0ZW0pIHtcbiAgICAgICAgICAgIGxldCBzaG9wX2xpc3QgPSB0aGlzLmRhdGEuaW5mby5zaG9wc19saXN0W3RoaXMucGFyZW50LnNob3Bfa2V5XS5pdGVtX2xpc3Q7XG4gICAgICAgICAgICBsZXQgZXhpc3RzID0gZmFsc2U7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNob3BfbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChzaG9wX2xpc3RbaV0ua2V5X25hbWUgPT09IG9sZF9pdGVtLmtleV9uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGV4aXN0cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5pbmZvLnNob3BzX2xpc3RbdGhpcy5wYXJlbnQuc2hvcF9rZXldLml0ZW1fbGlzdFtpXS5xdWFudGl0eSArPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZXhpc3RzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmluZm8uc2hvcHNfbGlzdFt0aGlzLnBhcmVudC5zaG9wX2tleV0uaXRlbV9saXN0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBrZXlfbmFtZTogb2xkX2l0ZW0ua2V5X25hbWUsXG4gICAgICAgICAgICAgICAgICAgIHF1YW50aXR5OiAxLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5idXlfc2VsZWN0X3Bvcy5zaG91bGRfY2hhbmdlKSB0aGlzLmJ1eV9zZWxlY3RfcG9zLnNob3VsZF9jaGFuZ2UgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIuaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci5pdGVtc1tpXS5rZXlfbmFtZSA9PT0gb2xkX2l0ZW0ua2V5X25hbWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci5pdGVtcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc2VsbF9wcmljZSA9IHNsb3QuYnJva2VuXG4gICAgICAgICAgICA/IHRoaXMub2xkX2l0ZW0ucHJpY2UgKiBTRUxMX0JST0tFTl9NVUxUSVBMSUVSXG4gICAgICAgICAgICA6IHRoaXMub2xkX2l0ZW0ucHJpY2UgKiBTRUxMX01VTFRJUExJRVI7XG5cbiAgICAgICAgdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5jb2lucyArPSBzZWxsX3ByaWNlIHwgMDtcbiAgICAgICAgdGhpcy5wYXJlbnQudXBkYXRlX3lvdXJfY29pbnMoKTtcbiAgICAgICAgdGhpcy5wYXJlbnQudXBkYXRlX2l0ZW1zKCk7XG5cbiAgICAgICAgdGhpcy5kYXRhLmNvbnRyb2xfbWFuYWdlci5zaW1wbGVfaW5wdXQodGhpcy5jaGVja19nYW1lX3RpY2tldC5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICBlcXVpcF9uZXdfaXRlbSgpIHtcbiAgICAgICAgbGV0IGl0ZW1fdHlwZSA9IHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbdGhpcy5zZWxlY3RlZF9pdGVtLmtleV9uYW1lXS50eXBlO1xuICAgICAgICBsZXQgZXFfc2xvdHMgPSB0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci5lcXVpcF9zbG90cztcblxuICAgICAgICB0aGlzLm5wY19kaWFsb2cudXBkYXRlX2RpYWxvZyhcImVxdWlwX2NvbXBsaW1lbnRcIiwgdHJ1ZSk7XG5cbiAgICAgICAgdGhpcy5vbGRfaXRlbSA9IG51bGw7XG4gICAgICAgIGxldCBzbG90OiBJdGVtU2xvdCA9IG51bGw7XG5cbiAgICAgICAgbGV0IGVxX3R5cGVzID0gW1wiV0VBUE9OU1wiLCBcIkFSTU9SXCIsIFwiQ0hFU1RfUFJPVEVDVE9SXCIsIFwiSEVBRF9QUk9URUNUT1JcIiwgXCJSSU5HXCIsIFwiTEVHX1BST1RFQ1RPUlwiLCBcIlVOREVSV0VBUlwiXTtcblxuICAgICAgICBsZXQgc2xvdF90eXBlcyA9IFtcIndlYXBvblwiLCBcImJvZHlcIiwgXCJjaGVzdFwiLCBcImhlYWRcIiwgXCJyaW5nXCIsIFwiYm9vdHNcIiwgXCJ1bmRlcndlYXJcIl07XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlcV90eXBlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGl0ZW1fdHlwZSA9PT0gaXRlbV90eXBlc1tlcV90eXBlc1tpXV0gJiYgZXFfc2xvdHNbc2xvdF90eXBlc1tpXV0pIHNsb3QgPSBlcV9zbG90c1tzbG90X3R5cGVzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzbG90KSB0aGlzLm9sZF9pdGVtID0gdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFtzbG90LmtleV9uYW1lXTtcblxuICAgICAgICBpZiAodGhpcy5vbGRfaXRlbSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci5pdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBpdG0gPSB0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci5pdGVtc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoaXRtLmtleV9uYW1lID09PSB0aGlzLm9sZF9pdGVtLmtleV9uYW1lICYmIGl0bS5lcXVpcHBlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci51bmVxdWlwX2l0ZW0oaSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci5pdGVtcy5sZW5ndGggLSAxOyBpID4gMDsgaS0tKSB7XG4gICAgICAgICAgICBsZXQgaXRtID0gdGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIuaXRlbXNbaV07XG4gICAgICAgICAgICBpZiAoaXRtLmtleV9uYW1lID09PSB0aGlzLnNlbGVjdGVkX2l0ZW0ua2V5X25hbWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci5lcXVpcF9pdGVtKGkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLm9sZF9pdGVtKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEuY29udHJvbF9tYW5hZ2VyLnNpbXBsZV9pbnB1dCh0aGlzLmNoZWNrX2dhbWVfdGlja2V0LmJpbmQodGhpcykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGFmdGVyX2NvbXBsaW1lbnQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHNlbGxfcHJpY2UgPSBzbG90LmJyb2tlblxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMub2xkX2l0ZW0ucHJpY2UgKiBTRUxMX0JST0tFTl9NVUxUSVBMSUVSXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5vbGRfaXRlbS5wcmljZSAqIFNFTExfTVVMVElQTElFUjtcblxuICAgICAgICAgICAgICAgIGxldCB0ZXh0ID0gdGhpcy5ucGNfZGlhbG9nLmdldF9tZXNzYWdlKFwic2VsbF9jdXJyZW50XCIpO1xuICAgICAgICAgICAgICAgIHRleHQgPSB0aGlzLm5wY19kaWFsb2cucmVwbGFjZV90ZXh0KHRleHQsIHVuZGVmaW5lZCwgdGhpcy5vbGRfaXRlbS5uYW1lLCBTdHJpbmcoc2VsbF9wcmljZSB8IDApKTtcbiAgICAgICAgICAgICAgICB0aGlzLm5wY19kaWFsb2cudXBkYXRlX2RpYWxvZyh0ZXh0LCBmYWxzZSwgZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy55ZXNub19hY3Rpb24ub3BlbihcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgeWVzOiB0aGlzLnNlbGxfb2xkX2VxdWlwLmJpbmQodGhpcywgdGhpcy5vbGRfaXRlbSwgc2xvdCksXG4gICAgICAgICAgICAgICAgICAgICAgICBubzogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtc2dfa2V5ID0gdGhpcy5vbGRfaXRlbS5yYXJlX2l0ZW0gPyBcImRlY2xpbmVfc2VsbF9hcnRpZmFjdFwiIDogXCJkZWNsaW5lX3NlbGxfbm9ybWFsXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2cobXNnX2tleSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmNvbnRyb2xfbWFuYWdlci5zaW1wbGVfaW5wdXQodGhpcy5jaGVja19nYW1lX3RpY2tldC5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHt4OiBZRVNOT19YLCB5OiBZRVNOT19ZfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLmRhdGEuY29udHJvbF9tYW5hZ2VyLnNpbXBsZV9pbnB1dChhZnRlcl9jb21wbGltZW50LmJpbmQodGhpcykpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25fcHVyY2hhc2Vfc3VjY2VzcyhlcXVpcF9hc2s6IGJvb2xlYW4gPSBmYWxzZSwgZ2FtZV90aWNrZXQ6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICBsZXQgcXVhbnRpdHkgPSAxO1xuICAgICAgICBsZXQga2V5X25hbWUgPSBnYW1lX3RpY2tldCA/IFwiZ2FtZV90aWNrZXRcIiA6IHRoaXMuc2VsZWN0ZWRfaXRlbS5rZXlfbmFtZTtcbiAgICAgICAgbGV0IGl0ZW1fdG9fYWRkID0gdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFtrZXlfbmFtZV07XG5cbiAgICAgICAgaWYgKHRoaXMucXVhbnRfd2luLmlzX29wZW4gJiYgIWdhbWVfdGlja2V0KSBxdWFudGl0eSA9IHRoaXMucXVhbnRfd2luLmNob3Nlbl9xdWFudGl0eTtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLmNvaW5zIC0gdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFt0aGlzLnNlbGVjdGVkX2l0ZW0ua2V5X25hbWVdLnByaWNlICogcXVhbnRpdHkgPFxuICAgICAgICAgICAgICAgIDAgJiZcbiAgICAgICAgICAgICFnYW1lX3RpY2tldFxuICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMubnBjX2RpYWxvZy51cGRhdGVfZGlhbG9nKFwibm90X2Vub3VnaF9jb2luc1wiLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5jdXJzb3JfbWFuYWdlci5oaWRlKCk7XG5cbiAgICAgICAgICAgIGxldCBleGVjID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5jb250cm9sX21hbmFnZXIuc2ltcGxlX2lucHV0KHRoaXMub3Blbl9idXlfc2VsZWN0LmJpbmQodGhpcykpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICh0aGlzLnF1YW50X3dpbi5pc19vcGVuKSB0aGlzLnF1YW50X3dpbi5jbG9zZShleGVjKTtcbiAgICAgICAgICAgIGVsc2UgZXhlYygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2coXCJhZnRlcl9idXlcIiwgdHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLmRhdGEuY3Vyc29yX21hbmFnZXIuaGlkZSgpO1xuXG4gICAgICAgICAgICBsZXQgcHJvY2Vzc19wdXJjaGFzZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWdhbWVfdGlja2V0KVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLmNvaW5zIC09XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W3RoaXMuc2VsZWN0ZWRfaXRlbS5rZXlfbmFtZV0ucHJpY2UgKiBxdWFudGl0eTtcblxuICAgICAgICAgICAgICAgIGxldCBleGlzdHMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2VsZWN0ZWRfY2hhcmFjdGVyLml0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpdG0gPSB0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci5pdGVtc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgaXRtLmtleV9uYW1lID09PSBpdGVtX3RvX2FkZC5rZXlfbmFtZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFtpdGVtX3RvX2FkZC5rZXlfbmFtZV0uY2FycnlfdXBfdG9fMzBcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleGlzdHMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIuaXRlbXNbaV0ucXVhbnRpdHkgKz0gcXVhbnRpdHk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgbmV3X2luZGV4ID0gdGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIuaXRlbXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmICghZXhpc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtX3RvX2FkZC5lcXVpcGFibGUpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci5pdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlfbmFtZTogaXRlbV90b19hZGQua2V5X25hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVhbnRpdHk6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXF1aXBwZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBuZXdfaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIuaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5X25hbWU6IGl0ZW1fdG9fYWRkLmtleV9uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1YW50aXR5OiBxdWFudGl0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogbmV3X2luZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFnYW1lX3RpY2tldCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgc2hvcF9saXN0ID0gdGhpcy5kYXRhLmluZm8uc2hvcHNfbGlzdFt0aGlzLnBhcmVudC5zaG9wX2tleV0uaXRlbV9saXN0O1xuXG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXJzb3JfYmFjayA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNob3BfbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNob3BfbGlzdFtpXS5rZXlfbmFtZSA9PT0gdGhpcy5zZWxlY3RlZF9pdGVtLmtleV9uYW1lICYmIHNob3BfbGlzdFtpXS5xdWFudGl0eSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaW5mby5zaG9wc19saXN0W3RoaXMucGFyZW50LnNob3Bfa2V5XS5pdGVtX2xpc3RbaV0ucXVhbnRpdHkgLT0gcXVhbnRpdHk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS5pbmZvLnNob3BzX2xpc3RbdGhpcy5wYXJlbnQuc2hvcF9rZXldLml0ZW1fbGlzdFtpXS5xdWFudGl0eSA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yX2JhY2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYnV5X3NlbGVjdF9wb3MuaXNfbGFzdCAmJiBjdXJzb3JfYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5idXlfc2VsZWN0X3Bvcy5zaG91bGRfY2hhbmdlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFyZW50LnVwZGF0ZV9pdGVtcygpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChlcXVpcF9hc2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlcXVpcF9ub3cgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRleHQgPSB0aGlzLm5wY19kaWFsb2cuZ2V0X21lc3NhZ2UoXCJlcXVpcF9ub3dcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCA9IHRoaXMubnBjX2RpYWxvZy5yZXBsYWNlX3RleHQodGV4dCwgdGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2codGV4dCwgZmFsc2UsIGZhbHNlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueWVzbm9fYWN0aW9uLm9wZW4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt5ZXM6IHRoaXMuZXF1aXBfbmV3X2l0ZW0uYmluZCh0aGlzKSwgbm86IHRoaXMuY2hlY2tfZ2FtZV90aWNrZXQuYmluZCh0aGlzKX0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt4OiBZRVNOT19YLCB5OiBZRVNOT19ZfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmNvbnRyb2xfbWFuYWdlci5zaW1wbGVfaW5wdXQoZXF1aXBfbm93LmJpbmQodGhpcykpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmNvbnRyb2xfbWFuYWdlci5zaW1wbGVfaW5wdXQodGhpcy5jaGVja19nYW1lX3RpY2tldC5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5jb250cm9sX21hbmFnZXIuc2ltcGxlX2lucHV0KHRoaXMub3Blbl9idXlfc2VsZWN0LmJpbmQodGhpcykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnF1YW50X3dpbi5pc19vcGVuKVxuICAgICAgICAgICAgICAgIHRoaXMucXVhbnRfd2luLmNsb3NlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc19wdXJjaGFzZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZWxzZSBwcm9jZXNzX3B1cmNoYXNlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbl9idXlfZXF1aXBfc2VsZWN0KCkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJhY3RlciA9IHRoaXMuY2hhcl9kaXNwbGF5LmxpbmVzW3RoaXMuY2hhcl9kaXNwbGF5LmN1cnJlbnRfbGluZV1bXG4gICAgICAgICAgICB0aGlzLmNoYXJfZGlzcGxheS5zZWxlY3RlZF9pbmRleFxuICAgICAgICBdO1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXggPSB0aGlzLmNoYXJfZGlzcGxheS5zZWxlY3RlZF9pbmRleDtcblxuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIuaXRlbXMubGVuZ3RoID09PSBNQVhfSU5WRU5UT1JZX1NJWkUpIHtcbiAgICAgICAgICAgIGxldCB0ZXh0ID0gdGhpcy5ucGNfZGlhbG9nLmdldF9tZXNzYWdlKFwiaW52ZW50b3J5X2Z1bGxcIik7XG4gICAgICAgICAgICB0ZXh0ID0gdGhpcy5ucGNfZGlhbG9nLnJlcGxhY2VfdGV4dCh0ZXh0LCB0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci5uYW1lKTtcbiAgICAgICAgICAgIHRoaXMubnBjX2RpYWxvZy51cGRhdGVfZGlhbG9nKHRleHQsIGZhbHNlLCBmYWxzZSk7XG5cbiAgICAgICAgICAgIHRoaXMuY2hhcl9kaXNwbGF5LmdyYW50X2NvbnRyb2wodGhpcy5vbl9jYW5jZWxfY2hhcl9zZWxlY3QuYmluZCh0aGlzKSwgdGhpcy5vbl9idXlfZXF1aXBfc2VsZWN0LmJpbmQodGhpcykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICF0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W3RoaXMuc2VsZWN0ZWRfaXRlbS5rZXlfbmFtZV0uZXF1aXBhYmxlX2NoYXJzLmluY2x1ZGVzKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci5rZXlfbmFtZVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGxldCB0ZXh0ID0gdGhpcy5ucGNfZGlhbG9nLmdldF9tZXNzYWdlKFwiY2FudF9lcXVpcFwiKTtcbiAgICAgICAgICAgICAgICB0ZXh0ID0gdGhpcy5ucGNfZGlhbG9nLnJlcGxhY2VfdGV4dCh0ZXh0LCB0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci5uYW1lKTtcbiAgICAgICAgICAgICAgICB0aGlzLm5wY19kaWFsb2cudXBkYXRlX2RpYWxvZyh0ZXh0LCBmYWxzZSwgZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy55ZXNub19hY3Rpb24ub3BlbihcbiAgICAgICAgICAgICAgICAgICAge3llczogdGhpcy5vbl9wdXJjaGFzZV9zdWNjZXNzLmJpbmQodGhpcywgZmFsc2UsIGZhbHNlKSwgbm86IHRoaXMub3Blbl9lcXVpcF9jb21wYXJlLmJpbmQodGhpcyl9LFxuICAgICAgICAgICAgICAgICAgICB7eDogWUVTTk9fWCwgeTogWUVTTk9fWX1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uX3B1cmNoYXNlX3N1Y2Nlc3ModHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbl9idXlfaXRlbV9zZWxlY3QoZ2FtZV90aWNrZXQ6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJhY3RlciA9IHRoaXMuY2hhcl9kaXNwbGF5LmxpbmVzW3RoaXMuY2hhcl9kaXNwbGF5LmN1cnJlbnRfbGluZV1bXG4gICAgICAgICAgICB0aGlzLmNoYXJfZGlzcGxheS5zZWxlY3RlZF9pbmRleFxuICAgICAgICBdO1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXggPSB0aGlzLmNoYXJfZGlzcGxheS5zZWxlY3RlZF9pbmRleDtcbiAgICAgICAgbGV0IGhhdmVfcXVhbnQgPSAwO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIuaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBpdG0gPSB0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci5pdGVtc1tpXTtcbiAgICAgICAgICAgIGlmIChpdG0ua2V5X25hbWUgPT09IHRoaXMuc2VsZWN0ZWRfaXRlbS5rZXlfbmFtZSkge1xuICAgICAgICAgICAgICAgIGhhdmVfcXVhbnQgPSBpdG0ucXVhbnRpdHk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIuaXRlbXMubGVuZ3RoID09PSBNQVhfSU5WRU5UT1JZX1NJWkUpIHtcbiAgICAgICAgICAgIGxldCB0ZXh0ID0gdGhpcy5ucGNfZGlhbG9nLmdldF9tZXNzYWdlKFwiaW52ZW50b3J5X2Z1bGxcIik7XG4gICAgICAgICAgICB0ZXh0ID0gdGhpcy5ucGNfZGlhbG9nLnJlcGxhY2VfdGV4dCh0ZXh0LCB0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci5uYW1lKTtcbiAgICAgICAgICAgIHRoaXMubnBjX2RpYWxvZy51cGRhdGVfZGlhbG9nKHRleHQsIGZhbHNlLCBmYWxzZSk7XG5cbiAgICAgICAgICAgIHRoaXMuY2hhcl9kaXNwbGF5LmdyYW50X2NvbnRyb2woXG4gICAgICAgICAgICAgICAgZ2FtZV90aWNrZXQgPyB0aGlzLm9uX2NhbmNlbF9nYW1lX3RpY2tldC5iaW5kKHRoaXMpIDogdGhpcy5vbl9jYW5jZWxfY2hhcl9zZWxlY3QuYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICB0aGlzLm9uX2J1eV9pdGVtX3NlbGVjdC5iaW5kKHRoaXMsIGdhbWVfdGlja2V0KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChoYXZlX3F1YW50ID09PSBNQVhfU1RBQ0tfU0laRSkge1xuICAgICAgICAgICAgbGV0IGl0ZW1fbmFtZSA9IHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbdGhpcy5zZWxlY3RlZF9pdGVtLmtleV9uYW1lXS5uYW1lO1xuXG4gICAgICAgICAgICBsZXQgdGV4dCA9IHRoaXMubnBjX2RpYWxvZy5nZXRfbWVzc2FnZShcInN0YWNrX2Z1bGxcIik7XG4gICAgICAgICAgICB0ZXh0ID0gdGhpcy5ucGNfZGlhbG9nLnJlcGxhY2VfdGV4dCh0ZXh0LCB0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci5uYW1lLCBpdGVtX25hbWUpO1xuICAgICAgICAgICAgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2codGV4dCwgZmFsc2UsIGZhbHNlKTtcblxuICAgICAgICAgICAgdGhpcy5jaGFyX2Rpc3BsYXkuZ3JhbnRfY29udHJvbChcbiAgICAgICAgICAgICAgICBnYW1lX3RpY2tldCA/IHRoaXMub25fY2FuY2VsX2dhbWVfdGlja2V0LmJpbmQodGhpcykgOiB0aGlzLm9uX2NhbmNlbF9jaGFyX3NlbGVjdC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgIHRoaXMub25fYnV5X2l0ZW1fc2VsZWN0LmJpbmQodGhpcywgZ2FtZV90aWNrZXQpXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGdhbWVfdGlja2V0KSB0aGlzLm9uX3B1cmNoYXNlX3N1Y2Nlc3MoZmFsc2UsIGdhbWVfdGlja2V0KTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5jb2lucyAtIHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbdGhpcy5zZWxlY3RlZF9pdGVtLmtleV9uYW1lXS5wcmljZSA8XG4gICAgICAgICAgICAgICAgICAgICAgICAwICYmXG4gICAgICAgICAgICAgICAgICAgICFnYW1lX3RpY2tldFxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5wY19kaWFsb2cudXBkYXRlX2RpYWxvZyhcIm5vdF9lbm91Z2hfY29pbnNcIiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5jdXJzb3JfbWFuYWdlci5oaWRlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IGZpbmlzaCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5jb250cm9sX21hbmFnZXIuc2ltcGxlX2lucHV0KHRoaXMub3Blbl9idXlfc2VsZWN0LmJpbmQodGhpcykpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnF1YW50X3dpbi5pc19vcGVuKSB0aGlzLnF1YW50X3dpbi5jbG9zZShmaW5pc2gpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGZpbmlzaCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubnBjX2RpYWxvZy51cGRhdGVfZGlhbG9nKFwiYnV5X3F1YW50aXR5XCIpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc2hvcF9pdGVtcyA9IHRoaXMuZGF0YS5pbmZvLnNob3BzX2xpc3RbdGhpcy5wYXJlbnQuc2hvcF9rZXldLml0ZW1fbGlzdDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNob3BfaXRlbV9tYXRjaCA9IHNob3BfaXRlbXMuZmlsdGVyKGkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkua2V5X25hbWUgPT09IHRoaXMuc2VsZWN0ZWRfaXRlbS5rZXlfbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgfSlbMF07XG4gICAgICAgICAgICAgICAgICAgIGxldCBzaG9wX2l0ZW0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlfbmFtZTogc2hvcF9pdGVtX21hdGNoLmtleV9uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVhbnRpdHk6IHNob3BfaXRlbV9tYXRjaC5xdWFudGl0eSA9PT0gLTEgPyAzMCA6IHNob3BfaXRlbV9tYXRjaC5xdWFudGl0eSxcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgY2hhcl9pdGVtX21hdGNoID0gdGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIuaXRlbXMuZmlsdGVyKGkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkua2V5X25hbWUgPT09IHRoaXMuc2VsZWN0ZWRfaXRlbS5rZXlfbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjaGFyX2l0ZW0gPSBjaGFyX2l0ZW1fbWF0Y2gubGVuZ3RoICE9PSAwID8gY2hhcl9pdGVtX21hdGNoWzBdIDogbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMucXVhbnRfd2luLmlzX29wZW4pIHRoaXMucXVhbnRfd2luLm9wZW4oc2hvcF9pdGVtLCBjaGFyX2l0ZW0sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnF1YW50X3dpbi5ncmFudF9jb250cm9sKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcGVuX2ludmVudG9yeV92aWV3LmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uX3B1cmNoYXNlX3N1Y2Nlc3MuYmluZCh0aGlzKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uX2NhbmNlbF9jaGFyX3NlbGVjdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuaW52X3dpbi5pc19vcGVuKSB0aGlzLmludl93aW4uY2xvc2UoKTtcbiAgICAgICAgaWYgKHRoaXMuZXFfY29tcGFyZS5pc19vcGVuKSB0aGlzLmVxX2NvbXBhcmUuY2xvc2UoKTtcbiAgICAgICAgaWYgKHRoaXMuY2hhcl9kaXNwbGF5LmlzX29wZW4pIHRoaXMuY2hhcl9kaXNwbGF5LmNsb3NlKCk7XG5cbiAgICAgICAgbGV0IGNsb3NlX3dpbmRvd3MgPSBbV2luZG93TmFtZXMuSU5WX1dJTiwgV2luZG93TmFtZXMuRVFfQ09NUEFSRSwgV2luZG93TmFtZXMuQ0hBUl9ESVNQTEFZXTtcbiAgICAgICAgdGhpcy5jbG9zZV93aW5kb3dzKGNsb3NlX3dpbmRvd3MsIHRoaXMub3Blbl9idXlfc2VsZWN0LmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIG9uX2NhbmNlbF9nYW1lX3RpY2tldCgpIHtcbiAgICAgICAgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2coXCJnYW1lX3RpY2tldF9kZWNsaW5lXCIsIHRydWUpO1xuICAgICAgICB0aGlzLmRhdGEuY29udHJvbF9tYW5hZ2VyLnNpbXBsZV9pbnB1dCh0aGlzLm9uX2NhbmNlbF9jaGFyX3NlbGVjdC5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICBvcGVuX2VxdWlwX2NvbXBhcmUoKSB7XG4gICAgICAgIHRoaXMuYnV5X3NlbGVjdF9wb3MgPSB7XG4gICAgICAgICAgICBwYWdlOiB0aGlzLmJ1eV9zZWxlY3QuY3VycmVudF9wYWdlLFxuICAgICAgICAgICAgaW5kZXg6IHRoaXMuYnV5X3NlbGVjdC5zZWxlY3RlZF9pbmRleCxcbiAgICAgICAgICAgIGlzX2xhc3Q6IHRoaXMuYnV5X3NlbGVjdC5pc19sYXN0KHRoaXMuYnV5X3NlbGVjdC5jdXJyZW50X3BhZ2UsIHRoaXMuYnV5X3NlbGVjdC5zZWxlY3RlZF9pbmRleCksXG4gICAgICAgICAgICBzaG91bGRfY2hhbmdlOiBmYWxzZSxcbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgY2xvc2Vfd2luZG93cyA9IFtXaW5kb3dOYW1lcy5CVVlfU0VMRUNULCBXaW5kb3dOYW1lcy5JVEVNX0RFU0NfV0lOXTtcbiAgICAgICAgdGhpcy5jbG9zZV93aW5kb3dzKGNsb3NlX3dpbmRvd3MsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubnBjX2RpYWxvZy51cGRhdGVfZGlhbG9nKFwiY2hhcmFjdGVyX3NlbGVjdFwiKTtcblxuICAgICAgICAgICAgbGV0IGNoYXJfa2V5ID0gdGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXJcbiAgICAgICAgICAgICAgICA/IHRoaXMuc2VsZWN0ZWRfY2hhcmFjdGVyLmtleV9uYW1lXG4gICAgICAgICAgICAgICAgOiB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbMF0ua2V5X25hbWU7XG5cbiAgICAgICAgICAgIGxldCBvcGVuX3dpbmRvd3MgPSBbXG4gICAgICAgICAgICAgICAge25hbWU6IFdpbmRvd05hbWVzLkNIQVJfRElTUExBWSwgYXJndW1lbnRzOiBbdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4LCBcInNob3BcIl19LFxuICAgICAgICAgICAgICAgIHtuYW1lOiBXaW5kb3dOYW1lcy5FUV9DT01QQVJFLCBhcmd1bWVudHM6IFtjaGFyX2tleSwgdGhpcy5zZWxlY3RlZF9pdGVtLmtleV9uYW1lXX0sXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgdGhpcy5zaG93X3dpbmRvd3Mob3Blbl93aW5kb3dzLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFyX2Rpc3BsYXkuZ3JhbnRfY29udHJvbChcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbl9jYW5jZWxfY2hhcl9zZWxlY3QuYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbl9idXlfZXF1aXBfc2VsZWN0LmJpbmQodGhpcylcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9wZW5faW52ZW50b3J5X3ZpZXcoZ2FtZV90aWNrZXQ6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICBpZiAoIWdhbWVfdGlja2V0ICYmIHRoaXMuYnV5X3NlbGVjdC5pc19vcGVuKSB7XG4gICAgICAgICAgICB0aGlzLmJ1eV9zZWxlY3RfcG9zID0ge1xuICAgICAgICAgICAgICAgIHBhZ2U6IHRoaXMuYnV5X3NlbGVjdC5jdXJyZW50X3BhZ2UsXG4gICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMuYnV5X3NlbGVjdC5zZWxlY3RlZF9pbmRleCxcbiAgICAgICAgICAgICAgICBpc19sYXN0OiB0aGlzLmJ1eV9zZWxlY3QuaXNfbGFzdCh0aGlzLmJ1eV9zZWxlY3QuY3VycmVudF9wYWdlLCB0aGlzLmJ1eV9zZWxlY3Quc2VsZWN0ZWRfaW5kZXgpLFxuICAgICAgICAgICAgICAgIHNob3VsZF9jaGFuZ2U6IGZhbHNlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjbG9zZV93aW5kb3dzID0gW1xuICAgICAgICAgICAgV2luZG93TmFtZXMuSVRFTV9ERVNDX1dJTixcbiAgICAgICAgICAgIFdpbmRvd05hbWVzLkJVWV9TRUxFQ1QsXG4gICAgICAgICAgICBXaW5kb3dOYW1lcy5RVUFOVF9XSU4sXG4gICAgICAgICAgICBXaW5kb3dOYW1lcy5FUV9DT01QQVJFLFxuICAgICAgICBdO1xuICAgICAgICB0aGlzLmNsb3NlX3dpbmRvd3MoY2xvc2Vfd2luZG93cywgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGdhbWVfdGlja2V0KSB0aGlzLm5wY19kaWFsb2cudXBkYXRlX2RpYWxvZyhcImdhbWVfdGlja2V0X3NlbGVjdFwiKTtcbiAgICAgICAgICAgIGVsc2UgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2coXCJjaGFyYWN0ZXJfc2VsZWN0XCIpO1xuXG4gICAgICAgICAgICBsZXQgdGhpc19pdGVtID0gZ2FtZV90aWNrZXQgPyBcImdhbWVfdGlja2V0XCIgOiB0aGlzLnNlbGVjdGVkX2l0ZW0ua2V5X25hbWU7XG5cbiAgICAgICAgICAgIGxldCBvbl9jaGFyX2Rpc3BsYXlfb3BlbiA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgY2hhcl9rZXkgPSB0aGlzLnNlbGVjdGVkX2NoYXJhY3RlclxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMuc2VsZWN0ZWRfY2hhcmFjdGVyLmtleV9uYW1lXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzWzBdLmtleV9uYW1lO1xuXG4gICAgICAgICAgICAgICAgbGV0IGdpdmVfY29udHJvbCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFyX2Rpc3BsYXkuZ3JhbnRfY29udHJvbChcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVfdGlja2V0ID8gdGhpcy5vbl9jYW5jZWxfZ2FtZV90aWNrZXQuYmluZCh0aGlzKSA6IHRoaXMub25fY2FuY2VsX2NoYXJfc2VsZWN0LmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uX2J1eV9pdGVtX3NlbGVjdC5iaW5kKHRoaXMsIGdhbWVfdGlja2V0KVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbnZfd2luLmlzX29wZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnZfd2luLnJlZnJlc2goY2hhcl9rZXksIHRoaXNfaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIGdpdmVfY29udHJvbCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLmludl93aW4ub3BlbihjaGFyX2tleSwgdGhpc19pdGVtLCB0cnVlLCBnaXZlX2NvbnRyb2wpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuY2hhcl9kaXNwbGF5LmlzX29wZW4pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJfZGlzcGxheS5zZWxlY3RfY2hhcih0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXgpO1xuICAgICAgICAgICAgICAgIG9uX2NoYXJfZGlzcGxheV9vcGVuKCk7XG4gICAgICAgICAgICB9IGVsc2UgdGhpcy5jaGFyX2Rpc3BsYXkub3Blbih0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXgsIENoYXJzTWVudU1vZGVzLlNIT1AsIG9uX2NoYXJfZGlzcGxheV9vcGVuKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb25fYnV5X3NlbGVjdCgpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9pdGVtID0gdGhpcy5idXlfc2VsZWN0LnBhZ2VzW3RoaXMuYnV5X3NlbGVjdC5jdXJyZW50X3BhZ2VdW3RoaXMuYnV5X3NlbGVjdC5zZWxlY3RlZF9pbmRleF07XG4gICAgICAgIHRoaXMuZGF0YS5jb250cm9sX21hbmFnZXIucmVzZXQoKTtcblxuICAgICAgICBpZiAodGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFt0aGlzLnNlbGVjdGVkX2l0ZW0ua2V5X25hbWVdLmVxdWlwYWJsZSkgdGhpcy5vcGVuX2VxdWlwX2NvbXBhcmUoKTtcbiAgICAgICAgZWxzZSB0aGlzLm9wZW5faW52ZW50b3J5X3ZpZXcoKTtcbiAgICB9XG5cbiAgICBvcGVuX2J1eV9zZWxlY3QobXNnX2tleTogc3RyaW5nID0gXCJzZWxsX2ZvbGxvd191cFwiKSB7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLml0ZW1fbGlzdCkubGVuZ3RoID09PSAwKSB0aGlzLmNsb3NlX21lbnUoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5idXlfc2VsZWN0X3Bvcy5zaG91bGRfY2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYnV5X3NlbGVjdF9wb3MuaW5kZXggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5idXlfc2VsZWN0X3Bvcy5wYWdlIC09IDE7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnV5X3NlbGVjdF9wb3MuaW5kZXggPSBNQVhfSVRFTVNfUEVSX1BBR0UgLSAxO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLmJ1eV9zZWxlY3RfcG9zLmluZGV4IC09IDE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMubnBjX2RpYWxvZy51cGRhdGVfZGlhbG9nKG1zZ19rZXkpO1xuXG4gICAgICAgICAgICBsZXQgY2xvc2Vfd2luZG93cyA9IFtXaW5kb3dOYW1lcy5DSEFSX0RJU1BMQVksIFdpbmRvd05hbWVzLklOVl9XSU4sIFdpbmRvd05hbWVzLkVRX0NPTVBBUkVdO1xuICAgICAgICAgICAgdGhpcy5jbG9zZV93aW5kb3dzKGNsb3NlX3dpbmRvd3MsICgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgb3Blbl93aW5kb3dzID0gW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBXaW5kb3dOYW1lcy5CVVlfU0VMRUNULFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzOiBbdGhpcy5pdGVtX2xpc3QsIHRoaXMuYnV5X3NlbGVjdF9wb3MuaW5kZXgsIHRoaXMuYnV5X3NlbGVjdF9wb3MucGFnZV0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtuYW1lOiBXaW5kb3dOYW1lcy5ZT1VSX0NPSU5TX1dJTiwgYXJndW1lbnRzOiBbXX0sXG4gICAgICAgICAgICAgICAgICAgIHtuYW1lOiBXaW5kb3dOYW1lcy5JVEVNX1BSSUNFX1dJTiwgYXJndW1lbnRzOiBbXX0sXG4gICAgICAgICAgICAgICAgICAgIHtuYW1lOiBXaW5kb3dOYW1lcy5JVEVNX0RFU0NfV0lOLCBhcmd1bWVudHM6IFtdfSxcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvd193aW5kb3dzKG9wZW5fd2luZG93cywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2l0ZW0gPSB0aGlzLmJ1eV9zZWxlY3QucGFnZXNbdGhpcy5idXlfc2VsZWN0LmN1cnJlbnRfcGFnZV1bXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1eV9zZWxlY3Quc2VsZWN0ZWRfaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQudXBkYXRlX2l0ZW1faW5mbyh0aGlzLnNlbGVjdGVkX2l0ZW0ua2V5X25hbWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC51cGRhdGVfeW91cl9jb2lucygpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnV5X3NlbGVjdC5ncmFudF9jb250cm9sKHRoaXMuY2xvc2VfbWVudS5iaW5kKHRoaXMpLCB0aGlzLm9uX2J1eV9zZWxlY3QuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9wZW5fbWVudShpc19hcnRpZmFjdHNfbWVudTogYm9vbGVhbiwgY2xvc2VfY2FsbGJhY2s/OiBGdW5jdGlvbikge1xuICAgICAgICB0aGlzLmlzX2FydGlmYWN0c19tZW51ID0gaXNfYXJ0aWZhY3RzX21lbnU7XG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBjbG9zZV9jYWxsYmFjaztcbiAgICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLml0ZW1fbGlzdCA9IHRoaXMuaXNfYXJ0aWZhY3RzX21lbnUgPyB0aGlzLnBhcmVudC5hcnRpZmFjdF9saXN0IDogdGhpcy5wYXJlbnQubm9ybWFsX2l0ZW1fbGlzdDtcblxuICAgICAgICBpZiAoaXNfYXJ0aWZhY3RzX21lbnUpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLml0ZW1fbGlzdCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2coXCJub19hcnRpZmFjdHNcIiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmNvbnRyb2xfbWFuYWdlci5zaW1wbGVfaW5wdXQodGhpcy5jbG9zZV9tZW51LmJpbmQodGhpcyksIHtyZXNldF9vbl9wcmVzczogdHJ1ZX0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5wY19kaWFsb2cudXBkYXRlX2RpYWxvZyhcImFydGlmYWN0c19tZW51XCIsIHRydWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5jb250cm9sX21hbmFnZXIuc2ltcGxlX2lucHV0KHRoaXMub3Blbl9idXlfc2VsZWN0LmJpbmQodGhpcywgXCJidXlfc2VsZWN0XCIpLCB7XG4gICAgICAgICAgICAgICAgICAgIHJlc2V0X29uX3ByZXNzOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgdGhpcy5vcGVuX2J1eV9zZWxlY3QoXCJidXlfc2VsZWN0XCIpO1xuICAgIH1cblxuICAgIGNsb3NlX21lbnUoKSB7XG4gICAgICAgIHRoaXMuZGF0YS5jdXJzb3JfbWFuYWdlci5oaWRlKCk7XG4gICAgICAgIHRoaXMuZGF0YS5jb250cm9sX21hbmFnZXIucmVzZXQoKTtcblxuICAgICAgICB0aGlzLmlzX2FydGlmYWN0c19tZW51ID0gbnVsbDtcbiAgICAgICAgdGhpcy5pdGVtX2xpc3QgPSB7fTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9pdGVtID0gbnVsbDtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIgPSBudWxsO1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXggPSAwO1xuICAgICAgICB0aGlzLm9sZF9pdGVtID0gbnVsbDtcbiAgICAgICAgdGhpcy5idXlfc2VsZWN0X3BvcyA9IHtwYWdlOiAwLCBpbmRleDogMCwgaXNfbGFzdDogZmFsc2UsIHNob3VsZF9jaGFuZ2U6IGZhbHNlfTtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcblxuICAgICAgICBsZXQgd2luZG93cyA9IFtcbiAgICAgICAgICAgIFdpbmRvd05hbWVzLklURU1fREVTQ19XSU4sXG4gICAgICAgICAgICBXaW5kb3dOYW1lcy5JVEVNX1BSSUNFX1dJTixcbiAgICAgICAgICAgIFdpbmRvd05hbWVzLllPVVJfQ09JTlNfV0lOLFxuICAgICAgICAgICAgV2luZG93TmFtZXMuQ0hBUl9ESVNQTEFZLFxuICAgICAgICAgICAgV2luZG93TmFtZXMuSU5WX1dJTixcbiAgICAgICAgICAgIFdpbmRvd05hbWVzLllFU05PX0FDVElPTixcbiAgICAgICAgICAgIFdpbmRvd05hbWVzLlFVQU5UX1dJTixcbiAgICAgICAgICAgIFdpbmRvd05hbWVzLkJVWV9TRUxFQ1QsXG4gICAgICAgICAgICBXaW5kb3dOYW1lcy5FUV9DT01QQVJFLFxuICAgICAgICBdO1xuXG4gICAgICAgIHRoaXMuY2xvc2Vfd2luZG93cyh3aW5kb3dzLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrKCk7XG4gICAgICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2hvd193aW5kb3dzKHByb3BlcnRpZXM6IHtuYW1lOiBzdHJpbmc7IGFyZ3VtZW50cz86IGFueVtdfVtdLCBvbl9jb21wbGV0ZTogRnVuY3Rpb24pIHtcbiAgICAgICAgbGV0IHByb21pc2VzOiBQcm9taXNlPHZvaWQ+W10gPSBbXTtcblxuICAgICAgICBsZXQgd2luZG93X2NvdW50ID0gT2JqZWN0LmtleXMocHJvcGVydGllcykubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdpbmRvd19jb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgYXJnczogYW55W10gPSBwcm9wZXJ0aWVzW2ldLmFyZ3VtZW50cyA/IHByb3BlcnRpZXNbaV0uYXJndW1lbnRzIDogW107XG4gICAgICAgICAgICBsZXQgaXNfd2luZG93ID0gdGhpc1twcm9wZXJ0aWVzW2ldLm5hbWVdIGluc3RhbmNlb2YgV2luZG93O1xuXG4gICAgICAgICAgICBpZiAoaXNfd2luZG93ID8gdGhpc1twcm9wZXJ0aWVzW2ldLm5hbWVdLm9wZW4gOiB0aGlzW3Byb3BlcnRpZXNbaV0ubmFtZV0uaXNfb3BlbikgY29udGludWU7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgb3BlbmVkOiAoKSA9PiB2b2lkO1xuICAgICAgICAgICAgICAgIGxldCBwcm9taXNlID0gbmV3IFByb21pc2U8dm9pZD4ocmVzb2x2ZSA9PiAob3BlbmVkID0gcmVzb2x2ZSkpO1xuICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2gocHJvbWlzZSk7XG5cbiAgICAgICAgICAgICAgICBhcmdzLnB1c2gob3BlbmVkKTtcbiAgICAgICAgICAgICAgICBpc193aW5kb3dcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzW3Byb3BlcnRpZXNbaV0ubmFtZV0uc2hvdy5hcHBseSh0aGlzW3Byb3BlcnRpZXNbaV0ubmFtZV0sIGFyZ3MpXG4gICAgICAgICAgICAgICAgICAgIDogdGhpc1twcm9wZXJ0aWVzW2ldLm5hbWVdLm9wZW4uYXBwbHkodGhpc1twcm9wZXJ0aWVzW2ldLm5hbWVdLCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIG9uX2NvbXBsZXRlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNsb3NlX3dpbmRvd3MocHJvcGVydGllczogc3RyaW5nW10sIG9uX2NvbXBsZXRlOiBGdW5jdGlvbikge1xuICAgICAgICBsZXQgcHJvbWlzZXM6IFByb21pc2U8dm9pZD5bXSA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGkgaW4gcHJvcGVydGllcykge1xuICAgICAgICAgICAgbGV0IGlzX3dpbmRvdyA9IHRoaXNbcHJvcGVydGllc1tpXV0gaW5zdGFuY2VvZiBXaW5kb3c7XG4gICAgICAgICAgICBpZiAoIShpc193aW5kb3cgPyB0aGlzW3Byb3BlcnRpZXNbaV1dLm9wZW4gOiB0aGlzW3Byb3BlcnRpZXNbaV1dLmlzX29wZW4pKSBjb250aW51ZTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBjbG9zZWQ6ICgpID0+IHZvaWQ7XG4gICAgICAgICAgICAgICAgbGV0IHByb21pc2UgPSBuZXcgUHJvbWlzZTx2b2lkPihyZXNvbHZlID0+IChjbG9zZWQgPSByZXNvbHZlKSk7XG4gICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaChwcm9taXNlKTtcblxuICAgICAgICAgICAgICAgIHRoaXNbcHJvcGVydGllc1tpXV0uY2xvc2UoY2xvc2VkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIG9uX2NvbXBsZXRlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsImltcG9ydCB7R29sZGVuU3VufSBmcm9tIFwiLi4vLi4vR29sZGVuU3VuXCI7XG5pbXBvcnQge0l0ZW1TbG90LCBNYWluQ2hhcn0gZnJvbSBcIi4uLy4uL01haW5DaGFyXCI7XG5pbXBvcnQge1Nob3BNZW51fSBmcm9tIFwiLi4vLi4vbWFpbl9tZW51cy9TaG9wTWVudVwiO1xuaW1wb3J0IHtXaW5kb3d9IGZyb20gXCIuLi8uLi9XaW5kb3dcIjtcbmltcG9ydCB7WWVzTm9NZW51fSBmcm9tIFwiLi4vWWVzTm9NZW51XCI7XG5pbXBvcnQge0ludmVudG9yeVdpbmRvd30gZnJvbSBcIi4vSW52ZW50b3J5V2luZG93XCI7XG5pbXBvcnQge0NoYXJzTWVudSwgQ2hhcnNNZW51TW9kZXN9IGZyb20gXCIuLi8uLi9zdXBwb3J0X21lbnVzL0NoYXJzTWVudVwiO1xuaW1wb3J0IHtTaG9wSXRlbVF1YW50aXR5V2luZG93fSBmcm9tIFwiLi9TaG9wSXRlbVF1YW50aXR5V2luZG93XCI7XG5pbXBvcnQge1Nob3BrZWVwRGlhbG9nfSBmcm9tIFwiLi9TaG9wa2VlcERpYWxvZ1wiO1xuXG5jb25zdCBTRUxMX01VTFRJUExJRVIgPSAzIC8gNDtcbmNvbnN0IFJFUEFJUl9NVUxUSVBMSUVSID0gMSAvIDQ7XG5jb25zdCBTRUxMX0JST0tFTl9NVUxUSVBMSUVSID0gU0VMTF9NVUxUSVBMSUVSIC0gUkVQQUlSX01VTFRJUExJRVI7XG5cbmNvbnN0IFJFUEFJUl9XQUlUX1RJTUUgPSBQaGFzZXIuVGltZXIuU0VDT05EICogNjtcblxuY29uc3QgWUVTTk9fWCA9IDU2O1xuY29uc3QgWUVTTk9fWSA9IDQwO1xuXG5leHBvcnQgY29uc3QgV2luZG93TmFtZXMgPSB7XG4gICAgSVRFTV9ERVNDX1dJTjogXCJpdGVtX2Rlc2Nfd2luXCIsXG4gICAgSVRFTV9QUklDRV9XSU46IFwiaXRlbV9wcmljZV93aW5cIixcbiAgICBZT1VSX0NPSU5TX1dJTjogXCJ5b3VyX2NvaW5zX3dpblwiLFxuICAgIENIQVJfRElTUExBWTogXCJjaGFyX2Rpc3BsYXlcIixcbiAgICBJTlZfV0lOOiBcImludl93aW5cIixcbiAgICBZRVNOT19BQ1RJT046IFwieWVzbm9fYWN0aW9uXCIsXG4gICAgUVVBTlRfV0lOOiBcInF1YW50X3dpblwiLFxufTtcblxuZXhwb3J0IGNsYXNzIFNlbGxSZXBhaXJNZW51IHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6IEdvbGRlblN1bjtcbiAgICBwdWJsaWMgcGFyZW50OiBTaG9wTWVudTtcbiAgICBwdWJsaWMgY2xvc2VfY2FsbGJhY2s6IEZ1bmN0aW9uO1xuXG4gICAgcHVibGljIGl0ZW1fZGVzY193aW46IFdpbmRvdztcbiAgICBwdWJsaWMgeW91cl9jb2luc193aW46IFdpbmRvdztcbiAgICBwdWJsaWMgaXRlbV9wcmljZV93aW46IFdpbmRvdztcbiAgICBwdWJsaWMgY2hhcl9kaXNwbGF5OiBDaGFyc01lbnU7XG4gICAgcHVibGljIGludl93aW46IEludmVudG9yeVdpbmRvdztcbiAgICBwdWJsaWMgcXVhbnRfd2luOiBTaG9wSXRlbVF1YW50aXR5V2luZG93O1xuICAgIHB1YmxpYyB5ZXNub19hY3Rpb246IFllc05vTWVudTtcbiAgICBwdWJsaWMgbnBjX2RpYWxvZzogU2hvcGtlZXBEaWFsb2c7XG5cbiAgICBwdWJsaWMgaXNfcmVwYWlyX21lbnU6IGJvb2xlYW47XG4gICAgcHVibGljIGFjdGl2ZTogYm9vbGVhbjtcblxuICAgIHB1YmxpYyBzZWxlY3RlZF9pdGVtOiBJdGVtU2xvdDtcbiAgICBwdWJsaWMgaW52X3dpbl9wb3M6IHtsaW5lOiBudW1iZXI7IGNvbDogbnVtYmVyfTtcblxuICAgIHB1YmxpYyBzZWxlY3RlZF9jaGFyYWN0ZXI6IE1haW5DaGFyO1xuICAgIHB1YmxpYyBzZWxlY3RlZF9jaGFyX2luZGV4OiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lOiBQaGFzZXIuR2FtZSwgZGF0YTogR29sZGVuU3VuLCBwYXJlbnQ6IFNob3BNZW51KSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrID0gbnVsbDtcblxuICAgICAgICB0aGlzLml0ZW1fZGVzY193aW4gPSB0aGlzLnBhcmVudC5pdGVtX2Rlc2Nfd2luO1xuICAgICAgICB0aGlzLnlvdXJfY29pbnNfd2luID0gdGhpcy5wYXJlbnQueW91cl9jb2luc193aW47XG4gICAgICAgIHRoaXMuaXRlbV9wcmljZV93aW4gPSB0aGlzLnBhcmVudC5pdGVtX3ByaWNlX3dpbjtcbiAgICAgICAgdGhpcy5jaGFyX2Rpc3BsYXkgPSB0aGlzLnBhcmVudC5jaGFyX2Rpc3BsYXk7XG4gICAgICAgIHRoaXMuaW52X3dpbiA9IHRoaXMucGFyZW50Lmludl93aW47XG4gICAgICAgIHRoaXMucXVhbnRfd2luID0gdGhpcy5wYXJlbnQucXVhbnRfd2luO1xuICAgICAgICB0aGlzLnllc25vX2FjdGlvbiA9IHRoaXMucGFyZW50Lnllc25vX2FjdGlvbjtcbiAgICAgICAgdGhpcy5ucGNfZGlhbG9nID0gdGhpcy5wYXJlbnQubnBjX2RpYWxvZztcblxuICAgICAgICB0aGlzLmlzX3JlcGFpcl9tZW51ID0gbnVsbDtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLnNlbGVjdGVkX2l0ZW0gPSBudWxsO1xuICAgICAgICB0aGlzLmludl93aW5fcG9zID0ge2xpbmU6IDAsIGNvbDogMH07XG5cbiAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIgPSBudWxsO1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXggPSAwO1xuICAgIH1cblxuICAgIG9uX2l0ZW1fcmVwYWlyKCkge1xuICAgICAgICBsZXQgZXhlYyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaW52X3dpbi5raWxsX2l0ZW1fYXQodGhpcy5pbnZfd2luX3Bvcy5saW5lLCB0aGlzLmludl93aW5fcG9zLmNvbCk7XG4gICAgICAgICAgICB0aGlzLmRhdGEuY29udHJvbF9tYW5hZ2VyLnJlc2V0KCk7XG5cbiAgICAgICAgICAgIHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5hZGQoXG4gICAgICAgICAgICAgICAgUkVQQUlSX1dBSVRfVElNRSxcbiAgICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfaXRlbS5icm9rZW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5jb2lucyAtPVxuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbdGhpcy5zZWxlY3RlZF9pdGVtLmtleV9uYW1lXS5wcmljZSAqIFJFUEFJUl9NVUxUSVBMSUVSKSB8IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2coXCJyZXBhaXJfZG9uZVwiLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQudXBkYXRlX3lvdXJfY29pbnMoKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuY29udHJvbF9tYW5hZ2VyLnNpbXBsZV9pbnB1dChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25fY2hhcmFjdGVyX3NlbGVjdC5iaW5kKHRoaXMsIFwicmVwYWlyX2ZvbGxvd191cFwiLCB0aGlzLmludl93aW5fcG9zKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdGhpc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodGhpcy5ucGNfZGlhbG9nLmRpYWxvZ19tYW5hZ2VyLndpbmRvdy5vcGVuKSB7XG4gICAgICAgICAgICB0aGlzLm5wY19kaWFsb2cuZGlhbG9nX21hbmFnZXIuZGlhbG9nX2NyeXN0YWwudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5ucGNfZGlhbG9nLmRpYWxvZ19tYW5hZ2VyLndpbmRvdy5jbG9zZShleGVjKTtcbiAgICAgICAgfSBlbHNlIGV4ZWMoKTtcbiAgICB9XG5cbiAgICBvbl9yZXBhaXJfaXRlbV9zZWxlY3QoKSB7XG4gICAgICAgIGxldCBleGVjID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5pbnZfd2luX3BvcyA9IHRoaXMuaW52X3dpbi5jdXJzb3JfcG9zO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9pdGVtID0gdGhpcy5pbnZfd2luLml0ZW1fZ3JpZFt0aGlzLmludl93aW5fcG9zLmxpbmVdW3RoaXMuaW52X3dpbl9wb3MuY29sXTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLnNlbGVjdGVkX2l0ZW0uYnJva2VuKSB7XG4gICAgICAgICAgICAgICAgbGV0IGl0ZW1fYnJlYWthYmxlID1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFt0aGlzLnNlbGVjdGVkX2l0ZW0ua2V5X25hbWVdLnVzZV90eXBlID09PSBcImJyZWFrc193aGVuX3VzZVwiO1xuICAgICAgICAgICAgICAgIGxldCBtc2dfa2V5ID0gaXRlbV9icmVha2FibGUgPyBcImNhbnRfcmVwYWlyXCIgOiBcInJlcGFpcl9kZWNsaW5lXCI7XG5cbiAgICAgICAgICAgICAgICBsZXQgdGV4dCA9IHRoaXMubnBjX2RpYWxvZy5nZXRfbWVzc2FnZShtc2dfa2V5KTtcbiAgICAgICAgICAgICAgICB0ZXh0ID0gdGhpcy5ucGNfZGlhbG9nLnJlcGxhY2VfdGV4dChcbiAgICAgICAgICAgICAgICAgICAgdGV4dCxcbiAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W3RoaXMuc2VsZWN0ZWRfaXRlbS5rZXlfbmFtZV0ubmFtZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2codGV4dCwgdHJ1ZSwgZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmNvbnRyb2xfbWFuYWdlci5zaW1wbGVfaW5wdXQoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25fY2hhcmFjdGVyX3NlbGVjdC5iaW5kKHRoaXMsIFwicmVwYWlyX2ZvbGxvd191cFwiLCB0aGlzLmludl93aW5fcG9zKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBwcmljZSA9ICh0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W3RoaXMuc2VsZWN0ZWRfaXRlbS5rZXlfbmFtZV0ucHJpY2UgKiBSRVBBSVJfTVVMVElQTElFUikgfCAwO1xuICAgICAgICAgICAgICAgIGxldCB0ZXh0ID0gdGhpcy5ucGNfZGlhbG9nLmdldF9tZXNzYWdlKFwicmVwYWlyX2RlYWxcIik7XG4gICAgICAgICAgICAgICAgdGV4dCA9IHRoaXMubnBjX2RpYWxvZy5yZXBsYWNlX3RleHQoXG4gICAgICAgICAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFt0aGlzLnNlbGVjdGVkX2l0ZW0ua2V5X25hbWVdLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyhwcmljZSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMubnBjX2RpYWxvZy51cGRhdGVfZGlhbG9nKHRleHQsIGZhbHNlLCBmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnllc25vX2FjdGlvbi5vcGVuKFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB5ZXM6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5wY19kaWFsb2cudXBkYXRlX2RpYWxvZyhcInJlcGFpcl9kZWFsX2FjY2VwdFwiLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuY29udHJvbF9tYW5hZ2VyLnNpbXBsZV9pbnB1dCh0aGlzLm9uX2l0ZW1fcmVwYWlyLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2coXCJyZXBhaXJfZGVhbF9kZWNsaW5lXCIsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5jb250cm9sX21hbmFnZXIuc2ltcGxlX2lucHV0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uX2NoYXJhY3Rlcl9zZWxlY3QuYmluZCh0aGlzLCBcInJlcGFpcl9mb2xsb3dfdXBcIiwgdGhpcy5pbnZfd2luX3BvcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge3g6IFlFU05PX1gsIHk6IFlFU05PX1l9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodGhpcy5pdGVtX2Rlc2Nfd2luLm9wZW4pIHRoaXMuaXRlbV9kZXNjX3dpbi5jbG9zZShleGVjKTtcbiAgICAgICAgZWxzZSBleGVjKCk7XG4gICAgfVxuXG4gICAgb25fc2FsZV9zdWNjZXNzKHF1YW50aXR5ID0gMSkge1xuICAgICAgICBsZXQgZXhlYyA9ICgpID0+IHtcbiAgICAgICAgICAgIGxldCBtc2dfa2V5ID0gdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFt0aGlzLnNlbGVjdGVkX2l0ZW0ua2V5X25hbWVdLnJhcmVfaXRlbVxuICAgICAgICAgICAgICAgID8gXCJhZnRlcl9zZWxsX2FydGlmYWN0XCJcbiAgICAgICAgICAgICAgICA6IFwiYWZ0ZXJfc2VsbF9ub3JtYWxcIjtcbiAgICAgICAgICAgIHRoaXMubnBjX2RpYWxvZy51cGRhdGVfZGlhbG9nKG1zZ19rZXksIHRydWUpO1xuXG4gICAgICAgICAgICBsZXQgaXRlbV9wcmljZSA9XG4gICAgICAgICAgICAgICAgKHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbdGhpcy5zZWxlY3RlZF9pdGVtLmtleV9uYW1lXS5wcmljZSAqXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLnNlbGVjdGVkX2l0ZW0uYnJva2VuID8gU0VMTF9CUk9LRU5fTVVMVElQTElFUiA6IFNFTExfTVVMVElQTElFUikpIHxcbiAgICAgICAgICAgICAgICAwO1xuICAgICAgICAgICAgdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5jb2lucyArPSBpdGVtX3ByaWNlICogcXVhbnRpdHk7XG4gICAgICAgICAgICB0aGlzLnBhcmVudC51cGRhdGVfeW91cl9jb2lucygpO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2VsZWN0ZWRfY2hhcmFjdGVyLml0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGl0bSA9IHRoaXMuc2VsZWN0ZWRfY2hhcmFjdGVyLml0ZW1zW2ldO1xuICAgICAgICAgICAgICAgIGlmIChpdG0ua2V5X25hbWUgPT09IHRoaXMuc2VsZWN0ZWRfaXRlbS5rZXlfbmFtZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci5pdGVtc1tpXS5xdWFudGl0eSAtPSBxdWFudGl0eTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRfY2hhcmFjdGVyLml0ZW1zW2ldLnF1YW50aXR5ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci5pdGVtcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W3RoaXMuc2VsZWN0ZWRfaXRlbS5rZXlfbmFtZV0ucmFyZV9pdGVtKSB7XG4gICAgICAgICAgICAgICAgbGV0IGV4aXN0cyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGxldCBzaG9wX2xpc3QgPSB0aGlzLmRhdGEuaW5mby5zaG9wc19saXN0W3RoaXMucGFyZW50LnNob3Bfa2V5XS5pdGVtX2xpc3Q7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaG9wX2xpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNob3BfbGlzdFtpXS5rZXlfbmFtZSA9PT0gdGhpcy5zZWxlY3RlZF9pdGVtLmtleV9uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleGlzdHMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmluZm8uc2hvcHNfbGlzdFt0aGlzLnBhcmVudC5zaG9wX2tleV0uaXRlbV9saXN0W2ldLnF1YW50aXR5ICs9IHF1YW50aXR5O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghZXhpc3RzKSBzaG9wX2xpc3QucHVzaCh7a2V5X25hbWU6IHRoaXMuc2VsZWN0ZWRfaXRlbS5rZXlfbmFtZSwgcXVhbnRpdHk6IHF1YW50aXR5fSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMucGFyZW50LnNldF9pdGVtX2xpc3RzKCk7XG4gICAgICAgICAgICB0aGlzLmRhdGEuY29udHJvbF9tYW5hZ2VyLnNpbXBsZV9pbnB1dChcbiAgICAgICAgICAgICAgICB0aGlzLm9uX2NoYXJhY3Rlcl9zZWxlY3QuYmluZCh0aGlzLCBcInNlbGxfZm9sbG93X3VwXCIsIHRoaXMuaW52X3dpbl9wb3MpXG4gICAgICAgICAgICApO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0aGlzLmludl93aW4uaXNfb3Blbikge1xuICAgICAgICAgICAgdGhpcy5pbnZfd2luLnJlZnJlc2godGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIua2V5X25hbWUsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICBleGVjKCk7XG4gICAgICAgIH0gZWxzZSB0aGlzLmludl93aW4ub3Blbih0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci5rZXlfbmFtZSwgdW5kZWZpbmVkLCBmYWxzZSwgZXhlYyk7XG4gICAgfVxuXG4gICAgb25fc2VsbF9pdGVtX3NlbGVjdCgpIHtcbiAgICAgICAgbGV0IGV4ZWMgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmludl93aW5fcG9zID0gdGhpcy5pbnZfd2luLmN1cnNvcl9wb3M7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2l0ZW0gPSB0aGlzLmludl93aW4uaXRlbV9ncmlkW3RoaXMuaW52X3dpbl9wb3MubGluZV1bdGhpcy5pbnZfd2luX3Bvcy5jb2xdO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFt0aGlzLnNlbGVjdGVkX2l0ZW0ua2V5X25hbWVdLmltcG9ydGFudF9pdGVtKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2coXCJjYW50X3NlbGxcIiwgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuY29udHJvbF9tYW5hZ2VyLnNpbXBsZV9pbnB1dChcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbl9jaGFyYWN0ZXJfc2VsZWN0LmJpbmQodGhpcywgXCJzZWxsX2ZvbGxvd191cFwiLCB0aGlzLmludl93aW5fcG9zKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc2VsZWN0ZWRfaXRlbS5xdWFudGl0eSA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGxldCBtc2dfa2V5ID0gdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFt0aGlzLnNlbGVjdGVkX2l0ZW0ua2V5X25hbWVdLnJhcmVfaXRlbVxuICAgICAgICAgICAgICAgICAgICA/IFwic2VsbF9hcnRpZmFjdFwiXG4gICAgICAgICAgICAgICAgICAgIDogXCJzZWxsX25vcm1hbFwiO1xuXG4gICAgICAgICAgICAgICAgbGV0IHRleHQgPSB0aGlzLm5wY19kaWFsb2cuZ2V0X21lc3NhZ2UobXNnX2tleSk7XG4gICAgICAgICAgICAgICAgbGV0IGl0ZW1fbmFtZSA9XG4gICAgICAgICAgICAgICAgICAgIG1zZ19rZXkgPT09IFwic2VsbF9ub3JtYWxcIiA/IHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbdGhpcy5zZWxlY3RlZF9pdGVtLmtleV9uYW1lXS5uYW1lIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGxldCBpdGVtX3ByaWNlID1cbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbdGhpcy5zZWxlY3RlZF9pdGVtLmtleV9uYW1lXS5wcmljZSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5zZWxlY3RlZF9pdGVtLmJyb2tlbiA/IFNFTExfQlJPS0VOX01VTFRJUExJRVIgOiBTRUxMX01VTFRJUExJRVIpKSB8XG4gICAgICAgICAgICAgICAgICAgIDA7XG4gICAgICAgICAgICAgICAgdGV4dCA9IHRoaXMubnBjX2RpYWxvZy5yZXBsYWNlX3RleHQodGV4dCwgdW5kZWZpbmVkLCBpdGVtX25hbWUsIFN0cmluZyhpdGVtX3ByaWNlKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2codGV4dCwgZmFsc2UsIGZhbHNlKTtcblxuICAgICAgICAgICAgICAgIHRoaXMueWVzbm9fYWN0aW9uLm9wZW4oXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHllczogdGhpcy5vbl9zYWxlX3N1Y2Nlc3MuYmluZCh0aGlzLCAxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRlY2xpbmVfbXNnID0gdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFt0aGlzLnNlbGVjdGVkX2l0ZW0ua2V5X25hbWVdLnJhcmVfaXRlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IFwiZGVjbGluZV9zZWxsX2FydGlmYWN0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcImRlY2xpbmVfc2VsbF9ub3JtYWxcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5wY19kaWFsb2cudXBkYXRlX2RpYWxvZyhkZWNsaW5lX21zZywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmNvbnRyb2xfbWFuYWdlci5zaW1wbGVfaW5wdXQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25fY2hhcmFjdGVyX3NlbGVjdC5iaW5kKHRoaXMsIFwic2VsbF9mb2xsb3dfdXBcIiwgdGhpcy5pbnZfd2luX3BvcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge3g6IFlFU05PX1gsIHk6IFlFU05PX1l9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2coXCJzZWxsX3F1YW50aXR5X3NlbGVjdFwiKTtcblxuICAgICAgICAgICAgICAgIGxldCBjaGFyX2l0ZW1fbWF0Y2ggPSB0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci5pdGVtcy5maWx0ZXIoaSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpLmtleV9uYW1lID09PSB0aGlzLnNlbGVjdGVkX2l0ZW0ua2V5X25hbWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbGV0IGNoYXJfaXRlbSA9IGNoYXJfaXRlbV9tYXRjaC5sZW5ndGggIT09IDAgPyBjaGFyX2l0ZW1fbWF0Y2hbMF0gOiBudWxsO1xuXG4gICAgICAgICAgICAgICAgbGV0IHF1YW50X2NvbnRyb2wgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucXVhbnRfd2luLmdyYW50X2NvbnRyb2woXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uX2NoYXJhY3Rlcl9zZWxlY3QuYmluZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2VsbF9mb2xsb3dfdXBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnZfd2luX3Bvc1xuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcXVhbnQgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1YW50ID0gdGhpcy5xdWFudF93aW4uY2hvc2VuX3F1YW50aXR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucXVhbnRfd2luLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmN1cnNvcl9tYW5hZ2VyLmhpZGUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZXh0ID0gdGhpcy5ucGNfZGlhbG9nLmdldF9tZXNzYWdlKFwic2VsbF9xdWFudGl0eV9jb25maXJtXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpdGVtX3ByaWNlID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbdGhpcy5zZWxlY3RlZF9pdGVtLmtleV9uYW1lXS5wcmljZSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5zZWxlY3RlZF9pdGVtLmJyb2tlbiA/IFNFTExfQlJPS0VOX01VTFRJUExJRVIgOiBTRUxMX01VTFRJUExJRVIpKSB8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCA9IHRoaXMubnBjX2RpYWxvZy5yZXBsYWNlX3RleHQodGV4dCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFN0cmluZyhpdGVtX3ByaWNlICogcXVhbnQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5wY19kaWFsb2cudXBkYXRlX2RpYWxvZyh0ZXh0LCBmYWxzZSwgZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55ZXNub19hY3Rpb24ub3BlbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeWVzOiB0aGlzLm9uX3NhbGVfc3VjY2Vzcy5iaW5kKHRoaXMsIHF1YW50KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRlY2xpbmVfbXNnID0gdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFt0aGlzLnNlbGVjdGVkX2l0ZW0ua2V5X25hbWVdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yYXJlX2l0ZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBcImRlY2xpbmVfc2VsbF9hcnRpZmFjdFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogXCJkZWNsaW5lX3NlbGxfbm9ybWFsXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2coZGVjbGluZV9tc2csIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5jb250cm9sX21hbmFnZXIuc2ltcGxlX2lucHV0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uX2NoYXJhY3Rlcl9zZWxlY3QuYmluZCh0aGlzLCBcInNlbGxfZm9sbG93X3VwXCIsIHRoaXMuaW52X3dpbl9wb3MpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt4OiBZRVNOT19YLCB5OiBZRVNOT19ZfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5xdWFudF93aW4uaXNfb3BlbikgdGhpcy5xdWFudF93aW4ub3BlbihjaGFyX2l0ZW0sIHVuZGVmaW5lZCwgZmFsc2UsIHF1YW50X2NvbnRyb2wpO1xuICAgICAgICAgICAgICAgIGVsc2UgcXVhbnRfY29udHJvbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0aGlzLml0ZW1fZGVzY193aW4ub3BlbikgdGhpcy5pdGVtX2Rlc2Nfd2luLmNsb3NlKGV4ZWMpO1xuICAgICAgICBlbHNlIGV4ZWMoKTtcbiAgICB9XG5cbiAgICBvbl9jaGFyYWN0ZXJfc2VsZWN0KG1zZ19rZXkgPSBcInNlbGxfZm9sbG93X3VwXCIsIGl0ZW1fcG9zID0ge2xpbmU6IDAsIGNvbDogMH0pIHtcbiAgICAgICAgbGV0IHN0YXJ0ID0gKCkgPT4ge1xuICAgICAgICAgICAgbGV0IG9wZW5fd2luZG93cyA9IFt7bmFtZTogV2luZG93TmFtZXMuSVRFTV9ERVNDX1dJTn0sIHtuYW1lOiBXaW5kb3dOYW1lcy5JVEVNX1BSSUNFX1dJTn1dO1xuICAgICAgICAgICAgdGhpcy5zaG93X3dpbmRvd3Mob3Blbl93aW5kb3dzLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG1zZ19rZXkpIHRoaXMubnBjX2RpYWxvZy51cGRhdGVfZGlhbG9nKG1zZ19rZXkpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIgPSB0aGlzLmNoYXJfZGlzcGxheS5saW5lc1t0aGlzLmNoYXJfZGlzcGxheS5jdXJyZW50X2xpbmVdW1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJfZGlzcGxheS5zZWxlY3RlZF9pbmRleFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4ID0gdGhpcy5jaGFyX2Rpc3BsYXkuc2VsZWN0ZWRfaW5kZXg7XG5cbiAgICAgICAgICAgICAgICBsZXQgZmluaXNoID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmludl93aW4uc2V0X2N1cnNvcihpdGVtX3Bvcy5saW5lLCBpdGVtX3Bvcy5jb2wpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaW52X3dpbi5pdGVtX2dyaWRbaXRlbV9wb3MubGluZV1baXRlbV9wb3MuY29sXSkgdGhpcy5pbnZfd2luLnByZXZpb3VzX2NvbCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW52X3dpbi5ncmFudF9jb250cm9sKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcGVuX2ludmVudG9yeV92aWV3LmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzX3JlcGFpcl9tZW51XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLm9uX3JlcGFpcl9pdGVtX3NlbGVjdC5iaW5kKHRoaXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLm9uX3NlbGxfaXRlbV9zZWxlY3QuYmluZCh0aGlzKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbnZfd2luLmlzX29wZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnZfd2luLnJlZnJlc2godGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIua2V5X25hbWUsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgIGZpbmlzaCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLmludl93aW4ub3Blbih0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci5rZXlfbmFtZSwgdW5kZWZpbmVkLCBmYWxzZSwgZmluaXNoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0aGlzLnF1YW50X3dpbi5pc19vcGVuKVxuICAgICAgICAgICAgdGhpcy5xdWFudF93aW4uY2xvc2UoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHN0YXJ0O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIGVsc2Ugc3RhcnQoKTtcbiAgICB9XG5cbiAgICBvcGVuX2ludmVudG9yeV92aWV3KG1zZ19rZXkgPSBcInNlbGxfZm9sbG93X3VwXCIpIHtcbiAgICAgICAgbGV0IGNsb3NlX3dpbmRvd3MgPSBbV2luZG93TmFtZXMuSVRFTV9ERVNDX1dJTiwgV2luZG93TmFtZXMuSVRFTV9QUklDRV9XSU4sIFdpbmRvd05hbWVzLlFVQU5UX1dJTl07XG5cbiAgICAgICAgdGhpcy5jbG9zZV93aW5kb3dzKGNsb3NlX3dpbmRvd3MsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubnBjX2RpYWxvZy51cGRhdGVfZGlhbG9nKG1zZ19rZXkpO1xuXG4gICAgICAgICAgICBsZXQgbmV4dF9zdGVwID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS53b3JsZC5icmluZ1RvVG9wKHRoaXMuY2hhcl9kaXNwbGF5LmNoYXJfZ3JvdXApO1xuXG4gICAgICAgICAgICAgICAgbGV0IGNoYXJfa2V5ID0gdGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXJcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci5rZXlfbmFtZVxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1swXS5rZXlfbmFtZTtcblxuICAgICAgICAgICAgICAgIGxldCBmaW5pc2ggPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy55b3VyX2NvaW5zX3dpbi5vcGVuKSB0aGlzLnlvdXJfY29pbnNfd2luLnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQudXBkYXRlX3lvdXJfY29pbnMoKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJfZGlzcGxheS5ncmFudF9jb250cm9sKHRoaXMuY2xvc2VfbWVudS5iaW5kKHRoaXMpLCB0aGlzLm9uX2NoYXJhY3Rlcl9zZWxlY3QuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmludl93aW4uaXNfb3Blbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmludl93aW4ucmVmcmVzaChjaGFyX2tleSk7XG4gICAgICAgICAgICAgICAgICAgIGZpbmlzaCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLmludl93aW4ub3BlbihjaGFyX2tleSwgdW5kZWZpbmVkLCBmYWxzZSwgZmluaXNoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5jaGFyX2Rpc3BsYXkuaXNfb3BlbilcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJfZGlzcGxheS5vcGVuKHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCwgQ2hhcnNNZW51TW9kZXMuU0hPUCwgbmV4dF9zdGVwKTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhcl9kaXNwbGF5LnNlbGVjdF9jaGFyKHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCk7XG4gICAgICAgICAgICAgICAgbmV4dF9zdGVwKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9wZW5fbWVudShpc19yZXBhaXJfbWVudTogYm9vbGVhbiwgY2xvc2VfY2FsbGJhY2s/OiBGdW5jdGlvbikge1xuICAgICAgICB0aGlzLmlzX3JlcGFpcl9tZW51ID0gaXNfcmVwYWlyX21lbnU7XG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBjbG9zZV9jYWxsYmFjaztcbiAgICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuXG4gICAgICAgIGlmIChpc19yZXBhaXJfbWVudSkge1xuICAgICAgICAgICAgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2coXCJyZXBhaXJfbWVudVwiLCB0cnVlKTtcblxuICAgICAgICAgICAgdGhpcy5kYXRhLmNvbnRyb2xfbWFuYWdlci5zaW1wbGVfaW5wdXQodGhpcy5vcGVuX2ludmVudG9yeV92aWV3LmJpbmQodGhpcywgXCJyZXBhaXJfc2VsZWN0XCIpKTtcbiAgICAgICAgfSBlbHNlIHRoaXMub3Blbl9pbnZlbnRvcnlfdmlldyhcInNlbGxfc2VsZWN0XCIpO1xuICAgIH1cblxuICAgIGNsb3NlX21lbnUoKSB7XG4gICAgICAgIHRoaXMuZGF0YS5jdXJzb3JfbWFuYWdlci5oaWRlKCk7XG4gICAgICAgIHRoaXMuZGF0YS5jb250cm9sX21hbmFnZXIucmVzZXQoKTtcblxuICAgICAgICB0aGlzLmlzX3JlcGFpcl9tZW51ID0gbnVsbDtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9pdGVtID0gbnVsbDtcbiAgICAgICAgdGhpcy5pbnZfd2luX3BvcyA9IHtsaW5lOiAwLCBjb2w6IDB9O1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJhY3RlciA9IG51bGw7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCA9IDA7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG5cbiAgICAgICAgbGV0IGNsb3NlX3dpbmRvd3MgPSBbXG4gICAgICAgICAgICBXaW5kb3dOYW1lcy5JVEVNX0RFU0NfV0lOLFxuICAgICAgICAgICAgV2luZG93TmFtZXMuSVRFTV9QUklDRV9XSU4sXG4gICAgICAgICAgICBXaW5kb3dOYW1lcy5ZT1VSX0NPSU5TX1dJTixcbiAgICAgICAgICAgIFdpbmRvd05hbWVzLkNIQVJfRElTUExBWSxcbiAgICAgICAgICAgIFdpbmRvd05hbWVzLklOVl9XSU4sXG4gICAgICAgICAgICBXaW5kb3dOYW1lcy5ZRVNOT19BQ1RJT04sXG4gICAgICAgICAgICBXaW5kb3dOYW1lcy5RVUFOVF9XSU4sXG4gICAgICAgIF07XG5cbiAgICAgICAgdGhpcy5jbG9zZV93aW5kb3dzKGNsb3NlX3dpbmRvd3MsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2soKTtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzaG93X3dpbmRvd3MocHJvcGVydGllczoge25hbWU6IHN0cmluZzsgYXJndW1lbnRzPzogYW55W119W10sIG9uX2NvbXBsZXRlOiBGdW5jdGlvbikge1xuICAgICAgICBsZXQgcHJvbWlzZXM6IFByb21pc2U8dm9pZD5bXSA9IFtdO1xuXG4gICAgICAgIGxldCB3aW5kb3dfY291bnQgPSBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKS5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgd2luZG93X2NvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGxldCBhcmdzOiBhbnlbXSA9IHByb3BlcnRpZXNbaV0uYXJndW1lbnRzID8gcHJvcGVydGllc1tpXS5hcmd1bWVudHMgOiBbXTtcbiAgICAgICAgICAgIGxldCBpc193aW5kb3cgPSB0aGlzW3Byb3BlcnRpZXNbaV0ubmFtZV0gaW5zdGFuY2VvZiBXaW5kb3c7XG5cbiAgICAgICAgICAgIGlmIChpc193aW5kb3cgPyB0aGlzW3Byb3BlcnRpZXNbaV0ubmFtZV0ub3BlbiA6IHRoaXNbcHJvcGVydGllc1tpXS5uYW1lXS5pc19vcGVuKSBjb250aW51ZTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBvcGVuZWQ6ICgpID0+IHZvaWQ7XG4gICAgICAgICAgICAgICAgbGV0IHByb21pc2UgPSBuZXcgUHJvbWlzZTx2b2lkPihyZXNvbHZlID0+IChvcGVuZWQgPSByZXNvbHZlKSk7XG4gICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaChwcm9taXNlKTtcblxuICAgICAgICAgICAgICAgIGFyZ3MucHVzaChvcGVuZWQpO1xuICAgICAgICAgICAgICAgIGlzX3dpbmRvd1xuICAgICAgICAgICAgICAgICAgICA/IHRoaXNbcHJvcGVydGllc1tpXS5uYW1lXS5zaG93LmFwcGx5KHRoaXNbcHJvcGVydGllc1tpXS5uYW1lXSwgYXJncylcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzW3Byb3BlcnRpZXNbaV0ubmFtZV0ub3Blbi5hcHBseSh0aGlzW3Byb3BlcnRpZXNbaV0ubmFtZV0sIGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgb25fY29tcGxldGUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY2xvc2Vfd2luZG93cyhwcm9wZXJ0aWVzOiBzdHJpbmdbXSwgb25fY29tcGxldGU6IEZ1bmN0aW9uKSB7XG4gICAgICAgIGxldCBwcm9taXNlczogUHJvbWlzZTx2b2lkPltdID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgaSBpbiBwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBsZXQgaXNfd2luZG93ID0gdGhpc1twcm9wZXJ0aWVzW2ldXSBpbnN0YW5jZW9mIFdpbmRvdztcbiAgICAgICAgICAgIGlmICghKGlzX3dpbmRvdyA/IHRoaXNbcHJvcGVydGllc1tpXV0ub3BlbiA6IHRoaXNbcHJvcGVydGllc1tpXV0uaXNfb3BlbikpIGNvbnRpbnVlO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IGNsb3NlZDogKCkgPT4gdm9pZDtcbiAgICAgICAgICAgICAgICBsZXQgcHJvbWlzZSA9IG5ldyBQcm9taXNlPHZvaWQ+KHJlc29sdmUgPT4gKGNsb3NlZCA9IHJlc29sdmUpKTtcbiAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKHByb21pc2UpO1xuXG4gICAgICAgICAgICAgICAgdGhpc1twcm9wZXJ0aWVzW2ldXS5jbG9zZShjbG9zZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgb25fY29tcGxldGUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtXaW5kb3csIFRleHRPYmp9IGZyb20gXCIuLi8uLi9XaW5kb3dcIjtcbmltcG9ydCB7a2lsbF9hbGxfc3ByaXRlc30gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5pbXBvcnQge0dvbGRlblN1bn0gZnJvbSBcIi4uLy4uL0dvbGRlblN1blwiO1xuaW1wb3J0IHtTaG9wTWVudX0gZnJvbSBcIi4uLy4uL21haW5fbWVudXMvU2hvcE1lbnVcIjtcbmltcG9ydCB7TWFpbkNoYXIsIEl0ZW1TbG90fSBmcm9tIFwiLi4vLi4vTWFpbkNoYXJcIjtcbmltcG9ydCB7Q3Vyc29yTWFuYWdlciwgUG9pbnRWYXJpYW50c30gZnJvbSBcIi4uLy4uL3V0aWxzL0N1cnNvck1hbmFnZXJcIjtcblxuY29uc3QgTUFYX1BFUl9MSU5FID0gNTtcbmNvbnN0IE1BWF9MSU5FUyA9IDM7XG5jb25zdCBJQ09OX1NJWkUgPSAxNjtcblxuY29uc3QgTUVTU0FHRV9IQVZFX0lURU0gPSBcIllvdSBoYXZlIFwiO1xuY29uc3QgTUVTU0FHRV9OT19JVEVNID0gXCJOb25lIGluIHN0b2NrXCI7XG5cbmNvbnN0IEJBU0VfWCA9IDEyODtcbmNvbnN0IEJBU0VfWSA9IDk2O1xuY29uc3QgQkFTRV9XSURUSCA9IDEwODtcbmNvbnN0IEJBU0VfSEVJR0hUID0gNjA7XG5jb25zdCBFWFBBTkRfRElGRiA9IDg7XG5cbmNvbnN0IElURU1fWCA9IDE2O1xuY29uc3QgSVRFTV9ZID0gODtcblxuY29uc3QgU1VCX0lDT05fWCA9IDc7XG5jb25zdCBTVUJfSUNPTl9ZID0gODtcblxuY29uc3QgU1VCX1RFWFRfWF9TSElGVCA9IDg7XG5cbmNvbnN0IFRFWFRfWCA9IDg7XG5jb25zdCBURVhUX1kgPSA4O1xuXG5jb25zdCBDVVJTT1JfWCA9IDEzNjtcbmNvbnN0IENVUlNPUl9ZID0gMTEyO1xuXG5jb25zdCBTUFJJVEVfR1JPVVBfS0VZID0gXCJzcHJpdGVzXCI7XG5jb25zdCBJQ09OX0dST1VQX0tFWSA9IFwiaWNvbnNcIjtcblxuY29uc3QgSVRFTVNfSU1HX0tFWSA9IFwiaXRlbXNfaWNvbnNcIjtcbmNvbnN0IEJBQ0tHUk9VTkRfSU1HX0tFWSA9IFwiaXRlbV9ib3JkZXJcIjtcbmNvbnN0IEVRVUlQUEVEX0lNR19LRVkgPSBcImVxdWlwcGVkXCI7XG5jb25zdCBCUk9LRU5fSU1HX0tFWSA9IFwiYnJva2VuXCI7XG5cbi8qRGlzcGxheXMgYSBjaGFyYWN0ZXIncyBpbnZlbnRvcnkgdGhyb3VnaCBpY29uc1xuVXNlZCBpbiBzaG9wIG1lbnVzLiBDYW4gZGlzcGxheSB0aGUgYW1vdXQgb2YgYW4gaXRlbSBpbiB0aGUgaW52ZW50b3J5XG5cbklucHV0OiBnYW1lIFtQaGFzZXI6R2FtZV0gLSBSZWZlcmVuY2UgdG8gdGhlIHJ1bm5pbmcgZ2FtZSBvYmplY3RcbiAgICAgICBkYXRhIFtHb2xkZW5TdW5dIC0gUmVmZXJlbmNlIHRvIHRoZSBtYWluIEpTIENsYXNzIGluc3RhbmNlKi9cbmV4cG9ydCBjbGFzcyBJbnZlbnRvcnlXaW5kb3cge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgZGF0YTogR29sZGVuU3VuO1xuICAgIHB1YmxpYyBvbl9jaGFuZ2U6IEZ1bmN0aW9uO1xuXG4gICAgcHVibGljIGV4cGFuZGVkOiBib29sZWFuO1xuICAgIHB1YmxpYyBpc19vcGVuOiBib29sZWFuO1xuICAgIHB1YmxpYyB3aW5kb3c6IFdpbmRvdztcbiAgICBwdWJsaWMgdGV4dDogVGV4dE9iajtcblxuICAgIHB1YmxpYyBjaGFyOiBNYWluQ2hhcjtcbiAgICBwdWJsaWMgaXRlbV9ncmlkOiBJdGVtU2xvdFtdW107XG4gICAgcHVibGljIHNlbGVjdGVkX2l0ZW06IHN0cmluZztcbiAgICBwdWJsaWMgY3Vyc29yX3Bvczoge2xpbmU6IG51bWJlcjsgY29sOiBudW1iZXJ9O1xuICAgIHB1YmxpYyBzcHJpdGVfZ3JvdXA6IFBoYXNlci5Hcm91cDtcbiAgICBwdWJsaWMgaWNvbl9ncm91cDogUGhhc2VyLkdyb3VwO1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZTogUGhhc2VyLkdhbWUsIGRhdGE6IEdvbGRlblN1biwgb25fY2hhbmdlOiBGdW5jdGlvbikge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLm9uX2NoYW5nZSA9IG9uX2NoYW5nZTtcblxuICAgICAgICB0aGlzLmV4cGFuZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNfb3BlbiA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMud2luZG93ID0gbmV3IFdpbmRvdyh0aGlzLmdhbWUsIEJBU0VfWCwgQkFTRV9ZLCBCQVNFX1dJRFRILCBCQVNFX0hFSUdIVCk7XG4gICAgICAgIHRoaXMudGV4dCA9IHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIFRFWFRfWCwgVEVYVF9ZKTtcbiAgICAgICAgdGhpcy50ZXh0LnRleHQuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLnRleHQuc2hhZG93LmFscGhhID0gMDtcblxuICAgICAgICB0aGlzLmNoYXIgPSBudWxsO1xuICAgICAgICB0aGlzLml0ZW1fZ3JpZCA9IFtdO1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2l0ZW0gPSBudWxsO1xuICAgICAgICB0aGlzLmN1cnNvcl9wb3MgPSB7bGluZTogMCwgY29sOiAwfTtcbiAgICAgICAgdGhpcy5zcHJpdGVfZ3JvdXAgPSB0aGlzLndpbmRvdy5kZWZpbmVfaW50ZXJuYWxfZ3JvdXAoU1BSSVRFX0dST1VQX0tFWSwge3g6IElURU1fWCwgeTogSVRFTV9ZfSk7XG4gICAgICAgIHRoaXMuaWNvbl9ncm91cCA9IHRoaXMud2luZG93LmRlZmluZV9pbnRlcm5hbF9ncm91cChJQ09OX0dST1VQX0tFWSwge1xuICAgICAgICAgICAgeDogSVRFTV9YICsgU1VCX0lDT05fWCxcbiAgICAgICAgICAgIHk6IElURU1fWSArIFNVQl9JQ09OX1ksXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qQ2hlY2tzIGFuZCBtYW5hZ2VzIHRoZSBleHBhbmRlZCBzdGF0ZSBvZiB0aGUgd2luZG93XG5cbiAgICBJbnB1dDogZXhwYW5kIFtib29sZWFuXTogSWYgdHJ1ZSwgdGhlIHdpbmRvdyBiZSBpbiBleHBhbmRlZCBzdGF0ZSovXG4gICAgY2hlY2tfZXhwYW5kKGV4cGFuZDogYm9vbGVhbikge1xuICAgICAgICBpZiAoZXhwYW5kKSB0aGlzLnNldF90ZXh0KCk7XG4gICAgICAgIGlmICh0aGlzLmV4cGFuZGVkID09PSBleHBhbmQpIHJldHVybjtcblxuICAgICAgICBsZXQgbW9kaWZpZXIgPSBleHBhbmQgPyAxIDogLTE7XG5cbiAgICAgICAgdGhpcy53aW5kb3cudXBkYXRlX3NpemUoe2hlaWdodDogdGhpcy53aW5kb3cuaGVpZ2h0ICsgbW9kaWZpZXIgKiBFWFBBTkRfRElGRn0pO1xuICAgICAgICB0aGlzLndpbmRvdy51cGRhdGVfcG9zaXRpb24oe3k6IHRoaXMud2luZG93LnkgLSBtb2RpZmllciAqIEVYUEFORF9ESUZGfSk7XG4gICAgICAgIHRoaXMuc3ByaXRlX2dyb3VwLnkgPSB0aGlzLnNwcml0ZV9ncm91cC55ICsgbW9kaWZpZXIgKiBFWFBBTkRfRElGRjtcbiAgICAgICAgdGhpcy5pY29uX2dyb3VwLnkgPSB0aGlzLmljb25fZ3JvdXAueSArIG1vZGlmaWVyICogRVhQQU5EX0RJRkY7XG4gICAgICAgIHRoaXMud2luZG93LnVwZGF0ZSgpO1xuXG4gICAgICAgIHRoaXMuZXhwYW5kZWQgPSBleHBhbmQ7XG4gICAgfVxuXG4gICAgLypTZXRzIGFuZCBkaXNwbGF5cyB0aGUgdGV4dCByZWxhdGl2ZSB0byB0aGUgc2VsZWN0ZWQgaXRlbSovXG4gICAgc2V0X3RleHQoKSB7XG4gICAgICAgIGxldCBpdGVtX21hdGNoID0gbnVsbDtcbiAgICAgICAgbGV0IGZvdW5kID0gZmFsc2U7XG4gICAgICAgIGxldCBmaW5pc2ggPSBmYWxzZTtcblxuICAgICAgICBmb3IgKGxldCBsaW5lID0gMDsgbGluZSA8IE1BWF9MSU5FUzsgbGluZSsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBjb2wgPSAwOyBjb2wgPCBNQVhfUEVSX0xJTkU7IGNvbCsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLml0ZW1fZ3JpZFtsaW5lXVtjb2xdKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbmlzaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pdGVtX2dyaWRbbGluZV1bY29sXS5rZXlfbmFtZSA9PT0gdGhpcy5zZWxlY3RlZF9pdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1fbWF0Y2ggPSB0aGlzLml0ZW1fZ3JpZFtsaW5lXVtjb2xdO1xuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmb3VuZCB8fCBmaW5pc2gpIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFmb3VuZCkgdGhpcy53aW5kb3cudXBkYXRlX3RleHQoTUVTU0FHRV9OT19JVEVNLCB0aGlzLnRleHQpO1xuICAgICAgICBlbHNlIHRoaXMud2luZG93LnVwZGF0ZV90ZXh0KE1FU1NBR0VfSEFWRV9JVEVNICsgaXRlbV9tYXRjaC5xdWFudGl0eSwgdGhpcy50ZXh0KTtcblxuICAgICAgICB0aGlzLnRleHQudGV4dC5hbHBoYSA9IDE7XG4gICAgICAgIHRoaXMudGV4dC5zaGFkb3cuYWxwaGEgPSAxO1xuICAgIH1cblxuICAgIC8qQ2hhbmdlcyB0aGUgY2hhcmFjdGVyIHdob3NlIGludmVudG9yeSBpcyBiZWluZyBzaG93blxuXG4gICAgSW5wdXQ6IGtleV9uYW1lIFtudW1iZXJdIC0gVGhlIGNoYXJhY3RlcidzIGtleSBuYW1lKi9cbiAgICBjaGFuZ2VfY2hhcmFjdGVyKGtleV9uYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5jaGFyID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzLmZpbHRlcihjID0+IHtcbiAgICAgICAgICAgIHJldHVybiBjLmtleV9uYW1lID09PSBrZXlfbmFtZTtcbiAgICAgICAgfSlbMF07XG4gICAgICAgIHRoaXMubWFrZV9pdGVtX2dyaWQoKTtcblxuICAgICAgICBraWxsX2FsbF9zcHJpdGVzKHRoaXMuc3ByaXRlX2dyb3VwKTtcbiAgICAgICAga2lsbF9hbGxfc3ByaXRlcyh0aGlzLmljb25fZ3JvdXApO1xuICAgICAgICBpZiAodGhpcy5leHBhbmRlZCkgdGhpcy5zZXRfdGV4dCgpO1xuICAgICAgICB0aGlzLnNldF9zcHJpdGVzKCk7XG4gICAgfVxuXG4gICAgbWFrZV9pdGVtX2dyaWQoKSB7XG4gICAgICAgIHRoaXMuaXRlbV9ncmlkID0gW107XG5cbiAgICAgICAgbGV0IGNoYXJfaXRlbXMgPSB0aGlzLmNoYXIuaXRlbXMuZmlsdGVyKGl0ZW1fb2JqID0+IHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtX29iai5rZXlfbmFtZSBpbiB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0O1xuICAgICAgICB9KTtcblxuICAgICAgICBsZXQgbGluZXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgbGluZSA9IDA7IGxpbmUgPCAoKGNoYXJfaXRlbXMubGVuZ3RoIC8gTUFYX1BFUl9MSU5FKSB8IDApICsgMTsgbGluZSsrKSB7XG4gICAgICAgICAgICBsZXQgdGhpc19saW5lID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBjb2wgPSAwOyBjb2wgPCBNQVhfUEVSX0xJTkU7IGNvbCsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoYXJfaXRlbXNbbGluZSAqIE1BWF9QRVJfTElORSArIGNvbF0pIHRoaXNfbGluZS5wdXNoKGNoYXJfaXRlbXNbbGluZSAqIE1BWF9QRVJfTElORSArIGNvbF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGluZXMucHVzaCh0aGlzX2xpbmUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXRlbV9ncmlkID0gbGluZXM7XG4gICAgfVxuXG4gICAga2lsbF9pdGVtX2F0KGxpbmU6IG51bWJlciwgY29sOiBudW1iZXIpIHtcbiAgICAgICAgbGV0IGl0ZW1faWNvbnMgPSB0aGlzLnNwcml0ZV9ncm91cC5jaGlsZHJlbi5maWx0ZXIoKHM6IFBoYXNlci5TcHJpdGUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBzLmFsaXZlID09PSB0cnVlICYmIHMua2V5ID09PSBJVEVNU19JTUdfS0VZICYmIHMueCA9PT0gY29sICogSUNPTl9TSVpFICYmIHMueSA9PT0gbGluZSAqIElDT05fU0laRTtcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBiZ19pY29ucyA9IHRoaXMuc3ByaXRlX2dyb3VwLmNoaWxkcmVuLmZpbHRlcigoczogUGhhc2VyLlNwcml0ZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICBzLmFsaXZlID09PSB0cnVlICYmIHMua2V5ID09PSBCQUNLR1JPVU5EX0lNR19LRVkgJiYgcy54ID09PSBjb2wgKiBJQ09OX1NJWkUgJiYgcy55ID09PSBsaW5lICogSUNPTl9TSVpFXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcblxuICAgICAgICAoaXRlbV9pY29uc1swXSBhcyBQaGFzZXIuU3ByaXRlKS5raWxsKCk7XG4gICAgICAgIChiZ19pY29uc1swXSBhcyBQaGFzZXIuU3ByaXRlKS5raWxsKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuaXRlbV9ncmlkW2xpbmVdW2NvbF0uYnJva2VuKSB7XG4gICAgICAgICAgICBsZXQgYnJva2VuX2ljb25zID0gdGhpcy5zcHJpdGVfZ3JvdXAuY2hpbGRyZW4uZmlsdGVyKChiOiBQaGFzZXIuU3ByaXRlKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgYi5hbGl2ZSA9PT0gdHJ1ZSAmJiBiLmtleSA9PT0gQlJPS0VOX0lNR19LRVkgJiYgYi54ID09PSBjb2wgKiBJQ09OX1NJWkUgJiYgYi55ID09PSBsaW5lICogSUNPTl9TSVpFXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgKGJyb2tlbl9pY29uc1swXSBhcyBQaGFzZXIuU3ByaXRlKS5raWxsKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5pdGVtX2dyaWRbbGluZV1bY29sXS5lcXVpcHBlZCkge1xuICAgICAgICAgICAgbGV0IGVxdWlwcGVkX2ljb25zID0gdGhpcy5pY29uX2dyb3VwLmNoaWxkcmVuLmZpbHRlcigoZTogUGhhc2VyLlNwcml0ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIGUuYWxpdmUgPT09IHRydWUgJiZcbiAgICAgICAgICAgICAgICAgICAgZS5rZXkgPT09IEVRVUlQUEVEX0lNR19LRVkgJiZcbiAgICAgICAgICAgICAgICAgICAgZS54ID09PSBjb2wgKiBJQ09OX1NJWkUgJiZcbiAgICAgICAgICAgICAgICAgICAgZS55ID09PSBsaW5lICogSUNPTl9TSVpFXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgKGVxdWlwcGVkX2ljb25zWzBdIGFzIFBoYXNlci5TcHJpdGUpLmtpbGwoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdyYW50X2NvbnRyb2wob25fY2FuY2VsOiBGdW5jdGlvbiwgb25fc2VsZWN0OiBGdW5jdGlvbikge1xuICAgICAgICBsZXQgY29udHJvbHMgPSBbXG4gICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5MRUZULCBvbl9kb3duOiB0aGlzLnByZXZpb3VzX2NvbC5iaW5kKHRoaXMpfSxcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLlJJR0hULCBvbl9kb3duOiB0aGlzLm5leHRfY29sLmJpbmQodGhpcyl9LFxuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuVVAsIG9uX2Rvd246IHRoaXMucHJldmlvdXNfbGluZS5iaW5kKHRoaXMpfSxcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkRPV04sIG9uX2Rvd246IHRoaXMubmV4dF9saW5lLmJpbmQodGhpcyl9LFxuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuQSwgb25fZG93bjogb25fc2VsZWN0fSxcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkIsIG9uX2Rvd246IG9uX2NhbmNlbH0sXG4gICAgICAgIF07XG4gICAgICAgIHRoaXMuZGF0YS5jb250cm9sX21hbmFnZXIuc2V0X2NvbnRyb2woY29udHJvbHMsIHtsb29wX2NvbmZpZ3M6IHt2ZXJ0aWNhbDogdHJ1ZSwgaG9yaXpvbnRhbDogdHJ1ZX19KTtcbiAgICB9XG5cbiAgICBuZXh0X2NvbCgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXRlbV9ncmlkLmxlbmd0aCA9PT0gMSAmJiB0aGlzLml0ZW1fZ3JpZFt0aGlzLmN1cnNvcl9wb3MubGluZV0ubGVuZ3RoID09PSAxKSByZXR1cm47XG5cbiAgICAgICAgaWYgKHRoaXMuY3Vyc29yX3Bvcy5jb2wgPCB0aGlzLml0ZW1fZ3JpZFt0aGlzLmN1cnNvcl9wb3MubGluZV0ubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgdGhpcy5zZXRfY3Vyc29yKHRoaXMuY3Vyc29yX3Bvcy5saW5lLCB0aGlzLmN1cnNvcl9wb3MuY29sICsgMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jdXJzb3JfcG9zLmxpbmUgPT09IHRoaXMuaXRlbV9ncmlkLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldF9jdXJzb3IoMCwgMCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0X2N1cnNvcih0aGlzLmN1cnNvcl9wb3MubGluZSArIDEsIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJldmlvdXNfY29sKCkge1xuICAgICAgICBpZiAodGhpcy5pdGVtX2dyaWQubGVuZ3RoID09PSAxICYmIHRoaXMuaXRlbV9ncmlkW3RoaXMuY3Vyc29yX3Bvcy5saW5lXS5sZW5ndGggPT09IDEpIHJldHVybjtcblxuICAgICAgICBpZiAodGhpcy5jdXJzb3JfcG9zLmNvbCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuc2V0X2N1cnNvcih0aGlzLmN1cnNvcl9wb3MubGluZSwgdGhpcy5jdXJzb3JfcG9zLmNvbCAtIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuY3Vyc29yX3Bvcy5saW5lID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRfY3Vyc29yKHRoaXMuaXRlbV9ncmlkLmxlbmd0aCAtIDEsIHRoaXMuaXRlbV9ncmlkW3RoaXMuaXRlbV9ncmlkLmxlbmd0aCAtIDFdLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldF9jdXJzb3IodGhpcy5jdXJzb3JfcG9zLmxpbmUgLSAxLCBNQVhfUEVSX0xJTkUgLSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5leHRfbGluZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXRlbV9ncmlkLmxlbmd0aCA9PT0gMSkgcmV0dXJuO1xuXG4gICAgICAgIGlmICh0aGlzLmN1cnNvcl9wb3MubGluZSA9PT0gdGhpcy5pdGVtX2dyaWQubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgdGhpcy5zZXRfY3Vyc29yKDAsIHRoaXMuY3Vyc29yX3Bvcy5jb2wpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuY3Vyc29yX3Bvcy5jb2wgPiB0aGlzLml0ZW1fZ3JpZFt0aGlzLmN1cnNvcl9wb3MubGluZSArIDFdLmxlbmd0aCAtIDEpXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRfY3Vyc29yKHRoaXMuY3Vyc29yX3Bvcy5saW5lICsgMSwgdGhpcy5pdGVtX2dyaWRbdGhpcy5jdXJzb3JfcG9zLmxpbmUgKyAxXS5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIGVsc2UgdGhpcy5zZXRfY3Vyc29yKHRoaXMuY3Vyc29yX3Bvcy5saW5lICsgMSwgdGhpcy5jdXJzb3JfcG9zLmNvbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcmV2aW91c19saW5lKCkge1xuICAgICAgICBpZiAodGhpcy5pdGVtX2dyaWQubGVuZ3RoID09PSAxKSByZXR1cm47XG5cbiAgICAgICAgaWYgKHRoaXMuY3Vyc29yX3Bvcy5saW5lID09PSAwKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jdXJzb3JfcG9zLmNvbCA+IHRoaXMuaXRlbV9ncmlkW3RoaXMuaXRlbV9ncmlkLmxlbmd0aCAtIDFdLmxlbmd0aCAtIDEpXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRfY3Vyc29yKHRoaXMuaXRlbV9ncmlkLmxlbmd0aCAtIDEsIHRoaXMuaXRlbV9ncmlkW3RoaXMuaXRlbV9ncmlkLmxlbmd0aCAtIDFdLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgZWxzZSB0aGlzLnNldF9jdXJzb3IodGhpcy5pdGVtX2dyaWQubGVuZ3RoIC0gMSwgdGhpcy5jdXJzb3JfcG9zLmNvbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldF9jdXJzb3IodGhpcy5jdXJzb3JfcG9zLmxpbmUgLSAxLCB0aGlzLmN1cnNvcl9wb3MuY29sKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qTW92ZXMgdGhlIGN1cnNvciB0byB0aGUgZ2l2ZW4gY29sdW1uIGFuZCBsaW5lKi9cbiAgICBzZXRfY3Vyc29yKGxpbmU6IG51bWJlciwgY29sOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5jdXJzb3JfcG9zID0ge2xpbmU6IGxpbmUsIGNvbDogY29sfTtcbiAgICAgICAgbGV0IGN1cnNvcl94ID0gQ1VSU09SX1ggKyBjb2wgKiBJQ09OX1NJWkU7XG4gICAgICAgIGxldCBjdXJzb3JfeSA9IENVUlNPUl9ZICsgbGluZSAqIElDT05fU0laRTtcbiAgICAgICAgdGhpcy5kYXRhLmN1cnNvcl9tYW5hZ2VyLm1vdmVfdG8oXG4gICAgICAgICAgICB7eDogY3Vyc29yX3gsIHk6IGN1cnNvcl95fSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0d2Vlbl9jb25maWc6IHt0eXBlOiBDdXJzb3JNYW5hZ2VyLkN1cnNvclR3ZWVucy5QT0lOVCwgdmFyaWFudDogUG9pbnRWYXJpYW50cy5MT05HfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbl9jaGFuZ2UobGluZSwgY29sKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKkRpc3BsYXlzIHRoZSBzcHJpdGVzIGZvciB0aGUgd2luZG93XG4gICAgSW5jbHVkZXMgaWNvbnMgYW5kIHF1YW50aXR5IHRleHQqL1xuICAgIHNldF9zcHJpdGVzKCkge1xuICAgICAgICBsZXQgZmluaXNoID0gZmFsc2U7XG5cbiAgICAgICAgZm9yIChsZXQgbGluZSA9IDA7IGxpbmUgPCBNQVhfTElORVM7IGxpbmUrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgY29sID0gMDsgY29sIDwgTUFYX1BFUl9MSU5FOyBjb2wrKykge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pdGVtX2dyaWRbbGluZV1bY29sXSkge1xuICAgICAgICAgICAgICAgICAgICBmaW5pc2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgdGhpc19pdGVtID0gdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFt0aGlzLml0ZW1fZ3JpZFtsaW5lXVtjb2xdLmtleV9uYW1lXTtcblxuICAgICAgICAgICAgICAgIGxldCBkZWFkX2l0ZW1zID0gdGhpcy5zcHJpdGVfZ3JvdXAuY2hpbGRyZW4uZmlsdGVyKChzOiBQaGFzZXIuU3ByaXRlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzLmFsaXZlID09PSBmYWxzZSAmJiBzLmtleSA9PT0gSVRFTVNfSU1HX0tFWTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBsZXQgZGVhZF9iYWNrZ3JvdW5kcyA9IHRoaXMuc3ByaXRlX2dyb3VwLmNoaWxkcmVuLmZpbHRlcigoczogUGhhc2VyLlNwcml0ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcy5hbGl2ZSA9PT0gZmFsc2UgJiYgcy5rZXkgPT09IEJBQ0tHUk9VTkRfSU1HX0tFWTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmIChkZWFkX2l0ZW1zLmxlbmd0aCA+IDAgJiYgZGVhZF9iYWNrZ3JvdW5kcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIChkZWFkX2JhY2tncm91bmRzWzBdIGFzIFBoYXNlci5TcHJpdGUpLnJlc2V0KGNvbCAqIElDT05fU0laRSwgbGluZSAqIElDT05fU0laRSk7XG4gICAgICAgICAgICAgICAgICAgIChkZWFkX2l0ZW1zWzBdIGFzIFBoYXNlci5TcHJpdGUpLnJlc2V0KGNvbCAqIElDT05fU0laRSwgbGluZSAqIElDT05fU0laRSk7XG4gICAgICAgICAgICAgICAgICAgIChkZWFkX2l0ZW1zWzBdIGFzIFBoYXNlci5TcHJpdGUpLmZyYW1lTmFtZSA9IHRoaXNfaXRlbS5rZXlfbmFtZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2wgKiBJQ09OX1NJWkUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lICogSUNPTl9TSVpFLFxuICAgICAgICAgICAgICAgICAgICAgICAgQkFDS0dST1VORF9JTUdfS0VZLFxuICAgICAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgU1BSSVRFX0dST1VQX0tFWVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2wgKiBJQ09OX1NJWkUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lICogSUNPTl9TSVpFLFxuICAgICAgICAgICAgICAgICAgICAgICAgSVRFTVNfSU1HX0tFWSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfaXRlbS5rZXlfbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFNQUklURV9HUk9VUF9LRVlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pdGVtX2dyaWRbbGluZV1bY29sXS5icm9rZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRlYWRfYnJva2VuID0gdGhpcy5zcHJpdGVfZ3JvdXAuY2hpbGRyZW4uZmlsdGVyKChiOiBQaGFzZXIuU3ByaXRlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYi5hbGl2ZSA9PT0gZmFsc2UgJiYgYi5rZXkgPT09IEJST0tFTl9JTUdfS0VZO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlYWRfYnJva2VuLmxlbmd0aCA+IDApXG4gICAgICAgICAgICAgICAgICAgICAgICAoZGVhZF9icm9rZW5bMF0gYXMgUGhhc2VyLlNwcml0ZSkucmVzZXQoY29sICogSUNPTl9TSVpFLCBsaW5lICogSUNPTl9TSVpFKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbCAqIElDT05fU0laRSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lICogSUNPTl9TSVpFLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJST0tFTl9JTUdfS0VZLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU1BSSVRFX0dST1VQX0tFWVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pdGVtX2dyaWRbbGluZV1bY29sXS5lcXVpcHBlZCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZGVhZF9pY29ucyA9IHRoaXMuaWNvbl9ncm91cC5jaGlsZHJlbi5maWx0ZXIoKGU6IFBoYXNlci5TcHJpdGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLmFsaXZlID09PSBmYWxzZSAmJiBlLmtleSA9PT0gRVFVSVBQRURfSU1HX0tFWTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZWFkX2ljb25zLmxlbmd0aCA+IDApXG4gICAgICAgICAgICAgICAgICAgICAgICAoZGVhZF9pY29uc1swXSBhcyBQaGFzZXIuU3ByaXRlKS5yZXNldChjb2wgKiBJQ09OX1NJWkUsIGxpbmUgKiBJQ09OX1NJWkUpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sICogSUNPTl9TSVpFLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUgKiBJQ09OX1NJWkUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRVFVSVBQRURfSU1HX0tFWSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIElDT05fR1JPVVBfS0VZXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLml0ZW1fZ3JpZFtsaW5lXVtjb2xdLnF1YW50aXR5ID4gMSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZGVhZF90ZXh0ID0gdGhpcy5pY29uX2dyb3VwLmNoaWxkcmVuLmZpbHRlcigodDogUGhhc2VyLkJpdG1hcFRleHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LmFsaXZlID09PSBmYWxzZSAmJiB0LnRleHQgIT09IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZWFkX3RleHQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgKGRlYWRfdGV4dFswXSBhcyBQaGFzZXIuQml0bWFwVGV4dCkudGV4dCA9IHRoaXMuaXRlbV9ncmlkW2xpbmVdW2NvbF0ucXVhbnRpdHkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIChkZWFkX3RleHRbMF0gYXMgUGhhc2VyLkJpdG1hcFRleHQpLnJlc2V0KGNvbCAqIElDT05fU0laRSwgbGluZSAqIElDT05fU0laRSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWFkX3RleHRbMF0ueCArPSBTVUJfVEVYVF9YX1NISUZUIC0gKGRlYWRfdGV4dFswXSBhcyBQaGFzZXIuQml0bWFwVGV4dCkud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXRlbV9jb3VudCA9IHRoaXMuZ2FtZS5hZGQuYml0bWFwVGV4dChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2wgKiBJQ09OX1NJWkUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZSAqIElDT05fU0laRSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImdzLWl0ZW0tYm1wLWZvbnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1fZ3JpZFtsaW5lXVtjb2xdLnF1YW50aXR5LnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtX2NvdW50LnggKz0gU1VCX1RFWFRfWF9TSElGVCAtIGl0ZW1fY291bnQud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndpbmRvdy5hZGRfdG9faW50ZXJuYWxfZ3JvdXAoSUNPTl9HUk9VUF9LRVksIGl0ZW1fY291bnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZpbmlzaCkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zcHJpdGVfZ3JvdXAuYWxwaGEgPSAxO1xuICAgIH1cblxuICAgIHJlZnJlc2goY2hhcl9rZXk6IHN0cmluZywgaXRlbT86IHN0cmluZykge1xuICAgICAgICB0aGlzLmNoYXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnMuZmlsdGVyKGMgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGMua2V5X25hbWUgPT09IGNoYXJfa2V5O1xuICAgICAgICB9KVswXTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9pdGVtID0gaXRlbTtcblxuICAgICAgICBraWxsX2FsbF9zcHJpdGVzKHRoaXMuc3ByaXRlX2dyb3VwKTtcbiAgICAgICAga2lsbF9hbGxfc3ByaXRlcyh0aGlzLmljb25fZ3JvdXApO1xuXG4gICAgICAgIHRoaXMubWFrZV9pdGVtX2dyaWQoKTtcbiAgICAgICAgdGhpcy5zZXRfc3ByaXRlcygpO1xuICAgIH1cblxuICAgIC8qT3BlbnMgdGhpcyB3aW5kb3cgZm9yIGEgZ2l2ZW4gY2hhcmFjdGVyXG5cbiAgICBJbnB1dDogY2hhcl9rZXkgW3N0cmluZ10gLSBUaGUgY2hhcmFjdGVyJ3Mga2V5IG5hbWVcbiAgICAgICAgICAgaXRlbSBbc3RyaW5nXSAtIFRoZSBpdGVtIHRvIGNoZWNrIGFnYWluc3RcbiAgICAgICAgICAgZXhwYW5kIFtib29sZWFuXSAtIElmIHRydWUsIHRoZSB3aW5kb3cgd2lsbCBiZSBpbiBleHBhbmRlZCBzdGF0ZVxuICAgICAgICAgICBvcGVuX2NhbGxiYWNrIFtmdW5jdGlvbl0gLSBDYWxsYmFjayBmdW5jdGlvbiAoT3B0aW9uYWwpKi9cbiAgICBvcGVuKGNoYXJfa2V5OiBzdHJpbmcsIGl0ZW0/OiBzdHJpbmcsIGV4cGFuZDogYm9vbGVhbiA9IGZhbHNlLCBvcGVuX2NhbGxiYWNrPzogRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5jaGFyID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzLmZpbHRlcihjID0+IHtcbiAgICAgICAgICAgIHJldHVybiBjLmtleV9uYW1lID09PSBjaGFyX2tleTtcbiAgICAgICAgfSlbMF07XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfaXRlbSA9IGl0ZW07XG5cbiAgICAgICAgdGhpcy5tYWtlX2l0ZW1fZ3JpZCgpO1xuICAgICAgICB0aGlzLmNoZWNrX2V4cGFuZChleHBhbmQpO1xuICAgICAgICB0aGlzLnNldF9zcHJpdGVzKCk7XG5cbiAgICAgICAgdGhpcy5pc19vcGVuID0gdHJ1ZTtcbiAgICAgICAgdGhpcy53aW5kb3cuc2hvdyhvcGVuX2NhbGxiYWNrLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgLypDbGVhcnMgaW5mb3JtYXRpb24gYW5kIGNsb3NlcyB0aGUgd2luZG93XG5cbiAgICBJbnB1dDogZGVzdHJveSBbYm9vbGVhbl0gLSBJZiB0cnVlLCBzcHJpdGVzIGFyZSBkZXN0cm95ZWQqL1xuICAgIGNsb3NlKGNhbGxiYWNrPzogRnVuY3Rpb24sIGRlc3Ryb3kgPSBmYWxzZSkge1xuICAgICAgICBraWxsX2FsbF9zcHJpdGVzKHRoaXMuc3ByaXRlX2dyb3VwLCBkZXN0cm95KTtcbiAgICAgICAga2lsbF9hbGxfc3ByaXRlcyh0aGlzLmljb25fZ3JvdXAsIGRlc3Ryb3kpO1xuXG4gICAgICAgIHRoaXMudGV4dC50ZXh0LmFscGhhID0gMDtcbiAgICAgICAgdGhpcy50ZXh0LnNoYWRvdy5hbHBoYSA9IDA7XG4gICAgICAgIHRoaXMuY2hhciA9IG51bGw7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfaXRlbSA9IG51bGw7XG4gICAgICAgIHRoaXMuY3Vyc29yX3BvcyA9IHtsaW5lOiAwLCBjb2w6IDB9O1xuICAgICAgICB0aGlzLml0ZW1fZ3JpZCA9IFtdO1xuICAgICAgICB0aGlzLmNoZWNrX2V4cGFuZChmYWxzZSk7XG5cbiAgICAgICAgdGhpcy5pc19vcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMud2luZG93LmNsb3NlKGNhbGxiYWNrLCBmYWxzZSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtXaW5kb3d9IGZyb20gXCIuLi8uLi9XaW5kb3dcIjtcbmltcG9ydCB7a2lsbF9hbGxfc3ByaXRlc30gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5pbXBvcnQge0dvbGRlblN1bn0gZnJvbSBcIi4uLy4uL0dvbGRlblN1blwiO1xuaW1wb3J0IHtTaG9wSXRlbX0gZnJvbSBcIi4uLy4uL1Nob3AuanNcIjtcbmltcG9ydCB7Q3Vyc29yTWFuYWdlciwgUG9pbnRWYXJpYW50c30gZnJvbSBcIi4uLy4uL3V0aWxzL0N1cnNvck1hbmFnZXJcIjtcblxuY29uc3QgTUFYX1BFUl9QQUdFID0gNztcblxuY29uc3QgV0lOX1ggPSAwO1xuY29uc3QgV0lOX1kgPSA5NjtcbmNvbnN0IFdJTl9XSURUSCA9IDIzNjtcbmNvbnN0IFdJTl9IRUlHSFQgPSAyODtcblxuY29uc3QgSVRFTV9YID0gMTY7XG5jb25zdCBJVEVNX1kgPSAxNiArIDk2O1xuY29uc3QgVEFHX1ggPSAyNDtcbmNvbnN0IFRBR19ZID0gMTA0O1xuXG5jb25zdCBURVhUX1ggPSAzOTtcbmNvbnN0IFRFWFRfRU5EX1kgPSAxMzE7XG5jb25zdCBURVhUX0JHX0NPTE9SID0gMHhmZjczMDA7XG5cbmNvbnN0IEJHX1NISUZUX1ggPSAtMztcbmNvbnN0IEJHX1NISUZUX1kgPSAxO1xuXG5jb25zdCBMSU5FX1NISUZUID0gMzI7XG5cbmNvbnN0IENVUlNPUl9YID0gMDtcbmNvbnN0IENVUlNPUl9ZID0gMTEyO1xuXG5jb25zdCBBUlJPV19HUk9VUF9YID0gMjI0O1xuY29uc3QgQVJST1dfR1JPVVBfWSA9IDgwO1xuY29uc3QgVVBfQVJST1dfWCA9IDE2O1xuY29uc3QgVVBfQVJST1dfWSA9IDIwO1xuY29uc3QgRE9XTl9BUlJPV19YID0gMDtcbmNvbnN0IERPV05fQVJST1dfWSA9IDUyO1xuY29uc3QgQVJST1dfWV9ESUZGID0gODtcblxuY29uc3QgU0VMRUNUX1RXRUVOX1RJTUUgPSBQaGFzZXIuVGltZXIuUVVBUlRFUjtcbmNvbnN0IEFSUk9XX1RXRUVOX1RJTUUgPSBQaGFzZXIuVGltZXIuUVVBUlRFUiA+PiAxO1xuXG4vKkRpc3BsYXlzIGEgc2hvcGtlZXBlcidzIHdhcmVzIHRvIHB1cmNoYXNlXG5TdXBwb3J0cyBtdWx0aXBsZSBpdGVtIHBhZ2VzXG5cbklucHV0OiBnYW1lIFtQaGFzZXI6R2FtZV0gLSBSZWZlcmVuY2UgdG8gdGhlIHJ1bm5pbmcgZ2FtZSBvYmplY3RcbiAgICAgICBkYXRhIFtHb2xkZW5TdW5dIC0gUmVmZXJlbmNlIHRvIHRoZSBtYWluIEpTIENsYXNzIGluc3RhbmNlXG4gICAgICAgb25fY2hhbmdlIFtmdW5jdGlvbl0gLSBGdW5jdGlvbiBjYWxsYmFjayB0byB1cGRhdGUgdGhlIHBhcmVudCovXG5leHBvcnQgY2xhc3MgQnV5U2VsZWN0TWVudSB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOiBHb2xkZW5TdW47XG4gICAgcHVibGljIG9uX2NoYW5nZTogRnVuY3Rpb247XG5cbiAgICBwdWJsaWMgd2luZG93OiBXaW5kb3c7XG4gICAgcHVibGljIGl0ZW1zOiB7W2tleV9uYW1lOiBzdHJpbmddOiBTaG9wSXRlbX07XG4gICAgcHVibGljIHNlbGVjdGVkX2luZGV4OiBudW1iZXI7XG4gICAgcHVibGljIGN1cnJlbnRfcGFnZTogbnVtYmVyO1xuICAgIHB1YmxpYyBwYWdlczogU2hvcEl0ZW1bXVtdO1xuICAgIHB1YmxpYyB0d2VlbnM6IHtpdGVtOiBQaGFzZXIuVHdlZW47IGJnOiBQaGFzZXIuVHdlZW59O1xuICAgIHB1YmxpYyBpc19vcGVuOiBib29sZWFuO1xuXG4gICAgcHVibGljIHNwcml0ZV9ncm91cDogUGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyB0YWdfZ3JvdXA6IFBoYXNlci5Hcm91cDtcbiAgICBwdWJsaWMgdGV4dF9ncm91cDogUGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyBiZ19ncm91cDogUGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyBhcnJvd19ncm91cDogUGhhc2VyLkdyb3VwO1xuXG4gICAgcHVibGljIHVwX2Fycm93OiBQaGFzZXIuU3ByaXRlO1xuICAgIHB1YmxpYyBkb3duX2Fycm93OiBQaGFzZXIuU3ByaXRlO1xuICAgIHB1YmxpYyBhcnJvd190d2VlbnM6IFBoYXNlci5Ud2VlbltdO1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZTogUGhhc2VyLkdhbWUsIGRhdGE6IEdvbGRlblN1biwgb25fY2hhbmdlOiBGdW5jdGlvbikge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLm9uX2NoYW5nZSA9IG9uX2NoYW5nZTtcblxuICAgICAgICB0aGlzLndpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBXSU5fWCwgV0lOX1ksIFdJTl9XSURUSCwgV0lOX0hFSUdIVCk7XG4gICAgICAgIHRoaXMuaXRlbXMgPSB7fTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9pbmRleCA9IDA7XG4gICAgICAgIHRoaXMuY3VycmVudF9wYWdlID0gMDtcbiAgICAgICAgdGhpcy5wYWdlcyA9IFtdO1xuICAgICAgICB0aGlzLnR3ZWVucyA9IHtpdGVtOiBudWxsLCBiZzogbnVsbH07XG4gICAgICAgIHRoaXMuaXNfb3BlbiA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuc3ByaXRlX2dyb3VwID0gdGhpcy5nYW1lLmFkZC5ncm91cCgpO1xuICAgICAgICB0aGlzLnNwcml0ZV9ncm91cC54ID0gSVRFTV9YO1xuICAgICAgICB0aGlzLnNwcml0ZV9ncm91cC55ID0gSVRFTV9ZO1xuICAgICAgICB0aGlzLnRhZ19ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcbiAgICAgICAgdGhpcy50YWdfZ3JvdXAueCA9IFRBR19YO1xuICAgICAgICB0aGlzLnRhZ19ncm91cC55ID0gVEFHX1k7XG4gICAgICAgIHRoaXMudGV4dF9ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcbiAgICAgICAgdGhpcy50ZXh0X2dyb3VwLnggPSBURVhUX1g7XG4gICAgICAgIHRoaXMudGV4dF9ncm91cC55ID0gVEVYVF9FTkRfWTtcbiAgICAgICAgdGhpcy5iZ19ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcbiAgICAgICAgdGhpcy5iZ19ncm91cC54ID0gVEVYVF9YICsgQkdfU0hJRlRfWDtcbiAgICAgICAgdGhpcy5iZ19ncm91cC55ID0gVEVYVF9FTkRfWSArIEJHX1NISUZUX1k7XG4gICAgICAgIHRoaXMuYXJyb3dfZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XG4gICAgICAgIHRoaXMuYXJyb3dfZ3JvdXAueCA9IEFSUk9XX0dST1VQX1g7XG4gICAgICAgIHRoaXMuYXJyb3dfZ3JvdXAueSA9IEFSUk9XX0dST1VQX1k7XG5cbiAgICAgICAgdGhpcy51cF9hcnJvdyA9IHRoaXMuYXJyb3dfZ3JvdXAuY3JlYXRlKFVQX0FSUk9XX1gsIFVQX0FSUk9XX1ksIFwiZ3JlZW5fYXJyb3dcIik7XG4gICAgICAgIHRoaXMudXBfYXJyb3cucm90YXRpb24gPSBNYXRoLlBJO1xuICAgICAgICB0aGlzLmRvd25fYXJyb3cgPSB0aGlzLmFycm93X2dyb3VwLmNyZWF0ZShET1dOX0FSUk9XX1gsIERPV05fQVJST1dfWSwgXCJncmVlbl9hcnJvd1wiKTtcbiAgICAgICAgdGhpcy51cF9hcnJvdy5hbHBoYSA9IDA7XG4gICAgICAgIHRoaXMuZG93bl9hcnJvdy5hbHBoYSA9IDA7XG5cbiAgICAgICAgdGhpcy5hcnJvd190d2VlbnMgPSBbXTtcbiAgICB9XG5cbiAgICAvKlVwZGF0ZXMgdGhlIGdyb3VwcycgcG9zaXRpb25zIG9uIHNjcmVlbiovXG4gICAgdXBkYXRlX2dyb3VwX3BvcygpIHtcbiAgICAgICAgdGhpcy5zcHJpdGVfZ3JvdXAueCA9IElURU1fWCArIHRoaXMuZ2FtZS5jYW1lcmEueDtcbiAgICAgICAgdGhpcy5zcHJpdGVfZ3JvdXAueSA9IElURU1fWSArIHRoaXMuZ2FtZS5jYW1lcmEueTtcbiAgICAgICAgdGhpcy50YWdfZ3JvdXAueCA9IFRBR19YICsgdGhpcy5nYW1lLmNhbWVyYS54O1xuICAgICAgICB0aGlzLnRhZ19ncm91cC55ID0gVEFHX1kgKyB0aGlzLmdhbWUuY2FtZXJhLnk7XG4gICAgICAgIHRoaXMudGV4dF9ncm91cC54ID0gVEVYVF9YICsgdGhpcy5nYW1lLmNhbWVyYS54O1xuICAgICAgICB0aGlzLnRleHRfZ3JvdXAueSA9IFRFWFRfRU5EX1kgKyB0aGlzLmdhbWUuY2FtZXJhLnk7XG4gICAgICAgIHRoaXMuYmdfZ3JvdXAueCA9IFRFWFRfWCArIEJHX1NISUZUX1ggKyB0aGlzLmdhbWUuY2FtZXJhLng7XG4gICAgICAgIHRoaXMuYmdfZ3JvdXAueSA9IFRFWFRfRU5EX1kgKyBCR19TSElGVF9ZICsgdGhpcy5nYW1lLmNhbWVyYS55O1xuICAgICAgICB0aGlzLmFycm93X2dyb3VwLnggPSBBUlJPV19HUk9VUF9YICsgdGhpcy5nYW1lLmNhbWVyYS54O1xuICAgICAgICB0aGlzLmFycm93X2dyb3VwLnkgPSBBUlJPV19HUk9VUF9ZICsgdGhpcy5nYW1lLmNhbWVyYS55O1xuICAgIH1cblxuICAgIC8qSGlkZXMgb3Igc2hvd3Mgc3BlY2lmaWMgYXJyb3dzXG4gICAgXG4gICAgSW5wdXQ6IHVwLCBkb3duIFtib29sZWFuXSAtIElmIHRydWUsIHNob3dzIHVwL2Rvd24gYXJyb3cqL1xuICAgIHNldF9hcnJvd3ModXA6IGJvb2xlYW4gPSBmYWxzZSwgZG93bjogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIHRoaXMudXBfYXJyb3cueCA9IFVQX0FSUk9XX1g7XG4gICAgICAgIHRoaXMudXBfYXJyb3cueSA9IFVQX0FSUk9XX1k7XG4gICAgICAgIHRoaXMuZG93bl9hcnJvdy54ID0gRE9XTl9BUlJPV19YO1xuICAgICAgICB0aGlzLmRvd25fYXJyb3cueSA9IERPV05fQVJST1dfWTtcbiAgICAgICAgaWYgKHVwKSB0aGlzLnVwX2Fycm93LmFscGhhID0gMTtcbiAgICAgICAgZWxzZSB0aGlzLnVwX2Fycm93LmFscGhhID0gMDtcblxuICAgICAgICBpZiAoZG93bikgdGhpcy5kb3duX2Fycm93LmFscGhhID0gMTtcbiAgICAgICAgZWxzZSB0aGlzLmRvd25fYXJyb3cuYWxwaGEgPSAwO1xuICAgIH1cblxuICAgIC8qQ2hlY2tzIHdoaWNoIGFycm93cyB0byBzaG93IG9yIGhpZGUqL1xuICAgIGNoZWNrX2Fycm93cygpIHtcbiAgICAgICAgbGV0IHVwID0gZmFsc2U7XG4gICAgICAgIGxldCBkb3duID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHRoaXMuY3VycmVudF9wYWdlIDwgdGhpcy5wYWdlcy5sZW5ndGggLSAxKSBkb3duID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudF9wYWdlID4gMCkgdXAgPSB0cnVlO1xuXG4gICAgICAgIHRoaXMuc2V0X2Fycm93cyh1cCwgZG93bik7XG4gICAgICAgIHRoaXMuaW5pdF9hcnJvd190d2VlbnMoKTtcbiAgICAgICAgdGhpcy5nYW1lLndvcmxkLmJyaW5nVG9Ub3AodGhpcy5hcnJvd19ncm91cCk7XG4gICAgfVxuXG4gICAgLypTdGFydHMgdGhlIGFycm93IGFuaW1hdGlvbnMqL1xuICAgIGluaXRfYXJyb3dfdHdlZW5zKCkge1xuICAgICAgICBsZXQgdXBfdHdlZW4gPSB0aGlzLmdhbWUuYWRkXG4gICAgICAgICAgICAudHdlZW4odGhpcy51cF9hcnJvdylcbiAgICAgICAgICAgIC50byh7eTogVVBfQVJST1dfWSAtIEFSUk9XX1lfRElGRn0sIEFSUk9XX1RXRUVOX1RJTUUsIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUpXG4gICAgICAgICAgICAudG8oe3k6IFVQX0FSUk9XX1l9LCBBUlJPV19UV0VFTl9USU1FLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lKVxuICAgICAgICAgICAgLmxvb3AoKTtcbiAgICAgICAgdGhpcy5hcnJvd190d2VlbnMucHVzaCh1cF90d2Vlbik7XG5cbiAgICAgICAgbGV0IGRvd25fdHdlZW4gPSB0aGlzLmdhbWUuYWRkXG4gICAgICAgICAgICAudHdlZW4odGhpcy5kb3duX2Fycm93KVxuICAgICAgICAgICAgLnRvKHt5OiBET1dOX0FSUk9XX1kgKyBBUlJPV19ZX0RJRkZ9LCBBUlJPV19UV0VFTl9USU1FLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lKVxuICAgICAgICAgICAgLnRvKHt5OiBET1dOX0FSUk9XX1l9LCBBUlJPV19UV0VFTl9USU1FLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lKVxuICAgICAgICAgICAgLmxvb3AoKTtcbiAgICAgICAgdGhpcy5hcnJvd190d2VlbnMucHVzaChkb3duX3R3ZWVuKTtcblxuICAgICAgICB1cF90d2Vlbi5zdGFydCgpO1xuICAgICAgICBkb3duX3R3ZWVuLnN0YXJ0KCk7XG4gICAgfVxuXG4gICAgLypDbGVhcnMgdGhlIGFycm93IGFuaW1hdGlvbnMqL1xuICAgIGNsZWFyX2Fycm93X3R3ZWVucygpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmFycm93X3R3ZWVucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5nYW1lLnR3ZWVucy5yZW1vdmUodGhpcy5hcnJvd190d2VlbnMucG9wKCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypTZXRzIHRoZSBwcmljZSBmb3IgYSBnaXZlbiBpdGVtJ3MgdGFnXG5cbiAgICBJbnB1dDogdGV4dCBbc3RyaW5nXSAtIFByaWNlIG9mIHRoZSBpdGVtXG4gICAgICAgICAgIGluZGV4IFtudW1iZXJdIC0gTGluZSBpbmRleCBvZiB0aGUgaXRlbSovXG4gICAgc2V0X3RleHQodGV4dDogc3RyaW5nLCBpbmRleDogbnVtYmVyKSB7XG4gICAgICAgIGxldCBkZWFkX3RleHRzID0gdGhpcy50ZXh0X2dyb3VwLmNoaWxkcmVuLmZpbHRlcigodDogUGhhc2VyLkJpdG1hcFRleHQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0LmFsaXZlID09PSBmYWxzZSAmJiB0LnRpbnQgIT09IDA7XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgZGVhZF9zaGFkb3dzID0gdGhpcy50ZXh0X2dyb3VwLmNoaWxkcmVuLmZpbHRlcigoczogUGhhc2VyLkJpdG1hcFRleHQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBzLmFsaXZlID09PSBmYWxzZSAmJiBzLnRpbnQgPT09IDA7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCBzcHJpdGUgPSBudWxsO1xuICAgICAgICBsZXQgc2hhZG93ID0gbnVsbDtcblxuICAgICAgICBpZiAoZGVhZF90ZXh0cy5sZW5ndGggPiAwICYmIGRlYWRfc2hhZG93cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAoZGVhZF90ZXh0c1swXSBhcyBQaGFzZXIuQml0bWFwVGV4dCkudGV4dCA9IHRleHQ7XG4gICAgICAgICAgICAoZGVhZF90ZXh0c1swXSBhcyBQaGFzZXIuQml0bWFwVGV4dCkucmVzZXQoaW5kZXggKiBMSU5FX1NISUZULCAwKTtcbiAgICAgICAgICAgIChkZWFkX3NoYWRvd3NbMF0gYXMgUGhhc2VyLkJpdG1hcFRleHQpLnRleHQgPSB0ZXh0O1xuICAgICAgICAgICAgKGRlYWRfc2hhZG93c1swXSBhcyBQaGFzZXIuQml0bWFwVGV4dCkucmVzZXQoaW5kZXggKiBMSU5FX1NISUZULCAwKTtcbiAgICAgICAgICAgIHNwcml0ZSA9IGRlYWRfdGV4dHNbMF07XG4gICAgICAgICAgICBzaGFkb3cgPSBkZWFkX3NoYWRvd3NbMF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzaGFkb3cgPSB0aGlzLmdhbWUuYWRkLmJpdG1hcFRleHQoaW5kZXggKiBMSU5FX1NISUZULCAwLCBcImdzLXNob3AtYm1wLWZvbnRcIiwgdGV4dCk7XG4gICAgICAgICAgICBzcHJpdGUgPSB0aGlzLmdhbWUuYWRkLmJpdG1hcFRleHQoaW5kZXggKiBMSU5FX1NISUZULCAwLCBcImdzLXNob3AtYm1wLWZvbnRcIiwgdGV4dCk7XG4gICAgICAgICAgICBzaGFkb3cucm90YXRpb24gPSBNYXRoLlBJIC8gMjtcbiAgICAgICAgICAgIHNwcml0ZS5yb3RhdGlvbiA9IE1hdGguUEkgLyAyO1xuICAgICAgICAgICAgc2hhZG93LnRpbnQgPSAweDA7XG4gICAgICAgICAgICB0aGlzLnRleHRfZ3JvdXAuYWRkKHNoYWRvdyk7XG4gICAgICAgICAgICB0aGlzLnRleHRfZ3JvdXAuYWRkKHNwcml0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBzaGFkb3cueSAtPSBzcHJpdGUud2lkdGggLSAxO1xuICAgICAgICBzcHJpdGUueSAtPSBzcHJpdGUud2lkdGg7XG4gICAgICAgIHNoYWRvdy54IC09IDE7XG5cbiAgICAgICAgbGV0IGRlYWRfdGV4dF9iZ3MgPSB0aGlzLmJnX2dyb3VwLmNoaWxkcmVuLmZpbHRlcigoYmc6IFBoYXNlci5HcmFwaGljcykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGJnLmFsaXZlID09PSBmYWxzZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGRlYWRfdGV4dF9iZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgKGRlYWRfdGV4dF9iZ3NbMF0gYXMgUGhhc2VyLkdyYXBoaWNzKS5jbGVhcigpO1xuICAgICAgICAgICAgKGRlYWRfdGV4dF9iZ3NbMF0gYXMgUGhhc2VyLkdyYXBoaWNzKS5iZWdpbkZpbGwoVEVYVF9CR19DT0xPUiwgMSk7XG4gICAgICAgICAgICAoZGVhZF90ZXh0X2Jnc1swXSBhcyBQaGFzZXIuR3JhcGhpY3MpLmRyYXdSZWN0KDAsIDAsIC0oc3ByaXRlLmhlaWdodCArIDEpLCAtKHNwcml0ZS53aWR0aCArIDEpKTtcbiAgICAgICAgICAgIChkZWFkX3RleHRfYmdzWzBdIGFzIFBoYXNlci5HcmFwaGljcykuZW5kRmlsbCgpO1xuICAgICAgICAgICAgKGRlYWRfdGV4dF9iZ3NbMF0gYXMgUGhhc2VyLkdyYXBoaWNzKS5yZXNldChpbmRleCAqIExJTkVfU0hJRlQsIDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGJnID0gdGhpcy5nYW1lLmFkZC5ncmFwaGljcyhpbmRleCAqIExJTkVfU0hJRlQsIDApO1xuICAgICAgICAgICAgYmcuYmVnaW5GaWxsKFRFWFRfQkdfQ09MT1IsIDEpO1xuICAgICAgICAgICAgYmcuZHJhd1JlY3QoMCwgMCwgLShzcHJpdGUuaGVpZ2h0ICsgMSksIC0oc3ByaXRlLndpZHRoICsgMSkpO1xuICAgICAgICAgICAgYmcuZW5kRmlsbCgpO1xuICAgICAgICAgICAgdGhpcy5iZ19ncm91cC5hZGQoYmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5nYW1lLndvcmxkLmJyaW5nVG9Ub3AodGhpcy50ZXh0X2dyb3VwKTtcbiAgICB9XG5cbiAgICAvKlNwbGl0cyB0aGUgc2hvcGtlZXBlcidzIHdhcmVzIGludG8gcGFnZXMqL1xuICAgIG1ha2VfcGFnZXMoKSB7XG4gICAgICAgIGxldCBpdGVtc19sZW5ndGggPSBPYmplY3Qua2V5cyh0aGlzLml0ZW1zKS5sZW5ndGg7XG4gICAgICAgIGxldCBrZXlzID0gQXJyYXkuZnJvbShPYmplY3Qua2V5cyh0aGlzLml0ZW1zKSk7XG4gICAgICAgIGxldCBwYWdlX251bWJlciA9XG4gICAgICAgICAgICBpdGVtc19sZW5ndGggJSBNQVhfUEVSX1BBR0UgPT09IDBcbiAgICAgICAgICAgICAgICA/IChpdGVtc19sZW5ndGggLyBNQVhfUEVSX1BBR0UpIHwgMFxuICAgICAgICAgICAgICAgIDogKChpdGVtc19sZW5ndGggLyBNQVhfUEVSX1BBR0UpIHwgMCkgKyAxO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFnZV9udW1iZXI7IGkrKykge1xuICAgICAgICAgICAgbGV0IHdhcmVzID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBuID0gaSAqIE1BWF9QRVJfUEFHRTsgbiA8IChpICsgMSkgKiBNQVhfUEVSX1BBR0U7IG4rKykge1xuICAgICAgICAgICAgICAgIGlmICgha2V5c1tuXSkgYnJlYWs7XG4gICAgICAgICAgICAgICAgd2FyZXMucHVzaCh0aGlzLml0ZW1zW2tleXNbbl1dKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucGFnZXNbaV0gPSB3YXJlcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qRGlzcGxheXMgdGhlIHNwcml0ZXMgZm9yIHRoZSB3aW5kb3dcblxuICAgIElucHV0OiBwYWdlIFtudW1iZXJdIC0gVGhlIGl0ZW0gcGFnZSBpbmRleCovXG4gICAgc2V0X3Nwcml0ZXMocGFnZTogbnVtYmVyKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wYWdlc1twYWdlXS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGRlYWRfaXRlbXMgPSB0aGlzLnNwcml0ZV9ncm91cC5jaGlsZHJlbi5maWx0ZXIoKHM6IFBoYXNlci5TcHJpdGUpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcy5hbGl2ZSA9PT0gZmFsc2UgJiYgcy5rZXkgPT09IFwiaXRlbXNfaWNvbnNcIjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGV0IGRlYWRfYmFja2dyb3VuZHMgPSB0aGlzLnNwcml0ZV9ncm91cC5jaGlsZHJlbi5maWx0ZXIoKHM6IFBoYXNlci5TcHJpdGUpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcy5hbGl2ZSA9PT0gZmFsc2UgJiYgcy5rZXkgPT09IFwiaXRlbV9ib3JkZXJcIjtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoZGVhZF9pdGVtcy5sZW5ndGggPiAwICYmIGRlYWRfYmFja2dyb3VuZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIChkZWFkX2JhY2tncm91bmRzWzBdIGFzIFBoYXNlci5TcHJpdGUpLnJlc2V0KGkgKiBMSU5FX1NISUZULCAwKTtcbiAgICAgICAgICAgICAgICBkZWFkX2JhY2tncm91bmRzWzBdLnNjYWxlLnggPSAxO1xuICAgICAgICAgICAgICAgIGRlYWRfYmFja2dyb3VuZHNbMF0uc2NhbGUueSA9IDE7XG4gICAgICAgICAgICAgICAgKGRlYWRfaXRlbXNbMF0gYXMgUGhhc2VyLlNwcml0ZSkuZnJhbWVOYW1lID0gdGhpcy5wYWdlc1twYWdlXVtpXS5rZXlfbmFtZTtcbiAgICAgICAgICAgICAgICBkZWFkX2l0ZW1zWzBdLnNjYWxlLnggPSAxO1xuICAgICAgICAgICAgICAgIGRlYWRfaXRlbXNbMF0uc2NhbGUueSA9IDE7XG4gICAgICAgICAgICAgICAgKGRlYWRfaXRlbXNbMF0gYXMgUGhhc2VyLlNwcml0ZSkucmVzZXQoaSAqIExJTkVfU0hJRlQsIDApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNwcml0ZV9ncm91cC5jcmVhdGUoaSAqIExJTkVfU0hJRlQsIDAsIFwiaXRlbV9ib3JkZXJcIikuYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcbiAgICAgICAgICAgICAgICB0aGlzLnNwcml0ZV9ncm91cFxuICAgICAgICAgICAgICAgICAgICAuY3JlYXRlKGkgKiBMSU5FX1NISUZULCAwLCBcIml0ZW1zX2ljb25zXCIsIHRoaXMucGFnZXNbcGFnZV1baV0ua2V5X25hbWUpXG4gICAgICAgICAgICAgICAgICAgIC5hbmNob3Iuc2V0VG8oMC41LCAwLjUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgZGVhZF90YWdzID0gdGhpcy50YWdfZ3JvdXAuY2hpbGRyZW4uZmlsdGVyKCh0OiBQaGFzZXIuU3ByaXRlKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQuYWxpdmUgPT09IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoZGVhZF90YWdzLmxlbmd0aCA+IDApIChkZWFkX3RhZ3NbMF0gYXMgUGhhc2VyLlNwcml0ZSkucmVzZXQoaSAqIExJTkVfU0hJRlQsIDApO1xuICAgICAgICAgICAgZWxzZSB0aGlzLnRhZ19ncm91cC5jcmVhdGUoaSAqIExJTkVfU0hJRlQsIDAsIFwicHJpY2VfdGFnXCIpO1xuXG4gICAgICAgICAgICBsZXQgcHJpY2UgPSB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W3RoaXMucGFnZXNbcGFnZV1baV0ua2V5X25hbWVdLnByaWNlO1xuICAgICAgICAgICAgdGhpcy5zZXRfdGV4dChwcmljZS50b1N0cmluZygpLCBpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldF9pdGVtKHRoaXMuc2VsZWN0ZWRfaW5kZXggJSBNQVhfUEVSX1BBR0UpO1xuICAgIH1cblxuICAgIC8qRGlzcGxheXMgYSBzcGVjaWZpYyBwYWdlIG9mIGl0ZW1zXG5cbiAgICBJbnB1dDogaW5kZXggW251bWJlcl0gLSBJbmRleCBvZiB0aGUgcGFnZSB0byBiZSBkaXNwbGF5ZWQqL1xuICAgIGNoYW5nZV9wYWdlKHBhZ2U6IG51bWJlciwgZm9yY2VfaW5kZXg/OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHRoaXMucGFnZXMubGVuZ3RoID09PSAxKSByZXR1cm47XG4gICAgICAgIHRoaXMuY2xlYXJfYXJyb3dfdHdlZW5zKCk7XG5cbiAgICAgICAgbGV0IGl0ZW1zX2xlbmd0aCA9IE9iamVjdC5rZXlzKHRoaXMuaXRlbXMpLmxlbmd0aDtcbiAgICAgICAgaWYgKGl0ZW1zX2xlbmd0aCA8IE1BWF9QRVJfUEFHRSAqIHBhZ2UpIHJldHVybjtcblxuICAgICAgICB0aGlzLmN1cnJlbnRfcGFnZSA9IHBhZ2U7XG5cbiAgICAgICAgaWYgKGZvcmNlX2luZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfaW5kZXggPSBmb3JjZV9pbmRleDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnNlbGVjdGVkX2luZGV4ICE9PSBudWxsICYmIHRoaXMuc2VsZWN0ZWRfaW5kZXggPj0gdGhpcy5wYWdlc1t0aGlzLmN1cnJlbnRfcGFnZV0ubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2luZGV4ID0gdGhpcy5wYWdlc1t0aGlzLmN1cnJlbnRfcGFnZV0ubGVuZ3RoIC0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGtpbGxfYWxsX3Nwcml0ZXModGhpcy5zcHJpdGVfZ3JvdXApO1xuICAgICAgICBraWxsX2FsbF9zcHJpdGVzKHRoaXMudGFnX2dyb3VwKTtcbiAgICAgICAga2lsbF9hbGxfc3ByaXRlcyh0aGlzLnRleHRfZ3JvdXApO1xuICAgICAgICBraWxsX2FsbF9zcHJpdGVzKHRoaXMuYmdfZ3JvdXApO1xuICAgICAgICB0aGlzLnVuc2V0X2l0ZW0odGhpcy5zZWxlY3RlZF9pbmRleCk7XG4gICAgICAgIHRoaXMuc2V0X3Nwcml0ZXMocGFnZSk7XG4gICAgICAgIHRoaXMuY2hlY2tfYXJyb3dzKCk7XG4gICAgICAgIHRoaXMuY2hhbmdlX2l0ZW0odGhpcy5zZWxlY3RlZF9pbmRleCk7XG4gICAgfVxuXG4gICAgZ3JhbnRfY29udHJvbChvbl9jYW5jZWw6IEZ1bmN0aW9uLCBvbl9zZWxlY3Q6IEZ1bmN0aW9uKSB7XG4gICAgICAgIGxldCBjb250cm9scyA9IFtcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkxFRlQsIG9uX2Rvd246IHRoaXMucHJldmlvdXNfaXRlbS5iaW5kKHRoaXMpfSxcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLlJJR0hULCBvbl9kb3duOiB0aGlzLm5leHRfaXRlbS5iaW5kKHRoaXMpfSxcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLlVQLCBvbl9kb3duOiB0aGlzLnByZXZpb3VzX3BhZ2UuYmluZCh0aGlzKX0sXG4gICAgICAgICAgICB7a2V5OiB0aGlzLmRhdGEuZ2FtZXBhZC5ET1dOLCBvbl9kb3duOiB0aGlzLm5leHRfcGFnZS5iaW5kKHRoaXMpfSxcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkEsIG9uX2Rvd246IG9uX3NlbGVjdCwgcGFyYW1zOiB7cmVzZXRfY29udHJvbDogdHJ1ZX19LFxuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuQiwgb25fZG93bjogb25fY2FuY2VsLCBwYXJhbXM6IHtyZXNldF9jb250cm9sOiB0cnVlfX0sXG4gICAgICAgIF07XG4gICAgICAgIHRoaXMuZGF0YS5jb250cm9sX21hbmFnZXIuc2V0X2NvbnRyb2woY29udHJvbHMsIHtsb29wX2NvbmZpZ3M6IHtob3Jpem9udGFsOiB0cnVlfX0pO1xuICAgIH1cblxuICAgIC8qQ2hhbmdlcyB0byB0aGUgbmV4dCBpdGVtIHBhZ2VcbiAgICBVc2VkIGFzIGEgY2FsbGJhY2sgZm9yIGNvbnRyb2xzKi9cbiAgICBuZXh0X3BhZ2UoZm9yY2VfaW5kZXg/OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHRoaXMucGFnZXMubGVuZ3RoID09PSAxIHx8IHRoaXMuY3VycmVudF9wYWdlICsgMSA9PT0gdGhpcy5wYWdlcy5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5jdXJyZW50X3BhZ2UgKyAxO1xuXG4gICAgICAgIHRoaXMuY2hhbmdlX3BhZ2UoaW5kZXgsIGZvcmNlX2luZGV4KTtcbiAgICB9XG5cbiAgICAvKkNoYW5nZXMgdG8gdGhlIHByZXZpb3VzIGl0ZW0gcGFnZVxuICAgIFVzZWQgYXMgYSBjYWxsYmFjayBmb3IgY29udHJvbHMqL1xuICAgIHByZXZpb3VzX3BhZ2UoZm9yY2VfaW5kZXg/OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHRoaXMucGFnZXMubGVuZ3RoID09PSAxIHx8IHRoaXMuY3VycmVudF9wYWdlIC0gMSA8IDApIHJldHVybjtcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5jdXJyZW50X3BhZ2UgLSAxO1xuXG4gICAgICAgIHRoaXMuY2hhbmdlX3BhZ2UoaW5kZXgsIGZvcmNlX2luZGV4KTtcbiAgICB9XG5cbiAgICAvKlNlbGVjdHMgYSBzcGVjaWZpYyBpdGVtIG9uIHNjcmVlblxuXG4gICAgSW5wdXQ6IHN0ZXAgW251bWJlcl0gLSBTdGVwIGluZGV4IGZvciBuZXcgaXRlbSBzZWxlY3Rpb24qL1xuICAgIGNoYW5nZV9pdGVtKGluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy51bnNldF9pdGVtKHRoaXMuc2VsZWN0ZWRfaW5kZXgpO1xuXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfaW5kZXggPSBpbmRleDtcblxuICAgICAgICB0aGlzLnNldF9pdGVtKHRoaXMuc2VsZWN0ZWRfaW5kZXgpO1xuICAgICAgICB0aGlzLnNldF9jdXJzb3IodGhpcy5zZWxlY3RlZF9pbmRleCk7XG4gICAgICAgIHRoaXMub25fY2hhbmdlKHRoaXMucGFnZXNbdGhpcy5jdXJyZW50X3BhZ2VdW3RoaXMuc2VsZWN0ZWRfaW5kZXhdLmtleV9uYW1lKTtcbiAgICB9XG5cbiAgICAvKlJldHVybnMgdGhlIGl0ZW0gd2l0aCB0aGUgbmV4dCBpbmRleFxuICAgIEN5Y2xlcyB0byBuZXh0IHBhZ2UgaWYgbmVjZXNzYXJ5XG4gICAgVXNlZCBhcyBhIGNhbGxiYWNrIGZvciBjb250cm9scyovXG4gICAgbmV4dF9pdGVtKCkge1xuICAgICAgICBpZiAodGhpcy5wYWdlc1t0aGlzLmN1cnJlbnRfcGFnZV0ubGVuZ3RoID09PSAxICYmIHRoaXMucGFnZXMubGVuZ3RoID09PSAxKSByZXR1cm47XG5cbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRfaW5kZXggKyAxID09PSB0aGlzLnBhZ2VzW3RoaXMuY3VycmVudF9wYWdlXS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRfcGFnZSArIDEgPT09IHRoaXMucGFnZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucGFnZXMubGVuZ3RoID09PSAxKSB0aGlzLmNoYW5nZV9pdGVtKDApO1xuICAgICAgICAgICAgICAgIGVsc2UgdGhpcy5jaGFuZ2VfcGFnZSgwLCAwKTtcbiAgICAgICAgICAgIH0gZWxzZSB0aGlzLm5leHRfcGFnZSgwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlX2l0ZW0odGhpcy5zZWxlY3RlZF9pbmRleCArIDEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypSZXR1cm5zIHRoZSBpdGVtIHdpdGggdGhlIHByZXZpb3VzIGluZGV4XG4gICAgQ3ljbGVzIHRvIHByZXZpb3VzIHBhZ2UgaWYgbmVjZXNzYXJ5XG4gICAgVXNlZCBhcyBhIGNhbGxiYWNrIGZvciBjb250cm9scyovXG4gICAgcHJldmlvdXNfaXRlbSgpIHtcbiAgICAgICAgaWYgKHRoaXMucGFnZXNbdGhpcy5jdXJyZW50X3BhZ2VdLmxlbmd0aCA9PT0gMSAmJiB0aGlzLnBhZ2VzLmxlbmd0aCA9PT0gMSkgcmV0dXJuO1xuXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkX2luZGV4IC0gMSA8IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRfcGFnZSAtIDEgPCAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucGFnZXMubGVuZ3RoID09PSAxKSB0aGlzLmNoYW5nZV9pdGVtKHRoaXMucGFnZXNbdGhpcy5jdXJyZW50X3BhZ2VdLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICAgIGVsc2UgdGhpcy5jaGFuZ2VfcGFnZSh0aGlzLnBhZ2VzLmxlbmd0aCAtIDEsIHRoaXMucGFnZXNbdGhpcy5wYWdlcy5sZW5ndGggLSAxXS5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIH0gZWxzZSB0aGlzLnByZXZpb3VzX3BhZ2UodGhpcy5wYWdlc1t0aGlzLmN1cnJlbnRfcGFnZSAtIDFdLmxlbmd0aCAtIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VfaXRlbSh0aGlzLnNlbGVjdGVkX2luZGV4IC0gMSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKlNldHMgdGhlIHNjYWxpbmcgYW5pbWF0aW9uIGZvciB0aGUgc2VsZWN0ZWQgaXRlbVxuXG4gICAgSW5wdXQ6IGluZGV4IFtudW1iZXJdIC0gSXRlbSBpbmRleCAob24gc2NyZWVuKSovXG4gICAgc2V0X2l0ZW0oaW5kZXg6IG51bWJlcikge1xuICAgICAgICB0aGlzLmdhbWUud29ybGQuYnJpbmdUb1RvcCh0aGlzLnNwcml0ZV9ncm91cCk7XG4gICAgICAgIHRoaXMuZGF0YS5jdXJzb3JfbWFuYWdlci5icmluZ190b190b3AoKTtcbiAgICAgICAgbGV0IGl0bV9saXN0ID0gdGhpcy5zcHJpdGVfZ3JvdXAuY2hpbGRyZW4uZmlsdGVyKChzOiBQaGFzZXIuU3ByaXRlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcy5hbGl2ZSA9PT0gdHJ1ZSAmJiBzLmtleSA9PT0gXCJpdGVtc19pY29uc1wiO1xuICAgICAgICB9KTtcbiAgICAgICAgbGV0IGJnX2xpc3QgPSB0aGlzLnNwcml0ZV9ncm91cC5jaGlsZHJlbi5maWx0ZXIoKHM6IFBoYXNlci5TcHJpdGUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBzLmFsaXZlID09PSB0cnVlICYmIHMua2V5ID09PSBcIml0ZW1fYm9yZGVyXCI7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCB0d2VlbnMgPSBbdGhpcy50d2VlbnMuaXRlbSwgdGhpcy50d2VlbnMuYmddO1xuICAgICAgICBsZXQgbGlzdHMgPSBbaXRtX2xpc3QsIGJnX2xpc3RdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjsgaSsrKSB7XG4gICAgICAgICAgICB0d2VlbnNbaV0gPSB0aGlzLmdhbWUuYWRkXG4gICAgICAgICAgICAgICAgLnR3ZWVuKGxpc3RzW2ldW2luZGV4XS5zY2FsZSlcbiAgICAgICAgICAgICAgICAudG8oe3g6IDEuNTUsIHk6IDEuNTV9LCBTRUxFQ1RfVFdFRU5fVElNRSwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSwgdHJ1ZSwgMCwgLTEsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudHdlZW5zID0ge2l0ZW06IHR3ZWVuc1swXSwgYmc6IHR3ZWVuc1sxXX07XG4gICAgfVxuXG4gICAgLypDaGVja3Mgd2V0aGVyIHRoaXMgaXMgdGhlIGxhc3QgaXRlbSBvbiB0aGUgbGlzdFxuXG4gICAgSW5wdXQ6IHBhZ2VbbnVtYmVyXSAtIFRoZSBpdGVtJ3MgcGFnZVxuICAgICAgICAgICBpbmRleFtudW1iZXJdIC0gVGhlIGl0ZW0ncyBpbmRleFxuICAgIFxuICAgIE91dHB1dDogW2Jvb2xlYW5dIC0gVHJ1ZSBpZiBsYXN0LCBmYWxzZSBvdGhlcndpc2UqL1xuICAgIGlzX2xhc3QocGFnZTogbnVtYmVyLCBpbmRleDogbnVtYmVyKSB7XG4gICAgICAgIGlmIChwYWdlID09PSB0aGlzLnBhZ2VzLmxlbmd0aCAtIDEgJiYgaW5kZXggPT09IHRoaXMucGFnZXNbcGFnZV0ubGVuZ3RoIC0gMSkgcmV0dXJuIHRydWU7XG4gICAgICAgIGVsc2UgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qUmVtb3ZlcyB0aGUgc2NhbGluZyBhbmltYXRpb24gZnJvbSB0aGUgc2VsZWN0ZWQgaXRlbVxuXG4gICAgSW5wdXQ6IGluZGV4IFtudW1iZXJdIC0gSXRlbSBpbmRleCAob24gc2NyZWVuKSovXG4gICAgdW5zZXRfaXRlbShpbmRleDogbnVtYmVyKSB7XG4gICAgICAgIGxldCBpdG1fbGlzdCA9IHRoaXMuc3ByaXRlX2dyb3VwLmNoaWxkcmVuLmZpbHRlcigoczogUGhhc2VyLlNwcml0ZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHMuYWxpdmUgPT09IHRydWUgJiYgcy5rZXkgPT09IFwiaXRlbXNfaWNvbnNcIjtcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBiZ19saXN0ID0gdGhpcy5zcHJpdGVfZ3JvdXAuY2hpbGRyZW4uZmlsdGVyKChzOiBQaGFzZXIuU3ByaXRlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcy5hbGl2ZSA9PT0gdHJ1ZSAmJiBzLmtleSA9PT0gXCJpdGVtX2JvcmRlclwiO1xuICAgICAgICB9KTtcblxuICAgICAgICBsZXQgdHdlZW5zID0gW3RoaXMudHdlZW5zLml0ZW0sIHRoaXMudHdlZW5zLmJnXTtcbiAgICAgICAgbGV0IGxpc3RzID0gW2l0bV9saXN0LCBiZ19saXN0XTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDI7IGkrKykge1xuICAgICAgICAgICAgaWYgKGxpc3RzW2ldW2luZGV4XSkge1xuICAgICAgICAgICAgICAgIChsaXN0c1tpXVtpbmRleF0gYXMgUGhhc2VyLlNwcml0ZSkuc2NhbGUuc2V0VG8oMS4wLCAxLjApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR3ZWVuc1tpXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS50d2VlbnMucmVtb3ZlKHR3ZWVuc1tpXSk7XG4gICAgICAgICAgICAgICAgdHdlZW5zW2ldID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qU2V0cyB0aGUgY3Vyc29yIHRvIHRoZSBjdXJyZW50IGl0ZW0ncyBpbmRleFxuXG4gICAgSW5wdXQ6IGluZGV4IFtudW1iZXJdIC0gU2VsZWN0ZWQgaXRlbSdzIGluZGV4Ki9cbiAgICBzZXRfY3Vyc29yKGluZGV4OiBudW1iZXIsIG9uX2NvbXBsZXRlPzogRnVuY3Rpb24pIHtcbiAgICAgICAgbGV0IGN1cnNvcl94ID0gQ1VSU09SX1ggKyBpbmRleCAqIExJTkVfU0hJRlQ7XG4gICAgICAgIGxldCBjdXJzb3JfeSA9IENVUlNPUl9ZO1xuICAgICAgICB0aGlzLmRhdGEuY3Vyc29yX21hbmFnZXIubW92ZV90byhcbiAgICAgICAgICAgIHt4OiBjdXJzb3JfeCwgeTogY3Vyc29yX3l9LFxuICAgICAgICAgICAge2FuaW1hdGU6IGZhbHNlLCB0d2Vlbl9jb25maWc6IHt0eXBlOiBDdXJzb3JNYW5hZ2VyLkN1cnNvclR3ZWVucy5QT0lOVCwgdmFyaWFudDogUG9pbnRWYXJpYW50cy5MT05HfX0sXG4gICAgICAgICAgICBvbl9jb21wbGV0ZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qT3BlbnMgdGhpcyB3aW5kb3cgYXQgcGFnZSAwXG5cbiAgICBJbnB1dDogaXRlbXMgW2FycmF5XSAtIFRoZSBpdGVtIGxpc3QgdG8gZGlzcGxheSAoYXJyYXkgb2YgSXRlbSlcbiAgICAgICAgICAgaW5kZXggW251bWJlcl0gLSBJbml0aWFsIHNlbGVjdGVkIGl0ZW0gaW5kZXhcbiAgICAgICAgICAgcGFnZSBbbnVtYmVyXSAtIEluaXRpYWwgc2VsZWN0ZWQgcGFnZSBpbmRleFxuICAgICAgICAgICBvcGVuX2NhbGxiYWNrIFtmdW5jdGlvbl0gLSBDYWxsYmFjayBmdW5jdGlvbiAoT3B0aW9uYWwpKi9cbiAgICBvcGVuKGl0ZW1zOiB7W2tleV9uYW1lOiBzdHJpbmddOiBTaG9wSXRlbX0sIGluZGV4OiBudW1iZXIgPSAwLCBwYWdlOiBudW1iZXIgPSAwLCBvcGVuX2NhbGxiYWNrPzogRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5pdGVtcyA9IGl0ZW1zO1xuICAgICAgICB0aGlzLmN1cnJlbnRfcGFnZSA9IHBhZ2U7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfaW5kZXggPSBpbmRleDtcbiAgICAgICAgdGhpcy5pc19vcGVuID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5tYWtlX3BhZ2VzKCk7XG5cbiAgICAgICAgdGhpcy5jaGVja19hcnJvd3MoKTtcbiAgICAgICAgdGhpcy5zZXRfc3ByaXRlcyh0aGlzLmN1cnJlbnRfcGFnZSk7XG4gICAgICAgIHRoaXMuc2V0X2N1cnNvcih0aGlzLnNlbGVjdGVkX2luZGV4KTtcbiAgICAgICAgdGhpcy51cGRhdGVfZ3JvdXBfcG9zKCk7XG5cbiAgICAgICAgdGhpcy53aW5kb3cuc2hvdyhvcGVuX2NhbGxiYWNrLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgLypDbGVhcnMgaW5mb3JtYXRpb24gYW5kIGNsb3NlcyB0aGUgd2luZG93XG5cbiAgICBJbnB1dDogZGVzdHJveSBbYm9vbGVhbl0gLSBJZiB0cnVlLCBzcHJpdGVzIGFyZSBkZXN0cm95ZWQqL1xuICAgIGNsb3NlKGNhbGxiYWNrPzogRnVuY3Rpb24sIGRlc3Ryb3k6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICB0aGlzLnVuc2V0X2l0ZW0odGhpcy5zZWxlY3RlZF9pbmRleCk7XG5cbiAgICAgICAga2lsbF9hbGxfc3ByaXRlcyh0aGlzLnNwcml0ZV9ncm91cCwgZGVzdHJveSk7XG4gICAgICAgIGtpbGxfYWxsX3Nwcml0ZXModGhpcy50YWdfZ3JvdXAsIGRlc3Ryb3kpO1xuICAgICAgICBraWxsX2FsbF9zcHJpdGVzKHRoaXMudGV4dF9ncm91cCwgZGVzdHJveSk7XG4gICAgICAgIGtpbGxfYWxsX3Nwcml0ZXModGhpcy5iZ19ncm91cCwgZGVzdHJveSk7XG5cbiAgICAgICAgdGhpcy5pdGVtcyA9IHt9O1xuICAgICAgICB0aGlzLnBhZ2VzID0gW107XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfaW5kZXggPSAwO1xuICAgICAgICB0aGlzLmN1cnJlbnRfcGFnZSA9IDA7XG4gICAgICAgIHRoaXMuaXNfb3BlbiA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuc2V0X2Fycm93cyhmYWxzZSwgZmFsc2UpO1xuXG4gICAgICAgIHRoaXMud2luZG93LmNsb3NlKGNhbGxiYWNrLCBmYWxzZSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtXaW5kb3csIFRleHRPYmp9IGZyb20gXCIuLi8uLi9XaW5kb3dcIjtcbmltcG9ydCB7a2lsbF9hbGxfc3ByaXRlc30gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5pbXBvcnQge2l0ZW1fdHlwZXN9IGZyb20gXCIuLi8uLi9JdGVtXCI7XG5pbXBvcnQge2VmZmVjdF9vcGVyYXRvcnMsIGVmZmVjdF90eXBlc30gZnJvbSBcIi4uLy4uL0VmZmVjdFwiO1xuaW1wb3J0IHtHb2xkZW5TdW59IGZyb20gXCIuLi8uLi9Hb2xkZW5TdW5cIjtcbmltcG9ydCB7TWFpbkNoYXJ9IGZyb20gXCIuLi8uLi9NYWluQ2hhclwiO1xuaW1wb3J0IHtlZmZlY3RfdHlwZV9zdGF0LCBtYWluX3N0YXRzfSBmcm9tIFwiLi4vLi4vUGxheWVyXCI7XG5pbXBvcnQgKiBhcyBfIGZyb20gXCJsb2Rhc2hcIjtcblxuY29uc3QgQkFTRV9YID0gMTI4O1xuY29uc3QgQkFTRV9ZID0gODg7XG5jb25zdCBCQVNFX1dJRFRIID0gMTA4O1xuY29uc3QgQkFTRV9IRUlHSFQgPSA2ODtcblxuY29uc3QgQ0FOVF9FUVVJUF9YID0gMTQ7XG5jb25zdCBDQU5UX0VRVUlQX1kgPSAzMjtcblxuY29uc3QgVFhUX0dST1VQX1ggPSA4O1xuY29uc3QgVFhUX0dST1VQX1kgPSA4O1xuXG5jb25zdCBMSU5FX1NISUZUID0gMTY7XG5cbmNvbnN0IENVUlJfU1RBVF9FTkRfWCA9IDUzO1xuY29uc3QgTkVXX1NUQVRfRU5EX1ggPSBDVVJSX1NUQVRfRU5EX1ggKyA0MDtcblxuY29uc3QgQVJST1dfWCA9IDY1O1xuY29uc3QgQVJST1dfWSA9IDc7XG5jb25zdCBVUF9BUlJPV19ZX1NISUZUID0gLTE7XG5cbmNvbnN0IFNFUEFSQVRPUl9YID0gNDtcbmNvbnN0IFNFUEFSQVRPUl9ZID0gMTk7XG5jb25zdCBTRVBBUkFUT1JfTEVOR1RIID0gMTA0O1xuXG5jb25zdCBTRVBBUkFUT1JfQ09VTlQgPSAzO1xuXG4vKkNvbXBhcmVzIHRoZSBjaGFyYWN0ZXIncyBlcXVpcHBlZCBpdGVtIHdpdGggYW5vdGhlciBpdGVtXG5Vc2VkIGluIHNob3AgbWVudXMuIFdpbGwgc2hvdyBzdGF0IGRpZmZlcmVuY2VzXG5cbklucHV0OiBnYW1lIFtQaGFzZXI6R2FtZV0gLSBSZWZlcmVuY2UgdG8gdGhlIHJ1bm5pbmcgZ2FtZSBvYmplY3RcbiAgICAgICBkYXRhIFtHb2xkZW5TdW5dIC0gUmVmZXJlbmNlIHRvIHRoZSBtYWluIEpTIENsYXNzIGluc3RhbmNlKi9cbmV4cG9ydCBjbGFzcyBFcXVpcENvbXBhcmUge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgZGF0YTogR29sZGVuU3VuO1xuXG4gICAgcHVibGljIHNlbGVjdGVkX2l0ZW06IHN0cmluZztcbiAgICBwdWJsaWMgc2VsZWN0ZWRfY2hhcjogTWFpbkNoYXI7XG4gICAgcHVibGljIGlzX29wZW46IGJvb2xlYW47XG4gICAgcHVibGljIHdpbmRvdzogV2luZG93O1xuICAgIHB1YmxpYyB0ZXh0X2dyb3VwOiBQaGFzZXIuR3JvdXA7XG4gICAgcHVibGljIGFycm93X2dyb3VwOiBQaGFzZXIuR3JvdXA7XG5cbiAgICBwdWJsaWMgY2FudF9lcXVpcF90ZXh0OiBUZXh0T2JqO1xuICAgIHB1YmxpYyBhdGtfbGFiZWxfdGV4dDogVGV4dE9iajtcbiAgICBwdWJsaWMgZGVmX2xhYmVsX3RleHQ6IFRleHRPYmo7XG4gICAgcHVibGljIGFnaV9sYWJlbF90ZXh0OiBUZXh0T2JqO1xuICAgIHB1YmxpYyBpdGVtX25hbWVfdGV4dDogVGV4dE9iajtcblxuICAgIHB1YmxpYyBjdXJyX2F0a190ZXh0OiBUZXh0T2JqO1xuICAgIHB1YmxpYyBjdXJyX2RlZl90ZXh0OiBUZXh0T2JqO1xuICAgIHB1YmxpYyBjdXJyX2FnaV90ZXh0OiBUZXh0T2JqO1xuXG4gICAgcHVibGljIG5ld19hdGtfdGV4dDogVGV4dE9iajtcbiAgICBwdWJsaWMgbmV3X2RlZl90ZXh0OiBUZXh0T2JqO1xuICAgIHB1YmxpYyBuZXdfYWdpX3RleHQ6IFRleHRPYmo7XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lOiBQaGFzZXIuR2FtZSwgZGF0YTogR29sZGVuU3VuKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG5cbiAgICAgICAgdGhpcy5zZWxlY3RlZF9pdGVtID0gbnVsbDtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc19vcGVuID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy53aW5kb3cgPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgQkFTRV9YLCBCQVNFX1ksIEJBU0VfV0lEVEgsIEJBU0VfSEVJR0hUKTtcblxuICAgICAgICB0aGlzLnRleHRfZ3JvdXAgPSB0aGlzLndpbmRvdy5kZWZpbmVfaW50ZXJuYWxfZ3JvdXAoXCJ0ZXh0c1wiLCB7eDogVFhUX0dST1VQX1gsIHk6IFRYVF9HUk9VUF9ZfSk7XG4gICAgICAgIHRoaXMuYXJyb3dfZ3JvdXAgPSB0aGlzLndpbmRvdy5kZWZpbmVfaW50ZXJuYWxfZ3JvdXAoXCJhcnJvd3NcIiwge3g6IEFSUk9XX1gsIHk6IEFSUk9XX1l9KTtcblxuICAgICAgICB0aGlzLmNhbnRfZXF1aXBfdGV4dCA9IHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgXCJDYW4ndCBlcXVpcFwiLFxuICAgICAgICAgICAgQ0FOVF9FUVVJUF9YLFxuICAgICAgICAgICAgQ0FOVF9FUVVJUF9ZLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHRoaXMud2luZG93LmZvbnRfY29sb3IsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5jYW50X2VxdWlwX3RleHQudGV4dC5hbHBoYSA9IDA7XG4gICAgICAgIHRoaXMuY2FudF9lcXVpcF90ZXh0LnNoYWRvdy5hbHBoYSA9IDA7XG5cbiAgICAgICAgdGhpcy5hdGtfbGFiZWxfdGV4dCA9IHRoaXMuaW5pdF90ZXh0X3Nwcml0ZShcIkFUS1wiLCAwLCAwLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuZGVmX2xhYmVsX3RleHQgPSB0aGlzLmluaXRfdGV4dF9zcHJpdGUoXCJERUZcIiwgMCwgTElORV9TSElGVCwgZmFsc2UpO1xuICAgICAgICB0aGlzLmFnaV9sYWJlbF90ZXh0ID0gdGhpcy5pbml0X3RleHRfc3ByaXRlKFwiQUdMXCIsIDAsIDIgKiBMSU5FX1NISUZULCBmYWxzZSk7XG4gICAgICAgIHRoaXMuaXRlbV9uYW1lX3RleHQgPSB0aGlzLmluaXRfdGV4dF9zcHJpdGUoXCJcIiwgMCwgMyAqIExJTkVfU0hJRlQsIGZhbHNlKTtcblxuICAgICAgICB0aGlzLmN1cnJfYXRrX3RleHQgPSB0aGlzLmluaXRfdGV4dF9zcHJpdGUoXCJcIiwgQ1VSUl9TVEFUX0VORF9YLCAwLCB0cnVlKTtcbiAgICAgICAgdGhpcy5jdXJyX2RlZl90ZXh0ID0gdGhpcy5pbml0X3RleHRfc3ByaXRlKFwiXCIsIENVUlJfU1RBVF9FTkRfWCwgTElORV9TSElGVCwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuY3Vycl9hZ2lfdGV4dCA9IHRoaXMuaW5pdF90ZXh0X3Nwcml0ZShcIlwiLCBDVVJSX1NUQVRfRU5EX1gsIDIgKiBMSU5FX1NISUZULCB0cnVlKTtcblxuICAgICAgICB0aGlzLm5ld19hdGtfdGV4dCA9IHRoaXMuaW5pdF90ZXh0X3Nwcml0ZShcIlwiLCBORVdfU1RBVF9FTkRfWCwgMCwgdHJ1ZSk7XG4gICAgICAgIHRoaXMubmV3X2RlZl90ZXh0ID0gdGhpcy5pbml0X3RleHRfc3ByaXRlKFwiXCIsIE5FV19TVEFUX0VORF9YLCBMSU5FX1NISUZULCB0cnVlKTtcbiAgICAgICAgdGhpcy5uZXdfYWdpX3RleHQgPSB0aGlzLmluaXRfdGV4dF9zcHJpdGUoXCJcIiwgTkVXX1NUQVRfRU5EX1gsIDIgKiBMSU5FX1NISUZULCB0cnVlKTtcblxuICAgICAgICB0aGlzLnRleHRfZ3JvdXAuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLmFycm93X2dyb3VwLmFscGhhID0gMDtcbiAgICB9XG5cbiAgICAvKkluaXRpYWxpemVzIGEgdGV4dC1zaGFkb3cgcGFpclxuXG4gICAgSW5wdXQ6IHRleHQgW3N0cmluZ10gLSBUaGUgdGV4dCB0byBkaXNwbGF5XG4gICAgICAgICAgIHgsIHkgW251bWJlcl0gLSBUaGUgdGV4dCBwb3NpdGlvblxuICAgICAgICAgICByaWdodF9hbGlnbiAtIElmIHRydWUsIHRoZSB0ZXh0IHdpbGwgYmUgcmlnaHQtYWxpZ25lZCovXG4gICAgaW5pdF90ZXh0X3Nwcml0ZSh0ZXh0OiBzdHJpbmcsIHg6IG51bWJlciwgeTogbnVtYmVyLCByaWdodF9hbGlnbjogYm9vbGVhbikge1xuICAgICAgICBsZXQgdHh0ID0gdGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24odGV4dCwgeCwgeSwgcmlnaHRfYWxpZ24pO1xuICAgICAgICB0aGlzLndpbmRvdy5hZGRfdG9faW50ZXJuYWxfZ3JvdXAoXCJ0ZXh0c1wiLCB0eHQuc2hhZG93KTtcbiAgICAgICAgdGhpcy53aW5kb3cuYWRkX3RvX2ludGVybmFsX2dyb3VwKFwidGV4dHNcIiwgdHh0LnRleHQpO1xuICAgICAgICByZXR1cm4gdHh0O1xuICAgIH1cblxuICAgIC8qQ3JlYXRlcyBvciByZWN5Y2xlcyBhbiBhcnJvdyBzcHJpdGVcblxuICAgIElucHV0OiBkaWZmIFtudW1iZXJdIC0gU3RhdCBkaWZmZXJlbmNlLCBhZmZlY3RzIHRoZSBhcnJvdyB0eXBlXG4gICAgICAgICAgIGxpbmUgW251bWJlcl0gLSBMaW5lIGluZGV4IGZvciBkaXNwbGF5aW5nIHB1cnBvc2VzKi9cbiAgICBtYWtlX2Fycm93KGRpZmY6IG51bWJlciwgbGluZTogbnVtYmVyKSB7XG4gICAgICAgIGlmIChkaWZmID09PSAwKSByZXR1cm47XG5cbiAgICAgICAgbGV0IGFycm93X3ggPSAwO1xuICAgICAgICBsZXQgYXJyb3dfeSA9IExJTkVfU0hJRlQgKiBsaW5lICsgKGRpZmYgPiAwID8gVVBfQVJST1dfWV9TSElGVCA6IDApO1xuICAgICAgICBsZXQga2V5ID0gZGlmZiA+IDAgPyBcInVwX2Fycm93XCIgOiBcImRvd25fYXJyb3dcIjtcblxuICAgICAgICBsZXQgZGVhZF9hcnJvd3MgPSB0aGlzLmFycm93X2dyb3VwLmNoaWxkcmVuLmZpbHRlcigoYTogUGhhc2VyLlNwcml0ZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGEuYWxpdmUgPT09IGZhbHNlICYmIGEua2V5ID09PSBrZXk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoZGVhZF9hcnJvd3MubGVuZ3RoID4gMCkgKGRlYWRfYXJyb3dzWzBdIGFzIFBoYXNlci5TcHJpdGUpLnJlc2V0KGFycm93X3gsIGFycm93X3kpO1xuICAgICAgICBlbHNlIHRoaXMud2luZG93LmNyZWF0ZV9hdF9ncm91cChhcnJvd194LCBhcnJvd195LCBrZXksIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcImFycm93c1wiKTtcbiAgICB9XG5cbiAgICAvKkZpbmRzIHRoZSBzdGF0aXN0aWNhbCBkaWZmZXJlbmNlIGluIGEgc3RhdCBmb3IgdHdvIGl0ZW1zXG5cbiAgICBJbnB1dDogZXF1aXBwZWQgW3N0cmluZ10gLSBLZXkgbmFtZSBmb3IgdGhlIGVxdWlwcGVkIGl0ZW1cbiAgICAgICAgICAgbmV3X2l0ZW0gW3N0cmluZ10gLSBLZXkgbmFtZSBmb3IgdGhlIGl0ZW0gYmVpbmcgY29tcGFyZWRcbiAgICAgICAgICAgc3RhdCBbc3RyaW5nXSAtIFN0YXQgdG8gY29tcGFyZVxuICAgICAgICAgICBjdXJyZW50X3ZhbCBbbnVtYmVyXSAtIEN1cnJlbnQgdmFsdWUgb2YgdGhlIHN0YXQqL1xuICAgIGNvbXBhcmVfaXRlbXMoZXF1aXBwZWQ6IHN0cmluZywgbmV3X2l0ZW06IHN0cmluZywgc3RhdDogc3RyaW5nLCBjdXJyZW50X3ZhbDogbnVtYmVyKSB7XG4gICAgICAgIGxldCBlcV9lZmZlY3RzID0ge307XG4gICAgICAgIGlmIChlcXVpcHBlZCkge1xuICAgICAgICAgICAgZXFfZWZmZWN0cyA9IF8ubWFwS2V5cyh0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W2VxdWlwcGVkXS5lZmZlY3RzLCBlZmZlY3QgPT4gZWZmZWN0LnR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBuaXRlbV9lZmZlY3RzID0gXy5tYXBLZXlzKHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbbmV3X2l0ZW1dLmVmZmVjdHMsIGVmZmVjdCA9PiBlZmZlY3QudHlwZSk7XG5cbiAgICAgICAgbGV0IGVxX3N0YXQgPSAwO1xuICAgICAgICBsZXQgbml0ZW1fc3RhdCA9IDA7XG5cbiAgICAgICAgaWYgKGVxX2VmZmVjdHNbc3RhdF0pIHtcbiAgICAgICAgICAgIHN3aXRjaCAoZXFfZWZmZWN0c1tzdGF0XS5vcGVyYXRvcikge1xuICAgICAgICAgICAgICAgIGNhc2UgZWZmZWN0X29wZXJhdG9ycy5QTFVTOlxuICAgICAgICAgICAgICAgICAgICBlcV9zdGF0ID0gZXFfZWZmZWN0c1tzdGF0XS5xdWFudGl0eTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBlZmZlY3Rfb3BlcmF0b3JzLk1JTlVTOlxuICAgICAgICAgICAgICAgICAgICBlcV9zdGF0ID0gLTEgKiBlcV9lZmZlY3RzW3N0YXRdLnF1YW50aXR5O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF9vcGVyYXRvcnMuVElNRVM6XG4gICAgICAgICAgICAgICAgICAgIGVxX3N0YXQgPSBlcV9lZmZlY3RzW3N0YXRdLnF1YW50aXR5ICogY3VycmVudF92YWw7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgZWZmZWN0X29wZXJhdG9ycy5ESVZJREU6XG4gICAgICAgICAgICAgICAgICAgIGVxX3N0YXQgPSAoZXFfZWZmZWN0c1tzdGF0XS5xdWFudGl0eSAvIGN1cnJlbnRfdmFsKSB8IDA7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChuaXRlbV9lZmZlY3RzW3N0YXRdKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKG5pdGVtX2VmZmVjdHNbc3RhdF0ub3BlcmF0b3IpIHtcbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF9vcGVyYXRvcnMuUExVUzpcbiAgICAgICAgICAgICAgICAgICAgbml0ZW1fc3RhdCA9IG5pdGVtX2VmZmVjdHNbc3RhdF0ucXVhbnRpdHk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgZWZmZWN0X29wZXJhdG9ycy5NSU5VUzpcbiAgICAgICAgICAgICAgICAgICAgbml0ZW1fc3RhdCA9IC0xICogbml0ZW1fZWZmZWN0c1tzdGF0XS5xdWFudGl0eTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBlZmZlY3Rfb3BlcmF0b3JzLlRJTUVTOlxuICAgICAgICAgICAgICAgICAgICBuaXRlbV9zdGF0ID0gbml0ZW1fZWZmZWN0c1tzdGF0XS5xdWFudGl0eSAqIGN1cnJlbnRfdmFsO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF9vcGVyYXRvcnMuRElWSURFOlxuICAgICAgICAgICAgICAgICAgICBuaXRlbV9zdGF0ID0gLShjdXJyZW50X3ZhbCAvIG5pdGVtX2VmZmVjdHNbc3RhdF0ucXVhbnRpdHkpIHwgMDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbml0ZW1fc3RhdCAtIGVxX3N0YXQ7XG4gICAgfVxuXG4gICAgLypVcGRhdGVzIHRoZSB0ZXh0IGFuZCBjcmVhdGVzIGFycm93cyBpZiBuZWNlc3NhcnlcbiAgICBcbiAgICBJbnB1dDogc3RhdCBbc3RyaW5nXSAtIFwiYXR0YWNrXCIsIFwiZGVmZW5zZVwiLCBcImFnaWxpdHlcIlxuICAgICAgICAgICBjdXJyX3ZhbCBbbnVtYmVyXSAtIFRoZSBjdXJyZW50IHN0YXRcbiAgICAgICAgICAgc3RhdF9kaWZmIFtudW1iZXJdIC0gU3RhdCBkaWZmZXJlbmNlKi9cbiAgICBkaXNwbGF5X3N0YXQoc3RhdDogc3RyaW5nLCBjdXJyX3ZhbDogbnVtYmVyLCBzdGF0X2RpZmY6IG51bWJlcikge1xuICAgICAgICBsZXQgbmV3X3N0YXRfdGV4dCA9IG51bGw7XG4gICAgICAgIGxldCBjdXJyX3N0YXRfdGV4dCA9IG51bGw7XG4gICAgICAgIGxldCBsaW5lID0gMDtcblxuICAgICAgICBzd2l0Y2ggKHN0YXQpIHtcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkFUVEFDSzpcbiAgICAgICAgICAgICAgICBuZXdfc3RhdF90ZXh0ID0gdGhpcy5uZXdfYXRrX3RleHQ7XG4gICAgICAgICAgICAgICAgY3Vycl9zdGF0X3RleHQgPSB0aGlzLmN1cnJfYXRrX3RleHQ7XG4gICAgICAgICAgICAgICAgbGluZSA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5ERUZFTlNFOlxuICAgICAgICAgICAgICAgIG5ld19zdGF0X3RleHQgPSB0aGlzLm5ld19kZWZfdGV4dDtcbiAgICAgICAgICAgICAgICBjdXJyX3N0YXRfdGV4dCA9IHRoaXMuY3Vycl9kZWZfdGV4dDtcbiAgICAgICAgICAgICAgICBsaW5lID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkFHSUxJVFk6XG4gICAgICAgICAgICAgICAgbmV3X3N0YXRfdGV4dCA9IHRoaXMubmV3X2FnaV90ZXh0O1xuICAgICAgICAgICAgICAgIGN1cnJfc3RhdF90ZXh0ID0gdGhpcy5jdXJyX2FnaV90ZXh0O1xuICAgICAgICAgICAgICAgIGxpbmUgPSAyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV3X3N0YXRfdGV4dC50ZXh0LmFscGhhID0gc3RhdF9kaWZmID09PSAwID8gMCA6IDE7XG4gICAgICAgIG5ld19zdGF0X3RleHQuc2hhZG93LmFscGhhID0gc3RhdF9kaWZmID09PSAwID8gMCA6IDE7XG4gICAgICAgIHRoaXMud2luZG93LnVwZGF0ZV90ZXh0KFN0cmluZyhjdXJyX3ZhbCksIGN1cnJfc3RhdF90ZXh0KTtcbiAgICAgICAgaWYgKHN0YXRfZGlmZiA9PT0gMCkgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMud2luZG93LnVwZGF0ZV90ZXh0KFN0cmluZyhjdXJyX3ZhbCArIHN0YXRfZGlmZiksIG5ld19zdGF0X3RleHQpO1xuICAgICAgICB0aGlzLm1ha2VfYXJyb3coc3RhdF9kaWZmLCBsaW5lKTtcbiAgICB9XG5cbiAgICAvKkNvbXBhcmUgdGhlIHNhbWUgaXRlbSBmb3IgYSBkaWZmZXJlbnQgY2hhcmFjdGVyKi9cbiAgICBjaGFuZ2VfY2hhcmFjdGVyKGtleV9uYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzLmZpbHRlcihjID0+IHtcbiAgICAgICAgICAgIHJldHVybiBjLmtleV9uYW1lID09PSBrZXlfbmFtZTtcbiAgICAgICAgfSlbMF07XG4gICAgICAgIGtpbGxfYWxsX3Nwcml0ZXModGhpcy5hcnJvd19ncm91cCk7XG5cbiAgICAgICAgdGhpcy5zaG93X3N0YXRfY29tcGFyZSgpO1xuICAgIH1cblxuICAgIC8qRGlzcGxheXMgdGhlIHN0YXQgY29tcGFyaXNvbiovXG4gICAgc2hvd19zdGF0X2NvbXBhcmUoKSB7XG4gICAgICAgIGlmICghdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFt0aGlzLnNlbGVjdGVkX2l0ZW1dLmVxdWlwYWJsZV9jaGFycy5pbmNsdWRlcyh0aGlzLnNlbGVjdGVkX2NoYXIua2V5X25hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dfY2FudF9lcXVpcCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jYW50X2VxdWlwX3RleHQudGV4dC5hbHBoYSA9IDA7XG4gICAgICAgIHRoaXMuY2FudF9lcXVpcF90ZXh0LnNoYWRvdy5hbHBoYSA9IDA7XG5cbiAgICAgICAgbGV0IHNlbGVjdGVkX2l0ZW1fdHlwZSA9IHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbdGhpcy5zZWxlY3RlZF9pdGVtXS50eXBlO1xuICAgICAgICBsZXQgY2hhcl9jdXJyZW50X2l0ZW0gPSBudWxsO1xuICAgICAgICBsZXQgZXFfc2xvdHMgPSB0aGlzLnNlbGVjdGVkX2NoYXIuZXF1aXBfc2xvdHM7XG5cbiAgICAgICAgbGV0IGVxX3R5cGVzID0gW1wiV0VBUE9OU1wiLCBcIkFSTU9SXCIsIFwiQ0hFU1RfUFJPVEVDVE9SXCIsIFwiSEVBRF9QUk9URUNUT1JcIiwgXCJSSU5HXCIsIFwiTEVHX1BST1RFQ1RPUlwiLCBcIlVOREVSV0VBUlwiXTtcbiAgICAgICAgbGV0IHNsb3RfdHlwZXMgPSBbXCJ3ZWFwb25cIiwgXCJib2R5XCIsIFwiY2hlc3RcIiwgXCJoZWFkXCIsIFwicmluZ1wiLCBcImJvb3RzXCIsIFwidW5kZXJ3ZWFyXCJdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXFfdHlwZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZF9pdGVtX3R5cGUgPT09IGl0ZW1fdHlwZXNbZXFfdHlwZXNbaV1dICYmIGVxX3Nsb3RzW3Nsb3RfdHlwZXNbaV1dKVxuICAgICAgICAgICAgICAgIGNoYXJfY3VycmVudF9pdGVtID0gdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFtlcV9zbG90c1tzbG90X3R5cGVzW2ldXS5rZXlfbmFtZV0ua2V5X25hbWU7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZGlmZnMgPSB7XG4gICAgICAgICAgICBbbWFpbl9zdGF0cy5BVFRBQ0tdOiAwLFxuICAgICAgICAgICAgW21haW5fc3RhdHMuREVGRU5TRV06IDAsXG4gICAgICAgICAgICBbbWFpbl9zdGF0cy5BR0lMSVRZXTogMCxcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IGxhYmVscyA9IFtlZmZlY3RfdHlwZXMuQVRUQUNLLCBlZmZlY3RfdHlwZXMuREVGRU5TRSwgZWZmZWN0X3R5cGVzLkFHSUxJVFldO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGFiZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBkaWZmc1tlZmZlY3RfdHlwZV9zdGF0W2xhYmVsc1tpXV1dID0gdGhpcy5jb21wYXJlX2l0ZW1zKFxuICAgICAgICAgICAgICAgIGNoYXJfY3VycmVudF9pdGVtLFxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfaXRlbSxcbiAgICAgICAgICAgICAgICBsYWJlbHNbaV0sXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyW2VmZmVjdF90eXBlX3N0YXRbbGFiZWxzW2ldXV1cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHRoaXMuZGlzcGxheV9zdGF0KFxuICAgICAgICAgICAgICAgIGxhYmVsc1tpXSxcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJbZWZmZWN0X3R5cGVfc3RhdFtsYWJlbHNbaV1dXSxcbiAgICAgICAgICAgICAgICBkaWZmc1tlZmZlY3RfdHlwZV9zdGF0W2xhYmVsc1tpXV1dXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG5hbWUgPSB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W2NoYXJfY3VycmVudF9pdGVtXVxuICAgICAgICAgICAgPyB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W2NoYXJfY3VycmVudF9pdGVtXS5uYW1lXG4gICAgICAgICAgICA6IFwiXCI7XG4gICAgICAgIHRoaXMud2luZG93LnVwZGF0ZV90ZXh0KG5hbWUsIHRoaXMuaXRlbV9uYW1lX3RleHQpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgU0VQQVJBVE9SX0NPVU5UOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMud2luZG93LmRyYXdfc2VwYXJhdG9yKFxuICAgICAgICAgICAgICAgIFNFUEFSQVRPUl9YLFxuICAgICAgICAgICAgICAgIFNFUEFSQVRPUl9ZICsgTElORV9TSElGVCAqIGksXG4gICAgICAgICAgICAgICAgU0VQQVJBVE9SX1ggKyBTRVBBUkFUT1JfTEVOR1RILFxuICAgICAgICAgICAgICAgIFNFUEFSQVRPUl9ZICsgTElORV9TSElGVCAqIGksXG4gICAgICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRleHRfZ3JvdXAuYWxwaGEgPSAxO1xuICAgICAgICB0aGlzLmFycm93X2dyb3VwLmFscGhhID0gMTtcbiAgICB9XG5cbiAgICAvKkRpc3BsYXlzIHRoZSBcIkNhbid0IGVxdWlwXCIgbWVzc2FnZSovXG4gICAgc2hvd19jYW50X2VxdWlwKCkge1xuICAgICAgICB0aGlzLnRleHRfZ3JvdXAuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLmFycm93X2dyb3VwLmFscGhhID0gMDtcbiAgICAgICAgdGhpcy53aW5kb3cuY2xlYXJfc2VwYXJhdG9ycygpO1xuXG4gICAgICAgIHRoaXMuY2FudF9lcXVpcF90ZXh0LnRleHQuYWxwaGEgPSAxO1xuICAgICAgICB0aGlzLmNhbnRfZXF1aXBfdGV4dC5zaGFkb3cuYWxwaGEgPSAxO1xuICAgIH1cblxuICAgIC8qT3BlbnMgdGhpcyB3aW5kb3cgd2l0aCB0aGUgc2VsZWN0ZWQgbWVtYmVyXG5cbiAgICBJbnB1dDogY2hhcl9rZXkgW3N0cmluZ10gLSBUaGUgY2hhcmFjdGVyJ3Mga2V5IG5hbWVcbiAgICAgICAgICAgaXRlbSBbc3RyaW5nXSAtIEtleSBuYW1lIG9mIHRoZSBpdGVtIHRvIGNvbXBhcmVcbiAgICAgICAgICAgb3Blbl9jYWxsYmFjayBbZnVuY3Rpb25dIC0gQ2FsbGJhY2sgZnVuY3Rpb24gKE9wdGlvbmFsKSovXG4gICAgb3BlbihjaGFyX2tleTogc3RyaW5nLCBpdGVtOiBzdHJpbmcsIG9wZW5fY2FsbGJhY2s/OiBGdW5jdGlvbikge1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnMuZmlsdGVyKChjOiBNYWluQ2hhcikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGMua2V5X25hbWUgPT09IGNoYXJfa2V5O1xuICAgICAgICB9KVswXTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9pdGVtID0gaXRlbTtcblxuICAgICAgICB0aGlzLnNob3dfc3RhdF9jb21wYXJlKCk7XG5cbiAgICAgICAgdGhpcy5pc19vcGVuID0gdHJ1ZTtcbiAgICAgICAgdGhpcy53aW5kb3cuc2hvdyhvcGVuX2NhbGxiYWNrLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgLypDbGVhcnMgaW5mb3JtYXRpb24gYW5kIGNsb3NlcyB0aGUgd2luZG93XG5cbiAgICBJbnB1dDogZGVzdHJveSBbYm9vbGVhbl0gLSBJZiB0cnVlLCBzcHJpdGVzIGFyZSBkZXN0cm95ZWQqL1xuICAgIGNsb3NlKGNhbGxiYWNrPzogRnVuY3Rpb24sIGRlc3Ryb3k6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICBraWxsX2FsbF9zcHJpdGVzKHRoaXMuYXJyb3dfZ3JvdXAsIGRlc3Ryb3kpO1xuICAgICAgICBpZiAoZGVzdHJveSkga2lsbF9hbGxfc3ByaXRlcyh0aGlzLnRleHRfZ3JvdXAsIGRlc3Ryb3kpO1xuXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfaXRlbSA9IG51bGw7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfY2hhciA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5pc19vcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMud2luZG93LmNsb3NlKGNhbGxiYWNrLCBmYWxzZSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtHb2xkZW5TdW59IGZyb20gXCIuLi9Hb2xkZW5TdW5cIjtcbmltcG9ydCB7SG9yaXpvbnRhbE1lbnV9IGZyb20gXCIuLi9zdXBwb3J0X21lbnVzL0hvcml6b250YWxNZW51XCI7XG5pbXBvcnQge2NhcGl0YWxpemV9IGZyb20gXCIuLi91dGlsc1wiO1xuXG5jb25zdCBUSVRMRV9XSU5ET1dfV0lEVEggPSAzNjtcbmNvbnN0IFlFU19BQ1RJT04gPSBcInllc1wiO1xuY29uc3QgTk9fQUNUSU9OID0gXCJub1wiO1xuXG5leHBvcnQgY2xhc3MgWWVzTm9NZW51IHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6IEdvbGRlblN1bjtcblxuICAgIHB1YmxpYyB5ZXNfY2FsbGJhY2s6IEZ1bmN0aW9uO1xuICAgIHB1YmxpYyBub19jYWxsYmFjazogRnVuY3Rpb247XG5cbiAgICBwdWJsaWMgYnV0dG9uc19rZXlzOiBzdHJpbmdbXTtcbiAgICBwdWJsaWMgaXNfb3BlbjogYm9vbGVhbjtcbiAgICBwdWJsaWMgbWVudTogSG9yaXpvbnRhbE1lbnU7XG4gICAgY29uc3RydWN0b3IoZ2FtZTogUGhhc2VyLkdhbWUsIGRhdGE6IEdvbGRlblN1bikge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuXG4gICAgICAgIHRoaXMueWVzX2NhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgdGhpcy5ub19jYWxsYmFjayA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5idXR0b25zX2tleXMgPSBbWUVTX0FDVElPTiwgTk9fQUNUSU9OXTtcblxuICAgICAgICB0aGlzLmlzX29wZW4gPSBmYWxzZTtcblxuICAgICAgICB0aGlzLm1lbnUgPSBuZXcgSG9yaXpvbnRhbE1lbnUoXG4gICAgICAgICAgICB0aGlzLmdhbWUsXG4gICAgICAgICAgICB0aGlzLmRhdGEsXG4gICAgICAgICAgICB0aGlzLmJ1dHRvbnNfa2V5cyxcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uc19rZXlzLm1hcChiID0+IGNhcGl0YWxpemUoYikpLFxuICAgICAgICAgICAge29uX3ByZXNzOiB0aGlzLmJ1dHRvbl9wcmVzcy5iaW5kKHRoaXMpLCBvbl9jYW5jZWw6IHRoaXMuY2xvc2UuYmluZCh0aGlzKX1cbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5tZW51LnRpdGxlX3dpbmRvdy51cGRhdGVfc2l6ZSh7d2lkdGg6IFRJVExFX1dJTkRPV19XSURUSH0pO1xuICAgIH1cblxuICAgIHVwZGF0ZV9wb3NpdGlvbihuZXdfeDogbnVtYmVyID0gdW5kZWZpbmVkLCBuZXdfeTogbnVtYmVyID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChuZXdfeCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBsZXQgZGlmZiA9IHRoaXMubWVudS50aXRsZV93aW5kb3cueCAtIHRoaXMubWVudS54O1xuICAgICAgICAgICAgdGhpcy5tZW51LnggPSBuZXdfeDtcbiAgICAgICAgICAgIHRoaXMubWVudS50aXRsZV93aW5kb3cueCA9IG5ld194ICsgZGlmZjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV3X3kgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5tZW51LnkgPSBuZXdfeTtcbiAgICAgICAgICAgIHRoaXMubWVudS50aXRsZV93aW5kb3cueSA9IG5ld195O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWVudS51cGRhdGVfcG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy5tZW51LnRpdGxlX3dpbmRvdy5zZW5kX3RvX2Zyb250KCk7XG4gICAgfVxuXG4gICAgYnV0dG9uX3ByZXNzKCkge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuYnV0dG9uc19rZXlzW3RoaXMubWVudS5zZWxlY3RlZF9idXR0b25faW5kZXhdKSB7XG4gICAgICAgICAgICBjYXNlIFlFU19BQ1RJT046XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSh0aGlzLnllc19jYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIE5PX0FDVElPTjpcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKHRoaXMubm9fY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNfYWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tZW51Lm1lbnVfYWN0aXZlO1xuICAgIH1cblxuICAgIG9wZW4oY2FsbGJhY2tzOiB7eWVzOiBGdW5jdGlvbjsgbm86IEZ1bmN0aW9ufSwgY3VzdG9tX3Bvcz86IHt4OiBudW1iZXI7IHk6IG51bWJlcn0sIG9wZW5fY2FsbGJhY2s/OiBGdW5jdGlvbikge1xuICAgICAgICB0aGlzLnllc19jYWxsYmFjayA9IGNhbGxiYWNrcy55ZXM7XG4gICAgICAgIHRoaXMubm9fY2FsbGJhY2sgPSBjYWxsYmFja3Mubm87XG5cbiAgICAgICAgaWYgKHRoaXMuZGF0YS5oZXJvLmluX2FjdGlvbigpKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zdG9wX2NoYXIoKTtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnVwZGF0ZV9zaGFkb3coKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaXNfb3BlbiA9IHRydWU7XG4gICAgICAgIHRoaXMubWVudS5vcGVuKG9wZW5fY2FsbGJhY2ssIDAsIHRydWUpO1xuXG4gICAgICAgIGlmIChjdXN0b21fcG9zKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZV9wb3NpdGlvbihjdXN0b21fcG9zLngsIGN1c3RvbV9wb3MueSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbG9zZShjYWxsYmFjaz86IEZ1bmN0aW9uKSB7XG4gICAgICAgIGlmIChjYWxsYmFjayA9PT0gdW5kZWZpbmVkKSBjYWxsYmFjayA9IHRoaXMubm9fY2FsbGJhY2s7XG4gICAgICAgIGlmICghdGhpcy5pc19hY3RpdmUoKSkgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMubWVudS5jbG9zZShjYWxsYmFjayk7XG4gICAgICAgIHRoaXMuaXNfb3BlbiA9IGZhbHNlO1xuICAgIH1cbn1cbiIsImltcG9ydCB7SXRlbUNvdW50ZXJ9IGZyb20gXCIuLi8uLi91dGlscy9JdGVtQ291bnRlclwiO1xuaW1wb3J0IHtXaW5kb3csIFRleHRPYmp9IGZyb20gXCIuLi8uLi9XaW5kb3dcIjtcbmltcG9ydCB7R29sZGVuU3VufSBmcm9tIFwiLi4vLi4vR29sZGVuU3VuXCI7XG5pbXBvcnQge1Nob3BJdGVtfSBmcm9tIFwiLi4vLi4vU2hvcFwiO1xuaW1wb3J0IHtJdGVtU2xvdH0gZnJvbSBcIi4uLy4uL01haW5DaGFyXCI7XG5pbXBvcnQge0N1cnNvck1hbmFnZXJ9IGZyb20gXCIuLi8uLi91dGlscy9DdXJzb3JNYW5hZ2VyXCI7XG5cbmNvbnN0IFFVQU5USVRZX1dJTl9YID0gNTY7XG5jb25zdCBRVUFOVElUWV9XSU5fWSA9IDMyO1xuY29uc3QgUVVBTlRJVFlfV0lOX1dJRFRIID0gMTgwO1xuY29uc3QgUVVBTlRJVFlfV0lOX0hFSUdIVCA9IDIwO1xuXG5jb25zdCBJVEVNX0NPVU5URVJfWCA9IDg7XG5jb25zdCBJVEVNX0NPVU5URVJfWSA9IDg7XG5cbmNvbnN0IFFVQU5USVRZX1RFWFRfRU5EX1ggPSA5MztcbmNvbnN0IFFVQU5USVRZX1RFWFRfWSA9IDg7XG5cbmNvbnN0IENPSU5TX1ZBTFVFX0VORF9YID0gMTQxO1xuY29uc3QgQ09JTlNfVkFMVUVfWSA9IDg7XG5cbmNvbnN0IENPSU5TX0xBQkVMX1ggPSAxNDQ7XG5jb25zdCBDT0lOU19MQUJFTF9ZID0gODtcblxuY29uc3QgQ1VSU09SX1ggPSAxMzI7XG5jb25zdCBDVVJTT1JfWSA9IDQ2O1xuXG5jb25zdCBJVEVNX0NPVU5URVJfTE9PUF9USU1FID0gMTAwO1xuXG5leHBvcnQgY2xhc3MgU2hvcEl0ZW1RdWFudGl0eVdpbmRvdyB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOiBHb2xkZW5TdW47XG5cbiAgICBwdWJsaWMgd2luZG93OiBXaW5kb3c7XG4gICAgcHVibGljIGl0ZW1fY291bnRlcjogSXRlbUNvdW50ZXI7XG4gICAgcHVibGljIGNob3Nlbl9xdWFudGl0eTogbnVtYmVyO1xuICAgIHB1YmxpYyBiYXNlX3ByaWNlOiBudW1iZXI7XG4gICAgcHVibGljIGlzX29wZW46IGJvb2xlYW47XG5cbiAgICBwdWJsaWMgcXVhbnRpdHlfdGV4dDogVGV4dE9iajtcbiAgICBwdWJsaWMgY29pbnNfdmFsX3RleHQ6IFRleHRPYmo7XG4gICAgcHVibGljIGNvaW5zX2xhYmVsX3RleHQ6IFRleHRPYmo7XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lOiBQaGFzZXIuR2FtZSwgZGF0YTogR29sZGVuU3VuKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG5cbiAgICAgICAgdGhpcy53aW5kb3cgPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgUVVBTlRJVFlfV0lOX1gsIFFVQU5USVRZX1dJTl9ZLCBRVUFOVElUWV9XSU5fV0lEVEgsIFFVQU5USVRZX1dJTl9IRUlHSFQpO1xuICAgICAgICB0aGlzLml0ZW1fY291bnRlciA9IG5ldyBJdGVtQ291bnRlcihcbiAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgIHRoaXMud2luZG93Lmdyb3VwLFxuICAgICAgICAgICAgSVRFTV9DT1VOVEVSX1gsXG4gICAgICAgICAgICBJVEVNX0NPVU5URVJfWSxcbiAgICAgICAgICAgIHRoaXMub25fY2hhbmdlLmJpbmQodGhpcylcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmNob3Nlbl9xdWFudGl0eSA9IDE7XG4gICAgICAgIHRoaXMuYmFzZV9wcmljZSA9IDA7XG4gICAgICAgIHRoaXMuaXNfb3BlbiA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMucXVhbnRpdHlfdGV4dCA9IHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFxuICAgICAgICAgICAgU3RyaW5nKHRoaXMuY2hvc2VuX3F1YW50aXR5KSxcbiAgICAgICAgICAgIFFVQU5USVRZX1RFWFRfRU5EX1gsXG4gICAgICAgICAgICBRVUFOVElUWV9URVhUX1ksXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuY29pbnNfdmFsX3RleHQgPSB0aGlzLndpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBDT0lOU19WQUxVRV9FTkRfWCwgQ09JTlNfVkFMVUVfWSwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuY29pbnNfbGFiZWxfdGV4dCA9IHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiQ29pbnNcIiwgQ09JTlNfTEFCRUxfWCwgQ09JTlNfTEFCRUxfWSk7XG4gICAgfVxuXG4gICAgb25fY2hhbmdlKHF1YW50aXR5OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5jaG9zZW5fcXVhbnRpdHkgPSBxdWFudGl0eTtcbiAgICAgICAgdGhpcy53aW5kb3cudXBkYXRlX3RleHQoU3RyaW5nKHRoaXMuY2hvc2VuX3F1YW50aXR5KSwgdGhpcy5xdWFudGl0eV90ZXh0KTtcbiAgICAgICAgdGhpcy53aW5kb3cudXBkYXRlX3RleHQoU3RyaW5nKHRoaXMuYmFzZV9wcmljZSAqIHRoaXMuY2hvc2VuX3F1YW50aXR5KSwgdGhpcy5jb2luc192YWxfdGV4dCk7XG4gICAgfVxuXG4gICAgZ3JhbnRfY29udHJvbChvbl9jYW5jZWw6IEZ1bmN0aW9uLCBvbl9zZWxlY3Q6IEZ1bmN0aW9uKSB7XG4gICAgICAgIGxldCBjb250cm9scyA9IFtcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkxFRlQsIG9uX2Rvd246IHRoaXMuZGVjcmVhc2VfYW1vdW50LmJpbmQodGhpcyl9LFxuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuUklHSFQsIG9uX2Rvd246IHRoaXMuaW5jcmVhc2VfYW1vdW50LmJpbmQodGhpcyl9LFxuICAgICAgICAgICAge2tleTogdGhpcy5kYXRhLmdhbWVwYWQuQSwgb25fZG93bjogb25fc2VsZWN0fSxcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZGF0YS5nYW1lcGFkLkIsIG9uX2Rvd246IG9uX2NhbmNlbH0sXG4gICAgICAgIF07XG4gICAgICAgIHRoaXMuZGF0YS5jb250cm9sX21hbmFnZXIuc2V0X2NvbnRyb2woY29udHJvbHMsIHtcbiAgICAgICAgICAgIGxvb3BfY29uZmlnczoge2hvcml6b250YWw6IHRydWUsIGhvcml6b250YWxfdGltZTogSVRFTV9DT1VOVEVSX0xPT1BfVElNRX0sXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGluY3JlYXNlX2Ftb3VudCgpIHtcbiAgICAgICAgdGhpcy5pdGVtX2NvdW50ZXIuYWR2YW5jZV9zdGVwKDEpO1xuICAgIH1cblxuICAgIGRlY3JlYXNlX2Ftb3VudCgpIHtcbiAgICAgICAgdGhpcy5pdGVtX2NvdW50ZXIuYWR2YW5jZV9zdGVwKC0xKTtcbiAgICB9XG5cbiAgICBvcGVuKHNob3BfaXRlbV9vYmo6IFNob3BJdGVtLCBjaGFyX2l0ZW1fb2JqPzogSXRlbVNsb3QsIHVzZV9jb2luczogYm9vbGVhbiA9IGZhbHNlLCBvcGVuX2NhbGxiYWNrPzogRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5kYXRhLmN1cnNvcl9tYW5hZ2VyLm1vdmVfdG8oXG4gICAgICAgICAgICB7eDogQ1VSU09SX1gsIHk6IENVUlNPUl9ZfSxcbiAgICAgICAgICAgIHt0d2Vlbl9jb25maWc6IHt0eXBlOiBDdXJzb3JNYW5hZ2VyLkN1cnNvclR3ZWVucy5XSUdHTEV9fSxcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2VfcHJpY2UgPSB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W3Nob3BfaXRlbV9vYmoua2V5X25hbWVdLnByaWNlO1xuICAgICAgICAgICAgICAgIHRoaXMud2luZG93LnVwZGF0ZV90ZXh0KFN0cmluZyh0aGlzLmJhc2VfcHJpY2UpLCB0aGlzLmNvaW5zX3ZhbF90ZXh0KTtcblxuICAgICAgICAgICAgICAgIGxldCBvd25lZCA9ICFjaGFyX2l0ZW1fb2JqID8gMCA6IGNoYXJfaXRlbV9vYmoucXVhbnRpdHk7XG4gICAgICAgICAgICAgICAgbGV0IGF2YWlsYWJsZV9xdWFudGl0eSA9IHNob3BfaXRlbV9vYmoucXVhbnRpdHkgPT09IC0xID8gMzAgOiBzaG9wX2l0ZW1fb2JqLnF1YW50aXR5O1xuICAgICAgICAgICAgICAgIGlmIChhdmFpbGFibGVfcXVhbnRpdHkgKyBvd25lZCA+IDMwKSBhdmFpbGFibGVfcXVhbnRpdHkgPSAzMCAtIG93bmVkO1xuICAgICAgICAgICAgICAgIGlmICh1c2VfY29pbnMgJiYgdGhpcy5iYXNlX3ByaWNlICogYXZhaWxhYmxlX3F1YW50aXR5ID4gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5jb2lucykge1xuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVfcXVhbnRpdHkgPSAodGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5jb2lucyAvIHRoaXMuYmFzZV9wcmljZSkgfCAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuaXRlbV9jb3VudGVyLmNvbmZpZyhhdmFpbGFibGVfcXVhbnRpdHksIHRoaXMuY2hvc2VuX3F1YW50aXR5LCBvd25lZCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmlzX29wZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMud2luZG93LnNob3cob3Blbl9jYWxsYmFjaywgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGNsb3NlKGNhbGxiYWNrPzogRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5pdGVtX2NvdW50ZXIuZGVhY3RpdmF0ZSgpO1xuICAgICAgICB0aGlzLml0ZW1fY291bnRlci5jbGVhcigpO1xuICAgICAgICB0aGlzLmRhdGEuY3Vyc29yX21hbmFnZXIuY2xlYXJfdHdlZW5zKCk7XG5cbiAgICAgICAgdGhpcy5jaG9zZW5fcXVhbnRpdHkgPSAxO1xuICAgICAgICB0aGlzLmJhc2VfcHJpY2UgPSAwO1xuXG4gICAgICAgIHRoaXMuaXNfb3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLndpbmRvdy5jbG9zZShjYWxsYmFjaywgZmFsc2UpO1xuICAgIH1cbn1cbiIsImltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuaW1wb3J0IHtHYW1lcGFkfSBmcm9tIFwiLi4vR2FtZXBhZFwiO1xuXG5jb25zdCBERUZBVUxUX0xPT1BfVElNRSA9IFBoYXNlci5UaW1lci5RVUFSVEVSID4+IDE7XG5cbmV4cG9ydCB0eXBlIENvbnRyb2xPYmogPSB7XG4gICAga2V5OiBudW1iZXI7XG4gICAgb25fZG93bj86IEZ1bmN0aW9uO1xuICAgIG9uX3VwPzogRnVuY3Rpb247XG4gICAgcHJlc3NlZD86IGJvb2xlYW47XG4gICAgbG9vcD86IGJvb2xlYW47XG4gICAgbG9vcF90aW1lPzogbnVtYmVyO1xuICAgIHJlc2V0PzogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCBjbGFzcyBDb250cm9sTWFuYWdlciB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBnYW1lcGFkOiBHYW1lcGFkO1xuXG4gICAgcHVibGljIGRpc2FibGVkOiBib29sZWFuO1xuICAgIHB1YmxpYyBidXN5OiBib29sZWFuO1xuXG4gICAgcHVibGljIGtleXNfbGlzdDogbnVtYmVyW107XG4gICAgcHVibGljIGtleXM6IHtba2V5OiBudW1iZXJdOiBDb250cm9sT2JqfTtcblxuICAgIHB1YmxpYyBzaWduYWxfYmluZGluZ3M6IFBoYXNlci5TaWduYWxCaW5kaW5nW107XG4gICAgcHVibGljIHNpZ25hbF9iaW5kaW5nc19rZXk6IG51bWJlcjtcblxuICAgIHB1YmxpYyBsb29wX3N0YXJ0X3RpbWVyOiBQaGFzZXIuVGltZXI7XG4gICAgcHVibGljIGxvb3BfcmVwZWF0X3RpbWVyOiBQaGFzZXIuVGltZXI7XG5cbiAgICBwdWJsaWMgY29udHJvbF9xdWV1ZToge2NvbnRyb2xzOiBhbnlbXTsgY29uZmlncz86IGFueX1bXTtcbiAgICBwdWJsaWMgZ2xvYmFsX2JpbmRpbmdzOiB7W2tleTogbnVtYmVyXTogUGhhc2VyLlNpZ25hbEJpbmRpbmdbXX07XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lOiBQaGFzZXIuR2FtZSwgZ2FtZXBhZDogR2FtZXBhZCkge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmdhbWVwYWQgPSBnYW1lcGFkO1xuXG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5idXN5ID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5rZXlzX2xpc3QgPSB0aGlzLmdhbWVwYWQua2V5cztcblxuICAgICAgICBsZXQga2V5c190b19tYXAgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmtleXNfbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAga2V5c190b19tYXAucHVzaCh7XG4gICAgICAgICAgICAgICAga2V5OiB0aGlzLmtleXNfbGlzdFtpXSxcbiAgICAgICAgICAgICAgICBvbl9kb3duOiBudWxsLFxuICAgICAgICAgICAgICAgIG9uX3VwOiBudWxsLFxuICAgICAgICAgICAgICAgIHByZXNzZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGxvb3A6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGxvb3BfdGltZTogREVGQVVMVF9MT09QX1RJTUUsXG4gICAgICAgICAgICAgICAgcmVzZXQ6IGZhbHNlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmtleXMgPSBfLm1hcEtleXMoa2V5c190b19tYXAsIGsgPT4gay5rZXkpIGFzIHtba2V5OiBudW1iZXJdOiBDb250cm9sT2JqfTtcblxuICAgICAgICB0aGlzLnNpZ25hbF9iaW5kaW5ncyA9IFtdO1xuICAgICAgICB0aGlzLnNpZ25hbF9iaW5kaW5nc19rZXkgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuY29udHJvbF9xdWV1ZSA9IFtdO1xuICAgICAgICB0aGlzLmdsb2JhbF9iaW5kaW5ncyA9IHt9O1xuXG4gICAgICAgIHRoaXMubG9vcF9zdGFydF90aW1lciA9IHRoaXMuZ2FtZS50aW1lLmNyZWF0ZShmYWxzZSk7XG4gICAgICAgIHRoaXMubG9vcF9yZXBlYXRfdGltZXIgPSB0aGlzLmdhbWUudGltZS5jcmVhdGUoZmFsc2UpO1xuICAgIH1cblxuICAgIGdldCBpbml0aWFsaXplZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2lnbmFsX2JpbmRpbmdzLmxlbmd0aCAhPT0gMDtcbiAgICB9XG5cbiAgICBnZXQgaGFzX25leHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRyb2xfcXVldWUubGVuZ3RoICE9PSAwO1xuICAgIH1cblxuICAgIHNpbXBsZV9pbnB1dChcbiAgICAgICAgY2FsbGJhY2s6IEZ1bmN0aW9uLFxuICAgICAgICBwYXJhbXM/OiB7cmVzZXRfb25fcHJlc3M/OiBib29sZWFuOyBjb25maXJtX29ubHk/OiBib29sZWFuOyBwZXJzaXN0PzogYm9vbGVhbjsgbm9faW5pdGlhbF9yZXNldD86IGJvb2xlYW59XG4gICAgKSB7XG4gICAgICAgIGxldCBjb250cm9scyA9IFtcbiAgICAgICAgICAgIHtrZXk6IHRoaXMuZ2FtZXBhZC5BLCBvbl9kb3duOiBjYWxsYmFjaywgcmVzZXRfY29udHJvbDogcGFyYW1zID8gcGFyYW1zLnJlc2V0X29uX3ByZXNzIDogdW5kZWZpbmVkfSxcbiAgICAgICAgXTtcblxuICAgICAgICBpZiAocGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAoIXBhcmFtcy5jb25maXJtX29ubHkpXG4gICAgICAgICAgICAgICAgY29udHJvbHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGtleTogdGhpcy5nYW1lcGFkLkIsXG4gICAgICAgICAgICAgICAgICAgIG9uX2Rvd246IGNhbGxiYWNrLFxuICAgICAgICAgICAgICAgICAgICByZXNldF9jb250cm9sOiBwYXJhbXMgPyBwYXJhbXMucmVzZXRfb25fcHJlc3MgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRfY29udHJvbChjb250cm9scywge3BlcnNpc3Q6IHBhcmFtcy5wZXJzaXN0LCBub19yZXNldDogcGFyYW1zLm5vX2luaXRpYWxfcmVzZXR9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRyb2xzLnB1c2goe1xuICAgICAgICAgICAgICAgIGtleTogdGhpcy5nYW1lcGFkLkIsXG4gICAgICAgICAgICAgICAgb25fZG93bjogY2FsbGJhY2ssXG4gICAgICAgICAgICAgICAgcmVzZXRfY29udHJvbDogcGFyYW1zID8gcGFyYW1zLnJlc2V0X29uX3ByZXNzIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRfY29udHJvbChjb250cm9scyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRfY29udHJvbChcbiAgICAgICAgY29udHJvbHM6IHtrZXk6IG51bWJlcjsgb25fZG93bj86IEZ1bmN0aW9uOyBvbl91cD86IEZ1bmN0aW9uOyBwYXJhbXM/OiB7cmVzZXRfY29udHJvbD86IGJvb2xlYW59fVtdLFxuICAgICAgICBjb25maWdzPzoge1xuICAgICAgICAgICAgbG9vcF9jb25maWdzPzoge1xuICAgICAgICAgICAgICAgIHZlcnRpY2FsPzogYm9vbGVhbjtcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbF90aW1lPzogbnVtYmVyO1xuICAgICAgICAgICAgICAgIGhvcml6b250YWw/OiBib29sZWFuO1xuICAgICAgICAgICAgICAgIGhvcml6b250YWxfdGltZT86IG51bWJlcjtcbiAgICAgICAgICAgICAgICBzaG91bGRlcj86IGJvb2xlYW47XG4gICAgICAgICAgICAgICAgc2hvdWxkZXJfdGltZT86IG51bWJlcjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBwZXJzaXN0PzogYm9vbGVhbjtcbiAgICAgICAgICAgIG5vX3Jlc2V0PzogYm9vbGVhbjtcbiAgICAgICAgICAgIGdsb2JhbF9rZXk/OiBudW1iZXI7XG4gICAgICAgIH1cbiAgICApIHtcbiAgICAgICAgaWYgKHRoaXMuYnVzeSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJDb250cm9sTWFuYWdlciBpcyBidXN5LiBSZXF1ZXN0IHF1ZXVlZC5cIik7XG4gICAgICAgICAgICBsZXQgZ2xvYmFsX2tleSA9IHRoaXMubWFrZV9nbG9iYWxfa2V5KCk7XG5cbiAgICAgICAgICAgIGxldCBuZXdfY29uZmlncyA9IGNvbmZpZ3M7XG4gICAgICAgICAgICBuZXdfY29uZmlncy5nbG9iYWxfa2V5ID0gZ2xvYmFsX2tleTtcblxuICAgICAgICAgICAgdGhpcy5jb250cm9sX3F1ZXVlLnB1c2goe2NvbnRyb2xzOiBjb250cm9scywgY29uZmlnczogbmV3X2NvbmZpZ3N9KTtcbiAgICAgICAgICAgIHJldHVybiBnbG9iYWxfa2V5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGRpc2FibGVfcmVzZXQ6IGJvb2xlYW4gPSBjb25maWdzID8gKGNvbmZpZ3Mubm9fcmVzZXQgPyBjb25maWdzLm5vX3Jlc2V0IDogZmFsc2UpIDogZmFsc2U7XG4gICAgICAgICAgICBpZiAodGhpcy5pbml0aWFsaXplZCAmJiAhZGlzYWJsZV9yZXNldCkgdGhpcy5yZXNldCgpO1xuXG4gICAgICAgICAgICB0aGlzLmJ1c3kgPSB0cnVlO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRyb2xzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xzW2ldLm9uX2Rvd24pIHRoaXMua2V5c1tjb250cm9sc1tpXS5rZXldLm9uX2Rvd24gPSBjb250cm9sc1tpXS5vbl9kb3duO1xuICAgICAgICAgICAgICAgIGlmIChjb250cm9sc1tpXS5vbl91cCkgdGhpcy5rZXlzW2NvbnRyb2xzW2ldLmtleV0ub25fdXAgPSBjb250cm9sc1tpXS5vbl91cDtcbiAgICAgICAgICAgICAgICBpZiAoY29udHJvbHNbaV0ucGFyYW1zKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmtleXNbY29udHJvbHNbaV0ua2V5XS5yZXNldCA9IGNvbnRyb2xzW2ldLnBhcmFtcy5yZXNldF9jb250cm9sXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGNvbnRyb2xzW2ldLnBhcmFtcy5yZXNldF9jb250cm9sXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY29uZmlncykge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0X2NvbmZpZ3MoY29uZmlncyk7XG5cbiAgICAgICAgICAgICAgICBsZXQgZ2xvYmFsX2tleSA9ICFjb25maWdzLmdsb2JhbF9rZXkgPyB0aGlzLm1ha2VfZ2xvYmFsX2tleSgpIDogY29uZmlncy5nbG9iYWxfa2V5O1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVuYWJsZV9rZXlzKGdsb2JhbF9rZXksIGNvbmZpZ3MucGVyc2lzdCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBnbG9iYWxfa2V5ID0gdGhpcy5tYWtlX2dsb2JhbF9rZXkoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbmFibGVfa2V5cyhnbG9iYWxfa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldF9jb25maWdzKGNvbmZpZ3M6IGFueSkge1xuICAgICAgICBpZiAoY29uZmlncy5sb29wX2NvbmZpZ3MpIHtcbiAgICAgICAgICAgIGxldCBvcHRpb25zID0gY29uZmlncy5sb29wX2NvbmZpZ3M7XG4gICAgICAgICAgICBsZXQgY29udHJvbHMgPSBbXTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMudmVydGljYWwpIHtcbiAgICAgICAgICAgICAgICBjb250cm9scy5wdXNoKHtrZXk6IHRoaXMuZ2FtZXBhZC5VUCwgbG9vcF90aW1lOiBvcHRpb25zLnZlcnRpY2FsX3RpbWV9KTtcbiAgICAgICAgICAgICAgICBjb250cm9scy5wdXNoKHtrZXk6IHRoaXMuZ2FtZXBhZC5ET1dOLCBsb29wX3RpbWU6IG9wdGlvbnMudmVydGljYWxfdGltZX0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xzLnB1c2goe2tleTogdGhpcy5nYW1lcGFkLkxFRlQsIGxvb3BfdGltZTogb3B0aW9ucy5ob3Jpem9udGFsX3RpbWV9KTtcbiAgICAgICAgICAgICAgICBjb250cm9scy5wdXNoKHtrZXk6IHRoaXMuZ2FtZXBhZC5SSUdIVCwgbG9vcF90aW1lOiBvcHRpb25zLmhvcml6b250YWxfdGltZX0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2hvdWxkZXIpIHtcbiAgICAgICAgICAgICAgICBjb250cm9scy5wdXNoKHtrZXk6IHRoaXMuZ2FtZXBhZC5MLCBsb29wX3RpbWU6IG9wdGlvbnMuc2hvdWxkZXJfdGltZX0pO1xuICAgICAgICAgICAgICAgIGNvbnRyb2xzLnB1c2goe2tleTogdGhpcy5nYW1lcGFkLlIsIGxvb3BfdGltZTogb3B0aW9ucy5zaG91bGRlcl90aW1lfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZW5hYmxlX2xvb3AoY29udHJvbHMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZW5hYmxlX2xvb3AoY29udHJvbHM6IHtrZXk6IG51bWJlcjsgbG9vcF90aW1lPzogbnVtYmVyfVtdKSB7XG4gICAgICAgIGNvbnRyb2xzLmZvckVhY2gob2JqID0+IHtcbiAgICAgICAgICAgIHRoaXMua2V5c1tvYmoua2V5XS5sb29wID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChvYmoubG9vcF90aW1lKSB0aGlzLmtleXNbb2JqLmtleV0ubG9vcF90aW1lID0gb2JqLmxvb3BfdGltZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZW5hYmxlX2tleXMoZ2xvYmFsX2tleTogbnVtYmVyLCBwZXJzaXN0PzogYm9vbGVhbikge1xuICAgICAgICBsZXQgYmluZGluZ3M6IFBoYXNlci5TaWduYWxCaW5kaW5nW10gPSBbXTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMua2V5c19saXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQga2V5X29uX2Rvd24gPSB0aGlzLmtleXNbdGhpcy5rZXlzX2xpc3RbaV1dLm9uX2Rvd247XG4gICAgICAgICAgICBsZXQga2V5X29uX3VwID0gdGhpcy5rZXlzW3RoaXMua2V5c19saXN0W2ldXS5vbl91cDtcblxuICAgICAgICAgICAgaWYgKHRoaXMua2V5c1t0aGlzLmtleXNfbGlzdFtpXV0ub25fdXApIHtcbiAgICAgICAgICAgICAgICBsZXQgYiA9IHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkodGhpcy5rZXlzW3RoaXMua2V5c19saXN0W2ldXS5rZXkpLm9uVXAuYWRkKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAga2V5X29uX3VwKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKCFwZXJzaXN0KSB0aGlzLnNpZ25hbF9iaW5kaW5ncy5wdXNoKGIpO1xuICAgICAgICAgICAgICAgIGJpbmRpbmdzLnB1c2goYik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmtleXNbdGhpcy5rZXlzX2xpc3RbaV1dLm9uX2Rvd24pIHtcbiAgICAgICAgICAgICAgICBsZXQgbG9vcF90aW1lID0gdGhpcy5rZXlzW3RoaXMua2V5c19saXN0W2ldXS5sb29wX3RpbWU7XG4gICAgICAgICAgICAgICAgbGV0IHRyaWdnZXJfcmVzZXQgPSB0aGlzLmtleXNbdGhpcy5rZXlzX2xpc3RbaV1dLnJlc2V0O1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMua2V5c1t0aGlzLmtleXNfbGlzdFtpXV0ubG9vcCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgYjEgPSB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KHRoaXMua2V5c1t0aGlzLmtleXNfbGlzdFtpXV0ua2V5KS5vbkRvd24uYWRkKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmtleXNbdGhpcy5nYW1lcGFkLm9wcG9zaXRlX2tleSh0aGlzLmtleXNfbGlzdFtpXSldLnByZXNzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kaXNhYmxlZCkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5rZXlzW3RoaXMuZ2FtZXBhZC5vcHBvc2l0ZV9rZXkodGhpcy5rZXlzX2xpc3RbaV0pXS5wcmVzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wX3RpbWVycygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmtleXNbdGhpcy5rZXlzX2xpc3RbaV1dLnByZXNzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRfbG9vcF90aW1lcnMoa2V5X29uX2Rvd24sIGxvb3BfdGltZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGxldCBiMiA9IHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkodGhpcy5rZXlzW3RoaXMua2V5c19saXN0W2ldXS5rZXkpLm9uVXAuYWRkKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRpc2FibGVkKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMua2V5c1t0aGlzLmtleXNfbGlzdFtpXV0ucHJlc3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wX3RpbWVycygpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXBlcnNpc3QpIHRoaXMuc2lnbmFsX2JpbmRpbmdzLnB1c2goYjEsIGIyKTtcbiAgICAgICAgICAgICAgICAgICAgYmluZGluZ3MucHVzaChiMSwgYjIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBiID0gdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleSh0aGlzLmtleXNbdGhpcy5rZXlzX2xpc3RbaV1dLmtleSkub25Eb3duLmFkZCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kaXNhYmxlZCkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJpZ2dlcl9yZXNldCkgdGhpcy5yZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5X29uX2Rvd24oKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwZXJzaXN0KSB0aGlzLnNpZ25hbF9iaW5kaW5ncy5wdXNoKGIpO1xuICAgICAgICAgICAgICAgICAgICBiaW5kaW5ncy5wdXNoKGIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlc2V0KGZhbHNlKTtcbiAgICAgICAgdGhpcy5idXN5ID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5nbG9iYWxfYmluZGluZ3NbZ2xvYmFsX2tleV0gPSBiaW5kaW5ncztcbiAgICAgICAgaWYgKCFwZXJzaXN0KSB0aGlzLnNpZ25hbF9iaW5kaW5nc19rZXkgPSBnbG9iYWxfa2V5O1xuXG4gICAgICAgIGlmICh0aGlzLmhhc19uZXh0KSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkV4ZWN1dGluZyBuZXh0IENvbnRyb2xNYW5hZ2VyIHJlcXVlc3QuLi5cIik7XG4gICAgICAgICAgICBsZXQgYXJncyA9IHRoaXMuY29udHJvbF9xdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgICAgdGhpcy5zZXRfY29udHJvbChhcmdzLmNvbnRyb2xzLCBhcmdzLmNvbmZpZ3MpO1xuICAgICAgICB9IGVsc2UgcmV0dXJuIGdsb2JhbF9rZXk7XG4gICAgfVxuXG4gICAgc2V0X2xvb3BfdGltZXJzKGNhbGxiYWNrOiBGdW5jdGlvbiwgbG9vcF90aW1lOiBudW1iZXIpIHtcbiAgICAgICAgY2FsbGJhY2soKTtcblxuICAgICAgICB0aGlzLmxvb3Bfc3RhcnRfdGltZXIuYWRkKFBoYXNlci5UaW1lci5RVUFSVEVSLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmxvb3BfcmVwZWF0X3RpbWVyLmxvb3AobG9vcF90aW1lLCBjYWxsYmFjayk7XG4gICAgICAgICAgICB0aGlzLmxvb3BfcmVwZWF0X3RpbWVyLnN0YXJ0KCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmxvb3Bfc3RhcnRfdGltZXIuc3RhcnQoKTtcbiAgICB9XG5cbiAgICBzdG9wX3RpbWVycygpIHtcbiAgICAgICAgdGhpcy5sb29wX3N0YXJ0X3RpbWVyLnN0b3AoKTtcbiAgICAgICAgdGhpcy5sb29wX3JlcGVhdF90aW1lci5zdG9wKCk7XG4gICAgfVxuXG4gICAgbWFrZV9nbG9iYWxfa2V5KCkge1xuICAgICAgICBsZXQgZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgbGV0IGkgPSAwO1xuXG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmdsb2JhbF9iaW5kaW5nc1tpXSkge1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlICghZmluaXNoZWQpO1xuXG4gICAgICAgIHRoaXMuZ2xvYmFsX2JpbmRpbmdzW2ldID0gW25ldyBQaGFzZXIuU2lnbmFsQmluZGluZyhuZXcgUGhhc2VyLlNpZ25hbCgpLCAoKSA9PiB7fSwgZmFsc2UpXTtcblxuICAgICAgICByZXR1cm4gaTtcbiAgICB9XG5cbiAgICBkZXRhY2hfYmluZGluZ3Moa2V5OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKCF0aGlzLmdsb2JhbF9iaW5kaW5nc1trZXldKSByZXR1cm47XG5cbiAgICAgICAgbGV0IGJpbmRpbmdzID0gdGhpcy5nbG9iYWxfYmluZGluZ3Nba2V5XTtcbiAgICAgICAgYmluZGluZ3MuZm9yRWFjaChiaW5kID0+IGJpbmQuZGV0YWNoKCkpO1xuXG4gICAgICAgIHRoaXMuZ2xvYmFsX2JpbmRpbmdzW2tleV0gPSBudWxsO1xuICAgIH1cblxuICAgIHJlc2V0KGRldGFjaDogYm9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgdGhpcy5sb29wX3N0YXJ0X3RpbWVyLnN0b3AoKTtcbiAgICAgICAgdGhpcy5sb29wX3JlcGVhdF90aW1lci5zdG9wKCk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmtleXNfbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5rZXlzW3RoaXMua2V5c19saXN0W2ldXS5wcmVzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmtleXNbdGhpcy5rZXlzX2xpc3RbaV1dLm9uX2Rvd24gPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5rZXlzW3RoaXMua2V5c19saXN0W2ldXS5vbl91cCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmtleXNbdGhpcy5rZXlzX2xpc3RbaV1dLmxvb3AgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMua2V5c1t0aGlzLmtleXNfbGlzdFtpXV0ubG9vcF90aW1lID0gREVGQVVMVF9MT09QX1RJTUU7XG4gICAgICAgICAgICB0aGlzLmtleXNbdGhpcy5rZXlzX2xpc3RbaV1dLnJlc2V0ID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGV0YWNoKSB7XG4gICAgICAgICAgICB0aGlzLnNpZ25hbF9iaW5kaW5ncy5mb3JFYWNoKHNpZ25hbF9iaW5kaW5nID0+IHtcbiAgICAgICAgICAgICAgICBzaWduYWxfYmluZGluZy5kZXRhY2goKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHRoaXMuc2lnbmFsX2JpbmRpbmdzX2tleSkgdGhpcy5kZXRhY2hfYmluZGluZ3ModGhpcy5zaWduYWxfYmluZGluZ3Nfa2V5KTtcblxuICAgICAgICAgICAgdGhpcy5zaWduYWxfYmluZGluZ3Nfa2V5ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuc2lnbmFsX2JpbmRpbmdzID0gW107XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQge0dvbGRlblN1bn0gZnJvbSBcIi4vR29sZGVuU3VuXCI7XG5cbmV4cG9ydCBjb25zdCBpbnB1dF9pZHMgPSBbXG4gICAgXCJMRUZUXCIsXG4gICAgXCJSSUdIVFwiLFxuICAgIFwiVVBcIixcbiAgICBcIkRPV05cIixcbiAgICBcIkFcIixcbiAgICBcIkJcIixcbiAgICBcIkxcIixcbiAgICBcIlJcIixcbiAgICBcIlNFTEVDVFwiLFxuICAgIFwiU1RBUlRcIixcbiAgICBcIlBTWTFcIixcbiAgICBcIlBTWTJcIixcbiAgICBcIlBTWTNcIixcbiAgICBcIlpPT00xXCIsXG4gICAgXCJaT09NMlwiLFxuICAgIFwiWk9PTTNcIixcbiAgICBcIkRFQlVHX1BIWVNJQ1NcIixcbiAgICBcIkRFQlVHX0dSSURcIixcbiAgICBcIkRFQlVHX0tFWVNcIixcbiAgICBcIkRFQlVHX1NUQVRTXCIsXG4gICAgXCJERUJVR19GUFNcIixcbiAgICBcIkRFQlVHX1NMSURFUlNcIixcbiAgICBcIkRFQlVHX0NBTV9QTFVTXCIsXG4gICAgXCJERUJVR19DQU1fTUlOVVNcIixcbl07XG5cbmV4cG9ydCBjbGFzcyBHYW1lcGFkIHtcbiAgICBwdWJsaWMgZGF0YTogR29sZGVuU3VuO1xuXG4gICAgcHVibGljIExFRlQ6IG51bWJlcjtcbiAgICBwdWJsaWMgUklHSFQ6IG51bWJlcjtcbiAgICBwdWJsaWMgVVA6IG51bWJlcjtcbiAgICBwdWJsaWMgRE9XTjogbnVtYmVyO1xuXG4gICAgcHVibGljIEE6IG51bWJlcjtcbiAgICBwdWJsaWMgQjogbnVtYmVyO1xuICAgIHB1YmxpYyBMOiBudW1iZXI7XG4gICAgcHVibGljIFI6IG51bWJlcjtcblxuICAgIHB1YmxpYyBTRUxFQ1Q6IG51bWJlcjtcbiAgICBwdWJsaWMgU1RBUlQ6IG51bWJlcjtcblxuICAgIHB1YmxpYyBQU1kxOiBudW1iZXI7XG4gICAgcHVibGljIFBTWTI6IG51bWJlcjtcbiAgICBwdWJsaWMgUFNZMzogbnVtYmVyO1xuXG4gICAgcHVibGljIFpPT00xOiBudW1iZXI7XG4gICAgcHVibGljIFpPT00yOiBudW1iZXI7XG4gICAgcHVibGljIFpPT00zOiBudW1iZXI7XG5cbiAgICBwdWJsaWMgREVCVUdfUEhZU0lDUzogbnVtYmVyO1xuICAgIHB1YmxpYyBERUJVR19HUklEOiBudW1iZXI7XG4gICAgcHVibGljIERFQlVHX0tFWVM6IG51bWJlcjtcbiAgICBwdWJsaWMgREVCVUdfU1RBVFM6IG51bWJlcjtcbiAgICBwdWJsaWMgREVCVUdfRlBTOiBudW1iZXI7XG4gICAgcHVibGljIERFQlVHX1NMSURFUlM6IG51bWJlcjtcbiAgICBwdWJsaWMgREVCVUdfQ0FNX01JTlVTOiBudW1iZXI7XG4gICAgcHVibGljIERFQlVHX0NBTV9QTFVTOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBHb2xkZW5TdW4pIHtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplX2dhbWVwYWQoKTtcbiAgICB9XG5cbiAgICBpbml0aWFsaXplX2dhbWVwYWQoKSB7XG4gICAgICAgIGZvciAobGV0IGluZGV4IGluIGlucHV0X2lkcykge1xuICAgICAgICAgICAgdGhpc1tpbnB1dF9pZHNbaW5kZXhdXSA9XG4gICAgICAgICAgICAgICAgUGhhc2VyLktleWJvYXJkW3RoaXMuZGF0YS5kYnMuaW5pdF9kYi5kZWZhdWx0X2lucHV0c1tpbnB1dF9pZHNbaW5kZXhdLnRvTG93ZXJDYXNlKCldXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldF9pZF9ieV9rZXkoa2V5OiBudW1iZXIpIHtcbiAgICAgICAgZm9yIChsZXQgcHJvcGVydHkgaW4gdGhpcykge1xuICAgICAgICAgICAgbGV0IHByb3BlcnR5X25hbWUgPSBwcm9wZXJ0eSBhcyBzdHJpbmc7XG4gICAgICAgICAgICBpZiAodGhpc1twcm9wZXJ0eV9uYW1lXSA9PT0ga2V5KSByZXR1cm4gcHJvcGVydHlfbmFtZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBvcHBvc2l0ZV9rZXkoa2V5OiBudW1iZXIpIHtcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgdGhpcy5MRUZUOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLlJJR0hUO1xuICAgICAgICAgICAgY2FzZSB0aGlzLlJJR0hUOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLkxFRlQ7XG4gICAgICAgICAgICBjYXNlIHRoaXMuVVA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuRE9XTjtcbiAgICAgICAgICAgIGNhc2UgdGhpcy5ET1dOOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLlVQO1xuXG4gICAgICAgICAgICBjYXNlIHRoaXMuQTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5CO1xuICAgICAgICAgICAgY2FzZSB0aGlzLkI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuQTtcbiAgICAgICAgICAgIGNhc2UgdGhpcy5MOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLlI7XG4gICAgICAgICAgICBjYXNlIHRoaXMuUjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5MO1xuXG4gICAgICAgICAgICBjYXNlIHRoaXMuU0VMRUNUOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLlNUQVJUO1xuICAgICAgICAgICAgY2FzZSB0aGlzLlNUQVJUOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLlNFTEVDVDtcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBrZXlzKCkge1xuICAgICAgICBsZXQga2V5czogbnVtYmVyW10gPSBbXTtcblxuICAgICAgICBmb3IgKGxldCBwcm9wZXJ0eSBpbiB0aGlzKSB7XG4gICAgICAgICAgICBsZXQgcHJvcGVydHlfbmFtZSA9IHByb3BlcnR5IGFzIHN0cmluZztcbiAgICAgICAgICAgIGlmIChpbnB1dF9pZHMuaW5jbHVkZXMocHJvcGVydHlfbmFtZSkpIGtleXMucHVzaCh0aGlzW3Byb3BlcnR5X25hbWVdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBrZXlzO1xuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=